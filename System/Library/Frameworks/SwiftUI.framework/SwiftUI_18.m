void specialized PlatformViewIdentifiedViews.value.getter(uint64_t a1@<X8>)
{
  uint64_t Value;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  uint64_t vars8;

  if (*(double *)AGGraphGetValue() < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>();
    Value = AGGraphGetValue();
    v3 = *(void *)(Value + 64);
    v4 = *(unsigned __int8 *)(Value + 72);
    v5 = *(void **)(Value + 80);
    v6 = *(void **)(Value + 88);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of Environment<HoverEffect?>.Content(v3, v4);
    v9 = v5;
    v8 = v6;
    AGGraphClearUpdate();
    v7 = *(id *)((char *)v9 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v9) + 0x78));
    objc_msgSend(v9, sel_bounds);
    objc_msgSend(v7, sel_frameForAlignmentRect_);
    objc_msgSend(v7, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    outlined consume of Environment<AnyShapeStyle?>.Content(v3, v4);
  }
}

{
  uint64_t Value;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  uint64_t vars8;

  if (*(double *)AGGraphGetValue() < 0.0)
  {
    __break(1u);
    goto LABEL_8;
  }
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
  Value = AGGraphGetValue();
  v3 = *(void **)(Value + 8);
  v18 = *(id *)Value;
  v4 = v3;
  swift_retain();
  AGGraphClearUpdate();
  v5 = *(void **)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x78));
  v6 = objc_msgSend(v5, sel_view);
  if (!v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v7 = v6;
  v8 = objc_msgSend(v5, sel_view);
  if (!v8)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v9 = v8;
  objc_msgSend(v4, sel_bounds);
  objc_msgSend(v9, sel_frameForAlignmentRect_);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;

  objc_msgSend(v7, sel_setFrame_, v11, v13, v15, v17);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 160) = 2;
  AGGraphSetUpdate();
  swift_release();
}

{
  uint64_t Value;
  uint64_t v3;
  char v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t vars8;

  if (*(double *)AGGraphGetValue() < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
    Value = AGGraphGetValue();
    v3 = *(void *)Value;
    v4 = *(unsigned char *)(Value + 8);
    v5 = *(void **)(Value + 16);
    outlined copy of Environment<Bool>.Content(*(void *)Value, v4);
    v7 = v5;
    AGGraphClearUpdate();
    v6 = *(id *)((char *)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x78));
    objc_msgSend(v7, sel_bounds);
    objc_msgSend(v6, sel_frameForAlignmentRect_);
    objc_msgSend(v6, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    outlined consume of Environment<Bool>.Content(v3, v4);
  }
}

{
  uint64_t Value;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  id v18;
  uint64_t vars8;

  if (*(double *)AGGraphGetValue() < 0.0)
  {
    __break(1u);
    goto LABEL_8;
  }
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
  Value = AGGraphGetValue();
  v3 = *(void **)(Value + 8);
  v18 = *(id *)Value;
  v4 = v3;
  AGGraphClearUpdate();
  v5 = *(void **)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x78));
  v6 = objc_msgSend(v5, sel_view);
  if (!v6)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v7 = v6;
  v8 = objc_msgSend(v5, sel_view);
  if (!v8)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v9 = v8;
  objc_msgSend(v4, sel_bounds);
  objc_msgSend(v9, sel_frameForAlignmentRect_);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v17 = v16;

  objc_msgSend(v7, sel_setFrame_, v11, v13, v15, v17);
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 160) = 2;
  AGGraphSetUpdate();
}

double *specialized PlatformViewIdentifiedViews.value.getter@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t (*a3)(void)@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1(0);
  MEMORY[0x1F4188790](v7);
  v9 = (char *)&v14 - v8;
  result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)v9, a2);
    AGGraphClearUpdate();
    v12 = *(void **)&v9[*(int *)(v7 + 36)];
    id v13 = *(id *)((char *)v12 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v12) + 0x78));
    objc_msgSend(v12, sel_bounds);
    objc_msgSend(v13, sel_frameForAlignmentRect_);
    objc_msgSend(v13, sel_setFrame_);

    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(unsigned char *)(a4 + 160) = 2;
    AGGraphSetUpdate();
    return (double *)_s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v9, a3);
  }
  return result;
}

uint64_t specialized PlatformArchivedDisplayList.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>.Factory, (unint64_t *)&lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.Factory);
}

{
  return specialized PlatformArchivedDisplayList.value.getter(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>.Factory, &lazy protocol witness table cache variable for type PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>.Factory and conformance PlatformArchivedDisplayList<A>.Factory, (void (*)(uint64_t))type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>.Factory);
}

uint64_t specialized PlatformArchivedDisplayList.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), unint64_t *a5, void (*a6)(uint64_t))
{
  DisplayList.Version.init(forUpdate:)();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 40) = a4(0);
  *(void *)(v9 + 48) = _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0(a5, a6);
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  uint64_t v10 = swift_retain();
  MEMORY[0x18C114450](v10);
  DisplayList.Item.init(_:frame:identity:version:)();
  outlined copy of DisplayList.Item.Value(v12, v13);
  DisplayList.init(_:)();
  swift_release();

  return outlined consume of DisplayList.Item.Value(v12, v13);
}

void specialized RemoteSheetContainerVCWriter.value.getter(uint64_t a1@<X8>)
{
  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSlider>>();
  uint64_t Value = AGGraphGetValue();
  v3 = *(void **)(*(void *)(Value + 80) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(Value + 80)) + 0x78));
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
  uint64_t v12 = &unk_1ED540C98;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    id v4 = v3;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v10 = 0;
  }
  else
  {
    v11 = &unk_1ED519510;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      id v7 = v3;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    id v5 = v3;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v10 = 1;
  }
  outlined init with take of _DraggingModifier?((uint64_t)&v9, a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(a1, (uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  int v6 = v10;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v6 == 255 || !swift_weakLoadStrong())
  {
  }
  else
  {
    uint64_t v9 = AGCreateWeakAttribute();
    v8[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  void *v3;
  id v4;
  id v5;
  int v6;
  id v7;
  unsigned char v8[16];
  uint64_t v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;

  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>();
  uint64_t Value = AGGraphGetValue();
  v3 = *(void **)(*(void *)(Value + 56) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(Value + 56)) + 0x78));
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
  uint64_t v12 = &unk_1ED540C98;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    id v4 = v3;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v10 = 0;
  }
  else
  {
    v11 = &unk_1ED519510;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      id v7 = v3;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    id v5 = v3;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v10 = 1;
  }
  outlined init with take of _DraggingModifier?((uint64_t)&v9, a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(a1, (uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  int v6 = v10;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v6 == 255 || !swift_weakLoadStrong())
  {
  }
  else
  {
    uint64_t v9 = AGCreateWeakAttribute();
    v8[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  id v3;
  int v4;
  unsigned char v5[16];
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  void *v10;

  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  v3 = *(id *)((char *)v10 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v10) + 0x78));
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
  id v7 = &unk_1ED540C98;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    uint64_t v9 = 0;
LABEL_5:
    outlined init with take of _DraggingModifier?((uint64_t)&v8, a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    goto LABEL_6;
  }
  int v6 = &unk_1ED519510;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    uint64_t v9 = 1;
    goto LABEL_5;
  }
LABEL_6:
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(a1, (uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  id v4 = v9;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v4 == 255 || !swift_weakLoadStrong())
  {
  }
  else
  {
    uint64_t v8 = AGCreateWeakAttribute();
    v5[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  void *v3;
  id v4;
  id v5;
  int v6;
  id v7;
  unsigned char v8[16];
  uint64_t v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;

  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
  uint64_t Value = AGGraphGetValue();
  v3 = *(void **)(*(void *)(Value + 88) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(Value + 88)) + 0x78));
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
  uint64_t v12 = &unk_1ED540C98;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    id v4 = v3;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v10 = 0;
  }
  else
  {
    v11 = &unk_1ED519510;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      id v7 = v3;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    id v5 = v3;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v10 = 1;
  }
  outlined init with take of _DraggingModifier?((uint64_t)&v9, a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(a1, (uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  int v6 = v10;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v6 == 255 || !swift_weakLoadStrong())
  {
  }
  else
  {
    uint64_t v9 = AGCreateWeakAttribute();
    v8[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  id v3;
  int v4;
  unsigned char v5[16];
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  void *v10;

  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  v3 = *(id *)((char *)v10 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v10) + 0x78));
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
  id v7 = &unk_1ED540C98;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    uint64_t v9 = 0;
LABEL_5:
    outlined init with take of _DraggingModifier?((uint64_t)&v8, a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    goto LABEL_6;
  }
  int v6 = &unk_1ED519510;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    uint64_t v9 = 1;
    goto LABEL_5;
  }
LABEL_6:
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(a1, (uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  id v4 = v9;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v4 == 255 || !swift_weakLoadStrong())
  {
  }
  else
  {
    uint64_t v8 = AGCreateWeakAttribute();
    v5[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  void *v3;
  id v4;
  id v5;
  int v6;
  id v7;
  unsigned char v8[16];
  uint64_t v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;

  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
  uint64_t Value = AGGraphGetValue();
  v3 = *(void **)(*(void *)(Value + 40) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(Value + 40)) + 0x78));
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
  uint64_t v12 = &unk_1ED540C98;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    id v4 = v3;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v10 = 0;
  }
  else
  {
    v11 = &unk_1ED519510;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      id v7 = v3;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    id v5 = v3;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v10 = 1;
  }
  outlined init with take of _DraggingModifier?((uint64_t)&v9, a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(a1, (uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  int v6 = v10;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v6 == 255 || !swift_weakLoadStrong())
  {
  }
  else
  {
    uint64_t v9 = AGCreateWeakAttribute();
    v8[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  void *v3;
  id v4;
  id v5;
  int v6;
  id v7;
  unsigned char v8[16];
  uint64_t v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;

  type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
  uint64_t Value = AGGraphGetValue();
  v3 = *(void **)(*(void *)(Value + 176) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(Value + 176)) + 0x78));
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
  uint64_t v12 = &unk_1ED540C98;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    id v4 = v3;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v10 = 0;
  }
  else
  {
    v11 = &unk_1ED519510;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      id v7 = v3;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    id v5 = v3;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v10 = 1;
  }
  outlined init with take of _DraggingModifier?((uint64_t)&v9, a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(a1, (uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  int v6 = v10;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v6 == 255 || !swift_weakLoadStrong())
  {
  }
  else
  {
    uint64_t v9 = AGCreateWeakAttribute();
    v8[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  id v3;
  int v4;
  unsigned char v5[16];
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  void *v10;

  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  v3 = *(id *)((char *)v10 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v10) + 0x78));
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
  id v7 = &unk_1ED540C98;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    uint64_t v9 = 0;
LABEL_5:
    outlined init with take of _DraggingModifier?((uint64_t)&v8, a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    goto LABEL_6;
  }
  int v6 = &unk_1ED519510;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    uint64_t v9 = 1;
    goto LABEL_5;
  }
LABEL_6:
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(a1, (uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  id v4 = v9;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v4 == 255 || !swift_weakLoadStrong())
  {
  }
  else
  {
    uint64_t v8 = AGCreateWeakAttribute();
    v5[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  id v3;
  int v4;
  unsigned char v5[16];
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  void *v10;

  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  v3 = *(id *)((char *)v10 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v10) + 0x78));
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
  id v7 = &unk_1ED540C98;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    uint64_t v9 = 0;
LABEL_5:
    outlined init with take of _DraggingModifier?((uint64_t)&v8, a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    goto LABEL_6;
  }
  int v6 = &unk_1ED519510;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    uint64_t v9 = 1;
    goto LABEL_5;
  }
LABEL_6:
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(a1, (uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  id v4 = v9;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v4 == 255 || !swift_weakLoadStrong())
  {
  }
  else
  {
    uint64_t v8 = AGCreateWeakAttribute();
    v5[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  id v3;
  int v4;
  unsigned char v5[16];
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 v9;
  void *v10;

  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  v3 = *(id *)((char *)v10 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v10) + 0x78));
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
  id v7 = &unk_1ED540C98;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    uint64_t v9 = 0;
LABEL_5:
    outlined init with take of _DraggingModifier?((uint64_t)&v8, a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    goto LABEL_6;
  }
  int v6 = &unk_1ED519510;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v5, (uint64_t)&v8, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    uint64_t v9 = 1;
    goto LABEL_5;
  }
LABEL_6:
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(a1, (uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  id v4 = v9;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v8, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v4 == 255 || !swift_weakLoadStrong())
  {
  }
  else
  {
    uint64_t v8 = AGCreateWeakAttribute();
    v5[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  void *v3;
  id v4;
  id v5;
  int v6;
  id v7;
  unsigned char v8[16];
  uint64_t v9;
  unsigned __int8 v10;
  void *v11;
  void *v12;

  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
  uint64_t Value = AGGraphGetValue();
  v3 = *(void **)(*(void *)(Value + 168) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(Value + 168)) + 0x78));
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
  uint64_t v12 = &unk_1ED540C98;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    id v4 = v3;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v10 = 0;
  }
  else
  {
    v11 = &unk_1ED519510;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      id v7 = v3;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v8, (uint64_t)&v9, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    id v5 = v3;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v10 = 1;
  }
  outlined init with take of _DraggingModifier?((uint64_t)&v9, a1, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(a1, (uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  int v6 = v10;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v6 == 255 || !swift_weakLoadStrong())
  {
  }
  else
  {
    uint64_t v9 = AGCreateWeakAttribute();
    v8[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

void specialized RemoteSheetContainerVCWriter.value.getter(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  a1(0);
  uint64_t Value = AGGraphGetValue();
  id v4 = *(void **)(*(void *)(Value + 16) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(Value + 16)) + 0x78));
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = -1;
  unint64_t v13 = &unk_1ED540C98;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v9, (uint64_t)&v10, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    id v5 = v4;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a2, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v11 = 0;
  }
  else
  {
    uint64_t v12 = &unk_1ED519510;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      id v8 = v4;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v9, (uint64_t)&v10, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    id v6 = v4;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a2, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v11 = 1;
  }
  outlined init with take of _DraggingModifier?((uint64_t)&v10, a2, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(a2, (uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  int v7 = v11;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v7 == 255 || !swift_weakLoadStrong())
  {
  }
  else
  {
    uint64_t v10 = AGCreateWeakAttribute();
    v9[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  void *v4;
  id v5;
  id v6;
  int v7;
  id v8;
  unsigned char v9[16];
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  void *v13;

  a1(0);
  uint64_t Value = AGGraphGetValue();
  id v4 = *(void **)(*(void *)(Value + 8) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(Value + 8)) + 0x78));
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = -1;
  unint64_t v13 = &unk_1ED540C98;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v9, (uint64_t)&v10, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    id v5 = v4;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a2, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v11 = 0;
  }
  else
  {
    uint64_t v12 = &unk_1ED519510;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      id v8 = v4;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v9, (uint64_t)&v10, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    id v6 = v4;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a2, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v11 = 1;
  }
  outlined init with take of _DraggingModifier?((uint64_t)&v10, a2, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(a2, (uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  int v7 = v11;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v7 == 255 || !swift_weakLoadStrong())
  {
  }
  else
  {
    uint64_t v10 = AGCreateWeakAttribute();
    v9[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

{
  uint64_t Value;
  void *v4;
  id v5;
  id v6;
  int v7;
  id v8;
  unsigned char v9[16];
  uint64_t v10;
  unsigned __int8 v11;
  void *v12;
  void *v13;

  a1(0);
  uint64_t Value = AGGraphGetValue();
  id v4 = *(void **)(*(void *)(Value + 48) + *(void *)((*MEMORY[0x1E4FBC8C8] & **(void **)(Value + 48)) + 0x78));
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = -1;
  unint64_t v13 = &unk_1ED540C98;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v9, (uint64_t)&v10, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    id v5 = v4;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a2, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v11 = 0;
  }
  else
  {
    uint64_t v12 = &unk_1ED519510;
    if (!swift_dynamicCastObjCProtocolConditional())
    {
      id v8 = v4;
      goto LABEL_6;
    }
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v9, (uint64_t)&v10, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    id v6 = v4;
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a2, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v11 = 1;
  }
  outlined init with take of _DraggingModifier?((uint64_t)&v10, a2, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
LABEL_6:
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(a2, (uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  int v7 = v11;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v10, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v7 == 255 || !swift_weakLoadStrong())
  {
  }
  else
  {
    uint64_t v10 = AGCreateWeakAttribute();
    v9[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

void specialized RemoteSheetContainerVCWriter.value.getter(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = &v16[-v8];
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)v9, a2);
  unsigned __int8 v11 = *(void **)&v9[*(int *)(v7 + 36)];
  id v12 = *(id *)((char *)v11 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v11) + 0x78));
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v9, a3);
  *(void *)a4 = 0;
  *(unsigned char *)(a4 + 8) = -1;
  v20 = &unk_1ED540C98;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    uint64_t v13 = swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0(v13, (uint64_t)&v17, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteSheetContaining>);
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a4, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v18 = 0;
LABEL_5:
    outlined init with take of _DraggingModifier?((uint64_t)&v17, a4, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    goto LABEL_6;
  }
  v19 = &unk_1ED519510;
  if (swift_dynamicCastObjCProtocolConditional())
  {
    swift_unknownObjectWeakInit();
    uint64_t v14 = swift_unknownObjectWeakAssign();
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0(v14, (uint64_t)&v17, (uint64_t (*)(void))type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>);
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(a4, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
    unsigned __int8 v18 = 1;
    goto LABEL_5;
  }
LABEL_6:
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(a4, (uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  int v15 = v18;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v17, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  if (v15 == 255 || !swift_weakLoadStrong())
  {
  }
  else
  {
    uint64_t v17 = AGCreateWeakAttribute();
    v16[15] = 1;
    lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation();
    default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();

    swift_release();
  }
}

uint64_t specialized CommandGroup.MakeList.value.getter()
{
  type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>();
  MEMORY[0x1F4188790](v0);
  v2 = (char *)v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for CommandsList.Item(0);
  uint64_t v4 = v3 - 8;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>);
  _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v2, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for CommandOperation);
  type metadata accessor for CommandsList.Item.Value(0);
  swift_storeEnumTagMultiPayload();
  DisplayList.Version.init(forUpdate:)();
  *(void *)&v7[*(int *)(v4 + 28)] = v12[1];
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CommandsList.Item>, type metadata accessor for CommandsList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_18834BB80;
  _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v7, v10 + v9, type metadata accessor for CommandsList.Item);
  return v10;
}

uint64_t specialized MakeRepresentable.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2 = BYTE4(a1);
  type metadata accessor for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for UICollectionViewListCoordinator);
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v5 = *Value + *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)*Value) + 0x100);
  swift_beginAccess();
  if (*(void *)(v5 + 8))
  {
    outlined init with copy of Binding<SelectionManagerBox<AnyHashable>>(v5, (uint64_t)v18);
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41638];
    type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>, MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](v19);
    outlined destroy of SelectionManagerBox<AnyHashable>?((uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>, v6);
  }
  else
  {
    uint64_t v20 = 0;
    memset(v19, 0, sizeof(v19));
    char v21 = -1;
  }
  outlined destroy of SelectionManagerBox<AnyHashable>?((uint64_t)v19, &lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>?, MEMORY[0x1E4FBB718]);
  id v7 = *(id *)AGGraphGetValue();
  unint64_t v8 = AGCreateWeakAttribute();
  int v9 = v8;
  unint64_t v10 = HIDWORD(v8);
  unint64_t v11 = AGCreateWeakAttribute();
  int v12 = v11;
  unint64_t v13 = HIDWORD(v11);
  unint64_t v14 = AGCreateWeakAttribute();
  int v15 = v14;
  unint64_t v16 = HIDWORD(v14);
  uint64_t result = AGCreateWeakAttribute();
  *(void *)a2 = v7;
  *(unsigned char *)(a2 + 8) = v2 & 1;
  *(_DWORD *)(a2 + 12) = v9;
  *(_DWORD *)(a2 + 16) = v10;
  *(_DWORD *)(a2 + 20) = v12;
  *(_DWORD *)(a2 + 24) = v13;
  *(_DWORD *)(a2 + 28) = v15;
  *(_DWORD *)(a2 + 32) = v16;
  *(void *)(a2 + 36) = result;
  return result;
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance CustomizableURLDocumentViewControllerRepresentable(void *a1@<X8>)
{
  *a1 = qword_1ED4766A8;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance CustomizableURLDocumentViewControllerRepresentable@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for View.body.getter in conformance CustomizableURLDocumentViewControllerRepresentable()
{
}

void protocol witness for View.body.getter in conformance NavigationSplitRepresentable()
{
}

uint64_t specialized ArchivableDisplayList.value.getter(int a1, uint64_t a2, uint64_t a3)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a3))
  {
    DisplayList.init()();
  }
  else
  {
    AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  long long v4 = (void *)swift_allocObject();
  uint64_t Value = AGGraphGetValue();
  uint64_t v6 = *(void *)Value;
  char v7 = *(unsigned char *)(Value + 8);
  char v8 = *(unsigned char *)(Value + 9);
  AGGraphGetValue();
  double v9 = MEMORY[0x18C114450]();
  uint64_t v11 = v10;
  type metadata accessor for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>();
  v4[5] = v12;
  v4[6] = _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0(&lazy protocol witness table cache variable for type ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<HandGestureShortcutInteractiveControl.HandGestureShortcutPreferenceWriter>);
  uint64_t v13 = swift_allocObject();
  v4[2] = v13;
  *(void *)(v13 + 16) = v6;
  *(unsigned char *)(v13 + 24) = v7;
  *(unsigned char *)(v13 + 25) = v8;
  *(_DWORD *)(v13 + 28) = a1;
  *(double *)(v13 + 32) = v9;
  *(void *)(v13 + 40) = v11;
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  uint64_t v14 = swift_retain();
  MEMORY[0x18C114450](v14);
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  outlined copy of DisplayList.Item.Value(v16, v17);
  DisplayList.init(_:)();
  swift_release();

  return outlined consume of DisplayList.Item.Value(v16, v17);
}

{
  void *v4;
  uint64_t Value;
  uint64_t v6;
  char v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t vars8;

  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a3))
  {
    DisplayList.init()();
  }
  else
  {
    AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  long long v4 = (void *)swift_allocObject();
  uint64_t Value = AGGraphGetValue();
  uint64_t v6 = *(void *)Value;
  char v7 = *(unsigned char *)(Value + 8);
  AGGraphGetValue();
  char v8 = outlined copy of Environment<Bool>.Content(v6, v7);
  double v9 = MEMORY[0x18C114450](v8);
  uint64_t v11 = v10;
  type metadata accessor for ArchivableFactory<InvalidatableContentModifier>();
  v4[5] = v12;
  v4[6] = _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0(&lazy protocol witness table cache variable for type ArchivableFactory<InvalidatableContentModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<InvalidatableContentModifier>);
  uint64_t v13 = swift_allocObject();
  v4[2] = v13;
  *(void *)(v13 + 16) = v6;
  *(unsigned char *)(v13 + 24) = v7;
  *(_DWORD *)(v13 + 28) = a1;
  *(double *)(v13 + 32) = v9;
  *(void *)(v13 + 40) = v11;
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  uint64_t v14 = swift_retain();
  MEMORY[0x18C114450](v14);
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  outlined copy of DisplayList.Item.Value(v16, v17);
  DisplayList.init(_:)();
  swift_release();

  return outlined consume of DisplayList.Item.Value(v16, v17);
}

{
  void *v4;
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t vars8;

  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a3))
  {
    DisplayList.init()();
  }
  else
  {
    AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  long long v4 = (void *)swift_allocObject();
  uint64_t Value = AGGraphGetValue();
  uint64_t v6 = *(void *)Value;
  char v7 = *(void *)(Value + 8);
  char v8 = *(unsigned char *)(Value + 16);
  double v9 = *(void *)(Value + 40);
  uint64_t v10 = *(unsigned char *)(Value + 48);
  AGGraphGetValue();
  uint64_t v20 = *(_OWORD *)(Value + 24);
  outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v8);
  uint64_t v11 = (id)v20;
  uint64_t v12 = swift_retain();
  uint64_t v13 = MEMORY[0x18C114450](v12);
  int v15 = v14;
  type metadata accessor for ArchivableFactory<ArchivableButtonAppIntentModifier>();
  v4[5] = v16;
  v4[6] = _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableButtonAppIntentModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableButtonAppIntentModifier>);
  unint64_t v17 = swift_allocObject();
  v4[2] = v17;
  *(void *)(v17 + 16) = v6;
  *(void *)(v17 + 24) = v7;
  *(unsigned char *)(v17 + 32) = v8;
  *(_OWORD *)(v17 + 40) = v20;
  *(void *)(v17 + 56) = v9;
  *(unsigned char *)(v17 + 64) = v10;
  *(_DWORD *)(v17 + 68) = a1;
  *(double *)(v17 + 72) = v13;
  *(void *)(v17 + 80) = v15;
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  unsigned __int8 v18 = swift_retain();
  MEMORY[0x18C114450](v18);
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  outlined copy of DisplayList.Item.Value(v21, v22);
  DisplayList.init(_:)();
  swift_release();

  return outlined consume of DisplayList.Item.Value(v21, v22);
}

{
  void *v4;
  uint64_t Value;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  long long v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t vars8;

  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a3))
  {
    DisplayList.init()();
  }
  else
  {
    AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  long long v4 = (void *)swift_allocObject();
  uint64_t Value = AGGraphGetValue();
  uint64_t v6 = *(unsigned char *)Value;
  char v7 = *(void *)(Value + 8);
  char v8 = *(void *)(Value + 16);
  double v9 = *(void *)(Value + 24);
  uint64_t v10 = *(unsigned char *)(Value + 32);
  uint64_t v11 = *(void *)(Value + 56);
  char v21 = *(unsigned char *)(Value + 64);
  AGGraphGetValue();
  swift_retain();
  v22 = *(_OWORD *)(Value + 40);
  outlined copy of Environment<AppIntentExecutor?>.Content(v8, v9, v10);
  uint64_t v12 = (id)v22;
  uint64_t v13 = swift_retain();
  uint64_t v14 = MEMORY[0x18C114450](v13);
  uint64_t v16 = v15;
  type metadata accessor for ArchivableFactory<ArchivableToggleAppIntentModifier>();
  v4[5] = v17;
  v4[6] = _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableToggleAppIntentModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableToggleAppIntentModifier>);
  unsigned __int8 v18 = swift_allocObject();
  v4[2] = v18;
  *(unsigned char *)(v18 + 16) = v6;
  *(void *)(v18 + 24) = v7;
  *(void *)(v18 + 32) = v8;
  *(void *)(v18 + 40) = v9;
  *(unsigned char *)(v18 + 48) = v10;
  *(_OWORD *)(v18 + 56) = v22;
  *(void *)(v18 + 72) = v11;
  *(unsigned char *)(v18 + 80) = v21;
  *(_DWORD *)(v18 + 84) = a1;
  *(double *)(v18 + 88) = v14;
  *(void *)(v18 + 96) = v16;
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  v19 = swift_retain();
  MEMORY[0x18C114450](v19);
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  outlined copy of DisplayList.Item.Value(v23, v24);
  DisplayList.init(_:)();
  swift_release();

  return outlined consume of DisplayList.Item.Value(v23, v24);
}

{
  void *v4;
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t vars8;

  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a3))
  {
    DisplayList.init()();
  }
  else
  {
    AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  long long v4 = (void *)swift_allocObject();
  uint64_t Value = AGGraphGetValue();
  uint64_t v6 = *(void *)Value;
  char v7 = *(void *)(Value + 8);
  char v8 = *(unsigned char *)(Value + 16);
  double v9 = *(void *)(Value + 24);
  AGGraphGetValue();
  outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v8);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = MEMORY[0x18C114450](v10);
  uint64_t v13 = v12;
  type metadata accessor for ArchivableFactory<ArchivableAccessibilityViewModifier>();
  v4[5] = v14;
  v4[6] = _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableAccessibilityViewModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableAccessibilityViewModifier>);
  int v15 = swift_allocObject();
  v4[2] = v15;
  *(void *)(v15 + 16) = v6;
  *(void *)(v15 + 24) = v7;
  *(unsigned char *)(v15 + 32) = v8;
  *(void *)(v15 + 40) = v9;
  *(_DWORD *)(v15 + 48) = a1;
  *(double *)(v15 + 56) = v11;
  *(void *)(v15 + 64) = v13;
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  uint64_t v16 = swift_retain();
  MEMORY[0x18C114450](v16);
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  outlined copy of DisplayList.Item.Value(v18, v19);
  DisplayList.init(_:)();
  swift_release();

  return outlined consume of DisplayList.Item.Value(v18, v19);
}

{
  void *v4;
  uint64_t Value;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;
  uint64_t vars8;

  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a3))
  {
    DisplayList.init()();
  }
  else
  {
    AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  long long v4 = (void *)swift_allocObject();
  uint64_t Value = AGGraphGetValue();
  uint64_t v6 = *(void *)Value;
  char v7 = *(void *)(Value + 8);
  char v8 = *(unsigned char *)(Value + 16);
  double v9 = *(void *)(Value + 24);
  AGGraphGetValue();
  outlined copy of Environment<AppIntentExecutor?>.Content(v6, v7, v8);
  uint64_t v10 = swift_bridgeObjectRetain();
  uint64_t v11 = MEMORY[0x18C114450](v10);
  uint64_t v13 = v12;
  type metadata accessor for ArchivableFactory<ArchivableAccessibilityActionModifier>();
  v4[5] = v14;
  v4[6] = _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableAccessibilityActionModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableAccessibilityActionModifier>);
  int v15 = swift_allocObject();
  v4[2] = v15;
  *(void *)(v15 + 16) = v6;
  *(void *)(v15 + 24) = v7;
  *(unsigned char *)(v15 + 32) = v8;
  *(void *)(v15 + 40) = v9;
  *(_DWORD *)(v15 + 48) = a1;
  *(double *)(v15 + 56) = v11;
  *(void *)(v15 + 64) = v13;
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  MEMORY[0x18C10C240]();
  AGGraphGetValue();
  uint64_t v16 = swift_retain();
  MEMORY[0x18C114450](v16);
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  DisplayList.Item.canonicalize(options:)();
  outlined copy of DisplayList.Item.Value(v18, v19);
  DisplayList.init(_:)();
  swift_release();

  return outlined consume of DisplayList.Item.Value(v18, v19);
}

uint64_t specialized ArchivableDisplayList.value.getter@<X0>(int a1@<W0>, unint64_t a2@<X2>, int a3@<W3>, uint64_t a4@<X8>)
{
  int v31 = a3;
  uint64_t v32 = a4;
  unint64_t v5 = HIDWORD(a2);
  uint64_t v6 = type metadata accessor for ArchivablePlaybackButtonViewModifier(0);
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*MEMORY[0x1E4F4E7A0] == v5)
  {
    DisplayList.init()();
    uint64_t v9 = v43;
    int v30 = WORD4(v43);
    int v29 = BYTE10(v43);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v9 = *(void *)Value;
    int v30 = *(unsigned __int16 *)(Value + 8);
    int v29 = *(unsigned __int8 *)(Value + 10);
    swift_bridgeObjectRetain();
  }
  uint64_t v11 = (uint64_t *)swift_allocObject();
  uint64_t v12 = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(v12, (uint64_t)v8, type metadata accessor for ArchivablePlaybackButtonViewModifier);
  uint64_t v13 = (long long *)AGGraphGetValue();
  long long v14 = v13[1];
  long long v43 = *v13;
  long long v44 = v14;
  double v15 = MEMORY[0x18C114450]();
  uint64_t v17 = v16;
  type metadata accessor for ArchivableFactory<ArchivablePlaybackButtonViewModifier>();
  uint64_t v19 = v18;
  v11[5] = v18;
  v11[6] = _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivablePlaybackButtonViewModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivablePlaybackButtonViewModifier>);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11 + 2);
  _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v8, (uint64_t)boxed_opaque_existential_1, type metadata accessor for ArchivablePlaybackButtonViewModifier);
  *(_DWORD *)((char *)boxed_opaque_existential_1 + *(int *)(v19 + 52)) = a1;
  char v21 = (double *)((char *)boxed_opaque_existential_1 + *(int *)(v19 + 56));
  *char v21 = v15;
  *((void *)v21 + 1) = v17;
  long long v43 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  long long v43 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  *(void *)&long long v33 = v11;
  *((void *)&v33 + 1) = 0x4000000C00000000;
  *(void *)&long long v34 = v9;
  BYTE10(v34) = v29;
  WORD4(v34) = v30;
  v22 = (long long *)AGGraphGetValue();
  long long v23 = v22[1];
  long long v43 = *v22;
  long long v44 = v23;
  uint64_t v24 = swift_retain();
  MEMORY[0x18C114450](v24);
  int v42 = a1;
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  LOBYTE(v33) = v31;
  DisplayList.Item.canonicalize(options:)();
  uint64_t v25 = v46;
  unint64_t v26 = v47;
  long long v33 = v43;
  long long v34 = v44;
  uint64_t v35 = v45;
  uint64_t v36 = v46;
  unint64_t v37 = v47;
  uint64_t v38 = v48;
  char v40 = v50;
  __int16 v39 = v49;
  int v41 = v51;
  outlined copy of DisplayList.Item.Value(v46, v47);
  DisplayList.init(_:)();
  swift_release();
  return outlined consume of DisplayList.Item.Value(v25, v26);
}

{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t Value;
  uint64_t *v11;
  uint64_t v12;
  long long *v13;
  long long v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *boxed_opaque_existential_1;
  double *v21;
  long long *v22;
  long long v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  long long v33;
  long long v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __int16 v39;
  char v40;
  int v41;
  int v42;
  long long v43;
  long long v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __int16 v49;
  char v50;
  int v51;

  int v31 = a3;
  uint64_t v32 = a4;
  unint64_t v5 = HIDWORD(a2);
  uint64_t v6 = type metadata accessor for ArchivableLinkModifier(0);
  MEMORY[0x1F4188790](v6);
  char v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*MEMORY[0x1E4F4E7A0] == v5)
  {
    DisplayList.init()();
    uint64_t v9 = v43;
    int v30 = WORD4(v43);
    int v29 = BYTE10(v43);
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    uint64_t v9 = *(void *)Value;
    int v30 = *(unsigned __int16 *)(Value + 8);
    int v29 = *(unsigned __int8 *)(Value + 10);
    swift_bridgeObjectRetain();
  }
  uint64_t v11 = (uint64_t *)swift_allocObject();
  uint64_t v12 = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(v12, (uint64_t)v8, type metadata accessor for ArchivableLinkModifier);
  uint64_t v13 = (long long *)AGGraphGetValue();
  long long v14 = v13[1];
  long long v43 = *v13;
  long long v44 = v14;
  double v15 = MEMORY[0x18C114450]();
  uint64_t v17 = v16;
  type metadata accessor for ArchivableFactory<ArchivableLinkModifier>();
  uint64_t v19 = v18;
  v11[5] = v18;
  v11[6] = _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0(&lazy protocol witness table cache variable for type ArchivableFactory<ArchivableLinkModifier> and conformance ArchivableFactory<A>, (void (*)(uint64_t))type metadata accessor for ArchivableFactory<ArchivableLinkModifier>);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11 + 2);
  _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v8, (uint64_t)boxed_opaque_existential_1, type metadata accessor for ArchivableLinkModifier);
  *(_DWORD *)((char *)boxed_opaque_existential_1 + *(int *)(v19 + 52)) = a1;
  char v21 = (double *)((char *)boxed_opaque_existential_1 + *(int *)(v19 + 56));
  *char v21 = v15;
  *((void *)v21 + 1) = v17;
  long long v43 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  long long v43 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  *(void *)&long long v33 = v11;
  *((void *)&v33 + 1) = 0x4000000C00000000;
  *(void *)&long long v34 = v9;
  BYTE10(v34) = v29;
  WORD4(v34) = v30;
  v22 = (long long *)AGGraphGetValue();
  long long v23 = v22[1];
  long long v43 = *v22;
  long long v44 = v23;
  uint64_t v24 = swift_retain();
  MEMORY[0x18C114450](v24);
  int v42 = a1;
  DisplayList.Version.init(forUpdate:)();
  DisplayList.Item.init(_:frame:identity:version:)();
  LOBYTE(v33) = v31;
  DisplayList.Item.canonicalize(options:)();
  uint64_t v25 = v46;
  unint64_t v26 = v47;
  long long v33 = v43;
  long long v34 = v44;
  uint64_t v35 = v45;
  uint64_t v36 = v46;
  unint64_t v37 = v47;
  uint64_t v38 = v48;
  char v40 = v50;
  __int16 v39 = v49;
  int v41 = v51;
  outlined copy of DisplayList.Item.Value(v46, v47);
  DisplayList.init(_:)();
  swift_release();
  return outlined consume of DisplayList.Item.Value(v25, v26);
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance BridgedNavigationView(void *a1@<X8>)
{
  *a1 = qword_1ED457888;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance BridgedNavigationView@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for View.body.getter in conformance BridgedNavigationView()
{
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(unsigned int *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

unint64_t lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList()
{
  unint64_t result = lazy protocol witness table cache variable for type UnsupportedDisplayList and conformance UnsupportedDisplayList;
  if (!lazy protocol witness table cache variable for type UnsupportedDisplayList and conformance UnsupportedDisplayList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UnsupportedDisplayList and conformance UnsupportedDisplayList);
  }
  return result;
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(long long *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

void (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(unsigned int *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(id *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t (*specialized closure #1 in closure #1 in Attribute.init<A>(_:)())(long long *a1)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<ItemProviderTraitKey>, (uint64_t)&type metadata for ItemProviderTraitKey, (uint64_t)&protocol witness table for ItemProviderTraitKey, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnDeleteTraitKey>, (uint64_t)&type metadata for OnDeleteTraitKey, (uint64_t)&protocol witness table for OnDeleteTraitKey, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<TableRowHoverActionTraitKey>, (uint64_t)&type metadata for TableRowHoverActionTraitKey, (uint64_t)&protocol witness table for TableRowHoverActionTraitKey, (void (*)(void))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  v7[1] = *MEMORY[0x1E4F143B8];
  specialized _TraitWritingTableRowModifier.AddTrait.value.getter(*a1, a3, a4, a5, a6, v7);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr))
{
  v4[1] = *MEMORY[0x1E4F143B8];
  a3(v4);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(void *a1, uint64_t a2, void (*a3)(void *__return_ptr, void, void))
{
  void v4[2] = *MEMORY[0x1E4F143B8];
  a3(v4, *a1, a1[1]);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = 0x100000000;
  if (!*((unsigned char *)a1 + 4)) {
    uint64_t v1 = 0;
  }
  TableShowsFirstColumnOnlyModifier.Child.value.getter(v1 | *a1, &v3);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(void *a1, uint64_t a2, void (*a3)(void))
{
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr, void, void, void, void))
{
  void v4[2] = *MEMORY[0x1E4F143B8];
  a3(v4, *(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(long long *a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(uint64_t *__return_ptr))specialized DisplayListTransform.value.getter);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(void *__return_ptr, uint64_t), uint64_t (*a5)(void))
{
  v10[2] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(a1, (uint64_t)v9, a3);
  a4(v10, v7);
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v9, a5);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4, void (*a5)(void *__return_ptr, uint64_t), uint64_t (*a6)(void))
{
  v11[2] = *MEMORY[0x1E4F143B8];
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(a1, (uint64_t)v10, a3);
  a5(v11, a4);
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v10, a6);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
}

void specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(unsigned int *a1)
{
  v2[6] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v1 = 0x100000000;
  if (!*((unsigned char *)a1 + 4)) {
    uint64_t v1 = 0;
  }
  specialized MakeRepresentable.value.getter(v1 | *a1, (uint64_t)v2);
  type metadata accessor for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(0, (unint64_t *)&lazy cache variable for type metadata for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for ListRepresentable);
  AGGraphSetOutputValue();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(long long *a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  long long v3 = a1[1];
  long long v6 = *a1;
  long long v7 = v3;
  v8[0] = a1[2];
  *(_OWORD *)((char *)v8 + 12) = *(long long *)((char *)a1 + 44);
  a3(&v5);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(id *a1)
{
  id v1 = *a1;
  AlwaysOnTimelinePreferenceWriter.value.getter((uint64_t)v1);

  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0, &lazy cache variable for type metadata for [DateSequenceTimeline], (uint64_t (*)(uint64_t))type metadata accessor for DateSequenceTimeline, MEMORY[0x1E4FBB320]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(long long *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (id *)((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  LODWORD(v3) = *((_DWORD *)a1 + 4);
  long long v6 = *a1;
  int v7 = v3;
  long long v8 = *(long long *)((char *)a1 + 24);
  AuxiliaryViewMetadataPreferenceWriter.value.getter(v4);
  AGGraphSetOutputValue();
  return _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

{
  uint64_t v2;
  uint64_t v3;
  id *v4;
  long long v6;
  uint64_t v7;
  long long v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x1E4F143B8];
  type metadata accessor for WidgetAuxiliaryViewMetadata?(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (id *)((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  long long v6 = *a1;
  int v7 = *((void *)a1 + 2);
  long long v8 = *(long long *)((char *)a1 + 24);
  WidgetCurvesContentBaseModifier.WidgetCurvedContentWriter.value.getter(v4);
  AGGraphSetOutputValue();
  return _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?);
}

void specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (Swift::UInt32 *)((char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v24 - v13;
  if (!a3) {
    return;
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return;
  }
  type metadata accessor for _DictionaryStorage<DisplayList.HostedViewState.Key, DisplayList.HostedViewState.ViewInfo>();
  double v15 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  if (a2 < 1) {
    unint64_t v16 = 0;
  }
  else {
    unint64_t v16 = *a1;
  }
  uint64_t v17 = 0;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_25;
    }
    uint64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      goto LABEL_29;
    }
    if (v20 >= v25) {
      return;
    }
    unint64_t v21 = v24[v20];
    ++v17;
    if (!v21)
    {
      uint64_t v17 = v20 + 1;
      if (v20 + 1 >= v25) {
        return;
      }
      unint64_t v21 = v24[v17];
      if (!v21)
      {
        uint64_t v17 = v20 + 2;
        if (v20 + 2 >= v25) {
          return;
        }
        unint64_t v21 = v24[v17];
        if (!v21) {
          break;
        }
      }
    }
LABEL_24:
    unint64_t v16 = (v21 - 1) & v21;
    unint64_t v19 = __clz(__rbit64(v21)) + (v17 << 6);
LABEL_25:
    _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(a4[6] + *(void *)(v9 + 72) * v19, (uint64_t)v14, type metadata accessor for DisplayList.HostedViewState.Key);
    outlined init with copy of DisplayList.HostedViewState.ViewInfo(a4[7] + 176 * v19, (uint64_t)v27);
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v14, (uint64_t)v11, type metadata accessor for DisplayList.HostedViewState.Key);
    v26[8] = v27[8];
    v26[9] = v27[9];
    v26[10] = v27[10];
    v26[4] = v27[4];
    v26[5] = v27[5];
    v26[6] = v27[6];
    v26[7] = v27[7];
    v26[0] = v27[0];
    v26[1] = v27[1];
    v26[2] = v27[2];
    v26[3] = v27[3];
    specialized _NativeDictionary._unsafeInsertNew(key:value:)(v11, (uint64_t)v26, v15);
    if (__OFSUB__(a3--, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    if (!a3) {
      return;
    }
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v25) {
    return;
  }
  unint64_t v21 = v24[v22];
  if (v21)
  {
    uint64_t v17 = v22;
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v17 >= v25) {
      return;
    }
    unint64_t v21 = v24[v17];
    ++v22;
    if (v21) {
      goto LABEL_24;
    }
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_187CCA430()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t _sSo6UIViewC7SwiftUIE7animate_7changes10completionyAC9AnimationV_yyXEyycSgtFZySb_SbtcfU_TA_0(uint64_t a1, uint64_t a2)
{
  return closure #1 in static UIView.animate(_:changes:completion:)(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t dispatch thunk of UIViewControllerRepresentable.makeUIViewController(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of UIViewControllerRepresentable.updateUIViewController(_:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t dispatch thunk of UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t dispatch thunk of static UIViewControllerRepresentable.dismantleUIViewController(_:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t dispatch thunk of UIViewControllerRepresentable.makeCoordinator()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 72))();
}

uint64_t dispatch thunk of UIViewControllerRepresentable._identifiedViewTree(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 80))();
}

uint64_t dispatch thunk of static UIViewControllerRepresentable._layoutOptions(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

void *initializeBufferWithCopyOfBuffer for UIViewControllerRepresentableContext(void *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = v9;
    a1 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(void *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    uint64_t v10 = (void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v10 = *v11;
    uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v12 = *v13;
    v12[1] = v13[1];
    *(void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for UIViewControllerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  uint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v9 = *v10;
  v9[1] = v10[1];
  *(void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for UIViewControllerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *int v7 = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  uint64_t v10 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  v9 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v10 = *(void *)v9;
  swift_retain();
  swift_release();
  v10[1] = *(void *)(v9 + 8);
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v9 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for UIViewControllerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  unint64_t v9 = (_OWORD *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (_OWORD *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v9 = *v10;
  *(void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for UIViewControllerRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_release();
  unint64_t v9 = (void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v9 = *v10;
  swift_release();
  v9[1] = v10[1];
  swift_release();
  *(void *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for UIViewControllerRepresentableContext(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v7 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187CCAC18);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        int v17 = v7 + (v10 | v16);
        return (v17 + 1);
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFE)
  {
    unint64_t v19 = *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v19 >= 0xFFFFFFFF) {
      LODWORD(v19) = -1;
    }
    int v17 = v19 - 1;
    if (v17 < 0) {
      int v17 = -1;
    }
    return (v17 + 1);
  }
  else
  {
    unint64_t v18 = *(uint64_t (**)(_DWORD *))(v5 + 48);
    return v18(a1);
  }
}

void storeEnumTagSinglePayload for UIViewControllerRepresentableContext(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v9 = 2147483646;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 >= a3)
  {
    int v13 = 0;
    int v14 = a2 - v9;
    if (a2 <= v9)
    {
LABEL_17:
      switch(v13)
      {
        case 1:
          *((unsigned char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)((char *)a1 + v10) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)((char *)a1 + v10) = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFE)
            {
              unint64_t v18 = (void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE) {
                uint64_t v19 = (a2 - 0x7FFFFFFF);
              }
              else {
                uint64_t v19 = a2;
              }
              *unint64_t v18 = v19;
            }
            else
            {
              int v17 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
              v17(a1, a2);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((((v8 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v11 = a3 - v9 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    int v14 = a2 - v9;
    if (a2 <= v9) {
      goto LABEL_17;
    }
  }
  if (((((((v8 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v15 = v14;
  }
  else {
    int v15 = 1;
  }
  if (((((((v8 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v16 = ~v9 + a2;
    bzero(a1, v10);
    *a1 = v16;
  }
  switch(v13)
  {
    case 1:
      *((unsigned char *)a1 + v10) = v15;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v10) = v15;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187CCAE50);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = v15;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for UnsupportedDisplayList()
{
  return &type metadata for UnsupportedDisplayList;
}

uint64_t sub_187CCAE8C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

uint64_t sub_187CCAED0()
{
  outlined consume of AccessibilityAttachment.Tree(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32));

  return swift_deallocObject();
}

uint64_t outlined init with copy of MultiDatePickerValue<AutomaticMultiDatePickerStyle>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t))
{
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t outlined init with take of _DraggingModifier?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for _DictionaryStorage<TabCustomizationID, TabCustomizationEntry>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabCustomizationEntry>)
  {
    lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabCustomizationEntry>);
    }
  }
}

uint64_t sub_187CCB064()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in AccessibilityAttachment.DeferredTransform.value.getter()
{
}

uint64_t sub_187CCB07C()
{
  return swift_deallocObject();
}

unint64_t partial apply for closure #2 in ContainerBackgroundModifier.CustomPreferenceValue.value.getter(uint64_t a1)
{
  return closure #2 in ContainerBackgroundModifier.CustomPreferenceValue.value.getter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_187CCB094()
{
  if (v0[5])
  {
    swift_bridgeObjectRelease();
    if (v0[7])
    {
      swift_release();
      swift_release();
    }
    if (v0[10])
    {
      swift_release();
      swift_release();
      uint64_t v1 = v0[12];
      if (v1)
      {
        if (v1 == 1) {
          goto LABEL_10;
        }
        swift_release();
      }
      if (v0[14]) {
        swift_release();
      }
    }
  }
LABEL_10:
  if (v0[19])
  {
    swift_bridgeObjectRelease();
    if (v0[21])
    {
      swift_release();
      swift_release();
    }
    if (v0[24])
    {
      swift_release();
      swift_release();
      uint64_t v2 = v0[26];
      if (v2)
      {
        if (v2 == 1) {
          goto LABEL_19;
        }
        swift_release();
      }
      if (v0[28]) {
        swift_release();
      }
    }
  }
LABEL_19:

  return swift_deallocObject();
}

double partial apply for closure #2 in SwipeActions.MakeValueTransform.value.getter(uint64_t a1)
{
  return closure #2 in SwipeActions.MakeValueTransform.value.getter(a1, (long long *)(v1 + 16));
}

uint64_t sub_187CCB194()
{
  outlined consume of SharingPickerSource(v0[3], v0[4], v0[5], v0[6], v0[7], v0[8], v0[9], v0[10], v0[11], v0[12], v0[13], v0[14], v0[15], v0[16], v0[17], v0[18], v0[19]);

  return swift_deallocObject();
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>);
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>.Factory);
    }
  }
}

void type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(uint64_t a1)
{
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitRichTextEditor> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>);
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation()
{
  unint64_t result = lazy protocol witness table cache variable for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation;
  if (!lazy protocol witness table cache variable for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableTransparentBackgroundMutation and conformance EnableTransparentBackgroundMutation);
  }
  return result;
}

void type metadata accessor for WeakBox<_UIRemoteViewControllerContaining>()
{
  if (!lazy cache variable for type metadata for WeakBox<_UIRemoteViewControllerContaining>)
  {
    type metadata accessor for _UISceneBSActionHandler(255, &lazy cache variable for type metadata for _UIRemoteViewControllerContaining);
    unint64_t v0 = type metadata accessor for WeakBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<_UIRemoteViewControllerContaining>);
    }
  }
}

void type metadata accessor for WeakBox<_UIRemoteSheetContaining>()
{
  if (!lazy cache variable for type metadata for WeakBox<_UIRemoteSheetContaining>)
  {
    type metadata accessor for _UISceneBSActionHandler(255, (unint64_t *)&lazy cache variable for type metadata for _UIRemoteSheetContaining);
    unint64_t v0 = type metadata accessor for WeakBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<_UIRemoteSheetContaining>);
    }
  }
}

uint64_t sub_187CCB488()
{
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));

  return swift_deallocObject();
}

uint64_t sub_187CCB514()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(void *a1, __n128 a2)
{
  return specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, a2, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40), *(void *)(v2 + 48), *(unsigned char *)(v2 + 56), *(void *)(v2 + 64), *(unsigned char *)(v2 + 72), *(_WORD *)(v2 + 73), HIBYTE(*(_WORD *)(v2 + 73)), *(void *)(v2 + 80), *(void *)(v2 + 88), *(unsigned char *)(v2 + 96));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())()
{
  uint64_t v2 = *(int **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  uint64_t v4 = (uint64_t (*)(int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())
                                     + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ()));
  return v4(v2);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>, (uint64_t)&type metadata for RefreshAction.Key, (uint64_t)&protocol witness table for RefreshAction.Key, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>;
  if (!lazy protocol witness table cache variable for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>);
  }
  return result;
}

void type metadata accessor for ListRepresentable<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
    v9[0] = &type metadata for TableDataSourceAdaptor;
    v9[1] = v6;
    v9[2] = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    v9[3] = lazy protocol witness table accessor for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>();
    unint64_t v7 = a3(a1, v9);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SelectionManagerBox);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t outlined init with copy of Binding<SelectionManagerBox<AnyHashable>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>, MEMORY[0x1E4F41638]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SelectionManagerBox<AnyHashable>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_187CCB9B4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.fontModifiers.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187CCB9F0()
{
  return EnvironmentValues.fontModifiers.setter();
}

uint64_t outlined destroy of MultiDatePickerValue<AutomaticMultiDatePickerStyle>(uint64_t a1)
{
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>, (uint64_t)&type metadata for AutomaticMultiDatePickerStyle, (uint64_t)&protocol witness table for AutomaticMultiDatePickerStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for MultiDatePickerValue);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarCustomizationOptionsKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarCustomizationOptionsKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarCustomizationVisibilityKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarCustomizationVisibilityKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined init with copy of BridgedPopUpButtonProvider(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of BridgedPopUpButtonProvider(uint64_t a1)
{
  return a1;
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>);
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>.Factory);
    }
  }
}

void type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(uint64_t a1)
{
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>);
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
    }
  }
}

uint64_t sub_187CCBDC8()
{
  return swift_deallocObject();
}

uint64_t sub_187CCBDD8()
{
  return swift_deallocObject();
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>)
  {
    type metadata accessor for CallbacksGesture<PrimitiveButtonGestureCallbacks>(255, &lazy cache variable for type metadata for CallbacksGesture<PrimitiveButtonGestureCallbacks>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonGestureCallbacks and conformance PrimitiveButtonGestureCallbacks, (uint64_t)&type metadata for PrimitiveButtonGestureCallbacks, MEMORY[0x1E4F3FC78]);
    lazy protocol witness table accessor for type CallbacksGesture<PrimitiveButtonGestureCallbacks> and conformance CallbacksGesture<A>();
    lazy protocol witness table accessor for type PrimitiveButtonGestureCore and conformance PrimitiveButtonGestureCore();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonGestureCallbacks and conformance PrimitiveButtonGestureCallbacks()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonGestureCallbacks and conformance PrimitiveButtonGestureCallbacks;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonGestureCallbacks and conformance PrimitiveButtonGestureCallbacks)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonGestureCallbacks and conformance PrimitiveButtonGestureCallbacks);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CallbacksGesture<PrimitiveButtonGestureCallbacks> and conformance CallbacksGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CallbacksGesture<PrimitiveButtonGestureCallbacks> and conformance CallbacksGesture<A>;
  if (!lazy protocol witness table cache variable for type CallbacksGesture<PrimitiveButtonGestureCallbacks> and conformance CallbacksGesture<A>)
  {
    type metadata accessor for CallbacksGesture<PrimitiveButtonGestureCallbacks>(255, &lazy cache variable for type metadata for CallbacksGesture<PrimitiveButtonGestureCallbacks>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrimitiveButtonGestureCallbacks and conformance PrimitiveButtonGestureCallbacks, (uint64_t)&type metadata for PrimitiveButtonGestureCallbacks, MEMORY[0x1E4F3FC78]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CallbacksGesture<PrimitiveButtonGestureCallbacks> and conformance CallbacksGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonGestureCore and conformance PrimitiveButtonGestureCore()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonGestureCore and conformance PrimitiveButtonGestureCore;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonGestureCore and conformance PrimitiveButtonGestureCore)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonGestureCore and conformance PrimitiveButtonGestureCore);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>, (uint64_t)&type metadata for FocusScopesKey, (uint64_t)&protocol witness table for FocusScopesKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPasteControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPasteControl>>.Factory);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<Switch>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<Switch> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSlider>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSlider> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BridgedColorPicker>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BridgedColorPicker> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<SystemSegmentedControl> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<DisplayList.Index.ID, DisplayList.AccessibilityUpdater.CacheValue>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<DisplayList.Index.ID, DisplayList.AccessibilityUpdater.CacheValue>)
  {
    lazy protocol witness table accessor for type DisplayList.Index.ID and conformance DisplayList.Index.ID();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.Index.ID, DisplayList.AccessibilityUpdater.CacheValue>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<Namespace.ID, NavigationDestinationPresentation>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, NavigationDestinationPresentation>)
  {
    lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, NavigationDestinationPresentation>);
    }
  }
}

void type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>()
{
  if (!lazy cache variable for type metadata for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>);
    unint64_t v0 = type metadata accessor for CommandGroup();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>();
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>();
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>, (uint64_t)&type metadata for KeyboardShortcutPickerOptionTraitKey, (uint64_t)&protocol witness table for KeyboardShortcutPickerOptionTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>)
  {
    type metadata accessor for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>();
    type metadata accessor for CallbacksGesture<PrimitiveButtonGestureCallbacks>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<HasKeyboardShortcut>, (uint64_t (*)(void))lazy protocol witness table accessor for type HasKeyboardShortcut and conformance HasKeyboardShortcut, (uint64_t)&type metadata for HasKeyboardShortcut, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<KeyboardShortcut?>, &lazy cache variable for type metadata for KeyboardShortcut?, (uint64_t)&type metadata for KeyboardShortcut, MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, (void (*)(void))lazy protocol witness table accessor for type Button<Text> and conformance Button<A>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<KeyboardShortcut?> and conformance _EnvironmentKeyWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for <<opaque return type of Gesture.requiredTapCount(_:)>>.0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0(a4, a5);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v9) {
      atomic_store(OpaqueTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>)
  {
    unint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F40910];
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<TappableSpatialEvent>, MEMORY[0x1E4F406A8], MEMORY[0x1E4F40910]);
    type metadata accessor for ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>();
    lazy protocol witness table accessor for type CoordinateSpaceGesture<TappableSpatialEvent> and conformance CoordinateSpaceGesture<A>((unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceGesture<TappableSpatialEvent> and conformance CoordinateSpaceGesture<A>, &lazy cache variable for type metadata for CoordinateSpaceGesture<TappableSpatialEvent>, v0);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>);
    unint64_t v1 = type metadata accessor for ModifierGesture();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>);
    }
  }
}

void type metadata accessor for ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>)
  {
    uint64_t v0 = MEMORY[0x1E4F406A8];
    unint64_t v1 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3F778];
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(255, &lazy cache variable for type metadata for RepeatGesture<TappableSpatialEvent>, MEMORY[0x1E4F406A8], MEMORY[0x1E4F3F778]);
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for SingleTapGesture<TappableSpatialEvent>, v0, MEMORY[0x1E4F406A0], MEMORY[0x1E4F3FDB8]);
    lazy protocol witness table accessor for type CoordinateSpaceGesture<TappableSpatialEvent> and conformance CoordinateSpaceGesture<A>((unint64_t *)&lazy protocol witness table cache variable for type RepeatGesture<TappableSpatialEvent> and conformance RepeatGesture<A>, &lazy cache variable for type metadata for RepeatGesture<TappableSpatialEvent>, v1);
    lazy protocol witness table accessor for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>();
    unint64_t v2 = type metadata accessor for ModifierGesture();
    if (!v3) {
      atomic_store(v2, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type CoordinateSpaceGesture<TappableSpatialEvent> and conformance CoordinateSpaceGesture<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(255, a2, MEMORY[0x1E4F406A8], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>;
  if (!lazy protocol witness table cache variable for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for SingleTapGesture<TappableSpatialEvent>, MEMORY[0x1E4F406A8], MEMORY[0x1E4F406A0], MEMORY[0x1E4F3FDB8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SingleTapGesture<TappableSpatialEvent> and conformance SingleTapGesture<A>);
  }
  return result;
}

uint64_t sub_187CCD0E4()
{
  return swift_deallocObject();
}

unsigned char *partial apply for specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter()
{
  return specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter();
}

{
  return specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter();
}

uint64_t sub_187CCD0FC()
{
  return swift_deallocObject();
}

unsigned char *partial apply for specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter(void *a1)
{
  return specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter(a1);
}

{
  return specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter(a1);
}

uint64_t sub_187CCD114()
{
  return swift_deallocObject();
}

uint64_t sub_187CCD12C()
{
  return swift_deallocObject();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>();
    type metadata accessor for CallbacksGesture<PrimitiveButtonGestureCallbacks>(255, (unint64_t *)&lazy cache variable for type metadata for _ContentShapeModifier<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E4F41830], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, MEMORY[0x1E4F406F0], (uint64_t)&type metadata for ScrollViewGeometry, MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for _CoordinateSpaceModifier<ObjectIdentifier>, MEMORY[0x1E4FBB058], MEMORY[0x1E4FBB060], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _CoordinateSpaceModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>);
    }
  }
}

void type metadata accessor for CallbacksGesture<PrimitiveButtonGestureCallbacks>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollViewKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollViewKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollViewKey> and conformance EnvironmentPropertyKey<A>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollViewKey>, (uint64_t)&type metadata for ScrollViewKey, (uint64_t)&protocol witness table for ScrollViewKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollViewKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>>)
  {
    type metadata accessor for CategoryGesture<MagnifyGesture.Value>(255);
    type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>();
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type CategoryGesture<MagnifyGesture.Value> and conformance CategoryGesture<A>, type metadata accessor for CategoryGesture<MagnifyGesture.Value>);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0(&lazy protocol witness table cache variable for type _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value> and conformance _MapGesture<A, B>, (void (*)(uint64_t))type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>>);
    }
  }
}

void type metadata accessor for CategoryGesture<MagnifyGesture.Value>(uint64_t a1)
{
}

void type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    v8[0] = &type metadata for TransformBasedMagnifyGesture;
    v8[1] = &type metadata for TouchBasedMagnifyGesture;
    _OWORD v8[2] = lazy protocol witness table accessor for type TransformBasedMagnifyGesture and conformance TransformBasedMagnifyGesture();
    v8[3] = lazy protocol witness table accessor for type TouchBasedMagnifyGesture and conformance TouchBasedMagnifyGesture();
    unint64_t v6 = a3(a1, v8);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_187CCD534()
{
  return swift_deallocObject();
}

void _s7SwiftUI19SimultaneousGestureVyAA022TransformBasedRotationD033_BE4F31EA7CD17BEECFB3DECC6C6E6203LLVAA05TouchfgD0AELLVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    v8[0] = &type metadata for TransformBasedRotationGesture;
    v8[1] = &type metadata for TouchBasedRotationGesture;
    _OWORD v8[2] = lazy protocol witness table accessor for type TransformBasedRotationGesture and conformance TransformBasedRotationGesture();
    v8[3] = lazy protocol witness table accessor for type TouchBasedRotationGesture and conformance TouchBasedRotationGesture();
    unint64_t v6 = a3(a1, v8);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_187CCD5C8()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void type metadata accessor for _DictionaryStorage<ViewIdentity, ConfirmationDialog>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, ConfirmationDialog>)
  {
    lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, ConfirmationDialog>);
    }
  }
}

void type metadata accessor for _DictionaryStorage<ViewIdentity, AlertStorage>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, AlertStorage>)
  {
    lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, AlertStorage>);
    }
  }
}

unsigned char *partial apply for closure #1 in ScrollViewChildSafeAreaInsets.value.getter@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in ScrollViewChildSafeAreaInsets.value.getter(a1);
}

void type metadata accessor for _ContiguousArrayStorage<Scrollable>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>);
    }
  }
}

uint64_t sub_187CCD738()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187CCD770()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in FocusableFillerBoundsTransform.value.getter(uint64_t *a1)
{
  return closure #1 in FocusableFillerBoundsTransform.value.getter(a1, *(void *)(v1 + 16));
}

uint64_t sub_187CCD7B4()
{
  return swift_deallocObject();
}

uint64_t sub_187CCD7C4()
{
  return swift_deallocObject();
}

void type metadata accessor for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Target>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Target>)
  {
    lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Target>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>);
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>.Factory);
    }
  }
}

void type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(uint64_t a1)
{
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>);
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    }
  }
}

uint64_t outlined destroy of CustomizableDocumentViewControllerRepresentable(uint64_t a1)
{
  return a1;
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>, (uint64_t)&type metadata for TabItemGroup.HostView, (uint64_t)&protocol witness table for TabItemGroup.HostView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
    }
  }
}

uint64_t outlined init with copy of ReplacedRootDismissModifier.ChildEnvironment(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of ReplacedRootDismissModifier.ChildEnvironment(uint64_t a1)
{
  return a1;
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>, (uint64_t)&type metadata for GenericViewControllerRepresentable, (uint64_t)&protocol witness table for GenericViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
    }
  }
}

uint64_t sub_187CCDF28()
{
  return swift_deallocObject();
}

uint64_t sub_187CCDF38()
{
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187CCDF84()
{
  swift_release();
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));

  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>, (uint64_t)&type metadata for CustomizableURLDocumentViewControllerRepresentable, (uint64_t)&protocol witness table for CustomizableURLDocumentViewControllerRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
    }
  }
}

uint64_t sub_187CCE0F8()
{
  if (*(void *)(v0 + 40)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

uint64_t sub_187CCE138()
{
  return swift_deallocObject();
}

unsigned char *partial apply for closure #1 in IsSearchImplementedModifier.IsSearchImplemented.value.getter(unsigned char *a1)
{
  return closure #1 in IsSearchImplementedModifier.IsSearchImplemented.value.getter(a1, *(unsigned char *)(v1 + 16));
}

void type metadata accessor for SearchFieldConfiguration.Data?(uint64_t a1)
{
}

uint64_t sub_187CCE184()
{
  return swift_deallocObject();
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>, (uint64_t)&type metadata for BridgedNavigationView, (uint64_t)&protocol witness table for BridgedNavigationView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<BridgedNavigationView> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    }
  }
}

uint64_t sub_187CCE2B4()
{
  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, MEMORY[0x1E4F41090]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>);
  }
  return result;
}

uint64_t sub_187CCE348()
{
  if (*(unsigned __int8 *)(v0 + 86) != 255)
  {
    unint64_t v1 = (*(unsigned int *)(v0 + 80) | ((unint64_t)((*(unsigned __int16 *)(v0 + 84) | (*(unsigned __int8 *)(v0 + 86) << 16)) & 0xFFFFFF) << 32)) >> 48;
    if (v1 != 2)
    {
      if (v1 == 1)
      {
LABEL_6:
        swift_release();
        goto LABEL_7;
      }
      if (v1) {
        goto LABEL_7;
      }
    }
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    goto LABEL_6;
  }
LABEL_7:

  return swift_deallocObject();
}

void type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
    }
  }
}

void type metadata accessor for ArchivableFactory<ArchivableAccessibilityViewModifier>()
{
  if (!lazy cache variable for type metadata for ArchivableFactory<ArchivableAccessibilityViewModifier>)
  {
    lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier and conformance ArchivableAccessibilityViewModifier();
    unint64_t v0 = type metadata accessor for ArchivableFactory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ArchivableFactory<ArchivableAccessibilityViewModifier>);
    }
  }
}

void type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(uint64_t a1)
{
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>);
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
    }
  }
}

uint64_t outlined destroy of ConditionalDraggingModifier(uint64_t a1)
{
  return a1;
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.Factory)
  {
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>, type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>);
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>.Factory);
    }
  }
}

void type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(uint64_t a1)
{
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>)
  {
    type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView> and conformance PlatformViewControllerRepresentableAdaptor<A>, type metadata accessor for PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>);
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>, (uint64_t)&type metadata for NavigationStackRepresentable, (uint64_t)&protocol witness table for NavigationStackRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitPagingView>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitPagingView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitStepper>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<UIKitStepper> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>);
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>.Factory);
    }
  }
}

void type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(uint64_t a1)
{
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>);
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>);
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>.Factory);
    }
  }
}

void type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(uint64_t a1)
{
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>);
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
    }
  }
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>);
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>.Factory);
    }
  }
}

void type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>(uint64_t a1)
{
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<TextViewAdaptor>);
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
    }
  }
}

uint64_t sub_187CCF0F0()
{
  return swift_deallocObject();
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.Factory)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>.Factory);
    }
  }
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>, (uint64_t)&type metadata for NavigationSplitRepresentable, (uint64_t)&protocol witness table for NavigationSplitRepresentable, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewControllerRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable> and conformance PlatformViewControllerRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    }
  }
}

uint64_t sub_187CCF220()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationBarDefaults.DefaultNavigationBarVisibility.value.getter(uint64_t a1)
{
  return closure #1 in NavigationBarDefaults.DefaultNavigationBarVisibility.value.getter(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>.Factory()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>.Factory)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>);
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList.Factory();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<KitRepresentable>>.Factory);
    }
  }
}

void type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>(uint64_t a1)
{
}

void type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>>()
{
  if (!lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>(255);
    _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PlatformViewRepresentableAdaptor<KitRepresentable> and conformance PlatformViewRepresentableAdaptor<A>, type metadata accessor for PlatformViewRepresentableAdaptor<KitRepresentable>);
    unint64_t v0 = type metadata accessor for RemoteSheetContainerVCWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>>);
    }
  }
}

void protocol witness for View.body.getter in conformance <> Section<A, B, C>()
{
}

uint64_t Section<>.init(footer:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  double v8 = MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = v11(v8);
  return Section.init(header:content:footer:)(v12, (uint64_t)v10, a1, MEMORY[0x1E4F417F8], a2, a3, a4);
}

uint64_t Section<>.init(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v8(v5);
  return Section.init(header:content:footer:)(v9, (uint64_t)v7, v10, MEMORY[0x1E4F417F8], a2, MEMORY[0x1E4F417F8], a3);
}

uint64_t Section<>.init(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X4>, uint64_t a3@<X6>, uint64_t a4@<X8>)
{
  MEMORY[0x1F4188790](a1);
  double v8 = (char *)&v15[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = Text.init(_:tableName:bundle:comment:)();
  v15[1] = v9;
  char v16 = v10 & 1;
  uint64_t v17 = v11;
  a2();
  return Section.init(header:content:footer:)((uint64_t)v15, (uint64_t)v8, v12, MEMORY[0x1E4F41420], a3, MEMORY[0x1E4F417F8], a4);
}

uint64_t Section<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(void, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 - 8);
  double v15 = MEMORY[0x1F4188790](v14);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v17, v15);
  v23[0] = Text.init<A>(_:)();
  v23[1] = v18;
  char v24 = v19 & 1;
  uint64_t v25 = v20;
  a2(v23[0], v18, v19, v20);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a4);
  return Section.init(header:content:footer:)((uint64_t)v23, (uint64_t)v11, v21, MEMORY[0x1E4F41420], a3, MEMORY[0x1E4F417F8], a5);
}

uint64_t Section<>.init(_:isExpanded:content:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, char a3@<W6>, void (*a4)(void)@<X7>, uint64_t a5@<X8>)
{
  uint64_t v9 = a5 + *(int *)(type metadata accessor for Section() + 52);
  a4();
  closure #1 in TextField<>.init<A>(_:value:format:prompt:)(a5);
  *(void *)uint64_t v9 = a1;
  *(void *)(v9 + 8) = a2;
  *(unsigned char *)(v9 + 16) = a3;
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t Section<>.init(isExpanded:content:header:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t (*a4)(void)@<X3>, uint64_t (*a5)(uint64_t)@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11 = a6 + *(int *)(type metadata accessor for Section() + 52);
  uint64_t v12 = a4();
  uint64_t result = a5(v12);
  *(void *)uint64_t v11 = a1;
  *(void *)(v11 + 8) = a2;
  *(unsigned char *)(v11 + 16) = a3;
  return result;
}

uint64_t Section<>.init<A>(_:isExpanded:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void (*a5)(void)@<X4>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v12 = a7 + *(int *)(type metadata accessor for Section() + 52);
  a5();
  closure #1 in Section<>.init<A>(_:isExpanded:content:)(a1, a7);
  *(void *)uint64_t v12 = a2;
  *(void *)(v12 + 8) = a3;
  uint64_t v13 = *(void *)(a6 - 8);
  *(unsigned char *)(v12 + 16) = a4;
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);

  return v14(a1, a6);
}

uint64_t closure #1 in Section<>.init<A>(_:isExpanded:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t Section<>.collapsible(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.canCollapseSections.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey>, (uint64_t)&unk_1ED45E560, (uint64_t)&protocol witness table for CollapsibleSectionsEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey>, (uint64_t)&unk_1ED45E560, (uint64_t)&protocol witness table for CollapsibleSectionsEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.canCollapseSections : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.canCollapseSections.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187CCFDE8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.canCollapseSections.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.canCollapseSections : EnvironmentValues()
{
  return EnvironmentValues.canCollapseSections.setter();
}

uint64_t sub_187CCFE50()
{
  return EnvironmentValues.canCollapseSections.setter();
}

uint64_t EnvironmentValues.canCollapseSections.setter()
{
  type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey>, (uint64_t)&unk_1ED45E560, (uint64_t)&protocol witness table for CollapsibleSectionsEnvironmentKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t static IsCollapsibleTraitKey.defaultValue.getter()
{
  return 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for Section(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = a3[3];
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = (v6 + v9) & ~v9;
  uint64_t v12 = *(void *)(v8 + 64);
  uint64_t v13 = a3[4] - 8;
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(_DWORD *)(*(void *)v13 + 80);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = *(void *)(*(void *)v13 + 64) + 7;
  unint64_t v18 = ((v17 + ((v12 + v15 + v11) & ~v15)) & 0xFFFFFFFFFFFFFFF8) + 17;
  unsigned int v19 = v15 | *(_DWORD *)(v5 + 80) & 0xF8 | v9;
  if (v19 > 7 || ((*(_DWORD *)(v14 + 80) | *(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0 || v18 > 0x18)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    uint64_t v23 = v22 + (((v19 | 7) + 16) & ~(unint64_t)(v19 | 7));
    swift_retain();
  }
  else
  {
    uint64_t v24 = ~v9;
    uint64_t v25 = ~v15;
    uint64_t v33 = a3[4];
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    long long v34 = a1;
    unint64_t v26 = ((unint64_t)a1 + v10) & v24;
    unint64_t v27 = ((unint64_t)a2 + v10) & v24;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(v26, v27, v7);
    unint64_t v28 = (v27 + v16) & v25;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 16))((v26 + v16) & v25, v28, v33);
    unint64_t v29 = (v17 + ((v26 + v16) & v25)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v30 = (v17 + v28) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v30 + 8) < 0xFFFFFFFFuLL)
    {
      long long v31 = *(_OWORD *)v30;
      *(unsigned char *)(v29 + 16) = *(unsigned char *)(v30 + 16);
      *(_OWORD *)unint64_t v29 = v31;
    }
    else
    {
      *(void *)unint64_t v29 = *(void *)v30;
      *(void *)(v29 + 8) = *(void *)(v30 + 8);
      *(unsigned char *)(v29 + 16) = *(unsigned char *)(v30 + 16);
      swift_retain();
      swift_retain();
    }
    return v34;
  }
  return (uint64_t *)v23;
}

uint64_t initializeWithTake for Section(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 32) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 32);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 32))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 32) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  char v23 = *(unsigned char *)(v22 + 16);
  *(_OWORD *)unint64_t v21 = *(_OWORD *)v22;
  *(unsigned char *)(v21 + 16) = v23;
  return a1;
}

uint64_t assignWithTake for Section(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 40;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 40))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 24) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v21 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)(v22 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
LABEL_5:
    long long v23 = *(_OWORD *)v22;
    *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
    *(_OWORD *)unint64_t v21 = v23;
    return a1;
  }
  *(void *)unint64_t v21 = *(void *)v22;
  swift_release();
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  swift_release();
  *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for Section(unsigned __int8 *a1, unsigned int a2, void *a3)
{
  uint64_t v5 = *(void *)(a3[2] - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a3[3] - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(a3[4] - 8);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v11 = *(unsigned int *)(v9 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = *(void *)(v9 + 64);
  if (v11 <= v10) {
    unsigned int v16 = v10;
  }
  else {
    unsigned int v16 = v11;
  }
  if (v16 <= 0x7FFFFFFE) {
    unsigned int v16 = 2147483646;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v17 = *(void *)(*(void *)(a3[2] - 8) + 64) + v12;
  uint64_t v18 = v15 + 7;
  if (v16 < a2)
  {
    unint64_t v19 = ((v18 + ((v13 + v14 + (v17 & ~v12)) & ~v14)) & 0xFFFFFFFFFFFFFFF8) + 17;
    unsigned int v20 = (a2 - v16 + 255) >> (8 * v19);
    if (v19 < 4) {
      unsigned int v21 = v20 + 1;
    }
    else {
      unsigned int v21 = 2;
    }
    if (v21 >= 0x10000) {
      LODWORD(v22) = 4;
    }
    else {
      LODWORD(v22) = 2;
    }
    if (v21 < 0x100) {
      LODWORD(v22) = 1;
    }
    if (v21 >= 2) {
      uint64_t v22 = v22;
    }
    else {
      uint64_t v22 = 0;
    }
    switch(v22)
    {
      case 1:
        int v23 = a1[v19];
        if (!a1[v19]) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v23 = *(unsigned __int16 *)&a1[v19];
        if (*(_WORD *)&a1[v19]) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187CD077CLL);
      case 4:
        int v23 = *(_DWORD *)&a1[v19];
        if (!v23) {
          break;
        }
LABEL_27:
        int v25 = (v23 - 1) << (8 * v19);
        if (v19 >= 4) {
          int v25 = 0;
        }
        if (((v18 + ((v13 + v14 + (v17 & ~v12)) & ~v14)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
          int v26 = *a1;
        }
        else {
          int v26 = *(_DWORD *)a1;
        }
        return v16 + (v26 | v25) + 1;
      default:
        break;
    }
  }
  if (v6 == v16)
  {
    unint64_t v27 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48);
    uint64_t v28 = *(unsigned int *)(v5 + 84);
    uint64_t v29 = a3[2];
    return v27(a1, v28, v29);
  }
  unint64_t v30 = (unint64_t)&a1[v17] & ~v12;
  if (v8 == v16)
  {
    long long v31 = *(uint64_t (**)(unint64_t))(v7 + 48);
    return v31(v30);
  }
  else
  {
    a1 = (unsigned __int8 *)((v30 + v13 + v14) & ~v14);
    if (v11 == v16)
    {
      unint64_t v27 = *(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(a3[4] - 8) + 48);
      uint64_t v28 = v11;
      uint64_t v29 = a3[4];
      return v27(a1, v28, v29);
    }
    unint64_t v32 = *(void *)(((unint64_t)&a1[v18] & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v32 >= 0xFFFFFFFF) {
      LODWORD(v32) = -1;
    }
    if ((v32 + 1) >= 2) {
      return v32;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for Section(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v6 = *(void *)(a4[2] - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = a4[3];
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(v8 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v13 = *(void *)(v9 - 8);
  unsigned int v14 = *(_DWORD *)(v13 + 84);
  uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v16 = *(void *)(*(void *)(v8 - 8) + 64);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 80);
  if (v14 <= v12) {
    unsigned int v18 = v12;
  }
  else {
    unsigned int v18 = *(_DWORD *)(v13 + 84);
  }
  if (v18 <= 0x7FFFFFFE) {
    unsigned int v18 = 2147483646;
  }
  uint64_t v19 = *(void *)(*(void *)(a4[2] - 8) + 64) + v15;
  uint64_t v20 = *(void *)(*(void *)(v9 - 8) + 64) + 7;
  size_t v21 = ((v20 + ((v16 + v17 + (v19 & ~v15)) & ~v17)) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v22 = 8 * v21;
  if (v18 >= a3)
  {
    int v26 = 0;
    if (v18 >= a2) {
      goto LABEL_22;
    }
LABEL_26:
    if (v21 < 4) {
      unsigned int v28 = ((~v18 + a2) >> v22) + 1;
    }
    else {
      unsigned int v28 = 1;
    }
    if (v21 >= 4) {
      unsigned int v29 = ~v18 + a2;
    }
    else {
      unsigned int v29 = (~(_BYTE)v18 + a2);
    }
    bzero(a1, v21);
    if (v21 == 1) {
      *a1 = v29;
    }
    else {
      *(_DWORD *)a1 = v29;
    }
    switch(v26)
    {
      case 1:
        a1[v21] = v28;
        break;
      case 2:
        *(_WORD *)&a1[v21] = v28;
        break;
      case 3:
LABEL_59:
        __break(1u);
        JUMPOUT(0x187CD0B14);
      case 4:
        *(_DWORD *)&a1[v21] = v28;
        break;
      default:
        return;
    }
    return;
  }
  unsigned int v23 = (a3 - v18 + 255) >> v22;
  if (v21 <= 3) {
    unsigned int v24 = v23 + 1;
  }
  else {
    unsigned int v24 = 2;
  }
  if (v24 >= 0x10000) {
    int v25 = 4;
  }
  else {
    int v25 = 2;
  }
  if (v24 < 0x100) {
    int v25 = 1;
  }
  if (v24 >= 2) {
    int v26 = v25;
  }
  else {
    int v26 = 0;
  }
  if (v18 < a2) {
    goto LABEL_26;
  }
LABEL_22:
  uint64_t v27 = ~v15;
  switch(v26)
  {
    case 1:
      a1[v21] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 2:
      *(_WORD *)&a1[v21] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 3:
      goto LABEL_59;
    case 4:
      *(_DWORD *)&a1[v21] = 0;
      goto LABEL_38;
    default:
LABEL_38:
      if (!a2) {
        return;
      }
LABEL_39:
      if (v7 == v18)
      {
        unint64_t v30 = *(void (**)(char *))(v6 + 56);
        long long v31 = a1;
LABEL_42:
        v30(v31);
        return;
      }
      unint64_t v32 = (unint64_t)&a1[v19] & v27;
      if (v11 == v18)
      {
        uint64_t v33 = *(void (**)(unint64_t))(v10 + 56);
        v33(v32);
      }
      else
      {
        long long v31 = (char *)((v32 + v16 + v17) & ~v17);
        if (v14 == v18)
        {
          unint64_t v30 = *(void (**)(char *))(v13 + 56);
          goto LABEL_42;
        }
        unint64_t v34 = (unint64_t)&v31[v20] & 0xFFFFFFFFFFFFFFF8;
        if (a2 > 0x7FFFFFFE)
        {
          *(void *)unint64_t v34 = 0;
          *(void *)(v34 + 8) = 0;
          *(unsigned char *)(v34 + 16) = 0;
          *(_DWORD *)unint64_t v34 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *(void *)(v34 + 8) = a2;
        }
      }
      break;
  }
}

ValueMetadata *type metadata accessor for IsCollapsibleTraitKey()
{
  return &type metadata for IsCollapsibleTraitKey;
}

uint64_t sub_187CD0B4C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CD0C08()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey>, (uint64_t)&unk_1ED45E560, (uint64_t)&protocol witness table for CollapsibleSectionsEnvironmentKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<CollapsibleSectionsEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void *type metadata accessor for CollapsibleSectionsEnvironmentKey()
{
  return &unk_1ED45E560;
}

uint64_t key path setter for EnvironmentValues.defaultHoverEffect : EnvironmentValues()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_release();
}

uint64_t AutomaticHoverEffect.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_187CD0F78()
{
  uint64_t v0 = swift_retain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_release();
}

void AutomaticHoverEffect.systemHoverEffect.getter(_WORD *a1@<X8>)
{
  *a1 = 256;
}

uint64_t protocol witness for InternalCustomHoverEffect.wrappedEffect.getter in conformance AutomaticHoverEffect@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *((unsigned __int8 *)v1 + 8);
  *(void *)a1 = *v1;
  *(unsigned char *)(a1 + 8) = v3;
  return outlined copy of Environment<HoverEffect?>.Content(v2, v3);
}

SwiftUI::HighlightHoverEffect __swiftcall HighlightHoverEffect.init()()
{
  *uint64_t v0 = 0;
  return result;
}

void static CustomHoverEffect<>.highlight(background:)()
{
}

uint64_t HighlightHoverEffect.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return HighlightHoverEffect.body(content:)(1, a1);
}

uint64_t protocol witness for CustomHoverEffect.body(content:) in conformance HighlightHoverEffect@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 257;
  return result;
}

void protocol witness for InternalCustomHoverEffect.systemHoverEffect.getter in conformance HighlightHoverEffect(_WORD *a1@<X8>)
{
  *a1 = 257;
}

uint64_t LiftHoverEffect.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return HighlightHoverEffect.body(content:)(2, a1);
}

uint64_t HighlightHoverEffect.body(content:)@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = result;
  *(_DWORD *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 28) = a1;
  *(unsigned char *)(a2 + 29) = 1;
  return result;
}

uint64_t protocol witness for CustomHoverEffect.body(content:) in conformance LiftHoverEffect@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 258;
  return result;
}

void protocol witness for InternalCustomHoverEffect.systemHoverEffect.getter in conformance LiftHoverEffect(_WORD *a1@<X8>)
{
  *a1 = 258;
}

void static CustomHoverEffect<>.spotlight.getter()
{
}

SwiftUI::SpotlightHoverEffect __swiftcall SpotlightHoverEffect.init()()
{
  result.background = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

void SpotlightHoverEffect.body(content:)()
{
}

void static CustomHoverEffect<>.glowEffect.getter()
{
}

void CustomHoverEffect.glowEffect()()
{
}

void GlowHoverEffect.body(content:)()
{
}

void GlowHoverEffect.systemHoverEffect.getter()
{
}

uint64_t protocol witness for InternalCustomHoverEffect.wrappedEffect.getter in conformance GlowHoverEffect@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 26);
  int v6 = *(unsigned __int16 *)(v1 + 24);
  char v7 = *(unsigned char *)(v1 + 27);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 26) = v5;
  *(_WORD *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 27) = v7;
  return outlined copy of Environment<HoverEffectContext?>.Content(v2, v3, v4, v6 | (v5 << 16), v7);
}

void static CustomHoverEffect<>.outline.getter()
{
}

void __swiftcall OutlineHoverEffect.init()()
{
}

void OutlineHoverEffect.body(content:)()
{
}

uint64_t HoverContainerEffect.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(unsigned __int16 *)(v1 + 24) | (*(unsigned __int8 *)(v1 + 26) << 16);
  int v7 = *(unsigned __int8 *)(v1 + 27);
  char v8 = *(unsigned char *)(v1 + 28);
  char v9 = *(unsigned char *)(v1 + 29);
  outlined copy of Environment<HoverEffectContext?>.Content(v3, v4, v5, v6, v7);
  specialized Environment.wrappedValue.getter(v3, v4, v5, v6 | (v7 << 24), (uint64_t)v13);
  outlined consume of Environment<HoverEffectContext?>.Content(v3, v4, v5, v6, v7);
  if (v14 == 2) {
    BOOL v10 = v9;
  }
  else {
    BOOL v10 = ((v14 | (v15 << 16)) & 0x10000) == 0;
  }
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = KeyPath;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = result;
  *(unsigned char *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 33) = v8;
  *(unsigned char *)(a1 + 34) = v10;
  return result;
}

void protocol witness for InternalCustomHoverEffect.systemHoverEffect.getter in conformance HoverContainerEffect(unsigned char *a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 29);
  *a1 = *(unsigned char *)(v1 + 28);
  a1[1] = v2;
}

uint64_t protocol witness for InternalCustomHoverEffect.wrappedEffect.getter in conformance HoverContainerEffect@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  int v5 = *(unsigned __int8 *)(v1 + 26);
  int v6 = *(unsigned __int16 *)(v1 + 24);
  char v7 = *(unsigned char *)(v1 + 27);
  char v8 = *(unsigned char *)(v1 + 28);
  char v9 = *(unsigned char *)(v1 + 29);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 26) = v5;
  *(_WORD *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 27) = v7;
  *(unsigned char *)(a1 + 28) = v8;
  *(unsigned char *)(a1 + 29) = v9;
  return outlined copy of Environment<HoverEffectContext?>.Content(v2, v3, v4, v6 | (v5 << 16), v7);
}

double key path getter for EnvironmentValues.hoverEffectContext : EnvironmentValues@<D0>(uint64_t a1@<X8>)
{
  EnvironmentValues.hoverEffectContext.getter();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 26) = v6;
  *(_WORD *)(a1 + 24) = v5;
  return result;
}

double sub_187CD139C@<D0>(uint64_t a1@<X8>)
{
  EnvironmentValues.hoverEffectContext.getter();
  double result = *(double *)&v3;
  *(_OWORD *)a1 = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 26) = v6;
  *(_WORD *)(a1 + 24) = v5;
  return result;
}

uint64_t key path setter for EnvironmentValues.hoverEffectContext : EnvironmentValues()
{
  return EnvironmentValues.hoverEffectContext.setter();
}

uint64_t sub_187CD1448()
{
  return EnvironmentValues.hoverEffectContext.setter();
}

unint64_t instantiation function for generic protocol witness table for HighlightHoverEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type HighlightHoverEffect and conformance HighlightHoverEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type HighlightHoverEffect and conformance HighlightHoverEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type HighlightHoverEffect and conformance HighlightHoverEffect;
  if (!lazy protocol witness table cache variable for type HighlightHoverEffect and conformance HighlightHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HighlightHoverEffect and conformance HighlightHoverEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HighlightHoverEffect and conformance HighlightHoverEffect;
  if (!lazy protocol witness table cache variable for type HighlightHoverEffect and conformance HighlightHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HighlightHoverEffect and conformance HighlightHoverEffect);
  }
  return result;
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in LiftHoverEffect()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for LiftHoverEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LiftHoverEffect and conformance LiftHoverEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type LiftHoverEffect and conformance LiftHoverEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect;
  if (!lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect;
  if (!lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LiftHoverEffect and conformance LiftHoverEffect);
  }
  return result;
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in SpotlightHoverEffect()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for SpotlightHoverEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SpotlightHoverEffect and conformance SpotlightHoverEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type SpotlightHoverEffect and conformance SpotlightHoverEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type SpotlightHoverEffect and conformance SpotlightHoverEffect;
  if (!lazy protocol witness table cache variable for type SpotlightHoverEffect and conformance SpotlightHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpotlightHoverEffect and conformance SpotlightHoverEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpotlightHoverEffect and conformance SpotlightHoverEffect;
  if (!lazy protocol witness table cache variable for type SpotlightHoverEffect and conformance SpotlightHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpotlightHoverEffect and conformance SpotlightHoverEffect);
  }
  return result;
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in GlowHoverEffect()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type GlowHoverEffect and conformance GlowHoverEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type GlowHoverEffect and conformance GlowHoverEffect;
  if (!lazy protocol witness table cache variable for type GlowHoverEffect and conformance GlowHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GlowHoverEffect and conformance GlowHoverEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GlowHoverEffect and conformance GlowHoverEffect;
  if (!lazy protocol witness table cache variable for type GlowHoverEffect and conformance GlowHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GlowHoverEffect and conformance GlowHoverEffect);
  }
  return result;
}

uint64_t associated type witness table accessor for CustomHoverEffect.Body : CustomHoverEffect in OutlineHoverEffect()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for OutlineHoverEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type OutlineHoverEffect and conformance OutlineHoverEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type OutlineHoverEffect and conformance OutlineHoverEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type OutlineHoverEffect and conformance OutlineHoverEffect;
  if (!lazy protocol witness table cache variable for type OutlineHoverEffect and conformance OutlineHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutlineHoverEffect and conformance OutlineHoverEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OutlineHoverEffect and conformance OutlineHoverEffect;
  if (!lazy protocol witness table cache variable for type OutlineHoverEffect and conformance OutlineHoverEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OutlineHoverEffect and conformance OutlineHoverEffect);
  }
  return result;
}

ValueMetadata *type metadata accessor for LiftHoverEffect()
{
  return &type metadata for LiftHoverEffect;
}

unsigned char *storeEnumTagSinglePayload for HighlightHoverEffect(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    double *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187CD19F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          double *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SpotlightHoverEffect()
{
  return &type metadata for SpotlightHoverEffect;
}

uint64_t initializeWithCopy for GlowHoverEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v6 = *(unsigned __int8 *)(a2 + 26);
  int v7 = *(unsigned __int16 *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 27);
  outlined copy of Environment<HoverEffectContext?>.Content(*(void *)a2, v4, v5, v7 | (v6 << 16), v8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(unsigned char *)(a1 + 26) = v6;
  *(_WORD *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 27) = v8;
  return a1;
}

uint64_t assignWithCopy for GlowHoverEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  int v6 = *(unsigned __int8 *)(a2 + 26);
  int v7 = *(unsigned __int16 *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 27);
  outlined copy of Environment<HoverEffectContext?>.Content(*(void *)a2, v4, v5, v7 | (v6 << 16), v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(unsigned __int16 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 26) << 16);
  char v13 = *(unsigned char *)(a1 + 27);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_WORD *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 26) = v6;
  *(unsigned char *)(a1 + 27) = v8;
  outlined consume of Environment<HoverEffectContext?>.Content(v9, v10, v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for GlowHoverEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 26);
  __int16 v5 = *(_WORD *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 27);
  uint64_t v7 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(unsigned __int16 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 26) << 16);
  char v11 = *(unsigned char *)(a1 + 27);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 26) = v4;
  *(unsigned char *)(a1 + 27) = v6;
  outlined consume of Environment<HoverEffectContext?>.Content(v7, v9, v8, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for GlowHoverEffect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 27);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for GlowHoverEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 28) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 27) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GlowHoverEffect()
{
  return &type metadata for GlowHoverEffect;
}

ValueMetadata *type metadata accessor for OutlineHoverEffect()
{
  return &type metadata for OutlineHoverEffect;
}

uint64_t sub_187CD1C64()
{
  return lazy protocol witness table accessor for type ModifiedContent<EmptyHoverEffect, HoverEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<EmptyHoverEffect, HoverEffect> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<EmptyHoverEffect, HoverEffect>, (uint64_t)&type metadata for HoverEffect, (void (*)(void))lazy protocol witness table accessor for type HoverEffect and conformance HoverEffect);
}

uint64_t sub_187CD1CA8()
{
  return lazy protocol witness table accessor for type ModifiedContent<EmptyHoverEffect, HoverEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<EmptyHoverEffect, HoverContainerEffect> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<EmptyHoverEffect, HoverContainerEffect>, (uint64_t)&type metadata for HoverContainerEffect, (void (*)(void))lazy protocol witness table accessor for type HoverContainerEffect and conformance HoverContainerEffect);
}

uint64_t sub_187CD1CEC()
{
  return MEMORY[0x1E4F3FCA8];
}

uint64_t sub_187CD1CF8()
{
  return swift_getWitnessTable();
}

uint64_t destroy for GlowHoverEffect(uint64_t a1)
{
  return outlined consume of Environment<HoverEffectContext?>.Content(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int16 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 26) << 16), *(unsigned char *)(a1 + 27));
}

uint64_t initializeWithCopy for HoverContainerEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  int v7 = *(unsigned __int8 *)(a2 + 26);
  int v8 = *(unsigned __int16 *)(a2 + 24);
  char v9 = *(unsigned char *)(a2 + 27);
  outlined copy of Environment<HoverEffectContext?>.Content(*(void *)a2, v5, v6, v8 | (v7 << 16), v9);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 26) = v7;
  *(_WORD *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 27) = v9;
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  return a1;
}

uint64_t assignWithCopy for HoverContainerEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  int v7 = *(unsigned __int8 *)(a2 + 26);
  int v8 = *(unsigned __int16 *)(a2 + 24);
  char v9 = *(unsigned char *)(a2 + 27);
  outlined copy of Environment<HoverEffectContext?>.Content(*(void *)a2, v5, v6, v8 | (v7 << 16), v9);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(unsigned __int16 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 26) << 16);
  char v14 = *(unsigned char *)(a1 + 27);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(_WORD *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 26) = v7;
  *(unsigned char *)(a1 + 27) = v9;
  outlined consume of Environment<HoverEffectContext?>.Content(v10, v11, v12, v13, v14);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  return a1;
}

__n128 __swift_memcpy30_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 14) = *(_OWORD *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for HoverContainerEffect(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 26);
  __int16 v6 = *(_WORD *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 27);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(unsigned __int16 *)(a1 + 24) | (*(unsigned __int8 *)(a1 + 26) << 16);
  char v12 = *(unsigned char *)(a1 + 27);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 26) = v5;
  *(unsigned char *)(a1 + 27) = v7;
  outlined consume of Environment<HoverEffectContext?>.Content(v8, v9, v10, v11, v12);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(unsigned char *)(a1 + 29) = *(unsigned char *)(a2 + 29);
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverContainerEffect(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 30)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 27);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverContainerEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 30) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 30) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 27) = -(char)a2;
    }
  }
  return result;
}

void static CustomHoverEffect<>.spotlight(background:)()
{
}

Swift::Void __swiftcall UIHostingViewBase.updateTransformWithoutGeometryObservation()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 16;
  uint64_t v3 = MEMORY[0x18C119DF0](v2);
  if (!v3) {
    return;
  }
  id v7 = (id)v3;
  char v4 = *(unsigned char *)(v1 + 241);
  uint64_t v5 = MEMORY[0x18C119DF0](v2);
  if (!v5)
  {
LABEL_6:
    if (v4) {
      goto LABEL_12;
    }
LABEL_9:
    if (*(unsigned char *)(v1 + 241) == 1)
    {
      objc_msgSend(v7, sel__unregisterForGeometryChanges);

      *(unsigned char *)(v1 + 241) = 0;
      return;
    }
    goto LABEL_12;
  }
  __int16 v6 = (void *)v5;
  if (!ViewGraph.invalidateTransform()() && (*(unsigned char *)(v1 + 241) & 1) != 0)
  {
    objc_msgSend(v6, sel__unregisterForGeometryChanges);

    *(unsigned char *)(v1 + 241) = 0;
    goto LABEL_6;
  }

  if ((v4 & 1) == 0) {
    goto LABEL_9;
  }
LABEL_12:
}

uint64_t implicit closure #2 in UIHostingViewBase._geometryChanged(_:forAncestor:)()
{
  _StringGuts.grow(_:)(54);
  v0._object = (void *)0x8000000188337090;
  v0._countAndFlagsBits = 0xD000000000000033;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t closure #1 in UIHostingViewBase.endUpdateEnvironment(_:)(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x18C119DF0](v2);
  if (result)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v4 + 136))(ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t closure #2 in UIHostingViewBase.startUpdateTimer(delay:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void **)(result + 208);
    *(void *)(result + 208) = 0;

    *(void *)(v1 + 192) = 0;
    *(unsigned char *)(v1 + 200) = 1;
    UIHostingViewBase.requestImmediateUpdate()();
    return swift_release();
  }
  return result;
}

void closure #1 in DisplayLink.invalidate()(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC7SwiftUI11DisplayLink_link;
  uint64_t v3 = *(void **)(a1 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_link);
  if (v3)
  {
    id v4 = v3;
    if (objc_msgSend(v4, sel_isPaused)) {
      objc_msgSend(v4, sel_invalidate);
    }
  }
  uint64_t v5 = *(void **)(a1 + v2);
  *(void *)(a1 + v2) = 0;
}

uint64_t @objc UIHostingViewBase.windowDidRotate(notification:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6 = type metadata accessor for Notification();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  *(unsigned char *)(a1 + 224) = a4;
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t @objc UIHostingViewBase.sceneWillEnterForeground()(uint64_t a1, uint64_t a2, char a3)
{
  swift_retain();
  UIHostingViewBase.sceneActivationStateDidChange(with:)(a3);

  return swift_release();
}

uint64_t @objc UIHostingViewBase.sceneDidUpdateSystemUserInterfaceStyle()(uint64_t a1)
{
  uint64_t result = MEMORY[0x18C119DF0](a1 + 24);
  if (result)
  {
    swift_getObjectType();
    swift_retain();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DisplayLink.ThreadName(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    double *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187CD2734);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          double *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayLink.ThreadName()
{
  return &type metadata for DisplayLink.ThreadName;
}

ValueMetadata *type metadata accessor for UIHostingViewBase.Options()
{
  return &type metadata for UIHostingViewBase.Options;
}

unint64_t lazy protocol witness table accessor for type UIHostingViewBase.Options and conformance UIHostingViewBase.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type UIHostingViewBase.Options and conformance UIHostingViewBase.Options;
  if (!lazy protocol witness table cache variable for type UIHostingViewBase.Options and conformance UIHostingViewBase.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIHostingViewBase.Options and conformance UIHostingViewBase.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UIHostingViewBase.Options and conformance UIHostingViewBase.Options;
  if (!lazy protocol witness table cache variable for type UIHostingViewBase.Options and conformance UIHostingViewBase.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIHostingViewBase.Options and conformance UIHostingViewBase.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UIHostingViewBase.Options and conformance UIHostingViewBase.Options;
  if (!lazy protocol witness table cache variable for type UIHostingViewBase.Options and conformance UIHostingViewBase.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIHostingViewBase.Options and conformance UIHostingViewBase.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UIHostingViewBase.Options and conformance UIHostingViewBase.Options;
  if (!lazy protocol witness table cache variable for type UIHostingViewBase.Options and conformance UIHostingViewBase.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIHostingViewBase.Options and conformance UIHostingViewBase.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DisplayLink.ThreadName and conformance DisplayLink.ThreadName()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayLink.ThreadName and conformance DisplayLink.ThreadName;
  if (!lazy protocol witness table cache variable for type DisplayLink.ThreadName and conformance DisplayLink.ThreadName)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayLink.ThreadName and conformance DisplayLink.ThreadName);
  }
  return result;
}

uint64_t sub_187CD2934()
{
  return swift_deallocObject();
}

uint64_t sub_187CD2944()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in DisplayLink.invalidate()()
{
  closure #1 in DisplayLink.invalidate()(*(void *)(v0 + 16));
}

uint64_t sub_187CD2970()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

void partial apply for closure #1 in UIHostingViewBase.startUpdateTimer(delay:)()
{
  UIHostingViewBase.startUpdateTimer(delay:)(*(Swift::Double *)(v0 + 24));
}

uint64_t partial apply for closure #2 in UIHostingViewBase.startUpdateTimer(delay:)()
{
  return closure #2 in UIHostingViewBase.startUpdateTimer(delay:)();
}

uint64_t sub_187CD29DC()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIHostingViewBase.endUpdateEnvironment(_:)()
{
  return closure #1 in UIHostingViewBase.endUpdateEnvironment(_:)(v0);
}

void closure #1 in DisplayLink.invalidate()partial apply()
{
}

uint64_t NavigationLink.init(destination:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  *(void *)a5 = 0;
  *(void *)(a5 + 8) = 0;
  *(_WORD *)(a5 + 16) = 0;
  uint64_t v9 = (int *)type metadata accessor for NavigationLink();
  uint64_t v10 = a5 + v9[14];
  uint64_t v11 = *(void *)(a4 - 8);
  char v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v12(v10, 1, 1, a4);
  *(unsigned char *)(a5 + v9[15]) = 1;
  *(void *)(a5 + v9[16]) = 0;
  *(unsigned char *)(a5 + v9[17]) = 0;
  uint64_t v13 = a5 + v9[18];
  *(_DWORD *)uint64_t v13 = 0;
  *(void *)(v13 + 8) = 0;
  uint64_t v14 = a5 + v9[19];
  *(unsigned char *)uint64_t v14 = 0;
  *(void *)(v14 + 8) = 0;
  uint64_t v15 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v10, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v10, a1, a4);
  v12(v10, 0, 1, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5 + v9[13], a2, a3);
}

uint64_t NavigationLink.init(destination:label:isActive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v12 = (int *)type metadata accessor for NavigationLink();
  uint64_t v13 = a8 + v12[14];
  uint64_t v14 = *(void *)(a7 - 8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v15(v13, 1, 1, a7);
  outlined consume of StateOrBinding<Bool>(0, 0, 0, 0);
  *(unsigned char *)(a8 + v12[15]) = 1;
  *(void *)(a8 + v12[16]) = 0;
  *(unsigned char *)(a8 + v12[17]) = 0;
  uint64_t v16 = a8 + v12[18];
  *(_DWORD *)uint64_t v16 = 0;
  *(void *)(v16 + 8) = 0;
  uint64_t v17 = a8 + v12[19];
  *(unsigned char *)uint64_t v17 = 0;
  *(void *)(v17 + 8) = 0;
  *(void *)a8 = a3;
  *(void *)(a8 + 8) = a4;
  *(unsigned char *)(a8 + 16) = a5;
  *(unsigned char *)(a8 + 17) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a8 + v12[13], a2, a6);
  uint64_t v18 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v13, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v13, a1, a7);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v15)(v13, 0, 1, a7);
}

uint64_t NavigationLink.init<A>(destination:label:tag:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v77 = a5;
  uint64_t v78 = a8;
  uint64_t v75 = a1;
  uint64_t v76 = a4;
  uint64_t v81 = a3;
  uint64_t v74 = a2;
  uint64_t v67 = a7;
  uint64_t v83 = *(void *)(a7 - 8);
  uint64_t v68 = *(void *)(v83 + 64);
  uint64_t v82 = a11;
  uint64_t v79 = a10;
  MEMORY[0x1F4188790](a1);
  v80 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Optional();
  uint64_t v17 = type metadata accessor for Binding();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  MEMORY[0x1F4188790](v17);
  size_t v21 = (char *)&v56 - v20;
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(_WORD *)(a9 + 16) = 0;
  uint64_t v85 = a5;
  uint64_t v86 = a6;
  uint64_t v87 = a8;
  uint64_t v88 = a10;
  char v22 = (int *)type metadata accessor for NavigationLink();
  uint64_t v23 = a9 + v22[14];
  uint64_t v84 = a6;
  uint64_t v24 = *(void *)(a6 - 8);
  uint64_t v70 = v23;
  uint64_t v71 = v24;
  int v25 = *(void (**)(void))(v24 + 56);
  uint64_t v72 = v24 + 56;
  v73 = v25;
  v25();
  v69 = v22;
  *(unsigned char *)(a9 + v22[15]) = 1;
  *(void *)(a9 + v22[16]) = 0;
  *(unsigned char *)(a9 + v22[17]) = 0;
  uint64_t v26 = a9 + v22[18];
  *(_DWORD *)uint64_t v26 = 0;
  *(void *)(v26 + 8) = 0;
  uint64_t v27 = a9 + v22[19];
  *(unsigned char *)uint64_t v27 = 0;
  *(void *)(v27 + 8) = 0;
  unsigned int v28 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
  uint64_t v63 = v18 + 16;
  v65 = v28;
  v28(v21, a4, v17);
  uint64_t v29 = v83;
  v64 = *(void (**)(char *, uint64_t, uint64_t))(v83 + 16);
  uint64_t v30 = v67;
  v64(v80, v81, v67);
  uint64_t v31 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v66 = v18;
  uint64_t v32 = (v31 + 80) & ~v31;
  uint64_t v33 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v62 = v32;
  uint64_t v34 = (v19 + v33 + v32) & ~v33;
  v68 += v34;
  uint64_t v60 = v34;
  uint64_t v61 = v31 | v33 | 7;
  uint64_t v35 = (char *)swift_allocObject();
  *((void *)v35 + 2) = 0;
  *((void *)v35 + 3) = 0;
  uint64_t v36 = v84;
  *((void *)v35 + 4) = v77;
  *((void *)v35 + 5) = v36;
  uint64_t v37 = v78;
  *((void *)v35 + 6) = v30;
  *((void *)v35 + 7) = v37;
  uint64_t v38 = v82;
  *((void *)v35 + 8) = v79;
  *((void *)v35 + 9) = v38;
  v59 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
  v57 = v21;
  uint64_t v39 = v17;
  v59(&v35[v32], v21, v17);
  char v40 = &v35[v34];
  v58 = *(void (**)(char *, char *, uint64_t))(v83 + 32);
  int v41 = v80;
  v58(v40, v80, v30);
  v65(v21, v76, v17);
  int v42 = v41;
  uint64_t v43 = v81;
  v64(v41, v81, v30);
  long long v44 = (char *)swift_allocObject();
  *((void *)v44 + 2) = 0;
  *((void *)v44 + 3) = 0;
  uint64_t v45 = v77;
  uint64_t v46 = v84;
  *((void *)v44 + 4) = v77;
  *((void *)v44 + 5) = v46;
  uint64_t v47 = v78;
  *((void *)v44 + 6) = v30;
  *((void *)v44 + 7) = v47;
  uint64_t v48 = &v44[v62];
  uint64_t v49 = v82;
  *((void *)v44 + 8) = v79;
  *((void *)v44 + 9) = v49;
  v59(v48, v57, v39);
  v58(&v44[v60], v42, v30);
  Binding.init(get:set:)();
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v76, v39);
  (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v43, v30);
  uint64_t v50 = v85;
  uint64_t v51 = v86;
  LOBYTE(v44) = v87;
  outlined consume of StateOrBinding<Bool>(*(void *)a9, *(void *)(a9 + 8), *(unsigned __int8 *)(a9 + 16), *(unsigned char *)(a9 + 17));
  *(void *)a9 = v50;
  *(void *)(a9 + 8) = v51;
  *(unsigned char *)(a9 + 16) = (_BYTE)v44;
  *(unsigned char *)(a9 + 17) = 1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32))(a9 + v69[13], v74, v45);
  uint64_t v52 = v84;
  uint64_t v53 = type metadata accessor for Optional();
  uint64_t v54 = v70;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v53 - 8) + 8))(v70, v53);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v71 + 32))(v54, v75, v52);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v73)(v54, 0, 1, v52);
}

uint64_t closure #1 in NavigationLink.init<A>(destination:label:tag:selection:)@<X0>(uint64_t a1@<X6>, unsigned char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Binding();
  MEMORY[0x18C113DA0](v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, a1) == 1)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    char v14 = 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v7, a1);
    char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, a1);
    char v14 = v15 & 1;
  }
  *a2 = v14;
  return result;
}

uint64_t closure #2 in NavigationLink.init<A>(destination:label:tag:selection:)(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = *(void *)(a8 - 8);
  MEMORY[0x1F4188790](a1);
  v58 = (char *)v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v17);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v50 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)v50 - v22;
  double v30 = MEMORY[0x1F4188790](v24);
  uint64_t v31 = (char *)v50 - v26;
  if (*a1 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)v50 - v26, a5, a8, v30);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v31, 0, 1, a8);
    type metadata accessor for Binding();
    specialized Binding.wrappedValue.setter();
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v31, v14);
  }
  uint64_t v54 = v29;
  uint64_t v55 = v28;
  uint64_t v51 = (char *)v50 - v26;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v35 = v12;
  uint64_t v36 = v27;
  uint64_t v37 = v25;
  v50[2] = type metadata accessor for Binding();
  uint64_t v52 = v33;
  MEMORY[0x18C113DA0]();
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v20, v34, a8);
  v50[0] = *(void *)(v35 + 56);
  v50[1] = v35 + 56;
  ((void (*)(char *, void, uint64_t, uint64_t))v50[0])(v20, 0, 1, a8);
  uint64_t v56 = v37;
  uint64_t v38 = &v36[*(int *)(v37 + 48)];
  uint64_t v39 = *(void (**)(uint64_t, char *, uint64_t))(v16 + 16);
  v39((uint64_t)v36, v23, v14);
  uint64_t v57 = (uint64_t)v38;
  v39((uint64_t)v38, v20, v14);
  uint64_t v53 = v35;
  char v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  v59 = v36;
  if (v40((uint64_t)v36, 1, a8) != 1)
  {
    uint64_t v43 = v54;
    v39((uint64_t)v54, v59, v14);
    if (v40(v57, 1, a8) != 1)
    {
      uint64_t v46 = v53;
      uint64_t v47 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v58, v57, a8);
      LODWORD(v57) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v48 = *(void (**)(char *, uint64_t))(v46 + 8);
      v48(v47, a8);
      int v42 = *(void (**)(char *, uint64_t))(v16 + 8);
      v42(v20, v14);
      v42(v23, v14);
      v48(v43, a8);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v42)(v59, v14);
      if ((v57 & 1) == 0) {
        return result;
      }
      goto LABEL_10;
    }
    long long v44 = v43;
    int v41 = v59;
    uint64_t v45 = *(void (**)(char *, uint64_t))(v16 + 8);
    v45(v20, v14);
    v45(v23, v14);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v44, a8);
    return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v41, v56);
  }
  int v41 = v59;
  int v42 = *(void (**)(char *, uint64_t))(v16 + 8);
  v42(v20, v14);
  v42(v23, v14);
  if (v40(v57, 1, a8) != 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v41, v56);
  }
  v42(v41, v14);
LABEL_10:
  uint64_t v49 = v51;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v50[0])(v51, 1, 1, a8);
  specialized Binding.wrappedValue.setter();
  return ((uint64_t (*)(char *, uint64_t))v42)(v49, v14);
}

uint64_t NavigationLink<>.init(destination:titleKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v16[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, a1, v10, v7);
  v16[0] = Text.init(_:tableName:bundle:comment:)();
  v16[1] = v11;
  char v17 = v12 & 1;
  uint64_t v18 = v13;
  NavigationLink.init(destination:label:)((uint64_t)v9, (uint64_t)v16, MEMORY[0x1E4F41420], a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t NavigationLink<>.init<A>(destination:title:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v24[1] = a5;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 - 8);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v15 + 16))(v19, a1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, a4);
  v25[0] = Text.init<A>(_:)();
  v25[1] = v20;
  char v26 = v21 & 1;
  uint64_t v27 = v22;
  NavigationLink.init(destination:label:)((uint64_t)v19, (uint64_t)v25, MEMORY[0x1E4F41420], a3, a6);
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a2, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, a3);
}

uint64_t NavigationLink<>.init(destination:titleKey:isActive:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X6>, int a4@<W7>, uint64_t a5@<X8>, uint64_t a6)
{
  int v18 = a4;
  uint64_t v16 = a2;
  uint64_t v17 = a3;
  uint64_t v8 = *(void *)(a6 - 8);
  double v9 = MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v11, a1, a6, v9);
  v19[0] = Text.init(_:tableName:bundle:comment:)();
  v19[1] = v12;
  char v20 = v13 & 1;
  uint64_t v21 = v14;
  NavigationLink.init(destination:label:isActive:)((uint64_t)v11, (uint64_t)v19, v16, v17, v18, MEMORY[0x1E4F41420], a6, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, a6);
}

uint64_t NavigationLink<>.init<A>(destination:titleKey:tag:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v44 = a7;
  uint64_t v45 = a9;
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  int v39 = a4;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t v36 = a1;
  uint64_t v42 = a11;
  uint64_t v43 = a12;
  type metadata accessor for Optional();
  uint64_t v14 = type metadata accessor for Binding();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t v18 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = a8;
  uint64_t v22 = *(void *)(a8 - 8);
  double v24 = MEMORY[0x1F4188790](v23);
  char v26 = (char *)&v35 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v26, a1, a8, v24);
  v46[0] = Text.init(_:tableName:bundle:comment:)();
  v46[1] = v27;
  char v47 = v28 & 1;
  uint64_t v48 = v29;
  uint64_t v30 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v41, a10);
  uint64_t v31 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v44, v14);
  uint64_t v32 = (uint64_t)v21;
  uint64_t v33 = v35;
  NavigationLink.init<A>(destination:label:tag:selection:)((uint64_t)v26, (uint64_t)v46, v32, (uint64_t)v17, MEMORY[0x1E4F41420], v35, a10, MEMORY[0x1E4F41418], v45, v42, v43);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v31, v14);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v30, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v36, v33);
}

uint64_t NavigationLink<>.init<A, B>(destination:title:tag:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v54 = a8;
  uint64_t v55 = a2;
  uint64_t v50 = a4;
  uint64_t v51 = a3;
  uint64_t v45 = a1;
  uint64_t v53 = a9;
  uint64_t v52 = a11;
  uint64_t v48 = a10;
  type metadata accessor for Optional();
  uint64_t v49 = type metadata accessor for Binding();
  uint64_t v47 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v46 = (char *)&v42 - v15;
  uint64_t v42 = *(void *)(a7 - 8);
  uint64_t v16 = v42;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = a5;
  uint64_t v24 = *(void *)(a5 - 8);
  double v26 = MEMORY[0x1F4188790](v25);
  char v28 = (char *)&v42 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v28, a1, a5, v26);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v44 = a6;
  v29(v23, v55, a6);
  v56[0] = Text.init<A>(_:)();
  v56[1] = v30;
  char v57 = v31 & 1;
  uint64_t v58 = v32;
  uint64_t v33 = v51;
  uint64_t v34 = a7;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v51, a7);
  uint64_t v36 = (uint64_t)v46;
  uint64_t v35 = v47;
  uint64_t v37 = v49;
  uint64_t v38 = v50;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v46, v50, v49);
  uint64_t v39 = (uint64_t)v19;
  uint64_t v40 = v43;
  NavigationLink.init<A>(destination:label:tag:selection:)((uint64_t)v28, (uint64_t)v56, v39, v36, MEMORY[0x1E4F41420], v43, v34, MEMORY[0x1E4F41418], v53, v54, v52);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v38, v37);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v33, v34);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v55, v44);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v45, v40);
}

uint64_t NavigationLink.isDetailLink(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, v3, a2);
  *(unsigned char *)(a3 + *(int *)(a2 + 60)) = a1;
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NavigationLink(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(a3 + 24) - 8;
  uint64_t v8 = *(void *)v7;
  uint64_t v9 = *(_DWORD *)(*(void *)v7 + 80);
  if (*(_DWORD *)(*(void *)v7 + 84)) {
    size_t v10 = *(void *)(*(void *)v7 + 64);
  }
  else {
    size_t v10 = *(void *)(*(void *)v7 + 64) + 1;
  }
  uint64_t v11 = v9 | v6;
  if ((v9 | v6) > 7
    || ((*(_DWORD *)(*(void *)v7 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000) != 0
    || ((((v10 + ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9 + ((v6 + 18) & ~v6)) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
       + 47) & 0xFFFFFFFFFFFFFFF8)
     + 16 > 0x18)
  {
    uint64_t v14 = *a2;
    *(void *)a1 = *a2;
    uint64_t v4 = v14 + ((v11 & 0xF8 ^ 0x1F8) & (v11 + 16));
  }
  else
  {
    unsigned int v15 = *((unsigned __int8 *)a2 + 17);
    if (v15 >= 2) {
      unsigned int v15 = *(_DWORD *)a2 + 2;
    }
    uint64_t v16 = ~v6;
    uint64_t v29 = *(void *)(a3 + 16);
    uint64_t v30 = *(void *)(a3 + 24);
    uint64_t v27 = ~v9;
    uint64_t v28 = *(void *)(*(void *)(v29 - 8) + 64);
    if (v15 == 1)
    {
      uint64_t v17 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v17;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      swift_retain();
      char v18 = 1;
    }
    else
    {
      char v18 = 0;
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = a2[1];
    }
    swift_retain();
    *(unsigned char *)(v4 + 17) = v18;
    uint64_t v19 = ((unint64_t)a2 + v6 + 18) & v16;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 16))((v4 + v6 + 18) & v16, v19, v29);
    uint64_t v20 = (void *)((((v4 + v6 + 18) & v16) + v28 + v9) & v27);
    uint64_t v21 = (const void *)((v19 + v28 + v9) & v27);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v21, 1, v30))
    {
      memcpy(v20, v21, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v20, v21, v30);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v20, 0, 1, v30);
    }
    *((unsigned char *)v20 + v10) = *((unsigned char *)v21 + v10);
    unint64_t v22 = ((unint64_t)v20 + v10) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = ((unint64_t)v21 + v10) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v22 + 8) = *(void *)(v23 + 8);
    *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
    *(_DWORD *)(v22 + 24) = *(_DWORD *)(v23 + 24);
    *(void *)(v22 + 32) = *(void *)(v23 + 32);
    unint64_t v24 = (v22 + 47) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = (v23 + 47) & 0xFFFFFFFFFFFFFFF8;
    *(unsigned char *)unint64_t v24 = *(unsigned char *)v25;
    *(void *)(v24 + 8) = *(void *)(v25 + 8);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithTake for NavigationLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = *(unsigned __int8 *)(a2 + 17);
  if (v5 >= 2) {
    unsigned int v5 = *(_DWORD *)a2 + 2;
  }
  if (v5 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(unsigned char *)(a1 + 17) = v6;
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 18 + a1) & ~v9;
  uint64_t v11 = (v9 + 18 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 32))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 32);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = v12 + v15;
  uint64_t v17 = (char *)((v16 + v10) & ~v15);
  char v18 = (char *)((v16 + v11) & ~v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v18, 1, v13))
  {
    int v19 = *(_DWORD *)(v14 + 84);
    uint64_t v20 = *(void *)(v14 + 64);
    if (v19) {
      size_t v21 = *(void *)(v14 + 64);
    }
    else {
      size_t v21 = v20 + 1;
    }
    memcpy(v17, v18, v21);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v18, v13);
    unint64_t v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
    uint64_t v22 = v14 + 56;
    v23(v17, 0, 1, v13);
    int v19 = *(_DWORD *)(v22 + 28);
    uint64_t v20 = *(void *)(v22 + 8);
  }
  if (v19) {
    uint64_t v24 = v20;
  }
  else {
    uint64_t v24 = v20 + 1;
  }
  unint64_t v25 = (unint64_t)&v17[v24];
  unint64_t v26 = (unint64_t)&v18[v24];
  *(unsigned char *)unint64_t v25 = *(unsigned char *)v26;
  v25 &= 0xFFFFFFFFFFFFFFF8;
  v26 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)(v25 + 8) = *(void *)(v26 + 8);
  *(unsigned char *)(v25 + 16) = *(unsigned char *)(v26 + 16);
  *(_OWORD *)(v25 + 24) = *(_OWORD *)(v26 + 24);
  *(_OWORD *)((v25 + 47) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v26 + 47) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for NavigationLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 17);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a1 + 2;
    }
    if (v6 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v7 = *(unsigned __int8 *)(a2 + 17);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)a2 + 2;
    }
    if (v7 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      char v8 = 1;
    }
    else
    {
      char v8 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(unsigned char *)(a1 + 17) = v8;
  }
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 18 + a1) & ~v11;
  uint64_t v13 = (v11 + 18 + a2) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 24);
  uint64_t v15 = *(void *)(a3 + 24);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = v14 + v17;
  int v19 = (char *)((v18 + v12) & ~v17);
  uint64_t v20 = (char *)((v18 + v13) & ~v17);
  size_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v13) = v21(v19, 1, v15);
  int v22 = v21(v20, 1, v15);
  if (v13)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v20, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
      goto LABEL_23;
    }
    int v23 = *(_DWORD *)(v16 + 84);
    size_t v24 = *(void *)(v16 + 64);
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v19, v20, v15);
      goto LABEL_23;
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    int v23 = *(_DWORD *)(v16 + 84);
    size_t v24 = *(void *)(v16 + 64);
  }
  if (v23) {
    size_t v25 = v24;
  }
  else {
    size_t v25 = v24 + 1;
  }
  memcpy(v19, v20, v25);
LABEL_23:
  if (*(_DWORD *)(v16 + 84)) {
    uint64_t v26 = *(void *)(v16 + 64);
  }
  else {
    uint64_t v26 = *(void *)(v16 + 64) + 1;
  }
  unint64_t v27 = (unint64_t)&v19[v26];
  unint64_t v28 = (unint64_t)&v20[v26];
  *(unsigned char *)unint64_t v27 = *(unsigned char *)v28;
  unint64_t v29 = v27 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = v28 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((v27 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((v28 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  *(unsigned char *)(v29 + 16) = *(unsigned char *)(v30 + 16);
  *(_DWORD *)(v29 + 24) = *(_DWORD *)(v30 + 24);
  *(void *)(v29 + 32) = *(void *)(v30 + 32);
  swift_release();
  unint64_t v31 = (v29 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (v30 + 47) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v31 = *(unsigned char *)v32;
  *(void *)(v31 + 8) = *(void *)(v32 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationLink(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v6 <= v9) {
    unsigned int v10 = v9;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  if (v10 <= 0x7FFFFFFE) {
    unsigned int v10 = 2147483646;
  }
  uint64_t v11 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  if (!v8) {
    ++v14;
  }
  if (!a2) {
    return 0;
  }
  if (v10 < a2)
  {
    unint64_t v15 = ((((((v12 + v13 + ((v11 + 18) & ~v11)) & ~v13) + v14) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    unsigned int v16 = a2 - v10;
    uint64_t v17 = v15 & 0xFFFFFFF8;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v18 = 2;
    }
    else {
      unsigned int v18 = v16 + 1;
    }
    if (v18 >= 0x10000) {
      unsigned int v19 = 4;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v18 < 0x100) {
      unsigned int v19 = 1;
    }
    if (v18 >= 2) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    switch(v20)
    {
      case 1:
        int v21 = *((unsigned __int8 *)a1 + v15);
        if (!v21) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v21 = *(unsigned __int16 *)((char *)a1 + v15);
        if (v21) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187CD5178);
      case 4:
        int v21 = *(int *)((char *)a1 + v15);
        if (!v21) {
          break;
        }
LABEL_28:
        int v22 = v21 - 1;
        if (v17)
        {
          int v22 = 0;
          int v23 = *a1;
        }
        else
        {
          int v23 = 0;
        }
        return v10 + (v23 | v22) + 1;
      default:
        break;
    }
  }
  uint64_t v24 = ((unint64_t)a1 + v11 + 18) & ~v11;
  if (v6 == v10)
  {
    size_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    return v25(v24, v6, v4);
  }
  uint64_t v27 = (v24 + v12 + v13) & ~v13;
  if (v9 == v10)
  {
    if (v8 >= 2)
    {
      unsigned int v29 = (*(uint64_t (**)(uint64_t))(v7 + 48))(v27);
      if (v29 >= 2) {
        return v29 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  unint64_t v28 = *(void *)(((v27 + v14) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v28 >= 0xFFFFFFFF) {
    LODWORD(v28) = -1;
  }
  if ((v28 + 1) >= 2) {
    return v28;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for NavigationLink(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a4 + 24) - 8);
  int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  if (v10) {
    unsigned int v14 = v10 - 1;
  }
  else {
    unsigned int v14 = 0;
  }
  if (v8 <= v14) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v7 + 84);
  }
  if (v15 <= 0x7FFFFFFE) {
    unsigned int v15 = 2147483646;
  }
  if (v10) {
    uint64_t v16 = *(void *)(v9 + 64);
  }
  else {
    uint64_t v16 = *(void *)(v9 + 64) + 1;
  }
  unint64_t v17 = ((((((v12 + v13 + ((v11 + 18) & ~v11)) & ~v13) + v16) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v15 < a3)
  {
    unsigned int v18 = a3 - v15;
    if (((((((v12 + v13 + ((v11 + 18) & ~v11)) & ~v13) + v16) & 0xFFFFFFF8)
         + 47) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v19 = v18 + 1;
    else {
      unsigned int v19 = 2;
    }
    if (v19 >= 0x10000) {
      int v20 = 4;
    }
    else {
      int v20 = 2;
    }
    if (v19 < 0x100) {
      int v20 = 1;
    }
    if (v19 >= 2) {
      int v6 = v20;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v15)
  {
    if (((((((v12 + v13 + ((v11 + 18) & ~v11)) & ~v13) + v16) & 0xFFFFFFF8)
         + 47) & 0xFFFFFFF8) == 0xFFFFFFF0)
      int v21 = a2 - v15;
    else {
      int v21 = 1;
    }
    if (((((((v12 + v13 + ((v11 + 18) & ~v11)) & ~v13) + v16) & 0xFFFFFFF8)
         + 47) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      unsigned int v22 = ~v15 + a2;
      bzero(a1, ((((((v12 + v13 + ((v11 + 18) & ~v11)) & ~v13) + v16) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v22;
    }
    switch(v6)
    {
      case 1:
        a1[v17] = v21;
        return;
      case 2:
        *(_WORD *)&a1[v17] = v21;
        return;
      case 3:
        goto LABEL_53;
      case 4:
        *(_DWORD *)&a1[v17] = v21;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 2:
      *(_WORD *)&a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_39;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x187CD545CLL);
    case 4:
      *(_DWORD *)&a1[v17] = 0;
      goto LABEL_38;
    default:
LABEL_38:
      if (a2)
      {
LABEL_39:
        unint64_t v23 = (unint64_t)&a1[v11 + 18] & ~v11;
        if (v8 == v15)
        {
          uint64_t v24 = *(void (**)(unint64_t))(v7 + 56);
          v24(v23);
        }
        else
        {
          unint64_t v25 = (v23 + v12 + v13) & ~v13;
          if (v14 == v15)
          {
            uint64_t v26 = a2 + 1;
            uint64_t v27 = *(void (**)(unint64_t, uint64_t))(v9 + 56);
            v27(v25, v26);
          }
          else
          {
            unint64_t v28 = (v25 + v16) & 0xFFFFFFFFFFFFFFF8;
            if (a2 > 0x7FFFFFFE)
            {
              *(void *)(v28 + 8) = 0;
              *(_DWORD *)(v28 + 8) = a2 - 0x7FFFFFFF;
            }
            else
            {
              *(void *)(v28 + 8) = a2;
            }
          }
        }
      }
      return;
  }
}

uint64_t sub_187CD5484()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CD5634()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in NavigationLink.init<A>(destination:label:tag:selection:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 48);
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  return closure #1 in NavigationLink.init<A>(destination:label:tag:selection:)(v3, a1);
}

uint64_t partial apply for closure #2 in NavigationLink.init<A>(destination:label:tag:selection:)(unsigned char *a1)
{
  uint64_t v3 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v5 = v1[6];
  type metadata accessor for Optional();
  uint64_t v6 = *(void *)(type metadata accessor for Binding() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  return closure #2 in NavigationLink.init<A>(destination:label:tag:selection:)(a1, v1[2], v1[3], (uint64_t)v1 + v7, (uint64_t)v1+ ((v7 + *(void *)(v6 + 64) + *(unsigned __int8 *)(*(void *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80)), v3, v4, v5);
}

uint64_t View.rotation3DEffect(_:axis:anchor:anchorZ:perspective:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  *(double *)uint64_t v11 = a3;
  *(double *)&v11[1] = a4;
  *(double *)&v11[2] = a5;
  *(double *)&void v11[3] = a6;
  *(double *)&v11[4] = a7;
  *(double *)&v11[5] = a8;
  *(double *)&v11[6] = a9;
  *(double *)&v11[7] = a10;
  return MEMORY[0x18C113660](v11, a1, MEMORY[0x1E4F401F8], a2);
}

unint64_t lazy protocol witness table accessor for type _Rotation3DEffect and conformance _Rotation3DEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect;
  if (!lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _Rotation3DEffect and conformance _Rotation3DEffect);
  }
  return result;
}

uint64_t VisualEffect.rotation3DEffect(_:axis:anchor:anchorZ:perspective:)()
{
  return VisualEffect.geometryEffect<A>(_:)();
}

uint64_t sub_187CD5A70()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CD5AD4()
{
  return swift_getOpaqueTypeConformance2();
}

void *UIView.findPortal(kind:id:excludingGroups:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = specialized UIView.firstDescendantWhere(_:)(v3, a2, a1);
  unint64_t v7 = v6;
  if (v6)
  {
    id v8 = objc_msgSend(v6, sel_subviews);
    type metadata accessor for UIView();
    unint64_t v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v9 >> 62) {
      goto LABEL_16;
    }
    uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (v10)
    {
      uint64_t v11 = 4;
      while (1)
      {
        id v12 = (v9 & 0xC000000000000001) != 0
            ? (id)MEMORY[0x18C117680](v11 - 4, v9)
            : *(id *)(v9 + 8 * v11);
        uint64_t v13 = v12;
        uint64_t v14 = v11 - 3;
        if (__OFADD__(v11 - 4, 1)) {
          break;
        }
        unsigned int v15 = UIView.findPortalTarget(kind:)(a1);

        if (v15)
        {

          swift_bridgeObjectRelease();
          return v15;
        }
        ++v11;
        if (v14 == v10) {
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_16:
      swift_bridgeObjectRetain();
      uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
LABEL_11:
    swift_bridgeObjectRelease();
    if (a3)
    {

      return 0;
    }
  }
  return v7;
}

uint64_t View.definesContextMenuPreview()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 1;
  type metadata accessor for StaticIf<_SemanticFeature_v5, PortalTargetRendererEffect, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, PortalTargetRendererEffect, EmptyModifier>);
  return MEMORY[0x18C113660](&v6, a1, v4, a2);
}

uint64_t View.liftPreviewTarget()(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 7;
  type metadata accessor for StaticIf<_SemanticFeature_v5, PortalTargetRendererEffect, EmptyModifier>(0, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, PortalTargetRendererEffect, EmptyModifier>);
  return MEMORY[0x18C113660](&v6, a1, v4, a2);
}

void protocol witness for static Rule.initialValue.getter in conformance MakePortalGroupRendererEffect(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 1;
}

int *protocol witness for Rule.value.getter in conformance MakePortalGroupRendererEffect@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  unint64_t result = (int *)AGGraphGetValue();
  int v5 = *result;
  *(void *)a1 = v3;
  *(_DWORD *)(a1 + 8) = v5;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance PortalGroupRendererEffect()
{
}

uint64_t protocol witness for PlatformGroupFactory.renderPlatformGroup(_:in:size:renderer:) in conformance PortalGroupRendererEffect()
{
  return MEMORY[0x1F40FFBA8]();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PortalTargetRendererEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PortalGroupRendererEffect(a1, a2, a3, a4, a5, a6, (void (*)(void))lazy protocol witness table accessor for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect);
}

void protocol witness for ViewModifier.body(content:) in conformance PortalTargetRendererEffect()
{
}

id PortalTargetRendererEffect.makePlatformGroup()(uint64_t a1)
{
  uint64_t v2 = (objc_class *)type metadata accessor for PortalTargetMarkerView();
  uint64_t v3 = (char *)objc_allocWithZone(v2);
  *(void *)&v3[OBJC_IVAR____TtC7SwiftUIP33_5DAB09131F46EF4FA69B417F7F09D60322PortalTargetMarkerView_kind] = a1;
  v8.receiver = v3;
  v8.super_class = v2;
  id v4 = objc_msgSendSuper2(&v8, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v5 = objc_msgSend(v4, sel_layer);
  objc_msgSend(v5, sel_setAllowsGroupOpacity_, 0);

  id v6 = objc_msgSend(v4, sel_layer);
  objc_msgSend(v6, sel_setAllowsGroupBlending_, 0);

  return v4;
}

id protocol witness for PlatformGroupFactory.makePlatformGroup() in conformance PortalTargetRendererEffect()
{
  return PortalTargetRendererEffect.makePlatformGroup()(*v0);
}

uint64_t protocol witness for PlatformGroupFactory.updatePlatformGroup(_:) in conformance PortalTargetRendererEffect()
{
  uint64_t v1 = *v0;
  type metadata accessor for PortalTargetMarkerView();
  swift_unknownObjectRetain();
  uint64_t v2 = swift_dynamicCastClass();
  if (v2) {
    *(void *)(v2 + OBJC_IVAR____TtC7SwiftUIP33_5DAB09131F46EF4FA69B417F7F09D60322PortalTargetMarkerView_kind) = v1;
  }

  return swift_unknownObjectRelease();
}

void @objc PortalGroupMarkerView.init(frame:)()
{
}

uint64_t type metadata accessor for PortalTargetMarkerView()
{
  return self;
}

uint64_t sub_187CD60C0()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, PortalTargetRendererEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, PortalTargetRendererEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, PortalTargetRendererEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v5, PortalTargetRendererEffect, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, PortalTargetRendererEffect, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, PortalTargetRendererEffect, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void *type metadata accessor for PortalTargetRendererEffect()
{
  return &unk_1ED485800;
}

unint64_t lazy protocol witness table accessor for type PortalKinds and conformance PortalKinds()
{
  unint64_t result = lazy protocol witness table cache variable for type PortalKinds and conformance PortalKinds;
  if (!lazy protocol witness table cache variable for type PortalKinds and conformance PortalKinds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalKinds and conformance PortalKinds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalKinds and conformance PortalKinds;
  if (!lazy protocol witness table cache variable for type PortalKinds and conformance PortalKinds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalKinds and conformance PortalKinds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalKinds and conformance PortalKinds;
  if (!lazy protocol witness table cache variable for type PortalKinds and conformance PortalKinds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalKinds and conformance PortalKinds);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalKinds and conformance PortalKinds;
  if (!lazy protocol witness table cache variable for type PortalKinds and conformance PortalKinds)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalKinds and conformance PortalKinds);
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in PortalTargetRendererEffect()
{
  return &protocol witness table for PortalTargetRendererEffect;
}

unint64_t lazy protocol witness table accessor for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect;
  if (!lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect;
  if (!lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect;
  if (!lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect;
  if (!lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect;
  if (!lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect;
  if (!lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect;
  if (!lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalTargetRendererEffect and conformance PortalTargetRendererEffect);
  }
  return result;
}

uint64_t sub_187CD6544()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for MakePortalGroupRendererEffect()
{
  return &type metadata for MakePortalGroupRendererEffect;
}

ValueMetadata *type metadata accessor for PortalGroupID()
{
  return &type metadata for PortalGroupID;
}

uint64_t EnvironmentValues.segmentedControlStyle.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<SegmentedControlStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SegmentedControlStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SegmentedControlStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SegmentedControlStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<SegmentedControlStyleKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<SegmentedControlStyleKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SegmentedControlStyleKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SegmentedControlStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SegmentedControlStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SegmentedControlStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<SegmentedControlStyleKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SegmentedControlStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for SegmentedControlStyleKey()
{
  return &type metadata for SegmentedControlStyleKey;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance SegmentedControlStyleKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static SegmentedControlStyleKey.defaultValue;

  return swift_retain();
}

uint64_t closure #1 in InternalControlGroupStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  swift_bridgeObjectRetain();
  static AccessibilityVisibility.containerElement.getter();
  specialized View.accessibility<A>(_:_:isEnabled:)(v10 | ((unint64_t)v10 << 32), 1, a1, a2, (uint64_t)&v11);
  uint64_t result = swift_bridgeObjectRelease();
  char v7 = v12;
  uint64_t v8 = v13;
  uint64_t v9 = v14;
  *(void *)a3 = v11;
  *(unsigned char *)(a3 + 8) = v7;
  *(void *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v9;
  return result;
}

uint64_t closure #2 in InternalControlGroupStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  uint64_t v5 = swift_getKeyPath();
  uint64_t v6 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = closure #1 in View.forcePlatformItem();
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = KeyPath;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v3;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = v4;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v5;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = v6;
  *(unsigned char *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = result;
  *(unsigned char *)(a1 + 112) = 0;
  return result;
}

__n128 protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance InternalControlGroupStyle@<Q0>(uint64_t a1@<X8>)
{
  char v3 = *v1;
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = v3;
  swift_retain();
  uint64_t v5 = static Alignment.center.getter();
  uint64_t v7 = v6;
  closure #2 in InternalControlGroupStyle.makeBody(configuration:)((uint64_t)&v21);
  swift_release();
  uint64_t v8 = v22;
  char v9 = v23;
  uint64_t v10 = v24;
  char v11 = v25;
  uint64_t v12 = v26;
  char v13 = v27;
  uint64_t v14 = v28;
  char v15 = v29;
  uint64_t v16 = v32;
  char v17 = v33;
  __n128 result = v30;
  long long v19 = v21;
  char v20 = v31;
  *(void *)a1 = partial apply for closure #1 in InternalControlGroupStyle.makeBody(configuration:);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v7;
  *(_OWORD *)(a1 + 32) = v19;
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v9;
  *(void *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(unsigned char *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = v14;
  *(unsigned char *)(a1 + 104) = v15;
  *(__n128 *)(a1 + 112) = result;
  *(unsigned char *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v16;
  *(unsigned char *)(a1 + 144) = v17;
  return result;
}

uint64_t UIKitSegmentedControlAdaptor.updateUIView(_:context:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for PlatformItemList.Item();
  uint64_t v48 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v51 = (uint64_t)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  char v9 = (char *)&v46 - v8;
  type metadata accessor for (offset: Int, element: PlatformItemList.Item)();
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v47 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (offset: Int, element: PlatformItemList.Item)?();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (unint64_t *)((char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  double v18 = MEMORY[0x1F4188790](v17);
  char v20 = (char **)((char *)&v46 - v19);
  objc_msgSend(a1, sel_removeAllSegments, v18);
  unint64_t v21 = *(void *)(a3 + 16);
  uint64_t v55 = (unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48);
  uint64_t v56 = (void (**)(unint64_t *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  uint64_t v54 = v9 + 64;
  uint64_t v49 = a3;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v23 = 0;
  unint64_t v52 = v21;
  uint64_t v53 = MEMORY[0x1E4FBC840] + 8;
  uint64_t v50 = v20;
  uint64_t v46 = v9;
  while (1)
  {
    if (v23 == v21)
    {
      uint64_t v24 = 1;
      unint64_t v25 = v21;
      goto LABEL_8;
    }
    if (v23 >= v21) {
      break;
    }
    unint64_t v25 = v23 + 1;
    uint64_t v26 = (uint64_t)&v47[*(int *)(v11 + 48)];
    outlined init with copy of PlatformItemList.Item(v49+ ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80))+ *(void *)(v48 + 72) * v23, v26);
    uint64_t v27 = (uint64_t)v16 + *(int *)(v11 + 48);
    *uint64_t v16 = v23;
    _s7SwiftUI16PlatformItemListV0D0VWObTm_1(v26, v27, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    uint64_t v24 = 0;
LABEL_8:
    (*v56)(v16, v24, 1, v11);
    _s7SwiftUI16PlatformItemListV0D0VWObTm_1((uint64_t)v16, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: PlatformItemList.Item)?);
    if ((*v55)(v20, 1, v11) == 1) {
      return swift_bridgeObjectRelease();
    }
    unint64_t v57 = v25;
    uint64_t v28 = *v20;
    _s7SwiftUI16PlatformItemListV0D0VWObTm_1((uint64_t)v20 + *(int *)(v11 + 48), (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    char v29 = (void *)MEMORY[0x18C115780](0, 0xE000000000000000);
    objc_msgSend(a1, sel_insertSegmentWithTitle_atIndex_animated_, v29, v28, 0);

    if (*(void *)v9)
    {
      id v30 = objc_msgSend(*(id *)v9, sel_string);
      uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v33 = v32;

      uint64_t v34 = (void *)MEMORY[0x18C115780](v31, v33);
      char v20 = v50;
      swift_bridgeObjectRelease();
      objc_msgSend(a1, sel_setTitle_forSegmentAtIndex_, v34, v28);
    }
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v54, (uint64_t)v72, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v72, (uint64_t)&v73, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v73) != 1)
    {
      if (v85)
      {
        outlined release of Image.Resolved?((uint64_t)v72, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
        swift_unknownObjectRetain();
        self;
        uint64_t v35 = (void *)swift_dynamicCastObjCClassUnconditional();
        outlined init with copy of PlatformItemList.Item((uint64_t)v9, v51);
        if (v35)
        {
          outlined release of Image.Resolved?((uint64_t)v72, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
          outlined destroy of PlatformItemList.Item(v51);
LABEL_17:
          objc_msgSend(a1, sel_setImage_forSegmentAtIndex_, v35, v28, v46);

          goto LABEL_18;
        }
      }
      else
      {
        outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v72, (uint64_t)&v58, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
        outlined retain of Image.Resolved((uint64_t)&v58);
        outlined init with copy of PlatformItemList.Item((uint64_t)v9, v51);
      }
      id v36 = v73;
      char v37 = v74;
      id v58 = v73;
      char v59 = v74;
      long long v60 = v75;
      uint64_t v61 = v76;
      char v62 = v77;
      long long v63 = v78;
      char v64 = v79;
      long long v65 = v80;
      long long v66 = v81;
      char v67 = v82;
      char v68 = v83;
      __int16 v69 = v84;
      uint64_t v38 = v51;
      uint64_t v39 = v16;
      uint64_t v40 = v11;
      uint64_t v41 = a1;
      uint64_t v42 = *(void *)(v51 + 48);
      outlined copy of GraphicsImage.Contents?(v73, v74);
      uint64_t v43 = v42;
      a1 = v41;
      uint64_t v11 = v40;
      uint64_t v16 = v39;
      char v9 = v46;
      uint64_t v35 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v43);
      outlined release of Image.Resolved?((uint64_t)v72, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
      char v44 = v37;
      char v20 = v50;
      outlined consume of GraphicsImage.Contents?(v36, v44);
      outlined destroy of PlatformItemList.Item(v38);
      if (!v35) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
LABEL_18:
    objc_msgSend(a1, sel_setEnabled_forSegmentAtIndex_, *((void *)v9 + 51) > 1uLL, v28);
    if (objc_msgSend(a1, sel__accessibilitySegmentItemAtIndex_, v28))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v71, 0, sizeof(v71));
    }
    unint64_t v21 = v52;
    unint64_t v23 = v57;
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v71, (uint64_t)&v58, (unint64_t *)&lazy cache variable for type metadata for Any?);
    if (*((void *)&v60 + 1))
    {
      type metadata accessor for UIView();
      if (swift_dynamicCast())
      {
        id v45 = v70;
        specialized PlatformItemList.Item.applyAccessibilityProperties(to:)(v45, v9);
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v58);
    }
    uint64_t result = outlined destroy of PlatformItemList.Item((uint64_t)v9);
  }
  __break(1u);
  return result;
}

unint64_t UIKitSegmentedControlAdaptor.UIKitSegmentedControlCoordinator.primaryActionTriggered(_:)(void *a1)
{
  unint64_t result = (unint64_t)objc_msgSend(a1, sel_selectedSegmentIndex);
  if ((result & 0x8000000000000000) == 0)
  {
    unint64_t v3 = result;
    uint64_t v4 = *(void *)(v1
                   + OBJC_IVAR____TtCV7SwiftUIP33_62A8DBD3A37E684D521D6BC97A6F345A28UIKitSegmentedControlAdaptor32UIKitSegmentedControlCoordinator_representable);
    if (result < *(void *)(v4 + 16))
    {
      uint64_t v5 = type metadata accessor for PlatformItemList.Item();
      uint64_t v6 = *(void *)(v5 - 8);
      unint64_t result = v5 - 8;
      unint64_t v7 = v4
         + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
         + *(void *)(v6 + 72) * v3;
      uint64_t v8 = *(void (**)(unint64_t))(v7 + 408);
      if (v8 != (void (*)(unint64_t))1)
      {
        unint64_t result = outlined copy of AppIntentExecutor?(*(void *)(v7 + 408));
        if (v8)
        {
          v8(result);
          return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v8);
        }
      }
    }
  }
  return result;
}

uint64_t UIKitSegmentedControlAdaptor.UIKitSegmentedControlCoordinator.__ivar_destroyer()
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for UIKitSegmentedControlAdaptor.UIKitSegmentedControlCoordinator()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for UIKitSegmentedControlAdaptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for UIKitSegmentedControlAdaptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for UIKitSegmentedControlAdaptor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for UIKitSegmentedControlAdaptor()
{
  return &type metadata for UIKitSegmentedControlAdaptor;
}

unsigned char *storeEnumTagSinglePayload for InternalControlGroupStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    int *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187CD74E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          int *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalControlGroupStyle()
{
  return &type metadata for InternalControlGroupStyle;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance UIKitSegmentedControlAdaptor(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1C10]), sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v2, sel_setAutoresizingMask_, 2);
  objc_msgSend(v2, sel_setMomentary_, 1);
  objc_msgSend(v2, sel_addTarget_action_forControlEvents_, v1, sel_primaryActionTriggered_, 4096);
  return v2;
}

uint64_t protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance UIKitSegmentedControlAdaptor(void *a1, uint64_t a2)
{
  return UIKitSegmentedControlAdaptor.updateUIView(_:context:)(a1, a2, *v2);
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance UIKitSegmentedControlAdaptor@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *((unsigned char *)v1 + 8);
  uint64_t v5 = (objc_class *)type metadata accessor for UIKitSegmentedControlAdaptor.UIKitSegmentedControlCoordinator();
  unsigned int v6 = (char *)objc_allocWithZone(v5);
  unint64_t v7 = &v6[OBJC_IVAR____TtCV7SwiftUIP33_62A8DBD3A37E684D521D6BC97A6F345A28UIKitSegmentedControlAdaptor32UIKitSegmentedControlCoordinator_representable];
  *(void *)unint64_t v7 = v3;
  v7[8] = v4;
  v9.receiver = v6;
  v9.super_class = v5;
  swift_bridgeObjectRetain();
  id result = objc_msgSendSuper2(&v9, sel_init);
  *a1 = result;
  return result;
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in InternalControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187CD7654()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in InternalControlGroupStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in InternalControlGroupStyle.makeBody(configuration:)(a1, *(unsigned char *)(v2 + 16), a2);
}

void type metadata accessor for (offset: Int, element: PlatformItemList.Item)?()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: PlatformItemList.Item)?)
  {
    type metadata accessor for (offset: Int, element: PlatformItemList.Item)();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: PlatformItemList.Item)?);
    }
  }
}

_UNKNOWN **sub_187CD76EC()
{
  return &protocol witness table for PlatformItemListReader<A, B, C>;
}

uint64_t _ViewInputs.requestedViewThatFitsRepresentation.setter()
{
  return PropertyList.subscript.setter();
}

uint64_t ViewThatFits._tree.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for _VariadicView.Tree();
  char v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t ViewThatFits._tree.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for _VariadicView.Tree();
  char v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*ViewThatFits._tree.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _SizeFittingRoot.axes.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*_SizeFittingRoot.axes.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ViewInputs.requestedViewThatFitsRepresentation.getter()
{
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _SizeFittingRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, &protocol witness table for _SizeFittingRoot);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance _SizeFittingRoot(uint64_t a1)
{
}

Swift::Void __swiftcall SizeFittingState.invalidate()()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    int64_t v14 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v6) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v2 + 8 * v14);
    ++v7;
    if (!v15)
    {
      int64_t v7 = v14 + 1;
      if (v14 + 1 >= v6) {
        goto LABEL_23;
      }
      unint64_t v15 = *(void *)(v2 + 8 * v7);
      if (!v15)
      {
        int64_t v7 = v14 + 2;
        if (v14 + 2 >= v6) {
          goto LABEL_23;
        }
        unint64_t v15 = *(void *)(v2 + 8 * v7);
        if (!v15)
        {
          int64_t v7 = v14 + 3;
          if (v14 + 3 >= v6) {
            goto LABEL_23;
          }
          unint64_t v15 = *(void *)(v2 + 8 * v7);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v15 - 1) & v15;
    unint64_t v9 = __clz(__rbit64(v15)) + (v7 << 6);
LABEL_5:
    uint64_t v10 = *(void *)(v1 + 56) + 48 * v9;
    uint64_t v11 = *(void **)v10;
    char v12 = *(unsigned char *)(v10 + 40);
    swift_retain();
    swift_bridgeObjectRetain();
    id v13 = v11;
    AGSubgraphRef.willInvalidate(isInserted:)(v12);
    AGSubgraphInvalidate();
    swift_bridgeObjectRelease();
    swift_release();
  }
  int64_t v16 = v14 + 4;
  if (v16 >= v6)
  {
LABEL_23:
    swift_release();
    return;
  }
  unint64_t v15 = *(void *)(v2 + 8 * v16);
  if (v15)
  {
    int64_t v7 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v7 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_23;
    }
    unint64_t v15 = *(void *)(v2 + 8 * v7);
    ++v16;
    if (v15) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
}

uint64_t SizeFittingState.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t SizeFittingState.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

void protocol witness for ObservedAttribute.destroy() in conformance SizeFittingMux()
{
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance SizeFittingMux()
{
}

uint64_t protocol witness for LayoutEngine.childGeometries(at:origin:) in conformance SizeFittingLayoutComputer.Engine()
{
  return MEMORY[0x1F40FD928]();
}

double key path getter for _ViewInputs.requestedViewThatFitsRepresentation : _ViewInputs@<D0>(_OWORD *a1@<X8>)
{
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

uint64_t _GraphInputs.requestedViewThatFitsRepresentation.getter()
{
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t _GraphInputs.requestedViewThatFitsRepresentation.setter()
{
  return PropertyList.subscript.setter();
}

void (*_ViewInputs.requestedViewThatFitsRepresentation.modify(void *a1))(_OWORD **a1)
{
  long long v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)long long v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedViewThatFitsRepresentation.modify;
}

void _ViewInputs.requestedViewThatFitsRepresentation.modify(_OWORD **a1)
{
  uint64_t v1 = *a1;
  (*a1)[1] = **a1;
  PropertyList.subscript.setter();

  free(v1);
}

double key path getter for _GraphInputs.requestedViewThatFitsRepresentation : _GraphInputs@<D0>(_OWORD *a1@<X8>)
{
  lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  double result = *(double *)&v3;
  *a1 = v3;
  return result;
}

void (*_GraphInputs.requestedViewThatFitsRepresentation.modify(void *a1))(_OWORD **a1)
{
  long long v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v3[5] = lazy protocol witness table accessor for type _GraphInputs.ViewThatFitsRepresentationKey and conformance _GraphInputs.ViewThatFitsRepresentationKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)long long v3 = *((_OWORD *)v3 + 1);
  return _ViewInputs.requestedViewThatFitsRepresentation.modify;
}

uint64_t sub_187CD806C()
{
  return PropertyList.subscript.setter();
}

uint64_t sub_187CD80BC()
{
  return PropertyList.subscript.setter();
}

uint64_t getEnumTagSinglePayload for ViewThatFits(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 1) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 1) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for ViewThatFits(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 1) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187CD84B8);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 1] & ~v8;
        double v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t method lookup function for SizeFittingState(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for SizeFittingState);
}

uint64_t dispatch thunk of static PlatformViewThatFitsRepresentable.shouldMakeRepresentation(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of static PlatformViewThatFitsRepresentable.makeRepresentation(inputs:state:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t initializeWithCopy for SizeFittingState.Child(uint64_t a1, uint64_t a2)
{
  long long v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  id v5 = v3;
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SizeFittingState.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SizeFittingState.Child(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SizeFittingState.Child(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SizeFittingState.Child()
{
  return &type metadata for SizeFittingState.Child;
}

void *type metadata accessor for SizeFittingLayoutComputer()
{
  return &unk_1ED448B30;
}

void *type metadata accessor for SizeFittingMux()
{
  return &unk_1ED4183C0;
}

ValueMetadata *type metadata accessor for _GraphInputs.ViewThatFitsRepresentationKey()
{
  return &type metadata for _GraphInputs.ViewThatFitsRepresentationKey;
}

uint64_t assignWithCopy for SizeFittingLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v5;
  *(_OWORD *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  long long v7 = *(_OWORD *)(a2 + 72);
  long long v8 = *(_OWORD *)(a2 + 88);
  long long v9 = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v9;
  *(_OWORD *)(a1 + 88) = v8;
  *(_OWORD *)(a1 + 72) = v7;
  long long v10 = *(_OWORD *)(a2 + 128);
  long long v11 = *(_OWORD *)(a2 + 144);
  long long v12 = *(_OWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v11;
  *(_OWORD *)(a1 + 160) = v12;
  *(_OWORD *)(a1 + 128) = v10;
  return a1;
}

uint64_t assignWithTake for SizeFittingLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  long long v5 = *(_OWORD *)(a2 + 128);
  long long v6 = *(_OWORD *)(a2 + 144);
  long long v7 = *(_OWORD *)(a2 + 160);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v7;
  *(_OWORD *)(a1 + 128) = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for SizeFittingLayoutComputer.Engine(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 177)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SizeFittingLayoutComputer.Engine(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 176) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 177) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 177) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for SizeFittingLayoutComputer.Engine()
{
  return &unk_1ED474C80;
}

ValueMetadata *type metadata accessor for HorizontalStackControlGroupStyle()
{
  return &type metadata for HorizontalStackControlGroupStyle;
}

uint64_t associated type witness table accessor for ControlGroupStyle.Body : View in HorizontalStackControlGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ControlGroupStyle.makeBody(configuration:) in conformance HorizontalStackControlGroupStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = static VerticalAlignment.center.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = 0x4020000000000000;
  *(unsigned char *)(a1 + 16) = 0;
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<ControlGroupStyleConfiguration.Content> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<ControlGroupStyleConfiguration.Content> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<ControlGroupStyleConfiguration.Content> and conformance HStack<A>)
  {
    type metadata accessor for HStack<ControlGroupStyleConfiguration.Content>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<ControlGroupStyleConfiguration.Content> and conformance HStack<A>);
  }
  return result;
}

void type metadata accessor for HStack<ControlGroupStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for HStack<ControlGroupStyleConfiguration.Content>)
  {
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ControlGroupStyleConfiguration.Content>);
    }
  }
}

uint64_t _ScrollableContentProvider.decelerationTarget(contentOffset:originalContentOffset:velocity:size:)()
{
  return 0;
}

uint64_t _ScrollViewGestureProvider.scrollableDirections(proxy:)@<X0>(unsigned char *a1@<X8>)
{
  return _ScrollViewGestureProvider.scrollableDirections(proxy:)(a1);
}

{
  return ScrollViewNode.scrollableDirections(includeAlwaysBounceOptions:)(1, a1);
}

uint64_t _ScrollViewGestureProvider.defaultScrollableDirections(proxy:)@<X0>(unsigned char *a1@<X8>)
{
  return ScrollViewNode.scrollableDirections(includeAlwaysBounceOptions:)(1, a1);
}

uint64_t _ScrollViewGestureProvider.gesture(proxy:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v12 = *a1;
  uint64_t v4 = v12;
  int v13 = v5;
  (*(void (**)(uint64_t *__return_ptr, uint64_t *))(a2 + 8))(&v14, &v12);
  char v6 = v14;
  uint64_t result = swift_beginAccess();
  double v8 = 10.0;
  if (((*(unsigned __int8 *)(v4 + 146) << 16) & 0xC00000) == 0x400000)
  {
    uint64_t v9 = *(void *)(v4 + 136);
    if (*(void *)(v9 + 16) < 2uLL)
    {
      __break(1u);
      return result;
    }
    double v10 = fabs(*(double *)(v9 + 48));
    double v11 = fabs(*(double *)(v9 + 136));
    if (v10 <= v11) {
      double v10 = v11;
    }
    if (v10 > 7.5) {
      double v8 = 0.0;
    }
  }
  if (one-time initialization token for all != -1) {
    uint64_t result = swift_once();
  }
  *(double *)a3 = v8;
  *(unsigned char *)(a3 + 8) = v6;
  return result;
}

uint64_t protocol witness for _ScrollViewGestureProvider.scrollableDirections(proxy:) in conformance EmptyGestureProvider@<X0>(unsigned char *a1@<X8>)
{
  return ScrollViewNode.scrollableDirections(includeAlwaysBounceOptions:)(1, a1);
}

uint64_t protocol witness for _ScrollViewGestureProvider.gestureMask(proxy:) in conformance EmptyGestureProvider(uint64_t *a1)
{
  return specialized _ScrollViewGestureProvider.gestureMask(proxy:)(*a1);
}

double static _ScrollViewConfig.decelerationRateNormal.getter()
{
  return 0.998;
}

double static _ScrollViewConfig.decelerationRateFast.getter()
{
  return 0.99;
}

uint64_t _ScrollViewConfig.contentOffset.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  char v6 = *(unsigned char *)(v1 + 32);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  return outlined copy of _ScrollViewConfig.ContentOffset(v2, v3, v4, v5, v6);
}

__n128 _ScrollViewConfig.contentOffset.setter(__n128 *a1)
{
  __n128 v6 = *a1;
  unint64_t v2 = a1[1].n128_u64[0];
  unint64_t v3 = a1[1].n128_u64[1];
  unsigned __int8 v4 = a1[2].n128_u8[0];
  outlined consume of _ScrollViewConfig.ContentOffset(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
  __n128 result = v6;
  *(__n128 *)uint64_t v1 = v6;
  *(void *)(v1 + 16) = v2;
  *(void *)(v1 + 24) = v3;
  *(unsigned char *)(v1 + 32) = v4;
  return result;
}

uint64_t (*_ScrollViewConfig.contentOffset.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _ScrollViewConfig.contentInsets.getter()
{
  return *(double *)(v0 + 40);
}

void _ScrollViewConfig.contentInsets.setter(double a1, double a2, double a3, double a4)
{
  v4[5] = a1;
  v4[6] = a2;
  v4[7] = a3;
  v4[8] = a4;
}

uint64_t (*_ScrollViewConfig.contentInsets.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _ScrollViewConfig.decelerationRate.getter()
{
  return *(double *)(v0 + 72);
}

void _ScrollViewConfig.decelerationRate.setter(double a1)
{
  *(double *)(v1 + 72) = a1;
}

uint64_t (*_ScrollViewConfig.decelerationRate.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollViewConfig.alwaysBounceVertical.getter()
{
  return *(unsigned __int8 *)(v0 + 80);
}

uint64_t _ScrollViewConfig.alwaysBounceVertical.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 80) = result;
  return result;
}

uint64_t (*_ScrollViewConfig.alwaysBounceVertical.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollViewConfig.alwaysBounceHorizontal.getter()
{
  return *(unsigned __int8 *)(v0 + 81);
}

uint64_t _ScrollViewConfig.alwaysBounceHorizontal.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 81) = result;
  return result;
}

uint64_t (*_ScrollViewConfig.alwaysBounceHorizontal.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollViewConfig.gestureProvider.getter@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of TableColumnList(v1 + 88, a1);
}

uint64_t _ScrollViewConfig.gestureProvider.setter(long long *a1)
{
  uint64_t v3 = v1 + 88;
  __swift_destroy_boxed_opaque_existential_1(v3);

  return outlined init with take of OptionalBinaryInteger(a1, v3);
}

uint64_t (*_ScrollViewConfig.gestureProvider.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollViewConfig.stopDraggingImmediately.getter()
{
  return *(unsigned __int8 *)(v0 + 128);
}

uint64_t _ScrollViewConfig.stopDraggingImmediately.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 128) = result;
  return result;
}

uint64_t (*_ScrollViewConfig.stopDraggingImmediately.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollViewConfig.isScrollEnabled.getter()
{
  return *(unsigned __int8 *)(v0 + 129);
}

uint64_t _ScrollViewConfig.isScrollEnabled.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 129) = result;
  return result;
}

uint64_t (*_ScrollViewConfig.isScrollEnabled.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollViewConfig.showsHorizontalIndicator.getter()
{
  return *(unsigned __int8 *)(v0 + 130);
}

uint64_t _ScrollViewConfig.showsHorizontalIndicator.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 130) = result;
  return result;
}

uint64_t (*_ScrollViewConfig.showsHorizontalIndicator.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollViewConfig.showsVerticalIndicator.getter()
{
  return *(unsigned __int8 *)(v0 + 131);
}

uint64_t _ScrollViewConfig.showsVerticalIndicator.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 131) = result;
  return result;
}

uint64_t (*_ScrollViewConfig.showsVerticalIndicator.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _ScrollViewConfig.indicatorInsets.getter()
{
  return *(double *)(v0 + 136);
}

void _ScrollViewConfig.indicatorInsets.setter(double a1, double a2, double a3, double a4)
{
  v4[17] = a1;
  v4[18] = a2;
  v4[19] = a3;
  v4[20] = a4;
}

uint64_t (*_ScrollViewConfig.indicatorInsets.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _ScrollViewConfig.init()@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0x3FEFEF9DB22D0E56;
  *(_WORD *)(a1 + 80) = 0;
  *(void *)(a1 + 112) = &type metadata for EmptyGestureProvider;
  *(void *)(a1 + 120) = &protocol witness table for EmptyGestureProvider;
  *(_DWORD *)(a1 + 128) = 16843008;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return result;
}

uint64_t (*_ScrollView.contentProvider.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _ScrollView.config.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of _ScrollViewConfig(v2 + *(int *)(a1 + 36), a2);
}

uint64_t _ScrollView.config.setter(uint64_t a1, uint64_t a2)
{
  return outlined assign with take of _ScrollViewConfig(a1, v2 + *(int *)(a2 + 36));
}

uint64_t (*_ScrollView.config.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double default argument 1 of _ScrollView.init(contentProvider:config:)@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(void *)(a1 + 72) = 0x3FEFEF9DB22D0E56;
  *(_WORD *)(a1 + 80) = 0;
  *(void *)(a1 + 112) = &type metadata for EmptyGestureProvider;
  *(void *)(a1 + 120) = &protocol witness table for EmptyGestureProvider;
  *(_DWORD *)(a1 + 128) = 16843008;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  return result;
}

__n128 _ScrollView.init(contentProvider:config:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = a4 + *(int *)(type metadata accessor for _ScrollView() + 36);
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(v6 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(v6 + 144) = v7;
  *(void *)(v6 + 160) = *(void *)(a2 + 160);
  long long v8 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v6 + 80) = v8;
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(v6 + 112) = v9;
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
  *(_OWORD *)(v6 + 16) = v10;
  __n128 result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a2 + 32);
  *(__n128 *)(v6 + 48) = result;
  return result;
}

uint64_t _ScrollView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  double v6 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v4 + 16))((char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = *(void *)(a1 + 24);
  *(void *)(v8 + 16) = *(void *)(a1 + 16);
  *(void *)(v8 + 24) = v9;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  swift_getAssociatedTypeWitness();
  type metadata accessor for _ClipEffect<Rectangle>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unint64_t v11 = lazy protocol witness table accessor for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>();
  v14[2] = AssociatedConformanceWitness;
  v14[3] = v11;
  v14[0] = swift_getWitnessTable();
  v14[1] = MEMORY[0x1E4F3FA78];
  swift_getWitnessTable();
  uint64_t result = GeometryReader.init(content:)();
  *a2 = result;
  a2[1] = v13;
  return result;
}

uint64_t content #1 <A>(geom:) in _ScrollView.body.getter@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v56 = a5;
  uint64_t v53 = type metadata accessor for _ScrollView.Main();
  uint64_t v51 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v48 = (char *)&v43 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v50 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v47 = (char *)&v43 - v10;
  type metadata accessor for _ClipEffect<Rectangle>();
  uint64_t v54 = type metadata accessor for ModifiedContent();
  uint64_t v52 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  uint64_t v49 = (char *)&v43 - v11;
  uint64_t v55 = a3;
  uint64_t v12 = type metadata accessor for _ScrollView();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unsigned int v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  double v18 = (char *)&v43 - v17;
  int v19 = *((_DWORD *)a1 + 12);
  char v20 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  long long v45 = *a1;
  long long v44 = a1[1];
  long long v43 = a1[2];
  v20((char *)&v43 - v17, v46, v12);
  long long v59 = v45;
  long long v60 = v44;
  long long v61 = v43;
  int v62 = v19;
  GeometryProxy.safeAreaInsets.getter();
  double v22 = v21;
  double v24 = v23;
  double v26 = v25;
  double v28 = v27;
  if ((EdgeInsets.isEmpty.getter() & 1) == 0)
  {
    char v29 = (double *)&v18[*(int *)(v12 + 36)];
    double v30 = v24 + v29[6];
    double v31 = v26 + v29[7];
    double v32 = v28 + v29[8];
    v29[5] = v22 + v29[5];
    v29[6] = v30;
    v29[7] = v31;
    v29[8] = v32;
    double v33 = v24 + v29[18];
    double v34 = v26 + v29[19];
    double v35 = v28 + v29[20];
    v29[17] = v22 + v29[17];
    v29[18] = v33;
    v29[19] = v34;
    v29[20] = v35;
  }
  v20(v15, (uint64_t)v18, v12);
  id v36 = v48;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v48, v15, v12);
  char v37 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(a4 + 48))(v36, v55, a4);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v36, v53);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v39 = v49;
  View.clipped(antialiased:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v37, AssociatedTypeWitness);
  unint64_t v40 = lazy protocol witness table accessor for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>();
  uint64_t v57 = AssociatedConformanceWitness;
  unint64_t v58 = v40;
  uint64_t v41 = v54;
  swift_getWitnessTable();
  View.padding(_:)();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v41);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _ScrollView<A>.Main()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance _ScrollView<A>.Main()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance _ScrollView<A>.Main()
{
}

double View._scrollable(stretchChildrenToMaxHeight:horizontal:vertical:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  int v30 = a3;
  int v31 = a1;
  uint64_t v32 = a5;
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for _AligningContentProvider();
  uint64_t v13 = *((void *)v12 - 1);
  MEMORY[0x1F4188790](v12);
  unsigned int v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  int v19 = (char *)&v29 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, v6, a4, v17);
  uint64_t v21 = v12[9];
  uint64_t v20 = v12[10];
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v19, v11, a4);
  v19[v21] = a2;
  char v22 = v31;
  v19[v20] = v30;
  v19[v12[11]] = v22;
  (*(void (**)(char *, char *, int *))(v13 + 16))(v15, v19, v12);
  swift_getWitnessTable();
  long long v35 = 0u;
  long long v36 = 0u;
  LOBYTE(v37[0]) = 0;
  memset((char *)v37 + 8, 0, 32);
  memset(&v33[4], 0, 32);
  (*(void (**)(char *, int *))(v13 + 8))(v19, v12);
  uint64_t v23 = v32;
  (*(void (**)(uint64_t, char *, int *))(v13 + 32))(v32, v15, v12);
  uint64_t v24 = v23 + *(int *)(type metadata accessor for _ScrollView() + 36);
  long long v25 = v37[1];
  *(_OWORD *)(v24 + 32) = v37[0];
  *(_OWORD *)(v24 + 48) = v25;
  long long v26 = v36;
  *(_OWORD *)uint64_t v24 = v35;
  *(_OWORD *)(v24 + 16) = v26;
  *(_OWORD *)(v24 + 82) = *(_OWORD *)v34;
  *(_OWORD *)(v24 + 96) = *(_OWORD *)&v34[14];
  *(_DWORD *)(v24 + 128) = 16843008;
  double result = *(double *)v33;
  long long v28 = *(_OWORD *)&v33[16];
  *(_OWORD *)(v24 + 132) = *(_OWORD *)v33;
  *(void *)(v24 + 64) = *(void *)&v37[2];
  *(void *)(v24 + 72) = 0x3FEFEF9DB22D0E56;
  *(_WORD *)(v24 + 80) = 0;
  *(void *)(v24 + 112) = &type metadata for EmptyGestureProvider;
  *(void *)(v24 + 120) = &protocol witness table for EmptyGestureProvider;
  *(_OWORD *)(v24 + 148) = v28;
  *(_DWORD *)(v24 + 164) = *(_DWORD *)&v33[32];
  return result;
}

uint64_t (*_AligningContentProvider.content.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _AligningContentProvider.horizontal.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t _AligningContentProvider.horizontal.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 36)) = result;
  return result;
}

uint64_t (*_AligningContentProvider.horizontal.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _AligningContentProvider.vertical.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

uint64_t _AligningContentProvider.vertical.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 40)) = result;
  return result;
}

uint64_t (*_AligningContentProvider.vertical.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _AligningContentProvider.init(content:horizontal:vertical:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (int *)type metadata accessor for _AligningContentProvider();
  uint64_t v11 = v10[9];
  uint64_t v12 = v10[10];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  *(unsigned char *)(a5 + v11) = a2;
  *(unsigned char *)(a5 + v12) = a3;
  *(unsigned char *)(a5 + v10[11]) = 0;
  return result;
}

uint64_t _AligningContentProvider.scrollableContent.getter(uint64_t a1)
{
  char v2 = *(unsigned char *)(v1 + *(int *)(a1 + 40));
  char v3 = *(unsigned char *)(v1 + *(int *)(a1 + 44));
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  v8[0] = *(unsigned char *)(v1 + *(int *)(a1 + 36));
  v8[1] = v2;
  _OWORD v8[2] = v3;
  uint64_t v6 = type metadata accessor for _AligningContentProvider.AligningContentProviderLayout();
  return MEMORY[0x18C113660](v8, v4, v6, v5);
}

uint64_t _AligningContentProvider.AligningContentProviderLayout.placement(of:in:)()
{
  return _AlignmentLayout.placement(of:in:)();
}

uint64_t _AligningContentProvider.AligningContentProviderLayout.sizeThatFits(in:context:child:)(unint64_t *a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v4 = *a1;
  char v5 = *((unsigned char *)a1 + 8);
  unint64_t v6 = a1[2];
  char v7 = *((unsigned char *)a1 + 24);
  unint64_t v8 = *(void *)a2;
  int v9 = *(_DWORD *)(a2 + 8);
  unsigned int v10 = *a3;
  unsigned int v11 = a3[1];
  unsigned int v12 = a3[2];
  int v13 = *(unsigned __int8 *)(v3 + 2);
  unint64_t v27 = *a1;
  char v28 = v5;
  unint64_t v29 = v6;
  char v30 = v7;
  static _ProposedSize.unspecified.getter();
  unint64_t v19 = v23;
  LOBYTE(v20) = v24;
  unint64_t v21 = v25;
  char v22 = v26;
  if ((MEMORY[0x18C10E0D0](&v27, &v19) & 1) == 0)
  {
    unint64_t v19 = __PAIR64__(v11, v10);
    unsigned int v20 = v12;
    _ProposedSize.init(width:height:)();
    unint64_t v23 = v27;
    LOBYTE(v24) = v28;
    unint64_t v25 = v29;
    char v26 = v30;
    LayoutProxy.size(in:)();
  }
  unint64_t v27 = v4;
  char v28 = v5;
  unint64_t v29 = v6;
  char v30 = v7;
  _ProposedSize.width.getter();
  unint64_t v27 = v4;
  char v28 = v5;
  unint64_t v29 = v6;
  char v30 = v7;
  _ProposedSize.height.getter();
  _ProposedSize.init(width:height:)();
  unint64_t v14 = v27;
  char v15 = v28;
  unint64_t v16 = v29;
  char v17 = v30;
  if (v13)
  {
    _ProposedSize.width.getter();
    _ProposedSize.init(width:height:)();
    unint64_t v14 = v27;
    char v15 = v28;
    unint64_t v16 = v29;
    char v17 = v30;
  }
  unint64_t v27 = v14;
  char v28 = v15;
  unint64_t v29 = v16;
  char v30 = v17;
  unint64_t v23 = v8;
  int v24 = v9;
  unint64_t v19 = __PAIR64__(v11, v10);
  unsigned int v20 = v12;
  return _AlignmentLayout.sizeThatFits(in:context:child:)();
}

uint64_t protocol witness for UnaryLayout.spacing(in:child:) in conformance _AligningContentProvider<A>.AligningContentProviderLayout()
{
  return MEMORY[0x1F40FD640]();
}

uint64_t protocol witness for static Animatable._makeAnimatable(value:inputs:) in conformance _AligningContentProvider<A>.AligningContentProviderLayout()
{
  return MEMORY[0x1F40FD038]();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _AligningContentProvider<A>.AligningContentProviderLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD648](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AligningContentProvider<A>.AligningContentProviderLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t specialized _ScrollViewGestureProvider.defaultGestureMask(proxy:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t result = swift_beginAccess();
  unsigned __int16 v3 = *(unsigned __int8 *)(v1 + 146);
  if (v3 >> 6 == 1)
  {
    uint64_t v4 = *(void *)(v1 + 136);
    if (*(void *)(v4 + 16) < 2uLL)
    {
      __break(1u);
      return result;
    }
    double v5 = fabs(*(double *)(v4 + 48));
    double v6 = fabs(*(double *)(v4 + 136));
    if (v5 <= v6) {
      double v5 = v6;
    }
    if (v5 > 7.5) {
      return 1;
    }
  }
  else if (!(v3 >> 6) && ((*(unsigned __int8 *)(v1 + 146) << 16) & 0x10000) == 0)
  {
    return 1;
  }
  return 3;
}

uint64_t outlined assign with take of _ScrollViewConfig(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t type metadata accessor for _ScrollView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187CDA208()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = (int *)(type metadata accessor for _ScrollView() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3, v1);
  uint64_t v4 = v3 + v2[11];
  outlined consume of _ScrollViewConfig.ContentOffset(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), *(unsigned char *)(v4 + 32));
  __swift_destroy_boxed_opaque_existential_1(v4 + 88);

  return swift_deallocObject();
}

uint64_t partial apply for content #1 <A>(geom:) in _ScrollView.body.getter@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for _ScrollView() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return content #1 <A>(geom:) in _ScrollView.body.getter(a1, v8, v5, v6, a2);
}

void type metadata accessor for _ClipEffect<Rectangle>()
{
  if (!lazy cache variable for type metadata for _ClipEffect<Rectangle>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    unint64_t v0 = type metadata accessor for _ClipEffect();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ClipEffect<Rectangle>);
    }
  }
}

uint64_t type metadata accessor for _AligningContentProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _AligningContentProvider.AligningContentProviderLayout()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **base witness table accessor for View in _ScrollView<A>.Main()
{
  return &protocol witness table for _ScrollView<A>.Main;
}

{
  return &protocol witness table for _ScrollView<A>.Main;
}

uint64_t associated type witness table accessor for View.Body : View in _ScrollView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for Animatable in _AligningContentProvider<A>.AligningContentProviderLayout()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for MultiViewModifier in _AligningContentProvider<A>.AligningContentProviderLayout()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in _AligningContentProvider<A>.AligningContentProviderLayout()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in _AligningContentProvider<A>.AligningContentProviderLayout()
{
  return &protocol witness table for _AligningContentProvider<A>.AligningContentProviderLayout;
}

uint64_t associated type witness table accessor for _ScrollableContentProvider.ScrollableContent : View in _AligningContentProvider<A>()
{
  return swift_getWitnessTable();
}

uint64_t dispatch thunk of _ScrollableContentProvider.scrollableContent.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of _ScrollableContentProvider.root(scrollView:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

uint64_t dispatch thunk of _ScrollableContentProvider.decelerationTarget(contentOffset:originalContentOffset:velocity:size:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of _ScrollViewGestureProvider.scrollableDirections(proxy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t dispatch thunk of _ScrollViewGestureProvider.gestureMask(proxy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t destroy for _ScrollViewConfig(uint64_t a1)
{
  outlined consume of _ScrollViewConfig.ContentOffset(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));

  return __swift_destroy_boxed_opaque_existential_1(a1 + 88);
}

uint64_t initializeWithCopy for _ScrollViewConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(void *)a2, v5, v6, v7, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 112) = v9;
  (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 88, a2 + 88);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  return a1;
}

uint64_t assignWithCopy for _ScrollViewConfig(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(void *)a2, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  char v13 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of _ScrollViewConfig.ContentOffset(v9, v10, v11, v12, v13);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(unsigned char *)(a1 + 131) = *(unsigned char *)(a2 + 131);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  return a1;
}

uint64_t assignWithTake for _ScrollViewConfig(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of _ScrollViewConfig.ContentOffset(v5, v6, v7, v8, v9);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(a2 + 128);
  *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 129);
  *(unsigned char *)(a1 + 130) = *(unsigned char *)(a2 + 130);
  *(unsigned char *)(a1 + 131) = *(unsigned char *)(a2 + 131);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ScrollViewConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 168)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 112);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ScrollViewConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 168) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 112) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 168) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _ScrollViewConfig()
{
  return &type metadata for _ScrollViewConfig;
}

uint64_t destroy for _ScrollViewConfig.ContentOffset(uint64_t a1)
{
  return outlined consume of _ScrollViewConfig.ContentOffset(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for _ScrollViewConfig.ContentOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for _ScrollViewConfig.ContentOffset(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of _ScrollViewConfig.ContentOffset(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for _ScrollViewConfig.ContentOffset(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of _ScrollViewConfig.ContentOffset(v4, v6, v5, v7, v8);
  return a1;
}

ValueMetadata *type metadata accessor for _ScrollViewConfig.ContentOffset()
{
  return &type metadata for _ScrollViewConfig.ContentOffset;
}

uint64_t type metadata completion function for _ScrollView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _ScrollView(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 168;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187CDACC4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 112);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

double storeEnumTagSinglePayload for _ScrollView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 168;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFF58) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFF58) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFF58)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 168);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return result;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return result;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return result;
      default:
        return result;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187CDAEE4);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            double result = 0.0;
            *(_OWORD *)(v19 + 136) = 0u;
            *(_OWORD *)(v19 + 152) = 0u;
            *(_OWORD *)(v19 + 120) = 0u;
            *(_OWORD *)(v19 + 104) = 0u;
            *(_OWORD *)(v19 + 88) = 0u;
            *(_OWORD *)(v19 + 72) = 0u;
            *(_OWORD *)(v19 + 56) = 0u;
            *(_OWORD *)(v19 + 40) = 0u;
            *(_OWORD *)(v19 + 24) = 0u;
            *(_OWORD *)(v19 + 8) = 0u;
            *(void *)unint64_t v19 = a2 ^ 0x80000000;
          }
          else
          {
            *(void *)(v19 + 112) = a2 - 1;
          }
        }
        else
        {
          uint64_t v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return result;
  }
}

uint64_t getEnumTagSinglePayload for _ScrollView.Main(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 168;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187CDB058);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 112);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

double storeEnumTagSinglePayload for _ScrollView.Main(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 168;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFF58) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFF58) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFF58)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 168);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return result;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return result;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return result;
      default:
        return result;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187CDB278);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            double result = 0.0;
            *(_OWORD *)(v19 + 136) = 0u;
            *(_OWORD *)(v19 + 152) = 0u;
            *(_OWORD *)(v19 + 120) = 0u;
            *(_OWORD *)(v19 + 104) = 0u;
            *(_OWORD *)(v19 + 88) = 0u;
            *(_OWORD *)(v19 + 72) = 0u;
            *(_OWORD *)(v19 + 56) = 0u;
            *(_OWORD *)(v19 + 40) = 0u;
            *(_OWORD *)(v19 + 24) = 0u;
            *(_OWORD *)(v19 + 8) = 0u;
            *(void *)unint64_t v19 = a2 ^ 0x80000000;
          }
          else
          {
            *(void *)(v19 + 112) = a2 - 1;
          }
        }
        else
        {
          uint64_t v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return result;
  }
}

uint64_t type metadata accessor for _ScrollView.Main()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for _AligningContentProvider()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for _AligningContentProvider(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 3) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    unsigned int v11 = (char *)v4 + v6;
    unsigned char *v11 = *((unsigned char *)a2 + v6);
    v11[1] = *((unsigned char *)a2 + v6 + 1);
    v11[2] = *((unsigned char *)a2 + v6 + 2);
  }
  else
  {
    uint64_t v10 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithCopy for _AligningContentProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = (unsigned char *)(v6 + a1);
  unsigned int v8 = (unsigned char *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  void v7[2] = v8[2];
  return a1;
}

uint64_t assignWithCopy for _AligningContentProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = (unsigned char *)(v6 + a1);
  unsigned int v8 = (unsigned char *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  void v7[2] = v8[2];
  return a1;
}

uint64_t initializeWithTake for _AligningContentProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = (unsigned char *)(v6 + a1);
  unsigned int v8 = (unsigned char *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  void v7[2] = v8[2];
  return a1;
}

uint64_t assignWithTake for _AligningContentProvider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = (unsigned char *)(v6 + a1);
  unsigned int v8 = (unsigned char *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  void v7[2] = v8[2];
  return a1;
}

uint64_t getEnumTagSinglePayload for _AligningContentProvider(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = v6 + 3;
  char v10 = 8 * (v6 + 3);
  if (v6 != 0 && v6 < 0xFFFFFFFD) {
    goto LABEL_8;
  }
  unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_23;
      }
LABEL_8:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_23;
      }
LABEL_15:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v9 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_15;
    }
  }
LABEL_23:
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v15 = *((unsigned __int8 *)a1 + v6 + 2);
  if (v15 < 2) {
    return 0;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

uint64_t sub_187CDB804()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for EmptyGestureProvider()
{
  return &type metadata for EmptyGestureProvider;
}

uint64_t specialized _ScrollViewGestureProvider.gestureMask(proxy:)(uint64_t a1)
{
  uint64_t result = swift_beginAccess();
  unsigned __int16 v3 = *(unsigned __int8 *)(a1 + 146);
  if (v3 >> 6 == 1)
  {
    uint64_t v4 = *(void *)(a1 + 136);
    if (*(void *)(v4 + 16) < 2uLL)
    {
      __break(1u);
      return result;
    }
    double v5 = fabs(*(double *)(v4 + 48));
    double v6 = fabs(*(double *)(v4 + 136));
    if (v5 <= v6) {
      double v5 = v6;
    }
    if (v5 > 7.5) {
      return 1;
    }
  }
  else if (!(v3 >> 6) && ((*(unsigned __int8 *)(a1 + 146) << 16) & 0x10000) == 0)
  {
    return 1;
  }
  return 3;
}

ValueMetadata *type metadata accessor for TopScrollIndicatorFollowsContentOffsetKey()
{
  return &type metadata for TopScrollIndicatorFollowsContentOffsetKey;
}

void HostingScrollViewResponder.preferredFocusableView.getter()
{
}

void HostingScrollViewResponder.containsGlobalPoints(_:cacheKey:options:)(double *a1@<X0>, unint64_t a2@<X1>, double **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v9 = *a3;
  if (static UnifiedHitTestingFeature.isEnabled.getter())
  {
    v11[0] = v9;
    UIViewResponder.containsGlobalPoints(_:cacheKey:options:)(a1, a2 | ((HIDWORD(a2) & 1) << 32), v11, a4);
  }
  else
  {
    void v11[3] = v9;
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_188351940;
    *(void *)(v10 + 32) = *(void *)(v5 + 224);
    specialized Array._endMutation()();
    swift_beginAccess();
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>();
    swift_retain();
    ContentResponderHelper.containsGlobalPoints(_:cacheKey:options:children:)();
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
}

uint64_t HostingScrollViewResponder.addContentPath(to:kind:in:observer:)()
{
  return swift_endAccess();
}

uint64_t HostingScrollViewResponder.__deallocating_deinit()
{
  PlatformUnaryViewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for HostingScrollViewResponder()
{
  return type metadata accessor for HostingScrollViewResponder();
}

uint64_t Link.init(configuration:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for LinkDestination.Configuration();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LinkDestination();
  v12.n128_f64[0] = MEMORY[0x1F4188790](v11 - 8);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v15 + 16))(a4, a2, a3, v12);
  outlined init with copy of LinkDestination(a1, (uint64_t)v10, MEMORY[0x1E4F3FB80]);
  LinkDestination.init(configuration:)();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, a3);
  _s7SwiftUI15LinkDestinationV13ConfigurationVWOhTm_0(a1, MEMORY[0x1E4F3FB80]);
  uint64_t v16 = type metadata accessor for Link();
  return outlined init with take of LinkDestination((uint64_t)v14, a4 + *(int *)(v16 + 36), MEMORY[0x1E4F3FB98]);
}

uint64_t Link.init(destination:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return Link.init(destination:label:)(a1, a2, a3, a4, a5);
}

{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v20[2];

  v20[0] = a5;
  v20[1] = a4;
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for LinkDestination.Configuration();
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  unint64_t v17 = (char *)v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v13, a1, v10, v15);
  uint64_t v18 = LinkDestination.Configuration.init(url:isSensitive:)();
  a2(v18);
  Link.init(configuration:label:)((uint64_t)v17, (uint64_t)v9, a3, v20[0]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, v10);
}

uint64_t Link.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v41 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v35 = *(void *)(a1 + 16);
  uint64_t v34 = v4;
  uint64_t v5 = type metadata accessor for Button();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v38 = type metadata accessor for AccessibilityLinkModifier();
  uint64_t v40 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v43 = (uint64_t)v33 - v6;
  uint64_t v7 = type metadata accessor for LinkDestination();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v42 = (_WORD *)((char *)v33 - v12);
  v33[2] = type metadata accessor for ModifiedContent();
  v33[1] = type metadata accessor for ModifiedContent();
  v33[3] = type metadata accessor for ModifiedContent();
  uint64_t v13 = type metadata accessor for _ConditionalContent();
  uint64_t v37 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v33 - v17;
  uint64_t v19 = v2 + *(int *)(a1 + 36);
  unsigned int v20 = (uint64_t (*)(void))MEMORY[0x1E4F3FB98];
  outlined init with copy of LinkDestination(v19, (uint64_t)v10, MEMORY[0x1E4F3FB98]);
  unint64_t v21 = (*(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v22 = swift_allocObject();
  outlined init with take of LinkDestination((uint64_t)v10, v22 + v21, MEMORY[0x1E4F3FB98]);
  uint64_t v44 = v35;
  uint64_t v45 = v34;
  uint64_t v46 = v2;
  Button.init(action:label:)((uint64_t)partial apply for implicit closure #2 in implicit closure #1 in LinkButtonModifierBody.body(content:), v22, (void (*)(uint64_t))partial apply for closure #1 in Link.body.getter, v42);
  outlined init with copy of LinkDestination(v19, (uint64_t)v10, v20);
  uint64_t v23 = WitnessTable;
  AccessibilityLinkModifier.init(_:isArchive:)((uint64_t)v10, 0, v43);
  uint64_t v24 = v38;
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v53 = v23;
  uint64_t v54 = &protocol witness table for IgnoreViewRespondersModifier;
  uint64_t v51 = swift_getWitnessTable();
  uint64_t v52 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v49 = v23;
  uint64_t v50 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v47 = v26;
  uint64_t v48 = v27;
  swift_getWitnessTable();
  uint64_t v28 = v43;
  uint64_t v29 = v25;
  char v30 = v42;
  View.accessibilityConfiguration<A>(_:)(v43, v5, v24, v23, v29);
  (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v28, v24);
  (*(void (**)(_WORD *, uint64_t))(v39 + 8))(v30, v5);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  int v31 = *(void (**)(char *, uint64_t))(v37 + 8);
  v31(v15, v13);
  static ViewBuilder.buildExpression<A>(_:)(v18);
  return ((uint64_t (*)(char *, uint64_t))v31)(v18, v13);
}

uint64_t sub_187CDC2D8()
{
  unint64_t v1 = (int *)(type metadata accessor for LinkDestination() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), *(_WORD *)(v2 + 32), *(unsigned char *)(v2 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(_WORD *)(v2 + 72), *(unsigned char *)(v2 + 74));
  uint64_t v3 = v2 + v1[8];
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocObject();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance Link<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41003C0](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance Link<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41003C8](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance Link<A>()
{
  return static ConditionallyArchivableView._viewListCount(inputs:)();
}

uint64_t Link<>.init(_:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return Link<>.init(_:destination:)(a1, a2, a3, a4, 0, a5);
}

uint64_t Link<>.init<A>(_:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Link<>.init<A>(_:destination:)(a1, a2, a3, a4, (void (*)(long long *__return_ptr, uint64_t))partial apply for closure #1 in Link<>.init<A>(_:destination:), a5);
}

uint64_t partial apply for closure #1 in Link<>.init<A>(_:destination:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Link<>.init<A>(_:destination:)(*(void *)(v1 + 32), a1);
}

void type metadata accessor for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier>)
  {
    type metadata accessor for ButtonStylePredicate<DefaultButtonStyle>(255, &lazy cache variable for type metadata for ButtonStylePredicate<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStylePredicate);
    type metadata accessor for ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>();
    lazy protocol witness table accessor for type ButtonStylePredicate<DefaultButtonStyle> and conformance ButtonStylePredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier>);
    }
  }
}

void type metadata accessor for ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>)
  {
    type metadata accessor for ButtonStylePredicate<DefaultButtonStyle>(255, &lazy cache variable for type metadata for WrappedButtonStyle<WidgetLinkButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetLinkButtonStyle and conformance WidgetLinkButtonStyle, (uint64_t)&type metadata for WidgetLinkButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WrappedButtonStyle);
    lazy protocol witness table accessor for type WrappedButtonStyle<WidgetLinkButtonStyle> and conformance WrappedButtonStyle<A>();
    unint64_t v0 = type metadata accessor for ButtonStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>);
    }
  }
}

void type metadata accessor for ButtonStylePredicate<DefaultButtonStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type WidgetLinkButtonStyle and conformance WidgetLinkButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type WidgetLinkButtonStyle and conformance WidgetLinkButtonStyle;
  if (!lazy protocol witness table cache variable for type WidgetLinkButtonStyle and conformance WidgetLinkButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WidgetLinkButtonStyle and conformance WidgetLinkButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type WrappedButtonStyle<WidgetLinkButtonStyle> and conformance WrappedButtonStyle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type WrappedButtonStyle<WidgetLinkButtonStyle> and conformance WrappedButtonStyle<A>;
  if (!lazy protocol witness table cache variable for type WrappedButtonStyle<WidgetLinkButtonStyle> and conformance WrappedButtonStyle<A>)
  {
    type metadata accessor for ButtonStylePredicate<DefaultButtonStyle>(255, &lazy cache variable for type metadata for WrappedButtonStyle<WidgetLinkButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type WidgetLinkButtonStyle and conformance WidgetLinkButtonStyle, (uint64_t)&type metadata for WidgetLinkButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for WrappedButtonStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WrappedButtonStyle<WidgetLinkButtonStyle> and conformance WrappedButtonStyle<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier;
  if (!lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier)
  {
    type metadata accessor for ArchivableLinkModifier(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier);
  }
  return result;
}

uint64_t closure #1 in Link.archivedBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v7 = type metadata accessor for LinkDestination();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Button();
  uint64_t v28 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v26 - v11;
  type metadata accessor for StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier>();
  uint64_t v27 = v13;
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  unsigned int v20 = (char *)&v26 - v19;
  uint64_t v21 = type metadata accessor for Link();
  outlined init with copy of LinkDestination(a1 + *(int *)(v21 + 36), (uint64_t)v9, MEMORY[0x1E4F3FB98]);
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = a1;
  Button.init(destination:label:)((uint64_t)v9, (void (*)(uint64_t))partial apply for closure #1 in closure #1 in Link.archivedBody.getter, a2, v12);
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](WitnessTable, v10, v27, WitnessTable);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v12, v10);
  unint64_t v23 = lazy protocol witness table accessor for type StaticIf<ButtonStylePredicate<DefaultButtonStyle>, ButtonStyleModifier<WrappedButtonStyle<WidgetLinkButtonStyle>>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v33 = WitnessTable;
  unint64_t v34 = v23;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v17);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v15 + 8);
  v24(v17, v14);
  static ViewBuilder.buildExpression<A>(_:)(v20);
  return ((uint64_t (*)(char *, uint64_t))v24)(v20, v14);
}

uint64_t closure #1 in Link.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t closure #2 in Link.archivedBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v26 = a1;
  uint64_t v29 = a4;
  uint64_t v25 = type metadata accessor for ArchivableLinkModifier(0);
  MEMORY[0x1F4188790](v25);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v28 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v27 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v17 = v26 + *(int *)(type metadata accessor for Link() + 36);
  uint64_t v18 = type metadata accessor for LinkDestination();
  outlined init with copy of LinkDestination(v17 + *(int *)(v18 + 24), (uint64_t)v7, MEMORY[0x1E4F3FB80]);
  MEMORY[0x18C113660](v7, a2, v25, a3);
  _s7SwiftUI15LinkDestinationV13ConfigurationVWOhTm_0((uint64_t)v7, type metadata accessor for ArchivableLinkModifier);
  unint64_t v19 = lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier();
  uint64_t v32 = a3;
  unint64_t v33 = v19;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](WitnessTable, v8, &type metadata for HandGestureShortcutInteractiveControl, WitnessTable);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v8);
  unint64_t v21 = lazy protocol witness table accessor for type HandGestureShortcutInteractiveControl and conformance HandGestureShortcutInteractiveControl();
  uint64_t v30 = WitnessTable;
  unint64_t v31 = v21;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v27 + 8);
  v22(v13, v11);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  return ((uint64_t (*)(char *, uint64_t))v22)(v16, v11);
}

uint64_t specialized Link.init(destination:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W5>, uint64_t a6@<X8>)
{
  v29[1] = a5;
  int v32 = a4;
  uint64_t v30 = a3;
  uint64_t v31 = a2;
  uint64_t v33 = a6;
  uint64_t v7 = type metadata accessor for LinkDestination();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Link<Text>();
  uint64_t v11 = v10 - 8;
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for LinkDestination.Configuration();
  MEMORY[0x1F4188790](v18 - 8);
  unsigned int v20 = (char *)v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)v29 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, a1, v14, v22);
  LinkDestination.Configuration.init(url:isSensitive:)();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(void *)uint64_t v13 = Text.init(_:tableName:bundle:comment:)();
  *((void *)v13 + 1) = v25;
  v13[16] = v26 & 1;
  *((void *)v13 + 3) = v27;
  outlined init with copy of LinkDestination((uint64_t)v24, (uint64_t)v20, MEMORY[0x1E4F3FB80]);
  LinkDestination.init(configuration:)();
  _s7SwiftUI15LinkDestinationV13ConfigurationVWOhTm_0((uint64_t)v24, MEMORY[0x1E4F3FB80]);
  outlined init with take of LinkDestination((uint64_t)v9, (uint64_t)&v13[*(int *)(v11 + 44)], MEMORY[0x1E4F3FB98]);
  outlined init with take of LinkDestination((uint64_t)v13, v33, (uint64_t (*)(void))type metadata accessor for Link<Text>);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Link.init(destination:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(long long *__return_ptr, uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  void (*v28)(long long *__return_ptr, uint64_t);
  uint64_t v29;
  long long v30;
  char v31;
  uint64_t v32;

  v27[1] = a3;
  uint64_t v28 = a2;
  uint64_t v29 = a4;
  uint64_t v5 = type metadata accessor for LinkDestination();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Link<Text>();
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for LinkDestination.Configuration();
  MEMORY[0x1F4188790](v16 - 8);
  uint64_t v18 = (char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x1F4188790](v19);
  double v22 = (char *)v27 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a1, v12, v20);
  uint64_t v23 = LinkDestination.Configuration.init(url:isSensitive:)();
  v28(&v30, v23);
  char v24 = v31;
  uint64_t v25 = v32;
  *(_OWORD *)uint64_t v11 = v30;
  v11[16] = v24;
  *((void *)v11 + 3) = v25;
  outlined init with copy of LinkDestination((uint64_t)v22, (uint64_t)v18, MEMORY[0x1E4F3FB80]);
  LinkDestination.init(configuration:)();
  _s7SwiftUI15LinkDestinationV13ConfigurationVWOhTm_0((uint64_t)v22, MEMORY[0x1E4F3FB80]);
  outlined init with take of LinkDestination((uint64_t)v7, (uint64_t)&v11[*(int *)(v9 + 44)], MEMORY[0x1E4F3FB98]);
  outlined init with take of LinkDestination((uint64_t)v11, v29, (uint64_t (*)(void))type metadata accessor for Link<Text>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
}

uint64_t Link.init(sensitiveUrl:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return Link.init(destination:label:)(a1, a2, a3, a4, a5);
}

uint64_t Link<>.init(_:sensitiveUrl:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  return Link<>.init(_:destination:)(a1, a2, a3, a4, 1, a5);
}

uint64_t Link<>.init(_:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, int a5@<W5>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v18 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, a4, v12, v14);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Link.init(destination:label:)((uint64_t)v16, a1, a2, a3, a5, a6);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a4, v12);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Link<>.init<A>(_:sensitiveUrl:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return Link<>.init<A>(_:destination:)(a1, a2, a3, a4, (void (*)(long long *__return_ptr, uint64_t))partial apply for closure #1 in Link<>.init<A>(_:sensitiveUrl:), a5);
}

uint64_t Link<>.init<A>(_:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(long long *__return_ptr, uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = &v18[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v13 + 16))(v16, a2, v12, v14);
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v21 = a1;
  specialized Link.init(destination:label:)((uint64_t)v16, a5, (uint64_t)v18, a6);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a2, v12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
}

uint64_t closure #1 in Link<>.init<A>(_:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t associated type witness table accessor for ConditionallyArchivableView.ArchivedBody : View in Link<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for Link<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t assignWithCopy for Link(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v4)();
  uint64_t v6 = *(void *)(v4 + 40);
  uint64_t v40 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v40 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + v6;
  uint64_t v10 = (v9 + a1) & ~(v8 | 7);
  uint64_t v11 = (v9 + a2) & ~(v8 | 7);
  uint64_t v12 = *(void *)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  uint64_t v14 = *(void *)(v11 + 0x10);
  uint64_t v15 = *(void *)(v11 + 0x18);
  char v16 = *(unsigned char *)(v11 + 0x22);
  __int16 v17 = *(_WORD *)(v11 + 0x20);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v11, v13, v14, v15, v17, v16);
  uint64_t v18 = *(void *)v10;
  uint64_t v19 = *(void *)(v10 + 8);
  uint64_t v20 = *(void *)(v10 + 16);
  uint64_t v21 = *(void *)(v10 + 24);
  char v22 = *(unsigned char *)(v10 + 34);
  *(void *)uint64_t v10 = v12;
  *(void *)(v10 + 8) = v13;
  *(void *)(v10 + 16) = v14;
  *(void *)(v10 + 24) = v15;
  __int16 v23 = *(_WORD *)(v10 + 32);
  *(_WORD *)(v10 + 32) = v17;
  *(unsigned char *)(v10 + 34) = v16;
  outlined consume of Environment<OpenURLAction>.Content(v18, v19, v20, v21, v23, v22);
  unint64_t v24 = (v10 + 42) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v11 + 42) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)v25;
  uint64_t v27 = *(void *)(v25 + 8);
  uint64_t v28 = *(void *)(v25 + 16);
  uint64_t v29 = *(void *)(v25 + 24);
  char v30 = *(unsigned char *)(v25 + 34);
  __int16 v31 = *(_WORD *)(v25 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v25, v27, v28, v29, v31, v30);
  uint64_t v32 = *(void *)v24;
  uint64_t v33 = *(void *)(v24 + 8);
  uint64_t v34 = *(void *)(v24 + 16);
  uint64_t v35 = *(void *)(v24 + 24);
  char v36 = *(unsigned char *)(v24 + 34);
  *(void *)unint64_t v24 = v26;
  *(void *)(v24 + 8) = v27;
  *(void *)(v24 + 16) = v28;
  *(void *)(v24 + 24) = v29;
  __int16 v37 = *(_WORD *)(v24 + 32);
  *(_WORD *)(v24 + 32) = v31;
  *(unsigned char *)(v24 + 34) = v30;
  outlined consume of Environment<OpenURLAction>.Content(v32, v33, v34, v35, v37, v36);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))((v8 + 35 + v24) & ~v8, (v8 + 35 + v25) & ~v8, v40);
  *(unsigned char *)(*(void *)(v7 + 64) + ((v8 + 35 + v24) & ~v8)) = *(unsigned char *)(*(void *)(v7 + 64) + ((v8 + 35 + v25) & ~v8));
  return a1;
}

uint64_t assignWithTake for Link(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v11 = (v10 + a2) & ~(v9 | 7);
  __int16 v12 = *(_WORD *)(v11 + 32);
  char v13 = *(unsigned char *)(v11 + 34);
  uint64_t v14 = (v10 + a1) & ~(v9 | 7);
  uint64_t v15 = *(void *)v14;
  uint64_t v16 = *(void *)(v14 + 8);
  uint64_t v17 = *(void *)(v14 + 0x10);
  uint64_t v18 = *(void *)(v14 + 0x18);
  char v19 = *(unsigned char *)(v14 + 0x22);
  long long v20 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v11;
  *(_OWORD *)(v14 + 16) = v20;
  __int16 v21 = *(_WORD *)(v14 + 0x20);
  *(_WORD *)(v14 + 32) = v12;
  *(unsigned char *)(v14 + 34) = v13;
  outlined consume of Environment<OpenURLAction>.Content(v15, v16, v17, v18, v21, v19);
  unint64_t v22 = (v11 + 42) & 0xFFFFFFFFFFFFFFF8;
  __int16 v23 = *(_WORD *)(v22 + 32);
  char v24 = *(unsigned char *)(v22 + 34);
  unint64_t v25 = (v14 + 42) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)v25;
  uint64_t v27 = *(void *)(v25 + 8);
  uint64_t v28 = *(void *)(v25 + 16);
  uint64_t v29 = *(void *)(v25 + 24);
  char v30 = *(unsigned char *)(v25 + 34);
  long long v31 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)unint64_t v25 = *(_OWORD *)v22;
  *(_OWORD *)(v25 + 16) = v31;
  __int16 v32 = *(_WORD *)(v25 + 32);
  *(_WORD *)(v25 + 32) = v23;
  *(unsigned char *)(v25 + 34) = v24;
  outlined consume of Environment<OpenURLAction>.Content(v26, v27, v28, v29, v32, v30);
  uint64_t v33 = (v9 + 35 + v25) & ~v9;
  uint64_t v34 = (v9 + 35 + v22) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v33, v34, v7);
  *(unsigned char *)(*(void *)(v8 + 64) + v33) = *(unsigned char *)(*(void *)(v8 + 64) + v34);
  return a1;
}

uint64_t sub_187CDDEA0()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CDDFF0()
{
  return swift_getWitnessTable();
}

void type metadata accessor for Link<Text>()
{
  if (!lazy cache variable for type metadata for Link<Text>)
  {
    unint64_t v0 = type metadata accessor for Link();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Link<Text>);
    }
  }
}

uint64_t outlined init with copy of LinkDestination(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of LinkDestination(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in Link.archivedBody.getter()
{
  return closure #1 in Link.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t View.inspector<A>(isPresented:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, void (*a4)(double)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v33 = a7;
  uint64_t v28 = a5;
  uint64_t v29 = a4;
  int v31 = a3;
  uint64_t v30 = a2;
  uint64_t v34 = a8;
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for InspectorModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v32 = *(void *)(v16 - 8);
  double v17 = MEMORY[0x1F4188790](v16);
  char v19 = (char *)&v27 - v18;
  v29(v17);
  uint64_t v20 = (uint64_t)v11;
  uint64_t v27 = a1;
  uint64_t v21 = v30;
  LOBYTE(v11) = v31;
  InspectorModifier.init(inspectorContent:isPresented:)(v20, a1, v30, v31, a6, (uint64_t)v15);
  swift_retain();
  swift_retain();
  uint64_t v22 = v33;
  MEMORY[0x18C113660](v15, v28, v12, v33);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v37 = v27;
  uint64_t v38 = v21;
  char v39 = (char)v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v35 = v22;
  uint64_t v36 = WitnessTable;
  uint64_t v25 = swift_getWitnessTable();
  View.focusedSceneValue<A>(_:_:)(KeyPath, v16, v25, v34);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v19, v16);
}

uint64_t sub_187CDE660(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  outlined copy of Binding<NavigationSplitViewColumn>?(*a1, v2);
  return FocusedValues.inspectorPresented.setter(v1, v2);
}

uint64_t View.inspectorColumnWidth(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t sub_187CDE700()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.inspector<A>(behavior:isPresented:content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v2[2] - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2[2] - 8) + 80);
  unint64_t v4 = v3 + *(void *)(*(void *)(v2[2] - 8) + 64);
  return closure #1 in View.inspector<A>(behavior:isPresented:content:)(a1, (uint64_t)v2 + v3, *(uint64_t *)((char *)v2 + ((v4 + 7) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t *)((char *)v2 + ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *((unsigned __int8 *)v2 + ((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(uint64_t *)((char *)v2 + ((v4 + 31) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t *)((char *)v2 + ((v4 + 31) & 0xFFFFFFFFFFFFFFF8) + 8), *((unsigned __int8 *)v2 + ((v4 + 31) & 0xFFFFFFFFFFFFFFF8) + 16), a2, *(uint64_t *)((char *)v2 + ((v4 + 55) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t *)((char *)v2 + ((v4 + 55) & 0xFFFFFFFFFFFFFFF8) + 8), v2[2], v2[3], v2[4], v2[5]);
}

uint64_t closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:content:)(uint64_t a1, Swift::UInt32 a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  char v29 = a5;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v26);
  char v19 = v26;
  long long v34 = 0u;
  long long v35 = 0u;
  uint64_t v36 = 0;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a9, a10, a14, a16);
  type metadata accessor for LazyView();
  swift_retain();
  swift_getWitnessTable();
  uint64_t v20 = AnyView.init<A>(_:)();
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  char v29 = a5;
  char v30 = v19;
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  char v33 = a8;
  uint64_t v37 = v20;
  uint64_t v38 = 0;
  uint64_t v39 = a11;
  uint64_t v40 = a12;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return specialized Dictionary.subscript.setter((uint64_t)&v27, a2);
}

uint64_t View.inspector<A, B>(behavior:presenting:content:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>, uint64_t a10)
{
  char v15 = *((unsigned char *)a1 + 16);
  long long v27 = *a1;
  char v28 = v15;
  uint64_t v19 = a5;
  uint64_t v20 = a6;
  uint64_t v21 = a7;
  uint64_t v22 = a8;
  uint64_t v23 = a10;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.inspector<A, B>(behavior:presenting:content:), (uint64_t)v18, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41618], v16, (uint64_t)&v26);
  View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)((uint64_t *)&v27, 0, 0, 0, a2, 0, v26, a5, a9, a6, a8);
  return swift_release();
}

uint64_t closure #1 in View.inspector<A, B>(behavior:presenting:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  v4(v3);
  uint64_t result = AnyView.init<A>(_:)();
  *a2 = result;
  return result;
}

{
  double v3;
  void (*v4)(double);
  uint64_t result;

  double v3 = MEMORY[0x1F4188790](a1);
  v4(v3);
  uint64_t result = AnyView.init<A>(_:)();
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in View.inspector<A, B>(behavior:presenting:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in View.inspector<A, B>(behavior:presenting:content:)(a1, a2);
}

{
  return partial apply for closure #1 in View.inspector<A, B>(behavior:presenting:content:)(a1, a2);
}

{
  return closure #1 in View.inspector<A, B>(behavior:presenting:content:)(a1, a2);
}

uint64_t View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = v11;
  uint64_t v50 = a7;
  uint64_t v51 = a6;
  int v49 = a4;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v52 = a9;
  uint64_t v53 = a11;
  uint64_t v46 = a10;
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v42 = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v40 - v19;
  uint64_t v41 = a8;
  uint64_t v21 = *(void *)(a8 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  double v24 = MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *a1;
  uint64_t v44 = a1[1];
  uint64_t v45 = v26;
  int v43 = *((unsigned __int8 *)a1 + 16);
  (*(void (**)(char *, uint64_t, double))(v21 + 16))(v25, v12, v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a5, v16);
  unint64_t v27 = (*(unsigned __int8 *)(v21 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v28 = (v22 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (*(unsigned __int8 *)(v17 + 80) + v28 + 17) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v40 = (v29 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v29 + v18 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = (char *)swift_allocObject();
  uint64_t v32 = v46;
  *((void *)v31 + 2) = v41;
  *((void *)v31 + 3) = v32;
  *((void *)v31 + 4) = v53;
  (*(void (**)(char *, char *))(v21 + 32))(&v31[v27], v25);
  char v33 = &v31[v28];
  uint64_t v35 = v47;
  uint64_t v34 = v48;
  *(void *)char v33 = v47;
  *((void *)v33 + 1) = v34;
  v33[16] = v49;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v31[v29], v20, v42);
  uint64_t v36 = &v31[v40];
  uint64_t v37 = v44;
  *(void *)uint64_t v36 = v45;
  *((void *)v36 + 1) = v37;
  v36[16] = v43;
  *(void *)&v31[v30] = v50;
  *(void *)&v31[(v30 + 15) & 0xFFFFFFFFFFFFFFF8] = v51;
  outlined copy of Binding<NavigationSplitViewColumn>?(v35, v34);
  type metadata accessor for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>(255, &lazy cache variable for type metadata for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>, (uint64_t)&type metadata for InspectorStorage.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorage.PreferenceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IdentifiedPreferenceTransformModifier);
  type metadata accessor for ModifiedContent();
  uint64_t v54 = v53;
  uint64_t v55 = &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
  swift_retain();
  swift_retain();
  uint64_t result = swift_getWitnessTable();
  uint64_t v39 = v52;
  *uint64_t v52 = partial apply for closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:);
  v39[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v31;
  return result;
}

uint64_t View.inspector<A, B>(behavior:presenting:content:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>, uint64_t a10, uint64_t a11)
{
  char v16 = *((unsigned char *)a1 + 16);
  long long v29 = *a1;
  char v30 = v16;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v23 = a8;
  uint64_t v24 = a10;
  uint64_t v25 = a11;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.inspector<A, B>(behavior:presenting:content:), (uint64_t)v19, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41618], v17, (uint64_t)&v28);
  View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)((uint64_t *)&v29, 0, 0, 0, a2, 0, v28, a5, a9, a6, a8);
  return swift_release();
}

uint64_t View.inspector<A, B>(behavior:isPresented:presenting:content:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char v20 = *((unsigned char *)a1 + 16);
  long long v33 = *a1;
  char v34 = v20;
  uint64_t v24 = a8;
  uint64_t v25 = a10;
  uint64_t v26 = a11;
  uint64_t v27 = a12;
  uint64_t v28 = a13;
  uint64_t v29 = a14;
  uint64_t v30 = a6;
  uint64_t v31 = a7;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.inspector<A, B>(behavior:presenting:content:), (uint64_t)v23, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41618], v21, (uint64_t)&v32);
  View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)((uint64_t *)&v33, a2, a3, a4 & 1, a5, 0, v32, a8, a9, a10, a12);
  return swift_release();
}

uint64_t View.inspector<A, B, C>(behavior:presenting:placeholder:content:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  char v16 = *((unsigned char *)a1 + 16);
  long long v45 = *a1;
  char v46 = v16;
  v43[0] = a3;
  v43[1] = a4;
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v38 = a10;
  uint64_t v39 = a11;
  uint64_t v40 = a12;
  uint64_t v41 = a13;
  uint64_t v42 = a14;
  swift_getFunctionTypeMetadata0();
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:), (uint64_t)v35, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41618], v17, (uint64_t)&v44);
  uint64_t v18 = v44;
  uint64_t v26 = a7;
  uint64_t v27 = a8;
  uint64_t v28 = a10;
  uint64_t v29 = a11;
  uint64_t v30 = a12;
  uint64_t v31 = a13;
  uint64_t v32 = a14;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:), (uint64_t)v25, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41618], v19, (uint64_t)v43);
  View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)((uint64_t *)&v45, 0, 0, 0, a2, v18, v43[0], a7, a9, a8, a12);
  swift_release();
  return swift_release();
}

uint64_t closure #1 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*v4)(v3);
  uint64_t result = AnyView.init<A>(_:)();
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:)(a1, a2);
}

uint64_t partial apply for closure #2 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return partial apply for closure #2 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:)(a1, a2);
}

{
  return closure #1 in View.inspector<A, B>(behavior:presenting:content:)(a1, a2);
}

uint64_t View.inspector<A, B, C>(behavior:isPresented:presenting:placeholder:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X7>, uint64_t (**a7)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v22 = a6;
  uint64_t v23 = a5;
  int v25 = a4;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v24 = a7;
  MEMORY[0x1F4188790](a1);
  char v16 = *((unsigned char *)v15 + 16);
  long long v39 = *v15;
  char v40 = v16;
  v17();
  uint64_t v18 = AnyView.init<A>(_:)();
  uint64_t v29 = a9;
  uint64_t v30 = a10;
  uint64_t v31 = a11;
  uint64_t v32 = a12;
  uint64_t v33 = a13;
  uint64_t v34 = a14;
  uint64_t v35 = a15;
  uint64_t v36 = v22;
  uint64_t v37 = a8;
  type metadata accessor for Optional();
  uint64_t v19 = v23;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in View.inspector<A, B, C>(behavior:presenting:placeholder:content:), (uint64_t)v28, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41618], v20, (uint64_t)&v38);
  View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)((uint64_t *)&v39, v26, v27, v25 & 1, v19, v18, v38, a9, v24, a10, a13);
  swift_release();
  return swift_release();
}

uint64_t View.inspectorAnchor<A>(matching:anchor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v16 = a6;
  uint64_t v11 = *(void *)(a3 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](a1);
  type metadata accessor for CGRect(0);
  swift_retain();
  Anchor.Source.init<A>(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a3);
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = a2;
  *((void *)v14 + 3) = a3;
  *((void *)v14 + 4) = a4;
  *((void *)v14 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v14[v13], (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  _sSo6CGRectVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBB718]);
  View.transformAnchorPreference<A, B>(key:value:transform:)();
  swift_release();
  return swift_release();
}

uint64_t sub_187CDF878()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.inspectorAnchor<A>(matching:anchor:)(uint64_t *a1, uint64_t a2)
{
  return closure #1 in View.inspectorAnchor<A>(matching:anchor:)(a1, a2);
}

uint64_t getEnumTagSinglePayload for InspectorBehavior(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (*(unsigned char *)(a1 + 16) & 0x7E | (*(unsigned __int8 *)(a1 + 16) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for InspectorBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 127;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(unsigned char *)(result + 16) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t getEnumTag for InspectorBehavior(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16) >> 7;
}

uint64_t destructiveProjectEnumData for InspectorBehavior(uint64_t result)
{
  *(unsigned char *)(result + 16) &= ~0x80u;
  return result;
}

uint64_t destructiveInjectEnumTag for InspectorBehavior(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = *(unsigned char *)(result + 16) & 1 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for InspectorBehavior()
{
  return &type metadata for InspectorBehavior;
}

uint64_t sub_187CDFA28()
{
  return swift_getWitnessTable();
}

void type metadata accessor for ResponderViewModifier<FocusedValueModifier<Binding<Bool>?>>()
{
  if (!lazy cache variable for type metadata for ResponderViewModifier<FocusedValueModifier<Binding<Bool>?>>)
  {
    _sSo6CGRectVSgMaTm_1(255, &lazy cache variable for type metadata for FocusedValueModifier<Binding<Bool>?>, (uint64_t (*)(uint64_t))type metadata accessor for Binding<Bool>?, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for FocusedValueModifier);
    unint64_t v0 = type metadata accessor for ResponderViewModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ResponderViewModifier<FocusedValueModifier<Binding<Bool>?>>);
    }
  }
}

uint64_t sub_187CDFB88()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<InspectorColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<InspectorColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<InspectorColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<InspectorColumnWidth.TraitKey>, (uint64_t)&type metadata for InspectorColumnWidth.TraitKey, (uint64_t)&protocol witness table for InspectorColumnWidth.TraitKey, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<InspectorColumnWidth.TraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187CDFCA4()
{
  return swift_getWitnessTable();
}

uint64_t get_witness_table_7SwiftUI4ViewRzAaBRd_0_r_0_lAA17EnvironmentReaderVyAA15ModifiedContentVyxAA37IdentifiedPreferenceTransformModifierVyAA16InspectorStorageV0I3KeyVGGGAaBHPyHCTm()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CDFE44()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CDFF10()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _AnchorTransformModifier<CGRect?, InspectorAnchorPreferenceKey>()
{
  if (!lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, InspectorAnchorPreferenceKey>)
  {
    _sSo6CGRectVSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _AnchorTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, InspectorAnchorPreferenceKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _AnchorTransformModifier<CGRect?, InspectorAnchorPreferenceKey> and conformance _AnchorTransformModifier<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _AnchorTransformModifier<CGRect?, InspectorAnchorPreferenceKey> and conformance _AnchorTransformModifier<A, B>;
  if (!lazy protocol witness table cache variable for type _AnchorTransformModifier<CGRect?, InspectorAnchorPreferenceKey> and conformance _AnchorTransformModifier<A, B>)
  {
    type metadata accessor for _AnchorTransformModifier<CGRect?, InspectorAnchorPreferenceKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnchorTransformModifier<CGRect?, InspectorAnchorPreferenceKey> and conformance _AnchorTransformModifier<A, B>);
  }
  return result;
}

uint64_t destroy for InspectorStorage(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_release();
    swift_release();
  }
  if (*(void *)(a1 + 72)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  }
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for InspectorStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  }
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v5 = (_OWORD *)(a1 + 48);
  uint64_t v6 = (_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 72);
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = v7;
    *(void *)(a1 + 80) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v7 - 8))(v5, v6);
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 64);
    *uint64_t v5 = *v6;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
  }
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v10;
  uint64_t v12 = *(void *)(a2 + 104);
  uint64_t v11 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = v12;
  *(void *)(a1 + 112) = v11;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for InspectorStorage(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      swift_retain();
      swift_release();
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    }
    else
    {
      outlined destroy of Binding<Bool>(a1);
      char v5 = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = *a2;
      *(unsigned char *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v6 = *a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = v6;
  }
  *(unsigned char *)(a1 + 17) = *((unsigned char *)a2 + 17);
  long long v7 = *(long long *)((char *)a2 + 24);
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  uint64_t v8 = (_OWORD *)(a1 + 48);
  long long v9 = a2 + 3;
  uint64_t v10 = *((void *)a2 + 9);
  if (*(void *)(a1 + 72))
  {
    if (v10)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 48), (uint64_t *)a2 + 6);
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 48);
      uint64_t v11 = *((void *)a2 + 10);
      long long v12 = a2[4];
      *uint64_t v8 = *v9;
      *(_OWORD *)(a1 + 64) = v12;
      *(void *)(a1 + 80) = v11;
    }
  }
  else if (v10)
  {
    *(void *)(a1 + 72) = v10;
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 48, (uint64_t)(a2 + 3));
  }
  else
  {
    long long v13 = *v9;
    long long v14 = a2[4];
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *uint64_t v8 = v13;
    *(_OWORD *)(a1 + 64) = v14;
  }
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  swift_retain();
  swift_release();
  *(void *)(a1 + 104) = *((void *)a2 + 13);
  swift_retain();
  swift_release();
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for InspectorStorage(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      swift_release();
      *(void *)(a1 + 8) = v4;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of Binding<Bool>(a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  if (*(void *)(a1 + 72))
  {
    if (*(void *)(a2 + 72)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    }
    else {
      outlined destroy of AnyHashable(a1 + 48);
    }
  }
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v6;
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_release();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for InspectorStorage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 120)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for InspectorStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 120) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InspectorAnchorPreferenceKey()
{
  return &type metadata for InspectorAnchorPreferenceKey;
}

ValueMetadata *type metadata accessor for InspectorStorage.PreferenceKey()
{
  return &type metadata for InspectorStorage.PreferenceKey;
}

uint64_t closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v70 = a7;
  uint64_t v71 = a8;
  uint64_t v58 = a2;
  unint64_t v59 = a6;
  int v64 = a5;
  uint64_t v63 = a4;
  uint64_t v61 = a3;
  uint64_t v72 = a9;
  uint64_t v68 = a11;
  uint64_t v69 = a12;
  int v67 = a10;
  uint64_t v73 = a15;
  uint64_t v57 = a14;
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v53 = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v51 - v20;
  uint64_t v54 = (char *)&v51 - v20;
  uint64_t v22 = *(void *)(a13 - 8);
  uint64_t v23 = *(void *)(v22 + 64);
  MEMORY[0x1F4188790](v24);
  uint64_t v52 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>(255, &lazy cache variable for type metadata for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>, (uint64_t)&type metadata for InspectorStorage.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorage.PreferenceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IdentifiedPreferenceTransformModifier);
  uint64_t v25 = type metadata accessor for ModifiedContent();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v65 = v25;
  uint64_t v66 = v26;
  MEMORY[0x1F4188790](v25);
  long long v60 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v29 = MEMORY[0x1F4188790](v28);
  int v62 = (char *)&v51 - v30;
  uint64_t v31 = *a1;
  uint64_t v55 = a1[1];
  uint64_t v56 = v31;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))((char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a13, v29);
  uint64_t v51 = v18;
  (*(void (**)(char *, unint64_t, uint64_t))(v18 + 16))(v21, v59, v17);
  unint64_t v32 = (*(unsigned __int8 *)(v22 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  unint64_t v33 = (v23 + *(unsigned __int8 *)(v18 + 80) + v32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  unint64_t v59 = (v33 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v34 = (v33 + v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v36 = swift_allocObject();
  uint64_t v37 = v57;
  *(void *)(v36 + 16) = a13;
  *(void *)(v36 + 24) = v37;
  uint64_t v38 = v61;
  *(void *)(v36 + 32) = v73;
  *(void *)(v36 + 40) = v38;
  uint64_t v39 = v63;
  *(void *)(v36 + 48) = v63;
  *(unsigned char *)(v36 + 56) = v64;
  (*(void (**)(unint64_t, char *))(v22 + 32))(v36 + v32, v52);
  (*(void (**)(unint64_t, char *, uint64_t))(v51 + 32))(v36 + v33, v54, v53);
  unint64_t v40 = v36 + v59;
  uint64_t v41 = v69;
  uint64_t v42 = v71;
  *(void *)unint64_t v40 = v70;
  *(void *)(v40 + 8) = v42;
  *(unsigned char *)(v40 + 16) = v67;
  *(void *)(v36 + v34) = v68;
  *(void *)(v36 + v35) = v41;
  int v43 = (void *)(v36 + ((v35 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v44 = v55;
  *int v43 = v56;
  v43[1] = v44;
  outlined copy of Binding<NavigationSplitViewColumn>?(v38, v39);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  long long v45 = v60;
  uint64_t v46 = v73;
  View.transformIdentifiedPreference<A>(_:transform:)((uint64_t)&type metadata for InspectorStorage.PreferenceKey, (uint64_t)partial apply for closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:), v36, a13, (uint64_t)&type metadata for InspectorStorage.PreferenceKey, v73);
  swift_release();
  uint64_t v74 = v46;
  long long v75 = &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
  uint64_t v47 = v65;
  swift_getWitnessTable();
  uint64_t v48 = v62;
  static ViewBuilder.buildExpression<A>(_:)(v45);
  int v49 = *(void (**)(char *, uint64_t))(v66 + 8);
  v49(v45, v47);
  static ViewBuilder.buildExpression<A>(_:)(v48);
  return ((uint64_t (*)(char *, uint64_t))v49)(v48, v47);
}

uint64_t closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)(uint64_t a1, Swift::UInt32 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  outlined copy of Binding<NavigationSplitViewColumn>?(a3, a4);
  long long v29 = 0u;
  long long v30 = 0u;
  v23[0] = a3;
  v23[1] = a4;
  char v24 = a5;
  char v25 = specialized View.isPresentedValue<A>(data:isPresented:hasPlaceholder:)(a7, a3, a4, a5, 1, a15, a16) & 1;
  uint64_t v26 = a8;
  uint64_t v27 = a9;
  char v28 = a10;
  uint64_t v31 = 0;
  uint64_t v32 = a11;
  uint64_t v33 = a12;
  uint64_t v34 = a13;
  uint64_t v35 = a14;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return specialized Dictionary.subscript.setter((uint64_t)v23, a2);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance InspectorStorage.PreferenceKey(uint64_t *a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3)
{
  return specialized static InspectorStorage.PreferenceKey.reduce(value:nextValue:)(a1, a2, a3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), (void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance InspectorAnchorPreferenceKey(uint64_t *a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3)
{
  return specialized static InspectorStorage.PreferenceKey.reduce(value:nextValue:)(a1, a2, a3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), (void (*)(uint64_t, uint64_t, void, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

uint64_t specialized static InspectorStorage.PreferenceKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr), uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, void, uint64_t, uint64_t *))
{
  a2(&v11);
  uint64_t v8 = v11;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *a1;
  *a1 = 0x8000000000000000;
  a5(v8, a4, 0, isUniquelyReferenced_nonNull_native, &v11);
  *a1 = v11;

  return swift_bridgeObjectRelease();
}

uint64_t sub_187CE1404()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v2 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v0 + v4, v2);
  if (*(void *)(v0 + v5 + 8))
  {
    swift_release();
    swift_release();
  }
  uint64_t v8 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(v0 + v7, 1, v1)) {
    (*(void (**)(unint64_t, uint64_t))(v8 + 8))(v0 + v7, v1);
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v6 = v2[2];
  uint64_t v5 = v2[3];
  uint64_t v7 = v2[4];
  unint64_t v8 = (*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  unint64_t v9 = (*(void *)(*(void *)(v6 - 8) + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v11 = (v9 + *(unsigned __int8 *)(v10 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v12 = v11 + *(void *)(v10 + 64);
  return closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)(a1, (uint64_t)v2 + v8, *(void *)((char *)v2 + v9), *(void *)((char *)v2 + v9 + 8), *((unsigned __int8 *)v2 + v9 + 16), (unint64_t)v2 + v11, *(void *)((char *)v2 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8)), *(void *)((char *)v2 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), a2, *((unsigned char *)v2 + ((v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(void *)((char *)v2 + ((v12 + 31) & 0xFFFFFFFFFFFFFFF8)), *(void *)((char *)v2 + ((((v12 + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), v6, v5, v7);
}

uint64_t sub_187CE175C()
{
  uint64_t v2 = *((void *)v0 + 2);
  uint64_t v1 = *((void *)v0 + 3);
  uint64_t v3 = *(void *)(v2 - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (*((void *)v0 + 6))
  {
    swift_release();
    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(&v0[v4], v2);
  uint64_t v8 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&v0[v7], 1, v1)) {
    (*(void (**)(char *, uint64_t))(v8 + 8))(&v0[v7], v1);
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)(uint64_t a1, Swift::UInt32 a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  unint64_t v8 = (*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v9 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v10 = (v8 + v7 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = v10 + *(void *)(v9 + 64);
  unint64_t v12 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:presenting:placeholder:content:)(a1, a2, *(void *)(v2 + 40), *(void *)(v2 + 48), *(unsigned __int8 *)(v2 + 56), v2 + v8, v2 + v10, *(void *)(v2 + v12), *(void *)(v2 + v12 + 8), *(unsigned char *)(v2 + v12 + 16), *(void *)(v2 + v13), *(void *)(v2 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8), v6, v5);
}

uint64_t specialized View.isPresentedValue<A>(data:isPresented:hasPlaceholder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  if (a3)
  {
    type metadata accessor for Binding<Bool>();
    MEMORY[0x18C113DA0](&v10);
    char v8 = v10 & a5;
  }
  else
  {
    char v8 = ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 48))(a1, 1, a7) != 1) | a5;
  }
  return v8 & 1;
}

uint64_t sub_187CE1B4C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:content:)(uint64_t a1, Swift::UInt32 a2)
{
  return closure #1 in closure #1 in View.inspector<A>(behavior:isPresented:content:)(a1, a2, *(void *)(v2 + 48), *(void *)(v2 + 56), *(unsigned char *)(v2 + 64), *(void *)(v2 + 72), *(void *)(v2 + 80), *(unsigned char *)(v2 + 88), *(void *)(v2 + 96), *(void *)(v2 + 104), *(void *)(v2 + 112), *(void *)(v2 + 120), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

unint64_t lazy protocol witness table accessor for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>;
  if (!lazy protocol witness table cache variable for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>)
  {
    type metadata accessor for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>(255, &lazy cache variable for type metadata for FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented>, (uint64_t)&type metadata for FocusedValues.__Key_inspectorPresented, (uint64_t)&protocol witness table for FocusedValues.__Key_inspectorPresented, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FocusedValuePropertyKey);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for FocusedValues.__Key_inspectorPresented()
{
  return &type metadata for FocusedValues.__Key_inspectorPresented;
}

void ScrollViewHelper.retargetContentOffsetIfNeeded(state:)(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for Logger?();
  double v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = (id)MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView, v5);
  if (!v8) {
    return;
  }
  if ((*(unsigned char *)(a1 + 33) & 1) == 0) {
    goto LABEL_3;
  }
  uint64_t v9 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates;
  int v10 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  BOOL v11 = __OFADD__(v10, 1);
  int v12 = v10 + 1;
  if (v11)
  {
    __break(1u);
    goto LABEL_27;
  }
  id v27 = v8;
  *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v12;
  double v13 = *(double *)(a1 + 24);
  _.double x = *(CGFloat *)(a1 + 16);
  double x = _.x;
  _.CGFloat y = v13;
  ScrollViewHelper.updateTargetContentOffset(_:velocity:)(&_, (CGPoint)0);
  CGFloat v16 = _.x;
  CGFloat y = _.y;
  if (vabdd_f64(_.x, x) < 0.01 && vabdd_f64(_.y, v13) < 0.01)
  {
    int v17 = *(_DWORD *)(v1 + v9);
    BOOL v11 = __OFSUB__(v17, 1);
    int v18 = v17 - 1;
    id v8 = v27;
    if (!v11)
    {
      *(_DWORD *)(v1 + v9) = v18;
      if (!v18 && *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2)
      {
        ScrollViewHelper.updateGraphState(isPreferred:)(0);
        id v8 = v27;
      }
LABEL_3:

      return;
    }
LABEL_28:
    __break(1u);
    return;
  }
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending) = 0;
  static Log.scroll.getter();
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = *(void *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v7, 1, v19) == 1)
  {
    outlined destroy of Logger?((uint64_t)v7);
  }
  else
  {
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 134218240;
      CGFloat v28 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2048;
      CGFloat v28 = y;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v21, v22, "Updating deceleration target to (%f, %f)", (uint8_t *)v23, 0x16u);
      MEMORY[0x18C119C60](v23, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v19);
  }
  uint64_t v24 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_updateFlags);
  if ((v24 & 1) == 0) {
    *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_updateFlags) = v24 | 1;
  }
  swift_beginAccess();
  objc_msgSend(v27, sel_setContentOffset_animated_, *(unsigned __int8 *)(a1 + 32), _.x, _.y);
  objc_msgSend(v27, sel_contentOffset);
  int v25 = *(_DWORD *)(v2 + v9);
  BOOL v11 = __OFSUB__(v25, 1);
  int v26 = v25 - 1;
  if (v11)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  *(_DWORD *)(v2 + v9) = v26;
  if (!v26 && *(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2) {
    ScrollViewHelper.updateGraphState(isPreferred:)(0);
  }
}

Swift::Void __swiftcall ScrollViewHelper.willStartPanning()()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates;
  int v2 = *(_DWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates);
  BOOL v3 = __OFADD__(v2, 1);
  int v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  *(_DWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_ignoreUpdates) = v4;
  double v5 = (void *)MEMORY[0x18C119DF0](v0 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
  if (v5)
  {
    uint64_t v6 = v5;
    objc_msgSend(v5, sel_contentOffset);
    uint64_t v8 = v7;
    uint64_t v10 = v9;

    uint64_t v11 = v0 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_beginPanningOffset;
    *(void *)uint64_t v11 = v8;
    *(void *)(v11 + 8) = v10;
    *(unsigned char *)(v11 + 16) = 0;
  }
  *(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) = 2;
  ScrollViewHelper.updateGraphState(isPreferred:)(0);
  int v12 = *(_DWORD *)(v0 + v1);
  BOOL v3 = __OFSUB__(v12, 1);
  int v13 = v12 - 1;
  if (v3) {
    goto LABEL_12;
  }
  *(_DWORD *)(v0 + v1) = v13;
  if (!v13 && *(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_pendingUpdate) != 2)
  {
    ScrollViewHelper.updateGraphState(isPreferred:)(0);
  }
}

Swift::Void __swiftcall ScrollViewHelper.mayEndPanning(velocity:targetOffset:)(CGPoint velocity, CGPoint *targetOffset)
{
  CGFloat y = velocity.y;
  CGFloat x = velocity.x;
  CGFloat v6 = targetOffset->x;
  CGFloat v7 = targetOffset->y;
  ScrollViewHelper.updateTargetContentOffset(_:velocity:)(targetOffset, velocity);
  uint64_t v8 = v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_beginPanningOffset;
  if (*(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_beginPanningOffset + 16)) {
    uint64_t v9 = targetOffset;
  }
  else {
    uint64_t v9 = (CGPoint *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_beginPanningOffset);
  }
  CGFloat v10 = targetOffset->x;
  double v11 = targetOffset->y;
  CGFloat v12 = targetOffset->x - v9->x;
  double v13 = v11 - v9->y;
  long long v14 = (double *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastOffsetChange);
  *long long v14 = v12;
  v14[1] = v13;
  char v15 = (CGFloat *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastVelocity);
  *char v15 = x;
  v15[1] = y;
  LOWORD(v15) = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) == 3;
  uint64_t v16 = v2 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState;
  *(CGFloat *)uint64_t v16 = v6;
  *(CGFloat *)(v16 + 8) = v7;
  *(CGFloat *)(v16 + 16) = v10;
  *(double *)(v16 + 24) = v11;
  *(_WORD *)(v16 + 32) = (_WORD)v15;
  *(void *)uint64_t v8 = 0;
  *(void *)(v8 + 8) = 0;
  *(unsigned char *)(v8 + 16) = 1;
}

Swift::Void __swiftcall ScrollViewHelper.didEndPanning(willDecelerate:)(Swift::Bool willDecelerate)
{
  if (willDecelerate) {
    char v3 = 3;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) = v3;
  ScrollViewHelper.updateGraphState(isPreferred:)(0);
  if (willDecelerate)
  {
    uint64_t v4 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastOffsetChange;
    double v5 = 0.0;
    double v6 = 0.0;
    if (*(double *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastOffsetChange) != 0.0) {
      double v6 = *(double *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastOffsetChange)
    }
         / fabs(*(double *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastOffsetChange));
    uint64_t v7 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_decelerationBias;
    *(double *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_decelerationBias) = v6;
    double v8 = *(double *)(v4 + 8);
    if (v8 != 0.0) {
      double v5 = v8 / fabs(v8);
    }
    *(double *)(v7 + 8) = v5;
  }
  else
  {
    uint64_t v9 = (void *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_decelerationBias);
    void *v9 = 0;
    v9[1] = 0;
  }
  CGFloat v10 = (void *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastVelocity);
  *CGFloat v10 = 0;
  v10[1] = 0;
  double v11 = (void *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastOffsetChange);
  void *v11 = 0;
  v11[1] = 0;
  uint64_t v12 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_beginPanningOffset;
  *(void *)uint64_t v12 = 0;
  *(void *)(v12 + 8) = 0;
  *(unsigned char *)(v12 + 16) = 1;
}

uint64_t UIScrollView.scrollGeometry(env:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = v2;
  uint64_t v32 = a2;
  uint64_t v5 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[1];
  uint64_t v31 = *a1;
  uint64_t v10 = v31;
  objc_msgSend(v3, sel_adjustedContentInset, v7);
  double v13 = v12;
  double v15 = v14;
  double v17 = v16;
  double v19 = v18;
  uint64_t v37 = v10;
  uint64_t v38 = v11;
  EnvironmentValues.pixelLength.getter();
  double v21 = v20;
  objc_msgSend(v3, sel_contentOffset);
  double v35 = v17 + v23;
  double v36 = v15 + v22;
  uint64_t v24 = *MEMORY[0x1E4FBBEA0];
  int v25 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v25(v9, v24, v5);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v21);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v21);
  int v26 = *(void (**)(char *, uint64_t))(v6 + 8);
  v26(v9, v5);
  objc_msgSend(v3, sel_frame);
  double v33 = v28 - (v13 + v17);
  double v34 = v27 - (v15 + v19);
  v25(v9, v24, v5);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v21);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v9, v21);
  v26(v9, v5);
  uint64_t v37 = v31;
  uint64_t v38 = v11;
  EnvironmentValues.layoutDirection.getter();
  objc_msgSend(v3, sel_contentSize);
  return ScrollGeometry.init(contentOffset:contentSize:contentInsets:containerSize:)();
}

Swift::Void __swiftcall ScrollViewHelper._updateCycleIdle(until:)(Swift::UInt64 until)
{
  ScrollPrefetchState.init(deadline:)();
  if (Axis.Set.contains(_:)())
  {
    uint64_t v2 = (void *)MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
    if (v2)
    {
      char v3 = v2;
      objc_msgSend(v2, sel__horizontalVelocity);
      if (v4 == 0.0)
      {
        double v5 = *(double *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_decelerationBias);

        BOOL v6 = v5 < 0.0;
        if (v5 == 0.0) {
          goto LABEL_12;
        }
      }
      else
      {
        double v7 = v4;

        double v8 = v7 / fabs(v7);
        BOOL v6 = v8 < 0.0;
        if (v8 == 0.0) {
          goto LABEL_12;
        }
      }
      if (v6) {
        char v9 = 2;
      }
      else {
        char v9 = 8;
      }
      if ((v18 & v9) == 0) {
        v18 |= v9;
      }
    }
  }
LABEL_12:
  if ((Axis.Set.contains(_:)() & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v10 = (void *)MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_scrollView);
  if (!v10) {
    goto LABEL_23;
  }
  uint64_t v11 = v10;
  objc_msgSend(v10, sel__verticalVelocity);
  if (v12 == 0.0)
  {
    double v13 = *(double *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_decelerationBias + 8);

    BOOL v14 = v13 < 0.0;
    if (v13 == 0.0) {
      goto LABEL_23;
    }
  }
  else
  {
    double v15 = v12;

    double v16 = v15 / fabs(v15);
    BOOL v14 = v16 < 0.0;
    if (v16 == 0.0) {
      goto LABEL_23;
    }
  }
  if (v14) {
    char v17 = 1;
  }
  else {
    char v17 = 4;
  }
  if ((v18 & v17) == 0) {
    v18 |= v17;
  }
LABEL_23:
  if (v18) {
    ScrollPrefetchState.commit(to:)();
  }
}

unsigned char *storeEnumTagSinglePayload for ScrollViewHelper.PendingUpdate(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    int *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187CE2B2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          int *result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ScrollViewHelper.PendingUpdate()
{
  return &unk_1ED41F1F0;
}

uint64_t getEnumTagSinglePayload for ScrollViewHelper.TargetOffsetState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 34)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewHelper.TargetOffsetState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 34) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 34) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for ScrollViewHelper.TargetOffsetState()
{
  return &unk_1ED41F280;
}

ValueMetadata *type metadata accessor for ScrollViewHelper.UpdateFlags()
{
  return &type metadata for ScrollViewHelper.UpdateFlags;
}

ValueMetadata *type metadata accessor for ScrollViewHelper.Options()
{
  return &type metadata for ScrollViewHelper.Options;
}

unint64_t lazy protocol witness table accessor for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.Options and conformance ScrollViewHelper.Options);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.UpdateFlags and conformance ScrollViewHelper.UpdateFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewHelper.PendingUpdate and conformance ScrollViewHelper.PendingUpdate()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewHelper.PendingUpdate and conformance ScrollViewHelper.PendingUpdate;
  if (!lazy protocol witness table cache variable for type ScrollViewHelper.PendingUpdate and conformance ScrollViewHelper.PendingUpdate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewHelper.PendingUpdate and conformance ScrollViewHelper.PendingUpdate);
  }
  return result;
}

double protocol witness for ScrollViewHelperDelegate.makeLayoutState() in conformance TextEditorTextView@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 96) = 0xF000000000000004;
  *(_DWORD *)(a1 + 104) = 0;
  return result;
}

uint64_t partial apply for closure #1 in ScrollViewHelper.updateTargetContentOffset(_:velocity:)()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(long long **)(v0 + 32);
  long long v3 = v2[11];
  v11[10] = v2[10];
  v11[11] = v3;
  long long v4 = v2[13];
  v11[12] = v2[12];
  v11[13] = v4;
  long long v5 = v2[7];
  v11[6] = v2[6];
  v11[7] = v5;
  long long v6 = v2[9];
  void v11[8] = v2[8];
  v11[9] = v6;
  long long v7 = v2[3];
  v11[2] = v2[2];
  void v11[3] = v7;
  long long v8 = v2[5];
  v11[4] = v2[4];
  v11[5] = v8;
  long long v9 = v2[1];
  v11[0] = *v2;
  v11[1] = v9;
  return ResolvedScrollBehavior.updateTarget(_:context:)(v1, v11);
}

uint64_t specialized getter of defaultTargetOffsetState #1 in ScrollViewHelper.boundsDidChange(oldBounds:newBounds:)@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v5 = result;
  unsigned int v7 = *(unsigned __int16 *)(result + 32);
  if (*(_WORD *)(result + 32) == 2)
  {
    char v8 = a2;
    __int16 v11 = a2 & 1;
    double result = swift_beginAccess();
    LOBYTE(v12) = 0;
    *(double *)uint64_t v5 = a4;
    *(double *)(v5 + 8) = a5;
    *(double *)(v5 + 16) = a4;
    *(double *)(v5 + 24) = a5;
    double v13 = a4;
    double v14 = a5;
    *(_WORD *)(v5 + 32) = v11;
  }
  else
  {
    double v13 = *(double *)(result + 16);
    double v14 = *(double *)(result + 24);
    char v8 = v7 & 1;
    int v12 = (v7 >> 8) & 1;
    a4 = *(double *)result;
    a5 = *(double *)(result + 8);
  }
  *(double *)a3 = a4;
  *(double *)(a3 + 8) = a5;
  *(double *)(a3 + 16) = v13;
  *(double *)(a3 + 24) = v14;
  *(unsigned char *)(a3 + 32) = v8 & 1;
  *(unsigned char *)(a3 + 33) = v12;
  return result;
}

uint64_t specialized ToolbarStrategy.withUpdate<A>(_:)(void **a1)
{
  uint64_t v1 = (char *)*a1;
  if (!*a1) {
    goto LABEL_7;
  }
  outlined init with copy of Toolbar.UpdateContext?((uint64_t)(a1 + 1), (uint64_t)v7);
  if (!v8)
  {
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_0((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, (uint64_t (*)(void))type metadata accessor for AccessibilityValueStorage?);
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  outlined init with take of Toolbar.UpdateContext((uint64_t)v7, (uint64_t)v9);
  uint64_t v2 = *(void **)&v1[direct field offset for ToolbarBridge.platformVended + 32];
  if (v2)
  {
    type metadata accessor for UIBarButtonItem();
    id v3 = v2;
    long long v4 = v1;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v3, sel_setItems_, isa);
  }
  outlined destroy of Toolbar.UpdateContext((uint64_t)v9);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall ToolbarBridge.resetPlatform()()
{
  id v1 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB19F0]), sel_init);
  uint64_t v2 = v0 + direct field offset for ToolbarBridge.platformVended;
  id v3 = *(void **)(v0 + direct field offset for ToolbarBridge.platformVended);
  long long v4 = *(void **)(v0 + direct field offset for ToolbarBridge.platformVended + 8);
  uint64_t v5 = *(void **)(v0 + direct field offset for ToolbarBridge.platformVended + 32);
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = v1;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  unsigned int v7 = *(void **)(v2 + 48);
  *(void *)(v2 + 16) = MEMORY[0x1E4FBC860];
  *(void *)(v2 + 24) = v6;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  swift_release();
}

void ToolbarBridge<>.platformDelegate.getter()
{
  uint64_t v1 = direct field offset for ToolbarBridge.platformVended;
  uint64_t v2 = *(void **)(v0 + direct field offset for ToolbarBridge.platformVended);
  if (v2) {
    goto LABEL_5;
  }
  id v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ToolbarPlatformDelegate()), sel_init);
  long long v4 = *(void **)(v0 + v1);
  *(void *)(v0 + v1) = v3;

  uint64_t v5 = *(void *)(v0 + v1);
  if (v5)
  {
    *(void *)(v5 + OBJC_IVAR____TtC7SwiftUI23ToolbarPlatformDelegate_provider + 8) = &protocol witness table for <> ToolbarBridge<A>;
    swift_unknownObjectWeakAssign();
    uint64_t v6 = *(void **)(v0 + v1);
    if (v6)
    {
      id v7 = v6;
LABEL_5:
      id v8 = v2;
      return;
    }
  }
  __break(1u);
}

uint64_t closure #1 in ToolbarBridge.update(environment:context:)(uint64_t a1, uint64_t *a2, long long *a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v9 = *a2;
  uint64_t v10 = *MEMORY[0x1E4FBC8C8];
  __int16 v14 = a4 & 0x101;
  char v15 = BYTE2(a4) & 1;
  uint64_t v11 = v10 & v9;
  char v16 = BYTE3(a4) & 1;
  char v17 = BYTE4(a4);
  char v18 = BYTE5(a4);
  char v19 = BYTE6(a4) & 1;
  outlined init with copy of Toolbar.UpdateContext(a5, (uint64_t)v13);
  ToolbarBridge.updateStorage(newStorage:barContext:updateContext:strategy:)(a3, (unsigned __int8 *)&v14, (uint64_t)v13, a1);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v13);
  *a6 = (*(uint64_t (**)(void))(*(void *)(v11 + 88) + 96))(*(void *)(v11 + 80));
  return swift_bridgeObjectRelease();
}

BOOL closure #1 in ToolbarBridge.filterAndSortMatchingItems(in:newStorage:context:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (ToolbarStorage.Entry, Int)();
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(int *)(v5 + 56);
  _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0(a1, (uint64_t)v7, type metadata accessor for ToolbarStorage.Entry);
  uint64_t v9 = *(void *)(a1 + v8);
  *(void *)&v7[v8] = v9;
  outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v7, type metadata accessor for ToolbarStorage.Entry);
  uint64_t v10 = *(int *)(v5 + 56);
  _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0(a2, (uint64_t)v7, type metadata accessor for ToolbarStorage.Entry);
  uint64_t v11 = *(void *)(a2 + v10);
  *(void *)&v7[v10] = v11;
  outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v7, type metadata accessor for ToolbarStorage.Entry);
  return v9 < v11;
}

uint64_t specialized thunk for @callee_guaranteed (@in_guaranteed ToolbarStorage.Entry, @unowned Int) -> (@out ToolbarStorage.Entry)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0(a1, a2, type metadata accessor for ToolbarStorage.Entry);
}

id ToolbarPlatformDelegate.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ToolbarPlatformDelegate();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ToolbarPlatformDelegate()
{
  return self;
}

id protocol witness for ToolbarBridgeProvider.toolbarBridge.getter in conformance <> ToolbarBridge<A>()
{
  return v0;
}

unint64_t type metadata accessor for UIBarButtonItem()
{
  unint64_t result = lazy cache variable for type metadata for UIBarButtonItem;
  if (!lazy cache variable for type metadata for UIBarButtonItem)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
  }
  return result;
}

uint64_t partial apply for closure #1 in ToolbarBridge.update(environment:context:)(uint64_t a1)
{
  uint64_t v2 = 0x1000000000000;
  if (!*(unsigned char *)(v1 + 38)) {
    uint64_t v2 = 0;
  }
  uint64_t v3 = 0x1000000;
  if (!*(unsigned char *)(v1 + 35)) {
    uint64_t v3 = 0;
  }
  uint64_t v4 = 0x10000;
  if (!*(unsigned char *)(v1 + 34)) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = v3 | v4;
  uint64_t v6 = 256;
  if (!*(unsigned char *)(v1 + 33)) {
    uint64_t v6 = 0;
  }
  return closure #1 in ToolbarBridge.update(environment:context:)(a1, *(uint64_t **)(v1 + 16), *(long long **)(v1 + 24), v2 | ((unint64_t)*(unsigned __int8 *)(v1 + 37) << 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 36) << 32) | v5 | v6 | *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48));
}

uint64_t specialized ToolbarBridge.filterAndSortMatchingItems(in:newStorage:context:)(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v89 = a1;
  type metadata accessor for (ToolbarStorage.Entry, Int)();
  uint64_t v73 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v72 = (uint64_t)v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v71 = (char *)v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v76 = (uint64_t)v67 - v9;
  MEMORY[0x1F4188790](v10);
  int v12 = (char *)v67 - v11;
  uint64_t v90 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v90);
  v94 = (char *)v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  char v16 = (char *)v67 - v15;
  uint64_t v17 = type metadata accessor for ToolbarStorage.Item(0);
  uint64_t v69 = *(void *)(v17 - 8);
  uint64_t v70 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v80 = (uint64_t)v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  double v21 = (char *)v67 - v20;
  uint64_t v22 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  int v25 = (char *)v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v26 = *a3;
  int v85 = a3[1];
  int v86 = v26;
  int v27 = a3[2];
  int v83 = a3[3];
  int v84 = v27;
  int v87 = a3[4];
  int v28 = a3[5];
  int v81 = a3[6];
  int v82 = v28;
  uint64_t v106 = MEMORY[0x1E4FBC860];
  uint64_t v29 = swift_bridgeObjectRetain();
  uint64_t v30 = specialized _ArrayProtocol.filter(_:)(v29);
  swift_bridgeObjectRelease();
  uint64_t v93 = *(void *)(v30 + 16);
  if (!v93)
  {
    swift_bridgeObjectRelease();
    uint64_t v59 = MEMORY[0x1E4FBC860];
    goto LABEL_182;
  }
  v67[1] = 0;
  uint64_t v68 = v22;
  uint64_t v31 = (uint64_t)v12;
  unint64_t v32 = 0;
  unint64_t v91 = v30 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  uint64_t v92 = v23;
  uint64_t v74 = v31 + 16;
  uint64_t v75 = v31;
  long long v78 = v21 + 48;
  char v79 = v21;
  uint64_t v33 = MEMORY[0x1E4FBC870];
  uint64_t v34 = (uint64_t)v71;
  uint64_t v35 = (uint64_t)v94;
  uint64_t v88 = v30;
  while (1)
  {
    if (v32 >= *(void *)(v30 + 16))
    {
      __break(1u);
      JUMPOUT(0x187CE473CLL);
    }
    _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0(v91 + *(void *)(v92 + 72) * v32, (uint64_t)v25, type metadata accessor for ToolbarStorage.Entry);
    _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0((uint64_t)v25, (uint64_t)v16, type metadata accessor for ToolbarStorage.Entry.Kind);
    if (swift_getEnumCaseMultiPayload()) {
      break;
    }
    uint64_t v42 = v80;
    _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v16, v80, type metadata accessor for ToolbarStorage.Item);
    uint64_t v43 = v42;
    uint64_t v44 = (uint64_t)v79;
    _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0(v43, (uint64_t)v79, type metadata accessor for ToolbarStorage.Item);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v78, (uint64_t)&v98);
    unint64_t v40 = type metadata accessor for ToolbarStorage.Item;
    uint64_t v41 = v44;
    uint64_t v30 = v88;
LABEL_15:
    outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v41, v40);
    uint64_t v35 = (uint64_t)v94;
    if (v101 == 255) {
      goto LABEL_4;
    }
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)&v98, (uint64_t)v105);
    LOBYTE(v98) = v86;
    BYTE1(v98) = v85;
    BYTE2(v98) = v84;
    BYTE3(v98) = v83;
    BYTE4(v98) = v87;
    BYTE5(v98) = v82;
    BYTE6(v98) = v81;
    uint64_t v45 = Toolbar.BarLocation.priority(for:context:)((uint64_t)v105, (unsigned __int8 *)&v98);
    if (v46)
    {
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v105);
      outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v25, type metadata accessor for ToolbarStorage.Entry);
      goto LABEL_165;
    }
    uint64_t v77 = v45;
    if (*(void *)(v33 + 16))
    {
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      ToolbarItemPlacement.Role.hash(into:)();
      Swift::Int v47 = Hasher._finalize()();
      uint64_t v48 = -1 << *(unsigned char *)(v33 + 32);
      unint64_t v49 = v47 & ~v48;
      if ((*(void *)(v33 + 56 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49))
      {
        uint64_t v50 = ~v48;
        do
        {
          outlined init with copy of ToolbarItemPlacement.Role(*(void *)(v33 + 48) + 48 * v49, (uint64_t)v104);
          outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v104, (uint64_t)&v98);
          outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v105, (uint64_t)v102);
          if (v101)
          {
            if (v101 == 1)
            {
              outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v98, (uint64_t)v97);
              if (v103 == 1)
              {
                v95[0] = *(_OWORD *)v102;
                v95[1] = *(_OWORD *)&v102[16];
                uint64_t v96 = *(void *)&v102[32];
                char v51 = MEMORY[0x18C1174E0](v97, v95);
                outlined destroy of AnyHashable((uint64_t)v95);
                outlined destroy of AnyHashable((uint64_t)v97);
                if (v51) {
                  goto LABEL_153;
                }
LABEL_30:
                outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v98);
                goto LABEL_22;
              }
              outlined destroy of AnyHashable((uint64_t)v97);
            }
            else
            {
              if (!(*((void *)&v99 + 1) | v100 | (unint64_t)v98 | (unint64_t)v99 | *((void *)&v98 + 1)))
              {
                if (v103 == 2)
                {
                  int8x16_t v53 = vorrq_s8(*(int8x16_t *)&v102[8], *(int8x16_t *)&v102[24]);
                  if (!(*(void *)&vorr_s8(*(int8x8_t *)v53.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)) | *(void *)v102))
                  {
LABEL_153:
                    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v98);
                    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v104);
                    swift_bridgeObjectRelease();
                    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v105);
                    outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v25, type metadata accessor for ToolbarStorage.Entry);
                    uint64_t v34 = (uint64_t)v71;
                    uint64_t v35 = (uint64_t)v94;
                    uint64_t v30 = v88;
                    goto LABEL_5;
                  }
                }
                goto LABEL_21;
              }
              uint64_t v52 = *((void *)&v99 + 1) | v100 | v99 | *((void *)&v98 + 1);
              if ((void)v98 != 1 || v52)
              {
                if ((void)v98 != 2 || v52)
                {
                  if ((void)v98 != 3 || v52)
                  {
                    if ((void)v98 != 4 || v52)
                    {
                      if ((void)v98 != 5 || v52)
                      {
                        if ((void)v98 != 6 || v52)
                        {
                          if ((void)v98 != 7 || v52)
                          {
                            if ((void)v98 != 8 || v52)
                            {
                              if ((void)v98 != 9 || v52)
                              {
                                if ((void)v98 != 10 || v52)
                                {
                                  if ((void)v98 != 11 || v52)
                                  {
                                    if ((void)v98 != 12 || v52)
                                    {
                                      if ((void)v98 != 13 || v52)
                                      {
                                        if ((void)v98 != 14 || v52)
                                        {
                                          if ((void)v98 != 15 || v52)
                                          {
                                            if ((void)v98 != 16 || v52)
                                            {
                                              if ((void)v98 != 17 || v52)
                                              {
                                                if ((void)v98 != 18 || v52)
                                                {
                                                  if ((void)v98 != 19 || v52)
                                                  {
                                                    if ((void)v98 != 20 || v52)
                                                    {
                                                      if ((void)v98 != 21 || v52)
                                                      {
                                                        if ((void)v98 != 22 || v52)
                                                        {
                                                          if ((void)v98 != 23 || v52)
                                                          {
                                                            if (v103 == 2 && *(void *)v102 == 24)
                                                            {
LABEL_152:
                                                              int8x16_t v54 = vorrq_s8(*(int8x16_t *)&v102[8], *(int8x16_t *)&v102[24]);
                                                              if (!*(void *)&vorr_s8(*(int8x8_t *)v54.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)))goto LABEL_153; {
                                                            }
                                                              }
                                                          }
                                                          else if (v103 == 2 && *(void *)v102 == 23)
                                                          {
                                                            goto LABEL_152;
                                                          }
                                                        }
                                                        else if (v103 == 2 && *(void *)v102 == 22)
                                                        {
                                                          goto LABEL_152;
                                                        }
                                                      }
                                                      else if (v103 == 2 && *(void *)v102 == 21)
                                                      {
                                                        goto LABEL_152;
                                                      }
                                                    }
                                                    else if (v103 == 2 && *(void *)v102 == 20)
                                                    {
                                                      goto LABEL_152;
                                                    }
                                                  }
                                                  else if (v103 == 2 && *(void *)v102 == 19)
                                                  {
                                                    goto LABEL_152;
                                                  }
                                                }
                                                else if (v103 == 2 && *(void *)v102 == 18)
                                                {
                                                  goto LABEL_152;
                                                }
                                              }
                                              else if (v103 == 2 && *(void *)v102 == 17)
                                              {
                                                goto LABEL_152;
                                              }
                                            }
                                            else if (v103 == 2 && *(void *)v102 == 16)
                                            {
                                              goto LABEL_152;
                                            }
                                          }
                                          else if (v103 == 2 && *(void *)v102 == 15)
                                          {
                                            goto LABEL_152;
                                          }
                                        }
                                        else if (v103 == 2 && *(void *)v102 == 14)
                                        {
                                          goto LABEL_152;
                                        }
                                      }
                                      else if (v103 == 2 && *(void *)v102 == 13)
                                      {
                                        goto LABEL_152;
                                      }
                                    }
                                    else if (v103 == 2 && *(void *)v102 == 12)
                                    {
                                      goto LABEL_152;
                                    }
                                  }
                                  else if (v103 == 2 && *(void *)v102 == 11)
                                  {
                                    goto LABEL_152;
                                  }
                                }
                                else if (v103 == 2 && *(void *)v102 == 10)
                                {
                                  goto LABEL_152;
                                }
                              }
                              else if (v103 == 2 && *(void *)v102 == 9)
                              {
                                goto LABEL_152;
                              }
                            }
                            else if (v103 == 2 && *(void *)v102 == 8)
                            {
                              goto LABEL_152;
                            }
                          }
                          else if (v103 == 2 && *(void *)v102 == 7)
                          {
                            goto LABEL_152;
                          }
                        }
                        else if (v103 == 2 && *(void *)v102 == 6)
                        {
                          goto LABEL_152;
                        }
                      }
                      else if (v103 == 2 && *(void *)v102 == 5)
                      {
                        goto LABEL_152;
                      }
                    }
                    else if (v103 == 2 && *(void *)v102 == 4)
                    {
                      goto LABEL_152;
                    }
                  }
                  else if (v103 == 2 && *(void *)v102 == 3)
                  {
                    goto LABEL_152;
                  }
                }
                else if (v103 == 2 && *(void *)v102 == 2)
                {
                  goto LABEL_152;
                }
              }
              else if (v103 == 2 && *(void *)v102 == 1)
              {
                goto LABEL_152;
              }
            }
          }
          else
          {
            outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v98, (uint64_t)v97);
            if (!v103)
            {
              if (LOBYTE(v97[0]) == v102[0]) {
                goto LABEL_153;
              }
              goto LABEL_30;
            }
          }
LABEL_21:
          _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_0((uint64_t)&v98, (uint64_t)&lazy cache variable for type metadata for (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role), (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(void))type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role));
LABEL_22:
          outlined destroy of ToolbarItemPlacement.Role((uint64_t)v104);
          unint64_t v49 = (v49 + 1) & v50;
        }
        while (((*(void *)(v33 + 56 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) != 0);
      }
      swift_bridgeObjectRelease();
      uint64_t v34 = (uint64_t)v71;
      uint64_t v30 = v88;
    }
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v105, (uint64_t)&v98);
    if (!v101)
    {
LABEL_162:
      outlined init with copy of Toolbar.BarLocation(v89, (uint64_t)&v98);
      switch(*((void *)&v99 + 1))
      {
        case 0:
        case 4:
        case 5:
        case 6:
        case 7:
          goto LABEL_163;
        case 1:
        case 8:
        case 9:
        case 0xALL:
        case 0xBLL:
        case 0xCLL:
        case 0xDLL:
        case 0xELL:
          goto LABEL_164;
        case 2:
        case 3:
          if ((static SemanticFeature.isEnabled.getter() & 1) == 0 && v87 != 2 && (v87 & 1) == 0)
          {
LABEL_163:
            outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v105, (uint64_t)v104);
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v97[0] = v33;
            specialized _NativeSet.update(with:isUnique:)((uint64_t)v104, isUniquelyReferenced_nonNull_native, (uint64_t)&v98);
            uint64_t v33 = v97[0];
            swift_bridgeObjectRelease();
            _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_0((uint64_t)&v98, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(void))type metadata accessor for AccessibilityValueStorage?);
          }
          break;
        default:
          outlined destroy of Toolbar.BarLocation((uint64_t)&v98);
          break;
      }
      goto LABEL_164;
    }
    if (v101 == 1)
    {
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v98);
    }
    else
    {
      if (!(*((void *)&v99 + 1) | v100 | (unint64_t)v98 | (unint64_t)v99 | *((void *)&v98 + 1))) {
        goto LABEL_162;
      }
      uint64_t v55 = *((void *)&v99 + 1) | v100 | v99 | *((void *)&v98 + 1);
      if ((unint64_t)(v98 - 1) <= 7 && !v55) {
        goto LABEL_162;
      }
      if (((unint64_t)(v98 - 9) > 9 || v55)
        && ((unint64_t)(v98 - 19) <= 1 && !v55 || (unint64_t)(v98 - 21) > 1 || v55))
      {
        goto LABEL_162;
      }
    }
LABEL_164:
    uint64_t v57 = v72;
    uint64_t v58 = *(int *)(v73 + 48);
    _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0((uint64_t)v25, v72, type metadata accessor for ToolbarStorage.Entry);
    *(void *)(v57 + v58) = v77;
    _s7SwiftUI14ToolbarStorageV10SearchItemVSgMaTm_0(0, &lazy cache variable for type metadata for [(ToolbarStorage.Entry, Int)], (uint64_t (*)(uint64_t))type metadata accessor for (ToolbarStorage.Entry, Int), MEMORY[0x1E4FBB320]);
    Array.append(_:)();
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v105);
    outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v25, type metadata accessor for ToolbarStorage.Entry);
LABEL_165:
    uint64_t v35 = (uint64_t)v94;
LABEL_5:
    if (++v32 == v93) {
      goto LABEL_180;
    }
  }
  outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v16, type metadata accessor for ToolbarStorage.Entry.Kind);
  _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0((uint64_t)v25, v35, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v35, type metadata accessor for ToolbarStorage.Entry.Kind);
    long long v98 = 0u;
    long long v99 = 0u;
    uint64_t v100 = 0;
    unsigned __int8 v101 = -1;
LABEL_4:
    outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v25, type metadata accessor for ToolbarStorage.Entry);
    _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_0((uint64_t)&v98, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, (uint64_t (*)(void))type metadata accessor for AccessibilityValueStorage?);
    goto LABEL_5;
  }
  _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0(v35, v34, type metadata accessor for ToolbarStorage.GroupItem);
  double v36 = *(void **)(v34 + 72);
  if (v36[2] != 1)
  {
LABEL_13:
    uint64_t v37 = v76;
    _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0(v34, v76, type metadata accessor for ToolbarStorage.GroupItem);
    uint64_t v38 = v37;
    uint64_t v39 = v75;
    _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0(v38, v75, type metadata accessor for ToolbarStorage.GroupItem);
    outlined init with copy of ToolbarItemPlacement.Role(v74, (uint64_t)&v98);
    unint64_t v40 = type metadata accessor for ToolbarStorage.GroupItem;
    uint64_t v41 = v39;
    goto LABEL_15;
  }
  if (swift_isUniquelyReferenced_nonNull_native())
  {
    if (!v36[2]) {
      goto LABEL_179;
    }
    goto LABEL_12;
  }
  double v36 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v36);
  if (v36[2])
  {
LABEL_12:
    *((unsigned char *)v36
    + ((*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))
    + *(int *)(v70 + 60)) = 1;
    *(void *)(v34 + 72) = v36;
    goto LABEL_13;
  }
LABEL_179:
  __break(1u);
LABEL_180:
  swift_bridgeObjectRelease();
  uint64_t v59 = v106;
  uint64_t v22 = v68;
LABEL_182:
  *(void *)&long long v98 = v59;
  _s7SwiftUI14ToolbarStorageV10SearchItemVSgMaTm_0(0, &lazy cache variable for type metadata for [(ToolbarStorage.Entry, Int)], (uint64_t (*)(uint64_t))type metadata accessor for (ToolbarStorage.Entry, Int), MEMORY[0x1E4FBB320]);
  uint64_t v61 = v60;
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v62 = Sequence.sorted(by:)();
  swift_bridgeObjectRelease();
  *(void *)&long long v98 = v62;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v65 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))specialized thunk for @callee_guaranteed (@in_guaranteed ToolbarStorage.Entry, @unowned Int) -> (@out ToolbarStorage.Entry), 0, v61, v22, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v65;
}

uint64_t outlined assign with take of ToolbarStorage.Entry(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ToolbarStorage.Entry(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unsigned char *_PagingViewConfig.init(direction:size:margin:spacing:constrainedDeceleration:)@<X0>(unsigned char *result@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  *(unsigned char *)a5 = *result;
  *(void *)(a5 + 8) = a2;
  *(unsigned char *)(a5 + 16) = a3 & 1;
  *(double *)(a5 + 24) = a6;
  *(double *)(a5 + 32) = a7;
  *(unsigned char *)(a5 + 40) = a4;
  return result;
}

double _PagingView.init(config:page:views:)@<D0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v27 = *a1;
  uint64_t v26 = *((void *)a1 + 1);
  char v12 = a1[16];
  uint64_t v13 = *((void *)a1 + 3);
  uint64_t v14 = *((void *)a1 + 4);
  char v25 = a1[40];
  *(void *)uint64_t v29 = a4;
  *(void *)&v29[8] = a5;
  *(void *)&v29[16] = a6;
  *(void *)&v29[24] = a7;
  uint64_t v15 = (int *)type metadata accessor for _PagingView();
  uint64_t v16 = a8 + v15[13];
  swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = (void *)(a8 + v15[16]);
  *uint64_t v18 = 0;
  v18[1] = 0;
  uint64_t v19 = *(void *)(a4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(a8, a3, a4);
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 24))(v16, a2, v20);
  uint64_t v22 = a8 + v15[14];
  *(unsigned char *)uint64_t v22 = v27;
  *(void *)(v22 + 8) = v26;
  *(unsigned char *)(v22 + 16) = v12;
  *(void *)(v22 + 24) = v13;
  *(void *)(v22 + 32) = v14;
  *(unsigned char *)(v22 + 40) = v25;
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(a3, a4);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a2, v20);
  uint64_t v23 = a8 + v15[15];
  *(_OWORD *)uint64_t v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  *(unsigned char *)(v23 + 32) = 0;
  *(_DWORD *)(v23 + 33) = *(_DWORD *)v28;
  *(_DWORD *)(v23 + 36) = *(_DWORD *)&v28[3];
  *(_OWORD *)(v23 + 40) = 0u;
  *(_OWORD *)(v23 + 56) = 0u;
  *(void *)(v23 + 72) = 0x3FEFEF9DB22D0E56;
  *(_WORD *)(v23 + 80) = 0;
  *(_OWORD *)(v23 + 82) = *(_OWORD *)v29;
  *(_OWORD *)(v23 + 96) = *(_OWORD *)&v29[14];
  *(void *)(v23 + 112) = &type metadata for EmptyGestureProvider;
  *(void *)(v23 + 120) = &protocol witness table for EmptyGestureProvider;
  *(_OWORD *)(v23 + 152) = 0u;
  *(_OWORD *)(v23 + 136) = 0u;
  *(void *)&double result = 257;
  *(_DWORD *)(v23 + 128) = 257;
  return result;
}

BOOL static _PagingViewConfig.Direction.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void _PagingViewConfig.Direction.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int _PagingViewConfig.Direction.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void _PagingViewConfig.direction.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *_PagingViewConfig.direction.setter(unsigned char *result)
{
  *Swift::UInt v1 = *result;
  return result;
}

uint64_t (*_PagingViewConfig.direction.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _PagingViewConfig.size.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t _PagingViewConfig.size.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 8) = result;
  *(unsigned char *)(v2 + 16) = a2 & 1;
  return result;
}

uint64_t (*_PagingViewConfig.size.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _PagingViewConfig.margin.getter()
{
  return *(double *)(v0 + 24);
}

void _PagingViewConfig.margin.setter(double a1)
{
  *(double *)(v1 + 24) = a1;
}

uint64_t (*_PagingViewConfig.margin.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double _PagingViewConfig.spacing.getter()
{
  return *(double *)(v0 + 32);
}

void _PagingViewConfig.spacing.setter(double a1)
{
  *(double *)(v1 + 32) = a1;
}

uint64_t (*_PagingViewConfig.spacing.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _PagingViewConfig.constrainedDeceleration.getter()
{
  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t _PagingViewConfig.constrainedDeceleration.setter(uint64_t result)
{
  *(unsigned char *)(v1 + 40) = result;
  return result;
}

uint64_t (*_PagingViewConfig.constrainedDeceleration.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _PagingView.views.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _PagingView.views.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_PagingView.views.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _PagingView.page.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 52);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Binding();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t _PagingView.page.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 52);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Binding();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*_PagingView.page.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

__n128 _PagingView.config.getter@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2 + *(int *)(a1 + 56);
  uint64_t v4 = *(void *)(v3 + 8);
  char v5 = *(unsigned char *)(v3 + 16);
  char v6 = *(unsigned char *)(v3 + 40);
  *(unsigned char *)a2 = *(unsigned char *)v3;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v5;
  __n128 result = *(__n128 *)(v3 + 24);
  *(__n128 *)(a2 + 24) = result;
  *(unsigned char *)(a2 + 40) = v6;
  return result;
}

__n128 _PagingView.config.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 40);
  uint64_t v6 = v2 + *(int *)(a2 + 56);
  *(unsigned char *)uint64_t v6 = *(unsigned char *)a1;
  *(void *)(v6 + 8) = v3;
  *(unsigned char *)(v6 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v6 + 24) = result;
  *(unsigned char *)(v6 + 40) = v5;
  return result;
}

uint64_t (*_PagingView.config.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _PagingView.scrollViewConfig.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of _ScrollViewConfig(v2 + *(int *)(a1 + 60), a2);
}

uint64_t _PagingView.scrollViewConfig.setter(uint64_t a1, uint64_t a2)
{
  return outlined assign with take of _ScrollViewConfig(a1, v2 + *(int *)(a2 + 60));
}

uint64_t (*_PagingView.scrollViewConfig.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _PagingView.init(direction:page:views:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v24 = a8;
  uint64_t v13 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Binding();
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v23 - v19;
  v27[0] = *a1;
  uint64_t v28 = 0;
  char v29 = 1;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  char v32 = 1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v23 - v19, a2, v16, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, a4);
  double v21 = _PagingView.init(config:page:views:)(v27, (uint64_t)v20, (uint64_t)v15, a4, a5, v25, v26, v24);
  (*(void (**)(uint64_t, uint64_t, double))(v13 + 8))(a3, a4, v21);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a2, v16);
}

double _PagingView.$offset.getter()
{
  type metadata accessor for State<CGFloat>();
  State.projectedValue.getter();
  return v1;
}

uint64_t _PagingView.body.getter(void *a1)
{
  uint64_t v2 = *(a1 - 1);
  uint64_t v3 = *(void *)(v2 + 64);
  double v4 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v2 + 16))((char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  unint64_t v5 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v6 = (char *)swift_allocObject();
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  *((void *)v6 + 2) = v7;
  *((void *)v6 + 3) = v8;
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  *((void *)v6 + 4) = v9;
  *((void *)v6 + 5) = v10;
  (*(void (**)(char *, char *, void *))(v2 + 32))(&v6[v5], (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  unint64_t v11 = lazy protocol witness table accessor for type PagingLayout and conformance PagingLayout();
  uint64_t v16 = v7;
  uint64_t v17 = &unk_1ED411DD8;
  uint64_t v18 = v8;
  unint64_t v19 = v11;
  uint64_t v20 = v9;
  uint64_t v21 = v10;
  type metadata accessor for _ScrollableLayoutView();
  swift_getWitnessTable();
  type metadata accessor for _ScrollView();
  swift_getWitnessTable();
  uint64_t v14 = GeometryReader.init(content:)();
  uint64_t v15 = v12;
  type metadata accessor for GeometryReader();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v14);
  swift_release();
  uint64_t v14 = v16;
  uint64_t v15 = v17;
  static ViewBuilder.buildExpression<A>(_:)(&v14);
  return swift_release();
}

uint64_t closure #1 in _PagingView.body.getter@<X0>(long long *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  v23[1] = a6;
  *(void *)&long long v24 = a2;
  *((void *)&v24 + 1) = &unk_1ED411DD8;
  *(void *)&long long v25 = a3;
  *((void *)&v25 + 1) = lazy protocol witness table accessor for type PagingLayout and conformance PagingLayout();
  *(void *)&long long v26 = a4;
  *((void *)&v26 + 1) = a5;
  type metadata accessor for _ScrollableLayoutView();
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for _ScrollView();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v23 - v16;
  int v18 = *((_DWORD *)a1 + 12);
  long long v19 = a1[1];
  long long v24 = *a1;
  long long v25 = v19;
  long long v26 = a1[2];
  int v27 = v18;
  GeometryProxy.size.getter();
  *(void *)&long long v24 = a2;
  *((void *)&v24 + 1) = a3;
  *(void *)&long long v25 = a4;
  *((void *)&v25 + 1) = a5;
  uint64_t v20 = type metadata accessor for _PagingView();
  _PagingView.body(size:)(v20, (uint64_t)v14);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v14);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v12 + 8);
  v21(v14, v11);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v21)(v17, v11);
}

int *_PagingView.ToPageOffset.init(views:config:itemSize:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  char v9 = *a2;
  uint64_t v10 = *((void *)a2 + 1);
  char v11 = a2[16];
  uint64_t v12 = *((void *)a2 + 3);
  uint64_t v13 = *((void *)a2 + 4);
  char v20 = a2[40];
  uint64_t v14 = *(void *)(a3 - 8);
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(a4, a1);
  __n128 result = (int *)type metadata accessor for _PagingView.ToPageOffset();
  uint64_t v16 = a4 + result[13];
  *(unsigned char *)uint64_t v16 = v9;
  *(void *)(v16 + 8) = v10;
  *(unsigned char *)(v16 + 16) = v11;
  *(void *)(v16 + 24) = v12;
  *(void *)(v16 + 32) = v13;
  *(unsigned char *)(v16 + 40) = v20;
  *(double *)(a4 + result[14]) = a5;
  Swift::Int v17 = toPageOffsetGenerationCounter;
  *(void *)(a4 + result[15]) = toPageOffsetGenerationCounter;
  BOOL v18 = __OFADD__(v17, 1);
  Swift::Int v19 = v17 + 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    toPageOffsetGenerationCounter = v19;
    return (int *)(*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a3);
  }
  return result;
}

uint64_t _PagingView.ToPageOffset.get(base:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v17 = *(void *)(a2 + 24);
  uint64_t v18 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  char v9 = (char *)v16 - v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v11 = *(void *)(TupleTypeMetadata2 - 8);
  double v12 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v14 = (char *)v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)v16 - v13, a1, AssociatedTypeWitness, v12);
  *(double *)&v14[*(int *)(TupleTypeMetadata2 + 48)] = a3;
  if ((dispatch thunk of Collection.isEmpty.getter() & 1) == 0)
  {
    v16[3] = *(unsigned __int8 *)(v3 + *(int *)(v18 + 52));
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of RandomAccessCollection.distance(from:to:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, TupleTypeMetadata2);
}

uint64_t _PagingView.ToPageOffset.set(base:newValue:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v31 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t result = dispatch thunk of Collection.isEmpty.getter();
  if ((result & 1) == 0)
  {
    uint64_t v16 = *(int *)(a2 + 56);
    uint64_t v17 = (char *)(v4 + *(int *)(a2 + 52));
    uint64_t v18 = *((void *)v17 + 1);
    char v19 = v17[16];
    char v20 = v17[40];
    char v32 = *v17;
    uint64_t v33 = v18;
    char v34 = v19;
    long long v35 = *(_OWORD *)(v17 + 24);
    char v36 = v20;
    double v21 = *(double *)(v4 + v16);
    uint64_t v22 = dispatch thunk of Collection.count.getter();
    uint64_t v23 = _PagingViewConfig.pageForContentOffset(_:itemSize:count:)(v22, a3, a4, v21);
    if (v25) {
      double v26 = 0.0;
    }
    else {
      double v26 = v24;
    }
    if (v25) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = v23;
    }
    uint64_t v30 = v27;
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v29 = v31;
    *(double *)(v31 + *(int *)(TupleTypeMetadata2 + 48)) = v26;
    dispatch thunk of Collection.startIndex.getter();
    dispatch thunk of RandomAccessCollection.index(_:offsetBy:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 40))(v29, v14, AssociatedTypeWitness);
  }
  return result;
}

uint64_t _PagingViewConfig.pageForContentOffset(_:itemSize:count:)(uint64_t result, double a2, double a3, double a4)
{
  if (a4 <= 0.0) {
    return 0;
  }
  if (!*(unsigned char *)v4) {
    a2 = a3;
  }
  double v5 = floor(a2 / (*(double *)(v4 + 32) + a4) + 0.5);
  if ((~*(void *)&v5 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v5 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v5 >= 9.22337204e18)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (__OFSUB__(result, 1))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  if (((uint64_t)v5 & ~((uint64_t)v5 >> 63)) < result - 1) {
    return (uint64_t)v5 & ~((uint64_t)v5 >> 63);
  }
  return --result;
}

BOOL static _PagingView.ToPageOffset.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _PagingView.ToPageOffset();
  return *(void *)(a1 + *(int *)(v4 + 60)) == *(void *)(a2 + *(int *)(v4 + 60));
}

void _PagingView.ToPageOffset.hash(into:)(uint64_t a1, uint64_t a2)
{
  Hasher._combine(_:)(*(void *)(v2 + *(int *)(a2 + 60)));
}

Swift::Int _PagingView.ToPageOffset.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(v1 + *(int *)(a1 + 60)));
  return Hasher._finalize()();
}

uint64_t protocol witness for Projection.get(base:) in conformance _PagingView<A>.ToPageOffset@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t result = _PagingView.ToPageOffset.get(base:)(a1, a2, *(double *)(a1 + *(int *)(TupleTypeMetadata2 + 48)));
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance _PagingView<A>.ToPageOffset(uint64_t a1, double *a2, uint64_t a3)
{
  return _PagingView.ToPageOffset.set(base:newValue:)(a1, a3, *a2, a2[1]);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance _PagingView<A>.ToPageOffset(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  _PagingView.ToPageOffset.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _PagingView<A>.ToPageOffset(uint64_t a1, uint64_t a2)
{
  return static _PagingView.ToPageOffset.== infix(_:_:)(a1, a2);
}

double PagingLayout.decelerationTarget(contentOffset:originalContentOffset:velocity:size:)(double result, double a2, double a3, double a4, double a5, double a6, double a7)
{
  double v8 = *(double *)(v7 + 24);
  double v9 = *(double *)(v7 + 16) + v8 * -0.5;
  if (v9 < 0.0) {
    double v9 = 0.0;
  }
  double v10 = result + a5 * -0.25;
  double v11 = a3 - a7;
  if (a3 - a7 <= v10) {
    double v11 = v10;
  }
  double v12 = a3 + a7;
  if (v12 >= v11) {
    double v12 = v11;
  }
  if (!*(unsigned char *)(v7 + 32)) {
    double v12 = v10;
  }
  double v13 = (*(double *)v7 + v8) * round((v12 - v9) / (*(double *)v7 + v8));
  if (*(unsigned char *)(v7 + 8) == 1) {
    return v13;
  }
  return result;
}

double protocol witness for _ScrollableLayout.decelerationTarget(contentOffset:originalContentOffset:velocity:size:) in conformance PagingLayout(double a1, double a2, double a3, double a4, double a5, double a6, double a7)
{
  return PagingLayout.decelerationTarget(contentOffset:originalContentOffset:velocity:size:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t specialized static _PagingViewConfig.== infix(_:_:)(double *a1, double *a2)
{
  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2) {
    return 0;
  }
  double v3 = a1[3];
  double v2 = a1[4];
  double v5 = a2[3];
  double v4 = a2[4];
  if ((_BYTE)a1[2])
  {
    if (!*((unsigned char *)a2 + 16)) {
      return 0;
    }
    if (v3 != v5 || v2 != v4) {
      return 0;
    }
  }
  else
  {
    if ((_BYTE)a2[2]) {
      return 0;
    }
    BOOL v7 = a1[1] == a2[1] && v3 == v5;
    if (!v7 || v2 != v4) {
      return 0;
    }
  }
  return *((unsigned __int8 *)a1 + 40) ^ *((unsigned __int8 *)a2 + 40) ^ 1u;
}

uint64_t sub_187CE5F90()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for _PagingView();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3, v1);
  uint64_t v4 = v3 + *(int *)(v2 + 52);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Binding();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v4, 1, v6))
  {
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v4 + *(int *)(v6 + 32), AssociatedTypeWitness);
  }
  uint64_t v7 = v3 + *(int *)(v2 + 60);
  outlined consume of _ScrollViewConfig.ContentOffset(*(void *)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(void *)(v7 + 24), *(unsigned char *)(v7 + 32));
  __swift_destroy_boxed_opaque_existential_1(v7 + 88);
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _PagingView.body.getter@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  type metadata accessor for _PagingView();

  return closure #1 in _PagingView.body.getter(a1, v5, v6, v7, v8, a2);
}

unint64_t lazy protocol witness table accessor for type PagingLayout and conformance PagingLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type PagingLayout and conformance PagingLayout;
  if (!lazy protocol witness table cache variable for type PagingLayout and conformance PagingLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PagingLayout and conformance PagingLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PagingLayout and conformance PagingLayout;
  if (!lazy protocol witness table cache variable for type PagingLayout and conformance PagingLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PagingLayout and conformance PagingLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PagingViewConfig.Direction and conformance _PagingViewConfig.Direction()
{
  unint64_t result = lazy protocol witness table cache variable for type _PagingViewConfig.Direction and conformance _PagingViewConfig.Direction;
  if (!lazy protocol witness table cache variable for type _PagingViewConfig.Direction and conformance _PagingViewConfig.Direction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PagingViewConfig.Direction and conformance _PagingViewConfig.Direction);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in _PagingView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for _PagingViewConfig(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[41]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _PagingViewConfig(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _PagingViewConfig()
{
  return &type metadata for _PagingViewConfig;
}

unsigned char *storeEnumTagSinglePayload for _PagingViewConfig.Direction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    int *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187CE64ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          int *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _PagingViewConfig.Direction()
{
  return &type metadata for _PagingViewConfig.Direction;
}

uint64_t type metadata completion function for _PagingView()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_getAssociatedTypeWitness();
    type metadata accessor for Binding();
    uint64_t v0 = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for _PagingView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(_DWORD *)(v9 + 80);
  size_t v12 = ((v11 + 16) & ~v11) + *(void *)(v9 + 64);
  uint64_t v13 = (v11 | 7) + v7;
  unsigned int v14 = v11 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v14 <= 7
    && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) == 0
    && ((((v12 + (v13 & ~(v11 | 7)) + 55) & 0xFFFFFFFFFFFFFFF8) + 175) & 0xFFFFFFFFFFFFFFF8) + 16 <= 0x18)
  {
    uint64_t v18 = ~(v11 | 7);
    uint64_t v48 = AssociatedTypeWitness;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    char v19 = (void *)(((unint64_t)a1 + v13) & v18);
    char v20 = (void *)(((unint64_t)a2 + v13) & v18);
    double v21 = (uint64_t *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v10 & 0x80000000) != 0)
    {
      uint64_t v24 = v48;
      int v25 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((unint64_t)v21 + v11 + 8) & ~v11, v10, v48);
      uint64_t v23 = ~v11;
      if (v25)
      {
LABEL_14:
        memcpy(v19, v20, v12);
LABEL_17:
        uint64_t v31 = (_OWORD *)(((unint64_t)v19 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
        char v32 = (long long *)(((unint64_t)v20 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
        long long v33 = *v32;
        long long v34 = v32[1];
        *(_OWORD *)((char *)v31 + 25) = *(long long *)((char *)v32 + 25);
        *uint64_t v31 = v33;
        v31[1] = v34;
        unint64_t v35 = ((unint64_t)v19 + v12 + 55) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v36 = ((unint64_t)v20 + v12 + 55) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v37 = *(void *)v36;
        uint64_t v38 = *(void *)(v36 + 8);
        uint64_t v39 = *(void *)(v36 + 16);
        uint64_t v40 = *(void *)(v36 + 24);
        char v41 = *(unsigned char *)(v36 + 32);
        outlined copy of _ScrollViewConfig.ContentOffset(*(void *)v36, v38, v39, v40, v41);
        *(void *)unint64_t v35 = v37;
        *(void *)(v35 + 8) = v38;
        *(void *)(v35 + 16) = v39;
        *(void *)(v35 + 24) = v40;
        *(unsigned char *)(v35 + 32) = v41;
        long long v42 = *(_OWORD *)(v36 + 40);
        *(_OWORD *)(v35 + 56) = *(_OWORD *)(v36 + 56);
        *(_OWORD *)(v35 + 40) = v42;
        *(void *)(v35 + 72) = *(void *)(v36 + 72);
        *(unsigned char *)(v35 + 80) = *(unsigned char *)(v36 + 80);
        *(unsigned char *)(v35 + 81) = *(unsigned char *)(v36 + 81);
        uint64_t v43 = *(void *)(v36 + 112);
        *(void *)(v35 + 112) = v43;
        *(void *)(v35 + 120) = *(void *)(v36 + 120);
        (**(void (***)(uint64_t, uint64_t))(v43 - 8))(v35 + 88, v36 + 88);
        *(unsigned char *)(v35 + 128) = *(unsigned char *)(v36 + 128);
        *(unsigned char *)(v35 + 129) = *(unsigned char *)(v36 + 129);
        *(unsigned char *)(v35 + 130) = *(unsigned char *)(v36 + 130);
        *(unsigned char *)(v35 + 131) = *(unsigned char *)(v36 + 131);
        long long v44 = *(_OWORD *)(v36 + 136);
        *(_OWORD *)(v35 + 152) = *(_OWORD *)(v36 + 152);
        *(_OWORD *)(v35 + 136) = v44;
        uint64_t v45 = (void *)((v35 + 175) & 0xFFFFFFFFFFFFFFF8);
        char v46 = (void *)((v36 + 175) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v45 = *v46;
        v45[1] = v46[1];
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v22 = *v21;
      if ((unint64_t)*v21 >= 0xFFFFFFFF) {
        LODWORD(v22) = -1;
      }
      uint64_t v23 = ~v11;
      uint64_t v24 = v48;
      if (v22 != -1) {
        goto LABEL_14;
      }
    }
    void *v19 = *v20;
    double v26 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    *double v26 = *v21;
    uint64_t v27 = v11 + 8;
    uint64_t v28 = ((unint64_t)v26 + v11 + 8) & v23;
    unint64_t v29 = ((unint64_t)v21 + v27) & v23;
    uint64_t v30 = *(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
    swift_retain();
    swift_retain();
    v30(v28, v29, v24);
    goto LABEL_17;
  }
  uint64_t v17 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v17 + (((v14 | 7) + 16) & ~(unint64_t)(v14 | 7)));
LABEL_18:
  swift_retain();
  return a1;
}

uint64_t destroy for _PagingView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(uint64_t, void))v3)(a1, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(v3 + 56) + a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v4 + (v7 | 7)) & ~(v7 | 7);
  uint64_t v9 = ~v7;
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = (uint64_t *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
  {
    if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v11 + v7 + 8) & v9))
    {
LABEL_5:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((unint64_t)v11 + v7 + 8) & v9, AssociatedTypeWitness);
    }
  }
  else
  {
    uint64_t v12 = *v11;
    if ((unint64_t)*v11 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    if (v12 == -1) {
      goto LABEL_5;
    }
  }
  unint64_t v13 = (v10 + ((v7 + 16) & v9) + v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of _ScrollViewConfig.ContentOffset(*(void *)v13, *(void *)(v13 + 8), *(void *)(v13 + 16), *(void *)(v13 + 24), *(unsigned char *)(v13 + 32));
  __swift_destroy_boxed_opaque_existential_1(v13 + 88);

  return swift_release();
}

uint64_t initializeWithCopy for _PagingView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + a2) & ~(v9 | 7));
  uint64_t v13 = ~v9;
  uint64_t v14 = (v9 + 16) & ~v9;
  uint64_t v15 = *(void *)(v8 + 64);
  uint64_t v16 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    uint64_t v17 = *v16;
    if ((unint64_t)*v16 >= 0xFFFFFFFF) {
      LODWORD(v17) = -1;
    }
    size_t v18 = v14 + v15;
    if (v17 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    void *v11 = *v12;
    char v19 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v19 = *v16;
    uint64_t v20 = v9 + 8;
    uint64_t v21 = ((unint64_t)v19 + v9 + 8) & v13;
    unint64_t v22 = ((unint64_t)v16 + v20) & v13;
    uint64_t v23 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_retain();
    swift_retain();
    v23(v21, v22, AssociatedTypeWitness);
    goto LABEL_8;
  }
  size_t v18 = v14 + v15;
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)v16 + v9 + 8) & v13)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v11, v12, v18);
LABEL_8:
  uint64_t v24 = (_OWORD *)(((unint64_t)v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v25 = (long long *)(((unint64_t)v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v26 = *v25;
  long long v27 = v25[1];
  *(_OWORD *)((char *)v24 + 25) = *(long long *)((char *)v25 + 25);
  *uint64_t v24 = v26;
  v24[1] = v27;
  unint64_t v28 = ((unint64_t)v11 + v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = ((unint64_t)v12 + v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = *(void *)v29;
  uint64_t v31 = *(void *)(v29 + 8);
  uint64_t v32 = *(void *)(v29 + 16);
  uint64_t v33 = *(void *)(v29 + 24);
  char v34 = *(unsigned char *)(v29 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(void *)v29, v31, v32, v33, v34);
  *(void *)unint64_t v28 = v30;
  *(void *)(v28 + 8) = v31;
  *(void *)(v28 + 16) = v32;
  *(void *)(v28 + 24) = v33;
  *(unsigned char *)(v28 + 32) = v34;
  long long v35 = *(_OWORD *)(v29 + 40);
  *(_OWORD *)(v28 + 56) = *(_OWORD *)(v29 + 56);
  *(_OWORD *)(v28 + 40) = v35;
  *(void *)(v28 + 72) = *(void *)(v29 + 72);
  *(unsigned char *)(v28 + 80) = *(unsigned char *)(v29 + 80);
  *(unsigned char *)(v28 + 81) = *(unsigned char *)(v29 + 81);
  uint64_t v36 = *(void *)(v29 + 112);
  *(void *)(v28 + 112) = v36;
  *(void *)(v28 + 120) = *(void *)(v29 + 120);
  (**(void (***)(uint64_t, uint64_t))(v36 - 8))(v28 + 88, v29 + 88);
  *(unsigned char *)(v28 + 128) = *(unsigned char *)(v29 + 128);
  *(unsigned char *)(v28 + 129) = *(unsigned char *)(v29 + 129);
  *(unsigned char *)(v28 + 130) = *(unsigned char *)(v29 + 130);
  *(unsigned char *)(v28 + 131) = *(unsigned char *)(v29 + 131);
  long long v37 = *(_OWORD *)(v29 + 136);
  *(_OWORD *)(v28 + 152) = *(_OWORD *)(v29 + 152);
  *(_OWORD *)(v28 + 136) = v37;
  uint64_t v38 = (void *)((v28 + 175) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v39 = (void *)((v29 + 175) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v38 = *v39;
  v38[1] = v39[1];
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _PagingView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + a2) & ~(v9 | 7));
  uint64_t v13 = *(unsigned int *)(v8 + 84);
  uint64_t v14 = *(void *)(v8 + 64);
  size_t v15 = ((v9 + 16) & ~v9) + v14;
  uint64_t v16 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v44 = ~v9;
  if ((v13 & 0x80000000) != 0)
  {
    size_t v43 = ((v9 + 16) & ~v9) + v14;
    uint64_t v20 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    int v21 = v20(((unint64_t)v16 + v9 + 8) & ~v9, v13, AssociatedTypeWitness);
    unint64_t v22 = v20;
    int v42 = v21;
    uint64_t v17 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v19 = v22(((unint64_t)v17 + v9 + 8) & ~v9, v13, AssociatedTypeWitness);
    size_t v15 = v43;
    if (!v42)
    {
LABEL_5:
      if (!v19)
      {
        void *v11 = *v12;
        swift_retain();
        swift_release();
        *uint64_t v16 = *v17;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))(((unint64_t)v16 + v9 + 8) & v44, ((unint64_t)v17 + v9 + 8) & v44, AssociatedTypeWitness);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v16 + v9 + 8) & v44, AssociatedTypeWitness);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v17 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v18 = *v17;
    if (*v17 >= 0xFFFFFFFFuLL) {
      LODWORD(v18) = -1;
    }
    int v19 = v18 + 1;
    if (*v16 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v19)
  {
    void *v11 = *v12;
    *uint64_t v16 = *v17;
    uint64_t v23 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_retain();
    swift_retain();
    v23(((unint64_t)v16 + v9 + 8) & v44, ((unint64_t)v17 + v9 + 8) & v44, AssociatedTypeWitness);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v11, v12, v15);
LABEL_12:
  unint64_t v24 = ((unint64_t)v11 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v12 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v24 = *(unsigned char *)v25;
  uint64_t v26 = *(void *)(v25 + 8);
  *(unsigned char *)(v24 + 16) = *(unsigned char *)(v25 + 16);
  *(void *)(v24 + 8) = v26;
  *(void *)(v24 + 24) = *(void *)(v25 + 24);
  *(void *)(v24 + 32) = *(void *)(v25 + 32);
  *(unsigned char *)(v24 + 40) = *(unsigned char *)(v25 + 40);
  unint64_t v27 = ((unint64_t)v11 + v15 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = ((unint64_t)v12 + v15 + 55) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = *(void *)v28;
  uint64_t v30 = *(void *)(v28 + 8);
  uint64_t v31 = *(void *)(v28 + 16);
  uint64_t v32 = *(void *)(v28 + 24);
  char v33 = *(unsigned char *)(v28 + 32);
  outlined copy of _ScrollViewConfig.ContentOffset(*(void *)v28, v30, v31, v32, v33);
  uint64_t v34 = *(void *)v27;
  uint64_t v35 = *(void *)(v27 + 8);
  uint64_t v36 = *(void *)(v27 + 16);
  uint64_t v37 = *(void *)(v27 + 24);
  char v38 = *(unsigned char *)(v27 + 32);
  *(void *)unint64_t v27 = v29;
  *(void *)(v27 + 8) = v30;
  *(void *)(v27 + 16) = v31;
  *(void *)(v27 + 24) = v32;
  *(unsigned char *)(v27 + 32) = v33;
  outlined consume of _ScrollViewConfig.ContentOffset(v34, v35, v36, v37, v38);
  *(void *)(v27 + 40) = *(void *)(v28 + 40);
  *(void *)(v27 + 48) = *(void *)(v28 + 48);
  *(void *)(v27 + 56) = *(void *)(v28 + 56);
  *(void *)(v27 + 64) = *(void *)(v28 + 64);
  *(void *)(v27 + 72) = *(void *)(v28 + 72);
  *(unsigned char *)(v27 + 80) = *(unsigned char *)(v28 + 80);
  *(unsigned char *)(v27 + 81) = *(unsigned char *)(v28 + 81);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v27 + 88), (uint64_t *)(v28 + 88));
  *(unsigned char *)(v27 + 128) = *(unsigned char *)(v28 + 128);
  *(unsigned char *)(v27 + 129) = *(unsigned char *)(v28 + 129);
  *(unsigned char *)(v27 + 130) = *(unsigned char *)(v28 + 130);
  *(unsigned char *)(v27 + 131) = *(unsigned char *)(v28 + 131);
  *(void *)(v27 + 136) = *(void *)(v28 + 136);
  *(void *)(v27 + 144) = *(void *)(v28 + 144);
  *(void *)(v27 + 152) = *(void *)(v28 + 152);
  *(void *)(v27 + 160) = *(void *)(v28 + 160);
  uint64_t v39 = (void *)((v27 + 175) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v40 = (void *)((v28 + 175) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v39 = *v40;
  v39[1] = v40[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for _PagingView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + a2) & ~(v9 | 7));
  uint64_t v13 = ~v9;
  uint64_t v14 = (v9 + 16) & ~v9;
  uint64_t v15 = *(void *)(v8 + 64);
  uint64_t v16 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    uint64_t v17 = *v16;
    if ((unint64_t)*v16 >= 0xFFFFFFFF) {
      LODWORD(v17) = -1;
    }
    size_t v18 = v14 + v15;
    if (v17 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    void *v11 = *v12;
    int v19 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v19 = *v16;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v19 + v9 + 8) & v13, ((unint64_t)v16 + v9 + 8) & v13, AssociatedTypeWitness);
    goto LABEL_8;
  }
  size_t v18 = v14 + v15;
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)v16 + v9 + 8) & v13)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v11, v12, v18);
LABEL_8:
  uint64_t v20 = (_OWORD *)(((unint64_t)v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  int v21 = (long long *)(((unint64_t)v12 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v22 = *v21;
  long long v23 = v21[1];
  *(_OWORD *)((char *)v20 + 25) = *(long long *)((char *)v21 + 25);
  _OWORD *v20 = v22;
  v20[1] = v23;
  unint64_t v24 = ((unint64_t)v11 + v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v12 + v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  long long v26 = *(_OWORD *)(v25 + 96);
  long long v28 = *(_OWORD *)(v25 + 48);
  long long v27 = *(_OWORD *)(v25 + 64);
  *(_OWORD *)(v24 + 80) = *(_OWORD *)(v25 + 80);
  *(_OWORD *)(v24 + 96) = v26;
  *(_OWORD *)(v24 + 48) = v28;
  *(_OWORD *)(v24 + 64) = v27;
  long long v30 = *(_OWORD *)(v25 + 128);
  long long v29 = *(_OWORD *)(v25 + 144);
  long long v31 = *(_OWORD *)(v25 + 112);
  *(void *)(v24 + 160) = *(void *)(v25 + 160);
  *(_OWORD *)(v24 + 128) = v30;
  *(_OWORD *)(v24 + 144) = v29;
  *(_OWORD *)(v24 + 112) = v31;
  long long v32 = *(_OWORD *)v25;
  long long v33 = *(_OWORD *)(v25 + 32);
  *(_OWORD *)(v24 + 16) = *(_OWORD *)(v25 + 16);
  *(_OWORD *)(v24 + 32) = v33;
  *(_OWORD *)unint64_t v24 = v32;
  *(_OWORD *)((v24 + 175) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v25 + 175) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for _PagingView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v49 = a1;
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = v10 + a2;
  uint64_t v13 = (void *)(v12 & ~(v9 | 7));
  uint64_t v14 = *(unsigned int *)(v8 + 84);
  uint64_t v15 = ~v9;
  uint64_t v16 = *(void *)(v8 + 64);
  size_t v17 = ((v9 + 16) & ~v9) + v16;
  size_t v18 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v48 = ~v9;
  if ((v14 & 0x80000000) != 0)
  {
    char v46 = v11;
    size_t v47 = ((v9 + 16) & ~v9) + v16;
    long long v23 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48);
    uint64_t v24 = v12 & ~(v9 | 7);
    uint64_t v25 = AssociatedTypeWitness;
    int v45 = v23(((unint64_t)v18 + v9 + 8) & v15, v14, AssociatedTypeWitness);
    uint64_t v20 = (void *)((v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = v14;
    uint64_t v19 = v25;
    uint64_t v27 = v25;
    uint64_t v13 = (void *)v24;
    uint64_t v11 = v46;
    int v22 = v23(((unint64_t)v20 + v9 + 8) & v15, v26, v27);
    size_t v17 = v47;
    if (!v45)
    {
LABEL_5:
      if (!v22)
      {
        void *v11 = *v13;
        swift_release();
        *size_t v18 = *v20;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))(((unint64_t)v18 + v9 + 8) & v48, ((unint64_t)v20 + v9 + 8) & v48, v19);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))(((unint64_t)v18 + v9 + 8) & v48, v19);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v19 = AssociatedTypeWitness;
    uint64_t v20 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = *v20;
    if (*v20 >= 0xFFFFFFFFuLL) {
      LODWORD(v21) = -1;
    }
    int v22 = v21 + 1;
    if (*v18 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v22)
  {
    void *v11 = *v13;
    *size_t v18 = *v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(((unint64_t)v18 + v9 + 8) & v48, ((unint64_t)v20 + v9 + 8) & v48, v19);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v11, v13, v17);
LABEL_12:
  unint64_t v28 = ((unint64_t)v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = ((unint64_t)v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v28 = *(unsigned char *)v29;
  uint64_t v30 = *(void *)(v29 + 8);
  *(unsigned char *)(v28 + 16) = *(unsigned char *)(v29 + 16);
  *(void *)(v28 + 8) = v30;
  *(void *)(v28 + 24) = *(void *)(v29 + 24);
  *(void *)(v28 + 32) = *(void *)(v29 + 32);
  *(unsigned char *)(v28 + 40) = *(unsigned char *)(v29 + 40);
  unint64_t v31 = ((unint64_t)v11 + v17 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = ((unint64_t)v13 + v17 + 55) & 0xFFFFFFFFFFFFFFF8;
  char v33 = *(unsigned char *)(v32 + 32);
  uint64_t v34 = *(void *)v31;
  uint64_t v35 = *(void *)(v31 + 8);
  uint64_t v36 = *(void *)(v31 + 16);
  uint64_t v37 = *(void *)(v31 + 24);
  char v38 = *(unsigned char *)(v31 + 32);
  long long v39 = *(_OWORD *)(v32 + 16);
  *(_OWORD *)unint64_t v31 = *(_OWORD *)v32;
  *(_OWORD *)(v31 + 16) = v39;
  *(unsigned char *)(v31 + 32) = v33;
  outlined consume of _ScrollViewConfig.ContentOffset(v34, v35, v36, v37, v38);
  *(void *)(v31 + 40) = *(void *)(v32 + 40);
  *(void *)(v31 + 48) = *(void *)(v32 + 48);
  *(void *)(v31 + 56) = *(void *)(v32 + 56);
  *(void *)(v31 + 64) = *(void *)(v32 + 64);
  *(void *)(v31 + 72) = *(void *)(v32 + 72);
  *(unsigned char *)(v31 + 80) = *(unsigned char *)(v32 + 80);
  *(unsigned char *)(v31 + 81) = *(unsigned char *)(v32 + 81);
  __swift_destroy_boxed_opaque_existential_1(v31 + 88);
  long long v40 = *(_OWORD *)(v32 + 88);
  long long v41 = *(_OWORD *)(v32 + 104);
  *(void *)(v31 + 120) = *(void *)(v32 + 120);
  *(_OWORD *)(v31 + 104) = v41;
  *(_OWORD *)(v31 + 88) = v40;
  *(unsigned char *)(v31 + 128) = *(unsigned char *)(v32 + 128);
  *(unsigned char *)(v31 + 129) = *(unsigned char *)(v32 + 129);
  *(unsigned char *)(v31 + 130) = *(unsigned char *)(v32 + 130);
  *(unsigned char *)(v31 + 131) = *(unsigned char *)(v32 + 131);
  *(void *)(v31 + 136) = *(void *)(v32 + 136);
  *(void *)(v31 + 144) = *(void *)(v32 + 144);
  *(void *)(v31 + 152) = *(void *)(v32 + 152);
  *(void *)(v31 + 160) = *(void *)(v32 + 160);
  int v42 = (void *)((v31 + 175) & 0xFFFFFFFFFFFFFFF8);
  size_t v43 = (void *)((v32 + 175) & 0xFFFFFFFFFFFFFFF8);
  *int v42 = *v43;
  v42[1] = v43[1];
  swift_release();
  return v49;
}

uint64_t getEnumTagSinglePayload for _PagingView(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= 0x7FFFFFFF) {
    int v12 = 0x7FFFFFFF;
  }
  else {
    int v12 = *(_DWORD *)(v9 + 84);
  }
  int v13 = v12 - 1;
  if (v12 - 1 <= v7) {
    unsigned int v14 = v7;
  }
  else {
    unsigned int v14 = v12 - 1;
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v17 = v16 | 7;
  uint64_t v18 = ((v16 + 16) & ~v16) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  uint64_t v19 = (v16 | 7) + *(void *)(v6 + 64);
  if (v15 < a2)
  {
    unint64_t v20 = ((((v18 + (v19 & ~v17) + 55) & 0xFFFFFFFFFFFFFFF8) + 175) & 0xFFFFFFFFFFFFFFF8) + 16;
    if ((v20 & 0xFFFFFFF8) != 0) {
      unsigned int v21 = 2;
    }
    else {
      unsigned int v21 = a2 - v15 + 1;
    }
    if (v21 >= 0x10000) {
      unsigned int v22 = 4;
    }
    else {
      unsigned int v22 = 2;
    }
    if (v21 < 0x100) {
      unsigned int v22 = 1;
    }
    if (v21 >= 2) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    switch(v23)
    {
      case 1:
        int v24 = *((unsigned __int8 *)a1 + v20);
        if (!*((unsigned char *)a1 + v20)) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v24 = *(unsigned __int16 *)((char *)a1 + v20);
        if (*(_WORD *)((char *)a1 + v20)) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187CE7C08);
      case 4:
        int v24 = *(_DWORD *)((char *)a1 + v20);
        if (!v24) {
          break;
        }
LABEL_28:
        int v26 = v24 - 1;
        if ((v20 & 0xFFFFFFF8) != 0)
        {
          int v26 = 0;
          int v27 = *a1;
        }
        else
        {
          int v27 = 0;
        }
        return v15 + (v27 | v26) + 1;
      default:
        break;
    }
  }
  if (v7 == v15)
  {
    unint64_t v28 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48);
    return v28(a1, v7, v5);
  }
  else
  {
    unint64_t v29 = ((unint64_t)a1 + v19) & ~v17;
    if (v13 == v15)
    {
      uint64_t v30 = (unint64_t *)((v29 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v11 & 0x80000000) != 0)
      {
        unsigned int v32 = (*(uint64_t (**)(unint64_t))(v10 + 48))(((unint64_t)v30 + v16 + 8) & ~v16);
      }
      else
      {
        unint64_t v31 = *v30;
        if (v31 >= 0xFFFFFFFF) {
          LODWORD(v31) = -1;
        }
        unsigned int v32 = v31 + 1;
      }
      if (v32 >= 2) {
        return v32 - 1;
      }
      else {
        return 0;
      }
    }
    else
    {
      unint64_t v33 = *(void *)(((v29 + v18 + 55) & 0xFFFFFFFFFFFFFFF8) + 112);
      if (v33 >= 0xFFFFFFFF) {
        LODWORD(v33) = -1;
      }
      return (v33 + 1);
    }
  }
}

void storeEnumTagSinglePayload for _PagingView(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v34 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  if (v13 - 1 <= v9) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = v13 - 1;
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = v14;
  }
  size_t v16 = ((v12 + 16) & ~v12) + *(void *)(v10 + 64);
  uint64_t v17 = (v12 | 7) + *(void *)(v8 + 64);
  unint64_t v18 = ((((v16 + (v17 & ~(v12 | 7)) + 55) & 0xFFFFFFFFFFFFFFF8) + 175) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v15 >= a3)
  {
    int v21 = 0;
    int v22 = a2 - v15;
    if (a2 <= v15)
    {
LABEL_23:
      switch(v21)
      {
        case 1:
          *((unsigned char *)a1 + v18) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 2:
          *(_WORD *)((char *)a1 + v18) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 3:
          goto LABEL_71;
        case 4:
          *(_DWORD *)((char *)a1 + v18) = 0;
          goto LABEL_35;
        default:
LABEL_35:
          if (a2)
          {
LABEL_36:
            if (v9 == v15)
            {
              uint64_t v25 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v34 + 56);
              v25(a1, a2, v9, v7);
            }
            else
            {
              int v26 = (unsigned char *)(((unint64_t)a1 + v17) & ~(v12 | 7));
              if (v13 - 1 == v15)
              {
                if ((int)a2 + 1 <= v13)
                {
                  if (a2 != -1)
                  {
                    unint64_t v31 = (void *)((unint64_t)(v26 + 15) & 0xFFFFFFFFFFFFFFF8);
                    if ((v11 & 0x80000000) != 0)
                    {
                      unint64_t v33 = *(void (**)(unint64_t, void))(v10 + 56);
                      v33(((unint64_t)v31 + v12 + 8) & ~v12, (a2 + 1));
                    }
                    else
                    {
                      if (a2 + 1 < 0) {
                        uint64_t v32 = (a2 - 0x7FFFFFFF);
                      }
                      else {
                        uint64_t v32 = a2;
                      }
                      *unint64_t v31 = v32;
                    }
                  }
                }
                else
                {
                  if (v16 <= 3) {
                    int v27 = ~(-1 << (8 * v16));
                  }
                  else {
                    int v27 = -1;
                  }
                  if (v16)
                  {
                    int v28 = v27 & (a2 - v13);
                    if (v16 <= 3) {
                      int v29 = v16;
                    }
                    else {
                      int v29 = 4;
                    }
                    bzero(v26, v16);
                    switch(v29)
                    {
                      case 2:
                        *(_WORD *)int v26 = v28;
                        break;
                      case 3:
                        *(_WORD *)int v26 = v28;
                        v26[2] = BYTE2(v28);
                        break;
                      case 4:
                        *(_DWORD *)int v26 = v28;
                        break;
                      default:
                        *int v26 = v28;
                        break;
                    }
                  }
                }
              }
              else
              {
                unint64_t v30 = (unint64_t)&v26[v16 + 55] & 0xFFFFFFFFFFFFFFF8;
                if ((a2 & 0x80000000) != 0)
                {
                  *(_OWORD *)(v30 + 136) = 0u;
                  *(_OWORD *)(v30 + 152) = 0u;
                  *(_OWORD *)(v30 + 120) = 0u;
                  *(_OWORD *)(v30 + 104) = 0u;
                  *(_OWORD *)(v30 + 88) = 0u;
                  *(_OWORD *)(v30 + 72) = 0u;
                  *(_OWORD *)(v30 + 56) = 0u;
                  *(_OWORD *)(v30 + 40) = 0u;
                  *(_OWORD *)(v30 + 24) = 0u;
                  *(_OWORD *)(v30 + 8) = 0u;
                  *(void *)unint64_t v30 = a2 ^ 0x80000000;
                }
                else
                {
                  *(void *)(v30 + 112) = (a2 - 1);
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((v16 + (v17 & ~(v12 | 7)) + 55) & 0xFFFFFFF8) + 175) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v19 = a3 - v15 + 1;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v19 >= 0x10000) {
      int v20 = 4;
    }
    else {
      int v20 = 2;
    }
    if (v19 < 0x100) {
      int v20 = 1;
    }
    if (v19 >= 2) {
      int v21 = v20;
    }
    else {
      int v21 = 0;
    }
    int v22 = a2 - v15;
    if (a2 <= v15) {
      goto LABEL_23;
    }
  }
  if (((((v16 + (v17 & ~(v12 | 7)) + 55) & 0xFFFFFFF8) + 175) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v23 = v22;
  }
  else {
    int v23 = 1;
  }
  if (((((v16 + (v17 & ~(v12 | 7)) + 55) & 0xFFFFFFF8) + 175) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v24 = ~v15 + a2;
    bzero(a1, ((((v16 + (v17 & ~(v12 | 7)) + 55) & 0xFFFFFFFFFFFFFFF8) + 175) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v24;
  }
  switch(v21)
  {
    case 1:
      *((unsigned char *)a1 + v18) = v23;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v18) = v23;
      break;
    case 3:
LABEL_71:
      __break(1u);
      JUMPOUT(0x187CE8020);
    case 4:
      *(_DWORD *)((char *)a1 + v18) = v23;
      break;
    default:
      return;
  }
}

uint64_t sub_187CE8058()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for PagingLayout(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PagingLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for PagingLayout()
{
  return &unk_1ED411DD8;
}

unint64_t instantiation function for generic protocol witness table for PagingLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PagingLayout and conformance PagingLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for _PagingView.ToPageOffset()
{
  return swift_getGenericMetadata();
}

uint64_t outlined assign with copy of _ScrollViewConfig(uint64_t a1, uint64_t a2)
{
  return a2;
}

void type metadata accessor for State<CGFloat>()
{
  if (!lazy cache variable for type metadata for State<CGFloat>)
  {
    unint64_t v0 = type metadata accessor for State();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for State<CGFloat>);
    }
  }
}

uint64_t type metadata completion function for _PagingView.ToPageOffset()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _PagingView.ToPageOffset(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  BOOL v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *BOOL v4 = *a2;
    BOOL v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (_OWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v11 = (long long *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    long long v13 = *v11;
    long long v12 = v11[1];
    *(_OWORD *)((char *)v10 + 25) = *(long long *)((char *)v11 + 25);
    *uint64_t v10 = v13;
    v10[1] = v12;
    unsigned int v14 = (void *)(((unint64_t)v4 + v6 + 55) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v15 = (void *)(((unint64_t)a2 + v6 + 55) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v14 = *v15;
    *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t initializeWithCopy for _PagingView.ToPageOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  uint64_t v9 = (_OWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (long long *)((v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v11 = *v10;
  long long v12 = v10[1];
  *(_OWORD *)((char *)v9 + 25) = *(long long *)((char *)v10 + 25);
  _OWORD *v9 = v11;
  v9[1] = v12;
  long long v13 = (void *)((v7 + 55) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v14 = (void *)((v8 + 55) & 0xFFFFFFFFFFFFFFF8);
  *long long v13 = *v14;
  *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithCopy for _PagingView.ToPageOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v9 = *(unsigned char *)v10;
  char v11 = *(unsigned char *)(v10 + 16);
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(unsigned char *)(v9 + 16) = v11;
  *(void *)(v9 + 24) = *(void *)(v10 + 24);
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  *(unsigned char *)(v9 + 40) = *(unsigned char *)(v10 + 40);
  long long v12 = (void *)((v7 + 55) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = (void *)((v8 + 55) & 0xFFFFFFFFFFFFFFF8);
  void *v12 = *v13;
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for _PagingView.ToPageOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (_OWORD *)((v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (long long *)((v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v11 = *v10;
  long long v12 = v10[1];
  *(_OWORD *)((char *)v9 + 25) = *(long long *)((char *)v10 + 25);
  _OWORD *v9 = v11;
  v9[1] = v12;
  long long v13 = (void *)((v7 + 55) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v14 = (void *)((v8 + 55) & 0xFFFFFFFFFFFFFFF8);
  *long long v13 = *v14;
  *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for _PagingView.ToPageOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v9 = *(unsigned char *)v10;
  char v11 = *(unsigned char *)(v10 + 16);
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(unsigned char *)(v9 + 16) = v11;
  *(void *)(v9 + 24) = *(void *)(v10 + 24);
  *(void *)(v9 + 32) = *(void *)(v10 + 32);
  *(unsigned char *)(v9 + 40) = *(unsigned char *)(v10 + 40);
  long long v12 = (void *)((v7 + 55) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = (void *)((v8 + 55) & 0xFFFFFFFFFFFFFFF8);
  void *v12 = *v13;
  *(void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _PagingView.ToPageOffset(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187CE8938);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v17 = *(unsigned __int8 *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 2) {
    return v17 - 1;
  }
  else {
    return 0;
  }
}

double storeEnumTagSinglePayload for _PagingView.ToPageOffset(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0xFE)
            {
              unint64_t v20 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0xFE)
              {
                double result = 0.0;
                *(_OWORD *)(v20 + 24) = 0u;
                *(_OWORD *)(v20 + 8) = 0u;
                *(unsigned char *)(v20 + 40) = 0;
                *(void *)unint64_t v20 = a2 - 255;
              }
              else
              {
                *(unsigned char *)unint64_t v20 = a2 + 1;
              }
            }
            else
            {
              unsigned int v19 = *(void (**)(void))(v6 + 56);
              v19();
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 55) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 55) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 55) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 55) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187CE8B50);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in _PagingView<A>.ToPageOffset()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in _PagingView<A>.ToPageOffset()
{
  return swift_getWitnessTable();
}

void AsyncBody.wrappedValue.getter()
{
}

uint64_t static AsyncBody._propertyBehaviors.getter()
{
  return 1;
}

ValueMetadata *type metadata accessor for AsyncBody()
{
  return &type metadata for AsyncBody;
}

SwiftUI::PlainListStyle __swiftcall PlainListStyle.init()()
{
  *unint64_t v0 = 2;
  return result;
}

SwiftUI::PlainListStyle __swiftcall PlainListStyle.init(isOutline:)(Swift::Bool isOutline)
{
  result.isOutline.value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

uint64_t static PlainListStyle._makeView<A>(value:inputs:)()
{
  return static View._makeView(view:inputs:)();
}

void type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>)
  {
    type metadata accessor for StyleContextWriter<PlainListStyleContext>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>);
    }
  }
}

void type metadata accessor for StyleContextWriter<PlainListStyleContext>()
{
  if (!lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>)
  {
    lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext();
    unint64_t v0 = type metadata accessor for StyleContextWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>);
    }
  }
}

uint64_t type metadata accessor for PlainListStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static PlainListStyle._makeViewList<A>(value:inputs:)()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t PlainListStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ListValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t PlainListStyle.Body.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v20 = a4;
  uint64_t v19 = type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v19 - v9;
  int v24 = &type metadata for PlainListStyle;
  uint64_t v25 = a2;
  int v26 = &protocol witness table for PlainListStyle;
  uint64_t v27 = a3;
  uint64_t v11 = type metadata accessor for _ListValue();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  int v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  unsigned int v17 = (char *)&v19 - v16;
  PlainListStyle.Body.base.getter((uint64_t)&v19 - v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, &v17[*(int *)(v11 + 52)], v7);
  PlainListStyle.Body.base.getter((uint64_t)v14);
  LOBYTE(v7) = *v14;
  (*(void (**)(unsigned char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  int v23 = a1;
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>();
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>();
  swift_getWitnessTable();
  return PlainListBody.init(selection:isOutline:content:)((uint64_t)v10, v7, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #1 in PlainListStyle.Body.value.getter, v20);
}

uint64_t closure #1 in PlainListStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = &type metadata for PlainListStyle;
  v8[1] = a2;
  _OWORD v8[2] = &protocol witness table for PlainListStyle;
  unsigned char v8[3] = a3;
  uint64_t v3 = type metadata accessor for _ListValue();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v8 - v5;
  PlainListStyle.Body.base.getter((uint64_t)v8 - v5);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance PlainListStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>();
  type metadata accessor for SelectionManagerBox();
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for PlainListBody();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance PlainListStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PlainListStyle.Body.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

unsigned char *storeEnumTagSinglePayload for PlainListStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    int *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187CE9694);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          int *result = a2 + 2;
        break;
    }
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for PlainListStyleContext(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t base witness table accessor for _AttributeBody in PlainListStyle.Body<A>()
{
  return swift_getWitnessTable();
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance PlainListStyleContext(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext();

  return specialized static ListStyleContext.accepts<A>(_:at:)(a4, a3);
}

uint64_t protocol witness for static StyleContext.acceptsAny<A>(_:) in conformance PlainListStyleContext(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  if (a2) {
    memcpy((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
  }
  return static StyleContext.acceptsAny<A>(_:)() & 1;
}

uint64_t partial apply for closure #1 in PlainListStyle.Body.value.getter()
{
  return closure #1 in PlainListStyle.Body.value.getter(*(unsigned int *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t specialized ModifiedContent<>.accessibilityValue(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized ModifiedContent<>.accessibilityValue(_:)(a1, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _FrameLayout>, _PaddingLayout>, ModifiedContent<ModifiedContent<ModifiedContent<_ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Capsule, Color>, _BlendModeEffect>, _AnimationModifier<PlaybackButton.Phase>>, _AnimationModifier<Bool>>, _FrameLayout>)>>>, ZStack<TupleView<(ModifiedContent<_ShapeView<Capsule, Color>, _FrameLayout>, ModifiedContent<ModifiedContent, a2);
}

{
  return specialized ModifiedContent<>.accessibilityValue(_:)(a1, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _AnimationModifier<Bool>>, _BlendModeEffect>, AppearanceAnimationView<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _ScaleEffect>, _BlendModeEffect>, _OpacityEffect>>?)>, IDView<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect>, _TraitWritingModifier<TransitionTraitKey>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyTransformModifier<[AnyFontModifier]>>, _ScaleEffect>, PlaybackButton.Phase>, _ConditionalContent<TimelineView<ProgressViewSchedule, ZStack<TupleView<(ModifiedContent<ModifiedContent<StrokeShapeView<Circle._Inset, Color, EmptyView>, _RotationEffect>, _ScaleEffect>, ModifiedContent<Mo, a2);
}

void protocol witness for View.body.getter in conformance ProgressViewStyleConfiguration.CurrentValueLabel()
{
}

uint64_t ProgressViewStyleConfiguration.fractionCompleted.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for ProgressViewStyleConfiguration(0) + 20));
}

uint64_t ProgressViewStyleConfiguration.label.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for ProgressViewStyleConfiguration(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 28));
  return result;
}

uint64_t ProgressViewStyleConfiguration.label.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for ProgressViewStyleConfiguration(0);
  *(unsigned char *)(v1 + *(int *)(result + 28)) = v2;
  return result;
}

uint64_t (*ProgressViewStyleConfiguration.label.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t ProgressViewStyleConfiguration.currentValueLabel.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = type metadata accessor for ProgressViewStyleConfiguration(0);
  *a1 = *(unsigned char *)(v1 + *(int *)(result + 32));
  return result;
}

uint64_t ProgressViewStyleConfiguration.currentValueLabel.setter(char *a1)
{
  char v2 = *a1;
  uint64_t result = type metadata accessor for ProgressViewStyleConfiguration(0);
  *(unsigned char *)(v1 + *(int *)(result + 32)) = v2;
  return result;
}

uint64_t (*ProgressViewStyleConfiguration.currentValueLabel.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedProgressViewStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type ResolvedProgressViewStyle and conformance ResolvedProgressViewStyle, (void (*)(uint64_t))type metadata accessor for ResolvedProgressViewStyle);

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedProgressViewStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t View.progressViewStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ProgressViewStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t dispatch thunk of ProgressViewStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

void *initializeBufferWithCopyOfBuffer for ProgressViewStyleConfiguration(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = type metadata accessor for Date();
      uint64_t v9 = *(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      type metadata accessor for ClosedRange<Date>();
      v9((void *)((char *)a1 + *(int *)(v10 + 36)), (void *)((char *)a2 + *(int *)(v10 + 36)), v8);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      *((unsigned char *)a1 + *(int *)(v11 + 48)) = *((unsigned char *)a2 + *(int *)(v11 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    uint64_t v13 = a3[5];
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v13;
    uint64_t v16 = (char *)a2 + v13;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v17 = a3[8];
    *((unsigned char *)a1 + a3[7]) = *((unsigned char *)a2 + a3[7]);
    *((unsigned char *)a1 + v17) = *((unsigned char *)a2 + v17);
  }
  return a1;
}

unsigned char *initializeWithCopy for ProgressViewStyleConfiguration(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  a1[v12] = a2[v12];
  uint64_t v15 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v15] = a2[v15];
  return a1;
}

unsigned char *assignWithCopy for ProgressViewStyleConfiguration(unsigned char *a1, unsigned char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of ProgressViewValue((uint64_t)a1, type metadata accessor for ProgressViewValue);
    uint64_t v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Date();
      uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v11 = a3[5];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = *(void *)v13;
  v12[8] = v13[8];
  *(void *)uint64_t v12 = v14;
  a1[a3[6]] = a2[a3[6]];
  a1[a3[7]] = a2[a3[7]];
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

unsigned char *initializeWithTake for ProgressViewStyleConfiguration(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  a1[v12] = a2[v12];
  uint64_t v15 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v15] = a2[v15];
  return a1;
}

unsigned char *assignWithTake for ProgressViewStyleConfiguration(unsigned char *a1, unsigned char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of ProgressViewValue((uint64_t)a1, type metadata accessor for ProgressViewValue);
    uint64_t v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Date();
      uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v11];
  uint64_t v14 = &a2[v11];
  *(void *)uint64_t v13 = *(void *)v14;
  v13[8] = v14[8];
  a1[v12] = a2[v12];
  uint64_t v15 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  a1[v15] = a2[v15];
  return a1;
}

uint64_t getEnumTagSinglePayload for ProgressViewStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187CEA434);
}

uint64_t sub_187CEA434(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ProgressViewValue(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for ProgressViewStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187CEA518);
}

uint64_t sub_187CEA518(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ProgressViewValue(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  }
  return result;
}

uint64_t sub_187CEA5D4()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance ProgressViewStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

uint64_t sub_187CEA6F0()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

void *initializeBufferWithCopyOfBuffer for ResolvedProgressViewStyle(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for ProgressViewStyleConfiguration(0);
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = (int *)v4;
    uint64_t v7 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = type metadata accessor for Date();
      uint64_t v9 = *(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      type metadata accessor for ClosedRange<Date>();
      v9((void *)((char *)a1 + *(int *)(v10 + 36)), (void *)((char *)a2 + *(int *)(v10 + 36)), v8);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      *((unsigned char *)a1 + *(int *)(v11 + 48)) = *((unsigned char *)a2 + *(int *)(v11 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    uint64_t v13 = v6[5];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    *(void *)uint64_t v14 = *(void *)v15;
    v14[8] = v15[8];
    *((unsigned char *)a1 + v6[6]) = *((unsigned char *)a2 + v6[6]);
    *((unsigned char *)a1 + v6[7]) = *((unsigned char *)a2 + v6[7]);
    *((unsigned char *)a1 + v6[8]) = *((unsigned char *)a2 + v6[8]);
  }
  return a1;
}

unsigned char *initializeWithCopy for ResolvedProgressViewStyle(unsigned char *a1, unsigned char *a2)
{
  uint64_t v4 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v5 - 8) + 16);
    v6(a1, a2, v5);
    type metadata accessor for ClosedRange<Date>();
    v6(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v5);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  uint64_t v9 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v10 = v9[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *(void *)uint64_t v11 = *(void *)v12;
  void v11[8] = v12[8];
  a1[v9[6]] = a2[v9[6]];
  a1[v9[7]] = a2[v9[7]];
  a1[v9[8]] = a2[v9[8]];
  return a1;
}

unsigned char *assignWithCopy for ResolvedProgressViewStyle(unsigned char *a1, unsigned char *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ProgressViewValue((uint64_t)a1, type metadata accessor for ProgressViewValue);
    uint64_t v4 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for Date();
      uint64_t v6 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v5 - 8) + 16);
      v6(a1, a2, v5);
      type metadata accessor for ClosedRange<Date>();
      v6(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v5);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  uint64_t v9 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v10 = v9[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  char v13 = v12[8];
  *(void *)uint64_t v11 = *(void *)v12;
  void v11[8] = v13;
  a1[v9[6]] = a2[v9[6]];
  a1[v9[7]] = a2[v9[7]];
  a1[v9[8]] = a2[v9[8]];
  return a1;
}

unsigned char *initializeWithTake for ResolvedProgressViewStyle(unsigned char *a1, unsigned char *a2)
{
  uint64_t v4 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = type metadata accessor for Date();
    uint64_t v6 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v5 - 8) + 32);
    v6(a1, a2, v5);
    type metadata accessor for ClosedRange<Date>();
    v6(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v5);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
  }
  uint64_t v9 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v10 = v9[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *(void *)uint64_t v11 = *(void *)v12;
  void v11[8] = v12[8];
  a1[v9[6]] = a2[v9[6]];
  a1[v9[7]] = a2[v9[7]];
  a1[v9[8]] = a2[v9[8]];
  return a1;
}

unsigned char *assignWithTake for ResolvedProgressViewStyle(unsigned char *a1, unsigned char *a2)
{
  if (a1 != a2)
  {
    outlined destroy of ProgressViewValue((uint64_t)a1, type metadata accessor for ProgressViewValue);
    uint64_t v4 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v5 = type metadata accessor for Date();
      uint64_t v6 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v5 - 8) + 32);
      v6(a1, a2, v5);
      type metadata accessor for ClosedRange<Date>();
      v6(&a1[*(int *)(v7 + 36)], &a2[*(int *)(v7 + 36)], v5);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v8 + 48)] = a2[*(int *)(v8 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v4 - 8) + 64));
    }
  }
  uint64_t v9 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v10 = v9[5];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *(void *)uint64_t v11 = *(void *)v12;
  void v11[8] = v12[8];
  a1[v9[6]] = a2[v9[6]];
  a1[v9[7]] = a2[v9[7]];
  a1[v9[8]] = a2[v9[8]];
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedProgressViewStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187CEAE98);
}

uint64_t sub_187CEAE98(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvedProgressViewStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187CEAF18);
}

uint64_t sub_187CEAF18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t sub_187CEAF88()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Image, _EnvironmentKeyWritingModifier<Color?>>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ProgressView<ProgressViewStyleConfiguration.Label, ProgressViewStyleConfiguration.CurrentValueLabel>, IgnoreViewRespondersModifier> and conformance <> ModifiedContent<A, B>);
}

void View.windowLayoutValue<A>(key:value:)()
{
}

uint64_t sub_187CEAFEC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSd_s5NeverOytTg5207_s7SwiftUI0A27UIAccessibilityTextResolverV36resolveAccessibilitySpeechAttributes4into10speechAttr11environment014includeDefaultI0ySDySo21NSAttributedStringKeyaypGz_AA0ghI0VAA17EnvironmentValuesVSbtFySdXEfU2_SDySo0tU3KeyaypGTf1cn_n(uint64_t a1, char a2)
{
  uint64_t v2 = a2 & 1;
  if ((a2 & 1) == 0)
  {
    uint64_t v4 = (void *)static NSAttributedStringKey.coreAXSpeechPitch.getter();
    double v5 = 2.0;
    if (*(double *)&a1 <= 1.0) {
      double v5 = *(double *)&a1 + 1.0;
    }
    if (*(double *)&a1 < -1.0) {
      double v5 = 0.0;
    }
    v7[3] = MEMORY[0x1E4FBB3D0];
    *(double *)uint64_t v7 = v5;
    specialized Dictionary.subscript.setter((uint64_t)v7, v4);
  }
  return v2;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI33AccessibilityAnnouncementPriorityO_s5NeverOytTB503_s7c43UI0A27UIAccessibilityTextResolverV36resolvee141SpeechAttributes4into10speechAttr11environment014includeDefaultI0ySDySo21NSAttributedStringKeyaypGz_AA0ghI0VAA17EnvironmentValuesVSbtFyAA0G20fG6OXEfU_SDySo0wX3KeyaypGTf1cn_n(unsigned __int8 a1)
{
  int v2 = a1;
  if (a1 == 3) {
    return v2 == 3;
  }
  unsigned __int8 v4 = a1;
  uint64_t result = closure #1 in SwiftUIAccessibilityTextResolver.resolveAccessibilitySpeechAttributes(into:speechAttr:environment:includeDefaultAttributes:)(&v4);
  if (!v1) {
    return v2 == 3;
  }
  return result;
}

uint64_t ViewRendererHost.accessibilityNodes.getter(uint64_t a1, uint64_t a2)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t *@<X8>), void, uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v7;

  uint64_t v3 = *(void *)(a2 + 8);
  unsigned __int8 v4 = *(void (**)(uint64_t *__return_ptr, uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t *@<X8>), void, uint64_t, uint64_t, uint64_t))(v3 + 24);
  type metadata accessor for [AccessibilityNode]();
  v4(&v7, closure #1 in ViewRendererHost.accessibilityNodes.getter, 0, v5, a1, v3);
  return v7;
}

uint64_t AccessibilityViewGraph.readAndUpdate(graph:)(uint64_t a1)
{
  void (*v10)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  double v13;
  void v15[2];

  uint64_t v2 = v1;
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (!WeakValue) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v5 = *WeakValue;
  uint64_t v6 = WeakValue[1];
  *(unsigned char *)(v2 + 24) = 1;
  if (*(void *)(v2 + 16) == v6
    || (*(void *)(v2 + 16) = v6, *(unsigned char *)(v2 + 24) = 0, swift_beginAccess(), !MEMORY[0x18C119DF0](a1 + 200)))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 208);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v9 = type metadata accessor for EventBindingSource(0, &lazy cache variable for type metadata for AccessibilityHost);
    uint64_t v10 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_bridgeObjectRetain();
    v10(v15, v9, v9, ObjectType, v7);
    swift_unknownObjectRelease();
    if (v15[0])
    {
      uint64_t v11 = v15[1];
      uint64_t v12 = swift_getObjectType();
      char v13 = MEMORY[0x1F4188790](v12);
      (*(void (**)(uint64_t (*)(), double))(v11 + 8))(partial apply for closure #1 in AccessibilityViewGraph.postUpdate(graph:list:), v13);
      swift_unknownObjectRelease();
    }
  }
  return v5;
}

void *closure #1 in ViewGraph.setPendingAccessibilityFocusStore(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  uint64_t result = (void *)ViewGraph.subscript.getter();
  if (result)
  {
    uint64_t v9 = result[4];
    uint64_t v10 = result[5];
    result[4] = a2;
    result[5] = a3;
    result[6] = a4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined consume of FocusStore?(v9, v10);
    GraphHost.setNeedsUpdate(mayDeferUpdate:)(1);
    swift_beginAccess();
    uint64_t result = (void *)MEMORY[0x18C119DF0](a1 + 200);
    if (result)
    {
      uint64_t v11 = *(void *)(a1 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, double))(v11 + 32))(ObjectType, v11, 0.0);
      return (void *)swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #1 in ViewGraph.setAccessibilityFocusNeedsUpdate()(uint64_t a1)
{
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  uint64_t result = ViewGraph.subscript.getter();
  if (result)
  {
    *(unsigned char *)(result + 56) = 1;
    GraphHost.setNeedsUpdate(mayDeferUpdate:)(1);
    swift_beginAccess();
    uint64_t result = MEMORY[0x18C119DF0](a1 + 200);
    if (result)
    {
      uint64_t v3 = *(void *)(a1 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, double))(v3 + 32))(ObjectType, v3, 0.0);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t closure #1 in ViewRendererHost.accessibilityNodes.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  GraphHost.instantiateIfNeeded()();
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  if (ViewGraph.subscript.getter()) {
    uint64_t result = AccessibilityViewGraph.readAndUpdate(graph:)(a1);
  }
  else {
    uint64_t result = MEMORY[0x1E4FBC860];
  }
  *a2 = result;
  return result;
}

void type metadata accessor for [AccessibilityNode]()
{
  if (!lazy cache variable for type metadata for [AccessibilityNode])
  {
    type metadata accessor for AccessibilityNode();
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNode]);
    }
  }
}

ValueMetadata *type metadata accessor for SwiftUIAccessibilityTextResolver()
{
  return &type metadata for SwiftUIAccessibilityTextResolver;
}

uint64_t assignWithCopy for AccessibilityViewGraph(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  unsigned __int8 v4 = (_OWORD *)(a1 + 32);
  uint64_t v5 = (_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v6)
    {
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of AccessibilityFocusStore(a1 + 32);
      uint64_t v7 = *(void *)(a2 + 48);
      *unsigned __int8 v4 = *v5;
      *(void *)(a1 + 48) = v7;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *v5;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *unsigned __int8 v4 = v8;
  }
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t outlined destroy of AccessibilityFocusStore(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for AccessibilityViewGraph(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  if (!*(void *)(a1 + 40)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 40);
  if (!v4)
  {
    outlined destroy of AccessibilityFocusStore(a1 + 32);
LABEL_5:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    goto LABEL_6;
  }
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
LABEL_6:
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityViewGraph(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 57)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityViewGraph(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityViewGraph()
{
  return &type metadata for AccessibilityViewGraph;
}

uint64_t closure #1 in SwiftUIAccessibilityTextResolver.resolveAccessibilitySpeechAttributes(into:speechAttr:environment:includeDefaultAttributes:)(unsigned __int8 *a1)
{
  int v1 = *a1;
  uint64_t v2 = (void *)static NSAttributedStringKey.coreAXSpeechAnnouncementPriority.getter();
  unint64_t v3 = 0x80000001883378A0;
  unint64_t v4 = 0xD00000000000001ELL;
  unint64_t v5 = 0x8000000188337880;
  if (v1 != 1)
  {
    unint64_t v4 = 0xD00000000000001BLL;
    unint64_t v5 = 0x8000000188337860;
  }
  if (v1) {
    unint64_t v3 = v5;
  }
  else {
    unint64_t v4 = 0xD00000000000001ALL;
  }
  v7[3] = MEMORY[0x1E4FBB1A0];
  v7[0] = v4;
  v7[1] = v3;
  return specialized Dictionary.subscript.setter((uint64_t)v7, v2);
}

uint64_t partial apply for closure #1 in AccessibilityViewGraph.postUpdate(graph:list:)()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 24) = 1;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance SwiftUIPrivacyReductionAccessibilityProvider.Modifier@<X0>(void *a1@<X8>)
{
  return SwiftUIPrivacyReductionAccessibilityProvider.Modifier.body(content:)(*v1, a1);
}

unint64_t protocol witness for static LayoutAccessibilityProvider.makeAccessibility(inputs:outputs:) in conformance SwiftUILayoutAccessibilityProvider()
{
  unint64_t result = makeAccessibilityLayoutScrollableTransform(isLazy:role:placedSubviews:inputs:outputs:)();
  if ((result & 0x100000000) == 0) {
    return _ViewOutputs.subscript.setter();
  }
  return result;
}

uint64_t partial apply for closure #1 in AccessibilityFocus.filtered(for:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in AccessibilityFocus.filtered(for:)(a1, a2);
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, unsigned char *))
{
  uint64_t v20 = (unint64_t *)result;
  int64_t v6 = 0;
  uint64_t v7 = a3 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & *(void *)(a3 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    int64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 >= v11) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
    }
    unint64_t v16 = *(void *)(v7 + 8 * v15);
    ++v6;
    if (!v16)
    {
      int64_t v6 = v15 + 1;
      if (v15 + 1 >= v11) {
        return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
      }
      unint64_t v16 = *(void *)(v7 + 8 * v6);
      if (!v16)
      {
        int64_t v6 = v15 + 2;
        if (v15 + 2 >= v11) {
          return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
        }
        unint64_t v16 = *(void *)(v7 + 8 * v6);
        if (!v16) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v13 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_5:
    uint64_t v14 = *(unsigned __int8 *)(*(void *)(a3 + 48) + v13);
    outlined init with copy of AccessibilityFocus.Target(*(void *)(a3 + 56) + 8 * v13, (uint64_t)v22);
    LOBYTE(v14) = a4(v14, v22);
    unint64_t result = outlined destroy of AccessibilityFocus.Target((uint64_t)v22);
    if (v14)
    {
      *(unint64_t *)((char *)v20 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      if (__OFADD__(v21++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
      }
    }
  }
  int64_t v17 = v15 + 3;
  if (v17 >= v11) {
    return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
  }
  unint64_t v16 = *(void *)(v7 + 8 * v17);
  if (v16)
  {
    int64_t v6 = v17;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v6 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v6 >= v11) {
      return specialized _NativeDictionary.extractDictionary(using:count:)(v20, a2, v21, a3);
    }
    unint64_t v16 = *(void *)(v7 + 8 * v6);
    ++v17;
    if (v16) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, unsigned char *), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  v13[1] = *MEMORY[0x1E4F143B8];
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    bzero((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    uint64_t v10 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    int64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a3 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11, v8, v6, a2);
    MEMORY[0x18C119C60](v11, -1, -1);
  }
  return a3;
}

uint64_t specialized SwiftUIAccessibilityTextResolver.resolveTextStyleAttributes(_:textStyle:environment:)(uint64_t result, void *a2, uint64_t *a3)
{
  uint64_t v3 = a2[36];
  if (v3 != 1)
  {
    uint64_t v4 = *a3;
    uint64_t v5 = a3[1];
    uint64_t v6 = a2[32];
    uint64_t v7 = a2[33];
    uint64_t v8 = a2[34];
    uint64_t v9 = a2[35];
    outlined copy of Text?(v7, v8, v9, v3);
    if (v6 != 8)
    {
      uint64_t v10 = (void *)static NSAttributedStringKey.coreAXTextualContext.getter();
      LOBYTE(v19) = v6;
      unint64_t v11 = AccessibilityTextContentType.platformValue.getter();
      if (v11)
      {
        unint64_t v12 = v11;
        type metadata accessor for UIAccessibilityTextualContext(0);
        *((void *)&v20 + 1) = v13;
        *(void *)&long long v19 = v12;
      }
      else
      {
        long long v19 = 0u;
        long long v20 = 0u;
      }
      specialized Dictionary.subscript.setter((uint64_t)&v19, v10);
    }
    if ((v6 & 0xFF00) != 0x700)
    {
      uint64_t v14 = (void *)static NSAttributedStringKey.coreAXTextHeadingLevel.getter();
      *((void *)&v20 + 1) = MEMORY[0x1E4FBB808];
      *(void *)&long long v19 = BYTE1(v6);
      specialized Dictionary.subscript.setter((uint64_t)&v19, v14);
    }
    if (v3)
    {
      outlined copy of Text?(v7, v8, v9, v3);
      int64_t v15 = (void *)static NSAttributedStringKey.coreAXLabel.getter();
      *(void *)&long long v19 = v4;
      *((void *)&v19 + 1) = v5;
      uint64_t v16 = Text.resolveString(in:with:idiom:)();
      *((void *)&v20 + 1) = MEMORY[0x1E4FBB1A0];
      *(void *)&long long v19 = v16;
      *((void *)&v19 + 1) = v17;
      specialized Dictionary.subscript.setter((uint64_t)&v19, v15);
      outlined consume of Text.Storage(v7, v8, v9 & 1);
      swift_bridgeObjectRelease();
    }
    if ((v6 & 0xFF0000) == 0x20000)
    {
      return outlined consume of AccessibilityTextAttributes?(v6, v7, v8, v9, v3);
    }
    else
    {
      unint64_t v18 = (void *)static NSAttributedStringKey.coreAXDurationTimeMMSS.getter();
      *((void *)&v20 + 1) = MEMORY[0x1E4FBB390];
      LOBYTE(v19) = BYTE2(v6) & 1;
      specialized Dictionary.subscript.setter((uint64_t)&v19, v18);
      return outlined consume of AccessibilityTextAttributes?(v6, v7, v8, v9, v3);
    }
  }
  return result;
}

uint64_t specialized SwiftUIAccessibilityTextResolver.resolveAccessibilitySpeechAttributes(into:speechAttr:environment:includeDefaultAttributes:)(uint64_t *a1, unsigned __int8 *a2, uint64_t *a3, int a4)
{
  int v47 = a4;
  uint64_t v46 = type metadata accessor for Locale();
  uint64_t v43 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  int v42 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v42 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v42 - v12;
  int v14 = *a2;
  int v15 = a2[1];
  uint64_t v16 = *((void *)a2 + 1);
  char v17 = a2[16];
  uint64_t v18 = *a3;
  uint64_t v44 = a3[1];
  uint64_t v45 = v18;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI33AccessibilityAnnouncementPriorityO_s5NeverOytTB503_s7c43UI0A27UIAccessibilityTextResolverV36resolvee141SpeechAttributes4into10speechAttr11environment014includeDefaultI0ySDySo21NSAttributedStringKeyaypGz_AA0ghI0VAA17EnvironmentValuesVSbtFyAA0G20fG6OXEfU_SDySo0wX3KeyaypGTf1cn_n(a2[17]);
  uint64_t v19 = MEMORY[0x1E4FBB390];
  if (v14 != 2)
  {
    long long v20 = (void *)static NSAttributedStringKey.coreAXSpeechPunctuation.getter();
    *((void *)&v51 + 1) = v19;
    LOBYTE(v50) = v14 & 1;
    specialized Dictionary.subscript.setter((uint64_t)&v50, v20);
  }
  if (v15 != 2)
  {
    uint64_t v21 = (void *)static NSAttributedStringKey.coreAXSpeechSpellOut.getter();
    *((void *)&v51 + 1) = v19;
    LOBYTE(v50) = v15 & 1;
    specialized Dictionary.subscript.setter((uint64_t)&v50, v21);
  }
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lFSd_s5NeverOytTg5207_s7SwiftUI0A27UIAccessibilityTextResolverV36resolveAccessibilitySpeechAttributes4into10speechAttr11environment014includeDefaultI0ySDySo21NSAttributedStringKeyaypGz_AA0ghI0VAA17EnvironmentValuesVSbtFySdXEfU2_SDySo0tU3KeyaypGTf1cn_n(v16, v17);
  uint64_t v22 = *a1;
  if (*(void *)(*a1 + 16))
  {
    id v23 = (id)*MEMORY[0x1E4F284F8];
    unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v23);
    if (v25)
    {
      outlined init with copy of Any(*(void *)(v22 + 56) + 32 * v24, (uint64_t)&v48);
    }
    else
    {
      long long v48 = 0u;
      long long v49 = 0u;
    }

    if (*((void *)&v49 + 1))
    {
      outlined init with take of Any(&v48, &v50);
      int v26 = (void *)static NSAttributedStringKey.coreAXSpeechLanguage.getter();
      outlined init with copy of Any((uint64_t)&v50, (uint64_t)&v48);
      specialized Dictionary.subscript.setter((uint64_t)&v48, v26);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v50);
    }
  }
  else
  {
    long long v48 = 0u;
    long long v49 = 0u;
  }
  outlined destroy of Any?((uint64_t)&v48);
  uint64_t v28 = static NSAttributedStringKey.coreAXSpeechLanguage.getter();
  int v29 = (void *)v28;
  uint64_t v30 = *a1;
  if (*(void *)(*a1 + 16) && (unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v28), (v32 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v30 + 56) + 32 * v31, (uint64_t)&v50);
  }
  else
  {
    long long v50 = 0u;
    long long v51 = 0u;
  }

  uint64_t v33 = *((void *)&v51 + 1);
  uint64_t result = outlined destroy of Any?((uint64_t)&v50);
  if (!v33 && (v47 & 1) != 0)
  {
    *(void *)&long long v50 = v45;
    *((void *)&v50 + 1) = v44;
    EnvironmentValues.locale.getter();
    static Locale.current.getter();
    lazy protocol witness table accessor for type _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x1E4F27A78]);
    uint64_t v34 = v46;
    char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v36 = *(void (**)(char *, uint64_t))(v43 + 8);
    v36(v10, v34);
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v36)(v13, v34);
    if ((v35 & 1) == 0)
    {
      *(void *)&long long v50 = v45;
      *((void *)&v50 + 1) = v44;
      uint64_t v37 = v42;
      EnvironmentValues.locale.getter();
      uint64_t v38 = Locale.bcp47LanguageCode.getter();
      uint64_t v40 = v39;
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v36)(v37, v46);
      if (v40)
      {
        long long v41 = (void *)static NSAttributedStringKey.coreAXSpeechLanguage.getter();
        *((void *)&v51 + 1) = MEMORY[0x1E4FBB1A0];
        *(void *)&long long v50 = v38;
        *((void *)&v50 + 1) = v40;
        return specialized Dictionary.subscript.setter((uint64_t)&v50, v41);
      }
    }
  }
  return result;
}

uint64_t outlined consume of AccessibilityTextAttributes?(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (a5 != 1) {
    return outlined consume of Text?(a2, a3, a4, a5);
  }
  return result;
}

ValueMetadata *type metadata accessor for SwiftUIOpacityAccessibilityProvider()
{
  return &type metadata for SwiftUIOpacityAccessibilityProvider;
}

ValueMetadata *type metadata accessor for SwiftUIGestureAccessibilityProvider()
{
  return &type metadata for SwiftUIGestureAccessibilityProvider;
}

ValueMetadata *type metadata accessor for SwiftUILayoutAccessibilityProvider()
{
  return &type metadata for SwiftUILayoutAccessibilityProvider;
}

ValueMetadata *type metadata accessor for SwiftUIPrivacyReductionAccessibilityProvider()
{
  return &type metadata for SwiftUIPrivacyReductionAccessibilityProvider;
}

ValueMetadata *type metadata accessor for SwiftUIImageAccessibilityProvider()
{
  return &type metadata for SwiftUIImageAccessibilityProvider;
}

ValueMetadata *type metadata accessor for SwiftUITextAccessibilityProvider()
{
  return &type metadata for SwiftUITextAccessibilityProvider;
}

unint64_t lazy protocol witness table accessor for type SwiftUIPrivacyReductionAccessibilityProvider.Modifier and conformance SwiftUIPrivacyReductionAccessibilityProvider.Modifier()
{
  unint64_t result = lazy protocol witness table cache variable for type SwiftUIPrivacyReductionAccessibilityProvider.Modifier and conformance SwiftUIPrivacyReductionAccessibilityProvider.Modifier;
  if (!lazy protocol witness table cache variable for type SwiftUIPrivacyReductionAccessibilityProvider.Modifier and conformance SwiftUIPrivacyReductionAccessibilityProvider.Modifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIPrivacyReductionAccessibilityProvider.Modifier and conformance SwiftUIPrivacyReductionAccessibilityProvider.Modifier);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SwiftUIPrivacyReductionAccessibilityProvider.Modifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187CEC420()
{
  if (*(void *)(v0 + 128) != 1) {
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

unsigned char *storeEnumTagSinglePayload for SwiftUIPrivacyReductionAccessibilityProvider.Modifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187CEC52CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SwiftUIPrivacyReductionAccessibilityProvider.Modifier()
{
  return &type metadata for SwiftUIPrivacyReductionAccessibilityProvider.Modifier;
}

uint64_t sub_187CEC568()
{
  return lazy protocol witness table accessor for type ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier>, MEMORY[0x1E4F41550]);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier>();
    lazy protocol witness table accessor for type _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>, AccessibilityAttachmentModifier>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>)
  {
    lazy protocol witness table accessor for type SwiftUIPrivacyReductionAccessibilityProvider.Modifier and conformance SwiftUIPrivacyReductionAccessibilityProvider.Modifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<SwiftUIPrivacyReductionAccessibilityProvider.Modifier>);
    }
  }
}

uint64_t SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, unsigned __int8 *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  int v66 = a8;
  uint64_t v64 = a6;
  uint64_t v65 = a7;
  uint64_t v73 = a5;
  uint64_t v70 = a4;
  uint64_t v54 = a3;
  uint64_t v69 = a1;
  uint64_t v63 = a9;
  uint64_t v61 = a18;
  uint64_t v62 = a21;
  uint64_t v71 = a2;
  uint64_t v72 = a16;
  uint64_t v59 = a22;
  uint64_t v60 = a15;
  swift_getTupleTypeMetadata2();
  long long v50 = (uint64_t *)type metadata accessor for Binding();
  uint64_t v22 = *(v50 - 1);
  MEMORY[0x1F4188790](v50);
  unint64_t v24 = (char *)&v46 - v23;
  type metadata accessor for Binding<AttributedString>();
  MEMORY[0x1F4188790](v25 - 8);
  uint64_t v67 = (uint64_t)&v46 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v68 = (uint64_t)&v46 - v28;
  int v56 = *a10;
  if (a14)
  {
    unsigned int v55 = a13 & 1;
    uint64_t v58 = a11;
    uint64_t v51 = a12;
    uint64_t v57 = a14;
  }
  else
  {
    uint64_t v58 = static Text.System.search.getter();
    uint64_t v51 = v29;
    uint64_t v57 = v30;
    unsigned int v55 = v31 & 1;
  }
  uint64_t v48 = a13;
  uint64_t v49 = a14;
  uint64_t v52 = a12;
  uint64_t v74 = v69;
  uint64_t v75 = v71;
  uint64_t v76 = v54;
  uint64_t v77 = v70;
  uint64_t v53 = a11;
  outlined copy of Text?(a11, a12, a13, a14);
  uint64_t v54 = type metadata accessor for Binding();
  Binding.zip<A>(with:)();
  uint64_t v32 = v59;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a17, a19, a20, v59);
  uint64_t v74 = a17;
  uint64_t v75 = a19;
  uint64_t v76 = a20;
  uint64_t v77 = v32;
  type metadata accessor for StringTokensToAttributedStringProjection();
  swift_getWitnessTable();
  uint64_t v33 = v68;
  uint64_t v34 = v50;
  Binding.projecting<A>(_:)();
  (*(void (**)(char *, uint64_t *))(v22 + 8))(v24, v34);
  uint64_t v35 = v33;
  uint64_t v36 = outlined init with copy of Binding<AttributedString>(v33, v67);
  long long v50 = &v46;
  LOBYTE(v33) = v55;
  uint64_t v47 = v55;
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = v61;
  uint64_t v37 = v62;
  *(&v46 - 14) = a17;
  *(&v46 - 13) = v38;
  *(&v46 - 12) = a19;
  *(&v46 - 11) = a20;
  *(&v46 - 10) = v37;
  *(&v46 - 9) = v32;
  uint64_t v39 = v58;
  *(&v46 - 8) = v35;
  *(&v46 - 7) = v39;
  uint64_t v40 = v51;
  uint64_t v41 = v57;
  outlined copy of Text.Storage(v39, v51, v33);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_bridgeObjectRetain();
  uint64_t v74 = MEMORY[0x1E4F417F8];
  uint64_t v75 = AssociatedTypeWitness;
  uint64_t v76 = v38;
  uint64_t v77 = MEMORY[0x1E4F417F0];
  uint64_t v78 = v32;
  uint64_t v79 = v37;
  uint64_t v43 = type metadata accessor for TokenField();
  uint64_t WitnessTable = swift_getWitnessTable();
  SearchModifier.init(text:isPresented:prompt:placement:control:)(v67, v64, v65, v66, v39, v40, v47, v41, v63, v56, (uint64_t (*)(uint64_t))partial apply for closure #1 in SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:), (uint64_t)(&v46 - 16), v43, WitnessTable);
  outlined consume of Text.Storage(v39, v40, v33);
  swift_bridgeObjectRelease();
  outlined consume of Text?(v53, v52, v48, v49);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(v54 - 8) + 8))(v73);
  swift_release();
  return outlined destroy of Binding<AttributedString>?(v68, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
}

uint64_t closure #1 in SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v35 = a7;
  uint64_t v36 = a3;
  uint64_t v37 = a5;
  uint64_t v38 = a6;
  uint64_t v39 = a8;
  v33[0] = a12;
  v33[1] = a13;
  v33[2] = a9;
  uint64_t v34 = a1;
  type metadata accessor for Binding<AttributedString>();
  MEMORY[0x1F4188790](v15 - 8);
  char v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v40 = MEMORY[0x1E4F417F8];
  uint64_t v41 = AssociatedTypeWitness;
  uint64_t v42 = a9;
  uint64_t v43 = MEMORY[0x1E4F417F0];
  uint64_t v44 = a13;
  uint64_t v45 = a12;
  uint64_t v19 = type metadata accessor for TokenField();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)v33 - v24;
  outlined init with copy of Binding<AttributedString>(v34, (uint64_t)v17);
  uint64_t v34 = a4 & 1;
  uint64_t v26 = v35;
  swift_retain();
  uint64_t v27 = a2;
  uint64_t v28 = a2;
  uint64_t v29 = v36;
  outlined copy of Text.Storage(v28, v36, a4 & 1);
  uint64_t v30 = v37;
  swift_bridgeObjectRetain();
  TokenField.init(valueType:text:prompt:token:label:)(AssociatedTypeWitness, (uint64_t)v17, v27, v29, v34, v30, v38, v26, (uint64_t)v22, (void (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, MEMORY[0x1E4F417F8]);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v22);
  char v31 = *(void (**)(char *, uint64_t))(v20 + 8);
  v31(v22, v19);
  static ViewBuilder.buildExpression<A>(_:)(v25);
  return ((uint64_t (*)(char *, uint64_t))v31)(v25, v19);
}

uint64_t SuggestedTokensView.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v55 = *(a1 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v53 = v4;
  uint64_t v5 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(v6 + 16);
  MEMORY[0x1F4188790](v6);
  uint64_t v57 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(v9 + 56);
  uint64_t v51 = *(void *)(v9 + 40);
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = a1[6];
  uint64_t v48 = a1[3];
  uint64_t v49 = v12;
  uint64_t v13 = type metadata accessor for SearchCompletion();
  uint64_t v14 = a1[4];
  uint64_t v54 = v10;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v65 = v7;
  uint64_t v66 = AssociatedTypeWitness;
  uint64_t v52 = AssociatedTypeWitness;
  uint64_t v60 = v13;
  uint64_t v67 = v13;
  uint64_t v68 = v14;
  uint64_t v16 = v14;
  uint64_t v69 = AssociatedConformanceWitness;
  uint64_t v17 = type metadata accessor for ForEach();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  long long v50 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v45 - v21;
  uint64_t v56 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  uint64_t v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v58 = (char *)&v45 - v27;
  if (SuggestedTokensView.shouldRenderTokens.getter((uint64_t)a1))
  {
    uint64_t v28 = type metadata accessor for Binding();
    MEMORY[0x18C113DA0](v28);
    uint64_t v47 = v22;
    uint64_t v29 = v55;
    (*(void (**)(char *, uint64_t, void *))(v55 + 16))(v5, v2, a1);
    uint64_t v30 = *(unsigned __int8 *)(v29 + 80);
    uint64_t v46 = v18;
    uint64_t v31 = (v30 + 64) & ~v30;
    uint64_t v32 = (char *)swift_allocObject();
    uint64_t v33 = v48;
    *((void *)v32 + 2) = v7;
    *((void *)v32 + 3) = v33;
    uint64_t v34 = v51;
    *((void *)v32 + 4) = v16;
    *((void *)v32 + 5) = v34;
    uint64_t v53 = v7;
    uint64_t v35 = v54;
    *((void *)v32 + 6) = v49;
    *((void *)v32 + 7) = v35;
    (*(void (**)(char *, char *, void *))(v29 + 32))(&v32[v31], v5, a1);
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v37 = v50;
    ForEach<>.init(_:content:)();
    uint64_t v61 = WitnessTable;
    swift_getWitnessTable();
    uint64_t v38 = v47;
    static ViewBuilder.buildExpression<A>(_:)(v37);
    uint64_t v39 = v46;
    uint64_t v40 = *(void (**)(char *, uint64_t))(v46 + 8);
    v40(v37, v17);
    static ViewBuilder.buildExpression<A>(_:)(v38);
    v40(v38, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v25, 0, 1, v17);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v25, 1, 1, v17);
    uint64_t v64 = swift_getWitnessTable();
    swift_getWitnessTable();
  }
  uint64_t v41 = v58;
  uint64_t v42 = v56;
  (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v58, v25, v56);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v23 + 8);
  v43(v25, v42);
  uint64_t v63 = swift_getWitnessTable();
  uint64_t v62 = swift_getWitnessTable();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v41);
  return ((uint64_t (*)(char *, uint64_t))v43)(v41, v42);
}

uint64_t SuggestedTokensView.shouldRenderTokens.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AttributedString();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<AttributedString>?(0);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Semantics.v5.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    uint64_t v22 = v4;
    uint64_t v14 = v1 + *(int *)(a1 + 76);
    uint64_t v15 = *(void *)v14;
    char v16 = *(unsigned char *)(v14 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v14, v16);
    char v17 = specialized Environment.wrappedValue.getter(v15, v16);
    outlined consume of Environment<Bool>.Content(v15, v16);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v1, a1);
    if (v17)
    {
      specialized Environment.wrappedValue.getter((uint64_t)v9);
      type metadata accessor for Binding<AttributedString>();
      uint64_t v19 = v18;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v9, 1, v18) != 1)
      {
        MEMORY[0x18C113DA0](v19);
        outlined destroy of Binding<AttributedString>?((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
        char v20 = AttributedString.isEmpty.getter();
        (*(void (**)(char *, uint64_t))(v22 + 8))(v6, v3);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a1);
        return v20 & 1;
      }
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a1);
      outlined destroy of Binding<AttributedString>?((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>?);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, a1);
    }
    char v20 = 0;
  }
  else
  {
    char v20 = 1;
  }
  return v20 & 1;
}

uint64_t closure #1 in SuggestedTokensView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v30 = a8;
  uint64_t v29 = a6;
  uint64_t v31 = a5;
  uint64_t v28 = a3;
  uint64_t v32 = a2;
  uint64_t v33 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v28 - v14;
  uint64_t v16 = type metadata accessor for SearchCompletion();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v28 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a1, AssociatedTypeWitness, v21);
  uint64_t v24 = (uint64_t)v15;
  uint64_t v25 = v30;
  AnyToken.init<A>(_:)(v24, AssociatedTypeWitness, (uint64_t)v42);
  v42[72] = 1;
  uint64_t v34 = v28;
  uint64_t v35 = a4;
  uint64_t v36 = v31;
  uint64_t v37 = v29;
  uint64_t v38 = a7;
  uint64_t v39 = v25;
  uint64_t v40 = v32;
  uint64_t v41 = a1;
  SearchCompletion.init(kind:label:)((uint64_t)v42, (void (*)(void))partial apply for closure #1 in closure #1 in SuggestedTokensView.body.getter, (uint64_t)v19);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v19);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  v26(v19, v16);
  static ViewBuilder.buildExpression<A>(_:)(v23);
  return ((uint64_t (*)(char *, uint64_t))v26)(v23, v16);
}

uint64_t closure #1 in closure #1 in SuggestedTokensView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v22 - v11;
  v22[0] = v13;
  v22[1] = v14;
  v22[2] = v15;
  v22[3] = v16;
  v22[4] = v17;
  v22[5] = v18;
  uint64_t v19 = type metadata accessor for SuggestedTokensView();
  (*(void (**)(uint64_t))(a1 + *(int *)(v19 + 68)))(a2);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v7 + 8);
  v20(v9, a4);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v20)(v12, a4);
}

uint64_t SuggestedTokensView.init(suggestedTokens:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = (int *)type metadata accessor for SuggestedTokensView();
  uint64_t v10 = (void *)(a4 + v9[17]);
  *uint64_t v10 = a2;
  v10[1] = a3;
  uint64_t v11 = (uint64_t *)(a4 + v9[18]);
  uint64_t *v11 = swift_getKeyPath();
  type metadata accessor for Environment<Binding<AttributedString>?>.Content(0, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, MEMORY[0x1E4F3F4D8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v12 = a4 + v9[19];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v12 = result;
  *(unsigned char *)(v12 + 8) = 0;
  return result;
}

uint64_t View.searchable<A, B>(text:tokens:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v61 = a8;
  uint64_t v62 = a7;
  uint64_t v51 = a6;
  uint64_t v53 = a5;
  uint64_t v57 = a2;
  uint64_t v58 = a4;
  uint64_t v63 = a3;
  uint64_t v64 = a9;
  uint64_t v59 = a11;
  uint64_t v60 = a10;
  uint64_t v55 = a12;
  uint64_t v56 = a13;
  uint64_t v66 = a1;
  uint64_t v67 = a17;
  uint64_t v54 = a18;
  uint64_t v65 = a14;
  uint64_t v21 = type metadata accessor for Binding();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v44 - v23;
  uint64_t v48 = (uint64_t)&v44 - v23;
  uint64_t v45 = a19;
  uint64_t v47 = a15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v68[0] = MEMORY[0x1E4F417F8];
  v68[1] = AssociatedTypeWitness;
  v68[2] = a16;
  v68[3] = MEMORY[0x1E4F417F0];
  uint64_t v46 = a16;
  v68[4] = a21;
  v68[5] = a20;
  uint64_t v44 = a21;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v50 = type metadata accessor for SearchModifier();
  uint64_t v52 = *(void *)(v50 - 8);
  double v26 = MEMORY[0x1F4188790](v50);
  uint64_t v49 = (uint64_t)&v44 - v27;
  char v28 = *v51;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v24, v53, v21, v26);
  LOBYTE(v68[0]) = v28;
  uint64_t v29 = (void *)swift_allocObject();
  _DWORD v29[2] = v65;
  v29[3] = a15;
  uint64_t v30 = v67;
  v29[4] = a16;
  v29[5] = v30;
  uint64_t v32 = v54;
  uint64_t v31 = v55;
  v29[6] = v54;
  v29[7] = a19;
  v29[8] = a20;
  v29[9] = a21;
  uint64_t v33 = v56;
  v29[10] = v31;
  v29[11] = v33;
  swift_retain();
  uint64_t v34 = v57;
  swift_retain();
  uint64_t v35 = v58;
  swift_bridgeObjectRetain();
  uint64_t v37 = v61;
  uint64_t v36 = v62;
  uint64_t v39 = v59;
  uint64_t v38 = v60;
  outlined copy of Text?(v62, v61, v60, v59);
  swift_retain();
  uint64_t v43 = v36;
  uint64_t v40 = v49;
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v66, v34, v63, v35, v48, 0, 0, 0, v49, (unsigned __int8 *)v68, v43, v37, v38, v39, (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:), (uint64_t)v29, v47, v46, v32,
    v45,
    a20,
    v44);
  uint64_t v41 = v50;
  MEMORY[0x18C113660](v40, v65, v50, v67);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(v40, v41);
}

uint64_t sub_187CEE12C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t View.searchable<A, B>(text:editableTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v60 = a9;
  uint64_t v54 = a7;
  uint64_t v55 = a8;
  uint64_t v47 = a6;
  uint64_t v48 = a5;
  uint64_t v58 = a3;
  uint64_t v56 = a12;
  uint64_t v51 = a4;
  uint64_t v52 = a13;
  uint64_t v49 = a2;
  uint64_t v50 = a10;
  uint64_t v43 = a20;
  uint64_t v42 = a21;
  uint64_t v59 = a17;
  uint64_t v44 = a16;
  uint64_t v53 = a18;
  uint64_t v46 = a19;
  uint64_t v57 = a14;
  uint64_t v45 = a15;
  uint64_t v22 = type metadata accessor for Binding();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v41 - v24;
  uint64_t v41 = (uint64_t)&v41 - v24;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v61[0] = MEMORY[0x1E4F417F8];
  v61[1] = AssociatedTypeWitness;
  v61[2] = a16;
  v61[3] = MEMORY[0x1E4F417F0];
  v61[4] = a21;
  v61[5] = a20;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v27 = type metadata accessor for SearchModifier();
  uint64_t v28 = *(void *)(v27 - 8);
  double v29 = MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)&v41 - v30;
  char v32 = *v47;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v25, v48, v22, v29);
  LOBYTE(v61[0]) = v32;
  uint64_t v33 = a1;
  swift_retain();
  uint64_t v34 = v49;
  swift_retain();
  uint64_t v35 = v51;
  swift_bridgeObjectRetain();
  uint64_t v37 = v54;
  uint64_t v36 = v55;
  uint64_t v38 = v50;
  outlined copy of Text?(v54, v55, v50, a11);
  uint64_t v39 = swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v33, v34, v58, v35, v41, 0, 0, 0, (uint64_t)v31, (unsigned __int8 *)v61, v37, v36, v38, a11, v56, v39, v45, v44, v53,
    v46,
    v43,
    v42);
  MEMORY[0x18C113660](v31, v57, v27, v59);
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v31, v27);
}

uint64_t View.searchable<A, B>(text:tokens:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v53 = a8;
  uint64_t v57 = a7;
  uint64_t v47 = a6;
  uint64_t v48 = a5;
  uint64_t v65 = a4;
  uint64_t v63 = a3;
  uint64_t v44 = a2;
  uint64_t v45 = a1;
  uint64_t v64 = a9;
  uint64_t v59 = a17;
  uint64_t v60 = a18;
  uint64_t v58 = a14;
  LODWORD(v56) = a10;
  uint64_t v61 = a12;
  uint64_t v62 = a13;
  uint64_t v51 = a11;
  uint64_t v49 = a21;
  uint64_t v55 = a19;
  uint64_t v50 = a15;
  uint64_t v21 = type metadata accessor for Binding();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v43 - v23;
  uint64_t v46 = (uint64_t)&v43 - v23;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v66[0] = MEMORY[0x1E4F417F8];
  v66[1] = AssociatedTypeWitness;
  v66[2] = a16;
  v66[3] = MEMORY[0x1E4F417F0];
  v66[4] = a21;
  v66[5] = a20;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v52 = type metadata accessor for SearchModifier();
  uint64_t v54 = *(void *)(v52 - 8);
  double v26 = MEMORY[0x1F4188790](v52);
  uint64_t v28 = (char *)&v43 - v27;
  char v29 = *v47;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v24, v48, v21, v26);
  LOBYTE(v66[0]) = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v30 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v56 = v31;
  uint64_t v57 = v30;
  uint64_t v53 = v32;
  uint64_t v51 = v33 & 1;
  uint64_t v34 = (void *)swift_allocObject();
  uint64_t v36 = v58;
  uint64_t v35 = v59;
  uint64_t v37 = v50;
  v34[2] = v58;
  v34[3] = v37;
  v34[4] = a16;
  v34[5] = v35;
  uint64_t v38 = v60;
  uint64_t v39 = v55;
  v34[6] = v60;
  v34[7] = v39;
  uint64_t v40 = v49;
  v34[8] = a20;
  v34[9] = v40;
  v34[10] = v61;
  v34[11] = v62;
  swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v45, v44, v63, v65, v46, 0, 0, 0, (uint64_t)v28, (unsigned __int8 *)v66, v57, v56, v51, v53, (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:), (uint64_t)v34, v37, a16, v38,
    v39,
    a20,
    v40);
  uint64_t v41 = v52;
  MEMORY[0x18C113660](v28, v36, v52, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v28, v41);
}

uint64_t partial apply for closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:)(*(void *)(v1 + 80), *(void *)(v1 + 32), a1);
}

uint64_t View.searchable<A, B>(text:editableTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v54 = a8;
  uint64_t v56 = a7;
  uint64_t v48 = a6;
  uint64_t v49 = a5;
  uint64_t v53 = a4;
  uint64_t v60 = a3;
  uint64_t v51 = a2;
  uint64_t v44 = a1;
  uint64_t v62 = a9;
  uint64_t v63 = a17;
  uint64_t v61 = a14;
  uint64_t v57 = a13;
  uint64_t v58 = a18;
  int v55 = a10;
  uint64_t v59 = a12;
  uint64_t v45 = a21;
  uint64_t v46 = a20;
  uint64_t v52 = a19;
  uint64_t v47 = a16;
  uint64_t v50 = a15;
  uint64_t v21 = type metadata accessor for Binding();
  uint64_t v22 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v43 - v23;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v64[0] = MEMORY[0x1E4F417F8];
  v64[1] = AssociatedTypeWitness;
  v64[2] = a16;
  v64[3] = MEMORY[0x1E4F417F0];
  v64[4] = a21;
  v64[5] = a20;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v26 = type metadata accessor for SearchModifier();
  uint64_t v27 = *(void *)(v26 - 8);
  double v28 = MEMORY[0x1F4188790](v26);
  uint64_t v30 = (char *)&v43 - v29;
  char v31 = *v48;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v24, v49, v21, v28);
  LOBYTE(v64[0]) = v31;
  swift_retain();
  uint64_t v32 = v51;
  swift_retain();
  uint64_t v33 = v53;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v34 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v36 = v35;
  uint64_t v38 = v37;
  uint64_t v40 = v39 & 1;
  uint64_t v41 = swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v44, v32, v60, v33, (uint64_t)v24, 0, 0, 0, (uint64_t)v30, (unsigned __int8 *)v64, v34, v36, v40, v38, v59, v41, v50, v47, v58,
    v52,
    v46,
    v45);
  MEMORY[0x18C113660](v30, v61, v26, v63);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v30, v26);
}

uint64_t View.searchable<A, B, C>(text:tokens:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v69 = a8;
  uint64_t v63 = a7;
  uint64_t v59 = a6;
  uint64_t v62 = a5;
  uint64_t v73 = a2;
  uint64_t v74 = a4;
  uint64_t v70 = a3;
  uint64_t v71 = a9;
  uint64_t v72 = a1;
  uint64_t v68 = a10;
  uint64_t v66 = a11;
  uint64_t v64 = a19;
  uint64_t v55 = a18;
  uint64_t v56 = a20;
  uint64_t v67 = a16;
  uint64_t v60 = a17;
  uint64_t v65 = a15;
  uint64_t v57 = a14;
  uint64_t v20 = *(void *)(a14 - 8);
  uint64_t v54 = a13;
  MEMORY[0x1F4188790](a1);
  uint64_t v22 = (char *)&v51 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Binding();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v51 - v25;
  uint64_t v53 = (uint64_t)&v51 - v25;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v75[0] = MEMORY[0x1E4F417F8];
  v75[1] = AssociatedTypeWitness;
  v75[2] = a13;
  v75[3] = MEMORY[0x1E4F417F0];
  v75[4] = a20;
  v75[5] = a18;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v58 = type metadata accessor for SearchModifier();
  uint64_t v61 = *(void *)(v58 - 8);
  double v28 = MEMORY[0x1F4188790](v58);
  uint64_t v30 = (char *)&v51 - v29;
  char v31 = *v59;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v26, v62, v23, v28);
  LOBYTE(v75[0]) = v31;
  uint64_t v32 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v63, v57);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v33 = v32;
  uint64_t v34 = v64;
  uint64_t v35 = Text.init<A>(_:)();
  uint64_t v62 = v36;
  uint64_t v63 = v35;
  uint64_t v59 = v37;
  uint64_t v52 = v38 & 1;
  char v39 = (void *)swift_allocObject();
  uint64_t v41 = v65;
  uint64_t v40 = v66;
  v39[2] = v66;
  v39[3] = a12;
  uint64_t v42 = v54;
  v39[4] = v54;
  v39[5] = v33;
  uint64_t v43 = v67;
  v39[6] = v41;
  v39[7] = v43;
  uint64_t v44 = v60;
  uint64_t v45 = v55;
  v39[8] = v60;
  v39[9] = v45;
  v39[10] = v34;
  uint64_t v46 = v56;
  uint64_t v47 = v69;
  v39[11] = v56;
  v39[12] = v47;
  v39[13] = v68;
  swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v72, v73, v70, v74, v53, 0, 0, 0, (uint64_t)v30, (unsigned __int8 *)v75, v63, v62, v52, (uint64_t)v59, (uint64_t)partial apply for closure #1 in View.searchable<A, B, C>(text:tokens:placement:prompt:token:), (uint64_t)v39, a12, v42, v43,
    v44,
    v45,
    v46);
  uint64_t v48 = v40;
  uint64_t v49 = v58;
  MEMORY[0x18C113660](v30, v48, v58, v41);
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v30, v49);
}

uint64_t View.searchable<A, B, C>(text:editableTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v63 = a8;
  uint64_t v64 = a3;
  uint64_t v57 = a7;
  uint64_t v58 = a2;
  uint64_t v54 = a6;
  uint64_t v55 = a5;
  uint64_t v56 = a1;
  uint64_t v66 = a9;
  uint64_t v67 = a11;
  uint64_t v62 = a10;
  uint64_t v59 = a18;
  uint64_t v60 = a4;
  uint64_t v49 = a19;
  uint64_t v48 = a20;
  uint64_t v65 = a15;
  uint64_t v50 = a14;
  uint64_t v53 = a13;
  uint64_t v20 = *(void *)(a13 - 8);
  uint64_t v61 = a16;
  uint64_t v52 = a17;
  MEMORY[0x1F4188790](a1);
  uint64_t v22 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = a12;
  uint64_t v23 = type metadata accessor for Binding();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v46 - v25;
  uint64_t v47 = (uint64_t)&v46 - v25;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v68[0] = MEMORY[0x1E4F417F8];
  v68[1] = AssociatedTypeWitness;
  v68[2] = a14;
  v68[3] = MEMORY[0x1E4F417F0];
  v68[4] = a20;
  v68[5] = a19;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v28 = type metadata accessor for SearchModifier();
  uint64_t v29 = *(void *)(v28 - 8);
  double v30 = MEMORY[0x1F4188790](v28);
  uint64_t v32 = (char *)&v46 - v31;
  char v33 = *v54;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v26, v55, v23, v30);
  LOBYTE(v68[0]) = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v22, v57, v53);
  uint64_t v34 = v56;
  swift_retain();
  uint64_t v35 = v58;
  swift_retain();
  uint64_t v36 = v60;
  swift_bridgeObjectRetain();
  uint64_t v37 = Text.init<A>(_:)();
  uint64_t v39 = v38;
  uint64_t v41 = v40;
  uint64_t v43 = v42 & 1;
  uint64_t v44 = swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v34, v35, v64, v36, v47, 0, 0, 0, (uint64_t)v32, (unsigned __int8 *)v68, v37, v39, v43, v41, v63, v44, v51, v50, v61,
    v52,
    v49,
    v48);
  MEMORY[0x18C113660](v32, v67, v28, v65);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v32, v28);
}

uint64_t View.searchable<A, B>(text:tokens:isPresented:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  int v68 = a8;
  uint64_t v66 = a6;
  uint64_t v67 = a7;
  uint64_t v55 = a5;
  uint64_t v69 = a3;
  uint64_t v70 = a9;
  uint64_t v74 = a1;
  uint64_t v64 = a12;
  uint64_t v65 = a4;
  uint64_t v63 = a13;
  uint64_t v61 = a2;
  uint64_t v62 = a14;
  uint64_t v59 = a15;
  uint64_t v72 = a20;
  uint64_t v73 = a21;
  uint64_t v58 = a16;
  uint64_t v71 = a17;
  uint64_t v60 = a11;
  uint64_t v54 = a10;
  uint64_t v24 = type metadata accessor for Binding();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v47 - v26;
  uint64_t v52 = (uint64_t)&v47 - v26;
  uint64_t v49 = a22;
  uint64_t v51 = a18;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v75[0] = MEMORY[0x1E4F417F8];
  v75[1] = AssociatedTypeWitness;
  v75[2] = a19;
  v75[3] = MEMORY[0x1E4F417F0];
  uint64_t v50 = a19;
  v75[4] = a24;
  v75[5] = a23;
  uint64_t v47 = a24;
  uint64_t v48 = a23;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v56 = type metadata accessor for SearchModifier();
  uint64_t v57 = *(void *)(v56 - 8);
  double v29 = MEMORY[0x1F4188790](v56);
  uint64_t v53 = (uint64_t)&v47 - v30;
  char v31 = *v54;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16))(v27, v55, v24, v29);
  LOBYTE(v75[0]) = v31;
  uint64_t v32 = (void *)swift_allocObject();
  v32[2] = v71;
  v32[3] = a18;
  uint64_t v33 = v72;
  v32[4] = a19;
  v32[5] = v33;
  v32[6] = v73;
  v32[7] = a22;
  v32[8] = a23;
  v32[9] = a24;
  uint64_t v34 = v58;
  v32[10] = v59;
  v32[11] = v34;
  swift_retain();
  uint64_t v35 = v61;
  swift_retain();
  uint64_t v36 = v65;
  swift_bridgeObjectRetain();
  uint64_t v37 = v60;
  uint64_t v38 = v63;
  uint64_t v39 = v64;
  uint64_t v40 = v62;
  outlined copy of Text?(v60, v64, v63, v62);
  uint64_t v41 = v66;
  swift_retain();
  uint64_t v42 = v67;
  swift_retain();
  swift_retain();
  uint64_t v46 = v37;
  uint64_t v43 = v53;
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v74, v35, v69, v36, v52, v41, v42, v68 & 1, v53, (unsigned __int8 *)v75, v46, v39, v38, v40, (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:), (uint64_t)v32, v51, v50, v73,
    v49,
    v48,
    v47);
  uint64_t v44 = v56;
  MEMORY[0x18C113660](v43, v71, v56, v72);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 8))(v43, v44);
}

uint64_t View.searchable<A, B>(text:editableTokens:isPresented:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  int v66 = a8;
  uint64_t v61 = a6;
  uint64_t v62 = a7;
  uint64_t v54 = a5;
  uint64_t v58 = a2;
  uint64_t v59 = a4;
  uint64_t v65 = a3;
  uint64_t v45 = a1;
  uint64_t v68 = a9;
  uint64_t v69 = a20;
  uint64_t v67 = a17;
  uint64_t v60 = a16;
  uint64_t v56 = a13;
  uint64_t v57 = a12;
  uint64_t v63 = a21;
  uint64_t v64 = a15;
  uint64_t v55 = a14;
  uint64_t v51 = a10;
  uint64_t v47 = a24;
  uint64_t v48 = a23;
  uint64_t v53 = a22;
  uint64_t v50 = a19;
  uint64_t v52 = a18;
  uint64_t v24 = type metadata accessor for Binding();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v44 - v26;
  uint64_t v46 = (uint64_t)&v44 - v26;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v70[0] = MEMORY[0x1E4F417F8];
  v70[1] = AssociatedTypeWitness;
  v70[2] = a19;
  v70[3] = MEMORY[0x1E4F417F0];
  v70[4] = a24;
  v70[5] = a23;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v49 = type metadata accessor for SearchModifier();
  uint64_t v29 = *(void *)(v49 - 8);
  double v30 = MEMORY[0x1F4188790](v49);
  uint64_t v32 = (char *)&v44 - v31;
  char v33 = *v51;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16))(v27, v54, v24, v30);
  LOBYTE(v70[0]) = v33;
  swift_retain();
  uint64_t v34 = v58;
  swift_retain();
  uint64_t v35 = v59;
  swift_bridgeObjectRetain();
  uint64_t v37 = v56;
  uint64_t v36 = v57;
  uint64_t v38 = v55;
  outlined copy of Text?(a11, v57, v56, v55);
  uint64_t v39 = v61;
  swift_retain();
  uint64_t v40 = v62;
  swift_retain();
  uint64_t v41 = swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v45, v34, v65, v35, v46, v39, v40, v66 & 1, (uint64_t)v32, (unsigned __int8 *)v70, a11, v36, v37, v38, v64, v41, v52, v50, v63,
    v53,
    v48,
    v47);
  uint64_t v42 = v49;
  MEMORY[0x18C113660](v32, v67, v49, v69);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v32, v42);
}

uint64_t View.searchable<A, B>(text:tokens:isPresented:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char *a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  int v75 = a8;
  uint64_t v73 = a6;
  uint64_t v74 = a7;
  uint64_t v61 = a5;
  uint64_t v78 = a4;
  uint64_t v76 = a3;
  uint64_t v54 = a2;
  uint64_t v55 = a1;
  uint64_t v77 = a9;
  uint64_t v69 = a20;
  uint64_t v70 = a21;
  uint64_t v72 = a16;
  uint64_t v79 = a17;
  LODWORD(v66) = a13;
  uint64_t v71 = a15;
  uint64_t v63 = a14;
  uint64_t v62 = a12;
  uint64_t v64 = a11;
  uint64_t v53 = a10;
  uint64_t v60 = a24;
  uint64_t v58 = a23;
  uint64_t v65 = a22;
  uint64_t v57 = a19;
  uint64_t v24 = type metadata accessor for Binding();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v51 - v26;
  uint64_t v56 = (uint64_t)&v51 - v26;
  uint64_t v52 = a18;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v80[0] = MEMORY[0x1E4F417F8];
  v80[1] = AssociatedTypeWitness;
  v80[2] = a19;
  v80[3] = MEMORY[0x1E4F417F0];
  v80[4] = a24;
  v80[5] = a23;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v29 = type metadata accessor for SearchModifier();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v67 = v29;
  uint64_t v68 = v30;
  double v31 = MEMORY[0x1F4188790](v29);
  uint64_t v59 = (uint64_t)&v51 - v32;
  char v33 = *v53;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16))(v27, v61, v24, v31);
  LOBYTE(v80[0]) = v33;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v66 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v64 = v34;
  uint64_t v63 = v35;
  uint64_t v62 = v36 & 1;
  uint64_t v37 = (void *)swift_allocObject();
  v37[2] = v79;
  _OWORD v37[3] = a18;
  uint64_t v38 = v57;
  uint64_t v39 = v69;
  uint64_t v40 = v70;
  v37[4] = v57;
  v37[5] = v39;
  uint64_t v41 = v65;
  v37[6] = v40;
  v37[7] = v41;
  uint64_t v42 = v58;
  uint64_t v43 = v60;
  v37[8] = v58;
  v37[9] = v43;
  uint64_t v44 = v72;
  v37[10] = v71;
  v37[11] = v44;
  uint64_t v45 = v73;
  swift_retain();
  uint64_t v46 = v74;
  swift_retain();
  swift_retain();
  uint64_t v50 = v40;
  uint64_t v47 = v59;
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v55, v54, v76, v78, v56, v45, v46, v75 & 1, v59, (unsigned __int8 *)v80, v66, v64, v62, v63, (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:), (uint64_t)v37, v52, v38, v50,
    v41,
    v42,
    v43);
  uint64_t v48 = v67;
  MEMORY[0x18C113660](v47, v79, v67, v39);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v47, v48);
}

uint64_t View.searchable<A, B>(text:editableTokens:isPresented:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char *a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  int v68 = a8;
  uint64_t v63 = a6;
  uint64_t v64 = a7;
  uint64_t v53 = a5;
  uint64_t v47 = a4;
  uint64_t v67 = a3;
  uint64_t v56 = a2;
  uint64_t v48 = a1;
  uint64_t v70 = a9;
  uint64_t v71 = a20;
  uint64_t v69 = a17;
  uint64_t v62 = a16;
  int v61 = a13;
  uint64_t v65 = a21;
  uint64_t v66 = a15;
  uint64_t v57 = a14;
  uint64_t v55 = a12;
  uint64_t v59 = a11;
  uint64_t v50 = a10;
  uint64_t v51 = a24;
  uint64_t v52 = a23;
  uint64_t v60 = a22;
  uint64_t v54 = a19;
  uint64_t v58 = a18;
  uint64_t v24 = type metadata accessor for Binding();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v47 - v26;
  uint64_t v49 = (uint64_t)&v47 - v26;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v72[0] = MEMORY[0x1E4F417F8];
  v72[1] = AssociatedTypeWitness;
  v72[2] = a19;
  v72[3] = MEMORY[0x1E4F417F0];
  v72[4] = a24;
  v72[5] = a23;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v29 = type metadata accessor for SearchModifier();
  uint64_t v30 = *(void *)(v29 - 8);
  double v31 = MEMORY[0x1F4188790](v29);
  char v33 = (char *)&v47 - v32;
  char v34 = *v50;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16))(v27, v53, v24, v31);
  LOBYTE(v72[0]) = v34;
  swift_retain();
  uint64_t v35 = v56;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v36 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v38 = v37;
  uint64_t v40 = v39;
  uint64_t v42 = v41 & 1;
  uint64_t v43 = v63;
  swift_retain();
  uint64_t v44 = v64;
  swift_retain();
  uint64_t v45 = swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v48, v35, v67, v47, v49, v43, v44, v68 & 1, (uint64_t)v33, (unsigned __int8 *)v72, v36, v38, v42, v40, v66, v45, v58, v54, v65,
    v60,
    v52,
    v51);
  MEMORY[0x18C113660](v33, v69, v29, v71);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v33, v29);
}

uint64_t View.searchable<A, B, C>(text:tokens:isPresented:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  int v77 = a8;
  uint64_t v75 = a6;
  uint64_t v76 = a7;
  uint64_t v67 = a5;
  uint64_t v81 = a4;
  uint64_t v82 = a2;
  uint64_t v78 = a3;
  uint64_t v79 = a9;
  uint64_t v83 = a1;
  uint64_t v73 = a12;
  uint64_t v74 = a13;
  uint64_t v71 = a18;
  uint64_t v72 = a19;
  uint64_t v66 = a11;
  uint64_t v63 = a10;
  uint64_t v70 = a22;
  uint64_t v62 = a23;
  uint64_t v65 = a20;
  uint64_t v59 = a16;
  uint64_t v64 = a17;
  uint64_t v23 = *(void *)(a17 - 8);
  uint64_t v80 = a14;
  MEMORY[0x1F4188790](a1);
  uint64_t v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for Binding();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v56 - v28;
  uint64_t v60 = (uint64_t)&v56 - v28;
  uint64_t v57 = a15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v84[0] = MEMORY[0x1E4F417F8];
  v84[1] = AssociatedTypeWitness;
  v84[2] = a16;
  v84[3] = MEMORY[0x1E4F417F0];
  v84[4] = a23;
  v84[5] = a21;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v68 = type metadata accessor for SearchModifier();
  uint64_t v69 = *(void *)(v68 - 8);
  double v31 = MEMORY[0x1F4188790](v68);
  uint64_t v61 = (uint64_t)&v56 - v32;
  char v33 = *v63;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v27 + 16))(v29, v67, v26, v31);
  LOBYTE(v84[0]) = v33;
  uint64_t v34 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v25, v66, v64);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v35 = v34;
  uint64_t v36 = v70;
  uint64_t v67 = Text.init<A>(_:)();
  uint64_t v66 = v37;
  uint64_t v63 = v38;
  uint64_t v58 = v39 & 1;
  uint64_t v40 = (void *)swift_allocObject();
  v40[2] = v80;
  v40[3] = a15;
  uint64_t v41 = v59;
  v40[4] = v59;
  v40[5] = v35;
  uint64_t v42 = v71;
  uint64_t v43 = v72;
  v40[6] = v71;
  v40[7] = v43;
  uint64_t v44 = v65;
  v40[8] = v65;
  v40[9] = a21;
  v40[10] = v36;
  uint64_t v45 = v62;
  uint64_t v46 = v73;
  uint64_t v47 = v74;
  v40[11] = v62;
  v40[12] = v46;
  v40[13] = v47;
  uint64_t v48 = v75;
  swift_retain();
  uint64_t v49 = v76;
  swift_retain();
  swift_retain();
  uint64_t v55 = v45;
  uint64_t v50 = v61;
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v83, v82, v78, v81, v60, v48, v49, v77 & 1, v61, (unsigned __int8 *)v84, v67, v66, v58, (uint64_t)v63, (uint64_t)partial apply for closure #1 in View.searchable<A, B, C>(text:tokens:placement:prompt:token:), (uint64_t)v40, v57, v41, v43,
    v44,
    a21,
    v55);
  uint64_t v51 = v50;
  uint64_t v52 = v50;
  uint64_t v53 = v68;
  MEMORY[0x18C113660](v51, v80, v68, v42);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v69 + 8))(v52, v53);
}

uint64_t closure #1 in View.searchable<A, B, C>(text:tokens:placement:prompt:token:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  v18[0] = a1;
  v18[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)v18 - v6;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v18 - v13;
  uint64_t v15 = type metadata accessor for Binding();
  MEMORY[0x18C113DA0](v15);
  ((void (*)(char *))v18[0])(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, a2);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a2);
}

uint64_t sub_187CF0C48()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.searchable<A, B, C>(text:tokens:placement:prompt:token:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in View.searchable<A, B, C>(text:tokens:placement:prompt:token:)(*(void *)(v1 + 96), *(void *)(v1 + 32), a1);
}

uint64_t View.searchable<A, B, C>(text:editableTokens:isPresented:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t a9@<X8>, char *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  int v72 = a8;
  uint64_t v66 = a6;
  uint64_t v67 = a7;
  uint64_t v61 = a5;
  uint64_t v75 = a2;
  uint64_t v62 = a1;
  uint64_t v73 = a9;
  uint64_t v74 = a18;
  uint64_t v68 = a19;
  uint64_t v70 = a12;
  uint64_t v71 = a3;
  uint64_t v64 = a4;
  uint64_t v65 = a13;
  uint64_t v60 = a11;
  uint64_t v56 = a10;
  uint64_t v53 = a22;
  uint64_t v52 = a23;
  uint64_t v63 = a21;
  uint64_t v59 = a20;
  uint64_t v55 = a17;
  uint64_t v58 = a16;
  uint64_t v23 = *(void *)(a16 - 8);
  uint64_t v69 = a14;
  MEMORY[0x1F4188790](a1);
  uint64_t v25 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = a15;
  uint64_t v26 = type metadata accessor for Binding();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v50 - v28;
  uint64_t v51 = (uint64_t)&v50 - v28;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v76[0] = MEMORY[0x1E4F417F8];
  v76[1] = AssociatedTypeWitness;
  v76[2] = a17;
  v76[3] = MEMORY[0x1E4F417F0];
  v76[4] = a23;
  v76[5] = a22;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v54 = type metadata accessor for SearchModifier();
  uint64_t v31 = *(void *)(v54 - 8);
  double v32 = MEMORY[0x1F4188790](v54);
  uint64_t v34 = (char *)&v50 - v33;
  char v35 = *v56;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v27 + 16))(v29, v61, v26, v32);
  LOBYTE(v76[0]) = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v25, v60, v58);
  uint64_t v36 = v62;
  swift_retain();
  swift_retain();
  uint64_t v37 = v64;
  swift_bridgeObjectRetain();
  uint64_t v38 = Text.init<A>(_:)();
  uint64_t v40 = v39;
  uint64_t v42 = v41;
  uint64_t v44 = v43 & 1;
  uint64_t v45 = v66;
  swift_retain();
  uint64_t v46 = v67;
  swift_retain();
  uint64_t v47 = swift_retain();
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v36, v75, v71, v37, v51, v45, v46, v72 & 1, (uint64_t)v34, (unsigned __int8 *)v76, v38, v40, v44, v42, v70, v47, v57, v55, v68,
    v59,
    v53,
    v52);
  uint64_t v48 = v54;
  MEMORY[0x18C113660](v34, v69, v54, v74);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v34, v48);
}

uint64_t View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v73 = a8;
  uint64_t v65 = a7;
  uint64_t v76 = a6;
  uint64_t v67 = a5;
  uint64_t v80 = a4;
  uint64_t v75 = a3;
  uint64_t v81 = a2;
  uint64_t v82 = a1;
  uint64_t v77 = a9;
  uint64_t v72 = a10;
  uint64_t v71 = a11;
  uint64_t v70 = a12;
  uint64_t v83 = a13;
  uint64_t v68 = a21;
  uint64_t v64 = a20;
  uint64_t v79 = a14;
  uint64_t v78 = a18;
  uint64_t v62 = type metadata accessor for Binding();
  uint64_t v23 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v25 = (char *)&v53 - v24;
  uint64_t v58 = (uint64_t)&v53 - v24;
  uint64_t v59 = a19;
  uint64_t v54 = a16;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v99 = MEMORY[0x1E4F417F8];
  uint64_t v100 = AssociatedTypeWitness;
  uint64_t v101 = a17;
  uint64_t v102 = MEMORY[0x1E4F417F0];
  uint64_t v53 = a17;
  uint64_t v103 = a23;
  uint64_t v104 = a22;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v63 = type metadata accessor for SearchModifier();
  uint64_t v66 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v61 = (uint64_t)&v53 - v27;
  uint64_t v57 = a15;
  uint64_t v69 = type metadata accessor for ModifiedContent();
  uint64_t v74 = *(void *)(v69 - 8);
  double v28 = MEMORY[0x1F4188790](v69);
  uint64_t v60 = (char *)&v53 - v29;
  char v30 = *v65;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v25, v67, v62, v28);
  LOBYTE(v99) = v30;
  uint64_t v31 = (void *)swift_allocObject();
  v31[2] = a15;
  v31[3] = a16;
  uint64_t v32 = v78;
  v31[4] = a17;
  v31[5] = v32;
  uint64_t v33 = v64;
  v31[6] = a19;
  v31[7] = v33;
  uint64_t v34 = v68;
  v31[8] = v68;
  v31[9] = a22;
  uint64_t v55 = a22;
  uint64_t v56 = a23;
  uint64_t v35 = v83;
  v31[10] = a23;
  v31[11] = v35;
  v31[12] = v79;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v36 = v73;
  uint64_t v37 = v72;
  uint64_t v38 = v71;
  uint64_t v39 = v70;
  outlined copy of Text?(v73, v72, v71, v70);
  swift_retain();
  uint64_t v40 = v53;
  uint64_t v41 = v54;
  uint64_t v52 = v37;
  uint64_t v42 = v61;
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v82, v81, v75, v80, v58, 0, 0, 0, v61, (unsigned __int8 *)&v99, v36, v52, v38, v39, (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:), (uint64_t)v31, v54, v53, v33,
    v34,
    a22,
    a23);
  char v43 = v60;
  uint64_t v44 = v57;
  uint64_t v45 = v63;
  uint64_t v46 = v78;
  MEMORY[0x18C113660](v42, v57, v63, v78);
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v42, v45);
  uint64_t v85 = v44;
  uint64_t v86 = v41;
  uint64_t v87 = v40;
  uint64_t v88 = v46;
  uint64_t v89 = v59;
  uint64_t v90 = v33;
  uint64_t v91 = v34;
  uint64_t v92 = v55;
  uint64_t v93 = v56;
  uint64_t v94 = v76;
  uint64_t v95 = v83;
  uint64_t v96 = v79;
  uint64_t v99 = v41;
  uint64_t v100 = v40;
  uint64_t v101 = v33;
  uint64_t v102 = v34;
  uint64_t v103 = v55;
  uint64_t v104 = v56;
  uint64_t v47 = type metadata accessor for SuggestedTokensView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v97 = v46;
  uint64_t v98 = WitnessTable;
  uint64_t v49 = v69;
  uint64_t v50 = swift_getWitnessTable();
  swift_getWitnessTable();
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:), (uint64_t)v84, v49, v47, v50);
  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v43, v49);
}

uint64_t sub_187CF1740()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t type metadata accessor for SuggestedTokensView()
{
  return swift_getGenericMetadata();
}

uint64_t View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unsigned __int8 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v69 = a8;
  uint64_t v60 = a7;
  uint64_t v76 = a6;
  uint64_t v62 = a5;
  uint64_t v80 = a4;
  uint64_t v75 = a3;
  uint64_t v79 = a2;
  uint64_t v57 = a1;
  uint64_t v77 = a9;
  uint64_t v82 = a21;
  uint64_t v72 = a20;
  LODWORD(v68) = a11;
  uint64_t v73 = a13;
  uint64_t v65 = a12;
  uint64_t v63 = a10;
  uint64_t v81 = a14;
  uint64_t v78 = a22;
  uint64_t v70 = a18;
  uint64_t v66 = a19;
  uint64_t v64 = a16;
  uint64_t v23 = type metadata accessor for Binding();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v55 - v25;
  uint64_t v58 = (uint64_t)&v55 - v25;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v99 = MEMORY[0x1E4F417F8];
  uint64_t v100 = AssociatedTypeWitness;
  uint64_t v101 = a17;
  uint64_t v102 = MEMORY[0x1E4F417F0];
  uint64_t v103 = a23;
  uint64_t v104 = a22;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v61 = type metadata accessor for SearchModifier();
  uint64_t v67 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61);
  uint64_t v59 = (uint64_t)&v55 - v28;
  uint64_t v55 = a15;
  uint64_t v71 = type metadata accessor for ModifiedContent();
  uint64_t v74 = *(void *)(v71 - 8);
  double v29 = MEMORY[0x1F4188790](v71);
  uint64_t v83 = (char *)&v55 - v30;
  char v31 = *v60;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v24 + 16))(v26, v62, v23, v29);
  LOBYTE(v99) = v31;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v69 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v68 = v32;
  uint64_t v65 = v33;
  uint64_t v63 = v34 & 1;
  uint64_t v35 = (void *)swift_allocObject();
  uint64_t v36 = v64;
  v35[2] = a15;
  v35[3] = v36;
  uint64_t v37 = v70;
  v35[4] = a17;
  v35[5] = v37;
  uint64_t v38 = v66;
  uint64_t v39 = v72;
  v35[6] = v66;
  v35[7] = v39;
  uint64_t v40 = v82;
  uint64_t v41 = v78;
  v35[8] = v82;
  v35[9] = v41;
  uint64_t v56 = a23;
  uint64_t v42 = v73;
  v35[10] = a23;
  v35[11] = v42;
  v35[12] = v81;
  swift_retain();
  uint64_t v54 = v40;
  uint64_t v43 = v36;
  uint64_t v44 = v59;
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v57, v79, v75, v80, v58, 0, 0, 0, v59, (unsigned __int8 *)&v99, v69, v68, v63, v65, (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:), (uint64_t)v35, v36, a17, v39,
    v54,
    v41,
    a23);
  uint64_t v45 = v55;
  uint64_t v46 = v61;
  MEMORY[0x18C113660](v44, v55, v61, v37);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v44, v46);
  uint64_t v85 = v45;
  uint64_t v86 = v43;
  uint64_t v87 = a17;
  uint64_t v88 = v37;
  uint64_t v89 = v38;
  uint64_t v90 = v39;
  uint64_t v91 = v82;
  uint64_t v92 = v78;
  uint64_t v93 = v56;
  uint64_t v94 = v76;
  uint64_t v95 = v42;
  uint64_t v96 = v81;
  uint64_t v99 = v43;
  uint64_t v100 = a17;
  uint64_t v101 = v39;
  uint64_t v102 = v82;
  uint64_t v103 = v78;
  uint64_t v104 = v56;
  uint64_t v47 = type metadata accessor for SuggestedTokensView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v97 = v37;
  uint64_t v98 = WitnessTable;
  uint64_t v49 = v71;
  uint64_t v50 = swift_getWitnessTable();
  swift_getWitnessTable();
  uint64_t v51 = v50;
  uint64_t v52 = v83;
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:), (uint64_t)v84, v49, v47, v51);
  return (*(uint64_t (**)(char *, uint64_t))(v74 + 8))(v52, v49);
}

uint64_t closure #1 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  v18[0] = a1;
  v18[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)v18 - v6;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v18 - v13;
  uint64_t v15 = type metadata accessor for Binding();
  MEMORY[0x18C113DA0](v15);
  ((void (*)(char *))v18[0])(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, a2);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a2);
}

uint64_t partial apply for closure #1 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)(*(void *)(v1 + 88), *(void *)(v1 + 32), a1);
}

uint64_t closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  v26[3] = a5;
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v30 = a6;
  v26[1] = a8;
  v26[2] = a9;
  uint64_t v12 = type metadata accessor for Binding();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v26 - v14;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  uint64_t v35 = a9;
  uint64_t v36 = a10;
  uint64_t v16 = type metadata accessor for SuggestedTokensView();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)v26 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, v27, v12, v21);
  SuggestedTokensView.init(suggestedTokens:token:)((uint64_t)v15, v28, v29, (uint64_t)v19);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v19);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v17 + 8);
  swift_retain();
  v24(v19, v16);
  static ViewBuilder.buildExpression<A>(_:)(v23);
  return ((uint64_t (*)(char *, uint64_t))v24)(v23, v16);
}

uint64_t partial apply for closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:placement:prompt:token:)(v1[11], v1[12], v1[13], v1[3], v1[4], a1, v1[7], v1[8], v1[9], v1[10]);
}

uint64_t View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v69 = a8;
  uint64_t v65 = a7;
  uint64_t v75 = a6;
  uint64_t v67 = a5;
  uint64_t v82 = a4;
  uint64_t v74 = a3;
  uint64_t v81 = a2;
  uint64_t v68 = a1;
  uint64_t v76 = a9;
  uint64_t v84 = a11;
  uint64_t v85 = a10;
  uint64_t v83 = a19;
  uint64_t v72 = a18;
  uint64_t v80 = a21;
  uint64_t v77 = a20;
  uint64_t v78 = a22;
  uint64_t v71 = a16;
  uint64_t v64 = a17;
  uint64_t v79 = a15;
  uint64_t v22 = *(void *)(a15 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for Binding();
  uint64_t v25 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61);
  uint64_t v27 = (char *)&v57 - v26;
  uint64_t v59 = (uint64_t)&v57 - v26;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v103 = MEMORY[0x1E4F417F8];
  uint64_t v104 = AssociatedTypeWitness;
  uint64_t v105 = a14;
  uint64_t v106 = MEMORY[0x1E4F417F0];
  uint64_t v107 = a22;
  uint64_t v108 = a20;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v63 = type metadata accessor for SearchModifier();
  uint64_t v66 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v62 = (uint64_t)&v57 - v29;
  uint64_t v58 = a12;
  uint64_t v70 = type metadata accessor for ModifiedContent();
  uint64_t v73 = *(void *)(v70 - 8);
  double v30 = MEMORY[0x1F4188790](v70);
  uint64_t v60 = (char *)&v57 - v31;
  char v32 = *v65;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16))(v27, v67, v61, v30);
  LOBYTE(v103) = v32;
  uint64_t v33 = v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v69, v79);
  uint64_t v34 = v68;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v35 = v80;
  uint64_t v69 = Text.init<A>(_:)();
  uint64_t v67 = v36;
  uint64_t v65 = v37;
  uint64_t v61 = v38 & 1;
  uint64_t v39 = (void *)swift_allocObject();
  v39[2] = a12;
  v39[3] = a13;
  v39[4] = a14;
  v39[5] = v33;
  uint64_t v40 = v71;
  uint64_t v41 = v64;
  v39[6] = v71;
  v39[7] = v41;
  uint64_t v42 = v72;
  uint64_t v43 = v83;
  v39[8] = v72;
  v39[9] = v43;
  uint64_t v44 = v77;
  v39[10] = v77;
  v39[11] = v35;
  uint64_t v45 = v78;
  uint64_t v46 = v85;
  v39[12] = v78;
  v39[13] = v46;
  v39[14] = v84;
  swift_retain();
  uint64_t v56 = v43;
  uint64_t v47 = v62;
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v34, v81, v74, v82, v59, 0, 0, 0, v62, (unsigned __int8 *)&v103, v69, v67, v61, (uint64_t)v65, (uint64_t)partial apply for closure #1 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:), (uint64_t)v39, a13, a14, v42,
    v56,
    v44,
    v45);
  uint64_t v48 = v60;
  uint64_t v49 = v58;
  uint64_t v50 = v63;
  MEMORY[0x18C113660](v47, v58, v63, v40);
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v47, v50);
  uint64_t v87 = v49;
  uint64_t v88 = a13;
  uint64_t v89 = a14;
  uint64_t v90 = v79;
  uint64_t v91 = v40;
  uint64_t v92 = v41;
  uint64_t v93 = v42;
  uint64_t v94 = v83;
  uint64_t v95 = v77;
  uint64_t v96 = v80;
  uint64_t v97 = v78;
  uint64_t v98 = v75;
  uint64_t v99 = v85;
  uint64_t v100 = v84;
  uint64_t v103 = a13;
  uint64_t v104 = a14;
  uint64_t v105 = v42;
  uint64_t v106 = v83;
  uint64_t v107 = v77;
  uint64_t v108 = v78;
  uint64_t v51 = type metadata accessor for SuggestedTokensView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v101 = v40;
  uint64_t v102 = WitnessTable;
  uint64_t v53 = v70;
  uint64_t v54 = swift_getWitnessTable();
  swift_getWitnessTable();
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #2 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:), (uint64_t)v86, v53, v51, v54);
  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v48, v53);
}

uint64_t sub_187CF2A1C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t View.searchable<A, B>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v78 = a8;
  uint64_t v76 = a7;
  uint64_t v81 = a6;
  uint64_t v70 = a5;
  uint64_t v86 = a4;
  uint64_t v80 = a3;
  uint64_t v87 = a2;
  uint64_t v89 = a1;
  uint64_t v82 = a9;
  int v79 = a10;
  uint64_t v75 = a13;
  uint64_t v74 = a14;
  uint64_t v73 = a15;
  uint64_t v90 = a16;
  uint64_t v84 = a22;
  uint64_t v62 = a21;
  uint64_t v88 = a12;
  uint64_t v68 = a11;
  uint64_t v85 = a17;
  uint64_t v83 = a24;
  uint64_t v66 = type metadata accessor for Binding();
  uint64_t v25 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  uint64_t v27 = (char *)&v58 - v26;
  uint64_t v64 = (uint64_t)&v58 - v26;
  uint64_t v58 = a23;
  uint64_t v60 = a19;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v105 = MEMORY[0x1E4F417F8];
  uint64_t v106 = AssociatedTypeWitness;
  uint64_t v107 = a20;
  uint64_t v108 = MEMORY[0x1E4F417F0];
  uint64_t v59 = a20;
  uint64_t v109 = a25;
  uint64_t v110 = a24;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v69 = type metadata accessor for SearchModifier();
  uint64_t v71 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  uint64_t v67 = (uint64_t)&v58 - v29;
  uint64_t v63 = a18;
  uint64_t v72 = type metadata accessor for ModifiedContent();
  uint64_t v77 = *(void *)(v72 - 8);
  double v30 = MEMORY[0x1F4188790](v72);
  uint64_t v65 = (char *)&v58 - v31;
  char v32 = *v68;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v25 + 16))(v27, v70, v66, v30);
  LOBYTE(v105) = v32;
  uint64_t v33 = (void *)swift_allocObject();
  v33[2] = a18;
  void v33[3] = a19;
  void v33[4] = a20;
  v33[5] = a21;
  uint64_t v34 = v84;
  v33[6] = v84;
  v33[7] = a23;
  uint64_t v35 = v83;
  v33[8] = v83;
  v33[9] = a25;
  uint64_t v61 = a25;
  uint64_t v36 = v85;
  v33[10] = v90;
  v33[11] = v36;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v37 = v75;
  uint64_t v38 = v74;
  uint64_t v39 = v73;
  outlined copy of Text?(v88, v75, v74, v73);
  uint64_t v40 = v76;
  swift_retain();
  uint64_t v41 = v78;
  swift_retain();
  swift_retain();
  uint64_t v57 = v35;
  uint64_t v42 = v58;
  uint64_t v56 = v34;
  uint64_t v43 = v59;
  uint64_t v44 = v60;
  uint64_t v55 = v38;
  uint64_t v45 = v67;
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v89, v87, v80, v86, v64, v40, v41, v79 & 1, v67, (unsigned __int8 *)&v105, v88, v37, v55, v39, (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:), (uint64_t)v33, v60, v59, v56,
    v58,
    v57,
    a25);
  uint64_t v46 = v65;
  uint64_t v47 = v63;
  uint64_t v48 = v69;
  uint64_t v49 = v62;
  MEMORY[0x18C113660](v45, v63, v69, v62);
  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v45, v48);
  uint64_t v92 = v47;
  uint64_t v93 = v44;
  uint64_t v94 = v43;
  uint64_t v95 = v49;
  uint64_t v96 = v84;
  uint64_t v97 = v42;
  uint64_t v98 = v83;
  uint64_t v99 = v61;
  uint64_t v100 = v81;
  uint64_t v101 = v90;
  uint64_t v102 = v85;
  uint64_t v105 = v44;
  uint64_t v106 = v43;
  uint64_t v107 = v84;
  uint64_t v108 = v42;
  uint64_t v109 = v83;
  uint64_t v110 = v61;
  uint64_t v50 = type metadata accessor for SuggestedTokensView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v103 = v49;
  uint64_t v104 = WitnessTable;
  uint64_t v52 = v72;
  uint64_t v53 = swift_getWitnessTable();
  swift_getWitnessTable();
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:), (uint64_t)v91, v52, v50, v53);
  return (*(uint64_t (**)(char *, uint64_t))(v77 + 8))(v46, v52);
}

uint64_t View.searchable<A, B>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, char *a11, uint64_t a12, uint64_t a13, unsigned __int8 a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v81 = a8;
  uint64_t v79 = a7;
  uint64_t v84 = a6;
  uint64_t v68 = a5;
  uint64_t v88 = a4;
  uint64_t v83 = a3;
  uint64_t v62 = a2;
  uint64_t v63 = a1;
  uint64_t v85 = a9;
  int v82 = a10;
  uint64_t v77 = a22;
  uint64_t v89 = a21;
  LODWORD(v75) = a14;
  uint64_t v91 = a16;
  uint64_t v72 = a15;
  uint64_t v70 = a13;
  uint64_t v73 = a12;
  uint64_t v65 = a11;
  uint64_t v90 = a17;
  uint64_t v86 = a18;
  uint64_t v87 = a25;
  uint64_t v74 = a23;
  uint64_t v71 = a19;
  uint64_t v25 = type metadata accessor for Binding();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v61 - v27;
  uint64_t v64 = (uint64_t)&v61 - v27;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v106 = MEMORY[0x1E4F417F8];
  uint64_t v107 = AssociatedTypeWitness;
  uint64_t v108 = a20;
  uint64_t v109 = MEMORY[0x1E4F417F0];
  uint64_t v110 = a25;
  uint64_t v111 = a24;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v69 = type metadata accessor for SearchModifier();
  uint64_t v76 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  uint64_t v67 = (uint64_t)&v61 - v30;
  uint64_t v31 = v86;
  uint64_t v78 = type metadata accessor for ModifiedContent();
  uint64_t v80 = *(void *)(v78 - 8);
  double v32 = MEMORY[0x1F4188790](v78);
  uint64_t v66 = (char *)&v61 - v33;
  char v34 = *v65;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v26 + 16))(v28, v68, v25, v32);
  LOBYTE(v106) = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v75 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v73 = v35;
  uint64_t v72 = v36;
  uint64_t v70 = v37 & 1;
  uint64_t v38 = (void *)swift_allocObject();
  v38[2] = v31;
  uint64_t v39 = v71;
  v38[3] = v71;
  v38[4] = a20;
  uint64_t v40 = v77;
  v38[5] = v89;
  v38[6] = v40;
  uint64_t v41 = v74;
  v38[7] = v74;
  v38[8] = a24;
  uint64_t v61 = a24;
  uint64_t v42 = v87;
  uint64_t v43 = v91;
  v38[9] = v87;
  v38[10] = v43;
  v38[11] = v90;
  uint64_t v44 = v79;
  swift_retain();
  uint64_t v45 = v81;
  swift_retain();
  swift_retain();
  uint64_t v60 = v42;
  uint64_t v59 = v41;
  uint64_t v46 = v41;
  uint64_t v58 = v39;
  uint64_t v47 = v39;
  uint64_t v48 = v67;
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v63, v62, v83, v88, v64, v44, v45, v82 & 1, v67, (unsigned __int8 *)&v106, v75, v73, v70, v72, (uint64_t)partial apply for closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:), (uint64_t)v38, v58, a20, v40,
    v59,
    a24,
    v60);
  uint64_t v49 = v66;
  uint64_t v50 = v86;
  uint64_t v51 = v69;
  uint64_t v52 = v89;
  MEMORY[0x18C113660](v48, v86, v69, v89);
  (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v48, v51);
  uint64_t v93 = v50;
  uint64_t v94 = v47;
  uint64_t v95 = a20;
  uint64_t v96 = v52;
  uint64_t v97 = v40;
  uint64_t v98 = v46;
  uint64_t v99 = v61;
  uint64_t v100 = v87;
  uint64_t v101 = v84;
  uint64_t v102 = v91;
  uint64_t v103 = v90;
  uint64_t v106 = v47;
  uint64_t v107 = a20;
  uint64_t v108 = v40;
  uint64_t v109 = v46;
  uint64_t v110 = v61;
  uint64_t v111 = v87;
  uint64_t v53 = type metadata accessor for SuggestedTokensView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v104 = v52;
  uint64_t v105 = WitnessTable;
  uint64_t v55 = v78;
  uint64_t v56 = swift_getWitnessTable();
  swift_getWitnessTable();
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:), (uint64_t)v92, v55, v53, v56);
  return (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v49, v55);
}

uint64_t closure #1 in View.searchable<A, B>(text:tokens:placement:prompt:token:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  v18[0] = a1;
  v18[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)v18 - v6;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v18 - v13;
  uint64_t v15 = type metadata accessor for Binding();
  MEMORY[0x18C113DA0](v15);
  ((void (*)(char *))v18[0])(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, a2);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a2);
}

uint64_t closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  void v27[2] = a5;
  v27[3] = a6;
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  uint64_t v28 = a1;
  uint64_t v31 = a7;
  v27[1] = a9;
  uint64_t v13 = type metadata accessor for Binding();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v27 - v15;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v35 = a8;
  uint64_t v36 = a9;
  uint64_t v37 = a10;
  uint64_t v17 = type metadata accessor for SuggestedTokensView();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)v27 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, v28, v13, v22);
  SuggestedTokensView.init(suggestedTokens:token:)((uint64_t)v16, v29, v30, (uint64_t)v20);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v20);
  uint64_t v25 = *(void (**)(char *, uint64_t))(v18 + 8);
  swift_retain();
  v25(v20, v17);
  static ViewBuilder.buildExpression<A>(_:)(v24);
  return ((uint64_t (*)(char *, uint64_t))v25)(v24, v17);
}

uint64_t partial apply for closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in View.searchable<A, B>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:)(v1[10], v1[11], v1[12], v1[3], v1[4], v1[6], a1, v1[7], v1[8], v1[9]);
}

uint64_t View.searchable<A, B, C>(text:tokens:suggestedTokens:isPresented:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, unsigned __int8 a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  uint64_t v85 = a8;
  uint64_t v84 = a7;
  uint64_t v88 = a6;
  uint64_t v78 = a5;
  uint64_t v98 = a4;
  uint64_t v87 = a3;
  uint64_t v97 = a2;
  uint64_t v94 = a1;
  uint64_t v89 = a9;
  int v86 = a10;
  uint64_t v96 = a14;
  uint64_t v95 = a13;
  uint64_t v82 = a22;
  uint64_t v81 = a21;
  uint64_t v77 = a12;
  uint64_t v76 = a11;
  uint64_t v92 = a24;
  uint64_t v90 = a25;
  uint64_t v99 = a19;
  uint64_t v93 = a20;
  uint64_t v72 = a17;
  uint64_t v91 = a18;
  uint64_t v25 = *(void *)(a18 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v27 = (char *)&v67 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = a16;
  uint64_t v70 = type metadata accessor for Binding();
  uint64_t v28 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70);
  uint64_t v30 = (char *)&v67 - v29;
  uint64_t v69 = (uint64_t)&v67 - v29;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v117 = MEMORY[0x1E4F417F8];
  uint64_t v118 = AssociatedTypeWitness;
  uint64_t v119 = a17;
  uint64_t v120 = MEMORY[0x1E4F417F0];
  uint64_t v121 = a25;
  uint64_t v122 = a23;
  type metadata accessor for TokenField();
  swift_getWitnessTable();
  uint64_t v75 = type metadata accessor for SearchModifier();
  uint64_t v79 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  uint64_t v73 = (uint64_t)&v67 - v32;
  uint64_t v68 = a15;
  uint64_t v80 = type metadata accessor for ModifiedContent();
  uint64_t v83 = *(void *)(v80 - 8);
  double v33 = MEMORY[0x1F4188790](v80);
  uint64_t v71 = (char *)&v67 - v34;
  char v35 = *v76;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v28 + 16))(v30, v78, v70, v33);
  LOBYTE(v117) = v35;
  uint64_t v36 = v91;
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v27, v77, v91);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v37 = v36;
  uint64_t v38 = v92;
  uint64_t v78 = Text.init<A>(_:)();
  uint64_t v77 = v39;
  uint64_t v76 = v40;
  uint64_t v70 = v41 & 1;
  uint64_t v42 = (void *)swift_allocObject();
  v42[2] = a15;
  uint64_t v43 = v74;
  uint64_t v44 = v72;
  v42[3] = v74;
  v42[4] = v44;
  uint64_t v45 = v99;
  v42[5] = v37;
  v42[6] = v45;
  uint64_t v46 = v81;
  v42[7] = v93;
  v42[8] = v46;
  uint64_t v47 = v82;
  v42[9] = v82;
  v42[10] = a23;
  uint64_t v67 = a23;
  uint64_t v48 = v90;
  v42[11] = v38;
  v42[12] = v48;
  uint64_t v49 = v96;
  v42[13] = v95;
  v42[14] = v49;
  uint64_t v50 = v84;
  swift_retain();
  uint64_t v51 = v85;
  swift_retain();
  swift_retain();
  uint64_t v66 = v48;
  uint64_t v52 = v44;
  uint64_t v53 = v43;
  uint64_t v54 = v73;
  SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(v94, v97, v87, v98, v69, v50, v51, v86 & 1, v73, (unsigned __int8 *)&v117, v78, v77, v70, (uint64_t)v76, (uint64_t)partial apply for closure #1 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:), (uint64_t)v42, v43, v44, v46,
    v47,
    a23,
    v66);
  uint64_t v55 = v71;
  uint64_t v56 = v54;
  uint64_t v57 = v54;
  uint64_t v58 = v68;
  uint64_t v59 = v75;
  uint64_t v60 = v99;
  MEMORY[0x18C113660](v56, v68, v75, v99);
  (*(void (**)(uint64_t, uint64_t))(v79 + 8))(v57, v59);
  uint64_t v101 = v58;
  uint64_t v102 = v53;
  uint64_t v103 = v52;
  uint64_t v104 = v91;
  uint64_t v105 = v60;
  uint64_t v106 = v93;
  uint64_t v107 = v46;
  uint64_t v108 = v47;
  uint64_t v109 = v67;
  uint64_t v110 = v92;
  uint64_t v111 = v90;
  uint64_t v112 = v88;
  uint64_t v113 = v95;
  uint64_t v114 = v96;
  uint64_t v117 = v53;
  uint64_t v118 = v52;
  uint64_t v119 = v46;
  uint64_t v120 = v47;
  uint64_t v121 = v67;
  uint64_t v122 = v90;
  uint64_t v61 = type metadata accessor for SuggestedTokensView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v115 = v60;
  uint64_t v116 = WitnessTable;
  uint64_t v63 = v80;
  uint64_t v64 = swift_getWitnessTable();
  swift_getWitnessTable();
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #2 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:), (uint64_t)v100, v63, v61, v64);
  return (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v55, v63);
}

uint64_t closure #1 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  v18[0] = a1;
  v18[1] = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)v18 - v6;
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v18 - v13;
  uint64_t v15 = type metadata accessor for Binding();
  MEMORY[0x18C113DA0](v15);
  ((void (*)(char *))v18[0])(v7);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  v16(v11, a2);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, a2);
}

uint64_t partial apply for closure #1 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:)(*(void *)(v1 + 104), *(void *)(v1 + 32), a1);
}

uint64_t closure #2 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  v28[3] = a5;
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = a6;
  v28[1] = a9;
  v28[2] = a10;
  uint64_t v14 = type metadata accessor for Binding();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v28 - v16;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v35 = a8;
  uint64_t v36 = a9;
  uint64_t v37 = a10;
  uint64_t v38 = a12;
  uint64_t v18 = type metadata accessor for SuggestedTokensView();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)v28 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)v28 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, v29, v14, v23);
  SuggestedTokensView.init(suggestedTokens:token:)((uint64_t)v17, v30, v31, (uint64_t)v21);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v21);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v19 + 8);
  swift_retain();
  v26(v21, v18);
  static ViewBuilder.buildExpression<A>(_:)(v25);
  return ((uint64_t (*)(char *, uint64_t))v26)(v25, v18);
}

uint64_t partial apply for closure #2 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in View.searchable<A, B, C>(text:tokens:suggestedTokens:placement:prompt:token:)(v1[13], v1[14], v1[15], v1[3], v1[4], a1, v1[7], v1[8], v1[9], v1[10], v1[11], v1[12]);
}

void View.searchable<A, B, C>(text:tokens:placement:prompt:token:suggestions:)()
{
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.searchable<A, B, C, D>(text:tokens:placement:prompt:token:suggestions:)()
{
}

void View.searchable<A, B, C, D>(text:tokens:scope:placement:prompt:token:scopes:)()
{
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.searchable<A, B, C, D, E>(text:tokens:scope:placement:prompt:token:scopes:)()
{
}

void View.searchable<A, B, C, D, E>(text:tokens:scope:placement:prompt:token:scopes:suggestions:)()
{
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void View.searchable<A, B, C, D, E, F>(text:tokens:scope:placement:prompt:token:scopes:suggestions:)()
{
}

uint64_t sub_187CF4994()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CF4AA8()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CF4BC0()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CF4CD4()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CF4E94()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CF5058()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CF5218()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CF5398()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CF551C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CF56A0()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CF5824()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CF5A0C()
{
  return swift_getWitnessTable();
}

void type metadata completion function for SuggestedTokensView()
{
  type metadata accessor for Binding();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Environment<Binding<AttributedString>?>.Content(319, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, MEMORY[0x1E4F3F4D8]);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for SuggestedTokensView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  unint64_t v8 = ((v7 + 16) & ~(unint64_t)v7) + *(void *)(v6 + 64);
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v9 - 8);
  int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(_DWORD *)(v10 + 80);
  uint64_t v13 = v12 | 7;
  unint64_t v14 = ((v12 + 16) & ~v12) + *(void *)(v10 + 64);
  if (v14 <= 8) {
    uint64_t v15 = 8;
  }
  else {
    uint64_t v15 = ((v12 + 16) & ~v12) + *(void *)(v10 + 64);
  }
  int v16 = (*(_DWORD *)(v10 + 80) | v7) & 0x100000;
  uint64_t v17 = *a2;
  *a1 = *a2;
  if ((v12 | (unint64_t)v7) <= 7
    && v16 == 0
    && ((v15 + ((v12 + 16 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~(v12 | 7)) + 8) & 0xFFFFFFFFFFFFFFF8) + 9 <= 0x18)
  {
    int v54 = v11;
    size_t __n = v14;
    uint64_t v51 = v10;
    uint64_t v52 = v9;
    uint64_t v53 = v5;
    uint64_t v20 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v20 = *v21;
    unint64_t v22 = ((unint64_t)v20 + v7 + 8) & ~(unint64_t)v7;
    unint64_t v23 = ((unint64_t)v21 + v7 + 8) & ~(unint64_t)v7;
    uint64_t v24 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v24(v22, v23, v53);
    uint64_t v25 = (void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = (void *)(((unint64_t)a2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v27 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = ((unint64_t)v25 + v13 + 16) & ~v13;
    uint64_t v29 = ((unint64_t)v26 + v13 + 16) & ~v13;
    unsigned int v30 = *(unsigned __int8 *)(v29 + v15);
    swift_retain();
    uint64_t v31 = v15;
    if (v30 < 2)
    {
      int v33 = v54;
    }
    else
    {
      if (v15 <= 3) {
        uint64_t v32 = v15;
      }
      else {
        uint64_t v32 = 4;
      }
      int v33 = v54;
      switch(v32)
      {
        case 1:
          int v34 = *(unsigned __int8 *)v29;
          goto LABEL_23;
        case 2:
          int v34 = *(unsigned __int16 *)v29;
          goto LABEL_23;
        case 3:
          int v34 = *(unsigned __int16 *)v29 | (*(unsigned __int8 *)(v29 + 2) << 16);
          goto LABEL_23;
        case 4:
          int v34 = *(_DWORD *)v29;
LABEL_23:
          int v35 = (v34 | ((v30 - 2) << (8 * v15))) + 2;
          unsigned int v36 = v34 + 2;
          if (v15 >= 4) {
            unsigned int v30 = v36;
          }
          else {
            unsigned int v30 = v35;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v37 = v15 + 1;
    if (v30 != 1)
    {
      *(void *)uint64_t v28 = *(void *)v29;
      *(unsigned char *)(v28 + v15) = 0;
      swift_retain();
LABEL_36:
      unint64_t v45 = ((v28 | 7) + v37) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v46 = ((v29 | 7) + v37) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v47 = *(void *)v46;
      char v48 = *(unsigned char *)(v46 + 8);
      outlined copy of Environment<Bool>.Content(*(void *)v46, v48);
      *(void *)unint64_t v45 = v47;
      *(unsigned char *)(v45 + 8) = v48;
      return a1;
    }
    uint64_t v38 = ~v12;
    uint64_t v39 = (uint64_t *)((v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v33 < 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v51 + 48))(((unint64_t)v39 + v12 + 8) & v38))
      {
LABEL_31:
        memcpy((void *)v28, (const void *)v29, __n);
LABEL_35:
        *(unsigned char *)(v28 + v31) = 1;
        goto LABEL_36;
      }
    }
    else
    {
      uint64_t v40 = *v39;
      if ((unint64_t)*v39 >= 0xFFFFFFFF) {
        LODWORD(v40) = -1;
      }
      if (v40 != -1) {
        goto LABEL_31;
      }
    }
    *(void *)uint64_t v28 = *(void *)v29;
    char v41 = (void *)((v28 + 15) & 0xFFFFFFFFFFFFFFF8);
    *char v41 = *v39;
    uint64_t v42 = ((unint64_t)v41 + v12 + 8) & v38;
    uint64_t v43 = ((unint64_t)v39 + v12 + 8) & v38;
    uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 16);
    swift_retain();
    swift_retain();
    v44(v42, v43, v52);
    goto LABEL_35;
  }
  a1 = (uint64_t *)(v17
                 + (((v12 | v7) & 0xF8 ^ 0x1F8) & ((v12 | v7) + 16)));
  swift_retain();
  return a1;
}

uint64_t destroy for SuggestedTokensView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = v5 + 8;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(((v4 & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7);
  unint64_t v8 = (a1 + *(void *)(v6 + 56) + ((v7 + 16) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v9 = type metadata accessor for AttributedString();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (unsigned __int8 *)((v8 + (v11 | 7) + 16) & ~(v11 | 7));
  if (((v11 + 16) & (unint64_t)~v11) + *(void *)(v10 + 64) <= 8) {
    uint64_t v13 = 8;
  }
  else {
    uint64_t v13 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(v9 - 8) + 64);
  }
  unsigned int v14 = v12[v13];
  unsigned int v15 = v14 - 2;
  if (v14 >= 2)
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *v12;
        goto LABEL_13;
      case 2:
        int v17 = *(unsigned __int16 *)v12;
        goto LABEL_13;
      case 3:
        int v17 = *(unsigned __int16 *)v12 | (v12[2] << 16);
        goto LABEL_13;
      case 4:
        int v17 = *(_DWORD *)v12;
LABEL_13:
        int v18 = (v17 | (v15 << (8 * v13))) + 2;
        unsigned int v14 = v17 + 2;
        if (v13 < 4) {
          unsigned int v14 = v18;
        }
        break;
      default:
        break;
    }
  }
  if (v14 != 1)
  {
    swift_release();
    goto LABEL_24;
  }
  uint64_t v19 = ~v11;
  uint64_t v20 = (uint64_t *)((unint64_t)(v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v10 + 84) & 0x80000000) != 0)
  {
    if ((*(unsigned int (**)(unint64_t))(v10 + 48))(((unint64_t)v20 + v11 + 8) & v19)) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  uint64_t v21 = *v20;
  if ((unint64_t)*v20 >= 0xFFFFFFFF) {
    LODWORD(v21) = -1;
  }
  if (v21 == -1)
  {
LABEL_23:
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v10 + 8))(((unint64_t)v20 + v11 + 8) & v19, v9);
  }
LABEL_24:
  unint64_t v22 = (unint64_t)&v12[v13 + 8] & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(void *)v22;
  char v24 = *(unsigned char *)(v22 + 8);

  return outlined consume of Environment<Bool>.Content(v23, v24);
}

void *initializeWithCopy for SuggestedTokensView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v5 + v10 + 8) & ~v10;
  uint64_t v12 = ((unint64_t)v6 + v10 + 8) & ~v10;
  swift_retain();
  swift_retain();
  v8(v11, v12, v7);
  uint64_t v13 = ((v10 + 16) & ~v10) + *(void *)(v9 + 48) + 7;
  unsigned int v14 = (void *)(((unint64_t)a2 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = v14[1];
  uint64_t v16 = (void *)(((unint64_t)a1 + v13) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v14;
  v16[1] = v15;
  uint64_t v42 = type metadata accessor for AttributedString();
  uint64_t v17 = *(void *)(v42 - 8);
  uint64_t v18 = *(unsigned int *)(v17 + 84);
  uint64_t v19 = *(_DWORD *)(v17 + 80);
  unint64_t v20 = *(_DWORD *)(v17 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = ((unint64_t)v16 + v19 + 16) & v20;
  uint64_t v22 = ((unint64_t)v14 + v19 + 16) & v20;
  uint64_t v23 = *(void *)(v17 + 64);
  size_t v24 = ((v19 + 16) & ~v19) + v23;
  if (v24 <= 8) {
    uint64_t v25 = 8;
  }
  else {
    uint64_t v25 = ((v19 + 16) & ~v19) + v23;
  }
  unsigned int v26 = *(unsigned __int8 *)(v22 + v25);
  swift_retain();
  if (v26 >= 2)
  {
    if (v25 <= 3) {
      uint64_t v27 = v25;
    }
    else {
      uint64_t v27 = 4;
    }
    switch(v27)
    {
      case 1:
        int v28 = *(unsigned __int8 *)v22;
        goto LABEL_13;
      case 2:
        int v28 = *(unsigned __int16 *)v22;
        goto LABEL_13;
      case 3:
        int v28 = *(unsigned __int16 *)v22 | (*(unsigned __int8 *)(v22 + 2) << 16);
        goto LABEL_13;
      case 4:
        int v28 = *(_DWORD *)v22;
LABEL_13:
        int v29 = (v28 | ((v26 - 2) << (8 * v25))) + 2;
        unsigned int v30 = v28 + 2;
        if (v25 >= 4) {
          unsigned int v26 = v30;
        }
        else {
          unsigned int v26 = v29;
        }
        break;
      default:
        break;
    }
  }
  if (v26 == 1)
  {
    uint64_t v31 = ~v19;
    uint64_t v32 = (uint64_t *)((v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v18 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v17 + 48))(((unint64_t)v32 + v19 + 8) & v31, v18, v42))
      {
LABEL_21:
        memcpy((void *)v21, (const void *)v22, v24);
LABEL_25:
        *(unsigned char *)(v21 + v25) = 1;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v33 = *v32;
      if ((unint64_t)*v32 >= 0xFFFFFFFF) {
        LODWORD(v33) = -1;
      }
      if (v33 != -1) {
        goto LABEL_21;
      }
    }
    *(void *)uint64_t v21 = *(void *)v22;
    int v34 = (void *)((v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v34 = *v32;
    uint64_t v35 = ((unint64_t)v34 + v19 + 8) & v31;
    unsigned int v36 = *(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16);
    swift_retain();
    swift_retain();
    v36(v35, ((unint64_t)v32 + v19 + 8) & v31, v42);
    goto LABEL_25;
  }
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + v25) = 0;
  swift_retain();
LABEL_26:
  unint64_t v37 = ((v21 | 7) + v25 + 1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = ((v22 | 7) + v25 + 1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v39 = *(void *)v38;
  char v40 = *(unsigned char *)(v38 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v38, v40);
  *(void *)unint64_t v37 = v39;
  *(unsigned char *)(v37 + 8) = v40;
  return a1;
}

void *assignWithCopy for SuggestedTokensView(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_retain();
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = ((v10 + 16) & ~v10) + *(void *)(v9 + 40) + 7;
  uint64_t v12 = (void *)(((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  uint64_t v15 = type metadata accessor for AttributedString();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = v16;
  uint64_t v18 = *(_DWORD *)(v16 + 80);
  unint64_t v19 = *(_DWORD *)(v16 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = ((unint64_t)v12 + v18 + 16) & v19;
  uint64_t v21 = ((unint64_t)v13 + v18 + 16) & v19;
  uint64_t v22 = (v18 + 16) & ~v18;
  if (v20 == v21)
  {
    unint64_t v31 = *(void *)(v16 + 64) + v22;
    if (v31 <= 8) {
      uint64_t v26 = 8;
    }
    else {
      uint64_t v26 = v31;
    }
    goto LABEL_49;
  }
  uint64_t v23 = v15;
  uint64_t v24 = *(unsigned int *)(v16 + 84);
  size_t v25 = *(void *)(v16 + 64) + v22;
  if (v25 <= 8) {
    uint64_t v26 = 8;
  }
  else {
    uint64_t v26 = *(void *)(v16 + 64) + v22;
  }
  unsigned int v27 = *(unsigned __int8 *)(v20 + v26);
  unsigned int v28 = v27 - 2;
  if (v27 >= 2)
  {
    if (v26 <= 3) {
      uint64_t v29 = v26;
    }
    else {
      uint64_t v29 = 4;
    }
    switch(v29)
    {
      case 1:
        int v30 = *(unsigned __int8 *)v20;
        goto LABEL_17;
      case 2:
        int v30 = *(unsigned __int16 *)v20;
        goto LABEL_17;
      case 3:
        int v30 = *(unsigned __int16 *)v20 | (*(unsigned __int8 *)(v20 + 2) << 16);
        goto LABEL_17;
      case 4:
        int v30 = *(_DWORD *)v20;
LABEL_17:
        int v32 = (v30 | (v28 << (8 * v26))) + 2;
        unsigned int v27 = v30 + 2;
        if (v26 < 4) {
          unsigned int v27 = v32;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v52 = ~v18;
  if (v27 == 1)
  {
    uint64_t v33 = (uint64_t *)((v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v24 & 0x80000000) == 0)
    {
      uint64_t v34 = *v33;
      if ((unint64_t)*v33 >= 0xFFFFFFFF) {
        LODWORD(v34) = -1;
      }
      if (v34 != -1) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v17 + 48))(((unint64_t)v33 + v18 + 8) & v52, v24, v15))
    {
LABEL_27:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v17 + 8))(((unint64_t)v33 + v18 + 8) & v52, v23);
    }
  }
  else
  {
    swift_release();
  }
LABEL_28:
  unsigned int v35 = *(unsigned __int8 *)(v21 + v26);
  unsigned int v36 = v35 - 2;
  if (v35 >= 2)
  {
    if (v26 <= 3) {
      uint64_t v37 = v26;
    }
    else {
      uint64_t v37 = 4;
    }
    switch(v37)
    {
      case 1:
        int v38 = *(unsigned __int8 *)v21;
        goto LABEL_37;
      case 2:
        int v38 = *(unsigned __int16 *)v21;
        goto LABEL_37;
      case 3:
        int v38 = *(unsigned __int16 *)v21 | (*(unsigned __int8 *)(v21 + 2) << 16);
        goto LABEL_37;
      case 4:
        int v38 = *(_DWORD *)v21;
LABEL_37:
        int v39 = (v38 | (v36 << (8 * v26))) + 2;
        unsigned int v35 = v38 + 2;
        if (v26 < 4) {
          unsigned int v35 = v39;
        }
        break;
      default:
        break;
    }
  }
  if (v35 == 1)
  {
    char v40 = (uint64_t *)((v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v24 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v17 + 48))(((unint64_t)v40 + v18 + 8) & v52, v24, v23))
      {
LABEL_44:
        memcpy((void *)v20, (const void *)v21, v25);
LABEL_48:
        *(unsigned char *)(v20 + v26) = 1;
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t v41 = *v40;
      if ((unint64_t)*v40 >= 0xFFFFFFFF) {
        LODWORD(v41) = -1;
      }
      if (v41 != -1) {
        goto LABEL_44;
      }
    }
    *(void *)uint64_t v20 = *(void *)v21;
    uint64_t v42 = (void *)((v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v42 = *v40;
    uint64_t v43 = ((unint64_t)v42 + v18 + 8) & v52;
    uint64_t v44 = *(void (**)(uint64_t, unint64_t, uint64_t))(v17 + 16);
    swift_retain();
    swift_retain();
    v44(v43, ((unint64_t)v40 + v18 + 8) & v52, v23);
    goto LABEL_48;
  }
  *(void *)uint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + v26) = 0;
  swift_retain();
LABEL_49:
  unint64_t v45 = ((v20 | 7) + v26 + 1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v46 = ((v21 | 7) + v26 + 1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v47 = *(void *)v46;
  char v48 = *(unsigned char *)(v46 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v46, v48);
  uint64_t v49 = *(void *)v45;
  char v50 = *(unsigned char *)(v45 + 8);
  *(void *)unint64_t v45 = v47;
  *(unsigned char *)(v45 + 8) = v48;
  outlined consume of Environment<Bool>.Content(v49, v50);
  return a1;
}

void *initializeWithTake for SuggestedTokensView(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(((unint64_t)v5 + v9 + 8) & ~v9, ((unint64_t)v6 + v9 + 8) & ~v9);
  uint64_t v10 = ((v9 + 16) & ~v9) + *(void *)(v8 + 32) + 7;
  uint64_t v11 = (_OWORD *)(((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (_OWORD *)(((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v11 = *v12;
  uint64_t v13 = type metadata accessor for AttributedString();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(_DWORD *)(v14 + 80);
  unint64_t v16 = *(_DWORD *)(v14 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = ((unint64_t)v11 + v15 + 16) & v16;
  uint64_t v18 = ((unint64_t)v12 + v15 + 16) & v16;
  uint64_t v19 = *(void *)(v14 + 64);
  size_t v20 = ((v15 + 16) & ~v15) + v19;
  if (v20 <= 8) {
    uint64_t v21 = 8;
  }
  else {
    uint64_t v21 = ((v15 + 16) & ~v15) + v19;
  }
  unsigned int v22 = *(unsigned __int8 *)(v18 + v21);
  unsigned int v23 = v22 - 2;
  if (v22 >= 2)
  {
    if (v21 <= 3) {
      uint64_t v24 = v21;
    }
    else {
      uint64_t v24 = 4;
    }
    switch(v24)
    {
      case 1:
        int v25 = *(unsigned __int8 *)v18;
        goto LABEL_13;
      case 2:
        int v25 = *(unsigned __int16 *)v18;
        goto LABEL_13;
      case 3:
        int v25 = *(unsigned __int16 *)v18 | (*(unsigned __int8 *)(v18 + 2) << 16);
        goto LABEL_13;
      case 4:
        int v25 = *(_DWORD *)v18;
LABEL_13:
        int v26 = (v25 | (v23 << (8 * v21))) + 2;
        unsigned int v22 = v25 + 2;
        if (v21 < 4) {
          unsigned int v22 = v26;
        }
        break;
      default:
        break;
    }
  }
  if (v22 == 1)
  {
    uint64_t v27 = ~v15;
    unsigned int v28 = (uint64_t *)((v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((*(_DWORD *)(v14 + 84) & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v14 + 48))(((unint64_t)v28 + v15 + 8) & v27))
      {
LABEL_20:
        memcpy((void *)v17, (const void *)v18, v20);
LABEL_24:
        char v30 = 1;
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v29 = *v28;
      if ((unint64_t)*v28 >= 0xFFFFFFFF) {
        LODWORD(v29) = -1;
      }
      if (v29 != -1) {
        goto LABEL_20;
      }
    }
    *(void *)uint64_t v17 = *(void *)v18;
    unint64_t v31 = (void *)((v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v31 = *v28;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 32))(((unint64_t)v31 + v15 + 8) & v27, ((unint64_t)v28 + v15 + 8) & v27, v13);
    goto LABEL_24;
  }
  char v30 = 0;
  *(void *)uint64_t v17 = *(void *)v18;
LABEL_25:
  *(unsigned char *)(v17 + v21) = v30;
  unint64_t v32 = ((v18 | 7) + v21 + 1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = *(void *)v32;
  unint64_t v34 = ((v17 | 7) + v21 + 1) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)(v34 + 8) = *(unsigned char *)(v32 + 8);
  *(void *)unint64_t v34 = v33;
  return a1;
}

void *assignWithTake for SuggestedTokensView(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_release();
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))(((unint64_t)v7 + v10 + 8) & ~v10, (v10 + 8 + v6) & ~v10);
  uint64_t v11 = ((v10 + 16) & ~v10) + *(void *)(v9 + 24) + 7;
  uint64_t v12 = (_OWORD *)(((unint64_t)a1 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (_OWORD *)(((unint64_t)a2 + v11) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v12 = *v13;
  swift_release();
  uint64_t v14 = type metadata accessor for AttributedString();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v15;
  uint64_t v17 = *(_DWORD *)(v15 + 80);
  unint64_t v18 = *(_DWORD *)(v15 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = ((unint64_t)v12 + v17 + 16) & v18;
  uint64_t v20 = ((unint64_t)v13 + v17 + 16) & v18;
  uint64_t v21 = (v17 + 16) & ~v17;
  if (v19 == v20)
  {
    unint64_t v30 = *(void *)(v15 + 64) + v21;
    if (v30 <= 8) {
      uint64_t v25 = 8;
    }
    else {
      uint64_t v25 = v30;
    }
    goto LABEL_49;
  }
  uint64_t v22 = v14;
  uint64_t v23 = *(unsigned int *)(v15 + 84);
  size_t v24 = *(void *)(v15 + 64) + v21;
  if (v24 <= 8) {
    uint64_t v25 = 8;
  }
  else {
    uint64_t v25 = *(void *)(v15 + 64) + v21;
  }
  unsigned int v26 = *(unsigned __int8 *)(v19 + v25);
  unsigned int v27 = v26 - 2;
  if (v26 >= 2)
  {
    if (v25 <= 3) {
      uint64_t v28 = v25;
    }
    else {
      uint64_t v28 = 4;
    }
    switch(v28)
    {
      case 1:
        int v29 = *(unsigned __int8 *)v19;
        goto LABEL_17;
      case 2:
        int v29 = *(unsigned __int16 *)v19;
        goto LABEL_17;
      case 3:
        int v29 = *(unsigned __int16 *)v19 | (*(unsigned __int8 *)(v19 + 2) << 16);
        goto LABEL_17;
      case 4:
        int v29 = *(_DWORD *)v19;
LABEL_17:
        int v31 = (v29 | (v27 << (8 * v25))) + 2;
        unsigned int v26 = v29 + 2;
        if (v25 < 4) {
          unsigned int v26 = v31;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v48 = ~v17;
  if (v26 == 1)
  {
    unint64_t v32 = (uint64_t *)((v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v23 & 0x80000000) == 0)
    {
      uint64_t v33 = *v32;
      if ((unint64_t)*v32 >= 0xFFFFFFFF) {
        LODWORD(v33) = -1;
      }
      if (v33 != -1) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(((unint64_t)v32 + v17 + 8) & v48, v23, v14))
    {
LABEL_27:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v16 + 8))(((unint64_t)v32 + v17 + 8) & v48, v22);
    }
  }
  else
  {
    swift_release();
  }
LABEL_28:
  unsigned int v34 = *(unsigned __int8 *)(v20 + v25);
  unsigned int v35 = v34 - 2;
  if (v34 >= 2)
  {
    if (v25 <= 3) {
      uint64_t v36 = v25;
    }
    else {
      uint64_t v36 = 4;
    }
    switch(v36)
    {
      case 1:
        int v37 = *(unsigned __int8 *)v20;
        goto LABEL_37;
      case 2:
        int v37 = *(unsigned __int16 *)v20;
        goto LABEL_37;
      case 3:
        int v37 = *(unsigned __int16 *)v20 | (*(unsigned __int8 *)(v20 + 2) << 16);
        goto LABEL_37;
      case 4:
        int v37 = *(_DWORD *)v20;
LABEL_37:
        int v38 = (v37 | (v35 << (8 * v25))) + 2;
        unsigned int v34 = v37 + 2;
        if (v25 < 4) {
          unsigned int v34 = v38;
        }
        break;
      default:
        break;
    }
  }
  if (v34 == 1)
  {
    int v39 = (uint64_t *)((v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v23 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v16 + 48))(((unint64_t)v39 + v17 + 8) & v48, v23, v22))
      {
LABEL_44:
        memcpy((void *)v19, (const void *)v20, v24);
LABEL_48:
        *(unsigned char *)(v19 + v25) = 1;
        goto LABEL_49;
      }
    }
    else
    {
      uint64_t v40 = *v39;
      if ((unint64_t)*v39 >= 0xFFFFFFFF) {
        LODWORD(v40) = -1;
      }
      if (v40 != -1) {
        goto LABEL_44;
      }
    }
    *(void *)uint64_t v19 = *(void *)v20;
    uint64_t v41 = (void *)((v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v41 = *v39;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v16 + 32))(((unint64_t)v41 + v17 + 8) & v48, ((unint64_t)v39 + v17 + 8) & v48, v22);
    goto LABEL_48;
  }
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + v25) = 0;
LABEL_49:
  unint64_t v42 = ((v19 | 7) + v25 + 1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v43 = ((v20 | 7) + v25 + 1) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = *(void *)v43;
  LOBYTE(v43) = *(unsigned char *)(v43 + 8);
  uint64_t v45 = *(void *)v42;
  char v46 = *(unsigned char *)(v42 + 8);
  *(void *)unint64_t v42 = v44;
  *(unsigned char *)(v42 + 8) = v43;
  outlined consume of Environment<Bool>.Content(v45, v46);
  return a1;
}

uint64_t getEnumTagSinglePayload for SuggestedTokensView(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(type metadata accessor for AttributedString() - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 + 16;
  unint64_t v12 = (v11 & ~(unint64_t)v10) + *(void *)(v9 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  if (v12 <= 8) {
    unint64_t v12 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    unint64_t v14 = ((v12
          + ((v11 + ((*(void *)(v6 + 64) + ((v13 + 16) & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8)) & (v10 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8))
          + 8) & 0xFFFFFFFFFFFFFFF8)
        + 9;
    if (v14 < 4) {
      unsigned int v15 = ((a2 - v8 + 255) >> (8 * v14)) + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      unsigned int v16 = 4;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v15 < 0x100) {
      unsigned int v16 = 1;
    }
    if (v15 >= 2) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int v18 = a1[v14];
        if (!a1[v14]) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v18 = *(unsigned __int16 *)&a1[v14];
        if (*(_WORD *)&a1[v14]) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187CF74E0);
      case 4:
        int v18 = *(_DWORD *)&a1[v14];
        if (!v18) {
          break;
        }
LABEL_24:
        int v20 = (v18 - 1) << (8 * v14);
        if (v14 >= 4) {
          int v20 = 0;
        }
        if (v14 == 1) {
          int v21 = *a1;
        }
        else {
          int v21 = *(_DWORD *)a1;
        }
        return v8 + (v21 | v20) + 1;
      default:
        break;
    }
  }
  uint64_t v22 = (uint64_t *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    size_t v24 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
    return v24(((unint64_t)v22 + v13 + 8) & ~v13, v7, v5);
  }
  else
  {
    uint64_t v23 = *v22;
    if ((unint64_t)*v22 >= 0xFFFFFFFF) {
      LODWORD(v23) = -1;
    }
    return (v23 + 1);
  }
}

void storeEnumTagSinglePayload for SuggestedTokensView(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v30 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(type metadata accessor for AttributedString() - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80) + 16;
  unint64_t v13 = (v12 & ~(unint64_t)*(_DWORD *)(v11 + 80)) + *(void *)(v11 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  unint64_t v15 = (v12 + ((*(void *)(v8 + 64) + ((v14 + 16) & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8)) & (*(_DWORD *)(v11 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = 8;
  if (v13 > 8) {
    uint64_t v16 = v13;
  }
  size_t v17 = ((v16 + v15 + 8) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v18 = 8 * v17;
  if (v10 >= a3)
  {
    int v21 = 0;
    if (v10 >= a2)
    {
LABEL_19:
      switch(v21)
      {
        case 1:
          a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 2:
          *(_WORD *)&a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)&a1[v17] = 0;
          goto LABEL_35;
        default:
LABEL_35:
          if (a2)
          {
LABEL_36:
            unsigned int v27 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v9 & 0x80000000) != 0)
            {
              int v29 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56);
              v29(((unint64_t)v27 + v14 + 8) & ~v14, a2, v9, v7);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v28 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v28 = (a2 - 1);
              }
              *unsigned int v27 = v28;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (v17 <= 3) {
      unsigned int v19 = ((a3 - v10 + 255) >> v18) + 1;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v19 >= 0x10000) {
      int v20 = 4;
    }
    else {
      int v20 = 2;
    }
    if (v19 < 0x100) {
      int v20 = 1;
    }
    if (v19 >= 2) {
      int v21 = v20;
    }
    else {
      int v21 = 0;
    }
    if (v10 >= a2) {
      goto LABEL_19;
    }
  }
  unsigned int v22 = ~v10 + a2;
  unsigned int v23 = v22 >> v18;
  unsigned int v24 = (~(_BYTE)v10 + a2);
  if (v17 < 4) {
    int v25 = v23 + 1;
  }
  else {
    int v25 = 1;
  }
  if (v17 >= 4) {
    unsigned int v26 = v22;
  }
  else {
    unsigned int v26 = v24;
  }
  bzero(a1, v17);
  if (v17 == 1) {
    *a1 = v26;
  }
  else {
    *(_DWORD *)a1 = v26;
  }
  switch(v21)
  {
    case 1:
      a1[v17] = v25;
      break;
    case 2:
      *(_WORD *)&a1[v17] = v25;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x187CF77C4);
    case 4:
      *(_DWORD *)&a1[v17] = v25;
      break;
    default:
      return;
  }
}

uint64_t associated type witness table accessor for View.Body : View in SuggestedTokensView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187CF7838()
{
  long long v10 = *(_OWORD *)(v0 + 16);
  uint64_t v1 = type metadata accessor for SuggestedTokensView();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  swift_release();
  uint64_t v3 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, void))(*(void *)(v10 - 8) + 8))(v2 + *(int *)(v3 + 32), v10);
  swift_release();
  uint64_t v4 = v2 + *(int *)(v1 + 72);
  type metadata accessor for Environment<Binding<AttributedString>?>.Content(0, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<AttributedString>();
    uint64_t v6 = v5;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
    {
      swift_release();
      swift_release();
      uint64_t v7 = v4 + *(int *)(v6 + 32);
      uint64_t v8 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    }
  }
  else
  {
    swift_release();
  }
  outlined consume of Environment<Bool>.Content(*(void *)(v2 + *(int *)(v1 + 76)), *(unsigned char *)(v2 + *(int *)(v1 + 76) + 8));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SuggestedTokensView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = v2[6];
  uint64_t v10 = v2[7];
  uint64_t v11 = *(void *)(type metadata accessor for SuggestedTokensView() - 8);
  uint64_t v12 = (uint64_t)v2 + ((*(unsigned __int8 *)(v11 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));

  return closure #1 in SuggestedTokensView.body.getter(a1, v12, v5, v6, v7, v8, v9, v10, a2);
}

uint64_t partial apply for closure #1 in closure #1 in SuggestedTokensView.body.getter()
{
  return closure #1 in closure #1 in SuggestedTokensView.body.getter(v0[8], v0[9], v0[2], v0[3]);
}

uint64_t outlined destroy of Binding<AttributedString>?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for closure #1 in SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in SearchModifier.init<A, B>(text:tokens:isPresented:placement:prompt:token:)(*(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(unsigned char *)(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 112), a1, *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_187CF7C0C()
{
  return swift_getWitnessTable();
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000010;
  }
  else {
    unint64_t v3 = 0x696C696269736976;
  }
  if (v2) {
    unint64_t v4 = 0xEA00000000007974;
  }
  else {
    unint64_t v4 = 0x8000000188326030;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000010;
  }
  else {
    unint64_t v5 = 0x696C696269736976;
  }
  if (a2) {
    unint64_t v6 = 0x8000000188326030;
  }
  else {
    unint64_t v6 = 0xEA00000000007974;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000012;
  }
  else {
    unint64_t v3 = 0x736D657469;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0x8000000188325FC0;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000012;
  }
  else {
    unint64_t v5 = 0x736D657469;
  }
  if (a2) {
    unint64_t v6 = 0x8000000188325FC0;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x7469617274726F70;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x7469617274726F70;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0x8000000188325FF0;
      unint64_t v5 = 0xD000000000000012;
      break;
    case 2:
      unint64_t v5 = 0x70616373646E616CLL;
      unint64_t v3 = 0xED00007466654C65;
      break;
    case 3:
      unint64_t v5 = 0x70616373646E616CLL;
      unint64_t v3 = 0xEE00746867695265;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0x8000000188325FF0;
      if (v5 == 0xD000000000000012) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = 0x70616373646E616CLL;
      unint64_t v6 = 0xED00007466654C65;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xEE00746867695265;
      if (v5 == 0x70616373646E616CLL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

void static PreviewProvider.platform.getter(unsigned char *a1@<X8>)
{
}

{
  *a1 = 4;
}

uint64_t static PreviewProvider._previews.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 32);
  a3[3] = swift_getAssociatedTypeWitness();
  __swift_allocate_boxed_opaque_existential_1(a3);
  return v6(a1, a2);
}

uint64_t static PreviewProvider._platform.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

BOOL static PreviewPlatform.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PreviewPlatform.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int PreviewPlatform.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t PreviewDevice.rawValue.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

SwiftUI::PreviewDevice __swiftcall PreviewDevice.init(stringLiteral:)(SwiftUI::PreviewDevice stringLiteral)
{
  *uint64_t v1 = stringLiteral;
  return stringLiteral;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance PreviewDevice@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance InterfaceOrientation.Orientation(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance InterfaceOrientation.Orientation()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance InterfaceOrientation.Orientation()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance InterfaceOrientation.Orientation()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance InterfaceOrientation.Orientation@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = specialized InterfaceOrientation.Orientation.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance InterfaceOrientation.Orientation(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  unint64_t v3 = 0x7469617274726F70;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0x8000000188325FF0;
      unint64_t v3 = 0xD000000000000012;
      goto LABEL_3;
    case 2:
      unint64_t v4 = 0xED00007466654C65;
      goto LABEL_6;
    case 3:
      unint64_t v4 = 0xEE00746867695265;
LABEL_6:
      *a1 = 0x70616373646E616CLL;
      a1[1] = v4;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

void protocol witness for static CaseIterable.allCases.getter in conformance InterfaceOrientation.Orientation(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance InterfaceOrientation.Orientation;
}

void protocol witness for Identifiable.id.getter in conformance InterfaceOrientation.Orientation(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE800000000000000;
  unint64_t v3 = 0x7469617274726F70;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0x8000000188325FF0;
      unint64_t v3 = 0xD000000000000012;
      goto LABEL_3;
    case 2:
      unint64_t v4 = 0xED00007466654C65;
      goto LABEL_6;
    case 3:
      unint64_t v4 = 0xEE00746867695265;
LABEL_6:
      *a1 = 0x70616373646E616CLL;
      a1[1] = v4;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

unint64_t InterfaceOrientation.id.getter()
{
  unint64_t result = 0x7469617274726F70;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0xD000000000000012;
      break;
    case 2:
    case 3:
      unint64_t result = 0x70616373646E616CLL;
      break;
    default:
      return result;
  }
  return result;
}

void static InterfaceOrientation.portrait.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static InterfaceOrientation.portraitUpsideDown.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static InterfaceOrientation.landscapeLeft.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static InterfaceOrientation.landscapeRight.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t static InterfaceOrientation.== infix(_:_:)(unsigned __int8 *a1, unsigned char *a2)
{
  uint64_t v2 = 0x7469617274726F70;
  uint64_t v3 = *a1;
  unint64_t v4 = 0xE800000000000000;
  unint64_t v5 = 0x7469617274726F70;
  switch(v3)
  {
    case 1:
      unint64_t v4 = 0x8000000188325FF0;
      unint64_t v5 = 0xD000000000000012;
      break;
    case 2:
      unint64_t v5 = 0x70616373646E616CLL;
      unint64_t v4 = 0xED00007466654C65;
      break;
    case 3:
      unint64_t v5 = 0x70616373646E616CLL;
      unint64_t v4 = 0xEE00746867695265;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(*a2)
  {
    case 1:
      unint64_t v6 = 0x8000000188325FF0;
      if (v5 == 0xD000000000000012) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = 0x70616373646E616CLL;
      unint64_t v6 = 0xED00007466654C65;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xEE00746867695265;
      if (v5 == 0x70616373646E616CLL) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v4 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance InterfaceOrientation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized static InterfaceOrientation.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t View.previewDevice(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.previewLayout(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.previewDisplayName(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.previewContext<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v9[3] = a3;
  void v9[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16))(boxed_opaque_existential_1, a1, a3);
  View._trait<A>(_:_:)();
  return outlined destroy of PreviewContext?((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PreviewContext?);
}

uint64_t View.previewInterfaceOrientation(_:)()
{
  return View._trait<A>(_:_:)();
}

void static PreviewDeviceTraitKey.defaultValue.getter(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t static PreviewLayoutTraitKey.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4F252F8];
  uint64_t v3 = type metadata accessor for PreviewLayout();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance PreviewLayoutTraitKey@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *MEMORY[0x1E4F252F8];
  uint64_t v3 = type metadata accessor for PreviewLayout();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104);

  return v4(a1, v2, v3);
}

uint64_t static PreviewDisplayNameTraitKey.defaultValue.getter()
{
  return 0;
}

double static PreviewContextTraitKey.defaultValue.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t static _PreviewProvider._allPreviews.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 8))(v6);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  outlined init with copy of Any((uint64_t)v6, (uint64_t)v4);
  __swift_project_boxed_opaque_existential_1(v4, v4[3]);
  swift_getDynamicType();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  static ProtocolDescriptor.conformance(of:)();
  uint64_t result = v5;
  if (v5)
  {
    MakePreviews.visit<A>(type:)(v5, v5);
    uint64_t v3 = v7;
    swift_bridgeObjectRetain();
    outlined destroy of MakePreviews((uint64_t)v6);
    return v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t MakePreviews.visit<A>(type:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = &v10[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(v2, (uint64_t)v10);
  swift_dynamicCast();
  uint64_t v8 = View._allPreviews.getter();
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, a2);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v3 + 32) = v8;
  return result;
}

uint64_t View._allPreviews.getter()
{
  type metadata accessor for [FrameResizePosition](0, &lazy cache variable for type metadata for [_Preview]);
  EnvironmentValues.init()();
  View.withChildrenForTest<A>(environment:options:body:)();
  swift_release();
  swift_release();
  return v1;
}

uint64_t closure #1 in View._allPreviews.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v37);
  uint64_t v36 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  outlined init with copy of EnumeratedSequence<_VariadicView_Children>((uint64_t)v37, (uint64_t)v33);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  if (_VariadicView_Children.endIndex.getter())
  {
    uint64_t v3 = 0;
    uint64_t v4 = MEMORY[0x1E4F40A20];
    while (1)
    {
      _VariadicView_Children.subscript.getter();
      uint64_t result = _VariadicView_Children.endIndex.getter();
      if (v3 < 0 || v3 >= result) {
        break;
      }
      uint64_t v34 = v3 + 1;
      *(_OWORD *)&v29[40] = v22;
      *(_OWORD *)&v29[56] = v23;
      *(_OWORD *)&v29[72] = v24;
      *(_OWORD *)&v29[88] = v25;
      *(_OWORD *)&v29[8] = v20;
      *(_OWORD *)&v29[24] = v21;
      uint64_t v6 = v35;
      if (__OFADD__(v35, 1)) {
        goto LABEL_15;
      }
      ++v35;
      v32[2] = *(_OWORD *)&v29[40];
      v32[3] = *(_OWORD *)&v29[56];
      v32[4] = *(_OWORD *)&v29[72];
      v32[5] = *(_OWORD *)&v29[88];
      v32[0] = *(_OWORD *)&v29[8];
      v32[1] = *(_OWORD *)&v29[24];
      uint64_t v31 = v6;
      uint64_t v27 = v6;
      outlined init with copy of _VariadicView_Children.Element((uint64_t)v32, (uint64_t)v28);
      outlined init with copy of _VariadicView_Children.Element((uint64_t)v28, (uint64_t)&v20);
      *(void *)&long long v26 = v6;
      *(void *)int v29 = v4;
      type metadata accessor for _VariadicView_Children.Element.Type();
      uint64_t v7 = String.init<A>(describing:)();
      uint64_t v9 = v8;
      outlined destroy of _VariadicView_Children.Element((uint64_t)v28);
      *((void *)&v26 + 1) = v7;
      uint64_t v30 = v9;
      *(_OWORD *)&v29[64] = v24;
      *(_OWORD *)&v29[80] = v25;
      *(_OWORD *)int v29 = v20;
      *(_OWORD *)&v29[16] = v21;
      *(_OWORD *)&unsigned char v29[32] = v22;
      *(_OWORD *)&v29[48] = v23;
      *(_OWORD *)&v29[96] = v26;
      outlined destroy of PreviewContext?((uint64_t)&v31, (uint64_t (*)(void))type metadata accessor for (offset: Int, element: _VariadicView_Children.Element));
      uint64_t v10 = v36;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v10 + 16) + 1, 1);
        uint64_t v10 = v36;
      }
      unint64_t v12 = *(void *)(v10 + 16);
      unint64_t v11 = *(void *)(v10 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
        uint64_t v10 = v36;
      }
      *(void *)(v10 + 16) = v12 + 1;
      uint64_t v13 = v10 + 120 * v12;
      long long v14 = *(_OWORD *)v29;
      long long v15 = *(_OWORD *)&v29[16];
      long long v16 = *(_OWORD *)&v29[48];
      *(_OWORD *)(v13 + 64) = *(_OWORD *)&v29[32];
      *(_OWORD *)(v13 + 80) = v16;
      *(_OWORD *)(v13 + 32) = v14;
      *(_OWORD *)(v13 + 48) = v15;
      long long v17 = *(_OWORD *)&v29[64];
      long long v18 = *(_OWORD *)&v29[80];
      long long v19 = *(_OWORD *)&v29[96];
      *(void *)(v13 + 144) = v30;
      *(_OWORD *)(v13 + 112) = v18;
      *(_OWORD *)(v13 + 128) = v19;
      *(_OWORD *)(v13 + 96) = v17;
      uint64_t v3 = v34;
      if (v3 == _VariadicView_Children.endIndex.getter()) {
        goto LABEL_13;
      }
    }
    __break(1u);
LABEL_15:
    __break(1u);
  }
  else
  {
    uint64_t v10 = v36;
LABEL_13:
    _ss18EnumeratedSequenceVy7SwiftUI22_VariadicView_ChildrenVGWOhTm_0((uint64_t)v33, &lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>.Iterator, MEMORY[0x1E4FBBCF0]);
    uint64_t result = _ss18EnumeratedSequenceVy7SwiftUI22_VariadicView_ChildrenVGWOhTm_0((uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>, MEMORY[0x1E4FBBCF8]);
    *a2 = v10;
  }
  return result;
}

uint64_t _Preview.id.getter()
{
  return *(void *)(v0 + 96);
}

uint64_t _Preview.contentType.getter()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t _Preview.content.getter()
{
  outlined init with copy of _ViewList_View(v0, (uint64_t)v2);
  return AnyView.init<A>(_:)();
}

uint64_t _Preview.context.getter()
{
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v3 = 0;
  memset(v2, 0, sizeof(v2));
  ViewTraitCollection.value<A>(for:defaultValue:)();
  return outlined destroy of PreviewContext?((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for PreviewContext?);
}

uint64_t _Preview.displayName.getter()
{
  ViewTraitCollection.value<A>(for:defaultValue:)();
  return v1;
}

uint64_t _Preview.device.getter()
{
  return ViewTraitCollection.value<A>(for:defaultValue:)();
}

uint64_t _Preview.layout.getter()
{
  uint64_t v1 = type metadata accessor for PreviewLayout();
  uint64_t v2 = *(void *)(v1 - 8);
  double v3 = MEMORY[0x1F4188790](v1);
  uint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[1] = *(void *)(v0 + 88);
  (*(void (**)(char *, void, uint64_t, double))(v2 + 104))(v5, *MEMORY[0x1E4F252F8], v1, v3);
  ViewTraitCollection.value<A>(for:defaultValue:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
}

uint64_t _Preview.interfaceOrientation.getter()
{
  return ViewTraitCollection.value<A>(for:defaultValue:)();
}

uint64_t _Preview.colorScheme.getter()
{
  return ViewTraitCollection.value<A>(for:defaultValue:)();
}

unint64_t specialized InterfaceOrientation.Orientation.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of InterfaceOrientation.Orientation.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t specialized static InterfaceOrientation.allCases.getter()
{
  uint64_t v13 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 4, 0);
  uint64_t v0 = v13;
  char v1 = byte_1ED4312E8;
  unint64_t v3 = *(void *)(v13 + 16);
  unint64_t v2 = *(void *)(v13 + 24);
  int64_t v4 = v2 >> 1;
  unint64_t v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1);
    uint64_t v0 = v13;
    unint64_t v2 = *(void *)(v13 + 24);
    int64_t v4 = v2 >> 1;
  }
  *(void *)(v0 + 16) = v5;
  *(unsigned char *)(v0 + v3 + 32) = v1;
  char v6 = byte_1ED4312E9;
  unint64_t v7 = v3 + 2;
  if (v4 < (uint64_t)(v3 + 2))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 2, 1);
    uint64_t v0 = v13;
    unint64_t v2 = *(void *)(v13 + 24);
    int64_t v4 = v2 >> 1;
  }
  *(void *)(v0 + 16) = v7;
  *(unsigned char *)(v0 + v5 + 32) = v6;
  char v8 = byte_1ED4312EA;
  unint64_t v9 = v3 + 3;
  if (v4 < (uint64_t)(v3 + 3)) {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 3, 1);
  }
  uint64_t result = v13;
  *(void *)(v13 + 16) = v9;
  *(unsigned char *)(v13 + v7 + 32) = v8;
  char v11 = byte_1ED4312EB;
  unint64_t v12 = *(void *)(v13 + 24);
  if ((uint64_t)(v3 + 4) > (uint64_t)(v12 >> 1))
  {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v3 + 4, 1);
    uint64_t result = v13;
  }
  *(void *)(result + 16) = v3 + 4;
  *(unsigned char *)(result + v9 + 32) = v11;
  return result;
}

void type metadata accessor for PreviewContext?()
{
  if (!lazy cache variable for type metadata for PreviewContext?)
  {
    type metadata accessor for PreviewContext();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PreviewContext?);
    }
  }
}

unint64_t type metadata accessor for PreviewContext()
{
  unint64_t result = lazy cache variable for type metadata for PreviewContext;
  if (!lazy cache variable for type metadata for PreviewContext)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PreviewContext);
  }
  return result;
}

uint64_t outlined destroy of MakePreviews(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type PreviewPlatform and conformance PreviewPlatform()
{
  unint64_t result = lazy protocol witness table cache variable for type PreviewPlatform and conformance PreviewPlatform;
  if (!lazy protocol witness table cache variable for type PreviewPlatform and conformance PreviewPlatform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewPlatform and conformance PreviewPlatform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PreviewDevice and conformance PreviewDevice()
{
  unint64_t result = lazy protocol witness table cache variable for type PreviewDevice and conformance PreviewDevice;
  if (!lazy protocol witness table cache variable for type PreviewDevice and conformance PreviewDevice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewDevice and conformance PreviewDevice);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PreviewDevice and conformance PreviewDevice;
  if (!lazy protocol witness table cache variable for type PreviewDevice and conformance PreviewDevice)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PreviewDevice and conformance PreviewDevice);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByStringLiteral.StringLiteralType : _ExpressibleByBuiltinStringLiteral in PreviewDevice()
{
  return MEMORY[0x1E4FBB220];
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in PreviewDevice()
{
  return MEMORY[0x1E4FBB230];
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in PreviewDevice()
{
  return MEMORY[0x1E4FBB228];
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in InterfaceOrientation()
{
  return lazy protocol witness table accessor for type [FrameResizePosition] and conformance [A](&lazy protocol witness table cache variable for type [InterfaceOrientation] and conformance [A], &lazy cache variable for type metadata for [InterfaceOrientation]);
}

uint64_t dispatch thunk of static _PreviewProviderLocator.previewProviders.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static _PreviewProvider._previews.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static _PreviewProvider._platform.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of static PreviewProvider.previews.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of static PreviewProvider.platform.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

ValueMetadata *type metadata accessor for PreviewPlatform()
{
  return &type metadata for PreviewPlatform;
}

ValueMetadata *type metadata accessor for PreviewDevice()
{
  return &type metadata for PreviewDevice;
}

uint64_t dispatch thunk of static PreviewContextKey.defaultValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of PreviewContext.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for InterfaceOrientation()
{
  return &type metadata for InterfaceOrientation;
}

ValueMetadata *type metadata accessor for PreviewDeviceTraitKey()
{
  return &type metadata for PreviewDeviceTraitKey;
}

ValueMetadata *type metadata accessor for PreviewLayoutTraitKey()
{
  return &type metadata for PreviewLayoutTraitKey;
}

ValueMetadata *type metadata accessor for PreviewDisplayNameTraitKey()
{
  return &type metadata for PreviewDisplayNameTraitKey;
}

ValueMetadata *type metadata accessor for PreviewInterfaceOrientationTraitKey()
{
  return &type metadata for PreviewInterfaceOrientationTraitKey;
}

ValueMetadata *type metadata accessor for PreviewContextTraitKey()
{
  return &type metadata for PreviewContextTraitKey;
}

uint64_t destroy for _Preview(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _Preview(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  char v6 = *(void **)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v5;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_retain();
  swift_bridgeObjectRetain();
  id v7 = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _Preview(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v4 = *(void **)(a1 + 80);
  uint64_t v5 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v5;
  id v6 = v5;

  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for _Preview(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  id v6 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);

  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _Preview()
{
  return &type metadata for _Preview;
}

uint64_t sub_187CF9C0C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<PreviewDeviceTraitKey>, (uint64_t)&type metadata for PreviewDeviceTraitKey, (uint64_t)&protocol witness table for PreviewDeviceTraitKey, &lazy protocol witness table cache variable for type _TraitWritingModifier<PreviewDeviceTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t sub_187CF9C30(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<PreviewLayoutTraitKey>, (uint64_t)&type metadata for PreviewLayoutTraitKey, (uint64_t)&protocol witness table for PreviewLayoutTraitKey, &lazy protocol witness table cache variable for type _TraitWritingModifier<PreviewLayoutTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t sub_187CF9C54(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<PreviewDisplayNameTraitKey>, (uint64_t)&type metadata for PreviewDisplayNameTraitKey, (uint64_t)&protocol witness table for PreviewDisplayNameTraitKey, &lazy protocol witness table cache variable for type _TraitWritingModifier<PreviewDisplayNameTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t sub_187CF9C78()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CF9D30(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(a1, &lazy cache variable for type metadata for _TraitWritingModifier<PreviewInterfaceOrientationTraitKey>, (uint64_t)&type metadata for PreviewInterfaceOrientationTraitKey, (uint64_t)&protocol witness table for PreviewInterfaceOrientationTraitKey, &lazy protocol witness table cache variable for type _TraitWritingModifier<PreviewInterfaceOrientationTraitKey> and conformance _TraitWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA21_TraitWritingModifierVyAA013PreviewDeviceF3KeyVGGAaBHPxAaBHD1__AiA0cH0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for PreviewPlatform(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    void *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187CF9EBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for InterfaceOrientation.Orientation()
{
  return &unk_1ED431220;
}

ValueMetadata *type metadata accessor for PreviewDescriptor()
{
  return &type metadata for PreviewDescriptor;
}

uint64_t destroy for MakePreviews(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MakePreviews(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for MakePreviews(uint64_t *a1, uint64_t *a2)
{
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MakePreviews(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for MakePreviews()
{
  return &unk_1ED411A78;
}

uint64_t associated type witness table accessor for CaseIterable.AllCases : Collection in InterfaceOrientation.Orientation()
{
  return lazy protocol witness table accessor for type [FrameResizePosition] and conformance [A](&lazy protocol witness table cache variable for type [InterfaceOrientation.Orientation] and conformance [A], &lazy cache variable for type metadata for [InterfaceOrientation.Orientation]);
}

unint64_t lazy protocol witness table accessor for type InterfaceOrientation.Orientation and conformance InterfaceOrientation.Orientation()
{
  unint64_t result = lazy protocol witness table cache variable for type InterfaceOrientation.Orientation and conformance InterfaceOrientation.Orientation;
  if (!lazy protocol witness table cache variable for type InterfaceOrientation.Orientation and conformance InterfaceOrientation.Orientation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InterfaceOrientation.Orientation and conformance InterfaceOrientation.Orientation);
  }
  return result;
}

unint64_t type metadata accessor for _VariadicView_Children.Element.Type()
{
  unint64_t result = lazy cache variable for type metadata for _VariadicView_Children.Element.Type;
  if (!lazy cache variable for type metadata for _VariadicView_Children.Element.Type)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _VariadicView_Children.Element.Type);
  }
  return result;
}

uint64_t outlined destroy of PreviewContext?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _ss18EnumeratedSequenceVy7SwiftUI22_VariadicView_ChildrenVGWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void, unint64_t))
{
  type metadata accessor for EnumeratedSequence<_VariadicView_Children>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for EnumeratedSequence<_VariadicView_Children>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    unint64_t v7 = a3(a1, MEMORY[0x1E4F40A38], v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void static ScrollAnchorRole.initialOffset.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static ScrollAnchorRole.sizeChanges.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ScrollAnchorRole.alignment.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void ScrollAnchorRole.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static ScrollAnchorRole.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int ScrollAnchorRole.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double key path getter for EnvironmentValues.scrollAnchors : EnvironmentValues@<D0>(uint64_t a1@<X8>)
{
  EnvironmentValues.scrollAnchors.getter();
  *(void *)a1 = v3;
  double result = *(double *)&v4;
  *(_OWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  return result;
}

double sub_187CFA32C@<D0>(uint64_t a1@<X8>)
{
  EnvironmentValues.scrollAnchors.getter();
  *(void *)a1 = v3;
  double result = *(double *)&v4;
  *(_OWORD *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  return result;
}

uint64_t key path setter for EnvironmentValues.scrollAnchors : EnvironmentValues()
{
  return EnvironmentValues.scrollAnchors.setter();
}

uint64_t sub_187CFA3D0()
{
  return EnvironmentValues.scrollAnchors.setter();
}

uint64_t sub_187CFA420()
{
  return swift_deallocObject();
}

uint64_t View.defaultScrollAnchor(_:for:)(uint64_t a1, uint64_t a2, char a3, char *a4)
{
  char v7 = *a4;
  swift_getKeyPath();
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  *(unsigned char *)(v8 + 32) = a3 & 1;
  *(unsigned char *)(v8 + 33) = v7;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();

  return swift_release();
}

uint64_t sub_187CFA508()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.defaultScrollAnchor(_:for:)()
{
  if ((*(unsigned char *)(v0 + 32) & 1) == 0) {
    return ScrollAnchorStorage.updateRole(_:anchor:)();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollAnchorRole and conformance ScrollAnchorRole()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollAnchorRole and conformance ScrollAnchorRole;
  if (!lazy protocol witness table cache variable for type ScrollAnchorRole and conformance ScrollAnchorRole)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollAnchorRole and conformance ScrollAnchorRole);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ScrollAnchorRole(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187CFA684);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollAnchorRole()
{
  return &type metadata for ScrollAnchorRole;
}

uint64_t sub_187CFA6BC()
{
  return swift_getWitnessTable();
}

uint64_t View.popoverCore<A, B>(item:attachmentAnchor:arrowEdges:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v37 = a6;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  int v34 = a3;
  uint64_t v31 = a1;
  uint64_t v35 = a9;
  v29[3] = a12;
  v29[4] = a8;
  uint64_t v36 = a10;
  v29[1] = a7;
  _DWORD v29[2] = a11;
  type metadata accessor for Optional();
  uint64_t v30 = type metadata accessor for Binding();
  uint64_t v15 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  long long v17 = (char *)v29 - v16;
  uint64_t v38 = a7;
  uint64_t v39 = a8;
  uint64_t v40 = a11;
  uint64_t v41 = a12;
  uint64_t v18 = type metadata accessor for PopoverItemStateProvider();
  MEMORY[0x1F4188790](v18);
  long long v20 = (char *)v29 - v19;
  v29[0] = swift_getWitnessTable();
  uint64_t v21 = type metadata accessor for PopoverPresentationModifier();
  uint64_t v22 = *(void *)(v21 - 8);
  double v23 = MEMORY[0x1F4188790](v21);
  long long v25 = (char *)v29 - v24;
  uint64_t v26 = *(void *)a2;
  uint64_t v27 = *(void *)(a2 + 8);
  LOBYTE(a2) = *(unsigned char *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, v31, v30, v23);
  PopoverItemStateProvider.init(item:content:)((uint64_t)v17, v32, v33, (uint64_t)v20);
  uint64_t v38 = v26;
  uint64_t v39 = v27;
  LOBYTE(v40) = a2;
  PopoverPresentationModifier.init(provider:attachmentAnchor:arrowEdges:isDetachable:keyType:attachmentBehavior:)((uint64_t)v20, &v38, v34 & 0x1FF, 0, 1, 0, v18, (uint64_t)v25);
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v26, v27, a2);
  MEMORY[0x18C113660](v25, v37, v21, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v25, v21);
}

uint64_t View.popover<A, B>(item:attachmentAnchor:arrowEdge:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v41 = a6;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v38 = a3;
  uint64_t v39 = a9;
  uint64_t v35 = a1;
  v32[2] = a12;
  v32[3] = a8;
  uint64_t v40 = a10;
  v32[0] = a7;
  v32[1] = a11;
  type metadata accessor for Optional();
  uint64_t v33 = type metadata accessor for Binding();
  uint64_t v15 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  long long v17 = (char *)v32 - v16;
  uint64_t v42 = a7;
  uint64_t v43 = a8;
  uint64_t v44 = a11;
  uint64_t v45 = a12;
  uint64_t v18 = type metadata accessor for PopoverItemStateProvider();
  MEMORY[0x1F4188790](v18);
  long long v20 = (char *)v32 - v19;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v21 = type metadata accessor for PopoverPresentationModifier();
  uint64_t v22 = *(void *)(v21 - 8);
  double v23 = MEMORY[0x1F4188790](v21);
  long long v25 = (char *)v32 - v24;
  uint64_t v26 = *(void *)a2;
  uint64_t v27 = *(void *)(a2 + 8);
  LOBYTE(a2) = *(unsigned char *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, v35, v33, v23);
  PopoverItemStateProvider.init(item:content:)((uint64_t)v17, v36, v37, (uint64_t)v20);
  uint64_t v42 = v26;
  uint64_t v43 = v27;
  LOBYTE(v44) = a2;
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v26, v27, a2);
  static Semantics.v6.getter();
  char v28 = isLinkedOnOrAfter(_:)();
  int v29 = 1 << v38;
  if ((v38 & 0xF8) != 0) {
    LOBYTE(v29) = 0;
  }
  if (v38 <= 8u) {
    unsigned __int8 v30 = v29;
  }
  else {
    unsigned __int8 v30 = 0;
  }
  if ((v28 & 1) == 0) {
    unsigned __int8 v30 = 0;
  }
  PopoverPresentationModifier.init(provider:attachmentAnchor:arrowEdges:isDetachable:keyType:attachmentBehavior:)((uint64_t)v20, &v42, v30 | (((v28 & 1) == 0) << 8), 0, 1, 0, v18, (uint64_t)v25);
  MEMORY[0x18C113660](v25, v41, v21, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v25, v21);
}

int *PopoverPresentationModifier.init(provider:attachmentAnchor:arrowEdges:isDetachable:keyType:attachmentBehavior:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int16 a3@<W2>, char a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v11 = a5 & 1;
  char v12 = a6 & 1;
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  char v15 = *((unsigned char *)a2 + 16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a8, a1, a7);
  unint64_t result = (int *)type metadata accessor for PopoverPresentationModifier();
  uint64_t v17 = a8 + result[9];
  *(void *)uint64_t v17 = v13;
  *(void *)(v17 + 8) = v14;
  *(unsigned char *)(v17 + 16) = v15;
  uint64_t v18 = (unsigned char *)(a8 + result[10]);
  *uint64_t v18 = a3;
  v18[1] = HIBYTE(a3) & 1;
  *(unsigned char *)(a8 + result[11]) = a4;
  *(unsigned char *)(a8 + result[12]) = v11;
  *(unsigned char *)(a8 + result[13]) = v12;
  return result;
}

uint64_t View.popoverCore<A>(isPresented:attachmentAnchor:arrowEdges:isDetachable:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, __int16 a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v13 = *(void *)a4;
  uint64_t v14 = *(void *)(a4 + 8);
  char v15 = *(unsigned char *)(a4 + 16);
  v21[0] = a1;
  v21[1] = a2;
  char v22 = a3;
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v27 = 0;
  v19[0] = v13;
  v19[1] = v14;
  char v20 = v15;
  uint64_t v16 = type metadata accessor for PopoverConditionalStateProvider();
  swift_getWitnessTable();
  PopoverPresentationModifier.init(provider:attachmentAnchor:arrowEdges:isDetachable:keyType:attachmentBehavior:)((uint64_t)v21, v19, a5 & 0x1FF, a6, 1, 0, v16, (uint64_t)v28);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v13, v14, v15);
  uint64_t v17 = type metadata accessor for PopoverPresentationModifier();
  MEMORY[0x18C113660](v28, a9, v17, a11);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v17 - 8) + 8))(v28, v17);
}

uint64_t View.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v12 = *(void *)a4;
  uint64_t v11 = *(void *)(a4 + 8);
  char v13 = *(unsigned char *)(a4 + 16);
  v25[0] = a1;
  v25[1] = a2;
  char v26 = a3;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v31 = 0;
  v23[0] = v12;
  v23[1] = v11;
  char v24 = v13;
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v12, v11, v13);
  static Semantics.v6.getter();
  char v14 = isLinkedOnOrAfter(_:)();
  int v15 = 1 << a5;
  if ((a5 & 0xF8) != 0) {
    LOBYTE(v15) = 0;
  }
  if (a5 <= 8u) {
    unsigned __int8 v16 = v15;
  }
  else {
    unsigned __int8 v16 = 0;
  }
  if (v14) {
    unsigned __int8 v17 = v16;
  }
  else {
    unsigned __int8 v17 = 0;
  }
  char v18 = ~v14;
  uint64_t v19 = type metadata accessor for PopoverConditionalStateProvider();
  swift_getWitnessTable();
  PopoverPresentationModifier.init(provider:attachmentAnchor:arrowEdges:isDetachable:keyType:attachmentBehavior:)((uint64_t)v25, v23, v17 | ((v18 & 1) << 8), 0, 1, 0, v19, (uint64_t)v32);
  uint64_t v20 = type metadata accessor for PopoverPresentationModifier();
  MEMORY[0x18C113660](v32, a8, v20, a10);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v20 - 8) + 8))(v32, v20);
}

double PopoverConditionalStateProvider.init(isPresented:content:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3;
  *(void *)(a6 + 24) = a4;
  *(void *)(a6 + 32) = a5;
  double result = 0.0;
  *(_OWORD *)(a6 + 40) = 0u;
  *(_OWORD *)(a6 + 56) = 0u;
  *(void *)(a6 + 72) = 0;
  return result;
}

void View.popover<A>(isPresented:isDetachable:attachmentAnchor:arrowEdge:content:)()
{
}

uint64_t View.popover<A>(isPresented:attachmentAnchor:arrowEdges:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned __int8 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = *(void *)a4;
  uint64_t v12 = *(void *)(a4 + 8);
  char v13 = *(unsigned char *)(a4 + 16);
  v20[0] = a1;
  v20[1] = a2;
  char v21 = a3;
  uint64_t v22 = a6;
  uint64_t v23 = a7;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v26 = 0;
  v18[0] = v11;
  v18[1] = v12;
  char v19 = v13;
  uint64_t v14 = type metadata accessor for PopoverConditionalStateProvider();
  swift_getWitnessTable();
  PopoverPresentationModifier.init(provider:attachmentAnchor:arrowEdges:isDetachable:keyType:attachmentBehavior:)((uint64_t)v20, v18, a5, 0, 1, 0, v14, (uint64_t)v27);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v11, v12, v13);
  uint64_t v15 = type metadata accessor for PopoverPresentationModifier();
  MEMORY[0x18C113660](v27, a8, v15, a10);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v15 - 8) + 8))(v27, v15);
}

uint64_t View.popover<A, B>(item:attachmentAnchor:arrowEdges:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v37 = a6;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  int v34 = a3;
  uint64_t v31 = a1;
  uint64_t v35 = a9;
  v29[3] = a12;
  v29[4] = a8;
  uint64_t v36 = a10;
  v29[1] = a7;
  _DWORD v29[2] = a11;
  type metadata accessor for Optional();
  uint64_t v30 = type metadata accessor for Binding();
  uint64_t v15 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  unsigned __int8 v17 = (char *)v29 - v16;
  uint64_t v38 = a7;
  uint64_t v39 = a8;
  uint64_t v40 = a11;
  uint64_t v41 = a12;
  uint64_t v18 = type metadata accessor for PopoverItemStateProvider();
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v29 - v19;
  v29[0] = swift_getWitnessTable();
  uint64_t v21 = type metadata accessor for PopoverPresentationModifier();
  uint64_t v22 = *(void *)(v21 - 8);
  double v23 = MEMORY[0x1F4188790](v21);
  long long v25 = (char *)v29 - v24;
  uint64_t v26 = *(void *)a2;
  uint64_t v27 = *(void *)(a2 + 8);
  LOBYTE(a2) = *(unsigned char *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, v31, v30, v23);
  PopoverItemStateProvider.init(item:content:)((uint64_t)v17, v32, v33, (uint64_t)v20);
  uint64_t v38 = v26;
  uint64_t v39 = v27;
  LOBYTE(v40) = a2;
  PopoverPresentationModifier.init(provider:attachmentAnchor:arrowEdges:isDetachable:keyType:attachmentBehavior:)((uint64_t)v20, &v38, v34, 0, 1, 0, v18, (uint64_t)v25);
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v26, v27, a2);
  MEMORY[0x18C113660](v25, v37, v21, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v25, v21);
}

void PopoverContent.body.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v81 = a2;
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v56 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unsigned int v6 = (char *)&v46 - v5;
  type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>();
  uint64_t v49 = type metadata accessor for ModifiedContent();
  uint64_t v68 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v47 = (char *)&v46 - v7;
  type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, MEMORY[0x1E4F41638]);
  uint64_t v55 = type metadata accessor for ModifiedContent();
  uint64_t v70 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  uint64_t v48 = (char *)&v46 - v8;
  type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>, &lazy cache variable for type metadata for TintAdjustmentMode?, MEMORY[0x1E4F40348], MEMORY[0x1E4FBB718]);
  uint64_t v59 = type metadata accessor for ModifiedContent();
  uint64_t v77 = *(void *)(v59 - 8);
  MEMORY[0x1F4188790](v59);
  char v50 = (char *)&v46 - v9;
  uint64_t v10 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F411E8];
  _ss11AnyHashableVSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
  uint64_t v64 = type metadata accessor for ModifiedContent();
  uint64_t v74 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  uint64_t v52 = (char *)&v46 - v11;
  uint64_t v61 = type metadata accessor for ModifiedContent();
  uint64_t v76 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61);
  uint64_t v58 = (char *)&v46 - v12;
  _ss11AnyHashableVSgMaTm_1(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior, v10);
  uint64_t v63 = type metadata accessor for ModifiedContent();
  uint64_t v73 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  int v54 = (char *)&v46 - v13;
  uint64_t v65 = type metadata accessor for ModifiedContent();
  uint64_t v75 = *(void *)(v65 - 8);
  MEMORY[0x1F4188790](v65);
  uint64_t v57 = (char *)&v46 - v14;
  uint64_t v66 = type metadata accessor for ModifiedContent();
  uint64_t v78 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  uint64_t v60 = (char *)&v46 - v15;
  uint64_t v67 = type metadata accessor for ModifiedContent();
  uint64_t v79 = *(void *)(v67 - 8);
  MEMORY[0x1F4188790](v67);
  uint64_t v62 = (char *)&v46 - v16;
  uint64_t v71 = type metadata accessor for ModifiedContent();
  _ss11AnyHashableVSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, v10);
  uint64_t v72 = type metadata accessor for ModifiedContent();
  _ss11AnyHashableVSgMaTm_1(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, v10);
  uint64_t v53 = type metadata accessor for ModifiedContent();
  uint64_t v80 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v51 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v69 = (char *)&v46 - v19;
  static Alignment.center.getter();
  uint64_t v45 = *(void *)(a1 + 24);
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v97 = v45;
  uint64_t v98 = MEMORY[0x1E4F3FE50];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v21 = v47;
  View.renderContainerBackgroundInHostingView<A>(_:)();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v6, v4);
  swift_getKeyPath();
  uint64_t v22 = (uint64_t *)(v2 + *(int *)(a1 + 40));
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  char v25 = *((unsigned char *)v22 + 16);
  swift_retain();
  swift_retain();
  uint64_t v94 = v24;
  uint64_t v95 = v23;
  char v96 = v25;
  unint64_t v26 = lazy protocol witness table accessor for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>();
  uint64_t v92 = WitnessTable;
  unint64_t v93 = v26;
  uint64_t v27 = v49;
  uint64_t v28 = swift_getWitnessTable();
  long long v29 = v48;
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v21, v27);
  swift_getKeyPath();
  LOBYTE(v94) = 2;
  unint64_t v30 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v90 = v28;
  unint64_t v91 = v30;
  uint64_t v31 = v55;
  uint64_t v32 = swift_getWitnessTable();
  uint64_t v33 = v50;
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v29, v31);
  swift_getKeyPath();
  LOBYTE(v94) = 1;
  unint64_t v34 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v88 = v32;
  unint64_t v89 = v34;
  uint64_t v35 = v59;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v37 = v52;
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v77 + 8))(v33, v35);
  uint64_t v38 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390]);
  uint64_t v86 = v36;
  uint64_t v87 = v38;
  uint64_t v39 = v64;
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v41 = v58;
  View.resetScrollEnvironment()(v39, v40);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v37, v39);
  uint64_t v84 = v40;
  uint64_t v85 = &protocol witness table for ResetScrollEnvironmentModifier;
  uint64_t v42 = v61;
  uint64_t v43 = swift_getWitnessTable();
  View.resetListStackBehavior()();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v41, v42);
  uint64_t v44 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior);
  uint64_t v82 = v43;
  uint64_t v83 = v44;
  swift_getWitnessTable();
  View.resetFormEnvironment()();
}

void sub_187CFC088()
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 392) + 8))(v2, v1);
  *(void *)(v3 - 240) = v0;
  *(void *)(v3 - 232) = &protocol witness table for ResetFormEnvironmentModifier;
  swift_getWitnessTable();
  View.resetTabViewEnvironment()();
}

uint64_t sub_187CFC0EC()
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 376) + 8))(v3, v2);
  swift_getKeyPath();
  *(unsigned char *)(v5 - 128) = 0;
  *(void *)(v5 - 256) = v0;
  *(void *)(v5 - 248) = &protocol witness table for ResetTabViewEnvironmentModifier;
  uint64_t v6 = *(void *)(v5 - 448);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = *(void *)(v5 - 480);
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 352) + 8))(v4, v6);
  *(void *)(v5 - 272) = WitnessTable;
  *(void *)(v5 - 264) = v1;
  uint64_t v9 = *(void *)(v5 - 440);
  uint64_t v10 = swift_getWitnessTable();
  uint64_t v11 = *(void *)(v5 - 568);
  View.clearNavigationContext()(v10, v11);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 344) + 8))(v8, v9);
  *(void *)(v5 - 288) = v10;
  *(void *)(v5 - 280) = &protocol witness table for ClearNavigationContextModifier;
  uint64_t v12 = swift_getWitnessTable();
  uint64_t v13 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled);
  *(void *)(v5 - 304) = v12;
  *(void *)(v5 - 296) = v13;
  uint64_t v14 = swift_getWitnessTable();
  uint64_t v15 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed);
  *(void *)(v5 - 320) = v14;
  *(void *)(v5 - 312) = v15;
  uint64_t v16 = *(void *)(v5 - 552);
  swift_getWitnessTable();
  uint64_t v17 = *(void *)(v5 - 424);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 336) + 8);
  v18(v11, v16);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(uint64_t, uint64_t))v18)(v17, v16);
}

uint64_t EnvironmentValues.presentationNeedsInitialPreferredContentSize.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize>, (uint64_t)&unk_1ED486078, (uint64_t)&protocol witness table for EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize>, (uint64_t)&unk_1ED486078, (uint64_t)&protocol witness table for EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize>, (uint64_t)&unk_1ED486078, (uint64_t)&protocol witness table for EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize>, (uint64_t)&unk_1ED486078, (uint64_t)&protocol witness table for EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.presentationNeedsInitialPreferredContentSize.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize>, (uint64_t)&unk_1ED486078, (uint64_t)&protocol witness table for EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize>, (uint64_t)&unk_1ED486078, (uint64_t)&protocol witness table for EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t PopoverPresentationModifier.PopoverModifier.init(viewID:provider:attachmentAnchor:arrowEdges:isDetachable:keyType:environment:attachmentBehavior:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __int16 a4@<W3>, char a5@<W4>, char a6@<W5>, uint64_t *a7@<X6>, char a8@<W7>, char *a9@<X8>, uint64_t a10)
{
  uint64_t v13 = *a3;
  uint64_t v14 = a3[1];
  char v15 = a6 & 1;
  char v16 = *((unsigned char *)a3 + 16);
  char v24 = a8 & 1;
  uint64_t v17 = *a7;
  uint64_t v23 = a7[1];
  *(_DWORD *)a9 = a1;
  uint64_t v18 = (int *)type metadata accessor for PopoverPresentationModifier.PopoverModifier();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a10 - 8) + 32))(&a9[v18[9]], a2, a10);
  uint64_t v20 = &a9[v18[10]];
  *(void *)uint64_t v20 = v13;
  *((void *)v20 + 1) = v14;
  v20[16] = v16;
  uint64_t v21 = &a9[v18[11]];
  *uint64_t v21 = a4;
  v21[1] = HIBYTE(a4) & 1;
  a9[v18[12]] = a5;
  a9[v18[13]] = v15;
  uint64_t v22 = &a9[v18[14]];
  *(void *)uint64_t v22 = v17;
  *((void *)v22 + 1) = v23;
  a9[v18[15]] = v24;
  return result;
}

uint64_t PopoverPresentationModifier.PopoverModifier.viewID.getter()
{
  uint64_t result = *v0;
  if (!result)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t PopoverPresentationModifier.PopoverModifier.wrappedContent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 24);
  v6[2] = v7;
  v6[3] = v8;
  void v6[4] = a1;
  v6[5] = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  *(void *)&v47[0] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(partial apply for closure #1 in PopoverPresentationModifier.PopoverModifier.wrappedContent(_:), v6, AssociatedTypeWitness, AssociatedConformanceWitness);
  *((void *)&v47[0] + 1) = v11;
  type metadata accessor for LazyView();
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.clearNavigationContext()(WitnessTable, (uint64_t)&v25);
  swift_release();
  long long v42 = v25;
  uint64_t v43 = v26;
  char v44 = BYTE8(v26);
  uint64_t v45 = v27;
  int v46 = v28;
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v8 + 56))(v40, v7, v8);
  uint64_t v14 = v40[0];
  uint64_t v13 = v40[1];
  char v24 = v41;
  type metadata accessor for ModifiedContent();
  char v15 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F411E8];
  _ss11AnyHashableVSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  _ss11AnyHashableVSgMaTm_1(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, v15);
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v38 = WitnessTable;
  uint64_t v39 = &protocol witness table for ClearNavigationContextModifier;
  uint64_t v17 = swift_getWitnessTable();
  uint64_t v18 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled);
  uint64_t v36 = v17;
  uint64_t v37 = v18;
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v20 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed);
  uint64_t v34 = v19;
  uint64_t v35 = v20;
  swift_getWitnessTable();
  v47[0] = vdupq_n_s64(0x4051000000000000uLL);
  uint64_t v21 = type metadata accessor for PopoverContent();
  (*(void (**)(char *, long long *, uint64_t))(*(void *)(v16 - 8) + 32))((char *)v47 + *(int *)(v21 + 36), &v42, v16);
  uint64_t v22 = (char *)v47 + *(int *)(v21 + 40);
  *(void *)uint64_t v22 = v14;
  *((void *)v22 + 1) = v13;
  v22[16] = v24;
  long long v25 = v47[0];
  long long v26 = v47[1];
  uint64_t v27 = v48;
  LOBYTE(v28) = v49;
  uint64_t v29 = v50;
  int v30 = v51;
  uint64_t v31 = v52;
  uint64_t v32 = v53;
  char v33 = v54;
  swift_getWitnessTable();
  return AnyView.init<A>(_:)();
}

uint64_t (*implicit closure #1 in closure #1 in PopoverPresentationModifier.PopoverModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v7);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v8, a2);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #1 in PopoverPresentationModifier.PopoverModifier.body(content:);
}

uint64_t (*implicit closure #1 in closure #3 in PopoverPresentationModifier.PopoverModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v5 + 16))(v8, v7);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, v8, a2);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #1 in PopoverPresentationModifier.PopoverModifier.body(content:);
}

uint64_t closure #1 in PopoverPresentationModifier.PopoverModifier.wrappedContent(_:)(void (*a1)(double))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x1F4188790](v6);
  unint64_t v9 = (char *)&v12 - v8;
  a1(v7);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v5);
  uint64_t v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  return ((uint64_t (*)(char *, uint64_t))v10)(v9, AssociatedTypeWitness);
}

uint64_t static EmptyAnchorTraitTransformModifier._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  unsigned int v5 = *(_DWORD *)(a2 + 24);
  unsigned int v6 = *(_DWORD *)(a2 + 28);
  unsigned int v7 = *(_DWORD *)(a2 + 32);
  unsigned int v8 = *(_DWORD *)(a2 + 36);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v25 = *(void *)(a2 + 56);
  uint64_t v27 = *(void *)(a2 + 48);
  unint64_t v10 = *(void *)(a2 + 72);
  char v11 = *(unsigned char *)(a2 + 80);
  char v23 = v11;
  int v24 = *(_DWORD *)(a2 + 64);
  unint64_t v61 = *(void *)a2;
  int v62 = v3;
  uint64_t v63 = v4;
  *(void *)&long long v64 = __PAIR64__(v6, v5);
  unsigned int v22 = v7;
  *((void *)&v64 + 1) = __PAIR64__(v8, v7);
  uint64_t v65 = v9;
  *(void *)&long long v66 = v27;
  *((void *)&v66 + 1) = v25;
  int v67 = v24;
  unint64_t v68 = v10;
  char v69 = v11;
  unint64_t v43 = v61;
  int v44 = v3;
  uint64_t v45 = v4;
  unsigned int v46 = v5;
  unsigned int v47 = v6;
  unsigned int v48 = v7;
  unsigned int v49 = v8;
  uint64_t v50 = v9;
  swift_bridgeObjectRetain();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  _ViewInputs.init(withoutGeometry:)();
  unsigned int v34 = v55;
  unsigned int v32 = DWORD2(v55);
  unsigned int v33 = DWORD1(v55);
  unsigned int v18 = HIDWORD(v55);
  uint64_t v20 = v56;
  int v21 = HIDWORD(v54);
  uint64_t v19 = v57;
  unsigned int v31 = HIDWORD(v57);
  int v36 = v58;
  unsigned int v37 = DWORD2(v57);
  unsigned int v35 = v59;
  int v38 = v60;
  unsigned int v39 = HIDWORD(v59);
  type metadata accessor for EmptyAnchorTraitTransformModifier();
  type metadata accessor for _GraphValue();
  unsigned int v29 = _GraphValue.value.getter();
  unint64_t v51 = v61;
  int v52 = v3;
  uint64_t v54 = v4;
  *(void *)&long long v55 = __PAIR64__(v6, v5);
  *((void *)&v55 + 1) = __PAIR64__(v8, v22);
  uint64_t v56 = v9;
  *(void *)&long long v57 = v27;
  *((void *)&v57 + 1) = v25;
  int v58 = v24;
  unint64_t v59 = v10;
  LOBYTE(v60) = v23;
  uint64_t v12 = _ViewListInputs.traits.getter();
  unsigned int v13 = *MEMORY[0x1E4F4E7A0];
  if ((v12 & 0x100000000) == 0) {
    unsigned int v13 = v12;
  }
  unsigned int v28 = v13;
  int v26 = _ViewInputs.position.getter();
  _ViewInputs.size.getter();
  HIDWORD(v54) = v21;
  *(void *)&long long v55 = __PAIR64__(v33, v34);
  *((void *)&v55 + 1) = __PAIR64__(v18, v32);
  uint64_t v56 = v20;
  *(void *)&long long v57 = v19;
  *((void *)&v57 + 1) = __PAIR64__(v31, v37);
  int v58 = v36;
  unint64_t v59 = __PAIR64__(v39, v35);
  int v60 = v38;
  unint64_t v51 = __PAIR64__(v28, v29);
  int v52 = v26;
  int v53 = Attribute<A>.origin()();
  LODWORD(v54) = _ViewInputs.transform.getter();
  uint64_t v41 = type metadata accessor for EmptyAnchorTraitTransformModifier.TransformTrait();
  uint64_t WitnessTable = swift_getWitnessTable();
  _ss11AnyHashableVSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>, MEMORY[0x1E4F40530], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v51, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_22, (uint64_t)v40, v41, MEMORY[0x1E4FBC248], v14, MEMORY[0x1E4FBC278], v15);
  LOBYTE(v51) = 0;
  _ViewListInputs.traits.setter();
  _ViewListInputs.addTraitKey<A>(_:)();
  unint64_t v51 = v61;
  int v52 = v62;
  uint64_t v54 = v63;
  long long v55 = v64;
  uint64_t v56 = v65;
  long long v57 = v66;
  int v58 = v67;
  unint64_t v59 = v68;
  LOBYTE(v60) = v69;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v16 = swift_bridgeObjectRetain();
  a3(v16, &v51);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t EmptyAnchorTraitTransformModifier.TransformTrait.modifier.getter()
{
  type metadata accessor for EmptyAnchorTraitTransformModifier();
  uint64_t v0 = *(void *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  return v0;
}

uint64_t EmptyAnchorTraitTransformModifier.TransformTrait.value.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  int v2 = HIDWORD(a1);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  unsigned int v6 = (char *)v14 - v5;
  AnchorGeometry.init(position:size:transform:)();
  int v7 = v16;
  uint64_t v8 = v15;
  EmptyAnchorTraitTransformModifier.TransformTrait.modifier.getter();
  swift_release();
  uint64_t v15 = v8;
  int v16 = v7;
  uint64_t v9 = Anchor.Source.prepare(geometry:)();
  swift_release();
  if (*MEMORY[0x1E4F4E7A0] == v2 || (uint64_t v10 = *(void *)AGGraphGetValue(), swift_bridgeObjectRetain(), !v10))
  {
    ViewTraitCollection.init()();
    uint64_t v10 = v15;
  }
  else
  {
    uint64_t v15 = v10;
  }
  EmptyAnchorTraitTransformModifier.TransformTrait.modifier.getter();
  uint64_t v12 = v11;
  swift_release();
  v14[1] = v10;
  ViewTraitCollection.subscript.getter();
  v12(v6, v9);
  swift_release();
  ViewTraitCollection.subscript.setter();
  uint64_t result = swift_release();
  *a2 = v15;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance EmptyAnchorTraitTransformModifier<A, B>.TransformTrait@<X0>(void *a1@<X8>)
{
  return EmptyAnchorTraitTransformModifier.TransformTrait.value.getter(*v1, a1);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance EmptyAnchorTraitTransformModifier<A, B>(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unint64_t *))
{
  return static EmptyAnchorTraitTransformModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t PopoverConditionalStateProvider.presentationMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  char v4 = *((unsigned char *)v1 + 16);
  lazy protocol witness table accessor for type PresentationMode.FromIsPresented and conformance PresentationMode.FromIsPresented();
  swift_retain();
  swift_retain();
  uint64_t v5 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  uint64_t result = swift_release();
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v5;
  return result;
}

Swift::Void __swiftcall PopoverConditionalStateProvider.dismiss()()
{
}

uint64_t protocol witness for PopoverStateProvider.identifier.getter in conformance PopoverConditionalStateProvider<A>@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of AnyHashable?(v1 + 40, a1);
}

uint64_t PopoverItemStateProvider.popoverContent.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int v7 = &v11[-v6];
  ItemSheetPresentationModifier.item.getter(a1, MEMORY[0x1E4F41620]);
  uint64_t v12 = v3;
  long long v13 = *(_OWORD *)(a1 + 24);
  uint64_t v14 = *(void *)(a1 + 40);
  uint64_t v15 = v1;
  uint64_t FunctionTypeMetadata0 = swift_getFunctionTypeMetadata0();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PopoverItemStateProvider.popoverContent.getter, (uint64_t)v11, MEMORY[0x1E4FBC248], FunctionTypeMetadata0, v9, (uint64_t)&v16);
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  return v16;
}

uint64_t closure #1 in PopoverItemStateProvider.popoverContent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (**a7)()@<X8>)
{
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  uint64_t v29 = a1;
  uint64_t v30 = a4;
  unsigned int v33 = a7;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](a1);
  unsigned int v28 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v11;
  uint64_t v35 = v12;
  uint64_t v36 = v13;
  uint64_t v37 = v14;
  uint64_t v15 = type metadata accessor for PopoverItemStateProvider();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  double v18 = MEMORY[0x1F4188790](v15);
  uint64_t v20 = (char *)&v28 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v28 - v19, a2, v15, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v29, a3);
  unint64_t v21 = (*(unsigned __int8 *)(v16 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v22 = (v17 + *(unsigned __int8 *)(v9 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  char v23 = (char *)swift_allocObject();
  uint64_t v24 = v30;
  *((void *)v23 + 2) = a3;
  *((void *)v23 + 3) = v24;
  uint64_t v25 = v32;
  *((void *)v23 + 4) = v31;
  *((void *)v23 + 5) = v25;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(&v23[v21], v20, v15);
  uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(&v23[v22], v28, a3);
  uint64_t v27 = v33;
  *unsigned int v33 = partial apply for closure #1 in closure #1 in PopoverItemStateProvider.popoverContent.getter;
  v27[1] = (uint64_t (*)())v23;
  return result;
}

uint64_t PopoverItemStateProvider.identifier.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  double v18 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v16 - v11;
  ItemSheetPresentationModifier.item.getter(a1, MEMORY[0x1E4F41620]);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3))
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v14 = (_OWORD *)v19;
    *(void *)(v19 + 32) = 0;
    *uint64_t v14 = 0u;
    v14[1] = 0u;
  }
  else
  {
    uint64_t v15 = v18;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v18, v9, v3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    dispatch thunk of Identifiable.id.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v15, v3);
    swift_getAssociatedConformanceWitness();
    _convertToAnyHashable<A>(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v12, AssociatedTypeWitness);
  }
  return result;
}

uint64_t PopoverItemStateProvider.presentationMode.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for Optional();
  uint64_t v3 = type metadata accessor for Binding();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v10 - v5;
  ItemSheetPresentationModifier.item.getter(a1, MEMORY[0x1E4F41628]);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v2, *(void *)(a1 + 32), v7, v8);
  type metadata accessor for PresentationMode.FromItem();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Void __swiftcall PopoverItemStateProvider.dismiss()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v7 - v5;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(v1 - 8) + 56))((char *)&v7 - v5, 1, 1, v1, v4);
  specialized ItemSheetPresentationModifier.item.setter();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t specialized Edge.Set.init(_:)(unsigned __int8 a1)
{
  unsigned int v1 = 1 << a1;
  if ((a1 & 0xF8) != 0) {
    unsigned int v1 = 0;
  }
  if (a1 <= 8u) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for PopoverAttachmentAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for PopoverAttachmentAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Environment<CGFloat?>.Content(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PopoverAttachmentAnchor(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of Environment<CGFloat?>.Content(v4, v5, v6);
  return a1;
}

uint64_t sub_187CFE10C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CFE1C4()
{
  return swift_getWitnessTable();
}

uint64_t destroy for PopoverPresentation(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(a1 + 72)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  }
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for PopoverPresentation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  uint64_t v5 = (_OWORD *)(a1 + 48);
  uint64_t v6 = a2 + 48;
  uint64_t v7 = *(void *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v7)
  {
    uint64_t v8 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = v7;
    *(void *)(a1 + 80) = v8;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 48, v6, v7);
  }
  else
  {
    long long v9 = *(_OWORD *)(v6 + 16);
    *uint64_t v5 = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 64) = v9;
    *(void *)(a1 + 80) = *(void *)(v6 + 32);
  }
  uint64_t v10 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v10;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 109) = *(void *)(a2 + 109);
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 117);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PopoverPresentation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  uint64_t v5 = (_OWORD *)(a1 + 48);
  uint64_t v6 = (_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 72);
  if (*(void *)(a1 + 72))
  {
    if (v7)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 48);
      uint64_t v8 = *(void *)(a2 + 80);
      long long v9 = *(_OWORD *)(a2 + 64);
      *uint64_t v5 = *v6;
      *(_OWORD *)(a1 + 64) = v9;
      *(void *)(a1 + 80) = v8;
    }
  }
  else if (v7)
  {
    *(void *)(a1 + 72) = v7;
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 48, a2 + 48);
  }
  else
  {
    long long v10 = *v6;
    long long v11 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *uint64_t v5 = v10;
    *(_OWORD *)(a1 + 64) = v11;
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  uint64_t v12 = *(void *)(a2 + 104);
  *(void *)(a1 + 109) = *(void *)(a2 + 109);
  *(void *)(a1 + 104) = v12;
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 117);
  return a1;
}

__n128 __swift_memcpy118_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 110) = *(void *)((char *)a2 + 110);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for PopoverPresentation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  if (*(void *)(a1 + 72))
  {
    if (*(void *)(a2 + 72)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    }
    else {
      outlined destroy of AnyHashable(a1 + 48);
    }
  }
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_release();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 109) = *(void *)(a2 + 109);
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 117);
  return a1;
}

uint64_t storeEnumTagSinglePayload for PopoverPresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 116) = 0;
    *(_DWORD *)(result + 112) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 118) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 118) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t assignWithTake for PopoverConditionalStateProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  if (*(void *)(a1 + 64))
  {
    if (*(void *)(a2 + 64)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 40);
    }
    else {
      outlined destroy of AnyHashable(a1 + 40);
    }
  }
  long long v4 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v4;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for PopoverPresentationModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 22 > 0x18)
  {
    uint64_t v9 = *a2;
    *long long v4 = *a2;
    long long v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = *(void *)v11;
    uint64_t v13 = *(void *)(v11 + 8);
    char v14 = *(unsigned char *)(v11 + 16);
    outlined copy of Environment<CGFloat?>.Content(*(void *)v11, v13, v14);
    *(void *)unint64_t v10 = v12;
    *(void *)(v10 + 8) = v13;
    *(unsigned char *)(v10 + 16) = v14;
    *(_WORD *)(v10 + 17) = *(_WORD *)(v11 + 17);
    *(unsigned char *)(v10 + 19) = *(unsigned char *)(v11 + 19);
    *(unsigned char *)(v10 + 20) = *(unsigned char *)(v11 + 20);
    *(unsigned char *)(v10 + 21) = *(unsigned char *)(v11 + 21);
  }
  return v4;
}

uint64_t initializeWithTake for PopoverPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16) = v9;
  *(_WORD *)(v7 + 17) = *(_WORD *)(v8 + 17);
  *(unsigned char *)(v7 + 19) = *(unsigned char *)(v8 + 19);
  *(unsigned char *)(v7 + 20) = *(unsigned char *)(v8 + 20);
  *(unsigned char *)(v7 + 21) = *(unsigned char *)(v8 + 21);
  return a1;
}

uint64_t assignWithTake for PopoverPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v6) = *(unsigned char *)(v8 + 16);
  uint64_t v9 = *(void *)v7;
  uint64_t v10 = *(void *)(v7 + 8);
  char v11 = *(unsigned char *)(v7 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(unsigned char *)(v7 + 16) = v6;
  outlined consume of Environment<CGFloat?>.Content(v9, v10, v11);
  *(_WORD *)(v7 + 17) = *(_WORD *)(v8 + 17);
  *(unsigned char *)(v7 + 19) = *(unsigned char *)(v8 + 19);
  *(unsigned char *)(v7 + 20) = *(unsigned char *)(v8 + 20);
  *(unsigned char *)(v7 + 21) = *(unsigned char *)(v8 + 21);
  return a1;
}

uint64_t getEnumTagSinglePayload for PopoverPresentationModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2 && *((unsigned char *)a1 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 22)) {
    return v7 + *a1 + 1;
  }
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v9 = *(unsigned __int8 *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
  if (v9 > 1) {
    return (v9 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for PopoverPresentationModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 22;
  if (v8 >= a2)
  {
    if (v8 < a3) {
      a1[v10] = 0;
    }
    if (a2)
    {
      if (v7 < 0xFE)
      {
        unint64_t v13 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
        if (a2 > 0xFE)
        {
          *(unsigned char *)(v13 + 16) = 0;
          *(void *)unint64_t v13 = a2 - 255;
          *(void *)(v13 + 8) = 0;
        }
        else
        {
          *(unsigned char *)(v13 + 16) = -(char)a2;
        }
      }
      else
      {
        uint64_t v12 = *(void (**)(void))(v6 + 56);
        v12();
      }
    }
  }
  else
  {
    unsigned int v11 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v11;
    if (v8 < a3) {
      a1[v10] = 1;
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PopoverItemStateProvider(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  int v9 = v7 + 16;
  uint64_t v10 = (v8 + 16) & ~v8;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v11 = *(void *)(v5 + 64);
  }
  else {
    size_t v11 = *(void *)(v5 + 64) + 1;
  }
  size_t v12 = v10 + v11;
  int v13 = v7 & 0x100000;
  uint64_t v14 = *a2;
  *a1 = *a2;
  if (v8 > 7 || v13 != 0 || ((v10 + v11 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    a1 = (uint64_t *)(v14 + ((v8 & 0xF8 ^ 0x1F8) & v9));
  }
  else
  {
    double v18 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *double v18 = *v19;
    __dst = (void *)(((unint64_t)v18 + v8 + 8) & ~v8);
    uint64_t v20 = (const void *)(((unint64_t)v19 + v8 + 8) & ~v8);
    unint64_t v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    swift_retain();
    if (v21(v20, 1, v4))
    {
      memcpy(__dst, v20, v11);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(__dst, v20, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(__dst, 0, 1, v4);
    }
    unint64_t v22 = (void *)(((unint64_t)a2 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v23 = v22[1];
    uint64_t v24 = (void *)(((unint64_t)a1 + v12 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v24 = *v22;
    v24[1] = v23;
  }
  swift_retain();
  return a1;
}

void *initializeWithTake for PopoverItemStateProvider(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  size_t v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7))
  {
    int v12 = *(_DWORD *)(v8 + 84);
    size_t v13 = *(void *)(v8 + 64);
    if (v12) {
      size_t v14 = v13;
    }
    else {
      size_t v14 = v13 + 1;
    }
    memcpy(v10, v11, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 32))(v10, v11, v7);
    uint64_t v16 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v15 = v8 + 56;
    v16(v10, 0, 1, v7);
    int v12 = *(_DWORD *)(v15 + 28);
    size_t v13 = *(void *)(v15 + 8);
  }
  size_t v17 = v13 + ((v9 + 16) & ~v9);
  if (!v12) {
    ++v17;
  }
  *(_OWORD *)(((unint64_t)a1 + v17 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v17 + 7) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for PopoverItemStateProvider(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = v6 & 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)(v6 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  int v12 = (void *)(((unint64_t)v7 + v11 + 8) & ~v11);
  size_t v13 = (void *)((v11 + 8 + v8) & ~v11);
  size_t v14 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  int v15 = v14(v12, 1, v9);
  int v16 = v14(v13, 1, v9);
  if (v15)
  {
    if (v16)
    {
      int v17 = *(_DWORD *)(v10 + 84);
      size_t v18 = *(void *)(v10 + 64);
LABEL_6:
      if (v17) {
        size_t v19 = v18;
      }
      else {
        size_t v19 = v18 + 1;
      }
      memcpy(v12, v13, v19);
      goto LABEL_12;
    }
    (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v12, v13, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v12, 0, 1, v9);
  }
  else
  {
    if (v16)
    {
      (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
      int v17 = *(_DWORD *)(v10 + 84);
      size_t v18 = *(void *)(v10 + 64);
      goto LABEL_6;
    }
    (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v12, v13, v9);
  }
LABEL_12:
  uint64_t v20 = *(void *)(v10 + 64) + ((v11 + 16) & ~v11);
  if (!*(_DWORD *)(v10 + 84)) {
    ++v20;
  }
  *(_OWORD *)(((unint64_t)a1 + v20 + 7) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)a2 + v20 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PopoverItemStateProvider(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = 7;
  if (!v6) {
    uint64_t v10 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v8 < a2)
  {
    unint64_t v11 = ((v10 + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v9 + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    unsigned int v12 = a2 - v8;
    uint64_t v13 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      unsigned int v14 = 2;
    }
    else {
      unsigned int v14 = v12 + 1;
    }
    if (v14 >= 0x10000) {
      unsigned int v15 = 4;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v14 < 0x100) {
      unsigned int v15 = 1;
    }
    if (v14 >= 2) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v11);
        if (!v17) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v11);
        if (v17) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187CFF314);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v11);
        if (!v17) {
          break;
        }
LABEL_27:
        int v19 = v17 - 1;
        if (v13)
        {
          int v19 = 0;
          LODWORD(v13) = *a1;
        }
        return v8 + (v13 | v19) + 1;
      default:
        break;
    }
  }
  uint64_t v20 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    unsigned int v22 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v20 + v9 + 8) & ~v9);
    if (v22 >= 2) {
      return v22 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v21 = *v20;
    if (v21 >= 0xFFFFFFFF) {
      LODWORD(v21) = -1;
    }
    return (v21 + 1);
  }
}

void storeEnumTagSinglePayload for PopoverItemStateProvider(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v12 + ((v11 + 16) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v10 < a3)
  {
    unsigned int v14 = a3 - v10;
    if (((v12 + ((v11 + 16) & ~v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((v12 + ((v11 + 16) & ~v11) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v17 = a2 - v10;
    }
    else {
      int v17 = 1;
    }
    if (((v12 + ((v11 + 16) & ~v11) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v18 = ~v10 + a2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v17;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x187CFF5C0);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        int v19 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v9 & 0x80000000) != 0)
        {
          unint64_t v21 = (unsigned char *)(((unint64_t)v19 + v11 + 8) & ~v11);
          if (v9 >= a2)
          {
            uint64_t v25 = a2 + 1;
            int v26 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            v26(((unint64_t)v19 + v11 + 8) & ~v11, v25);
          }
          else
          {
            if (v12 <= 3) {
              int v22 = ~(-1 << (8 * v12));
            }
            else {
              int v22 = -1;
            }
            if (v12)
            {
              int v23 = v22 & (~v9 + a2);
              if (v12 <= 3) {
                int v24 = v12;
              }
              else {
                int v24 = 4;
              }
              bzero(v21, v12);
              switch(v24)
              {
                case 2:
                  *(_WORD *)unint64_t v21 = v23;
                  break;
                case 3:
                  *(_WORD *)unint64_t v21 = v23;
                  void v21[2] = BYTE2(v23);
                  break;
                case 4:
                  *(_DWORD *)unint64_t v21 = v23;
                  break;
                default:
                  *unint64_t v21 = v23;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v20 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v20 = a2 - 1;
          }
          void *v19 = v20;
        }
      }
      return;
  }
}

uint64_t partial apply for closure #1 in PopoverItemStateProvider.popoverContent.getter@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  return closure #1 in PopoverItemStateProvider.popoverContent.getter(a1, v2[6], v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_187CFF620()
{
  long long v7 = *(_OWORD *)(v0 + 16);
  uint64_t v1 = *(void *)(type metadata accessor for PopoverItemStateProvider() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v8 = *(void *)(v1 + 64);
  uint64_t v3 = *(void *)(v7 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  unint64_t v5 = v0 + v2 + *(int *)(type metadata accessor for Binding() + 32);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, void))(v3 + 48))(v5, 1, v7)) {
    (*(void (**)(unint64_t, void))(v3 + 8))(v5, v7);
  }
  swift_release();
  (*(void (**)(unint64_t, void))(v3 + 8))(v0 + ((v2 + v8 + v4) & ~v4), v7);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in PopoverItemStateProvider.popoverContent.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for PopoverItemStateProvider() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0
     + ((v3 + *(void *)(v2 + 64) + *(unsigned __int8 *)(*(void *)(v1 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  uint64_t v5 = type metadata accessor for PopoverItemStateProvider();
  return (*(uint64_t (**)(uint64_t))(v0 + *(int *)(v5 + 52) + v3))(v4);
}

uint64_t *initializeBufferWithCopyOfBuffer for PopoverPresentationModifier.PopoverModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((((v6 + ((v5 + 4) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 28) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    unint64_t v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v10 = ((unint64_t)a1 + v5 + 4) & ~v5;
    uint64_t v11 = ((unint64_t)a2 + v5 + 4) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    unint64_t v12 = (v6 + v10) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = (v6 + v11) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v14 = *(void *)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    char v16 = *(unsigned char *)(v13 + 16);
    outlined copy of Environment<CGFloat?>.Content(*(void *)v13, v15, v16);
    *(void *)unint64_t v12 = v14;
    *(void *)(v12 + 8) = v15;
    *(unsigned char *)(v12 + 16) = v16;
    *(_WORD *)(v12 + 17) = *(_WORD *)(v13 + 17);
    *(unsigned char *)(v12 + 19) = *(unsigned char *)(v13 + 19);
    *(unsigned char *)(v12 + 20) = *(unsigned char *)(v13 + 20);
    unint64_t v17 = (v12 + 28) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = (v13 + 28) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v17 = *(void *)v18;
    *(void *)(v17 + 8) = *(void *)(v18 + 8);
    *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
    swift_retain();
  }
  swift_retain();
  return v3;
}

_DWORD *initializeWithTake for PopoverPresentationModifier.PopoverModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 4) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 4) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  char v12 = *(unsigned char *)(v11 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  *(unsigned char *)(v10 + 16) = v12;
  *(_WORD *)(v10 + 17) = *(_WORD *)(v11 + 17);
  *(unsigned char *)(v10 + 19) = *(unsigned char *)(v11 + 19);
  *(unsigned char *)(v10 + 20) = *(unsigned char *)(v11 + 20);
  unint64_t v13 = (v10 + 28) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v11 + 28) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  return a1;
}

_DWORD *assignWithTake for PopoverPresentationModifier.PopoverModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 4) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 4) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 24) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v9) = *(unsigned char *)(v11 + 16);
  uint64_t v12 = *(void *)v10;
  uint64_t v13 = *(void *)(v10 + 8);
  char v14 = *(unsigned char *)(v10 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  *(unsigned char *)(v10 + 16) = v9;
  outlined consume of Environment<CGFloat?>.Content(v12, v13, v14);
  *(_WORD *)(v10 + 17) = *(_WORD *)(v11 + 17);
  *(unsigned char *)(v10 + 19) = *(unsigned char *)(v11 + 19);
  *(unsigned char *)(v10 + 20) = *(unsigned char *)(v11 + 20);
  unint64_t v15 = (v10 + 28) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v11 + 28) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  swift_release();
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  swift_release();
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PopoverPresentationModifier.PopoverModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((((v8 + ((v6 + 4) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 28) & 0xFFFFFFFFFFFFFFF8) + 17;
    unsigned int v10 = (a2 - v7 + 255) >> (8 * v9);
    if (v9 < 4) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = a1[v9];
        if (!a1[v9]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)&a1[v9];
        if (*(_WORD *)&a1[v9]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187CFFE18);
      case 4:
        int v14 = *(_DWORD *)&a1[v9];
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = (v14 - 1) << (8 * v9);
        if (v9 >= 4) {
          int v16 = 0;
        }
        if (((((v8 + ((v6 + 4) & ~v6)) & 0xFFFFFFF8) + 28) & 0xFFFFFFF8) == 0xFFFFFFF0) {
          int v17 = *a1;
        }
        else {
          int v17 = *(_DWORD *)a1;
        }
        return v7 + (v17 | v16) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = (unint64_t)&a1[v6 + 4] & ~v6;
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)((((v8 + v18) & 0xFFFFFFFFFFFFFFF8) + 28) & 0xFFFFFFFFFFFFFFF8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  int v20 = v19 - 1;
  if (v20 < 0) {
    int v20 = -1;
  }
  return (v20 + 1);
}

void storeEnumTagSinglePayload for PopoverPresentationModifier.PopoverModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  size_t v11 = ((((v10 + ((v9 + 4) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 28) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v12 = 8 * v11;
  if (v8 >= a3)
  {
    int v16 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v16)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_47;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            unint64_t v19 = (unint64_t)&a1[v9 + 4] & ~v9;
            if (v7 < 0x7FFFFFFE)
            {
              unint64_t v21 = (void *)((((v10 + v19) & 0xFFFFFFFFFFFFFFF8) + 28) & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                uint64_t v22 = a2 - 0x7FFFFFFF;
                v21[1] = 0;
              }
              else
              {
                uint64_t v22 = a2;
              }
              *unint64_t v21 = v22;
            }
            else
            {
              int v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v13 = (a3 - v8 + 255) >> v12;
    if (v11 <= 3) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  if (v11 < 4) {
    unsigned int v17 = ((~v8 + a2) >> v12) + 1;
  }
  else {
    unsigned int v17 = 1;
  }
  if (v11 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v11);
  if (v11 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v16)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x187D00070);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for PopoverAttachmentBehavior()
{
  return &type metadata for PopoverAttachmentBehavior;
}

unsigned char *storeEnumTagSinglePayload for PopoverAttachmentBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    int *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D00178);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          int *result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_187D001A0()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type PopoverPresentationKeyType and conformance PopoverPresentationKeyType()
{
  unint64_t result = lazy protocol witness table cache variable for type PopoverPresentationKeyType and conformance PopoverPresentationKeyType;
  if (!lazy protocol witness table cache variable for type PopoverPresentationKeyType and conformance PopoverPresentationKeyType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PopoverPresentationKeyType and conformance PopoverPresentationKeyType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PopoverAttachmentBehavior and conformance PopoverAttachmentBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type PopoverAttachmentBehavior and conformance PopoverAttachmentBehavior;
  if (!lazy protocol witness table cache variable for type PopoverAttachmentBehavior and conformance PopoverAttachmentBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PopoverAttachmentBehavior and conformance PopoverAttachmentBehavior);
  }
  return result;
}

uint64_t partial apply for closure #3 in PopoverPresentationModifier.PopoverModifier.body(content:)(char **a1, uint64_t a2)
{
  return partial apply for closure #3 in PopoverPresentationModifier.PopoverModifier.body(content:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))implicit closure #1 in closure #3 in PopoverPresentationModifier.PopoverModifier.body(content:));
}

uint64_t objectdestroy_25Tm_0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for PopoverPresentationModifier.PopoverModifier();
  uint64_t v3 = v2 - 8;
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v5 = v0 + ((v4 + 32) & ~v4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v5 + *(int *)(v2 + 36), v1);
  outlined consume of Environment<CGFloat?>.Content(*(void *)(v5 + *(int *)(v3 + 48)), *(void *)(v5 + *(int *)(v3 + 48) + 8), *(unsigned char *)(v5 + *(int *)(v3 + 48) + 16));
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined assign with copy of PopoverPresentation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_187D00470()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PopoverPresentationModifier.PopoverModifier.wrappedContent(_:)()
{
  return closure #1 in PopoverPresentationModifier.PopoverModifier.wrappedContent(_:)(*(void (**)(double))(v0 + 32));
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    _ss11AnyHashableVSgMaTm_1(255, a2, a3, MEMORY[0x1E4F411E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for PopoverContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in PopoverPresentationModifier.PopoverModifier.body(content:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 64))();
}

uint64_t type metadata completion function for PopoverContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PopoverContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v6 + ((v5 + 16) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v10 = ((unint64_t)a1 + v5 + 16) & ~v5;
    uint64_t v11 = ((unint64_t)a2 + v5 + 16) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    unint64_t v12 = (v6 + v10) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = (v6 + v11) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v12 = *(void *)v13;
    *(void *)(v12 + 8) = *(void *)(v13 + 8);
    *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
    swift_retain();
  }
  swift_retain();
  return v3;
}

uint64_t destroy for PopoverContent(uint64_t a1, uint64_t a2)
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
  swift_release();

  return swift_release();
}

_OWORD *initializeWithCopy for PopoverContent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 48) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v10 = *(void *)v11;
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for PopoverContent(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 40) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v10 = *(void *)v11;
  swift_retain();
  swift_release();
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  return a1;
}

_OWORD *initializeWithTake for PopoverContent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  char v12 = *(unsigned char *)(v11 + 16);
  *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  *(unsigned char *)(v10 + 16) = v12;
  return a1;
}

_OWORD *assignWithTake for PopoverContent(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 16) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 24) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v10 = *(void *)v11;
  swift_release();
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  swift_release();
  *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for PopoverContent(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + ((v6 + 16) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 17;
    unsigned int v10 = (a2 - v7 + 255) >> (8 * v9);
    if (v9 < 4) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = a1[v9];
        if (!a1[v9]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)&a1[v9];
        if (*(_WORD *)&a1[v9]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D00C80);
      case 4:
        int v14 = *(_DWORD *)&a1[v9];
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = (v14 - 1) << (8 * v9);
        if (v9 >= 4) {
          int v16 = 0;
        }
        if (((v8 + ((v6 + 16) & ~v6)) & 0xFFFFFFF8) == 0xFFFFFFF0) {
          int v17 = *a1;
        }
        else {
          int v17 = *(_DWORD *)a1;
        }
        return v7 + (v17 | v16) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = (unint64_t)&a1[v6 + 16] & ~v6;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)(((v8 + v18) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

void storeEnumTagSinglePayload for PopoverContent(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  size_t v11 = ((v10 + ((v9 + 16) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 17;
  char v12 = 8 * v11;
  if (v8 >= a3)
  {
    int v16 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v16)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            unint64_t v19 = (unint64_t)&a1[v9 + 16] & ~v9;
            if (v7 < 0x7FFFFFFF)
            {
              unint64_t v21 = (v10 + v19) & 0xFFFFFFFFFFFFFFF8;
              if ((a2 & 0x80000000) != 0)
              {
                *(unsigned char *)(v21 + 16) = 0;
                *(void *)unint64_t v21 = a2 ^ 0x80000000;
                *(void *)(v21 + 8) = 0;
              }
              else
              {
                *(void *)(v21 + 8) = a2 - 1;
              }
            }
            else
            {
              int v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v13 = (a3 - v8 + 255) >> v12;
    if (v11 <= 3) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  if (v11 < 4) {
    unsigned int v17 = ((~v8 + a2) >> v12) + 1;
  }
  else {
    unsigned int v17 = 1;
  }
  if (v11 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v11);
  if (v11 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v16)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x187D00EC4);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return;
  }
}

uint64_t sub_187D00EEC()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in EmptyAnchorTraitTransformModifier<A, B>()
{
  return &protocol witness table for EmptyAnchorTraitTransformModifier<A, B>;
}

uint64_t associated type witness table accessor for View.Body : View in PopoverContent<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for EmptyAnchorTraitTransformModifier.TransformTrait()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  if (!*a2)
  {
    _ss11AnyHashableVSgMaTm_1(255, a3, a4, a5);
    unint64_t v6 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>;
  if (!lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>)
  {
    type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, MEMORY[0x1E4F41638]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187D012AC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.presentationNeedsInitialPreferredContentSize.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187D012EC()
{
  return EnvironmentValues.presentationNeedsInitialPreferredContentSize.setter();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>, &lazy cache variable for type metadata for TintAdjustmentMode?, MEMORY[0x1E4F40348], MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void *type metadata accessor for EnvironmentValues.__Key_presentationNeedsInitialPreferredContentSize()
{
  return &unk_1ED486078;
}

uint64_t sub_187D013B0()
{
  type metadata accessor for ModifiedContent();
  type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<PresentationMode>>, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>, (uint64_t)&type metadata for PresentationMode, MEMORY[0x1E4F41638]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>, &lazy cache variable for type metadata for TintAdjustmentMode?, MEMORY[0x1E4F40348], MEMORY[0x1E4FBB718]);
  type metadata accessor for ModifiedContent();
  uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F411E8];
  _ss11AnyHashableVSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  _ss11AnyHashableVSgMaTm_1(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior, v0);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  _ss11AnyHashableVSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, v0);
  type metadata accessor for ModifiedContent();
  _ss11AnyHashableVSgMaTm_1(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed, v0);
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<PresentationMode>> and conformance _EnvironmentKeyWritingModifier<A>();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390]);
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior);
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled);
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>, (uint64_t)&type metadata for NavigationState.SelectionSeed);
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in EmptyAnchorTraitTransformModifier<A, B>.TransformTrait()
{
  return swift_getWitnessTable();
}

double SliderStyleConfiguration.$value.getter()
{
  double v1 = *(double *)(v0 + 16);
  swift_retain();
  swift_retain();
  return v1;
}

double SliderStyleConfiguration.value.getter()
{
  type metadata accessor for Binding<Double>();
  MEMORY[0x18C113DA0](&v1);
  return v1;
}

void type metadata accessor for Binding<Double>()
{
  if (!lazy cache variable for type metadata for Binding<Double>)
  {
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<Double>);
    }
  }
}

uint64_t SliderStyleConfiguration.value.setter()
{
  return swift_release();
}

uint64_t View.sliderStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SliderStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  int v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

id protocol witness for StyleableView.configuration.getter in conformance ResolvedSliderStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  char v10 = *((unsigned char *)v1 + 64);
  uint64_t v11 = (void *)v1[9];
  uint64_t v12 = (void *)v1[10];
  uint64_t v14 = (void *)v1[11];
  double v13 = (void *)v1[12];
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v9;
  *(void *)(a1 + 56) = v8;
  *(unsigned char *)(a1 + 64) = v10;
  *(void *)(a1 + 72) = v11;
  *(void *)(a1 + 80) = v12;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v13;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();

  return outlined copy of AccessibilitySliderValue?(v11, v12, v14, v13);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedSliderStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedSliderStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedSliderStyle and conformance ResolvedSliderStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedSliderStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t SliderStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v20[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v20[-1] - v10;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 40);
  char v15 = *(unsigned char *)(a1 + 64);
  v20[0] = *(void *)a1;
  v20[1] = v12;
  void v20[2] = v13;
  long long v21 = *(_OWORD *)(a1 + 24);
  uint64_t v22 = v14;
  long long v23 = *(_OWORD *)(a1 + 48);
  char v24 = v15;
  long long v16 = *(_OWORD *)(a1 + 88);
  long long v25 = *(_OWORD *)(a1 + 72);
  long long v26 = v16;
  (*(void (**)(void *, uint64_t, uint64_t))(v3 + 24))(v20, v4, v3);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v17)(v11, AssociatedTypeWitness);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SliderStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SliderStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

void protocol witness for View.body.getter in conformance SliderStyleConfiguration.MinimumValueLabel()
{
}

void protocol witness for View.body.getter in conformance SliderStyleConfiguration.MaximumValueLabel()
{
}

uint64_t (*SliderStyleConfiguration.label.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t (*SliderStyleConfiguration.minimumValueLabel.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t (*SliderStyleConfiguration.maximumValueLabel.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double key path getter for SliderStyleConfiguration.value : SliderStyleConfiguration@<D0>(double *a1@<X8>)
{
  type metadata accessor for Binding<Double>();
  MEMORY[0x18C113DA0](&v3);
  double result = v3;
  *a1 = v3;
  return result;
}

void key path setter for SliderStyleConfiguration.value : SliderStyleConfiguration(uint64_t a1, void *a2)
{
  uint64_t v2 = (void *)a2[9];
  double v3 = (void *)a2[10];
  uint64_t v4 = (void *)a2[11];
  uint64_t v5 = (void *)a2[12];
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of AccessibilitySliderValue?(v2, v3, v4, v5);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release_n();
  swift_release_n();
  outlined consume of AccessibilitySliderValue?(v2, v3, v4, v5);
}

void (*SliderStyleConfiguration.value.modify(void *a1))(uint64_t a1)
{
  double v3 = malloc(0x30uLL);
  *a1 = v3;
  uint64_t v4 = *v1;
  uint64_t v5 = v1[1];
  v3[4] = *v1;
  v3[5] = v5;
  uint64_t v6 = v1[2];
  void *v3 = v4;
  v3[1] = v5;
  v3[2] = v6;
  type metadata accessor for Binding<Double>();
  uint64_t v8 = v7;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](v8);
  return SliderStyleConfiguration.value.modify;
}

void SliderStyleConfiguration.value.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  **(void **)a1 = *(void *)(*(void *)a1 + 24);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();

  free(v1);
}

uint64_t key path setter for SliderStyleConfiguration.onEditingChanged : SliderStyleConfiguration(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a2 + 24) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Bool) -> (@out ());
  *(void *)(a2 + 32) = v5;
  return result;
}

uint64_t SliderStyleConfiguration.onEditingChanged.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_retain();
  return v1;
}

uint64_t SliderStyleConfiguration.onEditingChanged.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return result;
}

uint64_t (*SliderStyleConfiguration.onEditingChanged.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double SliderStyleConfiguration.skipDistance.getter()
{
  return *(double *)(v0 + 40);
}

uint64_t SliderStyleConfiguration.discreteValueCount.getter()
{
  return *(void *)(v0 + 48);
}

uint64_t SliderStyleConfiguration.marks.getter()
{
  return swift_bridgeObjectRetain();
}

void SliderStyleConfiguration.ValueLabel.body.getter(BOOL *a1@<X8>)
{
  *a1 = (*v1 & 1) == 0;
}

unint64_t instantiation function for generic protocol witness table for SliderStyleConfiguration.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in SliderStyleConfiguration.Label()
{
  return &protocol witness table for SliderStyleConfiguration.Label;
}

unint64_t instantiation function for generic protocol witness table for SliderStyleConfiguration.MinimumValueLabel(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in SliderStyleConfiguration.MinimumValueLabel()
{
  return &protocol witness table for SliderStyleConfiguration.MinimumValueLabel;
}

unint64_t instantiation function for generic protocol witness table for SliderStyleConfiguration.MaximumValueLabel(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in SliderStyleConfiguration.MaximumValueLabel()
{
  return &protocol witness table for SliderStyleConfiguration.MaximumValueLabel;
}

uint64_t associated type witness table accessor for View.Body : View in SliderStyleConfiguration.ValueLabel()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SliderStyleConfiguration.ValueLabel(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = specialized static ViewAlias._viewListCount(inputs:)(*(void *)a1, v2, v3, v4);
  if ((v6 & 1) == 0)
  {
    BOOL v7 = v5 != specialized static ViewAlias._viewListCount(inputs:)(v1, v2, v3, v4);
    if ((v8 | v7)) {
      return 0;
    }
  }
  return v5;
}

void protocol witness for View.body.getter in conformance SliderStyleConfiguration.ValueLabel(BOOL *a1@<X8>)
{
  *a1 = (*v1 & 1) == 0;
}

uint64_t sub_187D02614@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(unsigned __int8 *a1)@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Bool) -> ();
  a2[1] = (uint64_t (*)(unsigned __int8 *))v5;

  return swift_retain();
}

uint64_t dispatch thunk of SliderStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for SliderStyleConfiguration.Label()
{
  return &type metadata for SliderStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for SliderStyleConfiguration.MinimumValueLabel()
{
  return &type metadata for SliderStyleConfiguration.MinimumValueLabel;
}

ValueMetadata *type metadata accessor for SliderStyleConfiguration.MaximumValueLabel()
{
  return &type metadata for SliderStyleConfiguration.MaximumValueLabel;
}

unsigned char *storeEnumTagSinglePayload for SliderStyleConfiguration.ValueLabel(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    int *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D027ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          int *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SliderStyleConfiguration.ValueLabel()
{
  return &type metadata for SliderStyleConfiguration.ValueLabel;
}

uint64_t sub_187D027E4()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel>)
  {
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<SliderStyleConfiguration.MinimumValueLabel, SliderStyleConfiguration.MaximumValueLabel>);
    }
  }
}

uint64_t getEnumTagSinglePayload for SliderStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for SliderStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187D02C9CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t initializeWithCopy for SliderStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  size_t v8 = (_OWORD *)(a2 + 72);
  unsigned int v7 = *(void **)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v7)
  {
    BOOL v9 = *(void **)(a2 + 80);
    unsigned int v10 = *(void **)(a2 + 88);
    *(void *)(a1 + 72) = v7;
    *(void *)(a1 + 80) = v9;
    int v11 = *(void **)(a2 + 96);
    *(void *)(a1 + 88) = v10;
    *(void *)(a1 + 96) = v11;
    id v12 = v7;
    id v13 = v9;
    id v14 = v10;
    id v15 = v11;
  }
  else
  {
    long long v16 = v8[1];
    *(_OWORD *)(a1 + 72) = *v8;
    *(_OWORD *)(a1 + 88) = v16;
  }
  return a1;
}

uint64_t assignWithCopy for SliderStyleConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = (_OWORD *)(a1 + 72);
  uint64_t v6 = *(void **)(a1 + 72);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  size_t v8 = (_OWORD *)(a2 + 72);
  unsigned int v7 = *(void **)(a2 + 72);
  if (v6)
  {
    if (v7)
    {
      *(void *)(a1 + 72) = v7;
      id v9 = v7;

      unsigned int v10 = *(void **)(a1 + 80);
      int v11 = *(void **)(a2 + 80);
      *(void *)(a1 + 80) = v11;
      id v12 = v11;

      id v13 = *(void **)(a1 + 88);
      id v14 = *(void **)(a2 + 88);
      *(void *)(a1 + 88) = v14;
      id v15 = v14;

      long long v16 = *(void **)(a1 + 96);
      uint64_t v17 = *(void **)(a2 + 96);
      *(void *)(a1 + 96) = v17;
      id v18 = v17;
    }
    else
    {
      outlined destroy of AccessibilityBoundedNumber(a1 + 72);
      long long v26 = *(_OWORD *)(a2 + 88);
      *uint64_t v5 = *v8;
      *(_OWORD *)(a1 + 88) = v26;
    }
  }
  else if (v7)
  {
    *(void *)(a1 + 72) = v7;
    unint64_t v19 = *(void **)(a2 + 80);
    *(void *)(a1 + 80) = v19;
    int v20 = *(void **)(a2 + 88);
    *(void *)(a1 + 88) = v20;
    long long v21 = *(void **)(a2 + 96);
    *(void *)(a1 + 96) = v21;
    id v22 = v7;
    id v23 = v19;
    id v24 = v20;
    id v25 = v21;
  }
  else
  {
    long long v27 = *(_OWORD *)(a2 + 88);
    *uint64_t v5 = *v8;
    *(_OWORD *)(a1 + 88) = v27;
  }
  return a1;
}

uint64_t assignWithTake for SliderStyleConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 72);
  uint64_t v6 = *(void **)(a1 + 72);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  if (!v6) {
    goto LABEL_5;
  }
  if (!v5)
  {
    outlined destroy of AccessibilityBoundedNumber(a1 + 72);
LABEL_5:
    long long v10 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = v10;
    return a1;
  }
  *(void *)(a1 + 72) = v5;

  unsigned int v7 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);

  size_t v8 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);

  id v9 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);

  return a1;
}

ValueMetadata *type metadata accessor for ResolvedSliderStyle()
{
  return &type metadata for ResolvedSliderStyle;
}

unint64_t lazy protocol witness table accessor for type SliderStyleModifier<AutomaticSliderStyle> and conformance SliderStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type SliderStyleModifier<AutomaticSliderStyle> and conformance SliderStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type SliderStyleModifier<AutomaticSliderStyle> and conformance SliderStyleModifier<A>)
  {
    type metadata accessor for SliderStyleModifier<AutomaticSliderStyle>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SliderStyleModifier<AutomaticSliderStyle> and conformance SliderStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for SliderStyleModifier<AutomaticSliderStyle>()
{
  if (!lazy cache variable for type metadata for SliderStyleModifier<AutomaticSliderStyle>)
  {
    lazy protocol witness table accessor for type AutomaticSliderStyle and conformance AutomaticSliderStyle();
    unint64_t v0 = type metadata accessor for SliderStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SliderStyleModifier<AutomaticSliderStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AutomaticSliderStyle and conformance AutomaticSliderStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticSliderStyle and conformance AutomaticSliderStyle;
  if (!lazy protocol witness table cache variable for type AutomaticSliderStyle and conformance AutomaticSliderStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticSliderStyle and conformance AutomaticSliderStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in SliderStyleModifier<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedSliderStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187D031C4()
{
  swift_release();

  return swift_deallocObject();
}

Swift::Void __swiftcall UICollectionViewListCoordinatorBase.commitUpdates()()
{
  uint64_t v1 = *MEMORY[0x1E4FBC8C8] & *v0;
  *((unsigned char *)v0 + *(void *)(v1 + 192)) = 1;
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = *(void *)(v1 + 96);
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v1 + 104);
  *(void *)(v3 + 40) = *(void *)(v1 + 120);
  *(void *)(v3 + 48) = v2;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();

  swift_release();
}

uint64_t UICollectionViewListCoordinatorBase.collectionView(_:viewForSupplementaryElementOfKind:at:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v46 = a4;
  id v44 = a1;
  size_t v8 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v9 = type metadata accessor for ShadowListDataSource();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v45 = (char *)&v41 - v11;
  if (a2 == 0xD000000000000011 && a3 == 0x80000001883361A0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  size_t v8 = (void *)MEMORY[0x1E4FBC8C8];
  swift_bridgeObjectRelease();
  if ((v12 & 1) == 0)
  {
    id v23 = (void *)MEMORY[0x18C115780](a2, a3);
    id v24 = (void *)MEMORY[0x18C115780](0x646165487473694CLL, 0xEA00000000007265);
    swift_bridgeObjectRelease();
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v44 = objc_msgSend(v44, sel_dequeueReusableSupplementaryViewOfKind_withReuseIdentifier_forIndexPath_, v23, v24, isa);

    swift_getAssociatedTypeWitness();
    uint64_t v20 = swift_dynamicCastUnknownClassUnconditional();
    swift_getAssociatedConformanceWitness();
    PlatformListViewBase.updateViewGraphForDisplay(_:)(0);
    uint64_t v26 = IndexPath.section.getter();
    if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a2 && v27 == a3)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v28 & 1) == 0)
      {
        uint64_t v36 = (void *)MEMORY[0x1E4FBC8C8];
        uint64_t v37 = (char *)v5 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0x88);
        swift_beginAccess();
        uint64_t v30 = v45;
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v45, v37, v9);
        int v38 = (void *)((char *)v5 + *(void *)((*v36 & *v5) + 0xA0));
        swift_beginAccess();
        uint64_t v34 = *v38;
        outlined copy of Transaction?(v34);
        uint64_t WitnessTable = swift_getWitnessTable();
        ListCoreDataSource.configureFooter(_:transaction:forSectionAtOffset:)(v20, v34, v26, v9, WitnessTable);
LABEL_15:
        outlined consume of Transaction?(v34);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v30, v9);
        return v20;
      }
    }
    type metadata accessor for ListCollectionViewCell();
    uint64_t v29 = swift_dynamicCastClass();
    uint64_t v30 = v45;
    uint64_t v31 = (void *)MEMORY[0x1E4FBC8C8];
    if (v29) {
      *(unsigned char *)(v29 + direct field offset for ListCollectionViewCellBase.shouldHugContent) = *((unsigned char *)v5
    }
                                                                                              + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0x128));
    uint64_t v32 = (char *)v5 + *(void *)((*v31 & *v5) + 0x88);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v30, v32, v9);
    unsigned int v33 = (void *)((char *)v5 + *(void *)((*v31 & *v5) + 0xA0));
    swift_beginAccess();
    uint64_t v34 = *v33;
    outlined copy of Transaction?(v34);
    uint64_t v35 = swift_getWitnessTable();
    ListCoreDataSource.configureHeader(_:transaction:forSectionAtOffset:)(v20, v34, v26, v9, v35);
    goto LABEL_15;
  }
LABEL_5:
  id v13 = (char *)v5 + *(void *)((*v8 & *v5) + 0x88);
  swift_beginAccess();
  id v14 = v45;
  long long v42 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v42(v45, v13, v9);
  char v15 = ShadowListDataSource.hasGlobalHeader.getter(v9);
  unint64_t v43 = *(void (**)(char *, uint64_t))(v10 + 8);
  v43(v14, v9);
  if (v15)
  {
    long long v16 = (void *)MEMORY[0x18C115780](a2, a3);
    uint64_t v17 = (void *)MEMORY[0x18C115780](0xD000000000000011, 0x80000001883361A0);
    swift_bridgeObjectRelease();
    Class v18 = IndexPath._bridgeToObjectiveC()().super.isa;
    id v19 = objc_msgSend(v44, sel_dequeueReusableSupplementaryViewOfKind_withReuseIdentifier_forIndexPath_, v16, v17, v18);

    self;
    uint64_t v20 = swift_dynamicCastObjCClassUnconditional();
    v42(v14, v13, v9);
    long long v21 = (void *)((char *)v5 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0xA0));
    swift_beginAccess();
    uint64_t v22 = *v21;
    outlined copy of Transaction?(*v21);
    ShadowListDataSource.configureGlobalHeader(_:transaction:)(v20, v22, v9);
    outlined consume of Transaction?(v22);
    v43(v14, v9);
    return v20;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8));
}

void UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.setter(char a1)
{
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xE8);
  char v3 = *((unsigned char *)v1 + v2);
  *((unsigned char *)v1 + v2) = a1;
  UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.didset(v3);
}

uint64_t UICollectionViewListCoordinatorBase.selectionStorage.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118));
}

uint64_t UICollectionViewListCoordinatorBase.sectionHeadersShouldHugContent.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128));
}

uint64_t UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(void *a1, uint64_t a2)
{
  void (*v15)(uint64_t *__return_ptr, uint64_t, uint64_t);
  id v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)();
  void v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  size_t v8 = (char *)v25 - v7;
  uint64_t v9 = IndexPath.section.getter();
  if (v9 == NSNotFound.getter()) {
    return 0;
  }
  if (!objc_msgSend(a1, sel_isEditing)) {
    return 1;
  }
  UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(a2, (uint64_t)v8);
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v8, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (v10 != 1) {
    return 0;
  }
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  unint64_t v12 = (unint64_t)objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (v12)
  {
    uint64_t v13 = swift_getAssociatedTypeWitness();
    if (!swift_dynamicCastUnknownClass())
    {

      return 0;
    }
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    char v15 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
    long long v16 = (id)v12;
    v15(&v27, v13, AssociatedConformanceWitness);

    uint64_t v17 = v28;
    if (v28 == 1)
    {

      return 0;
    }
    id v19 = v27;
    uint64_t v20 = v29;
    long long v21 = v30;
    uint64_t v22 = v31;
    unint64_t v12 = v28 != 0;
    v25[1] = v33;
    uint64_t v26 = v32;
    v25[0] = v34;
    if (v28)
    {
      id v23 = swift_allocObject();
      *(void *)(v23 + 16) = v17;
      *(void *)(v23 + 24) = v20;
      id v24 = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
    }
    else
    {
      id v24 = 0;
    }
    outlined copy of AppIntentExecutor?(v17);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v24);

    outlined consume of PlatformItemList.Item.SelectionBehavior?(v19, v17, v20, v21, v22, v26);
  }
  return v12;
}

uint64_t UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)(void *a1, uint64_t a2)
{
  void (*v49)(uint64_t *__return_ptr, uint64_t, uint64_t);
  id v50;
  uint64_t (*v51)();
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v67;
  uint64_t (*v68)();
  uint64_t v69;
  uint64_t v70;
  uint64_t (*v71)();
  void *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(unsigned char *, unsigned char *, uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t (*v80)();
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(unsigned char *, unsigned char *, uint64_t);
  unsigned char *v88;
  unint64_t v89;
  void *v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  unsigned char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(unsigned char *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  Class v104;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  unsigned char *v112;
  uint64_t v113;
  id v114;
  Swift::Bool v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  unsigned char *v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  unsigned char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned char *v130;
  uint64_t v131;
  uint64_t v132;
  unsigned char *v133;
  uint64_t v134;
  unsigned char *v135;
  unsigned char *v136;
  unsigned char *v137;
  uint64_t v138;
  Class v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  void (*v147)(unsigned char *, char *, uint64_t);
  uint64_t v148;
  unsigned char *v149;
  unsigned char *v150;
  uint64_t v151;
  unsigned char *v152;
  unsigned char *v153;
  Class v154;
  uint64_t v155;
  void (*v156)(unsigned char *, uint64_t, uint64_t);
  uint64_t v157;
  uint64_t v158;
  unsigned char v159[4];
  unsigned int v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  int v164;
  uint64_t v165;
  void (*v166)(unsigned char *, unsigned char *, uint64_t);
  unsigned char *v167;
  unsigned char *v168;
  uint64_t v169;
  uint64_t v170;
  unsigned char *v171;
  unsigned char *v172;
  unsigned char *v173;
  unsigned char *v174;
  unsigned char *v175;
  unsigned char *v176;
  unsigned char *v177;
  unsigned char *v178;
  unsigned char *v179;
  uint64_t v180;
  id v181;
  uint64_t (*v182)();
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned char *v186;
  uint64_t v187;
  void *v188;
  uint64_t (*v189)();
  id v190;
  char *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t (*v202)();
  unsigned char *v203;
  uint64_t v204;
  unsigned char *v205;
  uint64_t (*v206)();
  uint64_t v207;
  uint64_t v208;
  unsigned __int8 v209;

  char v3 = v2;
  v188 = (void *)(*MEMORY[0x1E4FBC8C8] & *v2);
  uint64_t v6 = v188;
  _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  v178 = &v159[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v9);
  v182 = (uint64_t (*)())&v159[-v10];
  v183 = type metadata accessor for IndexPath();
  v184 = *(void *)(v183 - 8);
  MEMORY[0x1F4188790](v183);
  v179 = &v159[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v169 = *(void *)(v6[13] - 8);
  MEMORY[0x1F4188790](v12);
  v168 = &v159[-v13];
  v195 = v14;
  uint64_t v15 = type metadata accessor for Binding();
  v192 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  v167 = &v159[-v16];
  v189 = (uint64_t (*)())v6[14];
  uint64_t v17 = *((void *)v189 + 1);
  uint64_t v18 = v6[12];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v185 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v20 = *(void *)(v185 + 64);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v176 = &v159[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v21);
  v171 = &v159[-v22];
  MEMORY[0x1F4188790](v23);
  v186 = &v159[-v24];
  MEMORY[0x1F4188790](v25);
  v175 = &v159[-v26];
  v196 = v15;
  v194 = type metadata accessor for Optional();
  v193 = *(void *)(v194 - 8);
  MEMORY[0x1F4188790](v194);
  v191 = &v159[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v28);
  v177 = &v159[-v29];
  MEMORY[0x1F4188790](v30);
  v173 = &v159[-v31];
  v197 = AssociatedTypeWitness;
  v198 = type metadata accessor for Optional();
  v200 = *(void *)(v198 - 8);
  MEMORY[0x1F4188790](v198);
  v174 = &v159[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v33);
  v172 = &v159[-v34];
  MEMORY[0x1F4188790](v35);
  uint64_t v37 = &v159[-v36];
  MEMORY[0x1F4188790](v38);
  uint64_t v40 = &v159[-v39];
  MEMORY[0x1F4188790](v41);
  v199 = &v159[-v42];
  UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(a2, (uint64_t)&v159[-v42]);
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v181 = a1;
  id v44 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  v187 = a2;
  v190 = v44;
  v170 = v17;
  v180 = v18;
  if (!v44) {
    goto LABEL_5;
  }
  uint64_t v46 = swift_getAssociatedTypeWitness();
  uint64_t v45 = swift_dynamicCastUnknownClass();
  if (!v45) {
    goto LABEL_5;
  }
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unsigned int v48 = v44;
  unsigned int v49 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
  uint64_t v50 = v48;
  v49(&v201, v46, AssociatedConformanceWitness);
  unint64_t v51 = v202;
  if (v202 != (uint64_t (*)())1)
  {
    v163 = v50;
    uint64_t v82 = v201;
    uint64_t v56 = (uint64_t)v203;
    v165 = v204;
    v175 = v205;
    uint64_t v83 = v207;
    v189 = v206;
    uint64_t v84 = v208;
    v164 = v209;
    v160 = objc_msgSend(v181, sel_isEditing);
    uint64_t v85 = v200;
    uint64_t v86 = v198;
    v166 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v200 + 16);
    v166(v40, v199, v198);
    if ((v82 & 0x10000) != 0)
    {
      uint64_t v102 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v185 + 48))(v40, 1, v197);
      (*(void (**)(unsigned char *, uint64_t))(v85 + 8))(v40, v86);
      long long v57 = v192;
      if (v102 != 1)
      {
        unint64_t v59 = v196;
        int v58 = (void *)MEMORY[0x1E4FBC8C8];
        if (v82)
        {

          outlined consume of PlatformItemList.Item.SelectionBehavior?(v82, (uint64_t)v51, v56, v165, (uint64_t)v175, (uint64_t)v189);
          LODWORD(v186) = 0;
          unint64_t v51 = 0;
          uint64_t v56 = 0;
          goto LABEL_48;
        }
        v161 = v83;
        v162 = v84;
        uint64_t v103 = v192;
        LODWORD(v186) = 0;
        goto LABEL_35;
      }
      unint64_t v59 = v196;
    }
    else
    {
      (*(void (**)(unsigned char *, uint64_t))(v85 + 8))(v40, v86);
      unint64_t v59 = v196;
      long long v57 = v192;
    }
    int v58 = (void *)MEMORY[0x1E4FBC8C8];
    if (v82)
    {
      v161 = v83;
      v162 = v84;

      int v60 = v191;
      goto LABEL_45;
    }
    v161 = v83;
    v162 = v84;
    uint64_t v103 = v57;
    LODWORD(v186) = 1;
LABEL_35:
    uint64_t v110 = (char *)v3 + *(void *)((*v58 & *v3) + 0x100);
    swift_beginAccess();
    uint64_t v111 = v193;
    uint64_t v112 = v173;
    uint64_t v113 = v194;
    (*(void (**)(unsigned char *, char *, uint64_t))(v193 + 16))(v173, v110, v194);
    LODWORD(v110) = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v103 + 48))(v112, 1, v196);
    (*(void (**)(unsigned char *, uint64_t))(v111 + 8))(v112, v113);
    long long v57 = v103;
    if (v110 == 1)
    {
      if ((v160 & 1) == 0)
      {

        outlined consume of PlatformItemList.Item.SelectionBehavior?(v82, (uint64_t)v51, v56, v165, (uint64_t)v175, (uint64_t)v189);
        unint64_t v51 = 0;
        uint64_t v56 = 0;
        goto LABEL_8;
      }
    }
    else if ((v160 & 1) == 0)
    {

      int v60 = v191;
      goto LABEL_44;
    }
    uint64_t v114 = v163;
    if (one-time initialization token for allowNonMomentaryEditModeSelection != -1) {
      swift_once();
    }
    uint64_t v115 = allowNonMomentaryEditModeSelection;

    int v60 = v191;
    if (!v115)
    {
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v82, (uint64_t)v51, v56, v165, (uint64_t)v175, (uint64_t)v189);
      unint64_t v51 = 0;
      uint64_t v56 = 0;
      unint64_t v59 = v196;
      goto LABEL_10;
    }
LABEL_44:
    unint64_t v59 = v196;
    if ((v186 & 1) == 0)
    {
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v82, (uint64_t)v51, v56, v165, (uint64_t)v175, (uint64_t)v189);
      LODWORD(v186) = 0;
      unint64_t v51 = 0;
      uint64_t v56 = 0;
      goto LABEL_10;
    }
LABEL_45:
    outlined copy of AppIntentExecutor?((uint64_t)v51);
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v82, (uint64_t)v51, v56, v165, (uint64_t)v175, (uint64_t)v189);
    if (v51)
    {
      unint64_t v93 = v59;
      uint64_t v92 = v82 & 1;
      goto LABEL_47;
    }
    LODWORD(v186) = 1;
    if (v82) {
      goto LABEL_48;
    }
LABEL_10:
    v191 = (unsigned char *)v56;
    v189 = v51;
    unint64_t v61 = (char *)v3 + *(void *)((*v58 & *v3) + 0x100);
    swift_beginAccess();
    int v62 = v193;
    uint64_t v63 = v194;
    (*(void (**)(char *, char *, uint64_t))(v193 + 16))(v60, v61, v194);
    long long v64 = v57;
    uint64_t v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48);
    if (v65(v60, 1, v59) == 1)
    {
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v189);

      (*(void (**)(char *, uint64_t))(v62 + 8))(v60, v63);
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v200 + 8))(v199, v198);
    }
    (*(void (**)(char *, uint64_t))(v62 + 8))(v60, v63);
    int v67 = (uint64_t)v3 + *(void *)((*v58 & *v3) + 0xD8);
    swift_beginAccess();
    unint64_t v68 = v182;
    outlined init with copy of IndexPath?(v67, (uint64_t)v182);
    char v69 = v184;
    uint64_t v70 = v183;
    if ((*(unsigned int (**)(uint64_t (*)(), uint64_t, uint64_t))(v184 + 48))(v68, 1, v183) == 1)
    {
      (*(void (**)(unsigned char *, uint64_t))(v200 + 8))(v199, v198);

      _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v68, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
      goto LABEL_70;
    }
    uint64_t v80 = v68;
    uint64_t v81 = (uint64_t)v179;
    (*(void (**)(unsigned char *, uint64_t (*)(), uint64_t))(v69 + 32))(v179, v80, v70);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
    if (dispatch thunk of static Equatable.== infix(_:_:)())
    {

      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v81, v70);
      (*(void (**)(unsigned char *, uint64_t))(v200 + 8))(v199, v198);
      goto LABEL_70;
    }
    uint64_t v94 = v174;
    UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(v81, (uint64_t)v174);
    uint64_t v95 = v185;
    char v96 = v197;
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v185 + 48))(v94, 1, v197) == 1)
    {

      uint64_t v97 = v184;
      (*(void (**)(uint64_t, uint64_t))(v184 + 8))(v81, v70);
      uint64_t v98 = *(void (**)(unsigned char *, uint64_t))(v200 + 8);
      uint64_t v99 = v67;
      uint64_t v100 = v198;
      v98(v199, v198);
      uint64_t v101 = v100;
      int v67 = v99;
      v98(v94, v101);
      char v69 = v97;
LABEL_70:
      v155 = v187;
      uint64_t result = (uint64_t)v189;
      if (!v186) {
        return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v189);
      }
      if (v189)
      {
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v189);
        v156 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v69 + 16);
        v157 = v69;
        v158 = (uint64_t)v178;
        v156(v178, v155, v70);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v157 + 56))(v158, 0, 1, v70);
        swift_beginAccess();
        outlined assign with take of IndexPath?(v158, v67);
        return swift_endAccess();
      }
      return result;
    }
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v95 + 32))(v176, v94, v96);
    uint64_t v104 = IndexPath._bridgeToObjectiveC()().super.isa;
    uint64_t v105 = objc_msgSend(v181, sel_cellForItemAtIndexPath_, v104);

    uint64_t v106 = v200;
    if (v105)
    {
      v194 = v67;
      uint64_t v107 = swift_getAssociatedTypeWitness();
      if (!swift_dynamicCastUnknownClass())
      {

        char v96 = v197;
        goto LABEL_59;
      }
      uint64_t v108 = swift_getAssociatedConformanceWitness();
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v108 + 16))(&v201, v107, v108);
      uint64_t v109 = (uint64_t)v202;
      if (v202 == (uint64_t (*)())1)
      {

        char v96 = v197;
        long long v64 = v192;
LABEL_59:
        int v67 = v194;
        goto LABEL_67;
      }
      v140 = v204;
      v141 = (uint64_t)v205;
      LODWORD(v180) = v209;
      v193 = v207;
      v182 = v206;
      v177 = v203;
      v142 = v201;
      outlined copy of AppIntentExecutor?(v204);
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v142, v109, (uint64_t)v177, v140, v141, (uint64_t)v182);
      int v67 = v194;
      if (v140)
      {
        v143 = swift_allocObject();
        *(void *)(v143 + 16) = v140;
        *(void *)(v143 + 24) = v141;
        v144 = swift_allocObject();
        *(void *)(v144 + 16) = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
        *(void *)(v144 + 24) = v143;
        swift_retain();
        static Update.enqueueAction(_:)();
        swift_release();

        swift_release();
      }
      else
      {
      }
      char v96 = v197;
      long long v64 = v192;
    }
LABEL_67:
    v145 = v196;
    if (!v65(v61, 1, v196))
    {
      v146 = v64;
      v147 = *(void (**)(unsigned char *, char *, uint64_t))(v64 + 16);
      v148 = v67;
      v149 = v167;
      v147(v167, v61, v145);
      v150 = v168;
      MEMORY[0x18C113DA0](v145);
      v151 = v195;
      (*(void (**)(unsigned char *, uint64_t))(v188[15] + 40))(v176, v195);
      specialized Binding.wrappedValue.setter();
      (*(void (**)(unsigned char *, uint64_t))(v169 + 8))(v150, v151);
      v152 = v149;
      int v67 = v148;
      (*(void (**)(unsigned char *, uint64_t))(v146 + 8))(v152, v145);
    }
    v153 = v179;
    v154 = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v181, sel_deselectItemAtIndexPath_animated_, v154, 0);

    (*(void (**)(unsigned char *, uint64_t))(v185 + 8))(v176, v96);
    char v69 = v184;
    uint64_t v70 = v183;
    (*(void (**)(unsigned char *, uint64_t))(v184 + 8))(v153, v183);
    (*(void (**)(unsigned char *, uint64_t))(v106 + 8))(v199, v198);
    goto LABEL_70;
  }

  uint64_t v18 = v180;
LABEL_5:
  int v52 = v18;
  MEMORY[0x1F4188790](v45);
  int v53 = v188[15];
  swift_getAssociatedConformanceWitness();
  type metadata accessor for Set();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Optional();
  type metadata accessor for Optional();
  static Update.ensure<A>(_:)();
  uint64_t v54 = v201;
  if (!v201 || (long long v55 = v200, v201 == 1))
  {
    unint64_t v51 = 0;
    uint64_t v56 = 0;
    LODWORD(v186) = 1;
    long long v57 = v192;
    int v58 = (void *)MEMORY[0x1E4FBC8C8];
LABEL_8:
    unint64_t v59 = v196;
LABEL_9:
    int v60 = v191;
    goto LABEL_10;
  }
  uint64_t v71 = v202;
  uint64_t v72 = (void *)swift_allocObject();
  uint64_t v73 = v195;
  v72[2] = v52;
  v72[3] = v73;
  uint64_t v74 = (uint64_t)v189;
  v72[4] = v189;
  v72[5] = v53;
  void v72[6] = v54;
  v72[7] = v71;
  uint64_t v75 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v55 + 16);
  uint64_t v76 = v55;
  uint64_t v77 = v198;
  v166 = v75;
  v75(v37, v199, v198);
  uint64_t v78 = v185;
  uint64_t v79 = v197;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v185 + 48))(v37, 1, v197) == 1)
  {
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v76 + 8))(v37, v77);
    unint64_t v51 = 0;
    uint64_t v56 = 0;
    LODWORD(v186) = 1;
    unint64_t v59 = v196;
    long long v57 = v192;
    int v58 = (void *)MEMORY[0x1E4FBC8C8];
    goto LABEL_9;
  }
  uint64_t v87 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v78 + 32);
  uint64_t v88 = v175;
  v87(v175, v37, v79);
  v87(v186, v88, v79);
  unint64_t v89 = (*(unsigned __int8 *)(v78 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
  uint64_t v90 = (void *)swift_allocObject();
  unint64_t v91 = v195;
  v90[2] = v180;
  v90[3] = v91;
  v90[4] = v74;
  v90[5] = v53;
  uint64_t v56 = (uint64_t)v90;
  v90[6] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A.ListCoreDataSource.SelectionValue>) -> (@out ());
  v90[7] = v72;
  v87((unsigned char *)v90 + v89, v186, v79);
  unint64_t v51 = partial apply for closure #2 in UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:);
  uint64_t v92 = 1;
  unint64_t v93 = v196;
  long long v57 = v192;
  int v58 = (void *)MEMORY[0x1E4FBC8C8];
  int v60 = v191;
LABEL_47:
  swift_retain();
  uint64_t v116 = swift_allocObject();
  *(void *)(v116 + 16) = v51;
  *(void *)(v116 + 24) = v56;
  uint64_t v117 = swift_allocObject();
  *(void *)(v117 + 16) = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
  *(void *)(v117 + 24) = v116;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
  LODWORD(v186) = 1;
  unint64_t v59 = v93;
  if (!v92) {
    goto LABEL_10;
  }
LABEL_48:
  uint64_t v118 = (char *)v3 + *(void *)((*v58 & *v3) + 0x100);
  swift_beginAccess();
  uint64_t v119 = v193;
  uint64_t v120 = v177;
  uint64_t v121 = v57;
  uint64_t v122 = v194;
  (*(void (**)(unsigned char *, char *, uint64_t))(v193 + 16))(v177, v118, v194);
  v189 = *(uint64_t (**)())(v121 + 48);
  v123 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v189)(v120, 1, v59);
  (*(void (**)(unsigned char *, uint64_t))(v119 + 8))(v120, v122);
  if (v123 != 1 && !v186)
  {
    LODWORD(v186) = 0;
    unint64_t v59 = v196;
    int v60 = v191;
    long long v57 = v192;
    goto LABEL_10;
  }
  v124 = (uint64_t)v51;
  v191 = (unsigned char *)v56;
  v125 = v200;
  v126 = v172;
  v127 = v198;
  v166(v172, v199, v198);
  v128 = v185;
  v129 = v197;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v185 + 48))(v126, 1, v197) == 1)
  {
    (*(void (**)(unsigned char *, uint64_t))(v125 + 8))(v126, v127);
  }
  else
  {
    v130 = v171;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v128 + 32))(v171, v126, v129);
    swift_beginAccess();
    v131 = v196;
    v132 = v129;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v189)(v118, 1, v196))
    {
      (*(void (**)(unsigned char *, uint64_t))(v128 + 8))(v130, v129);
      swift_endAccess();
    }
    else
    {
      v133 = v130;
      v134 = v192;
      v135 = v167;
      (*(void (**)(unsigned char *, char *, uint64_t))(v192 + 16))(v167, v118, v131);
      swift_endAccess();
      v136 = v168;
      MEMORY[0x18C113DA0](v131);
      v137 = v133;
      v138 = v195;
      (*(void (**)(unsigned char *, uint64_t))(v188[15] + 40))(v137, v195);
      specialized Binding.wrappedValue.setter();
      (*(void (**)(unsigned char *, uint64_t))(v169 + 8))(v136, v138);
      (*(void (**)(unsigned char *, uint64_t))(v134 + 8))(v135, v131);
      (*(void (**)(unsigned char *, uint64_t))(v128 + 8))(v171, v132);
    }
    v127 = v198;
    v125 = v200;
  }
  v139 = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v181, sel_deselectItemAtIndexPath_animated_, v139, 1);

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v124);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v125 + 8))(v199, v127);
}

uint64_t UICollectionViewListCoordinatorBase.canSelect(rowAt:)(char *a1, uint64_t a2)
{
  uint64_t v26 = a1;
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v5 = v4;
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v4 + 0x70);
  uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v4 + 96);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v23 - v13;
  UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(a2, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v15 = 0;
    uint64_t v16 = 1;
    uint64_t v17 = v26;
  }
  else
  {
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v23(v14, v10, AssociatedTypeWitness);
    uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v5 + 120);
    id v19 = *(void (**)(char *, char *, uint64_t))(v5 + 104);
    swift_getAssociatedConformanceWitness();
    unint64_t v20 = WeakSelectionBasedStorage.$isSelectionEnabled.getter();
    if ((v20 & 0x100000000) != 0)
    {
      uint64_t v15 = 1;
    }
    else
    {
      MEMORY[0x1F4188790](v20);
      *(&v23 - 6) = v24;
      *(&v23 - 5) = v19;
      *(&v23 - 4) = v25;
      *(&v23 - 3) = v18;
      *((_DWORD *)&v23 - 4) = v21;
      *(&v23 - 1) = (void (*)(char *, char *, uint64_t))v14;
      static Update.ensure<A>(_:)();
      uint64_t v15 = v27;
    }
    uint64_t v17 = v26;
    v23(v26, v14, AssociatedTypeWitness);
    uint64_t v16 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v17, v16, 1, AssociatedTypeWitness);
  return v15;
}

uint64_t UICollectionViewListCoordinatorBase.collectionView(_:selectionFollowsFocusForItemAt:)(void *a1, uint64_t a2)
{
  void (*v17)(uint64_t *__return_ptr, uint64_t, uint64_t);
  id v18;
  char v19;
  uint64_t v20;
  BOOL v21;
  void v23[2];
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedTypeWitness;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  uint64_t v3 = v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  unsigned __int8 v27 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v25 = (uint64_t)v23 - v7;
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = a2;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v13 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (v13)
  {
    uint64_t v14 = swift_getAssociatedTypeWitness();
    uint64_t v15 = (void *)swift_dynamicCastUnknownClass();
    if (v15)
    {
      v23[1] = v3;
      uint64_t v24 = v6;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v17 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16);
      uint64_t v18 = v13;
      v17(&v29, v14, AssociatedConformanceWitness);

      if (v30 == 1)
      {
        id v19 = 1;
      }
      else
      {
        id v19 = v29 & 1;
        outlined consume of PlatformItemList.Item.SelectionBehavior?(v29, v30, v31, v32, v33, v34);
      }
      uint64_t v6 = v24;
    }
    else
    {

      id v19 = 1;
    }
  }
  else
  {
    uint64_t v15 = 0;
    id v19 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v28, v8);
  if (v19)
  {
    unint64_t v20 = v25;
    UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)((uint64_t)v11, v25);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    int v21 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v20, 1) != 1;
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v20, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

    return 1;
  }
  return v21;
}

Swift::Void __swiftcall UICollectionViewListCoordinatorBase.stopWaitingForAnimationCompletion()()
{
  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8);
  char v2 = *((unsigned char *)v0 + v1);
  *((unsigned char *)v0 + v1) = 2;
  UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.didset(v2);
}

id UICollectionViewListCoordinatorBase.leadingSwipeActionsConfiguration(indexPath:)(uint64_t a1)
{
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v65 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v65 + 64);
  double v7 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = MEMORY[0x18C119DF0]((char *)v1 + *(void *)(v4 + 248), v7);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (void *)v8;
  uint64_t v64 = v4;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v11 = objc_msgSend(v9, sel_cellForItemAtIndexPath_, isa);

  if (!v11) {
    return 0;
  }
  type metadata accessor for AnyListCollectionViewCell();
  uint64_t v12 = (void *)swift_dynamicCastClass();
  if (!v12)
  {

    return 0;
  }
  id v63 = v11;
  (*(void (**)(void *__return_ptr))((*v3 & *v12) + 0x80))(v66);
  uint64_t v13 = MEMORY[0x1E4FBB718];
  _s7SwiftUI12SwipeActionsO5ValueVSgWObTm_0((uint64_t)v66, (uint64_t)v80, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemList?);
  _s7SwiftUI12SwipeActionsO5ValueVSgWObTm_0((uint64_t)v80, (uint64_t)&v81, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, v13, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemList?);
  if (_s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)&v81) == 1) {
    goto LABEL_7;
  }
  uint64_t v14 = v81;
  uint64_t v15 = v84;
  uint64_t v59 = v94;
  uint64_t v60 = v93;
  uint64_t v61 = v92;
  uint64_t v57 = v91;
  uint64_t v62 = v90;
  uint64_t v53 = v89;
  uint64_t v52 = v82;
  uint64_t v16 = v83;
  uint64_t v55 = v86;
  uint64_t v56 = v85;
  uint64_t v58 = v87;
  uint64_t v54 = v88;
  outlined copy of SwipeActions.Configuration?(v81, v82, v83, v84, v85, v86, v87, v88, v89, v90, v91, v92, v93);
  outlined release of SwipeActions.Value?(v80);
  uint64_t v51 = v15;
  if (!v15)
  {
LABEL_7:

    return 0;
  }
  int v46 = v14 & 1;
  unsigned int v47 = (v14 >> 8) & 1;
  uint64_t v50 = v16;
  char v97 = BYTE1(v16) & 1;
  uint64_t v48 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISwipeActionsConfiguration);
  LOWORD(v66[0]) = v14 & 0x101;
  uint64_t v17 = v51;
  v66[1] = v52;
  char v67 = v16;
  char v68 = v97;
  uint64_t v18 = v57;
  uint64_t v69 = v51;
  uint64_t v70 = v56;
  uint64_t v71 = v55;
  char v72 = v58;
  uint64_t v73 = v54;
  uint64_t v74 = v53;
  uint64_t v75 = v62;
  uint64_t v76 = v57;
  uint64_t v77 = v61;
  uint64_t v78 = v60;
  uint64_t v79 = v59;
  uint64_t v19 = swift_allocObject();
  uint64_t v45 = v19;
  swift_unknownObjectWeakInit();
  uint64_t v49 = v14;
  uint64_t v20 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))((char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v22 = swift_allocObject();
  uint64_t v23 = v64;
  *(void *)(v22 + 16) = *(void *)(v64 + 96);
  *(_OWORD *)(v22 + 24) = *(_OWORD *)(v23 + 104);
  *(void *)(v22 + 40) = *(void *)(v23 + 120);
  *(void *)(v22 + 48) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v20 + 32))(v22 + v21, (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  unint64_t v24 = v22 + ((v6 + v21 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)unint64_t v24 = v46;
  *(unsigned char *)(v24 + 1) = v47;
  *(_DWORD *)(v24 + 2) = v98;
  *(_WORD *)(v24 + 6) = v99;
  uint64_t v25 = v52;
  *(void *)(v24 + 8) = v52;
  uint64_t v26 = v50;
  *(unsigned char *)(v24 + 16) = v50;
  *(unsigned char *)(v24 + 17) = v97;
  *(_DWORD *)(v24 + 18) = *(_DWORD *)&v95[7];
  *(_WORD *)(v24 + 22) = v96;
  uint64_t v27 = v55;
  uint64_t v28 = v56;
  *(void *)(v24 + 24) = v17;
  *(void *)(v24 + 32) = v28;
  *(void *)(v24 + 40) = v27;
  uint64_t v29 = v58;
  uint64_t v30 = v59;
  *(unsigned char *)(v24 + 48) = v58;
  *(_DWORD *)(v24 + 49) = *(_DWORD *)v95;
  *(_DWORD *)(v24 + 52) = *(_DWORD *)&v95[3];
  uint64_t v32 = v53;
  uint64_t v31 = v54;
  *(void *)(v24 + 56) = v54;
  *(void *)(v24 + 64) = v32;
  uint64_t v34 = v61;
  uint64_t v33 = v62;
  *(void *)(v24 + 72) = v62;
  *(void *)(v24 + 80) = v18;
  uint64_t v35 = v60;
  *(void *)(v24 + 88) = v34;
  *(void *)(v24 + 96) = v35;
  *(void *)(v24 + 104) = v30;
  uint64_t v44 = v18;
  uint64_t v36 = v17;
  uint64_t v37 = v49;
  uint64_t v38 = v27;
  uint64_t v39 = v29;
  outlined copy of SwipeActions.Configuration?(v49, v25, v26, v36, v28, v27, v29, v31, v32, v33, v44, v34, v35);
  uint64_t v40 = v26;
  uint64_t v41 = v51;
  outlined copy of SwipeActions.Configuration?(v37, v25, v40, v51, v28, v38, v39, v31, v32, v62, v57, v61, v60);
  swift_retain();
  id v42 = UISwipeActionsConfiguration.init(configuration:performDestructiveAction:)((unsigned __int8 *)v66, (uint64_t)partial apply for closure #1 in closure #1 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:), v22);

  outlined consume of SwipeActions.Configuration?(v49, v25, v50, v41, v28, v38, v58, v31, v32, v62, v57, v61, v60);
  swift_release();
  return v42;
}

uint64_t UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)(uint64_t a1, void **a2)
{
  uint64_t v3 = v2;
  uint64_t v115 = (uint64_t *)(*MEMORY[0x1E4FBC8C8] & *v3);
  uint64_t v6 = v115;
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v114 = v9;
  uint64_t v10 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = v6[12];
  uint64_t v118 = v6[14];
  uint64_t v12 = v11;
  uint64_t v13 = type metadata accessor for ShadowListDataSource();
  uint64_t v117 = *(void *)(v13 - 8);
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v116 = (char *)&v91 - v15;
  uint64_t v16 = *a2;
  uint64_t v17 = a2[1];
  uint64_t v113 = v16;
  id v18 = (id)MEMORY[0x18C119DF0]((char *)v3 + v6[31], v14);
  if (v18)
  {
    uint64_t v110 = v17;
    uint64_t v111 = v10;
    uint64_t v112 = a1;
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v20 = objc_msgSend(v18, sel_cellForItemAtIndexPath_, isa);

    if (v20)
    {
      type metadata accessor for AnyListCollectionViewCell();
      unint64_t v21 = (void *)swift_dynamicCastClass();
      if (!v21)
      {

        return 0;
      }
      uint64_t v103 = v8;
      id v109 = v20;
      uint64_t v22 = (void *)MEMORY[0x1E4FBC8C8];
      (*(void (**)(uint64_t *__return_ptr))((*MEMORY[0x1E4FBC8C8] & *v21) + 0x80))(&v136);
      uint64_t v23 = MEMORY[0x1E4FBB718];
      _s7SwiftUI12SwipeActionsO5ValueVSgWObTm_0((uint64_t)&v136, (uint64_t)v142, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemList?);
      _s7SwiftUI12SwipeActionsO5ValueVSgWObTm_0((uint64_t)v142, (uint64_t)v143, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, v23, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformItemList?);
      int v24 = _s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)v143);
      uint64_t v104 = v7;
      uint64_t v107 = v12;
      if (v24 == 1) {
        goto LABEL_11;
      }
      uint64_t v25 = v147;
      uint64_t v97 = v157;
      uint64_t v90 = v157;
      uint64_t v105 = v156;
      uint64_t v106 = v155;
      uint64_t v98 = v154;
      uint64_t v99 = v153;
      id v108 = v152;
      uint64_t v26 = v144;
      uint64_t v101 = v146;
      uint64_t v102 = v145;
      uint64_t v27 = v148;
      uint64_t v28 = v149;
      uint64_t v100 = v150;
      uint64_t v29 = v151;
      outlined copy of SwipeActions.Configuration?(v144, v145, v146, v147, v148, v149, v150, v151, (uint64_t)v152, v153, v154, v155, v156);
      outlined release of SwipeActions.Value?(v142);
      if (!v25)
      {
LABEL_11:
        id v108 = 0;
      }
      else
      {
        uint64_t v94 = v25;
        uint64_t v95 = v26;
        LOWORD(v119) = v26 & 0x101;
        *((void *)&v119 + 1) = v102;
        __int16 v120 = v101 & 0x1FF;
        uint64_t v121 = v25;
        uint64_t v122 = v27;
        uint64_t v92 = v28;
        uint64_t v93 = v27;
        uint64_t v123 = v28;
        char v124 = v100;
        uint64_t v30 = v29;
        uint64_t v125 = v29;
        uint64_t v126 = (uint64_t)v108;
        uint64_t v32 = v98;
        uint64_t v31 = v99;
        uint64_t v127 = v99;
        uint64_t v128 = v98;
        uint64_t v129 = v106;
        uint64_t v130 = v105;
        uint64_t v131 = v97;
        swift_bridgeObjectRetain();
        outlined copy of Binding<NavigationSplitViewColumn>?(v27, v28);
        uint64_t v33 = v30;
        uint64_t v96 = v30;
        uint64_t v34 = (uint64_t)v108;
        uint64_t v35 = v32;
        uint64_t v36 = v32;
        uint64_t v37 = v105;
        uint64_t v38 = v106;
        outlined copy of Binding<SwipeActionResultToken?>?(v33, (uint64_t)v108, v31, v35, v106, v105);
        closure #1 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)(&v119, v3, v112, v135);
        uint64_t v89 = v37;
        uint64_t v87 = v36;
        uint64_t v88 = v38;
        uint64_t v85 = v34;
        uint64_t v86 = v31;
        uint64_t v40 = v94;
        uint64_t v39 = v95;
        uint64_t v42 = v101;
        uint64_t v41 = v102;
        uint64_t v43 = v92;
        uint64_t v44 = v93;
        uint64_t v45 = v100;
        outlined consume of SwipeActions.Configuration?(v95, v102, v101, v94, v93, v92, v100, v96, v85, v86, v87, v88, v89);
        uint64_t v90 = v97;
        outlined consume of SwipeActions.Configuration?(v39, v41, v42, v40, v44, v43, v45, v96, (uint64_t)v108, v99, v98, v106, v105);
        id v18 = v135[0];
        id v46 = objc_msgSend(v135[0], sel_actions);
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIContextualAction);
        unint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v47 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v48 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        uint64_t v22 = (void *)MEMORY[0x1E4FBC8C8];
        uint64_t v12 = v107;
        if (v48) {
          goto LABEL_16;
        }
        id v108 = v18;
      }
      uint64_t v49 = (char *)v3 + *(void *)((*v22 & *v3) + 0x88);
      swift_beginAccess();
      uint64_t v50 = v116;
      uint64_t v51 = v117;
      uint64_t v52 = (*(uint64_t (**)(char *, char *, uint64_t))(v117 + 16))(v116, v49, v13);
      MEMORY[0x1F4188790](v52);
      uint64_t v53 = v115[13];
      uint64_t v87 = v12;
      uint64_t v88 = v53;
      uint64_t v54 = v115[15];
      uint64_t v55 = v13;
      uint64_t v56 = v118;
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v115 = &v91;
      MEMORY[0x1F4188790](KeyPath);
      uint64_t v105 = v54;
      uint64_t v106 = v53;
      uint64_t v87 = v53;
      uint64_t v88 = v56;
      uint64_t v89 = v54;
      uint64_t v90 = v58;
      uint64_t WitnessTable = swift_getWitnessTable();
      ListCoreDataSource.visitContent<A>(atRow:visitor:)(v112, (uint64_t)partial apply for implicit closure #2 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:), (uint64_t)&v85, v55, MEMORY[0x1E4FBB390], WitnessTable, (uint64_t)&v136);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v55);
      swift_release();
      if (v136 == 2)
      {

        return (uint64_t)v108;
      }
      id v18 = v108;
      if ((v136 & 1) == 0)
      {
LABEL_16:

        return (uint64_t)v18;
      }
      uint64_t v60 = static Text.System.uiDelete.getter();
      uint64_t v62 = v61;
      char v64 = v63;
      uint64_t v65 = (uint64_t)v113;
      if (v113 == (void *)1)
      {
        EnvironmentValues.init()();
        char v67 = (void *)v136;
        long long v66 = (void *)v137;
      }
      else
      {
        uint64_t v136 = (uint64_t)v113;
        uint64_t v137 = (uint64_t)v110;
        long long v66 = v110;
        char v67 = v113;
      }
      v135[0] = v67;
      v135[1] = v66;
      uint64_t v133 = 0;
      uint64_t v134 = 0;
      uint64_t v132 = 0;
      outlined copy of EnvironmentValues?(v65);
      uint64_t v117 = Text.resolveString(in:with:idiom:)();
      uint64_t v69 = v68;
      outlined consume of Text.Storage(v60, v62, v64 & 1);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      type metadata accessor for PlatformItemList?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
      uint64_t v70 = swift_allocObject();
      *(_OWORD *)(v70 + 16) = xmmword_188351940;
      uint64_t v71 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v72 = v103;
      uint64_t v73 = v104;
      uint64_t v74 = v111;
      (*(void (**)(char *, uint64_t, uint64_t))(v103 + 16))(v111, v112, v104);
      unint64_t v75 = (*(unsigned __int8 *)(v72 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
      uint64_t v76 = (char *)swift_allocObject();
      uint64_t v77 = v106;
      *((void *)v76 + 2) = v107;
      *((void *)v76 + 3) = v77;
      uint64_t v78 = v105;
      *((void *)v76 + 4) = v118;
      *((void *)v76 + 5) = v78;
      *((void *)v76 + 6) = v71;
      (*(void (**)(char *, char *, uint64_t))(v72 + 32))(&v76[v75], v74, v73);
      swift_retain();
      uint64_t v79 = (void *)MEMORY[0x18C115780](v117, v69);
      swift_bridgeObjectRelease();
      v140 = partial apply for closure #2 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:);
      v141 = v76;
      uint64_t v136 = MEMORY[0x1E4F143A8];
      uint64_t v137 = 1107296256;
      v138 = thunk for @escaping @callee_guaranteed (@guaranteed UIContextualAction, @guaranteed UIView, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ();
      v139 = &block_descriptor_91_0;
      uint64_t v80 = _Block_copy(&v136);
      id v81 = objc_msgSend(self, sel_contextualActionWithStyle_title_handler_, 1, v79, v80);

      _Block_release(v80);
      swift_release();
      swift_release();
      *(void *)(v70 + 32) = v81;
      uint64_t v136 = v70;
      specialized Array._endMutation()();
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIContextualAction);
      Class v82 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v83 = objc_msgSend(self, sel_configurationWithActions_, v82);

      return (uint64_t)v83;
    }
    else
    {
      return 0;
    }
  }
  return (uint64_t)v18;
}

uint64_t (*UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(void *a1, uint64_t a2, int a3))()
{
  int v16 = a3;
  uint64_t v15 = *MEMORY[0x1E4FBC8C8] & *v3;
  uint64_t v6 = v15;
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v7);
  unint64_t v11 = (*(unsigned __int8 *)(v8 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = *(void *)(v6 + 96);
  *(_OWORD *)(v12 + 24) = *(_OWORD *)(v15 + 104);
  *(void *)(v12 + 40) = *(void *)(v6 + 120);
  *(void *)(v12 + 48) = v10;
  *(void *)(v12 + 56) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v12 + v11, (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  *(unsigned char *)(v12 + v11 + v9) = v16;
  id v13 = a1;
  return partial apply for closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:);
}

void UICollectionViewListCoordinatorBaseBase.__ivar_destroyer()
{
}

id UICollectionViewListCoordinatorBaseBase.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UICollectionViewListCoordinatorBaseBase();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance UICollectionViewListCoordinatorBase<A, B>.InitialLayoutAnimationPhase()
{
  return TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance UICollectionViewListCoordinatorBase<A, B>.InitialLayoutAnimationPhase(uint64_t a1)
{
  TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance UICollectionViewListCoordinatorBase<A, B>.InitialLayoutAnimationPhase()
{
  Hasher.init(_seed:)();
  TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.hash(into:)((uint64_t)v2, *v0);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UICollectionViewListCoordinatorBase<A, B>.InitialLayoutAnimationPhase(char *a1, char *a2)
{
  return static TimelineProgressView.ArchivableTimelineProgressView.CodingKeys.== infix(_:_:)(*a1, *a2);
}

void closure #1 in UICollectionViewListCoordinatorBase.setupSizeThatFitsCallback(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  uint64_t v15 = a4 + 16;
  swift_beginAccess();
  uint64_t v16 = MEMORY[0x18C119DF0](v15);
  if (v16)
  {
    uint64_t v17 = (UIView *)v16;
    if (a7 != a9)
    {
      UpdateCoalescingCollectionView.scheduleVisibleCellsUpdate(indexPath:kind:)(a1, a2, a3);
      swift_beginAccess();
      uint64_t v18 = MEMORY[0x18C119DF0](a5 + 16);
      if (v18)
      {
        uint64_t v19 = (void *)v18;
        UICollectionViewListCoordinatorBase.enqueueLayoutInvalidationIfNeeded(_:)(v17);
      }
    }
  }
}

BOOL UICollectionViewListCoordinatorBase.hasPendingID<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v21 = a1;
  uint64_t v4 = (void *)(*MEMORY[0x1E4FBC8C8] & *v3);
  _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v21 - v6;
  uint64_t v8 = v4[12];
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v21 - v15;
  uint64_t v17 = (char *)v3 + v4[25];
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v17, v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v12, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4[14] + 8) + 120))(v21, v22, v23, v8);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v8);
    uint64_t v19 = type metadata accessor for IndexPath();
    BOOL v18 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v7, 1, v19) != 1;
    _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v7, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  }
  return v18;
}

uint64_t UICollectionViewListCoordinatorBase.collectionView(_:indexPathForIndexTitle:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *MEMORY[0x1E4FBC8C8] & *v4;
  uint64_t v7 = *(void *)(v6 + 0x70);
  uint64_t v8 = type metadata accessor for ShadowListDataSource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v14 - v10;
  uint64_t v12 = (char *)v4 + *(void *)(v6 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v12, v8);
  ShadowListDataSource<>.section(forSectionLabelIndex:)(a4, v8, v7);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return IndexPath.init(index:)();
}

Class @objc UICollectionViewListCoordinatorBase.collectionView(_:indexPathForIndexTitle:at:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  UICollectionViewListCoordinatorBase.collectionView(_:indexPathForIndexTitle:at:)((uint64_t)v13, v14, v15, a5);

  swift_bridgeObjectRelease();
  v16.super.Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

  return v16.super.isa;
}

unint64_t implicit closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:)()
{
  return 0xD00000000000003BLL;
}

id @objc UICollectionViewListCoordinatorBase.collectionView(_:viewForSupplementaryElementOfKind:at:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  uint64_t v14 = (void *)UICollectionViewListCoordinatorBase.collectionView(_:viewForSupplementaryElementOfKind:at:)(v12, v9, v11, (uint64_t)v8);

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

  return v14;
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:));
}

void *closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  objc_super v2 = (void *)(*MEMORY[0x1E4FBC8C8] & *a1);
  uint64_t v3 = (void *)((char *)a1 + v2[35]);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  uint64_t v7 = v3[2];
  uint64_t v6 = v3[3];
  uint64_t v17 = v2[14];
  uint64_t v8 = v2[12];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = v2[15];
  uint64_t v11 = v2[13];
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t result = WeakSelectionBasedStorage.action.getter(v4, v5, v7, v6, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v15 = (uint64_t (*)(void *))result;
  if (result)
  {
    if (result == (void *)1)
    {
      uint64_t result = 0;
    }
    else
    {
      uint64_t v16 = v14;
      uint64_t result = (void *)swift_allocObject();
      result[2] = v8;
      result[3] = v11;
      result[4] = v17;
      result[5] = v10;
      result[6] = v15;
      result[7] = v16;
      uint64_t v15 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<A.ListCoreDataSource.SelectionValue>) -> ();
    }
  }
  *a2 = v15;
  a2[1] = result;
  return result;
}

uint64_t closure #2 in UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  getContiguousArrayStorageType<A>(for:)(AssociatedTypeWitness, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  swift_allocObject();
  uint64_t v7 = static Array._adoptStorage(_:count:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, a3, AssociatedTypeWitness);
  _finalizeUninitializedArray<A>(_:)();
  if (MEMORY[0x18C115CC0]())
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v10 = specialized Set.init(_nonEmptyArrayLiteral:)(v7, AssociatedTypeWitness, AssociatedConformanceWitness);
  }
  else
  {
    uint64_t v10 = MEMORY[0x1E4FBC870];
  }
  swift_bridgeObjectRelease();
  a1(v10);

  return swift_bridgeObjectRelease();
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)(a1, a2, a3, a4, (void (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:));
}

uint64_t closure #1 in UICollectionViewListCoordinatorBase.canSelect(rowAt:)@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  void (*v4)(uint64_t *__return_ptr, uint64_t);
  uint64_t result;
  uint64_t v6;

  swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata1();
  uint64_t v4 = *(void (**)(uint64_t *__return_ptr, uint64_t))AGGraphGetValue();
  swift_retain();
  v4(&v6, a1);
  uint64_t result = swift_release();
  *a2 = v6;
  return result;
}

BOOL UICollectionViewListCoordinatorBase.collectionView(_:shouldSelectItemAt:)(void *a1, uint64_t a2)
{
  uint64_t v42 = (void *)(*MEMORY[0x1E4FBC8C8] & *v2);
  uint64_t v43 = v42[14];
  uint64_t v5 = v42[12];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v40 - v8;
  int v44 = UICollectionViewListCoordinatorBase.canSelect(rowAt:)((char *)&v40 - v8, a2);
  unsigned int v10 = objc_msgSend(a1, sel_isEditing);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48);
  uint64_t v45 = v9;
  int v12 = v11(v9, 1, AssociatedTypeWitness);
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v14 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (!v14)
  {
LABEL_22:
    if (v12 != 1)
    {
      if ((v44 & 1) == 0) {
        goto LABEL_30;
      }
      if (UICollectionViewListCoordinatorBase.hasMultipleSelection.getter(v15))
      {
LABEL_29:
        BOOL v22 = 1;
        goto LABEL_31;
      }
    }
    id v32 = objc_msgSend(a1, sel_indexPathsForSelectedItems);
    if (v32)
    {
      uint64_t v33 = v32;
      type metadata accessor for IndexPath();
      uint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v35 = *(void *)(v34 + 16);
      swift_bridgeObjectRelease();
      BOOL v22 = v35 < 2;
      if (v12 != 1) {
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    if (v12 != 1) {
      goto LABEL_29;
    }
LABEL_30:
    BOOL v22 = 0;
    goto LABEL_31;
  }
  uint64_t v41 = v7;
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = swift_dynamicCastUnknownClass();
  if (!v17) {
    goto LABEL_21;
  }
  uint64_t v18 = v17;
  unsigned int v19 = v12 == 1 ? v10 : 1;
  if (v19 == 1)
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  }
  else
  {
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v48, v16, AssociatedConformanceWitness);
    char v21 = v48;
    if (v49)
    {
      if (v49 != 1)
      {
        outlined consume of PlatformItemList.Item.SelectionBehavior?(v48, v49, v50, v51, v52, v53);
        if ((v21 & 1) == 0)
        {

          BOOL v22 = 1;
          uint64_t v7 = v41;
LABEL_31:
          uint64_t v37 = v45;
          uint64_t v36 = v46;
          goto LABEL_36;
        }
      }
    }
    else
    {
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v48, 0, v50, v51, v52, v53);
    }
  }
  if (!specialized UICollectionViewListCoordinatorBase.editMenuResponder<A>(for:)(v18, v5, v42[13], v16, v43, v42[15], AssociatedConformanceWitness))
  {
LABEL_21:

    uint64_t v7 = v41;
    goto LABEL_22;
  }
  type metadata accessor for PlatformItemList?(0, &lazy cache variable for type metadata for PlatformItemList?, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4FBB718]);
  static Update.ensure<A>(_:)();
  unint64_t v23 = MEMORY[0x1E4FBC860];
  if (v48) {
    uint64_t v24 = v48;
  }
  else {
    uint64_t v24 = MEMORY[0x1E4FBC860];
  }
  if (*(void *)(v24 + 16))
  {
    uint64_t v47 = MEMORY[0x1E4FBC860];
    unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    LOBYTE(v48) = 0;
    _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
    uint64_t v26 = type metadata accessor for MenuVisitor.MenuStackGroup();
    unint64_t v27 = (*(unsigned __int8 *)(*(void *)(v26 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v26 - 8) + 80);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_18834BB80;
    uint64_t v29 = v28 + v27;
    uint64_t v7 = v41;
    if (one-time initialization token for empty != -1) {
      swift_once();
    }
    uint64_t v30 = __swift_project_value_buffer(v26, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
    _s7SwiftUI11MenuVisitor33_0F42DDF44729C152DA9EC9F6F4D00118LLV0C10StackGroupVWOcTm_0(v30, v29, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
    char v31 = v48;
    uint64_t v48 = 0;
    LOBYTE(v49) = 0;
    uint64_t v50 = MEMORY[0x1E4FBC868];
    unint64_t v51 = v25;
    unint64_t v52 = v23;
    uint64_t v53 = MEMORY[0x1E4FBC868];
    LOBYTE(v54) = v31;
    uint64_t v55 = v28;
    MenuVisitor.visit(_:uniqueNames:)(v24, &v47);
    swift_bridgeObjectRelease();
    unint64_t v23 = v52;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = v41;
  }
  uint64_t v37 = v45;
  uint64_t v36 = v46;
  if (v23 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();

    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v38 = *(void *)((v23 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRelease();
    swift_release();
  }
  BOOL v22 = v38 != 0;
LABEL_36:
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v7);
  return v22;
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:shouldSelectItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:shouldSelectItemAt:));
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:didSelectItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)(a1, a2, a3, a4, (void (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:didSelectItemAt:));
}

uint64_t UICollectionViewListCoordinatorBase.collectionView(_:didDeselectItemAt:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v84 = a2;
  id v73 = a1;
  uint64_t v4 = (void *)(*MEMORY[0x1E4FBC8C8] & *v2);
  uint64_t v69 = v4;
  uint64_t v82 = type metadata accessor for IndexPath();
  uint64_t v80 = *(void *)(v82 - 8);
  MEMORY[0x1F4188790](v82);
  uint64_t v72 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (IndexPath?, IndexPath?)();
  uint64_t v78 = v6;
  MEMORY[0x1F4188790](v6);
  id v81 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v74 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v79 = (char *)&v66 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v83 = (uint64_t)&v66 - v13;
  uint64_t v14 = v4[13];
  uint64_t v68 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v15);
  unint64_t v75 = (char *)&v66 - v16;
  uint64_t v17 = type metadata accessor for Binding();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v76 = v17;
  uint64_t v77 = v18;
  MEMORY[0x1F4188790](v17);
  id v20 = (char *)&v66 - v19;
  uint64_t v21 = v4[12];
  uint64_t v71 = *(void *)(v4[14] + 8);
  uint64_t v70 = v21;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v66 - v25;
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v66 - v29;
  UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)(v84, (uint64_t)v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v26, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    uint64_t v31 = (uint64_t)v81;
    uint64_t v32 = v82;
    uint64_t v33 = v84;
    uint64_t v35 = (uint64_t)v79;
    uint64_t v34 = v80;
    uint64_t v36 = (void *)MEMORY[0x1E4FBC8C8];
  }
  else
  {
    uint64_t v67 = v14;
    uint64_t v37 = v75;
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v30, v26, AssociatedTypeWitness);
    uint64_t v36 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v38 = (char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x100);
    swift_beginAccess();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v38, 1, v76))
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v30, AssociatedTypeWitness);
      swift_endAccess();
    }
    else
    {
      uint64_t v39 = v76;
      (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v20, v38, v76);
      swift_endAccess();
      uint64_t v40 = v37;
      MEMORY[0x18C113DA0](v39);
      uint64_t v41 = v67;
      (*(void (**)(char *, uint64_t))(v69[15] + 40))(v30, v67);
      specialized Binding.wrappedValue.setter();
      (*(void (**)(char *, uint64_t))(v68 + 8))(v40, v41);
      (*(void (**)(char *, uint64_t))(v77 + 8))(v20, v39);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v30, AssociatedTypeWitness);
    }
    uint64_t v31 = (uint64_t)v81;
    uint64_t v32 = v82;
    uint64_t v33 = v84;
    uint64_t v35 = (uint64_t)v79;
    uint64_t v34 = v80;
  }
  uint64_t v42 = v78;
  uint64_t v43 = (uint64_t)v3 + *(void *)((*v36 & *v3) + 0xD8);
  swift_beginAccess();
  uint64_t v44 = v83;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v83, v33, v32);
  id v81 = *(char **)(v34 + 56);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v81)(v44, 0, 1, v32);
  uint64_t v45 = v31 + *(int *)(v42 + 48);
  uint64_t v84 = v43;
  outlined init with copy of IndexPath?(v43, v31);
  outlined init with copy of IndexPath?(v44, v45);
  uint64_t v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
  if (v46(v31, 1, v32) != 1)
  {
    outlined init with copy of IndexPath?(v31, v35);
    if (v46(v45, 1, v32) != 1)
    {
      uint64_t v48 = v35;
      uint64_t v49 = v72;
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v72, v45, v32);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
      char v50 = dispatch thunk of static Equatable.== infix(_:_:)();
      unint64_t v51 = *(void (**)(char *, uint64_t))(v34 + 8);
      v51(v49, v32);
      uint64_t v52 = v31;
      uint64_t v53 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27DE8];
      uint64_t v54 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
      _s10Foundation9IndexPathVSgWOhTm_0(v83, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
      v51((char *)v48, v32);
      uint64_t result = _s10Foundation9IndexPathVSgWOhTm_0(v52, &lazy cache variable for type metadata for IndexPath?, v53, v54);
      if ((v50 & 1) == 0) {
        return result;
      }
      goto LABEL_14;
    }
    _s10Foundation9IndexPathVSgWOhTm_0(v44, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v35, v32);
    return outlined destroy of (IndexPath?, IndexPath?)(v31);
  }
  _s10Foundation9IndexPathVSgWOhTm_0(v44, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  if (v46(v45, 1, v32) != 1) {
    return outlined destroy of (IndexPath?, IndexPath?)(v31);
  }
  _s10Foundation9IndexPathVSgWOhTm_0(v31, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
LABEL_14:
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v56 = objc_msgSend(v73, sel_cellForItemAtIndexPath_, isa);

  if (v56)
  {
    uint64_t v57 = swift_getAssociatedTypeWitness();
    if (swift_dynamicCastUnknownClass()
      && (uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(),
          (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(AssociatedConformanceWitness + 16))(&v85, v57, AssociatedConformanceWitness), uint64_t v59 = v86, v86 != 1))
    {
      uint64_t v61 = v88;
      uint64_t v60 = v89;
      uint64_t v83 = v90;
      uint64_t v62 = v87;
      uint64_t v63 = v85;
      outlined copy of AppIntentExecutor?(v88);
      outlined consume of PlatformItemList.Item.SelectionBehavior?(v63, v59, v62, v61, v60, v83);
      if (v61)
      {
        static Update.enqueueAction(_:)();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v61);
      }

      uint64_t v32 = v82;
    }
    else
    {
    }
  }
  uint64_t v64 = (uint64_t)v74;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v81)(v74, 1, 1, v32);
  uint64_t v65 = v84;
  swift_beginAccess();
  outlined assign with take of IndexPath?(v64, v65);
  return swift_endAccess();
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:didDeselectItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)(a1, a2, a3, a4, (void (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:didDeselectItemAt:));
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, char *))
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  a5(v12, v11);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:shouldBeginMultipleSelectionInteractionAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:shouldBeginMultipleSelectionInteractionAt:)(a1, a2, a3, a4, (uint64_t (*)(char *))specialized UICollectionViewListCoordinatorBase.collectionView(_:shouldBeginMultipleSelectionInteractionAt:));
}

id UICollectionViewListCoordinatorBase.collectionView(_:didBeginMultipleSelectionInteractionAt:)(void *a1)
{
  id result = objc_msgSend(a1, sel_isEditing);
  if (result)
  {
    uint64_t v3 = (void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x110));
    uint64_t v4 = v3[1];
    if (v4)
    {
      uint64_t v5 = *v3;
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      return (id)outlined consume of Binding<NavigationSplitViewColumn>?(v5, v4);
    }
  }
  return result;
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:didBeginMultipleSelectionInteractionAt:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  UICollectionViewListCoordinatorBase.collectionView(_:didBeginMultipleSelectionInteractionAt:)(v9);

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:shouldHighlightItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:shouldHighlightItemAt:));
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:selectionFollowsFocusForItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:selectionFollowsFocusForItemAt:));
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:canFocusItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))UICollectionViewListCoordinatorBase.collectionView(_:canFocusItemAt:));
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:canPerformPrimaryActionForItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(id, char *))
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  LOBYTE(a5) = a5(v12, v11);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return a5 & 1;
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:didEndDisplaying:forItemAt:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a3;
  id v12 = a4;
  id v13 = a1;
  specialized UICollectionViewListCoordinatorBase.collectionView(_:didEndDisplaying:forItemAt:)();

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:didEndDisplayingSupplementaryView:forElementOfKind:at:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v17 = a4;
  uint64_t v18 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a3;
  id v12 = v17;
  id v13 = a1;
  specialized UICollectionViewListCoordinatorBase.collectionView(_:didEndDisplayingSupplementaryView:forElementOfKind:at:)((uint64_t)v12, v16, v10);

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v18);
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:canMoveItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:shouldBeginMultipleSelectionInteractionAt:)(a1, a2, a3, a4, (uint64_t (*)(char *))specialized UICollectionViewListCoordinatorBase.collectionView(_:canMoveItemAt:));
}

uint64_t UICollectionViewListCoordinatorBase.collectionView(_:targetIndexPathForMoveOfItemFromOriginalIndexPath:atCurrentIndexPath:toProposedIndexPath:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4FBC8C8] & *v3;
  uint64_t v8 = type metadata accessor for ShadowListDataSource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (char *)&v17 - v10;
  id v12 = (char *)v3 + *(void *)(v7 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t WitnessTable = swift_getWitnessTable();
  LOBYTE(v12) = ListCoreDataSource.canMoveCell(fromRowAt:to:)(a1, a2, v8, WitnessTable);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v14 = type metadata accessor for IndexPath();
  if (v12) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = a1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(a3, v15, v14);
}

Class @objc UICollectionViewListCoordinatorBase.collectionView(_:targetIndexPathForMoveOfItemFromOriginalIndexPath:atCurrentIndexPath:toProposedIndexPath:)(void *a1, uint64_t a2, void *a3)
{
  id v23 = a1;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v22 - v9;
  MEMORY[0x1F4188790](v11);
  id v13 = (char *)&v22 - v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v22 - v15;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v17 = a3;
  id v18 = v23;
  UICollectionViewListCoordinatorBase.collectionView(_:targetIndexPathForMoveOfItemFromOriginalIndexPath:atCurrentIndexPath:toProposedIndexPath:)((uint64_t)v13, (uint64_t)v7, (uint64_t)v16);

  uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v7, v4);
  v19(v10, v4);
  v19(v13, v4);
  v20.super.Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v19(v16, v4);

  return v20.super.isa;
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:moveItemAt:to:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v16 - v10;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  specialized UICollectionViewListCoordinatorBase.collectionView(_:moveItemAt:to:)((uint64_t)v11, (uint64_t)v8);

  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  return ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
}

void closure #1 in UICollectionViewListCoordinatorBase.commitUpdates()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C119DF0](v1);
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  if (v2)
  {
    uint64_t v4 = (void *)v2;
    swift_beginAccess();
    type metadata accessor for ShadowListDataSource();
    ShadowListDataSource.commitUpdates()();
    swift_endAccess();
  }
  swift_beginAccess();
  uint64_t v5 = (void *)MEMORY[0x18C119DF0](v1);
  if (v5)
  {
    *((unsigned char *)v5 + *(void *)((*v3 & *v5) + 0xC0)) = 0;
  }
}

uint64_t closure #1 in closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(char a1, void *a2, void *a3, char a4)
{
  if (a1) {
    return performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(a2, a3, a4 & 1);
  }
  uint64_t v8 = self;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a2;
  *(void *)(v9 + 24) = a3;
  *(unsigned char *)(v9 + 32) = a4 & 1;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = partial apply for performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
  *(void *)(v10 + 24) = v9;
  v15[4] = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
  v15[5] = v10;
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 1107296256;
  void v15[2] = thunk for @escaping @callee_guaranteed () -> ();
  v15[3] = &block_descriptor_52;
  uint64_t v11 = _Block_copy(v15);
  id v12 = a2;
  id v13 = a3;
  swift_retain();
  swift_release();
  objc_msgSend(v8, sel_performWithoutAnimation_, v11);
  _Block_release(v11);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

void @objc UICollectionViewListCoordinatorBase.scrollViewWillBeginDragging(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  specialized UICollectionViewListCoordinatorBase.scrollViewWillBeginDragging(_:)();
}

void @objc UICollectionViewListCoordinatorBase.scrollViewDidEndDragging(_:willDecelerate:)(void *a1, uint64_t a2, void *a3, Swift::Bool a4)
{
  id v6 = a3;
  id v7 = a1;
  specialized UICollectionViewListCoordinatorBase.scrollViewDidEndDragging(_:willDecelerate:)(a4);
}

void @objc UICollectionViewListCoordinatorBase.scrollViewDidEndDecelerating(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  specialized UICollectionViewListCoordinatorBase.scrollViewDidEndDecelerating(_:)();
}

void @objc UICollectionViewListCoordinatorBase.scrollViewDidEndScrollingAnimation(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  specialized UICollectionViewListCoordinatorBase.scrollViewDidEndScrollingAnimation(_:)();
}

uint64_t closure #1 in UICollectionViewListCoordinatorBase.updateEditingState(_:)(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v19 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v5 + 56))((char *)&v19 - v13, 1, 1, v4, v12);
  uint64_t v15 = (uint64_t)a1 + OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingDeselectedItem;
  swift_beginAccess();
  outlined assign with take of IndexPath?((uint64_t)v14, v15);
  swift_endAccess();
  uint64_t v16 = (uint64_t)a2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a2) + 0xD8);
  swift_beginAccess();
  outlined init with copy of IndexPath?(v16, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1) {
    return _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v10, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a1, sel_selectItemAtIndexPath_animated_scrollPosition_, isa, 0, 0);

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:)@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for _RowVisitationContext();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = _RowVisitationContext.canMove.getter();
  if (v11) {
    char v12 = 1;
  }
  else {
    char v12 = UICollectionViewListCoordinatorBase.hasMultipleSelection.getter(v11);
  }
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13(v10, a1, v4);
  if (v12) {
    char v14 = 1;
  }
  else {
    char v14 = _RowVisitationContext.hasSwipeActions.getter();
  }
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v10, v4);
  v13(v7, a1, v4);
  BOOL v16 = (v14 & 1) != 0 || _RowVisitationContext.canDelete.getter(v4);
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v15)(v7, v4);
  *a2 = v16;
  return result;
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UICollectionViewListCoordinatorBase.collectionView(_:shouldBeginMultipleSelectionInteractionAt:)(a1, a2, a3, a4, (uint64_t (*)(char *))specialized UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:));
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:shouldBeginMultipleSelectionInteractionAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  BOOL v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  LOBYTE(a5) = a5(v11);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return a5 & 1;
}

void *closure #1 in UICollectionViewListCoordinatorBase.leadingSwipeActionsConfiguration(indexPath:)(uint64_t (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a3 + 16;
  swift_beginAccess();
  uint64_t v9 = (void *)MEMORY[0x18C119DF0](v8);
  if (!v9) {
    return (void *)a1();
  }
  uint64_t v10 = v9;
  uint64_t result = (void *)MEMORY[0x18C119DF0]((char *)v9 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v9) + 0xF8));
  if (result)
  {
    id v12 = result;
    UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(result, a4, 0);

    uint64_t v13 = MEMORY[0x1E4FBB718];
    _s7SwiftUI12SwipeActionsO5ValueVSgWObTm_0(a5 + 56, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for Binding<SwipeActionResultToken?>?, (uint64_t)type metadata accessor for Binding<SwipeActionResultToken?>, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s10Foundation9IndexPathVSgMaTm_1);
    _s7SwiftUI12SwipeActionsO5ValueVSgWObTm_0((uint64_t)v14, (uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for Binding<SwipeActionResultToken?>?, (uint64_t)type metadata accessor for Binding<SwipeActionResultToken?>, v13, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s10Foundation9IndexPathVSgMaTm_1);
    if (v15[1])
    {
      outlined retain of Binding<SwipeActionResultToken?>?(v14, (void (*)(void, void, void, void, void, void, void))outlined copy of Binding<SwipeActionResultToken?>?);
      outlined retain of Binding<SwipeActionResultToken?>?(v14, (void (*)(void, void, void, void, void, void, void))outlined copy of Binding<SwipeActionResultToken?>?);
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)a1);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)partial apply for closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:));
      swift_release();

      outlined retain of Binding<SwipeActionResultToken?>?(v14, (void (*)(void, void, void, void, void, void, void))outlined consume of Binding<SwipeActionResultToken?>?);
      return outlined retain of Binding<SwipeActionResultToken?>?(v14, (void (*)(void, void, void, void, void, void, void))outlined consume of Binding<SwipeActionResultToken?>?);
    }
    else
    {
      partial apply for closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)();
      ((void (*)(uint64_t))a1)(1);

      return (void *)swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

BOOL key path getter for _RowVisitationContext.canDelete : <A, B>_RowVisitationContext<ShadowListDataSource<A>>@<W0>(unsigned char *a1@<X8>)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for _RowVisitationContext();
  BOOL result = _RowVisitationContext.canDelete.getter(v2);
  *a1 = result;
  return result;
}

void closure #2 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = a5 + 16;
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x18C119DF0](v8);
  if (!v9) {
    goto LABEL_5;
  }
  uint64_t v10 = (void *)v9;
  swift_beginAccess();
  BOOL v11 = (void *)MEMORY[0x18C119DF0](v8);
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = (void *)MEMORY[0x18C119DF0]((char *)v11 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v11) + 0xF8));

    if (v13)
    {
      UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(v13, a6, 1);

      partial apply for closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)();
      swift_release();
LABEL_5:
      a3(1);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void thunk for @escaping @callee_guaranteed (@guaranteed UIContextualAction, @guaranteed UIView, @guaranteed @escaping @callee_guaranteed (@unowned Bool) -> ()) -> ()(uint64_t a1, void *a2, void *a3, void *aBlock)
{
  uint64_t v6 = *(void (**)(id, id, uint64_t (*)(char), uint64_t))(a1 + 32);
  id v7 = _Block_copy(aBlock);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v7;
  swift_retain();
  id v10 = a2;
  id v9 = a3;
  v6(v10, v9, partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned Bool) -> (), v8);
  swift_release();
  swift_release();
}

uint64_t closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(uint64_t a1, void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v34 = a8;
  int v33 = a4;
  uint64_t v32 = a2;
  uint64_t v13 = type metadata accessor for IndexPath();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x1F4188790](v13);
  swift_beginAccess();
  BOOL v16 = (void *)MEMORY[0x18C119DF0](a1 + 16);
  if (v16)
  {
    id v17 = v16;
    uint64_t v18 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v16) + 0xE8);
    char v19 = *((unsigned char *)v16 + v18);
    v17[v18] = 2;
    UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.didset(v19);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v13);
  unint64_t v20 = (*(unsigned __int8 *)(v14 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  *((void *)v21 + 2) = a5;
  *((void *)v21 + 3) = a6;
  uint64_t v22 = v34;
  *((void *)v21 + 4) = a7;
  *((void *)v21 + 5) = v22;
  *((void *)v21 + 6) = a1;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v21[v20], (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = partial apply for closure #1 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:);
  *(void *)(v23 + 24) = v21;
  uint64_t v39 = (void (*)(uint64_t))closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
  uint64_t v40 = (void *)v23;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v36 = 1107296256;
  uint64_t v37 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v38 = &block_descriptor_71_0;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  uint64_t v25 = (void *)swift_allocObject();
  void v25[2] = a5;
  v25[3] = a6;
  uint64_t v26 = v34;
  v25[4] = a7;
  v25[5] = v26;
  uint64_t v27 = v32;
  v25[6] = a1;
  v25[7] = v27;
  uint64_t v39 = partial apply for closure #2 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:);
  uint64_t v40 = v25;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v36 = 1107296256;
  uint64_t v37 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  uint64_t v38 = &block_descriptor_77;
  uint64_t v28 = _Block_copy(&aBlock);
  swift_retain();
  id v29 = v27;
  swift_release();
  objc_msgSend(v29, sel_performBatchUpdates_completion_, v24, v28);
  _Block_release(v28);
  _Block_release(v24);
  uint64_t v30 = swift_allocObject();
  *(void *)(v30 + 16) = a5;
  *(void *)(v30 + 24) = a6;
  *(void *)(v30 + 32) = a7;
  *(void *)(v30 + 40) = v26;
  *(unsigned char *)(v30 + 48) = v33 & 1;
  *(void *)(v30 + 56) = a1;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  return swift_release();
}

void @objc UICollectionViewListCoordinatorBase.init()()
{
}

void UICollectionViewListCoordinatorBase.__ivar_destroyer()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  swift_bridgeObjectRelease();
  uint64_t v2 = (char *)v0 + *(void *)((*v1 & *v0) + 0x88);
  uint64_t v3 = type metadata accessor for ShadowListDataSource();
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x98)));
  outlined consume of Transaction?(*(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0xA0)));
  uint64_t v4 = (char *)v0 + *(void *)((*v1 & *v0) + 0xB0);
  uint64_t v5 = type metadata accessor for ListCoreBatchUpdates();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = (char *)v0 + *(void *)((*v1 & *v0) + 0xC8);
  uint64_t v7 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27DE8];
  id v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v0 + *(void *)((*v1 & *v0) + 0xD8), &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v0 + *(void *)((*v1 & *v0) + 0xE0), &lazy cache variable for type metadata for IndexPath?, v8, v9);
  swift_unknownObjectWeakDestroy();
  id v10 = (char *)v0 + *(void *)((*v1 & *v0) + 0x100);
  type metadata accessor for Binding();
  uint64_t v11 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  id v12 = (void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x110));
  outlined consume of Binding<NavigationSplitViewColumn>?(*v12, v12[1]);
  uint64_t v13 = *(void **)((char *)v0 + *(void *)((*v1 & *v0) + 0x150));
}

id UICollectionViewListCoordinatorBase.__deallocating_deinit()
{
  long long v2 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60);
  long long v3 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70);
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for UICollectionViewListCoordinatorBase();
  return objc_msgSendSuper2(&v4, sel_dealloc, v2, v3);
}

void @objc UICollectionViewListCoordinatorBase.__ivar_destroyer(void *a1)
{
  long long v2 = (void *)MEMORY[0x1E4FBC8C8];
  swift_bridgeObjectRelease();
  long long v3 = (char *)a1 + *(void *)((*v2 & *a1) + 0x88);
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)((char *)a1 + *(void *)((*v2 & *a1) + 0x98)));
  outlined consume of Transaction?(*(void *)((char *)a1 + *(void *)((*v2 & *a1) + 0xA0)));
  uint64_t v5 = (char *)a1 + *(void *)((*v2 & *a1) + 0xB0);
  uint64_t v6 = type metadata accessor for ListCoreBatchUpdates();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = (char *)a1 + *(void *)((*v2 & *a1) + 0xC8);
  uint64_t v8 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  id v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27DE8];
  id v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)a1 + *(void *)((*v2 & *a1) + 0xD8), &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)a1 + *(void *)((*v2 & *a1) + 0xE0), &lazy cache variable for type metadata for IndexPath?, v9, v10);
  swift_unknownObjectWeakDestroy();
  uint64_t v11 = (char *)a1 + *(void *)((*v2 & *a1) + 0x100);
  type metadata accessor for Binding();
  uint64_t v12 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  uint64_t v13 = (void *)((char *)a1 + *(void *)((*v2 & *a1) + 0x110));
  outlined consume of Binding<NavigationSplitViewColumn>?(*v13, v13[1]);
  uint64_t v14 = *(void **)((char *)a1 + *(void *)((*v2 & *a1) + 0x150));
}

uint64_t type metadata completion function for UICollectionViewListCoordinatorBase.Listener()
{
  return swift_initClassMetadata2();
}

uint64_t protocol witness for ListCollectionViewCellEditMenuDelegate.listCollectionViewEditMenuInteraction(_:menuFor:suggestedActions:) in conformance UICollectionViewListCoordinatorBase<A, B>(uint64_t a1, void *a2)
{
  return specialized UICollectionViewListCoordinatorBase.listCollectionViewEditMenuInteraction(_:menuFor:suggestedActions:)(a2);
}

void protocol witness for ListCollectionViewCellEditMenuDelegate.listCollectionViewEditMenuInteraction(_:targetRectFor:) in conformance UICollectionViewListCoordinatorBase<A, B>(void *a1)
{
  id v1 = objc_msgSend(a1, sel_view);
  if (v1)
  {
    long long v2 = v1;
    objc_msgSend(v1, sel_frame);
    objc_msgSend(v2, sel_frame);
    static UnitPoint.top.getter();
  }
}

void UICollectionViewListCoordinatorBase.Listener.animationWasAdded()()
{
  if (((*(unsigned __int8 *)(v0 + 24) + 1) >> 8))
  {
    __break(1u);
  }
  else
  {
    ++*(unsigned char *)(v0 + 24);
    id v1 = (void *)MEMORY[0x18C119DF0](v0 + 16);
    if (v1)
    {
      uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xE8);
      long long v3 = v1;
      id v5 = v1;
      char v4 = *((unsigned char *)v1 + v2);
      *((unsigned char *)v3 + v2) = 1;
      UICollectionViewListCoordinatorBase.initialLayoutAnimationPhase.didset(v4);
    }
  }
}

void UICollectionViewListCoordinatorBase.Listener.animationWasRemoved()()
{
  int v1 = *(unsigned __int8 *)(v0 + 24) - 1;
  if ((v1 & 0xFFFFFF00) != 0)
  {
    __break(1u);
  }
  else
  {
    *(unsigned char *)(v0 + 24) = v1;
    if (!(_BYTE)v1) {
      UICollectionViewListCoordinatorBase.Listener.fire()();
    }
  }
}

void UICollectionViewListCoordinatorBase.Listener.fire()()
{
  int v1 = (void *)MEMORY[0x18C119DF0](v0 + 16);
  if (v1)
  {
    if (*((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xE8)) == 1)
    {
      id v3 = v1;
      *(void *)(swift_allocObject() + 16) = v1;
      id v2 = v3;
      onMainThread(do:)();

      swift_release();
    }
    else
    {
    }
  }
}

uint64_t UICollectionViewListCoordinatorBase.Listener.__ivar_destroyer()
{
  return swift_unknownObjectWeakDestroy();
}

uint64_t UICollectionViewListCoordinatorBase.Listener.__deallocating_deinit()
{
  UICollectionViewListCoordinatorBase.Listener.fire()();
  swift_unknownObjectWeakDestroy();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UICollectionViewListCoordinatorBase.Listener()
{
  return swift_getGenericMetadata();
}

void UICollectionViewListCoordinatorBase.Listener.__allocating_init()()
{
}

unsigned char *storeEnumTagSinglePayload for UICollectionViewListCoordinatorBase.InitialLayoutAnimationPhase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    void *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D0BD24);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 3;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for UICollectionViewListCoordinatorBase.InitialLayoutAnimationPhase()
{
  return swift_getGenericMetadata();
}

uint64_t base witness table accessor for Equatable in UICollectionViewListCoordinatorBase<A, B>.InitialLayoutAnimationPhase()
{
  return swift_getWitnessTable();
}

uint64_t one-time initialization function for allowNonMomentaryEditModeSelection()
{
  uint64_t result = closure #1 in variable initialization expression of allowFakeMoves();
  allowNonMomentaryEditModeSelection = result & 1;
  return result;
}

uint64_t specialized UICollectionViewListCoordinatorBase.listCollectionViewEditMenuInteraction(_:menuFor:suggestedActions:)(void *a1)
{
  type metadata accessor for UIKitEditMenuConfiguration();
  uint64_t v2 = swift_dynamicCastClass();
  if (!v2 || !*(void *)(v2 + OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder)) {
    return 0;
  }
  type metadata accessor for PlatformItemList?(0, &lazy cache variable for type metadata for PlatformItemList?, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4FBB718]);
  id v3 = a1;
  swift_retain();
  static Update.ensure<A>(_:)();
  UIMenuElementSize v4 = MEMORY[0x1E4FBC860];
  if (v18) {
    uint64_t v5 = v18;
  }
  else {
    uint64_t v5 = MEMORY[0x1E4FBC860];
  }
  if (*(void *)(v5 + 16))
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, MEMORY[0x1E4FBBE00]);
    uint64_t v6 = type metadata accessor for MenuVisitor.MenuStackGroup();
    unint64_t v7 = (*(unsigned __int8 *)(*(void *)(v6 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_18834BB80;
    uint64_t v9 = v8 + v7;
    if (one-time initialization token for empty != -1) {
      swift_once();
    }
    uint64_t v10 = __swift_project_value_buffer(v6, (uint64_t)static MenuVisitor.MenuStackGroup.empty);
    _s7SwiftUI11MenuVisitor33_0F42DDF44729C152DA9EC9F6F4D00118LLV0C10StackGroupVWOcTm_0(v10, v9, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
    MenuVisitor.visit(_:uniqueNames:)(v5, &v19);
    swift_bridgeObjectRelease();
    UIMenuElementSize preferredElementSize = v4;
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
    swift_bridgeObjectRelease();
    UIMenuElementSize preferredElementSize = MEMORY[0x1E4FBC860];
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v20.value.super.Class isa = 0;
  v20.is_nil = 0;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v14, v13, (Swift::String_optional)0, v20, 0, 0xFFFFFFFFFFFFFFFFLL, preferredElementSize, v17);
  uint64_t v12 = v15;

  return v12;
}

uint64_t specialized UICollectionViewListCoordinatorBase.listCollectionViewEditMenuInteraction(_:willDismissMenuFor:animator:)(void *a1, void *a2)
{
  _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  unint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v36 - v9;
  MEMORY[0x1F4188790](v11);
  Swift::String v13 = (char *)&v36 - v12;
  uint64_t v14 = type metadata accessor for IndexPath();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = objc_msgSend(a1, sel_view, v16);
  if (v19)
  {
    UIImage_optional v20 = v19;
    self;
    uint64_t v21 = swift_dynamicCastObjCClass();
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v36 = a2;
      uint64_t v23 = (void *)MEMORY[0x18C119DF0]((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0xF8));
      if (!v23)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
        a2 = v36;
LABEL_9:

        _s10Foundation9IndexPathVSgWOhTm_0((uint64_t)v13, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
        goto LABEL_14;
      }
      uint64_t v24 = v23;
      id v25 = objc_msgSend(v23, sel_indexPathForCell_, v22);

      if (v25)
      {
        static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
        v26(v10, 0, 1, v14);
      }
      else
      {
        uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
        v26(v10, 1, 1, v14);
      }
      a2 = v36;
      _s7SwiftUI12SwipeActionsO5ValueVSgWObTm_0((uint64_t)v10, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s10Foundation9IndexPathVSgMaTm_1);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1) {
        goto LABEL_9;
      }
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v13, v14);
      v26(v7, 1, 1, v14);
      uint64_t v27 = (void *)MEMORY[0x1E4FBC8C8];
      uint64_t v28 = (uint64_t)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0xE0);
      swift_beginAccess();
      outlined assign with take of IndexPath?((uint64_t)v7, v28);
      swift_endAccess();
      uint64_t v29 = MEMORY[0x18C119DF0]((char *)v2 + *(void *)((*v27 & *v2) + 0xF8));
      if (v29)
      {
        uint64_t v30 = (void *)v29;
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v30, sel_deselectItemAtIndexPath_animated_, isa, 1);

        (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
        goto LABEL_14;
      }
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    }
  }
LABEL_14:
  type metadata accessor for UIKitEditMenuConfiguration();
  uint64_t result = swift_dynamicCastClass();
  if (result)
  {
    if (*(void *)(result + OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder))
    {
      uint64_t v33 = swift_allocObject();
      swift_weakInit();
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = v33;
      *(unsigned char *)(v34 + 24) = 0;
      id v35 = a2;
      swift_retain();
      swift_retain();
      static Update.enqueueAction(_:)();
      swift_release();

      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_187D0C5D0()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187D0C608()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187D0C640()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinatorBase.updateEditingState(_:)()
{
  return closure #1 in UICollectionViewListCoordinatorBase.updateEditingState(_:)(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

void type metadata accessor for EnvironmentPropertyKey<FocusBridgeKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>);
    }
  }
}

uint64_t sub_187D0C6E8()
{
  return swift_deallocObject();
}

uint64_t sub_187D0C728()
{
  return swift_deallocObject();
}

uint64_t sub_187D0C738()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t sub_187D0C818()
{
  return swift_deallocObject();
}

uint64_t _s7SwiftUI11MenuVisitor33_0F42DDF44729C152DA9EC9F6F4D00118LLV0C10StackGroupVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)()
{
  return closure #1 in closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(*(unsigned char *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t sub_187D0C8B4()
{
  return swift_deallocObject();
}

uint64_t specialized UICollectionViewListCoordinatorBase.editMenuResponder<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a7 + 8) + 56))(a4);
  if (result)
  {
    uint64_t v8 = (void *)result;
    id v9 = (id)specialized _UIHostingView.editMenuBridge.getter();

    uint64_t v10 = EditMenuBridge.outermostResponder()();
    return v10;
  }
  return result;
}

void specialized UICollectionViewListCoordinatorBase.scrollViewWillBeginDragging(_:)()
{
}

void specialized UICollectionViewListCoordinatorBase.scrollViewDidEndDragging(_:willDecelerate:)(Swift::Bool a1)
{
}

double specialized UICollectionViewListCoordinatorBase.scrollViewDidEndDecelerating(_:)()
{
  uint64_t v1 = *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90));
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) = 0;
  ScrollViewHelper.updateGraphState(isPreferred:)(0);
  uint64_t v2 = (void *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_decelerationBias);
  void *v2 = 0;
  v2[1] = 0;
  uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastTargetOffsetState;
  double result = 0.0;
  *(_OWORD *)uint64_t v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_WORD *)(v3 + 32) = 2;
  return result;
}

void specialized UICollectionViewListCoordinatorBase.scrollViewDidEndScrollingAnimation(_:)()
{
  uint64_t v1 = *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90));
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_isAnimationCheckPending) = 1;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_lastPhase) = 0;
  ScrollViewHelper.updateGraphState(isPreferred:)(0);
}

unint64_t specialized UICollectionViewListCoordinatorBase.presentEditMenu<A>(on:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  unint64_t result = specialized UICollectionViewListCoordinatorBase.editMenuResponder<A>(for:)(a1, a2, a3, a4, a5, a6, a7);
  if (!result) {
    return result;
  }
  unint64_t v8 = result;
  type metadata accessor for UIKitEditMenuConfiguration();
  lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity();
  AnyHashable.init<A>(_:)();
  id v9 = (char *)UIEditMenuConfiguration.init(identifier:sourcePoint:)();
  objc_msgSend(v9, sel_setPreferredArrowDirection_, 2);
  *(void *)&v9[OBJC_IVAR____TtC7SwiftUI26UIKitEditMenuConfiguration_responder] = v8;
  swift_retain();
  swift_release();
  self;
  uint64_t v10 = swift_dynamicCastObjCClass();
  if (!v10)
  {
LABEL_30:

    return swift_release();
  }
  uint64_t v11 = (void *)v10;
  swift_unknownObjectRetain();
  unint64_t v12 = (unint64_t)objc_msgSend(v11, sel_interactions);
  type metadata accessor for UIInteraction();
  uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v19 = MEMORY[0x1E4FBC860];
  if ((unint64_t)v13 >> 62)
  {
    if (v13 < 0) {
      unint64_t v12 = v13;
    }
    else {
      unint64_t v12 = v13 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    unint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v14 = result;
    if (result) {
      goto LABEL_5;
    }
LABEL_21:
    swift_bridgeObjectRelease();
    unint64_t v12 = MEMORY[0x1E4FBC860];
    goto LABEL_22;
  }
  uint64_t v14 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  unint64_t result = swift_bridgeObjectRetain();
  if (!v14) {
    goto LABEL_21;
  }
LABEL_5:
  if (v14 < 1)
  {
    __break(1u);
    goto LABEL_35;
  }
  for (uint64_t i = 0; i != v14; ++i)
  {
    if ((v13 & 0xC000000000000001) != 0) {
      MEMORY[0x18C117680](i, v13);
    }
    else {
      swift_unknownObjectRetain();
    }
    self;
    if (swift_dynamicCastObjCClass())
    {
      MEMORY[0x18C115B40]();
      if (*(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v12 = v19;
LABEL_22:
  swift_bridgeObjectRelease();
  if (!(v12 >> 62))
  {
    uint64_t v16 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16) {
      goto LABEL_24;
    }
LABEL_32:

    swift_unknownObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v16) {
    goto LABEL_32;
  }
LABEL_24:
  unint64_t result = v16 - 1;
  if (__OFSUB__(v16, 1))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if ((v12 & 0xC000000000000001) != 0)
  {
LABEL_36:
    id v17 = (id)MEMORY[0x18C117680](result, v12);
    goto LABEL_29;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v17 = *(id *)(v12 + 8 * result + 32);
LABEL_29:
    uint64_t v18 = v17;
    swift_bridgeObjectRelease();
    objc_msgSend(v18, sel_presentEditMenuWithConfiguration_, v9);
    swift_unknownObjectRelease();

    goto LABEL_30;
  }
  __break(1u);
  return result;
}

uint64_t specialized UICollectionViewListCoordinatorBase.Listener.__allocating_init(_:)()
{
  uint64_t v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v0 + 24) = 0;
  swift_unknownObjectWeakAssign();
  return v0;
}

BOOL specialized UICollectionViewListCoordinatorBase.collectionView(_:shouldBeginMultipleSelectionInteractionAt:)(uint64_t a1)
{
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = type metadata accessor for IndexPath();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((UICollectionViewListCoordinatorBase.hasMultipleSelection.getter(v13) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
    goto LABEL_5;
  }
  uint64_t v14 = *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0x110) + 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, v9);
  if (!v14)
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    return 0;
  }
  UICollectionViewListCoordinatorBase.selectionValue(forRowAt:)((uint64_t)v12, (uint64_t)v8);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  BOOL v15 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v8, 1, AssociatedTypeWitness) != 1;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v15;
}

uint64_t specialized UICollectionViewListCoordinatorBase.collectionView(_:canMoveItemAt:)(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v11 - v6;
  unint64_t v8 = (char *)v1 + *(void *)(v3 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v8, v4);
  uint64_t WitnessTable = swift_getWitnessTable();
  LOBYTE(a1) = ListCoreDataSource.canMoveCell(forRowAt:)(a1, v4, WitnessTable);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a1 & 1;
}

void specialized UICollectionViewListCoordinatorBase.collectionView(_:moveItemAt:to:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  uint64_t WitnessTable = swift_getWitnessTable();
  ListCoreDataSource.moveCell(fromRowAt:to:)(a1, a2, v4, WitnessTable);
  swift_endAccess();
  UICollectionViewListCoordinatorBase.commitUpdates()();
}

uint64_t sub_187D0D370()
{
  return swift_deallocObject();
}

uint64_t sub_187D0D3A8()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for IndexPath() - 8);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  closure #1 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(v2, v3);
}

uint64_t sub_187D0D518()
{
  return swift_deallocObject();
}

uint64_t sub_187D0D528()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #2 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(uint64_t a1)
{
  closure #2 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(a1, *(void *)(v1 + 48), *(UIView **)(v1 + 56));
}

void partial apply for closure #3 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)()
{
  closure #3 in closure #1 in UICollectionViewListCoordinatorBase.destructiveAction(collectionView:indexPath:apply:)(*(unsigned char *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_187D0D58C()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in UICollectionViewListCoordinatorBase.commitUpdates()()
{
  closure #1 in UICollectionViewListCoordinatorBase.commitUpdates()(*(void *)(v0 + 48));
}

uint64_t sub_187D0D5D8()
{
  return 32;
}

__n128 sub_187D0D5E4(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

uint64_t partial apply for implicit closure #2 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)()
{
  return swift_getAtKeyPath();
}

uint64_t objectdestroy_63Tm()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void partial apply for closure #2 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for IndexPath() - 8);
  closure #2 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)(a1, a2, a3, a4, *(void *)(v4 + 48), v4 + ((*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)));
}

uint64_t sub_187D0D78C()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t objectdestroy_94Tm()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  uint64_t v5 = (void *)(v0 + v4);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v4 + 40))
  {
    swift_release();
    swift_release();
  }
  if (v5[8])
  {
    swift_release();
    swift_release();
    uint64_t v6 = v5[10];
    if (v6)
    {
      if (v6 == 1) {
        goto LABEL_9;
      }
      swift_release();
    }
    if (v5[12]) {
      swift_release();
    }
  }
LABEL_9:

  return swift_deallocObject();
}

void *partial apply for closure #1 in closure #1 in UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for IndexPath() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return closure #1 in UICollectionViewListCoordinatorBase.leadingSwipeActionsConfiguration(indexPath:)(a1, a2, *(void *)(v2 + 48), v2 + v6, v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_187D0D9D0()
{
  return swift_deallocObject();
}

uint64_t sub_187D0DA10()
{
  return swift_deallocObject();
}

uint64_t sub_187D0DA50()
{
  return swift_deallocObject();
}

uint64_t sub_187D0DA60()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinatorBase.canSelect(rowAt:)@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in UICollectionViewListCoordinatorBase.canSelect(rowAt:)(*(void *)(v1 + 56), a1);
}

void *partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)@<X0>(void *a1@<X8>)
{
  return closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)(*(void **)(v1 + 16), a1);
}

uint64_t sub_187D0DB24()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed Set<A.ListCoreDataSource.SelectionValue>) -> (@out ())(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 48);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_187D0DB94()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)()
{
  uint64_t v1 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #2 in UICollectionViewListCoordinatorBase.collectionView(_:performPrimaryActionForItemAt:)(v2, v3, v4);
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed Set<A.ListCoreDataSource.SelectionValue>) -> ()(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 48))(*a1);
}

uint64_t sub_187D0DD54()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:)@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:)(a1, a2);
}

uint64_t sub_187D0DD94()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:willDisplaySupplementaryView:forElementKind:at:)(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for IndexPath() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return (*(uint64_t (**)(unint64_t, void, void, double, double, double, double))(v4 + 16))(v4 + v10, *(void *)(v4 + v11), *(void *)(v4 + v11 + 8), a1, a2, a3, a4);
}

uint64_t sub_187D0DF48()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:willDisplay:forItemAt:)(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for IndexPath() - 8);
  return (*(uint64_t (**)(unint64_t, void, void, double, double, double, double))(v4 + 16))(v4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), 0, 0, a1, a2, a3, a4);
}

unint64_t type metadata accessor for UIInteraction()
{
  unint64_t result = lazy cache variable for type metadata for UIInteraction;
  if (!lazy cache variable for type metadata for UIInteraction)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIInteraction);
  }
  return result;
}

uint64_t sub_187D0E10C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ShadowListDataSource() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + ((v2 + 48) & ~v2), v1);
  type metadata accessor for ShadowListUpdateRecorder();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_187D0E224()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in UICollectionViewListCoordinatorBase.setupSizeThatFitsCallback(in:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7)
{
  closure #1 in UICollectionViewListCoordinatorBase.setupSizeThatFitsCallback(in:)(a1, a2, a3, *(void *)(v7 + 48), *(void *)(v7 + 56), a4, a5, a6, a7);
}

uint64_t static _ValueActionModifier._makeScene(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _ValueActionModifier._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, MEMORY[0x1E4F40750], a7, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7);
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance _ValueActionModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ValueActionModifier._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance _ValueActionModifier2<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _ValueActionModifier2._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t Scene.onChange<A>(of:initial:_:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v31 = a8;
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  int v34 = a2;
  uint64_t v35 = a9;
  uint64_t v13 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  BOOL v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for _ValueActionModifier2();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  unint64_t v19 = (char *)&v31 - v18;
  uint64_t v32 = type metadata accessor for ModifiedContent();
  uint64_t v33 = *(void *)(v32 - 8);
  double v20 = MEMORY[0x1F4188790](v32);
  uint64_t v22 = (char *)&v31 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a1, a6, v20);
  uint64_t v23 = (uint64_t (*)())swift_allocObject();
  *((void *)v23 + 2) = a5;
  *((void *)v23 + 3) = a6;
  uint64_t v24 = v31;
  *((void *)v23 + 4) = a7;
  *((void *)v23 + 5) = v24;
  *((void *)v23 + 6) = v36;
  *((void *)v23 + 7) = v37;
  swift_retain();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v19, v15, a6);
  id v25 = (uint64_t (**)())&v19[*(int *)(v16 + 36)];
  *id v25 = partial apply for closure #1 in Scene.onChange<A>(of:initial:_:);
  v25[1] = v23;
  Scene.modifier<A>(_:)(v19, a5, v16, a7);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if (v34)
  {
    uint64_t v27 = v37;
    swift_retain();
    uint64_t v26 = v36;
  }
  v40[0] = v26;
  v40[1] = v27;
  void v40[2] = 0;
  v40[3] = 0;
  uint64_t v38 = a7;
  uint64_t v39 = &protocol witness table for _ValueActionModifier2<A>;
  uint64_t v28 = v32;
  uint64_t WitnessTable = swift_getWitnessTable();
  Scene.modifier<A>(_:)(v40, v28, MEMORY[0x1E4F40EE0], WitnessTable);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v26);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v22, v28);
}

uint64_t Scene.onChange<A>(of:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v18 = a4;
  uint64_t v16 = a5;
  uint64_t v17 = a2;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for _ValueActionModifier();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)&v16 - v13;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, a3, v12);
  swift_retain();
  _ValueActionModifier.init(value:action:)();
  Scene.modifier<A>(_:)(v14, v17, v10, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_187D0E870()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Scene.onChange<A>(of:initial:_:)()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) - 8);
  return (*(uint64_t (**)(unint64_t, unint64_t))(v0 + 48))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), v0 + ((*(unsigned __int8 *)(v1 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 48))();
}

uint64_t sub_187D0E99C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187D0E9FC()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D0EAB0()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance UpdateCoalescingCollectionView.VisibleCellsUpdate.StateType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  char v3 = v2 == 2;
  int v4 = *a2;
  if (v4 != 2) {
    char v3 = 0;
  }
  if (v2 != 2 && v4 != 2) {
    char v3 = ((v2 & 1) == 0) ^ v4;
  }
  return v3 & 1;
}

uint64_t closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(void *a1, void *a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for closure #1 in closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:);
  *(void *)(v5 + 24) = v4;
  aBlock[4] = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
  aBlock[5] = v5;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_85;
  unint64_t v6 = _Block_copy(aBlock);
  id v7 = a1;
  id v8 = a2;
  swift_retain();
  swift_release();
  v10.receiver = v7;
  v10.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
  objc_msgSendSuper2(&v10, sel_performBatchUpdates_completion_, v6, 0);
  _Block_release(v6);
  swift_release();
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v4) {
    __break(1u);
  }
  return result;
}

void closure #1 in closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(void *a1, uint64_t a2)
{
  id v3 = objc_msgSend(a1, sel_collectionViewLayout);
  objc_msgSend(v3, sel_invalidateLayoutWithContext_, a2);
}

id UpdateCoalescingCollectionView.scheduleVisibleCellsUpdate(indexPath:kind:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t updated = type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation(0);
  uint64_t v8 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated);
  objc_super v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v35 - v13;
  BOOL v15 = &v3[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate];
  if (*(uint64_t *)&v3[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate + 8] > 1)
  {
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int v16 = *v15;
    if (v16 != 2 && (v16 & 1) == 0)
    {
      id result = objc_msgSend(v3, sel_setNeedsLayout, v12);
      *BOOL v15 = 1;
    }
    else
    {
      if (a3)
      {
        type metadata accessor for (IndexPath, String)();
        unint64_t v19 = &v14[*(int *)(v18 + 48)];
        uint64_t v20 = type metadata accessor for IndexPath();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v14, a1, v20);
        *(void *)unint64_t v19 = a2;
        *((void *)v19 + 1) = a3;
        swift_storeEnumTagMultiPayload();
        uint64_t v21 = &v3[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_postUpdateInvalidations];
        swift_beginAccess();
        uint64_t v22 = *(void **)v21;
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v21 = v22;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v22 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22[2] + 1, 1, v22);
          *(void *)uint64_t v21 = v22;
        }
        unint64_t v25 = v22[2];
        unint64_t v24 = v22[3];
        if (v25 >= v24 >> 1)
        {
          uint64_t v22 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1, v22);
          *(void *)uint64_t v21 = v22;
        }
        v22[2] = v25 + 1;
        uint64_t v26 = (uint64_t)v22
            + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
            + *(void *)(v8 + 72) * v25;
        uint64_t v27 = (uint64_t)v14;
      }
      else
      {
        uint64_t v29 = type metadata accessor for IndexPath();
        (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16))(v10, a1, v29);
        swift_storeEnumTagMultiPayload();
        uint64_t v30 = &v3[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_postUpdateInvalidations];
        swift_beginAccess();
        uint64_t v31 = *(void **)v30;
        char v32 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)uint64_t v30 = v31;
        if ((v32 & 1) == 0)
        {
          uint64_t v31 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31[2] + 1, 1, v31);
          *(void *)uint64_t v30 = v31;
        }
        unint64_t v34 = v31[2];
        unint64_t v33 = v31[3];
        if (v34 >= v33 >> 1)
        {
          uint64_t v31 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1, v31);
          *(void *)uint64_t v30 = v31;
        }
        v31[2] = v34 + 1;
        uint64_t v26 = (uint64_t)v31
            + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
            + *(void *)(v8 + 72) * v34;
        uint64_t v27 = (uint64_t)v10;
      }
      outlined init with take of UpdateCoalescingCollectionView.UpdateInvalidation(v27, v26, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
      return (id)swift_endAccess();
    }
  }
  return result;
}

id closure #1 in UpdateCoalescingCollectionView.idealSize(in:)(char *a1, double a2, double a3)
{
  objc_msgSend(a1, sel_frame);
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  double v13 = v12;
  objc_msgSend(a1, sel_setFrame_, 0.0, 0.0, a2, a3);
  objc_msgSend(a1, sel__setVisibleRectEdgeInsets_, -10000.0, 0.0, -10000.0, 0.0);
  objc_msgSend(a1, sel_setNeedsLayout);
  objc_msgSend(a1, sel_layoutIfNeeded);
  objc_msgSend(a1, sel_contentSize);
  uint64_t v14 = (double *)&a1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize];
  *(void *)uint64_t v14 = v15;
  v14[1] = v16;
  *((unsigned char *)v14 + 16) = 0;
  if (v16 > 10000.0)
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(148);
    v17._object = (void *)0x8000000188337E80;
    v17._countAndFlagsBits = 0xD000000000000034;
    String.append(_:)(v17);
    v18._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 0xD00000000000005ELL;
    v19._object = (void *)0x8000000188337EC0;
    String.append(_:)(v19);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
  }
  objc_msgSend(a1, sel__setVisibleRectEdgeInsets_, *MEMORY[0x1E4FB2848], *(double *)(MEMORY[0x1E4FB2848] + 8), *(double *)(MEMORY[0x1E4FB2848] + 16), *(double *)(MEMORY[0x1E4FB2848] + 24), v21, v22);

  return objc_msgSend(a1, sel_setFrame_, v7, v9, v11, v13);
}

id UpdateCoalescingCollectionView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UpdateCoalescingCollectionView(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t ObjC metadata update function for UpdateCoalescingCollectionView()
{
  return type metadata accessor for UpdateCoalescingCollectionView(0);
}

uint64_t *initializeBufferWithCopyOfBuffer for UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v7 = type metadata accessor for IndexPath();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for (IndexPath, String)();
      uint64_t v9 = *(int *)(v8 + 48);
      double v10 = (uint64_t *)((char *)a1 + v9);
      double v11 = (uint64_t *)((char *)a2 + v9);
      uint64_t v12 = v11[1];
      *double v10 = *v11;
      v10[1] = v12;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void type metadata accessor for (IndexPath, String)()
{
  if (!lazy cache variable for type metadata for (IndexPath, String))
  {
    type metadata accessor for IndexPath();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (IndexPath, String));
    }
  }
}

uint64_t destroy for UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = type metadata accessor for IndexPath();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for (IndexPath, String)();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for IndexPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for (IndexPath, String)();
    uint64_t v7 = *(int *)(v6 + 48);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (void *)(a2 + v7);
    uint64_t v10 = v9[1];
    *uint64_t v8 = *v9;
    v8[1] = v10;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of UpdateCoalescingCollectionView.UpdateInvalidation(a1, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for IndexPath();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for (IndexPath, String)();
      uint64_t v7 = *(int *)(v6 + 48);
      uint64_t v8 = (void *)(a1 + v7);
      uint64_t v9 = (void *)(a2 + v7);
      *uint64_t v8 = *v9;
      v8[1] = v9[1];
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v5 = type metadata accessor for IndexPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
  if (EnumCaseMultiPayload == 1)
  {
    type metadata accessor for (IndexPath, String)();
    *(_OWORD *)(a1 + *(int *)(v6 + 48)) = *(_OWORD *)(a2 + *(int *)(v6 + 48));
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for UpdateCoalescingCollectionView.UpdateInvalidation(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of UpdateCoalescingCollectionView.UpdateInvalidation(a1, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v5 = type metadata accessor for IndexPath();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    if (EnumCaseMultiPayload == 1)
    {
      type metadata accessor for (IndexPath, String)();
      *(_OWORD *)(a1 + *(int *)(v6 + 48)) = *(_OWORD *)(a2 + *(int *)(v6 + 48));
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for UpdateCoalescingCollectionView.VisibleCellsUpdate(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[16]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

void *type metadata accessor for UpdateCoalescingCollectionView.VisibleCellsUpdate()
{
  return &unk_1ED459FF0;
}

uint64_t outlined init with copy of BridgedListState.ScrollTarget?(uint64_t a1, uint64_t a2)
{
  _s10Foundation9IndexPathVSgMaTm_2(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, type metadata accessor for BridgedListState.ScrollTarget, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_187D0FA54()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t sub_187D0FA8C()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_187D0FAD4()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for UICollectionViewLayoutInvalidationContext()
{
  unint64_t result = lazy cache variable for type metadata for UICollectionViewLayoutInvalidationContext;
  if (!lazy cache variable for type metadata for UICollectionViewLayoutInvalidationContext)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewLayoutInvalidationContext);
  }
  return result;
}

uint64_t sub_187D0FB24()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)()
{
  return closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_187D0FB6C()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)()
{
  closure #1 in closure #2 in closure #1 in UpdateCoalescingCollectionView.performBatchUpdates(_:completion:)(*(void **)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_187D0FB84()
{
  return swift_deallocObject();
}

uint64_t sub_187D0FB94()
{
  return swift_deallocObject();
}

id partial apply for closure #1 in UpdateCoalescingCollectionView.layoutSubviews()()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_performBatchUpdates_completion_, 0, 0);
}

uint64_t sub_187D0FBE4()
{
  return swift_deallocObject();
}

void specialized UpdateCoalescingCollectionView.init(coder:)()
{
  uint64_t v1 = (uint64_t *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_safeAreaTransitionState];
  type metadata accessor for FalseSafeAreaTransitionState();
  uint64_t v2 = swift_allocObject();
  *uint64_t v1 = v2;
  v1[1] = (uint64_t)&protocol witness table for FalseSafeAreaTransitionState;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_helper] = 0;
  unsigned int v3 = &v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize];
  *(void *)unsigned int v3 = 0;
  *((void *)v3 + 1) = 0;
  v3[16] = 1;
  v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_isLazyStackBehaviorEnabled] = 0;
  uint64_t v4 = &v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_visibleCellsUpdate];
  *uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_postUpdateInvalidations] = MEMORY[0x1E4FBC860];
  *(_DWORD *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_ignoreGraphUpdates] = 0;
  *(unsigned char *)(v2 + 16) = 0;
  v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingGraphUpdate] = 0;
  v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingScrollTarget] = 0;
  uint64_t v5 = &v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_pendingDeselectedItem];
  uint64_t v6 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  uint64_t v7 = OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView__lastUpdateSeed;
  type metadata accessor for MutableBox<UInt32>();
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = 0;
  *(void *)&v0[v7] = v8;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_bridgedState] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_phaseState] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView__layoutContainer + 8] = 0;
  swift_unknownObjectWeakInit();

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t getEnumTagSinglePayload for UpdateCoalescingCollectionView.VisibleCellsUpdate.StateType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE)
  {
    unsigned int v2 = a2 + 2;
    if (a2 + 2 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 2;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D0FE54);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 2;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  BOOL v8 = v7 >= 2;
  unsigned int v9 = (v7 + 2147483646) & 0x7FFFFFFF;
  if (!v8) {
    unsigned int v9 = -1;
  }
  if (v9 + 1 >= 2) {
    return v9;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for UpdateCoalescingCollectionView.VisibleCellsUpdate.StateType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 2;
  if (a3 + 2 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x187D0FF3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for UpdateCoalescingCollectionView.VisibleCellsUpdate.StateType()
{
  return &unk_1ED459F60;
}

uint64_t destroy for PlatformItemListMenuStyle(uint64_t a1)
{
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 32);

  return outlined consume of Environment<Color?>.Content(v2, v3);
}

uint64_t initializeWithCopy for PlatformItemListMenuStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(unsigned __int8 *)(a2 + 32);
  outlined copy of Environment<Color?>.Content(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for PlatformItemListMenuStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 32);
  outlined copy of Environment<Color?>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v9;
  outlined consume of Environment<Color?>.Content(v10, v11);
  return a1;
}

uint64_t assignWithTake for PlatformItemListMenuStyle(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Environment<Bool?>.Content(v5, v6);
  char v7 = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of Environment<Color?>.Content(v8, v9);
  return a1;
}

ValueMetadata *type metadata accessor for PlatformItemListMenuStyle()
{
  return &type metadata for PlatformItemListMenuStyle;
}

uint64_t associated type witness table accessor for MenuStyle.Body : View in PlatformItemListMenuStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t PlatformItemListMenuStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v18 = 0;
  unint64_t v19 = 0xE000000000000000;
  Namespace.wrappedValue.getter();
  _print_unlocked<A, B>(_:_:)();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = 0;
  *(void *)(v6 + 24) = 0xE000000000000000;
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(unsigned __int8 *)(v2 + 32);
  outlined copy of Environment<Color?>.Content(v7, v8);
  uint64_t v9 = specialized Environment.wrappedValue.getter(v7, v8);
  outlined consume of Environment<Color?>.Content(v7, v8);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  uint64_t v18 = 7;
  unint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  unint64_t v22 = 0xC000000000000000;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  uint64_t v11 = *(void *)(v2 + 8);
  uint64_t v12 = *(unsigned __int8 *)(v2 + 16);
  outlined copy of Environment<Bool>.Content(v11, v12);
  LOBYTE(v9) = specialized Environment.wrappedValue.getter(v11, v12);
  outlined consume of Environment<Bool?>.Content(v11, v12);
  uint64_t v13 = swift_allocObject();
  outlined init with take of PlatformItemList.Item.SystemItem?((uint64_t)&v18, v13 + 16);
  *(void *)(v13 + 120) = v5;
  *(void *)(v13 + 128) = v4;
  *(unsigned char *)(v13 + 136) = v9;
  *(unsigned char *)(v13 + 137) = 2;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v15 = swift_getKeyPath();
  uint64_t v16 = swift_getKeyPath();
  outlined copy of AppIntentExecutor?(v5);
  outlined copy of AppIntentExecutor?(v5);
  uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  char v27 = 0;
  *(void *)a2 = partial apply for closure #1 in View.platformItemIdentifier(_:);
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = partial apply for closure #1 in View.platformItemTint(_:);
  *(void *)(a2 + 24) = v10;
  *(void *)(a2 + 32) = partial apply for closure #2 in View.platformItemChildren<A>(systemItem:primaryAction:menuIndicatorVisibility:controlSize:children:);
  *(void *)(a2 + 40) = v13;
  *(void *)(a2 + 48) = v5;
  *(void *)(a2 + 56) = v4;
  *(unsigned char *)(a2 + 64) = 1;
  *(void *)(a2 + 72) = KeyPath;
  *(unsigned char *)(a2 + 80) = 0;
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 88) = v15;
  *(_WORD *)(a2 + 112) = 0;
  *(void *)(a2 + 120) = v16;
  *(unsigned char *)(a2 + 128) = v27;
  return result;
}

uint64_t sub_187D103A0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_187D103D8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187D10410()
{
  unint64_t v1 = *(void *)(v0 + 48);
  if (v1 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), v1, *(void *)(v0 + 56), *(void *)(v0 + 64), *(void *)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104), *(void *)(v0 + 112));
  }
  if (*(void *)(v0 + 120)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t sub_187D104A4()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
    type metadata accessor for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    type metadata accessor for LabelGroup<MenuStyleConfiguration.Label>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>();
    type metadata accessor for LabelGroup<MenuStyleConfiguration.Label>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>);
    }
  }
}

void type metadata accessor for _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>()
{
  if (!lazy cache variable for type metadata for _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>)
  {
    type metadata accessor for LabelGroup<MenuStyleConfiguration.Label>(255, &lazy cache variable for type metadata for LabelGroup<MenuStyleConfiguration.Label>, (uint64_t)&type metadata for MenuStyleConfiguration.Label, (uint64_t)&protocol witness table for MenuStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LabelGroup);
    lazy protocol witness table accessor for type LabelGroup<MenuStyleConfiguration.Label> and conformance LabelGroup<A>();
    unint64_t v0 = type metadata accessor for _UnaryViewAdaptor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LabelGroup<MenuStyleConfiguration.Label> and conformance LabelGroup<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelGroup<MenuStyleConfiguration.Label> and conformance LabelGroup<A>;
  if (!lazy protocol witness table cache variable for type LabelGroup<MenuStyleConfiguration.Label> and conformance LabelGroup<A>)
  {
    type metadata accessor for LabelGroup<MenuStyleConfiguration.Label>(255, &lazy cache variable for type metadata for LabelGroup<MenuStyleConfiguration.Label>, (uint64_t)&type metadata for MenuStyleConfiguration.Label, (uint64_t)&protocol witness table for MenuStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LabelGroup);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelGroup<MenuStyleConfiguration.Label> and conformance LabelGroup<A>);
  }
  return result;
}

void type metadata accessor for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>()
{
  if (!lazy cache variable for type metadata for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>);
    unint64_t v0 = type metadata accessor for PlatformItemListGeneratingViewModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>)
  {
    type metadata accessor for LabelGroup<MenuStyleConfiguration.Label>(255, &lazy cache variable for type metadata for ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, (uint64_t)&type metadata for MenuStyleConfiguration.Content, (uint64_t)&type metadata for PlatformItemListContentModifier, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for LabelGroup<MenuStyleConfiguration.Label>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<PlatformItemList.Key>, (uint64_t)&type metadata for PlatformItemList.Key, (uint64_t)&protocol witness table for PlatformItemList.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>);
    }
  }
}

void type metadata accessor for LabelGroup<MenuStyleConfiguration.Label>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for LabelGroup<MenuStyleConfiguration.Label>(255, &lazy cache variable for type metadata for ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, (uint64_t)&type metadata for MenuStyleConfiguration.Content, (uint64_t)&type metadata for PlatformItemListContentModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, (void (*)(void))lazy protocol witness table accessor for type _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>> and conformance _UnaryViewAdaptor<A>, (void (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<PlatformItemList.Key> and conformance _PreferenceTransformModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>, _PreferenceTransformModifier<PlatformItemList.Key>>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, PlatformItemListGeneratingViewModifier<SelectionPlatformItemListFlags, ModifiedContent<ModifiedContent<MenuStyleConfiguration.Content, PlatformItemListContentModifier>, _PreferenceTransformModifier<PlatformItemList.Key>>>>, OnPlatformContainerSelectionModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>> and conformance _UnaryViewAdaptor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>> and conformance _UnaryViewAdaptor<A>;
  if (!lazy protocol witness table cache variable for type _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>> and conformance _UnaryViewAdaptor<A>)
  {
    type metadata accessor for _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UnaryViewAdaptor<LabelGroup<MenuStyleConfiguration.Label>> and conformance _UnaryViewAdaptor<A>);
  }
  return result;
}

void AnyUIKitNavigationBridge.isBeingPresented.getter()
{
}

Swift::Void __swiftcall AnyUIKitNavigationBridge.popSelf(animated:)(Swift::Bool animated)
{
}

uint64_t UIKitNavigationBridge.activePresentation.didset(uint64_t a1)
{
  swift_beginAccess();
  outlined init with copy of BridgedPresentation?(v1 + 32, (uint64_t)v16);
  outlined init with copy of BridgedPresentation?(a1, (uint64_t)&v7);
  if ((void)v8)
  {
    void v14[4] = v11;
    v14[5] = v12;
    uint64_t v15 = v13;
    v14[0] = v7;
    v14[1] = v8;
    void v14[2] = v9;
    v14[3] = v10;
    uint64_t v3 = v7;
    outlined init with copy of BridgedPresentation?((uint64_t)v16, (uint64_t)&v7);
    if ((void)v8)
    {
      outlined init with copy of NavigationDestinationContent((uint64_t)&v7, (uint64_t)v6);
      outlined destroy of BridgedPresentation((uint64_t)&v7);
      uint64_t v4 = v6[0];
      outlined destroy of NavigationDestinationContent((uint64_t)v6);
      if (v3 == v4) {
        goto LABEL_8;
      }
    }
    else
    {
      outlined destroy of AccessibilityValueStorage?((uint64_t)&v7, &lazy cache variable for type metadata for BridgedPresentation?);
    }
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
LABEL_8:
    outlined destroy of BridgedPresentation((uint64_t)v14);
    return outlined destroy of AccessibilityValueStorage?((uint64_t)v16, &lazy cache variable for type metadata for BridgedPresentation?);
  }
  outlined destroy of AccessibilityValueStorage?((uint64_t)&v7, &lazy cache variable for type metadata for BridgedPresentation?);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v16, &lazy cache variable for type metadata for BridgedPresentation?);
}

uint64_t UIKitNavigationBridge.activePresentation.setter(uint64_t a1)
{
  swift_beginAccess();
  outlined init with copy of BridgedPresentation?(v1 + 32, (uint64_t)v4);
  swift_beginAccess();
  outlined assign with copy of BridgedPresentation?(a1, v1 + 32);
  swift_endAccess();
  UIKitNavigationBridge.activePresentation.didset((uint64_t)v4);
  outlined destroy of AccessibilityValueStorage?(a1, &lazy cache variable for type metadata for BridgedPresentation?);
  return outlined destroy of AccessibilityValueStorage?((uint64_t)v4, &lazy cache variable for type metadata for BridgedPresentation?);
}

uint64_t UIKitNavigationBridge.containingNavController.getter()
{
  uint64_t result = UIKitNavigationBridge.containingNavControllerFromLastAttemptedPop.getter();
  if (!result) {
    UIKitNavigationBridge.containingVC.getter();
  }
  return result;
}

void UIKitNavigationBridge.inferredPreferenceBridge.getter()
{
}

uint64_t sub_187D1108C(void *a1)
{
  if (a1)
  {
    id v2 = objc_msgSend(a1, sel_traitCollection);
    UITraitCollection.baseEnvironment.getter(v8);

    uint64_t v3 = EnvironmentValues.preferenceBridge.getter();
    swift_release();
  }
  else
  {
    uint64_t v4 = (void *)UIKitNavigationBridge.containingNavController.getter();
    if (!v4) {
      return 0;
    }
    uint64_t v5 = v4;
    id v6 = objc_msgSend(v4, sel_traitCollection);

    UITraitCollection.baseEnvironment.getter(v8);
    uint64_t v3 = EnvironmentValues.preferenceBridge.getter();
    swift_release();
  }
  swift_release();
  return v3;
}

void popCurrentView #1 <A>(transaction:) in UIKitNavigationBridge.updateNavigationDestinationsIfNeeded(preference:)(uint64_t a1, uint64_t a2)
{
  char v3 = Transaction.disablesAnimations.getter();
  (*(void (**)(BOOL))(*(void *)a2 + 360))((v3 & 1) == 0);
  id v6 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v4 = (void *)MEMORY[0x18C115780](0xD000000000000037, 0x8000000188338070);
  objc_msgSend(v6, sel_removeObserver_name_object_, a2, v4, 0);

  uint64_t v5 = (void *)MEMORY[0x18C115780](0xD000000000000038, 0x80000001883380B0);
  objc_msgSend(v6, sel_removeObserver_name_object_, a2, v5, 0);

  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  UIKitNavigationBridge.activePresentation.setter((uint64_t)v7);
}

uint64_t UIKitNavigationBridge.updatePresentedContent(_:animated:)(uint64_t a1, char a2)
{
  char v3 = v2;
  (*(void (**)(uint64_t *__return_ptr, void))(*v2 + 336))(&v16, *(unsigned __int8 *)(a1 + 8));
  if (v17 == 2) {
    return outlined destroy of AccessibilityValueStorage?((uint64_t)&v16, (unint64_t *)&lazy cache variable for type metadata for PushTarget?);
  }
  outlined init with take of PushTarget((uint64_t)&v16, (uint64_t)v18);
  swift_beginAccess();
  if (!v2[6]
    || (uint64_t v7 = v2[16], (~v7 & 0xF000000000000007) == 0)
    || (uint64_t v8 = (void *)v2[15],
        long long v9 = *(uint64_t (**)(void *, uint64_t, uint64_t, unsigned char *, void))(*v2 + 344),
        outlined copy of BridgedPresentation.ContentHost(v8, v2[16]),
        char v10 = v9(v8, v7, a1, v18, a2 & 1),
        outlined consume of BridgedPresentation.ContentHost?(v8, v7),
        (v10 & 1) == 0))
  {
    (*(void (**)(uint64_t, unsigned char *, void))(*v3 + 352))(a1, v18, a2 & 1);
    uint64_t v11 = MEMORY[0x18C119DF0](v18);
    if (v11)
    {
      long long v12 = (void *)v11;
      if ((static SemanticFeature.isEnabled.getter() & 1) != 0 && v18[8] == 1) {
        UIKitNavigationBridge.containingSplitViewController.getter();
      }
      id v13 = v12;
      id v14 = objc_msgSend(self, sel_defaultCenter);
      uint64_t v15 = (void *)MEMORY[0x18C115780](0xD000000000000037, 0x8000000188338070);
      objc_msgSend(v14, sel_addObserver_selector_name_object_, v3, sel_navigationChanged_, v15, v13);
    }
  }
  return outlined destroy of PushTarget((uint64_t)v18);
}

void UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)()
{
}

void sub_187D116B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  if (a1)
  {
    specialized UIHostingController.host.getter();
    uint64_t v10 = specialized _UIHostingView.viewGraph.getter();
    swift_beginAccess();
    if (*(unsigned char *)(v10 + 128))
    {
      swift_release();
    }
    else
    {
      id v11 = (id)specialized UIHostingController.host.getter();
      _UIHostingView.setPreferenceBridge(_:)(a1);
      swift_release();
    }
  }
  swift_beginAccess();
  outlined init with copy of PushTarget(v8, (uint64_t)va);
  swift_retain();
  swift_retain();
  UIKitNavigationBridge.containingSplitViewController.getter();
}

uint64_t sub_187D1175C(void *a1)
{
  outlined init with copy of PushTarget((uint64_t)v13, (uint64_t)v12);
  uint64_t v8 = (void *)swift_allocObject();
  _OWORD v8[2] = *(void *)(v4 + 112);
  unsigned char v8[3] = *(void *)(v4 + 120);
  void v8[4] = v1;
  outlined init with take of PushTarget((uint64_t)v12, (uint64_t)(v8 + 5));
  v8[9] = a1;
  v8[10] = v3;
  v8[11] = v2;
  v8[12] = v5;
  v8[13] = v6;
  id v9 = a1;
  swift_retain();
  swift_retain();
  swift_retain();
  id v10 = v1;
  static Update.enqueueAction(_:)();

  swift_release();
  swift_release();
  swift_release();
  return outlined destroy of PushTarget((uint64_t)v13);
}

id closure #1 in UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v11 = (void *)specialized UIHostingController.host.getter();
  id result = (id)MEMORY[0x18C119DF0](a2);
  if (result)
  {
    id v13 = result;
    outlined init with copy of PushTarget(a2, (uint64_t)v33);
    id v14 = (void *)MEMORY[0x18C119DF0](a2);
    outlined init with take of PushTarget?((uint64_t)v33, (uint64_t)v34);
    swift_unknownObjectWeakInit();
    id v15 = a3;
    id v16 = v11;

    swift_unknownObjectWeakInit();
    char v35 = 2;
    UIHostingController.overrides.setter((uint64_t)v34);
    id result = objc_msgSend(v13, sel_view);
    if (result)
    {
      char v17 = result;
      objc_msgSend(result, sel_bounds);
      double v19 = v18;
      double v21 = v20;
      double v23 = v22;
      double v25 = v24;

      objc_msgSend(v16, sel_setBounds_, v19, v21, v23, v25);
      id v26 = objc_msgSend(v13, sel_traitCollection);
      v33[0] = a6;
      v33[1] = a7;
      swift_retain();
      swift_retain();
      UITraitCollection.resolvedEnvironment(base:)(v33, v34);
      swift_release();
      swift_release();

      long long v27 = v34[0];
      uint64_t v28 = (void *)specialized UIHostingController.host.getter();
      v34[0] = v27;
      swift_retain_n();
      swift_retain_n();
      id v29 = v28;
      _UIHostingView.environmentOverride.setter(v34);

      uint64_t v30 = specialized UIHostingController.navigationBridge.getter();
      if (v30)
      {
        uint64_t v31 = *(void *)(v30 + 176);
        *(_OWORD *)(v30 + 176) = v27;
        outlined consume of EnvironmentValues?(v31);
      }
      else
      {
        swift_release();
        swift_release();
      }
      id v32 = (id)specialized UIHostingController.host.getter();
      _UIHostingView.updateEnvironment()();
    }
    __break(1u);
  }
  return result;
}

uint64_t $defer #1 <A><A1>() in closure #1 in UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  long long v5 = xmmword_18834C6B0;
  uint64_t v6 = 0;
  char v7 = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  char v8 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v5, (uint64_t)v9);
  uint64_t v3 = UIHostingController.overrides.setter((uint64_t)v9);
  return a2(v3);
}

void closure #1 in closure #1 in UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)()
{
  unint64_t v0 = (void *)specialized UIHostingController.host.getter();
  type metadata accessor for _UIHostingView();
  id v1 = v0;
  swift_getWitnessTable();
  ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
}

void UIKitNavigationBridge.pushTarget(isDetail:)(uint64_t a1@<X8>)
{
  uint64_t Attempted = UIKitNavigationBridge.containingNavControllerFromLastAttemptedPop.getter();
  if (Attempted)
  {
    uint64_t v3 = (void *)Attempted;
    swift_unknownObjectWeakInit();

    *(unsigned char *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  else
  {
    uint64_t v4 = UIKitNavigationBridge.containingNavController.getter();
    if (v4)
    {
      id v5 = (id)v4;
      swift_unknownObjectWeakInit();
      *(unsigned char *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 24) = 1;
    }
    else
    {
      *(_OWORD *)a1 = xmmword_18834C6B0;
      *(void *)(a1 + 16) = 0;
      *(unsigned char *)(a1 + 24) = 0;
    }
  }
}

void UIKitNavigationBridge.updateContentHost(_:destination:pushTarget:animated:)()
{
}

void UIKitNavigationBridge.push(_:onto:animated:)()
{
}

Swift::Void __swiftcall UIKitNavigationBridge.popDestination(animated:)(Swift::Bool animated)
{
}

void @objc UIKitNavigationBridge.navigationChanged(_:)()
{
}

uint64_t UIKitNavigationBridge.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();
  outlined destroy of AccessibilityValueStorage?(v0 + 32, &lazy cache variable for type metadata for BridgedPresentation?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined consume of EnvironmentValues?(*(void *)(v0 + 176));

  return swift_unknownObjectWeakDestroy();
}

uint64_t UIKitNavigationBridge.__deallocating_deinit()
{
  UIKitNavigationBridge.deinit();

  return swift_deallocClassInstance();
}

void *type metadata accessor for UIKitNavigationBridgePresentationModeLocation()
{
  return &unk_1ED465710;
}

uint64_t protocol witness for Location.get() in conformance UIKitNavigationBridgePresentationModeLocation@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    char v3 = (*(uint64_t (**)(uint64_t))(*(void *)result + 88))(result);
    uint64_t result = swift_release();
  }
  else
  {
    char v3 = 0;
  }
  *a1 = v3 & 1;
  return result;
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance UIKitNavigationBridgePresentationModeLocation(uint64_t result)
{
  if ((*(unsigned char *)result & 1) == 0)
  {
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      (*(void (**)(uint64_t))(*(void *)result + 96))(1);
      return swift_release();
    }
  }
  return result;
}

uint64_t protocol witness for Location.update() in conformance UIKitNavigationBridgePresentationModeLocation(unsigned char *a1)
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    char v3 = (*(uint64_t (**)(uint64_t))(*(void *)Strong + 88))(Strong);
    swift_release();
  }
  else
  {
    char v3 = 0;
  }
  *a1 = v3 & 1;
  return 1;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsRepresentingSheetNavigationView()
{
  lazy protocol witness table accessor for type IsRepresentingSheetNavigationView and conformance IsRepresentingSheetNavigationView();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance IsRepresentingSheetNavigationView()
{
  return PropertyList.subscript.setter();
}

uint64_t outlined assign with copy of BridgedPresentation?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for BridgedPresentation?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of BridgedPresentation(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of NavigationDestinationContent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of NavigationDestinationContent(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of PushTarget(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_187D12330()
{
  swift_unknownObjectWeakDestroy();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

id partial apply for closure #1 in UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)()
{
  return closure #1 in UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)(*(void *)(v0 + 32), v0 + 40, *(void **)(v0 + 72), *(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 96), *(void *)(v0 + 104));
}

uint64_t outlined init with take of PushTarget?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for PushTarget?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in closure #1 in UIKitNavigationBridge.withUpdatedNavigationBar<A>(pushTarget:nextVC:perform:)()
{
}

id outlined copy of BridgedPresentation.ContentHost(void *a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t v4 = a2 & 0x7FFFFFFFFFFFFFFFLL;
    id v5 = a1;
    a1 = (void *)v4;
  }
  else if (((v2 ^ (2 * v2)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return a1;
}

void outlined consume of BridgedPresentation.ContentHost?(void *a1, uint64_t a2)
{
  if ((~a2 & 0xF000000000000007) != 0) {
    outlined consume of BridgedPresentation.ContentHost(a1, a2);
  }
}

void outlined consume of BridgedPresentation.ContentHost(void *a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t v3 = a2 & 0x7FFFFFFFFFFFFFFFLL;

    a1 = (void *)v3;
  }
  else if (((v2 ^ (2 * v2)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
}

uint64_t outlined destroy of NavigationDestinationPresentation(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for IsRepresentingSheetNavigationView()
{
  return &type metadata for IsRepresentingSheetNavigationView;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsRepresentingSheetNavigationView()
{
  return &protocol witness table for IsRepresentingSheetNavigationView;
}

uint64_t View.editMenu<A>(menu:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v24 = a7;
  uint64_t v20 = a6;
  uint64_t v21 = a1;
  uint64_t v22 = a5;
  uint64_t v23 = a2;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  type metadata accessor for ModifiedContent();
  uint64_t v31 = a6;
  uint64_t v32 = _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>);
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for ZStack();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  id v13 = (char *)&v20 - v12;
  swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for EditMenuModifier();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  char v17 = (char *)&v20 - v16;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v18 = v22;
  uint64_t v27 = v22;
  uint64_t v28 = v20;
  uint64_t v29 = v21;
  uint64_t v30 = v23;
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  *((_DWORD *)v17 + 5) = 0;
  *(void *)char v17 = 0;
  *((void *)v17 + 1) = 0;
  *((_WORD *)v17 + 8) = 0;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v17[*(int *)(v14 + 40)], v13, v10);
  MEMORY[0x18C113660](v17, a3, v14, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t type metadata accessor for EditMenuModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.editMenu<A>(isPresented:menu:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v33 = a4;
  uint64_t v34 = a8;
  uint64_t v32 = a5;
  int v37 = a3;
  uint64_t v35 = a2;
  uint64_t v31 = a1;
  uint64_t v38 = a9;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  v29[3] = type metadata accessor for ModifiedContent();
  uint64_t v47 = a10;
  uint64_t v48 = _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>);
  uint64_t v36 = MEMORY[0x1E4F3FBC0];
  _DWORD v29[2] = swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for ZStack();
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v29 - v13;
  v29[1] = swift_getWitnessTable();
  uint64_t v15 = type metadata accessor for EditMenuModifier();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v29 - v17;
  v29[0] = a6;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v30 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)v29 - v20;
  uint64_t v39 = a6;
  uint64_t v40 = a7;
  uint64_t v22 = v34;
  uint64_t v41 = v34;
  uint64_t v42 = a10;
  uint64_t v43 = v33;
  uint64_t v44 = v32;
  uint64_t v23 = v31;
  swift_retain();
  uint64_t v24 = v35;
  swift_retain();
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  EditMenuModifier.init(isPresented:menuContent:)(v23, v24, v37, (uint64_t)v14, v12, (uint64_t)v18);
  MEMORY[0x18C113660](v18, v29[0], v15, v22);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v45 = v22;
  uint64_t v46 = WitnessTable;
  uint64_t v26 = swift_getWitnessTable();
  unint64_t v27 = lazy protocol witness table accessor for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger();
  View.input<A>(_:)((uint64_t)&unk_1ED452500, v19, (uint64_t)&unk_1ED452500, v26, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v21, v19);
}

uint64_t closure #1 in View.editMenu<A>(menu:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  v21[1] = a4;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  id v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v21 - v16;
  a1(v15);
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  uint64_t v18 = _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>);
  void v21[2] = a3;
  v21[3] = v18;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v10);
}

uint64_t partial apply for closure #1 in View.editMenu<A>(menu:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in View.editMenu<A>(menu:)(*(void (**)(double))(v1 + 48), *(void *)(v1 + 24), *(void *)(v1 + 40), a1);
}

uint64_t EditMenuModifier.init(isPresented:menuContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  outlined consume of StateOrBinding<Bool>(0, 0, 0, 0);
  *(_DWORD *)(a6 + 20) = 0;
  *(void *)a6 = a1;
  *(void *)(a6 + 8) = a2;
  *(unsigned char *)(a6 + 16) = a3;
  *(unsigned char *)(a6 + 17) = 1;
  uint64_t v12 = a6 + *(int *)(type metadata accessor for EditMenuModifier() + 40);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32);

  return v13(v12, a4, a5);
}

unint64_t lazy protocol witness table accessor for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger()
{
  unint64_t result = lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger;
  if (!lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger;
  if (!lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger;
  if (!lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger;
  if (!lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger;
  if (!lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger);
  }
  return result;
}

uint64_t View.editMenu<A>(menu:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  void v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a1;
  v12[7] = a2;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  type metadata accessor for ModifiedContent();
  void v15[2] = a6;
  v15[3] = _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<MenuStyleContext>);
  swift_getWitnessTable();
  v15[0] = partial apply for closure #1 in View.editMenu<A>(menu:);
  v15[1] = v12;
  uint64_t v13 = type metadata accessor for SelectionEditMenuModifier();
  swift_retain();
  MEMORY[0x18C113660](v15, a3, v13, a5);
  return swift_release();
}

uint64_t closure #1 in View.editMenu<A>(menu:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  id v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10(v7);
  View.styleContext<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, a5);
}

uint64_t sub_187D1331C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.editMenu<A>(menu:)(uint64_t a1)
{
  return closure #1 in View.editMenu<A>(menu:)(a1, v1[6], v1[7], v1[2], v1[3]);
}

uint64_t type metadata accessor for SelectionEditMenuModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for EditMenuResponder()
{
  uint64_t result = type metadata singleton initialization cache for EditMenuResponder;
  if (!type metadata singleton initialization cache for EditMenuResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for EditMenuResponder()
{
  return swift_initClassMetadata2();
}

uint64_t static SelectionEditMenuModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v2 = *a1;
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  id v21 = *(id *)a2;
  int v22 = v3;
  uint64_t v23 = v4;
  long long v24 = *(_OWORD *)(a2 + 24);
  *(void *)&long long v25 = v5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewInputs.init(withoutGeometry:)();
  specialized _ViewInputs.addPlatformItemListKey<A>(flags:editOperation:)(0);
  LODWORD(v21) = v2;
  type metadata accessor for SelectionEditMenuModifier();
  type metadata accessor for _GraphValue();
  int v6 = _GraphValue.value.getter();
  long long v19 = v34;
  long long v18 = v37;
  id v7 = (id)AGSubgraphGetCurrent();
  if (!v7) {
    __break(1u);
  }
  v17[1] = v17;
  id v21 = v7;
  int v22 = v6;
  uint64_t v23 = v31;
  LODWORD(v24) = v32;
  *((void *)&v24 + 1) = v33;
  long long v25 = v19;
  uint64_t v26 = v35;
  uint64_t v27 = v36;
  long long v28 = v18;
  uint64_t v29 = v38;
  int v30 = v39;
  MEMORY[0x1F4188790](v7);
  uint64_t v15 = type metadata accessor for SelectionEditMenuModifier.Child();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<(_:)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  uint64_t v9 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v21, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_23, (uint64_t)&v14, v15, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  uint64_t v11 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  int v12 = v20;
  type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>(0);
  _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_0(&lazy protocol witness table cache variable for type _GraphInputs.SelectionBasedStorageKey<TextSelection> and conformance _GraphInputs.SelectionBasedStorageKey<A>, type metadata accessor for _GraphInputs.SelectionBasedStorageKey<TextSelection>);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  HIDWORD(v21) = v12;
  PropertyList.subscript.setter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t (*SelectionEditMenuModifier.Child.value.getter(uint64_t a1))(uint64_t a1)
{
  long long v3 = v1[5];
  void v14[4] = v1[4];
  v14[5] = v3;
  int v15 = *((_DWORD *)v1 + 24);
  long long v4 = v1[1];
  v14[0] = *v1;
  v14[1] = v4;
  long long v5 = v1[3];
  void v14[2] = v1[2];
  v14[3] = v5;
  uint64_t v6 = swift_allocObject();
  long long v7 = *(_OWORD *)(a1 + 16);
  long long v8 = v1[4];
  long long v9 = v1[5];
  long long v10 = v1[2];
  *(_OWORD *)(v6 + 80) = v1[3];
  *(_OWORD *)(v6 + 96) = v8;
  *(_OWORD *)(v6 + 112) = v9;
  long long v11 = *v1;
  long long v12 = v1[1];
  *(_OWORD *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 32) = v11;
  *(_DWORD *)(v6 + 128) = *((_DWORD *)v1 + 24);
  *(_OWORD *)(v6 + 48) = v12;
  *(_OWORD *)(v6 + 64) = v10;
  outlined retain of SelectionEditMenuModifier<A>.Child((void **)v14);
  return partial apply for closure #1 in SelectionEditMenuModifier.Child.value.getter;
}

uint64_t closure #1 in SelectionEditMenuModifier.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!AGSubgraphIsValid()) {
    return MEMORY[0x1E4FBC860];
  }
  AGGraphClearUpdate();
  id v8 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in closure #1 in SelectionEditMenuModifier.Child.value.getter(a2, a1, a3, a4);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  AGGraphClearUpdate();
  if ((PreferencesOutputs.subscript.getter() & 0x100000000) != 0)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v9 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  AGGraphSetUpdate();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t closure #1 in closure #1 in SelectionEditMenuModifier.Child.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  long long v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v12 = v11[5];
  long long v28 = v11[4];
  long long v29 = v12;
  int v30 = *((_DWORD *)v11 + 24);
  long long v13 = v11[1];
  long long v24 = *v11;
  long long v25 = v13;
  long long v14 = v11[3];
  long long v26 = v11[2];
  long long v27 = v14;
  type metadata accessor for SelectionEditMenuModifier.Child();
  int v15 = (void (*)(uint64_t))specialized SelectionEditMenuModifier.Child.modifier.getter();
  swift_retain();
  v15(a2);
  swift_release();
  uint64_t v23 = a3;
  uint64_t v16 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v10, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v22, a3, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v17);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a3);
  _GraphValue.init(_:)();
  long long v18 = *(_OWORD *)(a1 + 64);
  long long v26 = *(_OWORD *)(a1 + 48);
  long long v27 = v18;
  long long v28 = *(_OWORD *)(a1 + 80);
  LODWORD(v29) = *(_DWORD *)(a1 + 96);
  long long v19 = *(_OWORD *)(a1 + 32);
  long long v24 = *(_OWORD *)(a1 + 16);
  long long v25 = v19;
  return (*(uint64_t (**)(char *, long long *, uint64_t, uint64_t))(a4 + 24))((char *)&v21 + 4, &v24, a3, a4);
}

uint64_t protocol witness for Rule.value.getter in conformance SelectionEditMenuModifier<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  long long v3 = SelectionEditMenuModifier.Child.value.getter(a1);
  uint64_t v5 = v4;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v3;
  *(void *)(result + 24) = v5;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TextSelection) -> (@owned PlatformItemList);
  a2[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))result;
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SelectionEditMenuModifier<A>(int *a1, uint64_t a2)
{
  return static SelectionEditMenuModifier._makeInputs(modifier:inputs:)(a1, a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SelectionEditMenuModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for SelectionEditMenuModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance SelectionEditMenuModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for SelectionEditMenuModifier<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance SelectionEditMenuModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t EditMenuModifier.id.getter()
{
  uint64_t result = *(unsigned int *)(v0 + 20);
  if (!result)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t EditMenuModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v56 = a2;
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for _ViewModifier_Content();
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = type metadata accessor for EditMenuModifierCore();
  uint64_t v46 = v5;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  type metadata accessor for AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>>();
  uint64_t v65 = &unk_1ED4349C0;
  uint64_t v66 = v8;
  uint64_t v52 = type metadata accessor for ModifiedContent();
  uint64_t v67 = v52;
  unint64_t v68 = lazy protocol witness table accessor for type DeferTriggerPredicate and conformance DeferTriggerPredicate();
  unint64_t v49 = v68;
  uint64_t v9 = type metadata accessor for StaticIf();
  uint64_t v53 = *(void *)(v9 - 8);
  uint64_t v54 = v9;
  MEMORY[0x1F4188790](v9);
  char v50 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  unint64_t v51 = (char *)&v44 - v12;
  uint64_t v13 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = v7;
  uint64_t v44 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v17);
  long long v19 = (char *)&v44 - v18;
  uint64_t v55 = v8;
  uint64_t v48 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v47 = (char *)&v44 - v21;
  int v22 = EditMenuModifier.id.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v3 + *(int *)(a1 + 40), v6);
  uint64_t v23 = *(void **)v3;
  uint64_t v24 = *(void *)(v3 + 8);
  if (*(unsigned char *)(v3 + 17))
  {
    char v25 = *(unsigned char *)(v3 + 16) & 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    char v57 = v23 & 1;
    uint64_t v58 = v24;
    type metadata accessor for EventFilter<()>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
    uint64_t v23 = v65;
    uint64_t v24 = v66;
    char v25 = v67;
  }
  *(void *)long long v19 = static Anchor.Source<A>.bounds.getter();
  *((_DWORD *)v19 + 2) = v22;
  uint64_t v26 = type metadata accessor for EditMenuModifierCore();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v19[*(int *)(v26 + 40)], v16, v6);
  long long v27 = &v19[*(int *)(v26 + 44)];
  *(void *)long long v27 = v23;
  *((void *)v27 + 1) = v24;
  v27[16] = v25;
  uint64_t v28 = v46;
  uint64_t WitnessTable = swift_getWitnessTable();
  int v30 = v47;
  uint64_t v31 = v28;
  uint64_t v32 = v45;
  MEMORY[0x18C113660](v19, v31, v45, WitnessTable);
  uint64_t v33 = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v19, v32);
  MEMORY[0x1F4188790](v33);
  MEMORY[0x1F4188790](v34);
  uint64_t v63 = WitnessTable;
  uint64_t v64 = &protocol witness table for EditMenuModifierCore<A>;
  uint64_t v35 = v55;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v37 = _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_0(&lazy protocol witness table cache variable for type AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>> and conformance AddGestureModifier<A>, (void (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>>);
  uint64_t v61 = v36;
  uint64_t v62 = v37;
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v38 = v50;
  StaticIf<>.init(_:then:else:)();
  uint64_t v59 = v36;
  uint64_t v60 = v43;
  uint64_t v39 = v54;
  swift_getWitnessTable();
  uint64_t v40 = v51;
  static ViewBuilder.buildExpression<A>(_:)(v38);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v53 + 8);
  v41(v38, v39);
  static ViewBuilder.buildExpression<A>(_:)(v40);
  v41(v40, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v30, v35);
}

uint64_t closure #1 in EditMenuModifier.body(content:)(uint64_t a1)
{
  type metadata accessor for EditMenuModifier();
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EditMenuModifierCore();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v7 - v4;
  v7[0] = swift_getWitnessTable();
  v7[1] = &protocol witness table for EditMenuModifierCore<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(a1);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t closure #2 in EditMenuModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v14 = a1;
  uint64_t v1 = type metadata accessor for EditMenuModifier();
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for EditMenuModifierCore();
  type metadata accessor for ModifiedContent();
  type metadata accessor for AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>>();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v13 - v7;
  EditMenuModifier.editMenuGesture.getter(v1);
  uint64_t v19 = v23;
  uint64_t v20 = v24;
  long long v13 = v25;
  long long v21 = v25;
  uint64_t v22 = v26;
  type metadata accessor for _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v18 = &protocol witness table for EditMenuModifierCore<A>;
  uint64_t v9 = swift_getWitnessTable();
  _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_0(&lazy protocol witness table cache variable for type _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>> and conformance _EndedGesture<A>, (void (*)(uint64_t))type metadata accessor for _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>);
  View.gesture<A>(_:including:)();
  swift_release();
  swift_release();
  uint64_t v10 = _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_0(&lazy protocol witness table cache variable for type AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>> and conformance AddGestureModifier<A>, (void (*)(uint64_t))type metadata accessor for AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>>);
  uint64_t v15 = v9;
  uint64_t v16 = v10;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v5);
  uint64_t v11 = *(void (**)(char *, uint64_t))(v3 + 8);
  v11(v5, v2);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  return ((uint64_t (*)(char *, uint64_t))v11)(v8, v2);
}

uint64_t EditMenuModifier.editMenuGesture.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](a1);
  lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent();
  Gesture.eventFilter<A>(forType:_:)();
  uint64_t v9 = v11;
  long long v10 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(a1 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v6 + v5, (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for closure #2 in EditMenuModifier.editMenuGesture.getter;
  *(void *)(v7 + 24) = v6;
  type metadata accessor for ModifierGesture<EventFilter<()>, TapGesture>();
  _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_0(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<()>, TapGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<()>, TapGesture>);
  Gesture.onEnded(_:)();
  swift_release();
  return swift_release();
}

BOOL closure #1 in EditMenuModifier.editMenuGesture.getter(uint64_t a1)
{
  return *(unsigned char *)(a1 + 104) == 0;
}

uint64_t closure #2 in EditMenuModifier.editMenuGesture.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  if (*(unsigned char *)(a1 + 17))
  {
    outlined copy of StateOrBinding<Bool>(v2, v1, v3, 1);
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    uint64_t v4 = v2;
    uint64_t v5 = v1;
    uint64_t v6 = v3;
    char v7 = 1;
  }
  else
  {
    if (v1)
    {
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      uint64_t v4 = v2;
      uint64_t v5 = v1;
    }
    else
    {
      uint64_t v4 = *(void *)a1;
      uint64_t v5 = 0;
    }
    uint64_t v6 = v3;
    char v7 = 0;
  }
  return outlined consume of StateOrBinding<Bool>(v4, v5, v6, v7);
}

double static EditMenuModifierCore._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(uint64_t, long long *)@<X2>, unint64_t a4@<X4>, void *a5@<X5>, ValueMetadata **a6@<X8>)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  int v10 = *a1;
  long long v11 = a2[3];
  long long v73 = a2[2];
  long long v74 = v11;
  long long v75 = a2[4];
  int v76 = *((_DWORD *)a2 + 20);
  long long v12 = a2[1];
  long long v71 = *a2;
  long long v72 = v12;
  int v52 = DWORD2(v11);
  uint64_t v51 = v11;
  int v13 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  *(void *)&long long v64 = v51;
  DWORD2(v64) = v52;
  char v14 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v13 & 1) != 0 || (v14)
  {
    uint64_t v47 = a6;
    outlined retain of _ViewInputs((uint64_t)&v71);
    lazy protocol witness table accessor for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v71);
    int v44 = v64;
    UniqueID.init()();
    uint64_t v43 = v64;
    closure #1 in static EditMenuModifierCore._makeView(modifier:inputs:body:)((uint64_t)&v71, v13 & 1, v64, a3);
    LODWORD(v64) = v10;
    type metadata accessor for EditMenuModifierCore();
    LODWORD(v46) = v13;
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_OWORD *)&v59[16] = v74;
    *(_OWORD *)&v59[32] = v75;
    *(_DWORD *)&v59[48] = v76;
    long long v57 = v71;
    long long v58 = v72;
    *(_OWORD *)uint64_t v59 = v73;
    id v17 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v57, 1, (uint64_t)&v64);
    uint64_t v45 = &v40;
    *(void *)&long long v57 = v64;
    DWORD2(v57) = DWORD2(v64);
    *(void *)&long long v58 = v65;
    DWORD2(v58) = DWORD2(v65);
    *(void *)uint64_t v59 = *(void *)v66;
    *(_OWORD *)&v59[8] = *(_OWORD *)&v66[8];
    *(_OWORD *)&v59[24] = *(_OWORD *)&v66[24];
    *(_OWORD *)&v59[40] = *(_OWORD *)&v66[40];
    uint64_t v60 = v67;
    int v61 = v68;
    char v62 = v69;
    int v63 = v70;
    MEMORY[0x1F4188790](v17);
    uint64_t v53 = &type metadata for AllPlatformItemListFlags;
    unint64_t v54 = a4;
    uint64_t v55 = &protocol witness table for AllPlatformItemListFlags;
    uint64_t v56 = a5;
    uint64_t v38 = type metadata accessor for PlatformItemListGenerator();
    uint64_t WitnessTable = swift_getWitnessTable();
    outlined retain of _ViewInputs((uint64_t)&v71);
    type metadata accessor for EventFilter<()>(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v57, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v37, v38, MEMORY[0x1E4FBC248], v18, MEMORY[0x1E4FBC278], v19);
    uint64_t v20 = (void *)v57;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    int v21 = (int)v53;
    int v22 = v10;
    LODWORD(v64) = v10;
    _GraphValue.value.getter();
    uint64_t v45 = a5;
    closure #2 in static EditMenuModifierCore._makeView(modifier:inputs:body:)(1);
    AGGraphCreateOffsetAttribute2();
    uint64_t v23 = (ValueMetadata *)v50;
    if (v46)
    {
      int v42 = v21;
      unint64_t v46 = a4;
      unsigned int v25 = DWORD2(v50);
      unsigned int v24 = HIDWORD(v50);
      long long v64 = v50;
      if ((_ViewOutputs.subscript.getter() & 0x100000000) == 0)
      {
        int v41 = v22;
        LODWORD(v64) = v22;
        _GraphValue.value.getter();
        *(_OWORD *)uint64_t v66 = v73;
        *(_OWORD *)&v66[16] = v74;
        *(_OWORD *)&v66[32] = v75;
        *(_DWORD *)&v66[48] = v76;
        long long v64 = v71;
        long long v65 = v72;
        uint64_t v53 = v23;
        unint64_t v54 = __PAIR64__(v24, v25);
        type metadata accessor for EditMenuResponder();
        uint64_t v26 = swift_allocObject();
        *(void *)(v26 + 308) = 0;
        outlined retain of _ViewInputs((uint64_t)&v71);
        outlined retain of _ViewInputs((uint64_t)&v71);
        swift_bridgeObjectRetain();
        *(void *)(v26 + 308) = AGCreateWeakAttribute();
        *(void *)(v26 + 296) = 0;
        *(_DWORD *)(v26 + 304) = 0;
        swift_retain();
        *(void *)(v26 + 296) = AGCreateWeakAttribute();
        swift_release();
        *(_OWORD *)&v59[16] = v74;
        *(_OWORD *)&v59[32] = v75;
        *(_DWORD *)&v59[48] = v76;
        long long v57 = v71;
        long long v58 = v72;
        *(_OWORD *)uint64_t v59 = v73;
        char v48 = 0;
        uint64_t v49 = v43;
        uint64_t v27 = UIViewSnapshotResponder.init(inputs:space:displayList:)((uint64_t)&v57, &v49);
        uint64_t v28 = v45;
        unint64_t v29 = v46;
        EditMenuResponderFilter.init<A>(modifier:inputs:outputs:responder:)(v27, (uint64_t)&v57);
        long long v64 = v57;
        long long v65 = v58;
        *(void *)uint64_t v66 = *(void *)v59;
        protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
        type metadata accessor for Attribute<(_:)>(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
        lazy protocol witness table accessor for type EditMenuResponderFilter and conformance EditMenuResponderFilter();
        Attribute.init<A>(body:value:flags:update:)();
        outlined release of ContextMenuResponderFilter((uint64_t)&v57);
        LOBYTE(v64) = 0;
        uint64_t v30 = _ViewOutputs.subscript.setter();
        if ((v44 & 1) == 0)
        {
          LODWORD(v64) = v41;
          int v31 = _GraphValue.value.getter();
          *(_OWORD *)uint64_t v66 = v73;
          *(_OWORD *)&v66[16] = v74;
          *(_OWORD *)&v66[32] = v75;
          *(_DWORD *)&v66[48] = v76;
          long long v64 = v71;
          long long v65 = v72;
          int v32 = _ViewInputs.position.getter();
          *(_OWORD *)uint64_t v66 = v73;
          *(_OWORD *)&v66[16] = v74;
          *(_OWORD *)&v66[32] = v75;
          *(_DWORD *)&v66[48] = v76;
          long long v64 = v71;
          long long v65 = v72;
          _ViewInputs.size.getter();
          int v33 = Attribute<A>.origin()();
          *(_OWORD *)uint64_t v66 = v73;
          *(_OWORD *)&v66[16] = v74;
          *(_OWORD *)&v66[32] = v75;
          *(_DWORD *)&v66[48] = v76;
          long long v64 = v71;
          long long v65 = v72;
          uint64_t v34 = _ViewInputs.transform.getter();
          *(void *)&long long v64 = v51;
          DWORD2(v64) = v52;
          MEMORY[0x1F4188790](v34);
          *(void *)&v37[-32] = v29;
          *(void *)&v37[-24] = v28;
          *(_DWORD *)&v37[-16] = v31;
          *(_DWORD *)&v37[-12] = v32;
          *(_DWORD *)&v37[-8] = v33;
          *(_DWORD *)&v37[-4] = v35;
          outlined retain of [Text.Modifier]((uint64_t)&v51);
          PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
          uint64_t v30 = swift_bridgeObjectRelease();
        }
        *(void *)&long long v64 = v51;
        DWORD2(v64) = v52;
        MEMORY[0x1F4188790](v30);
        *(void *)&v37[-16] = &v71;
        outlined retain of [Text.Modifier]((uint64_t)&v51);
        PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
        swift_bridgeObjectRelease();
        uint64_t v23 = (ValueMetadata *)v50;
      }
    }
    uint64_t v36 = v47;
    *uint64_t v47 = v23;
    double result = *((double *)&v50 + 1);
    v36[1] = (ValueMetadata *)*((void *)&v50 + 1);
  }
  else
  {
    *(_OWORD *)uint64_t v66 = v73;
    *(_OWORD *)&v66[16] = v74;
    *(_OWORD *)&v66[32] = v75;
    *(_DWORD *)&v66[48] = v76;
    long long v64 = v71;
    long long v65 = v72;
    ((void (*)(void))a3)();
  }
  return result;
}

uint64_t closure #2 in static EditMenuModifierCore._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for EditMenuModifierCore();
  uint64_t v3 = a1 + *(int *)(v2 + 44);
  v9[2] = v2;
  type metadata accessor for EventFilter<()>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, v5, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v9[5];
}

uint64_t EditMenuResponderFilter.init<A>(modifier:inputs:outputs:responder:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  closure #1 in EditMenuResponderFilter.init<A>(modifier:inputs:outputs:responder:)(1);
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v9 = _ViewOutputs.viewResponders()();
  swift_bridgeObjectRelease();
  int v7 = _ViewInputs.animatedPosition()();
  int v6 = _ViewInputs.transform.getter();
  int v5 = _ViewInputs.animatedSize()();
  int v4 = _ViewInputs.containerPosition.getter();
  swift_getKeyPath();
  int v2 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *(_DWORD *)a2 = OffsetAttribute2;
  *(_DWORD *)(a2 + 4) = v9;
  *(_DWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v4;
  *(_DWORD *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = a1;
  return result;
}

uint64_t implicit closure #2 in static EditMenuModifierCore._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  v6[0] = a1;
  v6[1] = a2;
  uint64_t v8 = type metadata accessor for EditMenuTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<(_:)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v6, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v7, v8, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v5;
}

uint64_t EditMenuTransform.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for EditMenuModifierCore();
  uint64_t Value = AGGraphGetValue();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance EditMenuModifierCore<A>@<D0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(uint64_t, long long *)@<X2>, uint64_t a4@<X4>, ValueMetadata **a5@<X8>)
{
  return static EditMenuModifierCore._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void **)(a4 + 24), a5);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance EditMenuModifierCore<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t (*EditMenuTransform.value.getter(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4))(uint64_t *a1)
{
  uint64_t v26 = a4;
  uint64_t v7 = type metadata accessor for EditMenuModifierCore();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v23 - v9;
  unint64_t v28 = HIDWORD(a2);
  unint64_t v29 = HIDWORD(a1);
  AnchorGeometry.init(position:size:transform:)();
  uint64_t v11 = v30;
  int v27 = v31;
  EditMenuTransform.modifier.getter((uint64_t)v10);
  long long v12 = &v10[*(int *)(v7 + 44)];
  uint64_t v14 = *(void *)v12;
  uint64_t v13 = *((void *)v12 + 1);
  char v15 = v12[16];
  uint64_t v16 = *(void (**)(char *, uint64_t))(v8 + 8);
  swift_retain();
  swift_retain();
  uint64_t v24 = v7;
  unsigned int v25 = v16;
  v16(v10, v7);
  uint64_t v30 = v14;
  uint64_t v31 = v13;
  char v32 = v15;
  type metadata accessor for EventFilter<()>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v33);
  swift_release();
  uint64_t v17 = v26;
  swift_release();
  if (v33 == 1)
  {
    EditMenuTransform.modifier.getter((uint64_t)v10);
    swift_retain();
    v25(v10, v24);
  }
  type metadata accessor for CGRect(0);
  Anchor.Source.init<A>(_:)();
  uint64_t v30 = v11;
  LODWORD(v31) = v27;
  type metadata accessor for Attribute<(_:)>(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBB718]);
  uint64_t v18 = Anchor.Source.prepare(geometry:)();
  swift_release();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a3;
  *(void *)(v19 + 24) = v17;
  int v20 = v29;
  *(_DWORD *)(v19 + 32) = a1;
  *(_DWORD *)(v19 + 36) = v20;
  int v21 = v28;
  *(_DWORD *)(v19 + 40) = a2;
  *(_DWORD *)(v19 + 44) = v21;
  *(void *)(v19 + 48) = v18;
  return partial apply for closure #1 in EditMenuTransform.value.getter;
}

uint64_t closure #1 in EditMenuTransform.value.getter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v5 = type metadata accessor for EditMenuModifierCore();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v19 - v10;
  outlined consume of EditMenuPresentation?(*a1, a1[1], a1[2], a1[3]);
  EditMenuTransform.modifier.getter((uint64_t)v11);
  uint64_t v19 = *((unsigned int *)v11 + 2);
  long long v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v11, v5);
  EditMenuTransform.modifier.getter((uint64_t)v8);
  uint64_t v13 = &v8[*(int *)(v5 + 44)];
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *((void *)v13 + 1);
  uint64_t v16 = v13[16];
  swift_retain();
  swift_retain();
  v12(v8, v5);
  uint64_t v17 = v20;
  *a1 = v19;
  a1[1] = 0;
  a1[2] = v14;
  a1[3] = v15;
  a1[4] = v16;
  a1[5] = v17;
  return swift_retain();
}

uint64_t protocol witness for Rule.value.getter in conformance EditMenuTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  int v4 = EditMenuTransform.value.getter(*v2, v2[1], *(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v6 = v5;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ();
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t closure #1 in EditMenuResponderFilter.init<A>(modifier:inputs:outputs:responder:)(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  v5[2] = type metadata accessor for EditMenuModifierCore();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, (uint64_t)&type metadata for ViewIdentity, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v5[5];
}

uint64_t closure #1 in EditMenuResponder.setPresentationState(to:)()
{
  AGGraphClearUpdate();
  closure #1 in closure #1 in EditMenuResponder.setPresentationState(to:)();

  return AGGraphSetUpdate();
}

uint64_t closure #1 in closure #1 in EditMenuResponder.setPresentationState(to:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_release();
    type metadata accessor for EventFilter<()>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    uint64_t result = AGGraphGetWeakValue();
    if (result)
    {
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      return swift_release();
    }
  }
  return result;
}

Swift::Void __swiftcall EditMenuResponder.extendPrintTree(string:)(Swift::String *string)
{
  v1._countAndFlagsBits = 0x756E654D74696465;
  v1._object = (void *)0xE800000000000000;
  String.append(_:)(v1);
}

uint64_t EditMenuResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for EditMenuResponder()
{
  return type metadata accessor for EditMenuResponder();
}

uint64_t sub_187D16024()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D16158()
{
  return swift_getWitnessTable();
}

void type metadata accessor for ViewInputFlagModifier<ClientHandlesEditMenuTrigger>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<ClientHandlesEditMenuTrigger>)
  {
    lazy protocol witness table accessor for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ClientHandlesEditMenuTrigger>);
    }
  }
}

uint64_t sub_187D16328()
{
  return swift_getWitnessTable();
}

uint64_t destroy for ActiveEditMenu(uint64_t a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for ActiveEditMenu(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void **)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v4;
  id v5 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ActiveEditMenu(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  id v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  id v6 = v5;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ActiveEditMenu(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);

  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t storeEnumTagSinglePayload for ActiveEditMenu(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

uint64_t destroy for EditMenuPresentation()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for EditMenuPresentation(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *type metadata accessor for ClientHandlesEditMenuTrigger()
{
  return &unk_1ED452500;
}

uint64_t type metadata completion function for EditMenuModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for EditMenuModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 24) & (unint64_t)~v7) + *(void *)(v6 + 64) > 0x18)
  {
    uint64_t v10 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    unsigned int v11 = *((unsigned __int8 *)a2 + 17);
    if (v11 >= 2) {
      unsigned int v11 = *(_DWORD *)a2 + 2;
    }
    if (v11 == 1)
    {
      uint64_t v12 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v12;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      swift_retain();
      char v13 = 1;
    }
    else
    {
      char v13 = 0;
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = a2[1];
    }
    swift_retain();
    *(unsigned char *)(v4 + 17) = v13;
    uint64_t v14 = (_DWORD *)((v4 + 21) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v15 = (_DWORD *)(((unint64_t)a2 + 21) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v14 = *v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v14 + v7 + 4) & ~v7, ((unint64_t)v15 + v7 + 4) & ~v7, v5);
  }
  return v4;
}

uint64_t destroy for EditMenuModifier(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 17);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a1 + 2;
  }
  if (v4 == 1) {
    swift_release();
  }
  swift_release();
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (((a1 + 21) & 0xFFFFFFFFFFFFFFFCLL) + *(unsigned __int8 *)(v5 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t initializeWithCopy for EditMenuModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(unsigned __int8 *)(a2 + 17);
  if (v6 >= 2) {
    unsigned int v6 = *(_DWORD *)a2 + 2;
  }
  if (v6 == 1)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    swift_retain();
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
  }
  swift_retain();
  *(unsigned char *)(a1 + 17) = v8;
  uint64_t v9 = (_DWORD *)((a1 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v10 = (_DWORD *)((a2 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v9 = *v10;
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 16))(((unint64_t)v9 + *(unsigned __int8 *)(v11 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v10 + *(unsigned __int8 *)(v11 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t assignWithCopy for EditMenuModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 17);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a1 + 2;
    }
    if (v6 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v7 = *(unsigned __int8 *)(a2 + 17);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)a2 + 2;
    }
    if (v7 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(unsigned char *)(a1 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 17) = 0;
    }
    swift_retain();
  }
  char v8 = (_DWORD *)((a1 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v9 = (_DWORD *)((a2 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  *char v8 = *v9;
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))(((unint64_t)v8 + *(unsigned __int8 *)(v10 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), ((unint64_t)v9 + *(unsigned __int8 *)(v10 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t initializeWithTake for EditMenuModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 17);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(unsigned char *)(a1 + 17) = v5;
  unsigned int v6 = (_DWORD *)((a1 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v7 = (_DWORD *)((a2 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v6 = *v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t assignWithTake for EditMenuModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 17);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a1 + 2;
    }
    if (v6 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v7 = *(unsigned __int8 *)(a2 + 17);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)a2 + 2;
    }
    if (v7 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      char v8 = 1;
    }
    else
    {
      char v8 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(unsigned char *)(a1 + 17) = v8;
  }
  uint64_t v9 = (_DWORD *)((a1 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v10 = (_DWORD *)((a2 + 21) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v9 = *v10;
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 40))(((unint64_t)v9 + *(unsigned __int8 *)(v11 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)v10 + *(unsigned __int8 *)(v11 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for EditMenuModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 24) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((((unint64_t)a1 + 21) & 0xFFFFFFFFFFFFFFFCLL)
      }
                                                                      + v6
                                                                      + 4) & ~v6);
      unsigned int v15 = *((unsigned __int8 *)a1 + 17);
      if (v15 >= 2) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for EditMenuModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 24) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187D17160);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFE)
        {
          unint64_t v18 = (((unint64_t)(a1 + 21) & 0xFFFFFFFFFFFFFFFCLL) + v9 + 4) & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if (a2 > 0xFE)
        {
          *(void *)a1 = 0;
          *((void *)a1 + 1) = 0;
          *((_WORD *)a1 + 8) = 0;
          *(_DWORD *)a1 = a2 - 255;
        }
        else
        {
          a1[17] = -(char)a2;
        }
      }
      return;
  }
}

__n128 protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance EditMenuPresentation.Key(uint64_t *a1, void (*a2)(long long *__return_ptr))
{
  uint64_t v4 = a1[3];
  if (!v4
    || (unsigned __int8 v5 = *((unsigned char *)a1 + 32),
        *(void *)&long long v11 = a1[2],
        *((void *)&v11 + 1) = v4,
        v12.n128_u8[0] = v5,
        type metadata accessor for EventFilter<()>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]), MEMORY[0x18C113DA0](&v15), (v15 & 1) == 0))
  {
    a2(&v11);
    __n128 v9 = v12;
    long long v10 = v11;
    uint64_t v7 = v13;
    uint64_t v8 = v14;
    outlined consume of EditMenuPresentation?(*a1, a1[1], a1[2], a1[3]);
    __n128 result = v9;
    *(_OWORD *)a1 = v10;
    *((__n128 *)a1 + 1) = v9;
    a1[4] = v7;
    a1[5] = v8;
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ActiveEditMenu()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ActiveEditMenu()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance ActiveEditMenuKey@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + 40) = xmmword_18834FC50;
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ProvidesEditMenuInteraction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ProvidesEditMenuInteraction(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type ProvidesEditMenuInteraction and conformance ProvidesEditMenuInteraction);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ClientHandlesEditMenuTrigger(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ProvidesEditMenuInteraction(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ProvidesEditMenuInteraction(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  PropertyList.subscript.getter();
  return v5;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ClientHandlesEditMenuTrigger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ProvidesEditMenuInteraction(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger);
}

_UNKNOWN **base witness table accessor for ViewModifier in SelectionEditMenuModifier<A>()
{
  return &protocol witness table for SelectionEditMenuModifier<A>;
}

unint64_t lazy protocol witness table accessor for type ActiveEditMenu and conformance ActiveEditMenu()
{
  unint64_t result = lazy protocol witness table cache variable for type ActiveEditMenu and conformance ActiveEditMenu;
  if (!lazy protocol witness table cache variable for type ActiveEditMenu and conformance ActiveEditMenu)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActiveEditMenu and conformance ActiveEditMenu);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ClientHandlesEditMenuTrigger()
{
  return &protocol witness table for ClientHandlesEditMenuTrigger;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in EditMenuModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for EditMenuModifierCore()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>>()
{
  if (!lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>>)
  {
    type metadata accessor for _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>();
    _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_0(&lazy protocol witness table cache variable for type _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>> and conformance _EndedGesture<A>, (void (*)(uint64_t))type metadata accessor for _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>);
    unint64_t v0 = type metadata accessor for AddGestureModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>>);
    }
  }
}

void type metadata accessor for _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>()
{
  if (!lazy cache variable for type metadata for _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>)
  {
    type metadata accessor for ModifierGesture<EventFilter<()>, TapGesture>();
    _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_0(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<()>, TapGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<()>, TapGesture>);
    unint64_t v0 = type metadata accessor for _EndedGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EndedGesture<ModifierGesture<EventFilter<()>, TapGesture>>);
    }
  }
}

void type metadata accessor for ModifierGesture<EventFilter<()>, TapGesture>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<()>, TapGesture>)
  {
    type metadata accessor for EventFilter<()>(255, &lazy cache variable for type metadata for EventFilter<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F3F4E8]);
    lazy protocol witness table accessor for type EventFilter<()> and conformance EventFilter<A>();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<()>, TapGesture>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EventFilter<()> and conformance EventFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EventFilter<()> and conformance EventFilter<A>;
  if (!lazy protocol witness table cache variable for type EventFilter<()> and conformance EventFilter<A>)
  {
    type metadata accessor for EventFilter<()>(255, &lazy cache variable for type metadata for EventFilter<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F3F4E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventFilter<()> and conformance EventFilter<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DeferTriggerPredicate and conformance DeferTriggerPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type DeferTriggerPredicate and conformance DeferTriggerPredicate;
  if (!lazy protocol witness table cache variable for type DeferTriggerPredicate and conformance DeferTriggerPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeferTriggerPredicate and conformance DeferTriggerPredicate);
  }
  return result;
}

uint64_t partial apply for closure #1 in EditMenuModifier.body(content:)()
{
  return closure #1 in EditMenuModifier.body(content:)(*(void *)(v0 + 32));
}

uint64_t partial apply for closure #2 in EditMenuModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in EditMenuModifier.body(content:)(a1);
}

uint64_t sub_187D17948()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for EditMenuModifier() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  outlined consume of StateOrBinding<Bool>(*(void *)v3, *(void *)(v3 + 8), *(unsigned __int8 *)(v3 + 16), *(unsigned char *)(v3 + 17));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[12], v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in EditMenuModifier.editMenuGesture.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for EditMenuModifier() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #2 in EditMenuModifier.editMenuGesture.getter(v2);
}

uint64_t sub_187D17AC4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t type metadata accessor for SelectionEditMenuModifier.Child()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for ActiveEditMenuKey()
{
  return &type metadata for ActiveEditMenuKey;
}

uint64_t initializeWithCopy for SelectionEditMenuModifier.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  id v5 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SelectionEditMenuModifier.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for SelectionEditMenuModifier.Child(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  return a1;
}

uint64_t getEnumTagSinglePayload for SelectionEditMenuModifier.Child(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 100)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SelectionEditMenuModifier.Child(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 96) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 100) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 100) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HasEditMenuKey()
{
  return &type metadata for HasEditMenuKey;
}

ValueMetadata *type metadata accessor for EditMenuPresentation.Key()
{
  return &type metadata for EditMenuPresentation.Key;
}

uint64_t type metadata completion function for EditMenuModifierCore()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EditMenuModifierCore(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + 7;
  int v7 = *(_DWORD *)(v4 + 80) & 0x100000;
  uint64_t v8 = *a2;
  *a1 = *a2;
  if (v5 > 7 || v7 != 0 || ((v6 + ((v5 + 12) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 17 > 0x18)
  {
    long long v11 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    long long v11 = a1;
    __n128 v12 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v13 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v12 = *v13;
    uint64_t v14 = ((unint64_t)v12 + v5 + 4) & ~v5;
    uint64_t v15 = ((unint64_t)v13 + v5 + 4) & ~v5;
    unsigned int v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    swift_retain();
    v16(v14, v15, v3);
    unint64_t v17 = (v6 + v14) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = (v6 + v15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v17 = *(void *)v18;
    *(void *)(v17 + 8) = *(void *)(v18 + 8);
    *(unsigned char *)(v17 + 16) = *(unsigned char *)(v18 + 16);
    swift_retain();
  }
  swift_retain();
  return v11;
}

uint64_t destroy for EditMenuModifierCore(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 11;
  swift_release();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(((v3 & 0xFFFFFFFFFFFFFFFCLL)
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 4) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
  swift_release();

  return swift_release();
}

void *initializeWithCopy for EditMenuModifierCore(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 11;
  *a1 = v5;
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  uint64_t v9 = *(void *)(v7 - 8) + 16;
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v7 - 8) + 80);
  uint64_t v11 = ((unint64_t)v6 + v10 + 4) & ~v10;
  unint64_t v12 = (v10 + 4 + (v4 & 0xFFFFFFFFFFFFFFFCLL)) & ~v10;
  swift_retain();
  v8(v11, v12, v7);
  uint64_t v13 = *(void *)(v9 + 48) + 7;
  unint64_t v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for EditMenuModifierCore(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 11;
  *a1 = *a2;
  unint64_t v6 = (unint64_t)a1 + 11;
  swift_retain();
  swift_release();
  *(_DWORD *)(v6 & 0xFFFFFFFFFFFFFFFCLL) = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  unint64_t v10 = (v9 + 4 + (v6 & 0xFFFFFFFFFFFFFFFCLL)) & ~v9;
  unint64_t v11 = (v9 + 4 + (v5 & 0xFFFFFFFFFFFFFFFCLL)) & ~v9;
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 40) + 7;
  unint64_t v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  swift_retain();
  swift_release();
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  return a1;
}

void *initializeWithTake for EditMenuModifierCore(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v5 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)v4 + v8 + 4) & ~v8;
  uint64_t v10 = ((unint64_t)v5 + v8 + 4) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 32) + 7;
  unint64_t v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFF8;
  char v14 = *(unsigned char *)(v13 + 16);
  *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = v14;
  return a1;
}

uint64_t getEnumTagSinglePayload for EditMenuModifierCore(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 12) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 17;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D1850CLL);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 12) & ~v6) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((((unint64_t)(a1 + 11) & 0xFFFFFFFFFFFFFFFCLL)
  }
                                                                  + v6
                                                                  + 4) & ~v6);
  uint64_t v17 = *(void *)a1;
  if (*(void *)a1 >= 0xFFFFFFFFuLL) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void *type metadata accessor for DeferTriggerPredicate()
{
  return &unk_1ED4349C0;
}

uint64_t getEnumTagSinglePayload for EditMenuPresentation.Kind(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for EditMenuPresentation.Kind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = 0;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EditMenuPresentation.Kind()
{
  return &type metadata for EditMenuPresentation.Kind;
}

uint64_t sub_187D1860C()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in EditMenuModifierCore<A>()
{
  return &protocol witness table for EditMenuModifierCore<A>;
}

uint64_t base witness table accessor for _AttributeBody in SelectionEditMenuModifier<A>.Child()
{
  return swift_getWitnessTable();
}

uint64_t specialized SelectionEditMenuModifier.Child.modifier.getter()
{
  return *(void *)AGGraphGetValue();
}

uint64_t specialized static DeferTriggerPredicate.evaluate(inputs:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0
    || (static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0)
  {
    return 1;
  }
  lazy protocol witness table accessor for type ClientHandlesEditMenuTrigger and conformance ClientHandlesEditMenuTrigger();
  PropertyList.subscript.getter();
  return v1;
}

unint64_t lazy protocol witness table accessor for type EditMenuResponderFilter and conformance EditMenuResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type EditMenuResponderFilter and conformance EditMenuResponderFilter;
  if (!lazy protocol witness table cache variable for type EditMenuResponderFilter and conformance EditMenuResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EditMenuResponderFilter and conformance EditMenuResponderFilter);
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in static EditMenuModifierCore._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in static EditMenuModifierCore._makeView(modifier:inputs:body:)(*(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t type metadata accessor for EditMenuTransform()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for EventFilter<()>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed TextSelection) -> (@owned PlatformItemList)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_187D18B20()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SelectionEditMenuModifier.Child.value.getter(uint64_t a1)
{
  return closure #1 in SelectionEditMenuModifier.Child.value.getter(a1, v1 + 32, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void *type metadata accessor for EditMenuResponderFilter()
{
  return &unk_1ED43E868;
}

uint64_t base witness table accessor for _AttributeBody in EditMenuTransform<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D18BB4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EditMenuTransform.value.getter(uint64_t *a1)
{
  return closure #1 in EditMenuTransform.value.getter(a1, v1[4], v1[5], v1[6]);
}

void Gesture.dragRevealsScrollableContent(_:)()
{
}

uint64_t sub_187D18C18()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for ScrollViewDragAutoScrollWriter()
{
  return __swift_instantiateGenericMetadata();
}

unsigned char *storeEnumTagSinglePayload for ScrollViewDragAutoScrollWriter(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D18DA8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

double static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)@<D0>(long long *a1@<X1>, void (*a2)(long long *__return_ptr, long long *)@<X2>, uint64_t a3@<X8>)
{
  long long v4 = a1[3];
  long long v14 = a1[2];
  long long v15 = v4;
  long long v5 = a1[5];
  long long v16 = a1[4];
  long long v17 = v5;
  long long v6 = a1[1];
  long long v12 = *a1;
  long long v13 = v6;
  uint64_t v7 = *((void *)a1 + 12);
  int v8 = *((_DWORD *)a1 + 26);
  long long v20 = *(long long *)((char *)a1 + 108);
  uint64_t v18 = v7;
  int v19 = v8;
  a2(&v21, &v12);
  long long v12 = v21;
  LODWORD(v13) = v22;
  type metadata accessor for _GestureOutputs();
  _GestureOutputs.phase.getter();
  *(void *)&long long v12 = v7;
  DWORD2(v12) = v8;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = *((void *)&v21 + 1);
  int v10 = v22;
  double result = *(double *)&v21;
  *(void *)a3 = v21;
  *(void *)(a3 + 8) = v9;
  *(_DWORD *)(a3 + 16) = v10;
  return result;
}

uint64_t implicit closure #1 in static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a3;
  type metadata accessor for ScrollViewDragAutoScrollWriter();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<Bool>(0, &lazy cache variable for type metadata for _GraphValue<Bool>, MEMORY[0x1E4F3F590]);
  v7[0] = _GraphValue.value.getter();
  v7[1] = a2;
  uint64_t IsActive = type metadata accessor for ScrollViewDragAutoScrollWriter.IsActive();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for _GraphValue<Bool>(0, &lazy cache variable for type metadata for Attribute<Bool>, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v7, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v8, IsActive, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[2];
}

uint64_t closure #1 in implicit closure #1 in static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)(uint64_t a1)
{
  void v6[2] = type metadata accessor for ScrollViewDragAutoScrollWriter();
  uint64_t v2 = MEMORY[0x1E4FBB390];
  uint64_t v3 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0, (uint64_t)v6, v2, MEMORY[0x1E4FBC248], v3, MEMORY[0x1E4FBC278], v4);
  return v6[5];
}

uint64_t ScrollViewDragAutoScrollWriter.IsActive.value.getter()
{
  uint64_t v0 = type metadata accessor for GesturePhase();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v6 - v2;
  char v4 = 0;
  if (*(unsigned char *)AGGraphGetValue() == 1)
  {
    SequenceEvents.phase.getter((uint64_t)v3);
    char v4 = GesturePhase.isActive.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return v4 & 1;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollViewDragAutoScrollWriter<A>.IsActive@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = ScrollViewDragAutoScrollWriter.IsActive.value.getter();
  *a1 = result & 1;
  return result;
}

double protocol witness for static GestureModifier._makeGesture(modifier:inputs:body:) in conformance ScrollViewDragAutoScrollWriter<A>@<D0>(long long *a1@<X1>, void (*a2)(long long *__return_ptr, long long *)@<X2>, uint64_t a3@<X8>)
{
  return static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t partial apply for implicit closure #1 in static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)()
{
  return implicit closure #1 in static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)(*(unsigned int *)(v0 + 24), *(_DWORD *)(v0 + 28), *(void *)(v0 + 16));
}

uint64_t partial apply for closure #1 in implicit closure #1 in static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in implicit closure #1 in static ScrollViewDragAutoScrollWriter._makeGesture(modifier:inputs:body:)(a1);
}

uint64_t type metadata accessor for ScrollViewDragAutoScrollWriter.IsActive()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for _GraphValue<Bool>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4FBB390]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t base witness table accessor for _AttributeBody in ScrollViewDragAutoScrollWriter<A>.IsActive()
{
  return swift_getWitnessTable();
}

uint64_t EnvironmentValues.scrollProperties.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t View.scrollContentPadding(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  char v5 = 1;
  return View.contentMargins(_:_:for:)(a1, *(void *)&a4, 0, &v5, a2, a3);
}

void static ScrollIndicatorOptions.revealsInitially.getter(void *a1@<X8>)
{
  *a1 = 1;
}

unsigned char *protocol witness for SetAlgebra.union(_:) in conformance ScrollEnvironmentProperties.Options@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.intersection(_:) in conformance ScrollEnvironmentProperties.Options@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.symmetricDifference(_:) in conformance ScrollEnvironmentProperties.Options@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance ScrollEnvironmentProperties.Options(unsigned char *a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  int v4 = *v2;
  if ((v4 & v3) != v3) {
    unsigned char *v2 = v4 | v3;
  }
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *protocol witness for SetAlgebra.remove(_:) in conformance ScrollEnvironmentProperties.Options@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  int v5 = v4 & v3;
  if ((v4 & v3) != 0) {
    unsigned char *v2 = v4 & ~(_BYTE)v3;
  }
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *protocol witness for SetAlgebra.update(with:) in conformance ScrollEnvironmentProperties.Options@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  unsigned char *v2 = v4 | v3;
  int v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned char *protocol witness for SetAlgebra.formUnion(_:) in conformance ScrollEnvironmentProperties.Options(unsigned char *result)
{
  *v1 |= *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.formIntersection(_:) in conformance ScrollEnvironmentProperties.Options(unsigned char *result)
{
  *v1 &= *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance ScrollEnvironmentProperties.Options(unsigned char *result)
{
  *v1 ^= *result;
  return result;
}

unsigned char *protocol witness for SetAlgebra.subtracting(_:) in conformance ScrollEnvironmentProperties.Options@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance ScrollEnvironmentProperties.Options(unsigned __int8 *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isDisjoint(with:) in conformance ScrollEnvironmentProperties.Options(unsigned char *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance ScrollEnvironmentProperties.Options(unsigned __int8 *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL protocol witness for SetAlgebra.isEmpty.getter in conformance ScrollEnvironmentProperties.Options()
{
  return *v0 == 0;
}

unsigned char *protocol witness for SetAlgebra.subtract(_:) in conformance ScrollEnvironmentProperties.Options(unsigned char *result)
{
  *v1 &= ~*result;
  return result;
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance ScrollEnvironmentProperties.Options@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance ScrollEnvironmentProperties.Options@<X0>(unsigned char *a1@<X8>)
{
  char v2 = specialized SetAlgebra<>.init(arrayLiteral:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void static ScrollClipDisabledBehavior.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void protocol witness for ViewModifier.body(content:) in conformance TransformScrollIndicators()
{
}

SwiftUI::ScrollIndicatorOptions __swiftcall ScrollIndicatorOptions.init(rawValue:)(SwiftUI::ScrollIndicatorOptions rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

uint64_t ScrollIndicatorOptions.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t View.scrollIndicators(_:options:axes:)(unsigned char *a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *a2;
  v7[0] = *a1;
  uint64_t v8 = v5;
  char v9 = a3;
  return MEMORY[0x18C113660](v7, a4, &type metadata for TransformScrollIndicators, a5);
}

BOOL static HandGestureShortcutPaginationDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void HandGestureShortcutPaginationDirection.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

void *static HandGestureShortcutPaginationDirection.allCases.getter()
{
  return &outlined read-only object #0 of static HandGestureShortcutPaginationDirection.allCases.getter;
}

Swift::Int HandGestureShortcutPaginationDirection.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for static CaseIterable.allCases.getter in conformance HandGestureShortcutPaginationDirection(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance HandGestureShortcutPaginationDirection;
}

void static ScrollInputBehavior.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static ScrollInputBehavior.enabled.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

BOOL static ScrollInputBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void static ScrollInputKind.handGestureShortcut.getter()
{
}

uint64_t static ScrollInputKind.== infix(_:_:)()
{
  return 1;
}

void View.crownScrollingAxis(_:)()
{
}

uint64_t key path setter for EnvironmentValues.scrollProperties : EnvironmentValues(uint64_t a1)
{
  outlined init with copy of ScrollEnvironmentProperties(a1, (uint64_t)v2);
  return EnvironmentValues.scrollProperties.setter((uint64_t)v2);
}

void View.handGestureShortcutPagination(direction:)()
{
}

uint64_t View.scrollInputBehavior(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a3);
}

uint64_t EnvironmentValues.verticalScrollIndicatorVisibility.getter@<X0>(unsigned char *a1@<X8>)
{
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v3 = v5[96];
  uint64_t result = outlined destroy of ScrollEnvironmentProperties((uint64_t)v5);
  *a1 = v3;
  return result;
}

uint64_t EnvironmentValues.verticalScrollIndicatorVisibility.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v6[96] = v2;
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

void (*EnvironmentValues.verticalScrollIndicatorVisibility.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0xE0uLL);
  *a1 = v3;
  v3[26] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v4 = *((unsigned char *)v3 + 96);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v3);
  *((unsigned char *)v3 + 216) = v4;
  return EnvironmentValues.verticalScrollIndicatorVisibility.modify;
}

void EnvironmentValues.verticalScrollIndicatorVisibility.modify(uint64_t a1, char a2)
{
}

uint64_t EnvironmentValues.horizontalScrollIndicatorVisibility.getter@<X0>(unsigned char *a1@<X8>)
{
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v3 = v5[120];
  uint64_t result = outlined destroy of ScrollEnvironmentProperties((uint64_t)v5);
  *a1 = v3;
  return result;
}

uint64_t EnvironmentValues.horizontalScrollIndicatorVisibility.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v6[120] = v2;
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

void (*EnvironmentValues.horizontalScrollIndicatorVisibility.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0xE0uLL);
  *a1 = v3;
  v3[26] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v4 = *((unsigned char *)v3 + 120);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v3);
  *((unsigned char *)v3 + 216) = v4;
  return EnvironmentValues.horizontalScrollIndicatorVisibility.modify;
}

void EnvironmentValues.horizontalScrollIndicatorVisibility.modify(uint64_t a1, char a2)
{
}

uint64_t ScrollIndicatorsFlashModifier.seed.getter()
{
  type metadata accessor for [HandGestureShortcutPaginationDirection](0, &lazy cache variable for type metadata for State<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  return v1;
}

uint64_t ScrollIndicatorsFlashModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v51 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v52 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v45 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v11);
  swift_getWitnessTable();
  uint64_t v42 = type metadata accessor for _ViewModifier_Content();
  type metadata accessor for [HandGestureShortcutPaginationDirection](255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>, (uint64_t)&type metadata for ScrollEnvironmentProperties, MEMORY[0x1E4F41280]);
  uint64_t v44 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v36 = v6;
  uint64_t v47 = type metadata accessor for _ValueActionModifier2();
  uint64_t v48 = type metadata accessor for ModifiedContent();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v49 = v13;
  uint64_t v50 = v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v43 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v46 = (char *)&v35 - v17;
  swift_getKeyPath();
  int v41 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v41((char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v4, a2);
  uint64_t v18 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = (v18 + 32) & ~v18;
  uint64_t v40 = v19 + v10;
  uint64_t v39 = v18 | 7;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v6;
  *(void *)(v20 + 24) = v12;
  uint64_t v37 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  long long v21 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37(v20 + v19, v21, a2);
  uint64_t WitnessTable = swift_getWitnessTable();
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  swift_release();
  long long v59 = v61;
  uint64_t v60 = v62;
  uint64_t v23 = v45;
  uint64_t v24 = v38;
  uint64_t v25 = v36;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v45, v38, v36);
  v41(v21, v24, a2);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = v25;
  *(void *)(v26 + 24) = v12;
  v37(v26 + v19, v21, a2);
  unint64_t v27 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v57 = WitnessTable;
  unint64_t v58 = v27;
  uint64_t v28 = swift_getWitnessTable();
  unint64_t v29 = v43;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v23, v25);
  swift_release();
  swift_release();
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v55 = v28;
  uint64_t v56 = v30;
  uint64_t v53 = swift_getWitnessTable();
  uint64_t v54 = MEMORY[0x1E4F40ED8];
  uint64_t v31 = v49;
  swift_getWitnessTable();
  char v32 = v46;
  static ViewBuilder.buildExpression<A>(_:)(v29);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v50 + 8);
  v33(v29, v31);
  static ViewBuilder.buildExpression<A>(_:)(v32);
  return ((uint64_t (*)(char *, uint64_t))v33)(v32, v31);
}

uint64_t closure #1 in ScrollIndicatorsFlashModifier.body(content:)(uint64_t a1)
{
  type metadata accessor for ScrollIndicatorsFlashModifier();
  uint64_t result = ScrollIndicatorsFlashModifier.seed.getter();
  int v3 = *(_DWORD *)(a1 + 84);
  BOOL v4 = __CFADD__(v3, result);
  int v5 = v3 + result;
  if (v4) {
    __break(1u);
  }
  else {
    *(_DWORD *)(a1 + 84) = v5;
  }
  return result;
}

uint64_t closure #2 in ScrollIndicatorsFlashModifier.body(content:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + *(int *)(type metadata accessor for ScrollIndicatorsFlashModifier() + 36) + 8);
  type metadata accessor for [HandGestureShortcutPaginationDirection](0, &lazy cache variable for type metadata for State<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4F41580]);
  swift_retain();
  uint64_t result = State.wrappedValue.getter();
  if (v2)
  {
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t View.scrollIndicatorsFlash<A>(trigger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ScrollIndicatorsFlashModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v18 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  uint64_t v16 = &v15[*(int *)(v11 + 36)];
  *(_DWORD *)uint64_t v16 = 0;
  *((void *)v16 + 1) = 0;
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for ScrollIndicatorsFlashModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187D1AAC0(uint64_t a1)
{
  outlined init with copy of ScrollEnvironmentProperties(a1, (uint64_t)v2);
  return EnvironmentValues.scrollProperties.setter((uint64_t)v2);
}

uint64_t sub_187D1AAF8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.scrollIndicatorsAlwaysOverlayContent(_:)(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 82);
  if (*(unsigned char *)(v1 + 16) == 1)
  {
    if (*(unsigned char *)(result + 82)) {
      return result;
    }
    char v3 = v2 | 1;
  }
  else
  {
    if ((*(unsigned char *)(result + 82) & 1) == 0) {
      return result;
    }
    char v3 = v2 & 0xFE;
  }
  *(unsigned char *)(result + 82) = v3;
  return result;
}

uint64_t sub_187D1AB34()
{
  return swift_deallocObject();
}

uint64_t EnvironmentValues.isScrollEnabled.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v1 = v3[0];
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v3);
  return v1;
}

uint64_t EnvironmentValues.isScrollEnabled.setter(char a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v6[0] = a1 & 1;
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

void (*EnvironmentValues.isScrollEnabled.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0xE0uLL);
  *a1 = v3;
  v3[26] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v4 = *(unsigned char *)v3;
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v3);
  *((unsigned char *)v3 + 216) = v4;
  return EnvironmentValues.isScrollEnabled.modify;
}

void EnvironmentValues.isScrollEnabled.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  EnvironmentValues.isScrollEnabled.setter(*(unsigned char *)(*(void *)a1 + 216));

  free(v1);
}

BOOL static ScrollClipDisabledBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_187D1AFC4()
{
  return swift_deallocObject();
}

uint64_t sub_187D1AFD4()
{
  return swift_deallocObject();
}

uint64_t View.scrollDismissesKeyboard(_:)(char *a1)
{
  char v1 = *a1;
  swift_getKeyPath();
  *(unsigned char *)(swift_allocObject() + 16) = v1;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();

  return swift_release();
}

uint64_t sub_187D1B09C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.scrollDismissesKeyboard(_:)(uint64_t result)
{
  *(unsigned char *)(result + 3) = *(unsigned char *)(v1 + 16);
  return result;
}

void ScrollDismissesKeyboardMode.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int ScrollDismissesKeyboardMode.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t EnvironmentValues.scrollDismissesKeyboardMode.getter@<X0>(unsigned char *a1@<X8>)
{
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v3 = v5[3];
  uint64_t result = outlined destroy of ScrollEnvironmentProperties((uint64_t)v5);
  *a1 = v3;
  return result;
}

uint64_t EnvironmentValues.scrollDismissesKeyboardMode.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v6[3] = v2;
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

void (*EnvironmentValues.scrollDismissesKeyboardMode.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0xE0uLL);
  *a1 = v3;
  v3[26] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v4 = *((unsigned char *)v3 + 3);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v3);
  *((unsigned char *)v3 + 216) = v4;
  return EnvironmentValues.scrollDismissesKeyboardMode.modify;
}

void EnvironmentValues.scrollDismissesKeyboardMode.modify(uint64_t a1, char a2)
{
}

void protocol witness for ViewModifier.body(content:) in conformance TransformScrollBounceBehavior()
{
}

uint64_t EnvironmentValues.verticalScrollBounceBehavior.getter@<X0>(unsigned char *a1@<X8>)
{
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v3 = v5[113];
  uint64_t result = outlined destroy of ScrollEnvironmentProperties((uint64_t)v5);
  *a1 = v3;
  return result;
}

uint64_t EnvironmentValues.verticalScrollBounceBehavior.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v6[113] = v2;
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

void (*EnvironmentValues.verticalScrollBounceBehavior.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0xE0uLL);
  *a1 = v3;
  v3[26] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v4 = *((unsigned char *)v3 + 113);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v3);
  *((unsigned char *)v3 + 216) = v4;
  return EnvironmentValues.verticalScrollBounceBehavior.modify;
}

void EnvironmentValues.verticalScrollBounceBehavior.modify(uint64_t a1, char a2)
{
}

uint64_t EnvironmentValues.horizontalScrollBounceBehavior.getter@<X0>(unsigned char *a1@<X8>)
{
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v3 = v5[137];
  uint64_t result = outlined destroy of ScrollEnvironmentProperties((uint64_t)v5);
  *a1 = v3;
  return result;
}

uint64_t EnvironmentValues.horizontalScrollBounceBehavior.setter(char *a1)
{
  char v2 = *a1;
  uint64_t v3 = *(void *)(v1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v6[137] = v2;
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

void (*EnvironmentValues.horizontalScrollBounceBehavior.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0xE0uLL);
  *a1 = v3;
  v3[26] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v4 = *((unsigned char *)v3 + 137);
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v3);
  *((unsigned char *)v3 + 216) = v4;
  return EnvironmentValues.horizontalScrollBounceBehavior.modify;
}

void EnvironmentValues.horizontalScrollBounceBehavior.modify(uint64_t a1, char a2)
{
}

void EnvironmentValues.verticalScrollIndicatorVisibility.modify(uint64_t a1, char a2, void (*a3)(char *))
{
  uint64_t v3 = *(void **)a1;
  if (a2)
  {
    char v5 = *(unsigned char *)(*(void *)a1 + 216);
    char v4 = &v5;
  }
  else
  {
    char v6 = *(unsigned char *)(*(void *)a1 + 216);
    char v4 = &v6;
  }
  a3(v4);

  free(v3);
}

uint64_t EnvironmentValues.scrollBehavior.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return outlined init with take of ResolvedScrollBehavior?((uint64_t)&v4, a1);
}

uint64_t View.scrollContentPadding(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4 = 0;
  return View.contentMargins(_:_:for:)(a1, &v4, a2, a3);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance DisableFocusFastScrolling@<X0>(uint64_t *a1@<X8>)
{
  char v3 = *v1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = v3;
  *a1 = KeyPath;
  a1[1] = (uint64_t)partial apply for closure #1 in DisableFocusFastScrolling.body(content:);
  a1[2] = result;
  return result;
}

void View.fastScrollingDisabled(_:)()
{
}

uint64_t View.onScrollToTopGesture(perform:)(uint64_t a1, uint64_t a2)
{
  swift_getKeyPath();
  if (a1)
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = a1;
    *(void *)(v4 + 24) = a2;
    uint64_t v5 = swift_allocObject();
    char v6 = partial apply for closure #1 in UIKitSearchScopeCoordinating<>.onChange(selectedScope:);
    *(void *)(v5 + 16) = partial apply for closure #1 in UIKitSearchScopeCoordinating<>.onChange(selectedScope:);
    *(void *)(v5 + 24) = v4;
    swift_retain();
    uint64_t v7 = _sytIegr_Ieg_TRTA_0;
  }
  else
  {
    uint64_t v7 = 0;
    char v6 = 0;
  }
  outlined copy of AppIntentExecutor?(a1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v6);
  View.environment<A>(_:_:)();
  swift_release();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
}

uint64_t sub_187D1C1D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.onScrollToTopGesture.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.onScrollToTopGesture : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  outlined copy of AppIntentExecutor?(*a1);
  specialized EnvironmentValues.subscript.setter(v1);

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

uint64_t sub_187D1C26C()
{
  swift_release();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions;
  if (!lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions;
  if (!lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions;
  if (!lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions;
  if (!lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollIndicatorOptions and conformance ScrollIndicatorOptions);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [HandGestureShortcutPaginationDirection] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [HandGestureShortcutPaginationDirection] and conformance [A];
  if (!lazy protocol witness table cache variable for type [HandGestureShortcutPaginationDirection] and conformance [A])
  {
    type metadata accessor for [HandGestureShortcutPaginationDirection](255, &lazy cache variable for type metadata for [HandGestureShortcutPaginationDirection], (uint64_t)&type metadata for HandGestureShortcutPaginationDirection, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [HandGestureShortcutPaginationDirection] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollDismissesKeyboardMode and conformance ScrollDismissesKeyboardMode()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollDismissesKeyboardMode and conformance ScrollDismissesKeyboardMode;
  if (!lazy protocol witness table cache variable for type ScrollDismissesKeyboardMode and conformance ScrollDismissesKeyboardMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollDismissesKeyboardMode and conformance ScrollDismissesKeyboardMode);
  }
  return result;
}

void *sub_187D1C4E0@<X0>(unsigned char *a1@<X8>)
{
  return keypath_get_25Tm((void *(*)(uint64_t *__return_ptr))EnvironmentValues.verticalScrollIndicatorVisibility.getter, a1);
}

uint64_t sub_187D1C4F8(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.verticalScrollIndicatorVisibility.setter(&v2);
}

void *sub_187D1C530@<X0>(unsigned char *a1@<X8>)
{
  return keypath_get_25Tm((void *(*)(uint64_t *__return_ptr))EnvironmentValues.horizontalScrollIndicatorVisibility.getter, a1);
}

uint64_t sub_187D1C548(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.horizontalScrollIndicatorVisibility.setter(&v2);
}

uint64_t sub_187D1C580@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isScrollEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187D1C5C0(char *a1)
{
  return EnvironmentValues.isScrollEnabled.setter(*a1);
}

void *sub_187D1C5E8@<X0>(unsigned char *a1@<X8>)
{
  return keypath_get_25Tm((void *(*)(uint64_t *__return_ptr))EnvironmentValues.scrollDismissesKeyboardMode.getter, a1);
}

uint64_t sub_187D1C600(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.scrollDismissesKeyboardMode.setter(&v2);
}

void *sub_187D1C638@<X0>(unsigned char *a1@<X8>)
{
  return keypath_get_25Tm((void *(*)(uint64_t *__return_ptr))EnvironmentValues.verticalScrollBounceBehavior.getter, a1);
}

uint64_t sub_187D1C650(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.verticalScrollBounceBehavior.setter(&v2);
}

void *sub_187D1C688@<X0>(unsigned char *a1@<X8>)
{
  return keypath_get_25Tm((void *(*)(uint64_t *__return_ptr))EnvironmentValues.horizontalScrollBounceBehavior.getter, a1);
}

uint64_t sub_187D1C6A0(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.horizontalScrollBounceBehavior.setter(&v2);
}

ValueMetadata *type metadata accessor for HandGestureShortcutPaginationDirection()
{
  return &type metadata for HandGestureShortcutPaginationDirection;
}

ValueMetadata *type metadata accessor for ScrollInputBehavior()
{
  return &type metadata for ScrollInputBehavior;
}

ValueMetadata *type metadata accessor for ScrollInputKind()
{
  return &type metadata for ScrollInputKind;
}

ValueMetadata *type metadata accessor for ScrollDismissesKeyboardMode()
{
  return &type metadata for ScrollDismissesKeyboardMode;
}

uint64_t sub_187D1C724()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_187D1C738()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D1C7C8(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t sub_187D1C7D0()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D1C864(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA36ScrollIndicatorFlashOnAppearModifier33_333E2209AFE841F0F3215E9AA4F7EA22LLVGAaBHPxAaBHD1__AgA0cK0HPyHCHCTm(a1, (uint64_t)&unk_1ED462430, (void (*)(void))lazy protocol witness table accessor for type ScrollIndicatorFlashOnAppearModifier and conformance ScrollIndicatorFlashOnAppearModifier);
}

uint64_t sub_187D1C884()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_187D1C898()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_187D1C8AC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA36ScrollIndicatorFlashOnAppearModifier33_333E2209AFE841F0F3215E9AA4F7EA22LLVGAaBHPxAaBHD1__AgA0cK0HPyHCHCTm(a1, (uint64_t)&unk_1ED446240, (void (*)(void))lazy protocol witness table accessor for type DisableFocusFastScrolling and conformance DisableFocusFastScrolling);
}

unint64_t lazy protocol witness table accessor for type DisableFocusFastScrolling and conformance DisableFocusFastScrolling()
{
  unint64_t result = lazy protocol witness table cache variable for type DisableFocusFastScrolling and conformance DisableFocusFastScrolling;
  if (!lazy protocol witness table cache variable for type DisableFocusFastScrolling and conformance DisableFocusFastScrolling)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableFocusFastScrolling and conformance DisableFocusFastScrolling);
  }
  return result;
}

uint64_t sub_187D1C920()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?>)
  {
    type metadata accessor for [HandGestureShortcutPaginationDirection](255, &lazy cache variable for type metadata for ScrollToTopGestureAction?, (uint64_t)&type metadata for ScrollToTopGestureAction, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ScrollToTopGestureAction?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void *type metadata accessor for DisableFocusFastScrolling()
{
  return &unk_1ED446240;
}

ValueMetadata *type metadata accessor for ScrollDismissesKeyboardMode.Role()
{
  return &type metadata for ScrollDismissesKeyboardMode.Role;
}

unsigned char *storeEnumTagSinglePayload for ScrollClipDisabledBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D1CB50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollClipDisabledBehavior.Role()
{
  return &type metadata for ScrollClipDisabledBehavior.Role;
}

unsigned char *storeEnumTagSinglePayload for ScrollInputKind.Storage(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        void *result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      void *result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x187D1CC24);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollInputKind.Storage()
{
  return &type metadata for ScrollInputKind.Storage;
}

ValueMetadata *type metadata accessor for ScrollInputBehavior.Storage()
{
  return &type metadata for ScrollInputBehavior.Storage;
}

unsigned char *storeEnumTagSinglePayload for ScrollIndicatorVisibility(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    void *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D1CD38);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 3;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for DisableFocusFastScrolling(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    void *result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D1CE2CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata completion function for ScrollIndicatorsFlashModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ScrollIndicatorsFlashModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_DWORD *)unint64_t v10 = *(_DWORD *)v11;
    *(void *)(v10 + 8) = *(void *)(v11 + 8);
  }
  swift_retain();
  return v4;
}

uint64_t initializeWithCopy for ScrollIndicatorsFlashModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollIndicatorsFlashModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for ScrollIndicatorsFlashModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollIndicatorsFlashModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D1D2ECLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  int v18 = v17 - 1;
  if (v18 < 0) {
    int v18 = -1;
  }
  return (v18 + 1);
}

void storeEnumTagSinglePayload for ScrollIndicatorsFlashModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      unsigned int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187D1D4E8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFE)
        {
          int v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (a2 > 0x7FFFFFFE)
          {
            *int v18 = a2 - 0x7FFFFFFF;
            v18[1] = 0;
          }
          else
          {
            v18[1] = a2;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for ScrollEnvironmentPropertiesKey()
{
  return &type metadata for ScrollEnvironmentPropertiesKey;
}

uint64_t getEnumTagSinglePayload for TransformScrollIndicators(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[17]) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformScrollIndicators(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 3;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TransformScrollBounceBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 254;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D1D674);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in TransformScrollBounceBehavior()
{
  return &protocol witness table for TransformScrollBounceBehavior;
}

_UNKNOWN **base witness table accessor for ViewModifier in TransformScrollIndicators()
{
  return &protocol witness table for TransformScrollIndicators;
}

void protocol witness for ViewModifier.body(content:) in conformance ResetScrollEnvironmentModifier()
{
}

_UNKNOWN **base witness table accessor for ViewModifier in ResetScrollEnvironmentModifier()
{
  return &protocol witness table for ResetScrollEnvironmentModifier;
}

unint64_t lazy protocol witness table accessor for type ScrollIndicatorVisibility.Role and conformance ScrollIndicatorVisibility.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollIndicatorVisibility.Role and conformance ScrollIndicatorVisibility.Role;
  if (!lazy protocol witness table cache variable for type ScrollIndicatorVisibility.Role and conformance ScrollIndicatorVisibility.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollIndicatorVisibility.Role and conformance ScrollIndicatorVisibility.Role);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollInputKind.Storage and conformance ScrollInputKind.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollInputKind.Storage and conformance ScrollInputKind.Storage;
  if (!lazy protocol witness table cache variable for type ScrollInputKind.Storage and conformance ScrollInputKind.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollInputKind.Storage and conformance ScrollInputKind.Storage);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollClipDisabledBehavior.Role and conformance ScrollClipDisabledBehavior.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollClipDisabledBehavior.Role and conformance ScrollClipDisabledBehavior.Role;
  if (!lazy protocol witness table cache variable for type ScrollClipDisabledBehavior.Role and conformance ScrollClipDisabledBehavior.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollClipDisabledBehavior.Role and conformance ScrollClipDisabledBehavior.Role);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollDismissesKeyboardMode.Role and conformance ScrollDismissesKeyboardMode.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollDismissesKeyboardMode.Role and conformance ScrollDismissesKeyboardMode.Role;
  if (!lazy protocol witness table cache variable for type ScrollDismissesKeyboardMode.Role and conformance ScrollDismissesKeyboardMode.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollDismissesKeyboardMode.Role and conformance ScrollDismissesKeyboardMode.Role);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollBounceBehavior.Role and conformance ScrollBounceBehavior.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollBounceBehavior.Role and conformance ScrollBounceBehavior.Role;
  if (!lazy protocol witness table cache variable for type ScrollBounceBehavior.Role and conformance ScrollBounceBehavior.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollBounceBehavior.Role and conformance ScrollBounceBehavior.Role);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in DisableFocusFastScrolling()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ScrollIndicatorsFlashModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

BOOL specialized static ScrollEnvironmentProperties.AxisStorage.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1) && a1[16] == a2[16] && a1[17] == a2[17];
}

BOOL specialized static ScrollIndicatorConfiguration.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1) && a1[16] == a2[16];
}

uint64_t partial apply for closure #1 in ScrollIndicatorsFlashModifier.body(content:)(uint64_t a1)
{
  type metadata accessor for ScrollIndicatorsFlashModifier();

  return closure #1 in ScrollIndicatorsFlashModifier.body(content:)(a1);
}

uint64_t partial apply for closure #2 in ScrollIndicatorsFlashModifier.body(content:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for ScrollIndicatorsFlashModifier() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #2 in ScrollIndicatorsFlashModifier.body(content:)(v2);
}

uint64_t sub_187D1DB0C()
{
  return swift_deallocObject();
}

uint64_t sub_187D1DB1C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DisableFocusFastScrolling.body(content:)(uint64_t result)
{
  if (*(unsigned char *)(v1 + 16)) {
    char v2 = 4;
  }
  else {
    char v2 = 0;
  }
  *(unsigned char *)(result + 82) |= v2;
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ScrollToTopGestureActionKey()
{
  return &type metadata for EnvironmentValues.ScrollToTopGestureActionKey;
}

ValueMetadata *type metadata accessor for ScrollEnvironmentProperties.AxisStorage()
{
  return &type metadata for ScrollEnvironmentProperties.AxisStorage;
}

ValueMetadata *type metadata accessor for ScrollEnvironmentProperties.Options()
{
  return &type metadata for ScrollEnvironmentProperties.Options;
}

uint64_t sub_187D1DB7C()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<DisableFocusFastScrolling>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DisableFocusFastScrolling>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DisableFocusFastScrolling>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<DisableFocusFastScrolling>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>>, &lazy cache variable for type metadata for _ViewModifier_Content<DisableFocusFastScrolling>, (void (*)(void))lazy protocol witness table accessor for type DisableFocusFastScrolling and conformance DisableFocusFastScrolling);
    lazy protocol witness table accessor for type _ViewModifier_Content<DisableFocusFastScrolling> and conformance _ViewModifier_Content<A>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<DisableFocusFastScrolling>, _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<DisableFocusFastScrolling> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<DisableFocusFastScrolling> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<DisableFocusFastScrolling> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<ScrollIndicatorFlashOnAppearModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<DisableFocusFastScrolling>, (void (*)(void))lazy protocol witness table accessor for type DisableFocusFastScrolling and conformance DisableFocusFastScrolling);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<DisableFocusFastScrolling> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options;
  if (!lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options;
  if (!lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options;
  if (!lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options;
  if (!lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollEnvironmentProperties.Options and conformance ScrollEnvironmentProperties.Options);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollIndicatorConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollIndicatorConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollIndicatorConfiguration()
{
  return &type metadata for ScrollIndicatorConfiguration;
}

ValueMetadata *type metadata accessor for ScrollIndicatorStyle()
{
  return &type metadata for ScrollIndicatorStyle;
}

unsigned char *storeEnumTagSinglePayload for HandGestureShortcutPaginationDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D1E110);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollIndicatorStyle.Value()
{
  return &type metadata for ScrollIndicatorStyle.Value;
}

unint64_t lazy protocol witness table accessor for type ScrollIndicatorStyle.Value and conformance ScrollIndicatorStyle.Value()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollIndicatorStyle.Value and conformance ScrollIndicatorStyle.Value;
  if (!lazy protocol witness table cache variable for type ScrollIndicatorStyle.Value and conformance ScrollIndicatorStyle.Value)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollIndicatorStyle.Value and conformance ScrollIndicatorStyle.Value);
  }
  return result;
}

void View.crownScrollingDisabled(_:)()
{
}

Swift::String __swiftcall currentAppName()()
{
  uint64_t v0 = self;
  id v1 = objc_msgSend(v0, sel_mainBundle);
  uint64_t v2 = specialized NSBundle.localizedValue(for:)(0xD000000000000013, 0x80000001883382E0);
  unsigned int v4 = v3;

  if (!v4)
  {
    id v5 = objc_msgSend(v0, sel_mainBundle);
    uint64_t v2 = specialized NSBundle.localizedValue(for:)(0x656C646E75424643, 0xEC000000656D614ELL);
    unsigned int v4 = v6;

    if (!v4)
    {
      id v7 = objc_msgSend(self, sel_processInfo);
      id v8 = objc_msgSend(v7, sel_processName);

      uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unsigned int v4 = v9;
    }
  }
  uint64_t v10 = v2;
  unsigned int v11 = v4;
  result._object = v11;
  result._countAndFlagsBits = v10;
  return result;
}

uint64_t specialized NSBundle.localizedValue(for:)(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = self;
  id v5 = objc_msgSend(v4, sel_mainBundle);
  id v6 = objc_msgSend(v5, sel_localizedInfoDictionary);

  if (!v6)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    goto LABEL_11;
  }
  uint64_t v7 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (!*(void *)(v7 + 16))
  {
    long long v16 = 0u;
    long long v17 = 0u;
LABEL_10:
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  outlined init with copy of Any(*(void *)(v7 + 56) + 32 * v8, (uint64_t)&v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v17 + 1))
  {
LABEL_11:
    outlined destroy of Any?((uint64_t)&v16);
    goto LABEL_12;
  }
  if (swift_dynamicCast()) {
    return v18;
  }
LABEL_12:
  id v11 = objc_msgSend(v4, sel_mainBundle, v16, (void)v17);
  id v12 = objc_msgSend(v11, sel_infoDictionary);

  if (!v12)
  {
    long long v16 = 0u;
    long long v17 = 0u;
LABEL_24:
    outlined destroy of Any?((uint64_t)&v16);
    return 0;
  }
  uint64_t v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v13 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if (v15)
    {
      outlined init with copy of Any(*(void *)(v13 + 56) + 32 * v14, (uint64_t)&v16);
    }
    else
    {
      long long v16 = 0u;
      long long v17 = 0u;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v16 = 0u;
    long long v17 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v17 + 1)) {
    goto LABEL_24;
  }
  if (swift_dynamicCast()) {
    return v18;
  }
  else {
    return 0;
  }
}

uint64_t partial apply for closure #1 in AppGraph.supports(_:)@<X0>(char *a1@<X8>)
{
  return closure #1 in AppGraph.supports(_:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t closure #1 in static RotatingDisclosureIndicator.toggle(_:)()
{
  return swift_release();
}

uint64_t closure #1 in closure #1 in static RotatingDisclosureIndicator.toggle(_:)()
{
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v1);
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance RotatingDisclosureIndicator()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance RotatingDisclosureIndicator@<X0>(uint64_t a1@<X8>)
{
  char v3 = *v1;
  if (v1[1]) {
    double v4 = 1.57079633;
  }
  else {
    double v4 = 0.0;
  }
  if (v1[1]) {
    uint64_t v5 = 0x6465646E61707865;
  }
  else {
    uint64_t v5 = 0x657370616C6C6F63;
  }
  if (v1[1]) {
    uint64_t v6 = 0xE800000000000000;
  }
  else {
    uint64_t v6 = 0xE900000000000064;
  }
  specialized View.accessibility<A>(_:_:isEnabled:)(v5, v6, 0, 1, v3, (uint64_t)v13);
  swift_bridgeObjectRelease();
  char v7 = v13[0];
  uint64_t v8 = v14;
  uint64_t v9 = v15;
  uint64_t result = static UnitPoint.center.getter();
  *(unsigned char *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  *(void *)(a1 + 16) = v9;
  *(double *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v12;
  return result;
}

uint64_t specialized static RotatingDisclosureIndicator.toggle(_:)()
{
  return swift_release();
}

uint64_t partial apply for closure #1 in static RotatingDisclosureIndicator.toggle(_:)()
{
  return closure #1 in static RotatingDisclosureIndicator.toggle(_:)();
}

uint64_t partial apply for closure #1 in closure #1 in static RotatingDisclosureIndicator.toggle(_:)()
{
  return closure #1 in closure #1 in static RotatingDisclosureIndicator.toggle(_:)();
}

ValueMetadata *type metadata accessor for Transaction.DisclosureToggleKey()
{
  return &type metadata for Transaction.DisclosureToggleKey;
}

uint64_t storeEnumTagSinglePayload for RotatingDisclosureIndicator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D1EABCLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RotatingDisclosureIndicator()
{
  return &type metadata for RotatingDisclosureIndicator;
}

uint64_t associated type witness table accessor for View.Body : View in RotatingDisclosureIndicator()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>)
  {
    type metadata accessor for ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>);
    }
  }
}

void type metadata accessor for ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>)
  {
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>);
    }
  }
}

void type metadata accessor for ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>)
  {
    lazy protocol witness table accessor for type DisclosureIndicatorDifferentiatesWithoutColor and conformance DisclosureIndicatorDifferentiatesWithoutColor();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type _DisclosureIndicator and conformance _DisclosureIndicator);
}

unint64_t lazy protocol witness table accessor for type _DisclosureIndicator and conformance _DisclosureIndicator()
{
  unint64_t result = lazy protocol witness table cache variable for type _DisclosureIndicator and conformance _DisclosureIndicator;
  if (!lazy protocol witness table cache variable for type _DisclosureIndicator and conformance _DisclosureIndicator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DisclosureIndicator and conformance _DisclosureIndicator);
  }
  return result;
}

uint64_t sub_187D1ED4C()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>, ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>, ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>, ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>, ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>();
    type metadata accessor for ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_DisclosureIndicator, AccessibilityAttachmentModifier>, _RotationEffect>, ViewInputFlagModifier<DisclosureIndicatorDifferentiatesWithoutColor>>);
    }
  }
}

uint64_t getEnumTagSinglePayload for DividerShape(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for DividerShape(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187D1F1F8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance DividerShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4100E80](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance DividerShape<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4100E58](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for View.body.getter in conformance DividerShape<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4100E70](a1, WitnessTable);
}

uint64_t protocol witness for ShapeStyle.resolve(in:) in conformance PlainDividerShapeStyle@<X0>(long long *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = specialized PlainDividerShapeStyle.resolve(in:)(a1);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

uint64_t protocol witness for ColorProvider.staticColor.getter in conformance PlainDividerShapeStyle()
{
  return MEMORY[0x1F40FDDD0]();
}

uint64_t associated type witness table accessor for ShapeStyle.Resolved : ShapeStyle in PlainDividerShapeStyle()
{
  return MEMORY[0x1E4F414B0];
}

uint64_t TableColumnForEach.IDGenerator.makeID(data:index:offset:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v15 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  v9.n128_f64[0] = MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v11 = (char *)&v14 - v10;
  if (a2)
  {
    swift_retain();
    unsigned int v12 = (void (*)(void *, void))dispatch thunk of Collection.subscript.read();
    (*(void (**)(char *))(v8 + 16))(v11);
    v12(v16, 0);
    swift_getAtKeyPath();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, AssociatedTypeWitness);
  }
  else
  {
    uint64_t result = v15;
    v16[0] = a1;
    if (*(void *)(*(void *)(a3 - 8) + 64) == 8) {
      return (*(uint64_t (**)(uint64_t, void *, uint64_t, __n128))(*(void *)(a3 - 8) + 16))(v15, v16, a3, v9);
    }
    else {
      __break(1u);
    }
  }
  return result;
}

uint64_t TableColumnForEach.data.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t TableColumnForEach.data.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*TableColumnForEach.data.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t TableColumnForEach.content.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 84));
  swift_retain();
  return v2;
}

uint64_t TableColumnForEach.content.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = (void *)(v3 + *(int *)(a3 + 84));
  uint64_t result = swift_release();
  *int v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*TableColumnForEach.content.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t TableColumnForEach.init<>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  return TableColumnForEach.init(_:id:content:)(a1, KeyPath, a2, a3, a4, a5);
}

uint64_t key path getter for Identifiable.id : <A, B, C, D, E>A.Element()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t sub_187D1F850()
{
  return 64;
}

__n128 sub_187D1F85C(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t TableColumnForEach.init(_:id:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a6, a1, a5);
  uint64_t result = type metadata accessor for TableColumnForEach();
  *(void *)(a6 + *(int *)(result + 88)) = a2;
  int v11 = (void *)(a6 + *(int *)(result + 84));
  void *v11 = a3;
  v11[1] = a4;
  return result;
}

__n128 TableColumnForEach.init<>(_:content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  v24[0] = a1;
  v24[1] = a2;
  long long v16 = (void *)swift_allocObject();
  void v16[2] = a5;
  v16[3] = a6;
  void v16[4] = a7;
  v16[5] = a8;
  v16[6] = a3;
  v16[7] = a4;
  type metadata accessor for Range<Int>();
  uint64_t v18 = v17;
  unint64_t v19 = lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  (*(void (**)(_OWORD *, void *, uint64_t))(*(void *)(v18 - 8) + 32))(v25, v24, v18);
  uint64_t v27 = v18;
  uint64_t v28 = MEMORY[0x1E4FBB550];
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v31 = a7;
  unint64_t v32 = v19;
  uint64_t v33 = MEMORY[0x1E4FBB560];
  uint64_t v34 = a8;
  uint64_t v20 = type metadata accessor for TableColumnForEach();
  *(void *)((char *)v25 + *(int *)(v20 + 88)) = 0;
  long long v21 = (void *)((char *)v25 + *(int *)(v20 + 84));
  *long long v21 = partial apply for thunk for @escaping @callee_guaranteed (@unowned Int) -> (@out D);
  v21[1] = v16;
  uint64_t v22 = v26;
  __n128 result = (__n128)v25[1];
  *(_OWORD *)a9 = v25[0];
  *(__n128 *)(a9 + 16) = result;
  *(void *)(a9 + 32) = v22;
  return result;
}

uint64_t sub_187D1FAB8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t static TableColumnForEach._makeContent(content:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, _DWORD *a10, uint64_t a11)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  int v33 = *a1;
  uint64_t v13 = *(void *)a2;
  int v14 = *(_DWORD *)(a2 + 8);
  uint64_t v15 = *(void *)(a2 + 16);
  uint64_t v17 = *(void *)(a2 + 40);
  long long v16 = *(_DWORD **)(a2 + 48);
  int v18 = *(_DWORD *)(a2 + 80);
  HIDWORD(v49) = HIDWORD(a4);
  uint64_t v50 = a7;
  *(void *)&long long v51 = a8;
  *((void *)&v51 + 1) = a10;
  uint64_t v52 = a11;
  type metadata accessor for TableColumnForEachState();
  uint64_t v48 = v13;
  LODWORD(v49) = v14;
  long long v51 = *(_OWORD *)(a2 + 24);
  uint64_t v50 = v15;
  uint64_t v52 = v17;
  uint64_t v53 = v16;
  uint64_t v34 = v16;
  long long v54 = *(_OWORD *)(a2 + 56);
  int v35 = v54;
  uint64_t v55 = *(void *)(a2 + 72);
  int v56 = v18;
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v19 = TableColumnForEachState.init(inputs:)(&v48);
  swift_retain();
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  *(void *)&long long v51 = a6;
  *((void *)&v51 + 1) = a7;
  uint64_t v52 = a8;
  uint64_t v53 = a10;
  *(void *)&long long v54 = a11;
  type metadata accessor for TableColumnForEach();
  type metadata accessor for _GraphValue();
  uint64_t v38 = v19;
  int v39 = _GraphValue.value.getter();
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v50 = a7;
  *(void *)&long long v51 = a8;
  *((void *)&v51 + 1) = a10;
  uint64_t v52 = a11;
  uint64_t v45 = type metadata accessor for TableColumnForEachState.Info();
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v50 = a7;
  *(void *)&long long v51 = a8;
  *((void *)&v51 + 1) = a10;
  uint64_t v52 = a11;
  uint64_t v46 = type metadata accessor for TableColumnForEachState.Info.Init();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = type metadata accessor for Attribute();
  uint64_t v21 = MEMORY[0x1E4FBC278];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v38, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v44, v46, MEMORY[0x1E4FBC248], v20, MEMORY[0x1E4FBC278], v22);
  swift_release();
  v19[28] = v48;
  *((unsigned char *)v19 + 116) = 0;
  LODWORD(v48) = v33;
  swift_retain();
  int v23 = _GraphValue.value.getter();
  uint64_t v38 = v19;
  int v39 = v23;
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v50 = a5;
  *(void *)&long long v51 = a6;
  *((void *)&v51 + 1) = a7;
  uint64_t v52 = a8;
  uint64_t v53 = a10;
  *(void *)&long long v54 = a11;
  uint64_t List = type metadata accessor for TableColumnForEach.MakeList();
  uint64_t v42 = List;
  uint64_t v43 = swift_getWitnessTable();
  type metadata accessor for Attribute<TableColumnList>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v38, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v41, List, MEMORY[0x1E4FBC248], v25, v21, v26);
  swift_release();
  LODWORD(List) = v48;
  v19[30] = v48;
  *((unsigned char *)v19 + 124) = 0;
  PreferencesOutputs.init()();
  uint64_t v38 = v34;
  int v39 = v35;
  int v40 = List;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  int v28 = v49;
  *(void *)a9 = v48;
  *(_DWORD *)(a9 + 8) = v28;
  return result;
}

uint64_t type metadata accessor for TableColumnForEachState()
{
  return swift_getGenericMetadata();
}

id TableColumnForEachState.__allocating_init(inputs:)(uint64_t *a1)
{
  return TableColumnForEachState.init(inputs:)(a1);
}

uint64_t TableColumnForEach.MakeList.forEach.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TableColumnForEach();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t TableColumnForEach.MakeList.value.getter@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v28 = a5;
  uint64_t v29 = a8;
  int v30 = a2;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  uint64_t v36 = a8;
  uint64_t v24 = a7;
  uint64_t v25 = a10;
  uint64_t v37 = a10;
  uint64_t v38 = a11;
  uint64_t v26 = a11;
  uint64_t v27 = a4;
  uint64_t v15 = type metadata accessor for TableColumnForEach();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  int v18 = (char *)&v23 - v17;
  uint64_t v19 = v27;
  uint64_t v20 = v28;
  uint64_t v21 = v29;
  TableColumnForEach.MakeList.forEach.getter((uint64_t)&v23 - v17);
  TableColumnForEachState.update(forEach:)((uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  LODWORD(v16) = *(_DWORD *)(a1 + *(void *)(*(void *)a1 + 184));
  uint64_t v31 = a3;
  uint64_t v32 = v19;
  uint64_t v33 = v20;
  uint64_t v34 = a6;
  uint64_t v35 = v24;
  uint64_t v36 = v21;
  uint64_t v37 = v25;
  uint64_t v38 = v26;
  *(void *)(a9 + 24) = type metadata accessor for TableColumnForEach.DynamicTableColumnList();
  *(void *)(a9 + 32) = &protocol witness table for TableColumnForEach<A, B, C, D, E>.DynamicTableColumnList;
  *(void *)a9 = a1;
  *(_DWORD *)(a9 + 8) = v16;
  return swift_retain();
}

uint64_t protocol witness for Rule.value.getter in conformance TableColumnForEach<A, B, C, D, E>.MakeList@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return TableColumnForEach.MakeList.value.getter(*(void *)v2, *(_DWORD *)(v2 + 8), a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a2, a1[8], a1[9]);
}

uint64_t TableColumnForEach.DynamicTableColumnList.visitColumns<A>(applying:from:)(uint64_t a1, uint64_t *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void v15[2] = a7;
  v15[3] = a8;
  void v15[4] = a10;
  v15[5] = a14;
  void v15[6] = a3;
  int v16 = a4;
  uint64_t v17 = a1;
  return TableColumnForEachState.forEachItem(from:do:)(a2, (uint64_t (*)(uint64_t *, uint64_t))partial apply for closure #1 in TableColumnForEach.DynamicTableColumnList.visitColumns<A>(applying:from:), (uint64_t)v15) & 1;
}

uint64_t closure #1 in TableColumnForEach.DynamicTableColumnList.visitColumns<A>(applying:from:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(unsigned char *)(a3 + 124) == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = result;
    type metadata accessor for TableColumnList();
    Inputuint64_t Value = AGGraphGetInputValue();
    outlined init with copy of TableColumnList(InputValue, (uint64_t)v15);
    uint64_t v13 = v16;
    uint64_t v14 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    LOBYTE(a8) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 16))(a5, v11, a8, a9, v13, v14);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
    return a8 & 1;
  }
  return result;
}

uint64_t TableColumnForEach.DynamicTableColumnList.count.getter(uint64_t a1)
{
  return TableColumnForEachState.count()(a1);
}

uint64_t TableColumnForEachState.count()(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 80);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  int v6 = (char *)&v26 - v5;
  if (!AGSubgraphIsValid()) {
    return 0;
  }
  uint64_t v7 = TableColumnForEachState.fetchColumnsPerElement()();
  if (v8)
  {
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    MEMORY[0x1F4188790](v7);
    *((void *)&v26 - 2) = &v35;
    *((void *)&v26 - 1) = v1;
    TableColumnForEachState.forEachItem(from:do:)(&v36, (uint64_t (*)(uint64_t *, uint64_t))partial apply for closure #1 in TableColumnForEachState.count(), (uint64_t)(&v26 - 2));
    uint64_t v19 = (uint64_t)v1 + *(void *)(*v1 + 160);
    swift_beginAccess();
    uint64_t v20 = *(void *)(v2 + 120);
    uint64_t v22 = *(void *)(v2 + 88);
    uint64_t v21 = *(void *)(v2 + 96);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v24 = swift_getAssociatedTypeWitness();
    uint64_t v28 = v3;
    uint64_t v29 = v22;
    uint64_t v30 = AssociatedTypeWitness;
    uint64_t v31 = v24;
    uint64_t v32 = v21;
    long long v27 = *(_OWORD *)(v2 + 104);
    long long v33 = v27;
    uint64_t v34 = v20;
    uint64_t v25 = type metadata accessor for TableColumnForEach();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v19, 1, v25);
    if (result != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v19, v3);
      uint64_t v18 = dispatch thunk of Collection.count.getter();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      return v18;
    }
  }
  else
  {
    *(void *)&long long v27 = v7;
    uint64_t v9 = (uint64_t)v1 + *(void *)(*v1 + 160);
    swift_beginAccess();
    uint64_t v10 = *(void *)(v2 + 120);
    uint64_t v11 = *(void *)(v2 + 88);
    uint64_t v12 = *(void *)(v2 + 96);
    uint64_t v13 = swift_getAssociatedTypeWitness();
    uint64_t v14 = swift_getAssociatedTypeWitness();
    uint64_t v28 = v3;
    uint64_t v29 = v11;
    uint64_t v30 = v13;
    uint64_t v31 = v14;
    uint64_t v32 = v12;
    long long v26 = *(_OWORD *)(v2 + 104);
    long long v33 = v26;
    uint64_t v34 = v10;
    uint64_t v15 = type metadata accessor for TableColumnForEach();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v9, 1, v15);
    if (result != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v9, v3);
      uint64_t v17 = dispatch thunk of Collection.count.getter();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      uint64_t v18 = v17 * v27;
      if ((unsigned __int128)(v17 * (__int128)(uint64_t)v27) >> 64 == (v17 * (uint64_t)v27) >> 63) {
        return v18;
      }
      __break(1u);
      return 0;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t TableColumnForEachState.fetchColumnsPerElement()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)v0;
  uint64_t v3 = *(void **)v0;
  uint64_t v4 = *(void *)(*(void *)v0 + 104);
  uint64_t v5 = *(void *)(*(void *)v0 + 80);
  uint64_t v33 = *(void *)(*(void *)(v4 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v32 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v30 = (char *)&v27 - v7;
  uint64_t v34 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = (unsigned char *)(v1 + v2[21]);
  if (v11[8] != 1 || *(void *)v11 != 0) {
    goto LABEL_10;
  }
  uint64_t v13 = (uint64_t (*)(void, void, void))v3[14];
  uint64_t v14 = v3[15];
  uint64_t v15 = v3[12];
  uint64_t v28 = v3[11];
  uint64_t v29 = v13;
  uint64_t v16 = v1 + v3[20];
  swift_beginAccess();
  uint64_t v17 = swift_getAssociatedTypeWitness();
  uint64_t v18 = swift_getAssociatedTypeWitness();
  uint64_t v35 = v5;
  uint64_t v36 = v28;
  uint64_t v37 = v17;
  uint64_t v38 = v18;
  uint64_t v39 = v15;
  uint64_t v40 = v4;
  int v41 = v29;
  uint64_t v42 = v14;
  uint64_t v19 = type metadata accessor for TableColumnForEach();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(void, void, void))(v20 + 48);
  uint64_t v28 = v20 + 48;
  uint64_t v29 = v21;
  uint64_t result = v21(v16, 1, v19);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v23 = v34;
  long long v27 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
  v27(v10, v16, v5);
  char v24 = dispatch thunk of Collection.isEmpty.getter();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v34 = v23 + 8;
  v25(v10, v5);
  if (v24) {
    goto LABEL_10;
  }
  uint64_t result = v29(v16, 1, v19);
  if (result == 1)
  {
LABEL_15:
    __break(1u);
    return result;
  }
  v27(v10, v16, v5);
  uint64_t v26 = (uint64_t)v30;
  dispatch thunk of Collection.startIndex.getter();
  v25(v10, v5);
  TableColumnForEachState.item(at:offset:)(v26, 0);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v26, v32);
LABEL_10:
  if (v11[8]) {
    return 0;
  }
  else {
    return *(void *)v11;
  }
}

uint64_t protocol witness for TableColumnList.count.getter in conformance TableColumnForEach<A, B, C, D, E>.DynamicTableColumnList()
{
  return TableColumnForEach.DynamicTableColumnList.count.getter(*v0);
}

uint64_t protocol witness for TableColumnList.visitColumns<A>(applying:from:) in conformance TableColumnForEach<A, B, C, D, E>.DynamicTableColumnList(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  return TableColumnForEach.DynamicTableColumnList.visitColumns<A>(applying:from:)(a1, a2, *(void *)v5, *(_DWORD *)(v5 + 8), a5[2], a5[3], a5[4], a5[5], a5[6], a3, a5[7], a5[8], a5[9], a4) & 1;
}

uint64_t protocol witness for static TableColumnContent._makeContent(content:inputs:) in conformance TableColumnForEach<A, B, C, D, E>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static TableColumnForEach._makeContent(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a3 + 32), *(void *)(a3 + 40), *(void *)(a3 + 48), *(void *)(a3 + 56), a4, *(_DWORD **)(a3 + 64), *(void *)(a3 + 72));
}

uint64_t static TableColumnForEachState.ElementCount.== infix(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  BOOL v5 = (a4 & 1) == 0 && a1 == a3;
  unsigned int v6 = a4 & 1;
  if (a3) {
    int v7 = a4 & 1;
  }
  else {
    int v7 = 0;
  }
  if (a3) {
    unsigned int v6 = 0;
  }
  if (a1) {
    unsigned int v6 = v7;
  }
  if (a2) {
    return v6;
  }
  else {
    return v5;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TableColumnForEachState<A, B, C>.ElementCount(uint64_t a1, uint64_t a2)
{
  return static TableColumnForEachState.ElementCount.== infix(_:_:)(*(void *)a1, *(unsigned char *)(a1 + 8), *(void *)a2, *(unsigned char *)(a2 + 8)) & 1;
}

id TableColumnForEachState.init(inputs:)(uint64_t *a1)
{
  uint64_t v15 = *a1;
  int v14 = *((_DWORD *)a1 + 2);
  uint64_t v13 = a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  long long v16 = *(_OWORD *)(a1 + 5);
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[9];
  int v12 = *((_DWORD *)a1 + 20);
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    *(void *)(v1 + 104) = result;
    *(_DWORD *)(v1 + 112) = 0;
    *(unsigned char *)(v1 + 116) = 1;
    *(_DWORD *)(v1 + 120) = 0;
    *(unsigned char *)(v1 + 124) = 1;
    uint64_t v8 = v1 + *(void *)(*(void *)v1 + 160);
    swift_getAssociatedTypeWitness();
    swift_getAssociatedTypeWitness();
    uint64_t v9 = type metadata accessor for TableColumnForEach();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
    uint64_t v10 = v1 + *(void *)(*(void *)v1 + 168);
    *(void *)uint64_t v10 = 0;
    *(unsigned char *)(v10 + 8) = 1;
    uint64_t v11 = *(void *)(*(void *)v1 + 176);
    type metadata accessor for TableColumnForEachState.Item();
    *(void *)(v1 + v11) = Dictionary.init()();
    *(_DWORD *)(v1 + *(void *)(*(void *)v1 + 184)) = 0;
    *(void *)(v1 + 16) = v15;
    *(_DWORD *)(v1 + 24) = v14;
    *(void *)(v1 + 32) = v13;
    *(void *)(v1 + 40) = v2;
    *(void *)(v1 + 48) = v3;
    *(_OWORD *)(v1 + 56) = v16;
    *(void *)(v1 + 72) = v4;
    *(void *)(v1 + 80) = v5;
    *(void *)(v1 + 88) = v6;
    *(_DWORD *)(v1 + 96) = v12;
    return (id)v1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t TableColumnForEachState.eraseItem(_:)(uint64_t a1)
{
  *(unsigned char *)(a1 + *(void *)(*(void *)a1 + 192)) = 1;
  return TableColumnForEachState.Item.release()();
}

uint64_t TableColumnForEachState.item(at:offset:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v99 = a2;
  uint64_t v97 = a1;
  uint64_t v4 = (void *)*v2;
  uint64_t v101 = (void *)v4[13];
  uint64_t v5 = v4[10];
  uint64_t v81 = *(void *)(v101[1] + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v89 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v86 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v80 = (char *)&v79 - v8;
  uint64_t v93 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v91 = (char *)&v79 - v10;
  uint64_t v11 = v4[11];
  uint64_t v95 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v82 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v88 = (uint64_t)&v79 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v96 = (uint64_t)&v79 - v17;
  uint64_t v18 = &v3[v4[20]];
  swift_beginAccess();
  uint64_t v19 = (void *)v4[15];
  uint64_t v20 = v4[12];
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v22 = swift_getAssociatedTypeWitness();
  uint64_t v23 = v4[14];
  uint64_t v102 = v5;
  uint64_t v103 = v11;
  uint64_t v98 = v11;
  uint64_t v92 = v21;
  uint64_t v104 = v21;
  *(void *)&long long v105 = v22;
  uint64_t v94 = v20;
  *((void *)&v105 + 1) = v20;
  uint64_t v106 = v101;
  uint64_t v107 = v23;
  *(void *)&long long v108 = v19;
  uint64_t v100 = v19;
  uint64_t v24 = type metadata accessor for TableColumnForEach();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v85 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v25 + 48);
  uint64_t v84 = v25 + 48;
  uint64_t result = v85(v18, 1, v24);
  if (result == 1)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v87 = v24;
  uint64_t v27 = *(void *)&v18[*(int *)(v24 + 88)];
  uint64_t v28 = v93;
  uint64_t v29 = *(void (**)(char *, unsigned char *, uint64_t))(v93 + 16);
  uint64_t v30 = v91;
  uint64_t v83 = v18;
  v29(v91, v18, v5);
  swift_retain();
  uint64_t v31 = v94;
  uint64_t v32 = v96;
  uint64_t v33 = v98;
  TableColumnForEach.IDGenerator.makeID(data:index:offset:)(v99, v27, v98, v96);
  swift_release();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v5);
  uint64_t v34 = v23;
  uint64_t v35 = &v3[*(void *)(*(void *)v3 + 176)];
  swift_beginAccess();
  uint64_t v36 = *v35;
  uint64_t v93 = v5;
  uint64_t v102 = v5;
  uint64_t v103 = v33;
  uint64_t v104 = v31;
  *(void *)&long long v105 = v101;
  *((void *)&v105 + 1) = v34;
  uint64_t v106 = v100;
  uint64_t v37 = type metadata accessor for TableColumnForEachState.Item();
  MEMORY[0x18C115450](&v111, v32, v36, v33, v37, v34);
  uint64_t v38 = v111;
  if (v111)
  {
    swift_endAccess();
    uint64_t v39 = (void *)*v38;
    if (*((unsigned char *)v38 + *(void *)(*v38 + 192)) == 1)
    {
      TableColumnForEachState.uneraseItem(_:)((uint64_t)v38);
      uint64_t v39 = (void *)*v38;
    }
    uint64_t v40 = v39[22];
    uint64_t v41 = *(void *)(*(void *)v3 + 184);
    uint64_t v42 = v99;
    if (*(_DWORD *)((char *)v38 + v40) == *(_DWORD *)&v3[v41])
    {
      uint64_t v43 = v39[25];
      if ((*((unsigned char *)v38 + v43) & 1) == 0)
      {
        uint64_t v44 = (char *)v38 + v39[20];
        swift_beginAccess();
        uint64_t v45 = v89;
        uint64_t v46 = v80;
        uint64_t v47 = AssociatedTypeWitness;
        (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v80, v44, AssociatedTypeWitness);
        swift_getAssociatedConformanceWitness();
        LOBYTE(v44) = dispatch thunk of static Equatable.== infix(_:_:)();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v47);
        if ((v44 & 1) == 0)
        {
          *((unsigned char *)v38 + v43) = 1;
          uint64_t v112 = 0;
          unint64_t v113 = 0xE000000000000000;
          _StringGuts.grow(_:)(92);
          v48._countAndFlagsBits = _typeName(_:qualified:)();
          String.append(_:)(v48);
          swift_bridgeObjectRelease();
          v49._countAndFlagsBits = 0x444920656874203ALL;
          v49._object = (void *)0xE900000000000020;
          String.append(_:)(v49);
          DefaultStringInterpolation.appendInterpolation<A>(_:)();
          v50._object = (void *)0x80000001883384A0;
          v50._countAndFlagsBits = 0xD00000000000004FLL;
          String.append(_:)(v50);
          MEMORY[0x18C112B90](v112, v113);
          swift_bridgeObjectRelease();
        }
      }
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v32, v33);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v32, v33);
      uint64_t v78 = (char *)v38 + *(void *)(*v38 + 160);
      swift_beginAccess();
      (*(void (**)(char *, uint64_t, uint64_t))(v89 + 24))(v78, v97, AssociatedTypeWitness);
      swift_endAccess();
      *(uint64_t *)((char *)v38 + *(void *)(*v38 + 168)) = v42;
      *(_DWORD *)((char *)v38 + v40) = *(_DWORD *)&v3[v41];
    }
    return (uint64_t)v38;
  }
  uint64_t v92 = v37;
  uint64_t v93 = v34;
  uint64_t v101 = v35;
  long long v51 = v83;
  swift_endAccess();
  uint64_t result = (uint64_t)(id)AGSubgraphGetGraph();
  if (v3[124] == 1) {
    goto LABEL_22;
  }
  uint64_t v52 = (void *)result;
  uint64_t v53 = (uint64_t)v3;
  long long v54 = (void *)AGSubgraphCreate2();

  AGSubgraphAddChild();
  AGGraphClearUpdate();
  id v55 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in TableColumnForEachState.item(at:offset:)(v53, v32, &v112);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  uint64_t v56 = v112;
  int v57 = v113;
  unint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16);
  v58(v88, v32, v98);
  uint64_t v102 = v56;
  LODWORD(v103) = v57;
  uint64_t result = PreferencesOutputs.subscript.getter();
  uint64_t v59 = v97;
  if ((result & 0x100000000) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  int v60 = result;
  swift_bridgeObjectRelease();
  uint64_t v61 = (uint64_t)v86;
  (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v86, v59, AssociatedTypeWitness);
  uint64_t v62 = *(void *)v53;
  uint64_t v63 = v87;
  uint64_t result = v85(v51, 1, v87);
  if (result != 1)
  {
    int v64 = *(_DWORD *)(v53 + *(void *)(v62 + 184));
    char v65 = *(void *)&v51[*(int *)(v63 + 88)] == 0;
    swift_allocObject();
    uint64_t v38 = specialized TableColumnForEachState.Item.init(id:columns:subgraph:index:offset:seed:state:isConstant:)(v88, v60, (uint64_t)v54, v61, v99, v64, v53, v65);
    uint64_t v66 = v98;
    v58((uint64_t)v82, v96, v98);
    uint64_t v111 = v38;
    swift_beginAccess();
    type metadata accessor for Dictionary();
    id v67 = v54;
    swift_retain();
    Dictionary.subscript.setter();
    swift_endAccess();
    uint64_t v68 = v53 + *(void *)(*(void *)v53 + 168);
    if (*(unsigned char *)(v68 + 8) != 1 || *(void *)v68)
    {

      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v96, v66);
    }
    else
    {
      uint64_t v101 = v67;
      int v69 = *(_DWORD *)(v53 + 24);
      uint64_t v70 = *(void *)(v53 + 32);
      long long v71 = *(void **)(v53 + 56);
      uint64_t v72 = *(void *)(v53 + 64);
      int v73 = *(_DWORD *)(v53 + 96);
      uint64_t v102 = *(void *)(v53 + 16);
      LODWORD(v103) = v69;
      uint64_t v104 = v70;
      long long v105 = *(_OWORD *)(v53 + 40);
      uint64_t v106 = v71;
      uint64_t v107 = v72;
      long long v108 = *(_OWORD *)(v53 + 72);
      uint64_t v109 = *(void *)(v53 + 88);
      int v110 = v73;
      long long v74 = (uint64_t (*)(uint64_t *))v100[9];
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v75 = v74(&v102);
      char v77 = v76;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v96, v98);
      if (v77)
      {
        *(void *)uint64_t v68 = 1;
        *(unsigned char *)(v68 + 8) = 1;
      }
      else
      {
        *(void *)uint64_t v68 = v75;
        *(unsigned char *)(v68 + 8) = 0;
      }
    }
    return (uint64_t)v38;
  }
LABEL_24:
  __break(1u);
  return result;
}

void TableColumnForEachState.uneraseItem(_:)(uint64_t a1)
{
  *(unsigned char *)(a1 + *(void *)(*(void *)a1 + 192)) = 0;
  AGSubgraphAddChild();
  AGSubgraphRef.didReinsert()();
}

void *closure #1 in TableColumnForEachState.item(at:offset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v35 = a3;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(*(void *)a1 + 88);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v31 - v6;
  uint64_t v9 = v8[10];
  uint64_t v10 = v8[12];
  uint64_t v11 = v8[13];
  uint64_t v12 = v8[14];
  uint64_t v13 = v8[15];
  uint64_t v31 = v9;
  uint64_t v39 = v9;
  uint64_t v40 = v4;
  uint64_t v41 = v10;
  *(void *)&long long v42 = v11;
  *((void *)&v42 + 1) = v12;
  *(void *)&long long v43 = v13;
  uint64_t v34 = v13;
  uint64_t v14 = type metadata accessor for TableColumnForEachState.ChildContent();
  uint64_t v33 = *(void *)(v14 - 8);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v31 - v16;
  if (*(unsigned char *)(a1 + 116)) {
    __break(1u);
  }
  int v18 = *(_DWORD *)(a1 + 112);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v32, v4, v15);
  *(_DWORD *)uint64_t v17 = v18;
  uint64_t v39 = v31;
  uint64_t v40 = v4;
  uint64_t v41 = v10;
  *(void *)&long long v42 = v11;
  uint64_t v19 = v34;
  *((void *)&v42 + 1) = v12;
  *(void *)&long long v43 = v34;
  uint64_t v20 = type metadata accessor for TableColumnForEachState.ChildContent();
  uint64_t v21 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(&v17[*(int *)(v20 + 68)], v7, v4);
  MEMORY[0x1F4188790](v21);
  *(&v31 - 4) = v10;
  *(&v31 - 3) = v14;
  *(&v31 - 2) = swift_getWitnessTable();
  uint64_t v22 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)(&v31 - 6), v14, MEMORY[0x1E4FBC248], v22, MEMORY[0x1E4FBC278], v23);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v17, v14);
  _GraphValue.init(_:)();
  int v24 = *(_DWORD *)(a1 + 24);
  uint64_t v25 = *(void *)(a1 + 32);
  int v26 = *(_DWORD *)(a1 + 96);
  uint64_t v39 = *(void *)(a1 + 16);
  LODWORD(v40) = v24;
  uint64_t v41 = v25;
  long long v27 = *(_OWORD *)(a1 + 56);
  long long v42 = *(_OWORD *)(a1 + 40);
  long long v43 = v27;
  long long v44 = *(_OWORD *)(a1 + 72);
  uint64_t v45 = *(void *)(a1 + 88);
  int v46 = v26;
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t, uint64_t))(v19 + 64))(&v37, v36, &v39, v10, v19);
  int v29 = v38;
  uint64_t v30 = v35;
  *uint64_t v35 = v37;
  *((_DWORD *)v30 + 2) = v29;
  return result;
}

uint64_t TableColumnForEachState.Item.release()()
{
  uint64_t result = AGSubgraphIsValid();
  if (result)
  {
    if (swift_weakLoadStrong())
    {
      swift_beginAccess();
      type metadata accessor for Dictionary();
      Dictionary.removeValue(forKey:)();
      swift_endAccess();
      swift_release();
      swift_release();
    }
    AGSubgraphRef.willInvalidate(isInserted:)(1);
    return AGSubgraphInvalidate();
  }
  return result;
}

uint64_t closure #1 in TableColumnForEachState.forEachItem(from:do:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, void *a5)
{
  TableColumnForEachState.item(at:offset:)(a1, *a3);
  uint64_t result = swift_release();
  if (*(unsigned char *)(a2 + 124) == 1) {
    goto LABEL_7;
  }
  type metadata accessor for TableColumnList();
  Inputuint64_t Value = AGGraphGetInputValue();
  outlined init with copy of TableColumnList(InputValue, (uint64_t)v16);
  uint64_t v11 = v17;
  uint64_t v12 = v18;
  __swift_project_boxed_opaque_existential_1(v16, v17);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  uint64_t v14 = *a5 + v13;
  if (__OFADD__(*a5, v13))
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  uint64_t v15 = *a4;
  if (*a4 >= v14)
  {
    *a5 = v14;
    *a3 &= 1uLL;
  }
  return v15 < v14;
}

void closure #1 in TableColumnForEachState.count()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (*(unsigned char *)(a4 + 124) != 1)
  {
    type metadata accessor for TableColumnList();
    Inputuint64_t Value = AGGraphGetInputValue();
    outlined init with copy of TableColumnList(InputValue, (uint64_t)v9);
    uint64_t v6 = v10;
    uint64_t v7 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v6, v7);
    if (!__OFADD__(*a3, v8))
    {
      *a3 += v8;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      return;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t TableColumnForEachState.Info.Init.forEach.getter@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for TableColumnForEach();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t TableColumnForEachState.Info.Init.value.getter(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v17[3] = a2;
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v21 = swift_getAssociatedTypeWitness();
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  uint64_t v24 = a7;
  uint64_t v25 = a8;
  uint64_t v12 = type metadata accessor for TableColumnForEach();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)v17 - v14;
  TableColumnForEachState.Info.Init.forEach.getter((uint64_t)v17 - v14);
  TableColumnForEachState.update(forEach:)((uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_retain();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TableColumnForEachState<A, B, C>.Info.Init()
{
  return 0x697463656C6C6F43;
}

uint64_t protocol witness for Rule.value.getter in conformance TableColumnForEachState<A, B, C>.Info.Init@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = TableColumnForEachState.Info.Init.value.getter(*(void *)v2, *(_DWORD *)(v2 + 8), a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  *(void *)a2 = result;
  *(_DWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t TableColumnForEachState.Item.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 88) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 128));
  swift_weakDestroy();

  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 160);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t TableColumnForEachState.Item.__deallocating_deinit()
{
  return TableColumnForEachState.Item.__deallocating_deinit(TableColumnForEachState.Item.deinit);
}

uint64_t TableColumnForEachState.ChildContent.updateValue()(uint64_t a1)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v72 = *(void *)(a1 + 32);
  uint64_t v66 = *(void *)(v72 - 8);
  MEMORY[0x1F4188790](a1);
  char v65 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v4 + 40);
  uint64_t v6 = *(void *)(*(void *)(v5 + 8) + 8);
  uint64_t v7 = *(void *)(v4 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v62 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v58 = (char *)&v54 - v8;
  uint64_t v59 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v56 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = v6;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v69 = *(void *)(v11 - 8);
  uint64_t v70 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v68 = (char *)&v54 - v12;
  uint64_t v13 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v14);
  int v57 = (char *)&v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v54 - v17;
  uint64_t v19 = specialized TableColumnForEachState.ChildContent.info.getter();
  uint64_t v61 = v13;
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v20 = v13 + 16;
  uint64_t v64 = v1;
  id v55 = v21;
  v21(v18, v1, a1);
  uint64_t v22 = &v18[*(int *)(a1 + 68)];
  uint64_t v23 = (uint64_t *)(v19 + *(void *)(*(void *)v19 + 176));
  swift_beginAccess();
  uint64_t v24 = *v23;
  uint64_t v25 = *(void *)(a1 + 24);
  uint64_t v26 = *(void *)(a1 + 48);
  uint64_t v27 = *(void *)(a1 + 56);
  swift_retain();
  uint64_t v71 = v7;
  uint64_t v74 = v7;
  uint64_t v75 = v25;
  uint64_t v76 = v72;
  uint64_t v77 = v5;
  uint64_t v67 = v5;
  uint64_t v78 = v26;
  uint64_t v79 = v27;
  uint64_t v28 = type metadata accessor for TableColumnForEachState.Item();
  MEMORY[0x18C115450](v73, v22, v24, v25, v28, v26);
  (*(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8))(v22, v25);
  uint64_t v29 = v73[0];
  if (!v73[0])
  {
    swift_endAccess();
    return swift_release();
  }
  swift_endAccess();
  uint64_t v30 = *(void *)v19;
  if (*(_DWORD *)(v29 + *(void *)(*(void *)v29 + 176)) != *(_DWORD *)(v19 + *(void *)(*(void *)v19 + 184)))
  {
    swift_release();
    return swift_release();
  }
  uint64_t v54 = v20;
  uint64_t v31 = v19 + *(void *)(v30 + 160);
  swift_beginAccess();
  uint64_t v32 = v72;
  uint64_t v33 = swift_getAssociatedTypeWitness();
  uint64_t v34 = swift_getAssociatedTypeWitness();
  uint64_t v35 = v71;
  uint64_t v74 = v71;
  uint64_t v75 = v25;
  uint64_t v76 = v33;
  uint64_t v77 = v34;
  uint64_t v36 = v31;
  uint64_t v78 = v32;
  uint64_t v79 = v67;
  uint64_t v80 = v26;
  uint64_t v81 = v27;
  uint64_t v37 = type metadata accessor for TableColumnForEach();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v31, 1, v37);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v39 = v59;
    uint64_t v40 = v56;
    (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v56, v36, v35);
    uint64_t v41 = v29 + *(void *)(*(void *)v29 + 160);
    swift_beginAccess();
    uint64_t v42 = v62;
    long long v43 = v58;
    uint64_t v44 = AssociatedTypeWitness;
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v58, v41, AssociatedTypeWitness);
    uint64_t v45 = (void (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
    int v46 = v68;
    (*(void (**)(void))(v69 + 16))();
    v45(&v74, 0);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v40, v71);
    uint64_t v47 = v57;
    uint64_t v48 = v55(v57, v64, a1);
    MEMORY[0x1F4188790](v48);
    *(&v54 - 2) = v19;
    *(&v54 - 1) = (uint64_t)v46;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v50 = (uint64_t)v65;
    uint64_t v51 = v72;
    StatefulRule.withObservation<A>(do:)();
    uint64_t v52 = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v47, a1);
    MEMORY[0x1F4188790](v52);
    *(&v54 - 2) = a1;
    *(&v54 - 1) = WitnessTable;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v50, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v54 - 4), v51, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v53);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v50, v51);
    return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v68, v70);
  }
  return result;
}

uint64_t closure #1 in TableColumnForEachState.ChildContent.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + *(void *)(*(void *)a1 + 160);
  swift_beginAccess();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v4 = type metadata accessor for TableColumnForEach();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v6 = *(void (**)(uint64_t))(v3 + *(int *)(v4 + 84));
    swift_retain();
    v6(a2);
    return swift_release();
  }
  return result;
}

uint64_t TableColumnForEachState.ChildContent.description.getter()
{
  v0._countAndFlagsBits = 0x697463656C6C6F43;
  v0._object = (void *)0xEB000000005B6E6FLL;
  String.append(_:)(v0);
  DefaultStringInterpolation.appendInterpolation<A>(_:)();
  v1._countAndFlagsBits = 93;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  return 0;
}

id *TableColumnForEachState.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  Swift::String v1 = (char *)v0 + *((void *)*v0 + 20);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for TableColumnForEach();
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TableColumnForEachState.__deallocating_deinit()
{
  return TableColumnForEachState.Item.__deallocating_deinit((uint64_t (*)(void))TableColumnForEachState.deinit);
}

uint64_t TableColumnForEachState.Item.__deallocating_deinit(uint64_t (*a1)(void))
{
  a1();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TableColumnForEachState.Info()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for TableColumnForEachState.Info.Init()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for TableColumnForEach.MakeList()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for Attribute<TableColumnList>()
{
  if (!lazy cache variable for type metadata for Attribute<TableColumnList>)
  {
    type metadata accessor for TableColumnList();
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<TableColumnList>);
    }
  }
}

uint64_t associated type witness table accessor for TableColumnContent.TableColumnSortComparator : SortComparator in TableColumnForEach<A, B, C, D, E>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for TableColumnContent.TableRowValue : Identifiable in TableColumnForEach<A, B, C, D, E>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for TableColumnForEach<A, B, C, D, E>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata completion function for TableColumnForEach()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableColumnForEach(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    *(void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for TableColumnForEach(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for TableColumnForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TableColumnForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for TableColumnForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for TableColumnForEach(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 23;
  *int v7 = *(_OWORD *)(v8 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  *(void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(v9 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnForEach(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D239ECLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for TableColumnForEach(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0)
              {
                uint64_t v20 = a2 ^ 0x80000000;
                v19[1] = 0;
              }
              else
              {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187D23BF4);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for TableColumnForEachState()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  type metadata accessor for TableColumnForEach();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

uint64_t type metadata completion function for TableColumnForEachState.Item()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

uint64_t type metadata accessor for TableColumnForEachState.Item()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for TableColumnForEachState.ElementCount()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for TableColumnForEach.IDGenerator()
{
  return swift_getGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in TableColumnForEach<A, B, C, D, E>.MakeList()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in TableColumnForEachState<A, B, C>.Info.Init()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TableColumnForEach.DynamicTableColumnList()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in TableColumnForEach.DynamicTableColumnList.visitColumns<A>(applying:from:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in TableColumnForEach.DynamicTableColumnList.visitColumns<A>(applying:from:)(a1, a2, *(void *)(v2 + 48), *(unsigned int *)(v2 + 56), *(void *)(v2 + 64), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40)) & 1;
}

uint64_t partial apply for closure #1 in TableColumnForEachState.forEachItem(from:do:)(uint64_t a1)
{
  return closure #1 in TableColumnForEachState.forEachItem(from:do:)(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24), *(uint64_t **)(v1 + 32), *(void **)(v1 + 40)) & 1;
}

uint64_t *specialized TableColumnForEachState.Item.init(id:columns:subgraph:index:offset:seed:state:isConstant:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, char a8)
{
  uint64_t v15 = *v8;
  swift_weakInit();
  *((unsigned char *)v8 + *(void *)(*v8 + 192)) = 0;
  *((unsigned char *)v8 + *(void *)(*v8 + 200)) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(v15 + 88) - 8) + 32))((uint64_t)v8 + *(void *)(*v8 + 128), a1);
  *(_DWORD *)((char *)v8 + *(void *)(*v8 + 136)) = a2;
  swift_weakAssign();
  *(uint64_t *)((char *)v8 + *(void *)(*v8 + 152)) = a3;
  uint64_t v16 = (uint64_t)v8 + *(void *)(*v8 + 160);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v16, a4, AssociatedTypeWitness);
  *(uint64_t *)((char *)v8 + *(void *)(*v8 + 168)) = a5;
  *(_DWORD *)((char *)v8 + *(void *)(*v8 + 176)) = a6;
  *((unsigned char *)v8 + *(void *)(*v8 + 184)) = a8;
  return v8;
}

uint64_t type metadata accessor for TableColumnForEachState.ChildContent()
{
  return swift_getGenericMetadata();
}

void partial apply for closure #1 in TableColumnForEachState.count()(uint64_t a1, uint64_t a2)
{
  closure #1 in TableColumnForEachState.count()(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t type metadata completion function for TableColumnForEachState.ChildContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableColumnForEachState.ChildContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if ((v5 | 3uLL) > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 4) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~(v5 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 4) & ~v5, ((unint64_t)a2 + v5 + 4) & ~v5);
  }
  return v3;
}

uint64_t destroy for TableColumnForEachState.ChildContent(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 24) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 24) - 8) + 80));
}

_DWORD *initializeWithCopy for TableColumnForEachState.ChildContent(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *assignWithCopy for TableColumnForEachState.ChildContent(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *initializeWithTake for TableColumnForEachState.ChildContent(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *assignWithTake for TableColumnForEachState.ChildContent(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnForEachState.ChildContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 4) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 4) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for TableColumnForEachState.ChildContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 4) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187D24920);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 4] & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t base witness table accessor for _AttributeBody in TableColumnForEachState<A, B, C>.ChildContent()
{
  return swift_getWitnessTable();
}

uint64_t specialized TableColumnForEachState.ChildContent.info.getter()
{
  return *(void *)AGGraphGetValue();
}

uint64_t partial apply for closure #1 in TableColumnForEachState.ChildContent.updateValue()()
{
  return closure #1 in TableColumnForEachState.ChildContent.updateValue()(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t AppPreview.content.getter()
{
  return swift_retain();
}

uint64_t AppPreview.content.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *unint64_t v1 = a1;
  return result;
}

uint64_t (*AppPreview.content.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AppPreview.description.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppPreview.description.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 8) = a1;
  *(void *)(v2 + 16) = a2;
  return result;
}

uint64_t (*AppPreview.description.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t AppPreviewHost.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  AppPreviewHost.init()();
  return v0;
}

uint64_t AppPreviewHost.init()()
{
  uint64_t v1 = v0;
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = -1;
  type metadata accessor for SceneBridge();
  swift_allocObject();
  *(void *)(v0 + 40) = SceneBridge.init()();
  uint64_t v2 = MEMORY[0x1E4FBC860];
  unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  type metadata accessor for SceneStorageValues();
  uint64_t v4 = (void *)swift_allocObject();
  void v4[3] = specialized Dictionary.init(dictionaryLiteral:)(v2);
  v4[6] = 0;
  swift_unknownObjectWeakInit();
  void v4[2] = v3;
  void v4[4] = *(void *)(v3 + 16);
  *(void *)(v1 + 48) = v4;
  uint64_t v5 = static AppGraph.shared;
  if (static AppGraph.shared)
  {
    swift_retain();
    static Update.ensure<A>(_:)();
    if (*(void *)(v14[0] + 16))
    {
      outlined init with copy of SceneList.Item(v14[0] + 32, (uint64_t)v14);
      swift_bridgeObjectRelease();
      uint64_t v6 = v15;
      uint64_t v7 = v16;
      char v8 = v17;
      outlined copy of SceneID(v15, v16, v17);
      outlined destroy of SceneList.Item((uint64_t)v14);
      uint64_t v9 = *(void *)(v1 + 16);
      uint64_t v10 = *(void *)(v1 + 24);
      *(void *)(v1 + 16) = v6;
      *(void *)(v1 + 24) = v7;
      unsigned __int8 v11 = *(unsigned char *)(v1 + 32);
      *(unsigned char *)(v1 + 32) = v8;
      outlined consume of SceneID?(v9, v10, v11);
      uint64_t v12 = swift_retain();
      specialized AppGraph.addObserver(_:)(v12, v5);
      swift_release();
      swift_release();
      return v1;
    }
    __break(1u);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Void __swiftcall AppPreviewHost.invalidateEverything()()
{
  if (static AppGraph.shared)
  {
    swift_retain();
    static Update.ensure<A>(_:)();
    swift_release();
  }
}

void closure #1 in AppPreviewHost.invalidateEverything()()
{
  GraphHost.incrementPhase()();
  uint64_t v0 = (void *)GraphHost.graph.getter();
  AGGraphInvalidateAllValues();

  GraphHost.emptyTransaction(_:)();
  GraphHost.flushTransactions()();
}

uint64_t AppPreviewHost.previews.getter()
{
  AppPreviewHost.sceneItem()(v29);
  outlined init with copy of SceneList.Item.Value((uint64_t)v29, (uint64_t)v24);
  if (v28)
  {
    outlined destroy of SceneList.Item((uint64_t)v29);
    outlined destroy of SceneList.Item.Value((uint64_t)v24);
    return MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v2 = v24[0];
    uint64_t v1 = v24[1];
    uint64_t v4 = v24[2];
    char v3 = v25;
    uint64_t v5 = v26;
    uint64_t v6 = v27;
    type metadata accessor for _ContiguousArrayStorage<AppPreview>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AppPreview>, (uint64_t)&type metadata for AppPreview, MEMORY[0x1E4FBBE00]);
    uint64_t v0 = swift_allocObject();
    *(_OWORD *)(v0 + 16) = xmmword_18834BB80;
    uint64_t v23 = 0;
    memset(v22, 0, sizeof(v22));
    swift_weakInit();
    swift_weakInit();
    swift_weakInit();
    _ss11AnyHashableVSgWObTm_1((uint64_t)v22, (uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718]);
    v17[40] = 2;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    char v20 = -1;
    uint64_t v21 = 0;
    outlined init with copy of RootModifier((uint64_t)&v16, (uint64_t)v22 + 8);
    *(void *)&v22[0] = v2;
    swift_retain();
    outlined destroy of RootModifier((uint64_t)&v16);
    type metadata accessor for ModifiedContent<AnyView, RootModifier>();
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    uint64_t v7 = AnyView.init<A>(_:)();
    if (v5)
    {
      uint64_t v15 = v7;
      EnvironmentValues.init()();
      long long v16 = v22[0];
      uint64_t v8 = Text.resolveString(in:with:idiom:)();
      uint64_t v9 = v5;
      uint64_t v10 = v4;
      uint64_t v11 = v1;
      uint64_t v13 = v12;
      swift_release();
      swift_release();
      uint64_t v7 = v15;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = v4;
      uint64_t v11 = v1;
      uint64_t v13 = 0;
    }
    *(void *)(v0 + 32) = v7;
    *(void *)(v0 + 40) = v8;
    *(void *)(v0 + 48) = v13;
    swift_release();
    outlined consume of Text?(v11, v10, v3, v9);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v6);
    outlined destroy of SceneList.Item((uint64_t)v29);
  }
  return v0;
}

uint64_t AppPreviewHost.sceneItem()@<X0>(void *a1@<X8>)
{
  MEMORY[0x18C113CA0]();
  int v6 = *(unsigned __int8 *)(v1 + 32);
  if (v6 == 255 || !static AppGraph.shared) {
    goto LABEL_34;
  }
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v23 = a1;
  if (*(_DWORD *)(static AppGraph.shared + 204) == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v7 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  uint64_t v4 = __src;
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    goto LABEL_35;
  }
  uint64_t v9 = v7 + 32;
  swift_bridgeObjectRetain();
  outlined copy of SceneID?(v3, v2, v6);
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of SceneList.Item(v9, (uint64_t)__src);
    uint64_t v12 = __src[17];
    uint64_t v11 = __src[18];
    if ((__src[19] & 1) == 0) {
      break;
    }
    if ((v6 & 1) == 0)
    {
      uint64_t v24 = _typeName(_:qualified:)();
      uint64_t v26 = v13;
      v14._countAndFlagsBits = 45;
      v14._object = (void *)0xE100000000000000;
      String.append(_:)(v14);
      v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v15);
      swift_bridgeObjectRelease();
      uint64_t v11 = v26;
      swift_bridgeObjectRetain();
      uint64_t v16 = v2;
      if (v24 == v3) {
        goto LABEL_25;
      }
      goto LABEL_26;
    }
    if (__src[17] == v3 && LOBYTE(__src[18]) == v2) {
      goto LABEL_29;
    }
LABEL_12:
    outlined destroy of SceneList.Item((uint64_t)__src);
    v9 += 280;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      goto LABEL_32;
    }
  }
  if ((v6 & 1) == 0)
  {
    BOOL v17 = __src[17] == v3 && __src[18] == v2;
    if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_29;
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v25 = _typeName(_:qualified:)();
  uint64_t v27 = v18;
  v19._countAndFlagsBits = 45;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  uint64_t v16 = v27;
  if (v12 != v25) {
    goto LABEL_26;
  }
LABEL_25:
  if (v11 != v16)
  {
LABEL_26:
    char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v21) {
      goto LABEL_29;
    }
    goto LABEL_12;
  }
  swift_bridgeObjectRelease_n();
LABEL_29:
  swift_bridgeObjectRelease();
  memcpy(__dst, __src, 0x118uLL);
  swift_bridgeObjectRelease();
  outlined consume of SceneID?(v3, v2, v6);
  swift_bridgeObjectRelease();
  if (!__dst[33])
  {
    while (1)
    {
      outlined destroy of HashableWeakBox<Swift.AnyObject>((uint64_t)__dst, &lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item, MEMORY[0x1E4FBB718]);
LABEL_34:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_35:
      outlined copy of SceneID?(v3, v2, v6);
      swift_bridgeObjectRetain();
LABEL_32:
      v4[69] = 0;
      memset(__dst, 0, 272);
      swift_bridgeObjectRelease();
      outlined consume of SceneID?(v3, v2, v6);
      swift_bridgeObjectRelease();
    }
  }
  memcpy(v23, __dst, 0x118uLL);
  return static Update.end()();
}

uint64_t AppPreviewHost.deinit()
{
  outlined consume of SceneID?(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_release();
  swift_release();
  return v0;
}

uint64_t AppPreviewHost.__deallocating_deinit()
{
  outlined consume of SceneID?(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for AppGraphObserver.scenesDidChange(phaseChanged:) in conformance AppPreviewHost(uint64_t a1, uint64_t a2)
{
  lazy protocol witness table accessor for type AppPreviewHost and conformance AppPreviewHost((unint64_t *)&lazy protocol witness table cache variable for type AppPreviewHost and conformance AppPreviewHost, a2, (void (*)(uint64_t))type metadata accessor for AppPreviewHost);
  ObservableObject<>.objectWillChange.getter();
  ObservableObjectPublisher.send()();

  return swift_release();
}

void partial apply for closure #1 in AppPreviewHost.invalidateEverything()()
{
}

void type metadata accessor for ModifiedContent<AnyView, RootModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>)
  {
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>);
    }
  }
}

uint64_t destroy for AppPreview()
{
  swift_release();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for AppPreview(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AppPreview(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for AppPreview(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AppPreview()
{
  return &type metadata for AppPreview;
}

uint64_t type metadata accessor for AppPreviewHost()
{
  return self;
}

uint64_t method lookup function for AppPreviewHost(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AppPreviewHost);
}

uint64_t dispatch thunk of AppPreviewHost.__allocating_init()()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

unint64_t type metadata accessor for UIOpenURLContext()
{
  unint64_t result = lazy cache variable for type metadata for UIOpenURLContext;
  if (!lazy cache variable for type metadata for UIOpenURLContext)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIOpenURLContext);
  }
  return result;
}

void type metadata accessor for _SetStorage<ToolbarPlacement.Role>()
{
  if (!lazy cache variable for type metadata for _SetStorage<ToolbarPlacement.Role>)
  {
    lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role();
    unint64_t v0 = type metadata accessor for _SetStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<ToolbarPlacement.Role>);
    }
  }
}

uint64_t dispatch thunk of UINavigationPresentationAdaptor.pushViewController(_:animated:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

ValueMetadata *type metadata accessor for UINavigationPresentationAdaptorContext()
{
  return &type metadata for UINavigationPresentationAdaptorContext;
}

uint64_t sub_187D25D74()
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for NavigationPresentationAdaptorModifier(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (v4)
    {
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
      return a1;
    }
LABEL_7:
    long long v5 = *a2;
    long long v6 = a2[1];
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    return a1;
  }
  if (!v4)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  return a1;
}

uint64_t assignWithTake for NavigationPresentationAdaptorModifier(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationPresentationAdaptorModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v7[2] = *(_OWORD *)(a2 + 32);
  _DWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance NavigationPresentationAdaptorModifier()
{
  return PropertyList.subscript.setter();
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationPresentationAdaptorModifier()
{
  return &protocol witness table for NavigationPresentationAdaptorModifier;
}

void type metadata accessor for _GraphValue<NavigationPresentationAdaptorModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<NavigationPresentationAdaptorModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<NavigationPresentationAdaptorModifier>);
    }
  }
}

ValueMetadata *type metadata accessor for _GraphInputs.NavigationPresentationAdaptorKey()
{
  return &type metadata for _GraphInputs.NavigationPresentationAdaptorKey;
}

void View.focusSection()()
{
}

uint64_t View.focusSection(withSpeedBumpsAtEdges:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4 = a1;
  return MEMORY[0x18C113660](&v4, a2, &unk_1ED437B58, a3);
}

uint64_t type metadata completion function for FocusSectionResponder()
{
  return swift_initClassMetadata2();
}

double static _FocusSectionModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  int v35 = *a1;
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 24);
  int v8 = *(_DWORD *)(a2 + 28);
  unsigned int v10 = *(_DWORD *)(a2 + 32);
  unsigned int v11 = *(_DWORD *)(a2 + 36);
  uint64_t v13 = *(void *)(a2 + 40);
  unint64_t v12 = *(void *)(a2 + 48);
  int v15 = *(_DWORD *)(a2 + 56);
  int v14 = *(_DWORD *)(a2 + 60);
  int v16 = *(_DWORD *)(a2 + 64);
  int v17 = *(_DWORD *)(a2 + 68);
  int v18 = *(_DWORD *)(a2 + 72);
  int v19 = *(_DWORD *)(a2 + 76);
  int v20 = *(_DWORD *)(a2 + 80);
  unint64_t v63 = *(void *)a2;
  int v21 = v6;
  LODWORD(v64) = v6;
  unint64_t v65 = v7;
  int v40 = v9;
  int v41 = v18;
  int v66 = v9;
  int v67 = v8;
  int v22 = v8;
  unsigned int v23 = v10;
  unint64_t v68 = __PAIR64__(v11, v10);
  int v43 = v14;
  unsigned int v44 = v11;
  uint64_t v69 = v13;
  unint64_t v70 = v12;
  int v71 = v15;
  int v72 = v14;
  int v42 = v16;
  int v73 = v16;
  int v37 = v20;
  int v38 = v17;
  int v74 = v17;
  int v75 = v18;
  int v39 = v19;
  int v76 = v19;
  int v77 = v20;
  a3(&v45);
  unint64_t v63 = v12;
  LODWORD(v64) = v15;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v34 = a4;
    type metadata accessor for FocusSectionResponder(0);
    uint64_t v24 = swift_allocObject();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    ViewTransform.init()();
    *(void *)(v24 + 256) = 0;
    *(void *)(v24 + 264) = 0;
    *(_WORD *)(v24 + 272) = 512;
    *(unsigned char *)(v24 + 274) = 0;
    *(void *)(v24 + 280) = 0;
    swift_release();
    unint64_t v63 = v5;
    int v36 = v21;
    LODWORD(v64) = v21;
    unint64_t v65 = v7;
    int v66 = v40;
    int v67 = v22;
    unint64_t v68 = __PAIR64__(v44, v23);
    uint64_t v69 = v13;
    unint64_t v70 = v12;
    int v71 = v15;
    int v72 = v43;
    int v73 = v42;
    int v74 = v38;
    int v75 = v41;
    int v76 = v39;
    int v77 = v37;
    uint64_t v33 = DefaultLayoutViewResponder.init(inputs:)();
    unint64_t v63 = v5;
    LODWORD(v64) = v21;
    unint64_t v65 = v7;
    int v66 = v40;
    int v67 = v22;
    unint64_t v68 = __PAIR64__(v44, v23);
    uint64_t v69 = v13;
    unint64_t v70 = v12;
    int v71 = v15;
    int v72 = v43;
    int v73 = v42;
    int v74 = v38;
    int v75 = v41;
    int v76 = v39;
    int v77 = v37;
    unsigned int v32 = _ViewInputs.transform.getter();
    unint64_t v63 = v5;
    LODWORD(v64) = v21;
    unint64_t v65 = v7;
    int v66 = v40;
    int v67 = v22;
    unint64_t v68 = __PAIR64__(v44, v23);
    uint64_t v69 = v13;
    unint64_t v70 = v12;
    int v71 = v15;
    int v72 = v43;
    int v73 = v42;
    int v74 = v38;
    int v75 = v41;
    int v76 = v39;
    int v77 = v37;
    unsigned int v31 = _ViewInputs.animatedPosition()();
    unint64_t v63 = v5;
    LODWORD(v64) = v21;
    unint64_t v65 = v7;
    int v66 = v40;
    int v67 = v22;
    unint64_t v68 = __PAIR64__(v44, v23);
    uint64_t v69 = v13;
    unint64_t v70 = v12;
    int v71 = v15;
    int v72 = v43;
    int v73 = v42;
    int v74 = v38;
    int v75 = v41;
    int v76 = v39;
    int v77 = v37;
    unsigned int v30 = _ViewInputs.animatedSize()();
    unint64_t v63 = v5;
    LODWORD(v64) = v21;
    unint64_t v65 = v7;
    int v66 = v40;
    int v67 = v22;
    unint64_t v68 = __PAIR64__(v44, v23);
    uint64_t v69 = v13;
    unint64_t v70 = v12;
    int v71 = v15;
    int v72 = v43;
    int v73 = v42;
    int v74 = v38;
    int v75 = v41;
    int v76 = v39;
    int v77 = v37;
    swift_getKeyPath();
    unsigned int v29 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    unint64_t v63 = v5;
    LODWORD(v64) = v21;
    unint64_t v65 = v7;
    int v66 = v40;
    int v67 = v22;
    unint64_t v68 = __PAIR64__(v44, v23);
    uint64_t v69 = v13;
    unint64_t v70 = v12;
    int v71 = v15;
    int v72 = v43;
    int v73 = v42;
    int v74 = v38;
    int v75 = v41;
    int v76 = v39;
    int v77 = v37;
    swift_getKeyPath();
    unsigned int v25 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    LODWORD(v63) = v35;
    type metadata accessor for _GraphValue<PointerHoverEffectModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<_FocusSectionModifier>, (uint64_t)&unk_1ED437B58, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    unint64_t v63 = v45;
    unint64_t v64 = *(void *)&v46;
    int v27 = _ViewOutputs.viewResponders()();
    unint64_t v63 = __PAIR64__(v31, v32);
    unint64_t v64 = __PAIR64__(v29, v30);
    unint64_t v65 = __PAIR64__(OffsetAttribute2, v25);
    int v66 = v27;
    unint64_t v68 = v33;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type FocusSectionResponderFilter and conformance FocusSectionResponderFilter();
    swift_retain();
    LODWORD(v24) = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    uint64_t v47 = v5;
    int v48 = v36;
    unint64_t v49 = v7;
    int v50 = v40;
    int v51 = v22;
    unsigned int v52 = v23;
    unsigned int v53 = v44;
    uint64_t v54 = v13;
    unint64_t v55 = v12;
    int v56 = v15;
    int v57 = v43;
    int v58 = v42;
    int v59 = v38;
    int v60 = v41;
    int v61 = v39;
    int v62 = v37;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    UIKitHostedFocusItemLifecycle.init(inputs:responder:)(&v47, v24, (uint64_t)&v63);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UIKitHostedFocusItemLifecycle and conformance UIKitHostedFocusItemLifecycle();
    Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of UIKitHostedFocusItemLifecycle((uint64_t)&v63);
    static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
    LOBYTE(v63) = 0;
    _ViewOutputs.subscript.setter();
    swift_release();
    a4 = v34;
  }
  *(void *)a4 = v45;
  double result = v46;
  a4[1] = v46;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance _FocusSectionModifier()
{
}

uint64_t FocusSectionResponderFilter.updateValue()()
{
  AGGraphGetValue();
  char v2 = v1;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v5 = v4;
  uint64_t v6 = *Value;
  uint64_t v7 = Value[1];
  uint64_t v8 = Value[2];
  uint64_t v9 = Value[3];
  uint64_t v10 = Value[4];
  AGGraphGetValue();
  char v12 = v11;
  uint64_t v13 = (char *)AGGraphGetValue();
  char v33 = v14;
  char v15 = *v13;
  int v16 = (char *)AGGraphGetValue();
  char v32 = v17;
  char v18 = *v16;
  int v19 = (unsigned __int8 *)AGGraphGetValue();
  char v31 = v20;
  unsigned __int8 v21 = *v19;
  uint64_t v22 = *(void *)(v0 + 32);
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v23)
  {
    swift_retain();
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  if ((v2 & 1) != 0
    || (v5 & 1) != 0
    || (v12 & 1) != 0
    || (v33 & 1) != 0
    || (v32 & 1) != 0
    || (v31 & 1) != 0
    || !AGGraphGetOutputValue())
  {
    *(void *)&long long v34 = v7;
    *((void *)&v34 + 1) = v8;
    *(void *)&long long v35 = v9;
    *((void *)&v35 + 1) = v10;
    uint64_t v24 = swift_retain();
    *(double *)&unint64_t v25 = MEMORY[0x18C10C240](v24);
    ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v26, v25));
    *(void *)(v22 + 216) = v6;
    *(_OWORD *)(v22 + 224) = v34;
    *(_OWORD *)(v22 + 240) = v35;
    swift_retain();
    uint64_t v27 = swift_release();
    *(double *)(v22 + 256) = MEMORY[0x18C114450](v27);
    *(void *)(v22 + 264) = v28;
    *(unsigned char *)(v22 + 272) = v15;
    *(unsigned char *)(v22 + 273) = v18;
    FocusSectionResponder.speedBumpEdges.setter(v21);
    swift_release();
  }
  if (AGGraphGetOutputValue())
  {
    return swift_release();
  }
  else
  {
    type metadata accessor for _GraphValue<PointerHoverEffectModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_188351940;
    *(void *)(v30 + 32) = v22;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

void FocusSectionResponder.speedBumpEdges.setter(unsigned __int8 a1)
{
  *(unsigned char *)(v1 + 274) = a1;
  uint64_t v3 = *(void **)(v1 + 280);
  if (v3)
  {
    int v4 = *(unsigned __int8 *)(v1 + 273);
    uint64_t v8 = *(char **)(v1 + 280);
    if (v4 == 2)
    {
      char v10 = 0;
      id v5 = v3;
      uint64_t v6 = (unsigned __int8 *)&v10;
    }
    else
    {
      char v9 = v4 & 1;
      id v7 = v3;
      uint64_t v6 = (unsigned __int8 *)&v9;
    }
    *(void *)&v8[direct field offset for UIKitFocusSectionResponderItem._focusSpeedBumpEdges] = specialized UIRectEdge.init(_:layoutDirection:)(a1, v6);
  }
}

void FocusSectionResponder.__ivar_destroyer()
{
  swift_release();
  uint64_t v1 = *(void **)(v0 + 280);
}

uint64_t FocusSectionResponder.__deallocating_deinit()
{
  uint64_t v0 = DefaultLayoutViewResponder.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for FocusSectionResponder()
{
  return type metadata accessor for FocusSectionResponder(0);
}

uint64_t protocol witness for BaseFocusResponder.platformItem.getter in conformance FocusSectionResponder()
{
  specialized FocusSectionResponder.hostedItem.getter();

  return swift_unknownObjectRetain();
}

uint64_t protocol witness for BaseFocusResponder.isEnabled.getter in conformance FocusSectionResponder()
{
  return *(unsigned __int8 *)(v0 + 272);
}

uint64_t protocol witness for AnyUIKitHostedFocusItemResponder.hostedItem.getter in conformance FocusSectionResponder()
{
  return swift_unknownObjectRetain();
}

uint64_t @objc UIKitFocusSectionResponderItem._focusSpeedBumpEdges.getter(uint64_t a1)
{
  return *(void *)(a1 + direct field offset for UIKitFocusSectionResponderItem._focusSpeedBumpEdges);
}

uint64_t @objc UIKitFocusSectionResponderItem._focusSpeedBumpEdges.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(void *)(result + direct field offset for UIKitFocusSectionResponderItem._focusSpeedBumpEdges) = a3;
  return result;
}

uint64_t @objc UIKitFocusSectionResponderItem._focusGuideBehavior(forFocusMovement:)()
{
  return 1;
}

id UIKitFocusSectionResponderItem.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for UIKitFocusSectionResponderItem(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for UIKitFocusSectionResponderItem(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitFocusSectionResponderItem);
}

uint64_t type metadata completion function for UIKitFocusSectionResponderItem()
{
  return swift_initClassMetadata2();
}

uint64_t ObjC metadata update function for UIKitFocusSectionResponderItem()
{
  return type metadata accessor for UIKitFocusSectionResponderItem(0);
}

uint64_t sub_187D26D94()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for _FocusSectionModifier()
{
  return &unk_1ED437B58;
}

_UNKNOWN **base witness table accessor for ViewModifier in _FocusSectionModifier()
{
  return &protocol witness table for _FocusSectionModifier;
}

void *type metadata accessor for FocusSectionResponderFilter()
{
  return &unk_1ED44F458;
}

ValueMetadata *type metadata accessor for GenericViewControllerRepresentable()
{
  return &type metadata for GenericViewControllerRepresentable;
}

id protocol witness for UIViewControllerRepresentable.makeUIViewController(context:) in conformance GenericViewControllerRepresentable()
{
  return *v0;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityTouchInfo(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
}

uint64_t AccessibilityDirectTouchOptions.rawValue.getter()
{
  return *(void *)v0;
}

SwiftUI::AccessibilityDirectTouchOptions __swiftcall AccessibilityDirectTouchOptions.init(rawValue:)(SwiftUI::AccessibilityDirectTouchOptions rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

void static AccessibilityDirectTouchOptions.silentOnTouch.getter(void *a1@<X8>)
{
  *a1 = 1;
}

void static AccessibilityDirectTouchOptions.requiresActivation.getter(void *a1@<X8>)
{
  *a1 = 2;
}

ValueMetadata *type metadata accessor for AccessibilityDirectTouchOptions()
{
  return &type metadata for AccessibilityDirectTouchOptions;
}

ValueMetadata *type metadata accessor for AccessibilityTouchInfo()
{
  return &type metadata for AccessibilityTouchInfo;
}

uint64_t KeyboardShortcutBridge.updateKeyCommands(_:)(uint64_t result)
{
  uint64_t v112 = (_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_updatedBindings);
  uint64_t v113 = result;
  int v2 = *(_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_updatedBindings + 8);
  uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_currentBindings;
  if (v2 != -1)
  {
    int v4 = *(_DWORD *)(v3 + 8);
    if (v4 != -1 && v2 == v4) {
      return result;
    }
  }
  uint64_t v114 = (_DWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_currentBindings);
  uint64_t v6 = *(void *)v3;
  uint64_t v7 = *(void *)v112;
  uint64_t v132 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized CollectionChanges.formChanges<A, B>(from:to:)(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v132;
  uint64_t v109 = *(void *)(v132 + 16);
  if (!v109)
  {
    swift_bridgeObjectRelease();
    char v11 = v114;
LABEL_82:
    int v107 = v112[2];
    *(void *)char v11 = *(void *)v112;
    v11[2] = v107;
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRelease();
  }
  unint64_t v9 = 0;
  char v10 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_shortcutMap);
  uint64_t v110 = v132 + 32;
  char v11 = v114;
  uint64_t v108 = v132;
  uint64_t v127 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_shortcutMap);
  while (1)
  {
    if (v9 >= *(void *)(v8 + 16)) {
      goto LABEL_98;
    }
    uint64_t v12 = v110 + 40 * v9;
    uint64_t v14 = *(void *)v12;
    uint64_t v13 = *(void *)(v12 + 8);
    uint64_t v128 = *(void *)v12;
    unint64_t v111 = v9;
    if (*(unsigned char *)(v12 + 32)) {
      break;
    }
    if (v13 != v14)
    {
      uint64_t v47 = (v13 << 6) - 32;
      while (v14 < v13)
      {
        if (v13-- < 1) {
          goto LABEL_85;
        }
        if ((unint64_t)v13 >= *(void *)(*(void *)v11 + 16)) {
          goto LABEL_86;
        }
        uint64_t v49 = *(void *)v11 + v47;
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *(void *)(v49 + 8);
        Swift::UInt v52 = *(void *)(v49 + 16);
        unsigned __int8 v53 = *(unsigned char *)(v49 + 24);
        swift_beginAccess();
        uint64_t v54 = *v10;
        if (*(void *)(*v10 + 16)
          && (unint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v50, v52, v53), (v56 & 1) != 0))
        {
          uint64_t v57 = *(void *)(v54 + 56) + 24 * v55;
          int v58 = *(void **)v57;
          uint64_t v121 = *(void *)(v57 + 8);
          uint64_t v122 = *(void *)(v57 + 16);
          swift_endAccess();
          outlined init with copy of KeyboardShortcutSource?(v113, (uint64_t)&v132);
          uint64_t v59 = v135;
          uint64_t v125 = v58;
          if (v135)
          {
            uint64_t v60 = v136;
            __swift_project_boxed_opaque_existential_1(&v132, v135);
            uint64_t v118 = *(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v60 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain_n();
            id v61 = v58;
            swift_retain();
            swift_retain();
            v118(v61, v121, v122, v59, v60);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
          }
          else
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain_n();
            id v62 = v58;
            swift_retain();
            swift_retain();
            outlined destroy of KeyboardShortcutSource?((uint64_t)&v132);
          }
          swift_beginAccess();
          unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)(v51, v50, v52, v53);
          unint64_t v64 = 0;
          if (v65)
          {
            unint64_t v66 = v63;
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v68 = *v127;
            uint64_t v131 = *v127;
            *uint64_t v127 = 0x8000000000000000;
            if (!isUniquelyReferenced_nonNull_native)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v68 = v131;
            }
            swift_bridgeObjectRelease();
            unint64_t v64 = *(void **)(*(void *)(v68 + 56) + 24 * v66);
            specialized _NativeDictionary._delete(at:)(v66, v68);
            *uint64_t v127 = v68;
            swift_bridgeObjectRelease();
          }
          swift_endAccess();
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();

          swift_bridgeObjectRelease();
          outlined consume of KeyboardShortcutBridge.Shortcut?(v64);
          swift_bridgeObjectRelease();
          char v11 = v114;
          char v10 = v127;
        }
        else
        {
          swift_endAccess();
        }
        v47 -= 64;
        uint64_t v14 = v128;
        if (v128 == v13) {
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:
      __break(1u);
LABEL_87:
      swift_bridgeObjectRelease();
      goto LABEL_82;
    }
LABEL_8:
    unint64_t v9 = v111 + 1;
    uint64_t v8 = v108;
    if (v111 + 1 == v109) {
      goto LABEL_87;
    }
  }
  if (*(unsigned char *)(v12 + 32) == 1)
  {
    if (v14 != v13)
    {
      if (v13 >= v14)
      {
        type metadata accessor for UIKeyCommand();
        uint64_t v15 = (v14 << 6) + 88;
        uint64_t v16 = v14;
        while (v16 < v13)
        {
          if (v14 < 0) {
            goto LABEL_90;
          }
          if ((unint64_t)v16 >= *(void *)(*(void *)v112 + 16)) {
            goto LABEL_92;
          }
          uint64_t v117 = v16;
          uint64_t v120 = v15;
          int v19 = (void *)(*(void *)v112 + v15);
          uint64_t v20 = *(v19 - 6);
          Swift::UInt v21 = *(v19 - 5);
          unsigned __int8 v22 = *((unsigned char *)v19 - 32);
          long long v129 = *(_OWORD *)(v19 - 3);
          uint64_t v23 = *(v19 - 1);
          uint64_t v24 = *v19;
          uint64_t v124 = *(v19 - 7);
          uint64_t v132 = v124;
          uint64_t v133 = v20;
          Swift::UInt v134 = v21;
          LOBYTE(v135) = v22;
          long long v136 = v129;
          uint64_t v137 = v23;
          uint64_t v138 = v24;
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_retain_n();
          id v126 = UIKeyCommand.init(_:)((uint64_t)&v132);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_beginAccess();
          if (*(void *)(*v10 + 16)
            && (specialized __RawDictionaryStorage.find<A>(_:)(v124, v20, v21, v22), (v25 & 1) != 0))
          {
            swift_endAccess();
          }
          else
          {
            Swift::UInt v115 = v21;
            swift_endAccess();
            outlined init with copy of KeyboardShortcutSource?(v113, (uint64_t)&v132);
            uint64_t v26 = v135;
            if (v135)
            {
              uint64_t v27 = v136;
              __swift_project_boxed_opaque_existential_1(&v132, v135);
              uint64_t v28 = *(void (**)(id, void, void, uint64_t, uint64_t))(v27 + 8);
              uint64_t v29 = v20;
              swift_bridgeObjectRetain();
              uint64_t v30 = v126;
              v28(v126, v129, *((void *)&v129 + 1), v26, v27);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
            }
            else
            {
              uint64_t v29 = v20;
              swift_bridgeObjectRetain();
              outlined destroy of KeyboardShortcutSource?((uint64_t)&v132);
              uint64_t v30 = v126;
            }
            swift_beginAccess();
            swift_retain();
            id v31 = v30;
            char v32 = swift_isUniquelyReferenced_nonNull_native();
            char v33 = (void *)*v127;
            *uint64_t v127 = 0x8000000000000000;
            unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v124, v29, v115, v22);
            uint64_t v36 = v33[2];
            BOOL v37 = (v34 & 1) == 0;
            uint64_t v38 = v36 + v37;
            if (__OFADD__(v36, v37)) {
              goto LABEL_94;
            }
            char v39 = v34;
            if (v33[3] >= v38)
            {
              if ((v32 & 1) == 0) {
                specialized _NativeDictionary.copy()();
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v38, v32);
              unint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v124, v20, v115, v22);
              if ((v39 & 1) != (v41 & 1)) {
                goto LABEL_101;
              }
              unint64_t v35 = v40;
            }
            if (v39)
            {
              uint64_t v17 = v33[7] + 24 * v35;
              char v18 = *(void **)v17;
              swift_release();

              *(void *)uint64_t v17 = v31;
              *(_OWORD *)(v17 + 8) = v129;
            }
            else
            {
              v33[(v35 >> 6) + 8] |= 1 << v35;
              uint64_t v42 = v33[6] + 32 * v35;
              *(void *)uint64_t v42 = v124;
              *(void *)(v42 + 8) = v20;
              *(void *)(v42 + 16) = v115;
              *(unsigned char *)(v42 + 24) = v22;
              uint64_t v43 = v33[7] + 24 * v35;
              *(void *)uint64_t v43 = v31;
              *(_OWORD *)(v43 + 8) = v129;
              uint64_t v44 = v33[2];
              BOOL v45 = __OFADD__(v44, 1);
              uint64_t v46 = v44 + 1;
              if (v45) {
                goto LABEL_96;
              }
              v33[2] = v46;
              swift_bridgeObjectRetain();
            }
            *uint64_t v127 = (uint64_t)v33;
            swift_bridgeObjectRelease();
            char v10 = v127;
            swift_bridgeObjectRelease();
            swift_endAccess();
            char v11 = v114;
            uint64_t v14 = v128;
          }
          uint64_t v16 = v117 + 1;

          swift_bridgeObjectRelease();
          swift_release_n();
          swift_bridgeObjectRelease();
          uint64_t v15 = v120 + 64;
          if (v13 == v117 + 1) {
            goto LABEL_8;
          }
        }
        __break(1u);
LABEL_89:
        __break(1u);
LABEL_90:
        __break(1u);
LABEL_91:
        __break(1u);
LABEL_92:
        __break(1u);
LABEL_93:
        __break(1u);
LABEL_94:
        __break(1u);
LABEL_95:
        __break(1u);
LABEL_96:
        __break(1u);
LABEL_97:
        __break(1u);
LABEL_98:
        __break(1u);
      }
      __break(1u);
      goto LABEL_100;
    }
    goto LABEL_8;
  }
  uint64_t v69 = *(void *)(v12 + 16);
  uint64_t v70 = *(void *)(v12 + 24);
  if (v69 == v70) {
    goto LABEL_8;
  }
  if (v70 >= v69)
  {
    uint64_t v71 = (v69 << 6) + 88;
    unint64_t v72 = *(void *)(v12 + 16);
    uint64_t v116 = *(void *)(v12 + 24);
    unint64_t v119 = v72;
    while (1)
    {
      if ((uint64_t)v72 >= v70) {
        goto LABEL_89;
      }
      if (v69 < 0) {
        goto LABEL_91;
      }
      if (v72 >= *(void *)(*(void *)v112 + 16)) {
        goto LABEL_93;
      }
      uint64_t v123 = v71;
      int v76 = (void *)(*(void *)v112 + v71);
      uint64_t v78 = *(v76 - 7);
      uint64_t v77 = *(v76 - 6);
      Swift::UInt v79 = *(v76 - 5);
      unsigned __int8 v80 = *((unsigned char *)v76 - 32);
      long long v130 = *(_OWORD *)(v76 - 3);
      uint64_t v81 = v10;
      uint64_t v82 = *(v76 - 1);
      uint64_t v83 = *v76;
      swift_beginAccess();
      if (*(void *)(*v81 + 16))
      {
        specialized __RawDictionaryStorage.find<A>(_:)(v78, v77, v79, v80);
        if (v84)
        {
          swift_endAccess();
          swift_beginAccess();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain_n();
          swift_retain();
          uint64_t v86 = specialized Dictionary.subscript.modify(&v132, v78, v77, v79, v80);
          uint64_t v87 = *(void **)v85;
          if (*(void *)v85)
          {
            *(_OWORD *)(v85 + 8) = v130;
            outlined copy of KeyboardShortcutBridge.Shortcut?(v87);
            swift_retain();
            ((void (*)(uint64_t *, void))v86)(&v132, 0);
            swift_endAccess();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease_n();
            uint64_t v70 = v116;
            swift_release_n();
          }
          else
          {
            ((void (*)(uint64_t *, void))v86)(&v132, 0);
            swift_endAccess();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease_n();
          }
          uint64_t v75 = v123;
          uint64_t v69 = v119;
          goto LABEL_58;
        }
      }
      swift_endAccess();
      type metadata accessor for UIKeyCommand();
      uint64_t v132 = v78;
      uint64_t v133 = v77;
      Swift::UInt v134 = v79;
      LOBYTE(v135) = v80;
      long long v136 = v130;
      uint64_t v137 = v82;
      uint64_t v138 = v83;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_retain_n();
      id v88 = UIKeyCommand.init(_:)((uint64_t)&v132);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined init with copy of KeyboardShortcutSource?(v113, (uint64_t)&v132);
      uint64_t v89 = v135;
      if (v135)
      {
        uint64_t v90 = v136;
        __swift_project_boxed_opaque_existential_1(&v132, v135);
        (*(void (**)(id, void, void, uint64_t, uint64_t))(v90 + 8))(v88, v130, *((void *)&v130 + 1), v89, v90);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
      }
      else
      {
        outlined destroy of KeyboardShortcutSource?((uint64_t)&v132);
      }
      swift_beginAccess();
      swift_retain();
      id v91 = v88;
      char v92 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v93 = (void *)*v127;
      *uint64_t v127 = 0x8000000000000000;
      unint64_t v95 = specialized __RawDictionaryStorage.find<A>(_:)(v78, v77, v79, v80);
      uint64_t v96 = v93[2];
      BOOL v97 = (v94 & 1) == 0;
      uint64_t v98 = v96 + v97;
      if (__OFADD__(v96, v97)) {
        goto LABEL_95;
      }
      char v99 = v94;
      if (v93[3] >= v98)
      {
        if ((v92 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
        unsigned __int8 v100 = v80;
        if ((v99 & 1) == 0) {
          goto LABEL_77;
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v98, v92);
        unsigned __int8 v100 = v80;
        unint64_t v101 = specialized __RawDictionaryStorage.find<A>(_:)(v78, v77, v79, v80);
        if ((v99 & 1) != (v102 & 1)) {
          goto LABEL_101;
        }
        unint64_t v95 = v101;
        if ((v99 & 1) == 0)
        {
LABEL_77:
          v93[(v95 >> 6) + 8] |= 1 << v95;
          uint64_t v103 = v93[6] + 32 * v95;
          *(void *)uint64_t v103 = v78;
          *(void *)(v103 + 8) = v77;
          *(void *)(v103 + 16) = v79;
          *(unsigned char *)(v103 + 24) = v100;
          uint64_t v104 = v93[7] + 24 * v95;
          *(void *)uint64_t v104 = v91;
          *(_OWORD *)(v104 + 8) = v130;
          uint64_t v105 = v93[2];
          BOOL v45 = __OFADD__(v105, 1);
          uint64_t v106 = v105 + 1;
          if (v45) {
            goto LABEL_97;
          }
          v93[2] = v106;
          swift_bridgeObjectRetain();
          goto LABEL_57;
        }
      }
      uint64_t v73 = v93[7] + 24 * v95;
      int v74 = *(void **)v73;
      swift_release();

      *(void *)uint64_t v73 = v91;
      *(_OWORD *)(v73 + 8) = v130;
LABEL_57:
      *uint64_t v127 = (uint64_t)v93;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release_n();

      char v11 = v114;
      uint64_t v70 = v116;
      uint64_t v69 = v119;
      uint64_t v75 = v123;
LABEL_58:
      ++v72;
      uint64_t v71 = v75 + 64;
      char v10 = v127;
      if (v70 == v72) {
        goto LABEL_8;
      }
    }
  }
LABEL_100:
  __break(1u);
LABEL_101:
  double result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id UIKeyCommand.init(_:)(uint64_t a1)
{
  uint64_t countAndFlagsBits = *(void *)a1;
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  char v4 = *(unsigned char *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = one-time initialization token for keyEquivalentToKeyInputMap;
  swift_bridgeObjectRetain();
  if (v6 != -1) {
    swift_once();
  }
  rawuint64_t Value = keyEquivalentToKeyInputMap._rawValue;
  if (!*((void *)keyEquivalentToKeyInputMap._rawValue + 2))
  {
    unint64_t object = v1;
    char v21 = v4;
    if ((v3 & 1) == 0) {
      goto LABEL_7;
    }
LABEL_11:
    if ((v3 & 2) == 0)
    {
      uint64_t v12 = 0x10000;
      if ((v3 & 4) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    uint64_t v12 = 196608;
    if ((v3 & 4) != 0) {
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(countAndFlagsBits, v1);
  unint64_t object = v1;
  if (v10)
  {
    char v11 = (uint64_t *)(rawValue[7] + 16 * v8);
    uint64_t countAndFlagsBits = *v11;
    unint64_t object = v11[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  char v21 = v4;
  if (v3) {
    goto LABEL_11;
  }
LABEL_7:
  if ((v3 & 2) == 0)
  {
    uint64_t v12 = 0;
    if ((v3 & 4) == 0) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  uint64_t v12 = 0x20000;
  if ((v3 & 4) != 0) {
LABEL_13:
  }
    v12 |= 0x40000uLL;
LABEL_14:
  if ((v3 & 8) == 0)
  {
    if ((v3 & 0x10) == 0) {
      goto LABEL_16;
    }
LABEL_25:
    v12 |= 0x100000uLL;
    if ((v3 & 0x20) == 0) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  v12 |= 0x80000uLL;
  if ((v3 & 0x10) != 0) {
    goto LABEL_25;
  }
LABEL_16:
  if ((v3 & 0x20) != 0) {
LABEL_17:
  }
    v12 |= 0x200000uLL;
LABEL_18:
  swift_bridgeObjectRetain();
  specialized Collection.first.getter(countAndFlagsBits, object);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  if (v14)
  {
    char v15 = Character.isUppercase.getter();
    swift_bridgeObjectRelease();
    if (v15)
    {
      static Semantics.v3.getter();
      if ((isLinkedOnOrAfter(_:)() & 1) == 0)
      {
        Swift::String v16 = String.lowercased()();
        uint64_t countAndFlagsBits = v16._countAndFlagsBits;
        swift_bridgeObjectRelease();
        v12 |= 0x20000uLL;
        unint64_t object = (unint64_t)v16._object;
      }
    }
  }
  if (v5)
  {
    swift_bridgeObjectRetain();
    id v17 = (id)UIKeyCommand.init(title:image:action:input:modifierFlags:propertyList:alternates:discoverabilityTitle:attributes:state:)();
  }
  else
  {
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    int v19 = (void *)MEMORY[0x18C115780](countAndFlagsBits, object);
    swift_bridgeObjectRelease();
    id v17 = objc_msgSend(ObjCClassFromMetadata, sel_keyCommandWithInput_modifierFlags_action_, v19, v12, sel__performShortcutKeyCommand_);
  }
  swift_bridgeObjectRetain();
  objc_msgSend(v17, sel_setAllowsAutomaticLocalization_, (3u >> (v21 & 7)) & 1);
  objc_msgSend(v17, sel_setAllowsAutomaticMirroring_, (v21 & 7) == 0);
  swift_release();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return v17;
}

Swift::Void __swiftcall KeyboardShortcutBridge._performShortcutKeyCommand(_:)(UIKeyCommand *a1)
{
  KeyboardShortcut.init(_:)(a1, (uint64_t)&v12);
  uint64_t v2 = v13;
  if (v13)
  {
    uint64_t v3 = v12;
    Swift::UInt v4 = v14;
    unsigned __int8 v5 = v15;
    uint64_t v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_shortcutMap);
    swift_beginAccess();
    uint64_t v7 = *v6;
    if (*(void *)(v7 + 16) && (unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(v3, v2, v4, v5), (v9 & 1) != 0))
    {
      char v10 = *(void **)(*(void *)(v7 + 56) + 24 * v8);
      swift_endAccess();
      id v11 = v10;
      swift_retain_n();
      outlined consume of KeyboardShortcutBridge.Shortcut?(v10);
      swift_bridgeObjectRelease();
      static Update.enqueueAction(_:)();
      swift_release();
    }
    else
    {
      swift_endAccess();
      swift_bridgeObjectRelease();
    }
  }
}

id protocol witness for KeyboardShortcutSource.addShortcut(_:) in conformance UIHostingController<A>(uint64_t a1)
{
  return specialized UIHostingController.addShortcut(_:)(a1);
}

id protocol witness for KeyboardShortcutSource.removeShortcut(_:) in conformance UIHostingController<A>(uint64_t a1)
{
  return specialized UIHostingController.removeShortcut(_:)(a1);
}

uint64_t initializeBufferWithCopyOfBuffer for KeyboardShortcutBridge.Shortcut(uint64_t a1, long long *a2)
{
  uint64_t v3 = *((void *)a2 + 2);
  long long v4 = *a2;
  *(_OWORD *)a1 = *a2;
  *(void *)(a1 + 16) = v3;
  id v5 = (id)v4;
  swift_retain();
  return a1;
}

uint64_t destroy for KeyboardShortcutBridge.Shortcut(id *a1)
{
  return swift_release();
}

uint64_t assignWithCopy for KeyboardShortcutBridge.Shortcut(uint64_t a1, uint64_t a2)
{
  long long v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v7;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for KeyboardShortcutBridge.Shortcut(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for KeyboardShortcutBridge.Shortcut()
{
  return &type metadata for KeyboardShortcutBridge.Shortcut;
}

uint64_t outlined init with copy of KeyboardShortcutSource?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for KeyboardShortcutSource?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id specialized UIHostingController.removeShortcut(_:)(uint64_t a1)
{
  return objc_msgSend(v1, sel_removeKeyCommand_, a1);
}

id specialized UIHostingController.addShortcut(_:)(uint64_t a1)
{
  return objc_msgSend(v1, sel_addKeyCommand_, a1);
}

unint64_t type metadata accessor for UIKeyCommand()
{
  unint64_t result = lazy cache variable for type metadata for UIKeyCommand;
  if (!lazy cache variable for type metadata for UIKeyCommand)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIKeyCommand);
  }
  return result;
}

void UIPress.resolve(phase:)(char *a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = *a1;
  id v5 = objc_msgSend(v2, sel_key);
  if (v5)
  {
    id v6 = v5;
    objc_msgSend(v2, sel_timestamp);
    uint64_t v8 = v7;
    uint64_t v9 = specialized EventModifiers.init(_:)((int)objc_msgSend(v6, sel_modifierFlags));
    id v10 = objc_msgSend(v6, sel_charactersIgnoringModifiers);
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    if (one-time initialization token for keyInputToKeyEquivalentMap != -1) {
      swift_once();
    }
    rawuint64_t Value = keyInputToKeyEquivalentMap._rawValue;
    if (*((void *)keyInputToKeyEquivalentMap._rawValue + 2))
    {
      swift_bridgeObjectRetain();
      unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v13);
      uint64_t v16 = v13;
      if (v17)
      {
        char v18 = (uint64_t *)(rawValue[7] + 16 * v15);
        uint64_t v11 = *v18;
        uint64_t v16 = v18[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v13 = v16;
    }
    id v19 = objc_msgSend(v6, sel_characters);
    uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v22 = v21;

    uint64_t v23 = keyInputToKeyEquivalentMap._rawValue;
    if (*((void *)keyInputToKeyEquivalentMap._rawValue + 2))
    {
      swift_bridgeObjectRetain();
      unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v20, v22);
      uint64_t v25 = v22;
      if (v26)
      {
        uint64_t v27 = (uint64_t *)(v23[7] + 16 * v24);
        uint64_t v20 = *v27;
        uint64_t v25 = v27[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v22 = v25;
    }
    objc_msgSend(v6, sel_keyCode);
    type metadata accessor for UIKeyboardHIDUsage(0);
    lazy protocol witness table accessor for type UIKeyboardHIDUsage and conformance UIKeyboardHIDUsage();
    AnyHashable.init<A>(_:)();

    *(unsigned char *)a2 = v4;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = v9;
    *(void *)(a2 + 32) = v11;
    *(void *)(a2 + 40) = v13;
    *(void *)(a2 + 48) = v20;
    *(void *)(a2 + 56) = v22;
  }
  else
  {
    *(void *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

void KeyboardShortcut.init(_:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4 = objc_msgSend(a1, sel_input);
  if (!v4) {
    goto LABEL_15;
  }
  id v5 = v4;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v8 = v7;

  uint64_t v9 = HIBYTE(v8) & 0xF;
  if ((v8 & 0x2000000000000000) == 0) {
    uint64_t v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (!v9)
  {
    swift_bridgeObjectRelease();
LABEL_15:

    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 24) = 0;
    *(void *)(a2 + 16) = 0;
    return;
  }
  if (one-time initialization token for keyInputToKeyEquivalentMap != -1) {
    swift_once();
  }
  rawuint64_t Value = keyInputToKeyEquivalentMap._rawValue;
  if (*((void *)keyInputToKeyEquivalentMap._rawValue + 2))
  {
    swift_bridgeObjectRetain();
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v6, v8);
    if ((v12 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      if ((v8 & 0x2000000000000000) == 0) {
        goto LABEL_11;
      }
      goto LABEL_17;
    }
    uint64_t v13 = (uint64_t *)(rawValue[7] + 16 * v11);
    uint64_t v6 = *v13;
    unint64_t v14 = v13[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease_n();
    unint64_t v8 = v14;
  }
  if ((v8 & 0x2000000000000000) == 0)
  {
LABEL_11:
    if ((v6 & 0xFFFFFFFFFFFFLL) != 0)
    {
      if ((v6 & 0x1000000000000000) == 0)
      {
        uint64_t v6 = static String._copying(_:)();
        unint64_t v16 = v15;
        swift_bridgeObjectRelease();
        unint64_t v8 = v16;
      }
      goto LABEL_18;
    }
    __break(1u);
    goto LABEL_20;
  }
LABEL_17:
  if ((v8 & 0xF00000000000000) != 0)
  {
LABEL_18:
    int v17 = objc_msgSend(a1, sel_modifierFlags);

    uint64_t v18 = specialized EventModifiers.init(_:)(v17);
    *(void *)a2 = v6;
    *(void *)(a2 + 8) = v8;
    *(void *)(a2 + 16) = v18;
    *(unsigned char *)(a2 + 24) = 0;
    return;
  }
LABEL_20:
  __break(1u);
}

void *one-time initialization function for keyInputToKeyEquivalentMap()
{
  type metadata accessor for _ContiguousArrayStorage<(String, Character)>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18839A680;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v1;
  *(void *)(inited + 48) = 8428783;
  *(void *)(inited + 56) = 0xA300000000000000;
  *(void *)(inited + 64) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 72) = v2;
  *(void *)(inited + 80) = 8494319;
  *(void *)(inited + 88) = 0xA300000000000000;
  *(void *)(inited + 96) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 104) = v3;
  *(void *)(inited + 112) = 8559855;
  *(void *)(inited + 120) = 0xA300000000000000;
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v4;
  *(void *)(inited + 144) = 8625391;
  *(void *)(inited + 152) = 0xA300000000000000;
  *(void *)(inited + 160) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 168) = v5;
  *(void *)(inited + 176) = 27;
  *(void *)(inited + 184) = 0xE100000000000000;
  *(void *)(inited + 192) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 200) = v6;
  *(void *)(inited + 208) = 8;
  *(void *)(inited + 216) = 0xE100000000000000;
  *(void *)(inited + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 232) = v7;
  *(void *)(inited + 240) = 11312367;
  *(void *)(inited + 248) = 0xA300000000000000;
  *(void *)(inited + 256) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 264) = v8;
  *(void *)(inited + 272) = 11377903;
  *(void *)(inited + 280) = 0xA300000000000000;
  *(void *)(inited + 288) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 296) = v9;
  *(void *)(inited + 304) = 11115759;
  *(void *)(inited + 312) = 0xA300000000000000;
  *(void *)(inited + 320) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 328) = v10;
  *(void *)(inited + 336) = 11246831;
  *(void *)(inited + 344) = 0xA300000000000000;
  *(void *)(inited + 352) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 360) = v11;
  *(void *)(inited + 368) = 8690927;
  *(void *)(inited + 376) = 0xA300000000000000;
  *(void *)(inited + 384) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 392) = v12;
  *(void *)(inited + 400) = 8756463;
  *(void *)(inited + 408) = 0xA300000000000000;
  *(void *)(inited + 416) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 424) = v13;
  *(void *)(inited + 432) = 8821999;
  *(void *)(inited + 440) = 0xA300000000000000;
  *(void *)(inited + 448) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 456) = v14;
  *(void *)(inited + 464) = 8887535;
  *(void *)(inited + 472) = 0xA300000000000000;
  *(void *)(inited + 480) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 488) = v15;
  *(void *)(inited + 496) = 8953071;
  *(void *)(inited + 504) = 0xA300000000000000;
  *(void *)(inited + 512) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 520) = v16;
  *(void *)(inited + 528) = 9018607;
  *(void *)(inited + 536) = 0xA300000000000000;
  *(void *)(inited + 544) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 552) = v17;
  *(void *)(inited + 560) = 9084143;
  *(void *)(inited + 568) = 0xA300000000000000;
  *(void *)(inited + 576) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 584) = v18;
  *(void *)(inited + 592) = 9149679;
  *(void *)(inited + 600) = 0xA300000000000000;
  *(void *)(inited + 608) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 616) = v19;
  *(void *)(inited + 624) = 9215215;
  *(void *)(inited + 632) = 0xA300000000000000;
  *(void *)(inited + 640) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 648) = v20;
  *(void *)(inited + 656) = 9280751;
  *(void *)(inited + 664) = 0xA300000000000000;
  *(void *)(inited + 672) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 680) = v21;
  *(void *)(inited + 688) = 9346287;
  *(void *)(inited + 696) = 0xA300000000000000;
  *(void *)(inited + 704) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 712) = v22;
  *(void *)(inited + 720) = 9411823;
  *(void *)(inited + 728) = 0xA300000000000000;
  unint64_t result = (void *)specialized Dictionary.init(dictionaryLiteral:)(inited);
  keyInputToKeyEquivalentMap._rawuint64_t Value = result;
  return result;
}

uint64_t one-time initialization function for keyEquivalentToKeyInputMap()
{
  if (one-time initialization token for keyInputToKeyEquivalentMap != -1) {
LABEL_44:
  }
    swift_once();
  rawuint64_t Value = keyInputToKeyEquivalentMap._rawValue;
  uint64_t v1 = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  char v34 = rawValue + 64;
  uint64_t v2 = 1 << rawValue[32];
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *((void *)rawValue + 8);
  int64_t v35 = (unint64_t)(v2 + 63) >> 6;
  uint64_t v36 = rawValue;
  swift_bridgeObjectRetain_n();
  int64_t v5 = 0;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v5 << 6);
      goto LABEL_27;
    }
    int64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_43;
    }
    if (v9 >= v35)
    {
LABEL_38:
      swift_release();
      keyEquivalentToKeyInputMap._rawuint64_t Value = v1;
      return swift_bridgeObjectRelease();
    }
    unint64_t v10 = *(void *)&v34[8 * v9];
    ++v5;
    if (!v10)
    {
      int64_t v5 = v9 + 1;
      if (v9 + 1 >= v35) {
        goto LABEL_38;
      }
      unint64_t v10 = *(void *)&v34[8 * v5];
      if (!v10)
      {
        int64_t v5 = v9 + 2;
        if (v9 + 2 >= v35) {
          goto LABEL_38;
        }
        unint64_t v10 = *(void *)&v34[8 * v5];
        if (!v10)
        {
          int64_t v5 = v9 + 3;
          if (v9 + 3 >= v35) {
            goto LABEL_38;
          }
          unint64_t v10 = *(void *)&v34[8 * v5];
          if (!v10)
          {
            int64_t v5 = v9 + 4;
            if (v9 + 4 >= v35) {
              goto LABEL_38;
            }
            unint64_t v10 = *(void *)&v34[8 * v5];
            if (!v10) {
              break;
            }
          }
        }
      }
    }
LABEL_26:
    unint64_t v4 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v5 << 6);
LABEL_27:
    uint64_t v12 = 16 * v8;
    uint64_t v13 = (uint64_t *)(*((void *)v36 + 6) + v12);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = (uint64_t *)(*((void *)v36 + 7) + v12);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
    uint64_t v22 = v1[2];
    BOOL v23 = (v20 & 1) == 0;
    uint64_t v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      goto LABEL_44;
    }
    char v25 = v20;
    if (v1[3] >= v24)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v20) {
          goto LABEL_5;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v25) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
      uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v17);
      if ((v25 & 1) != (v27 & 1)) {
        goto LABEL_46;
      }
      unint64_t v21 = v26;
      if (v25)
      {
LABEL_5:
        uint64_t v6 = (void *)(v1[7] + 16 * v21);
        swift_bridgeObjectRelease();
        *uint64_t v6 = v14;
        v6[1] = v15;
        goto LABEL_6;
      }
    }
    v1[(v21 >> 6) + 8] |= 1 << v21;
    uint64_t v28 = (uint64_t *)(v1[6] + 16 * v21);
    *uint64_t v28 = v18;
    v28[1] = v17;
    uint64_t v29 = (void *)(v1[7] + 16 * v21);
    *uint64_t v29 = v14;
    v29[1] = v15;
    uint64_t v30 = v1[2];
    BOOL v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31) {
      goto LABEL_42;
    }
    v1[2] = v32;
    swift_bridgeObjectRetain();
LABEL_6:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
  }
  int64_t v11 = v9 + 5;
  if (v11 >= v35) {
    goto LABEL_38;
  }
  unint64_t v10 = *(void *)&v34[8 * v11];
  if (v10)
  {
    int64_t v5 = v11;
    goto LABEL_26;
  }
  while (1)
  {
    int64_t v5 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v5 >= v35) {
      goto LABEL_38;
    }
    unint64_t v10 = *(void *)&v34[8 * v5];
    ++v11;
    if (v10) {
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_46:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized EventModifiers.init(_:)(int a1)
{
  if ((a1 & 0x10000) != 0)
  {
    if ((a1 & 0x20000) != 0)
    {
      uint64_t v1 = 3;
      if ((a1 & 0x40000) != 0) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v1 = 1;
      if ((a1 & 0x40000) != 0) {
        goto LABEL_4;
      }
    }
  }
  else
  {
    if ((a1 & 0x20000) == 0)
    {
      uint64_t v1 = 0;
      if ((a1 & 0x40000) == 0) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
    uint64_t v1 = 2;
    if ((a1 & 0x40000) != 0) {
LABEL_4:
    }
      v1 |= 4uLL;
  }
LABEL_5:
  if ((a1 & 0x80000) == 0)
  {
    if ((a1 & 0x100000) == 0) {
      goto LABEL_7;
    }
LABEL_14:
    v1 |= 0x10uLL;
    if ((a1 & 0x200000) == 0) {
      return v1;
    }
    return v1 | 0x20;
  }
  v1 |= 8uLL;
  if ((a1 & 0x100000) != 0) {
    goto LABEL_14;
  }
LABEL_7:
  if ((a1 & 0x200000) != 0) {
    return v1 | 0x20;
  }
  return v1;
}

void type metadata accessor for _ContiguousArrayStorage<(String, Character)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Character)>)
  {
    type metadata accessor for (String, Character)();
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Character)>);
    }
  }
}

void type metadata accessor for (String, Character)()
{
  if (!lazy cache variable for type metadata for (String, Character))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (String, Character));
    }
  }
}

unint64_t lazy protocol witness table accessor for type UIKeyboardHIDUsage and conformance UIKeyboardHIDUsage()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKeyboardHIDUsage and conformance UIKeyboardHIDUsage;
  if (!lazy protocol witness table cache variable for type UIKeyboardHIDUsage and conformance UIKeyboardHIDUsage)
  {
    type metadata accessor for UIKeyboardHIDUsage(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKeyboardHIDUsage and conformance UIKeyboardHIDUsage);
  }
  return result;
}

uint64_t View.labelGroupStyle_v0<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for LabelGroupStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t default associated conformance accessor for LabelGroupStyle_v0.LabelGroupStyle_v0.Foreground: ShapeStyle()
{
  return MEMORY[0x1E4F40950];
}

uint64_t dispatch thunk of LabelGroupStyle_v0.font(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of LabelGroupStyle_v0.foregroundStyle(at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t sub_187D290BC()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedLabelGroupStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedLabelGroupStyle and conformance ResolvedLabelGroupStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedLabelGroupStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LabelGroupStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance LabelGroupStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance LabelGroupStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for LabelGroupStyleModifier<A>, MEMORY[0x1E4F3F798]);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance StyleApplicator<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD020](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._viewListCount(inputs:body:) in conformance StyleApplicator<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance LabelGroupStyleModifier<A>(a1, a2, a3, a4, a5, (uint64_t)&protocol conformance descriptor for StyleApplicator<A>, MEMORY[0x1E4F3F320]);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance LabelGroupStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return a7(a1, a2, a3, a4, WitnessTable);
}

uint64_t getEnumTagSinglePayload for LabelGroupStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for LabelGroupStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187D2973CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_187D29764()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for StyleApplicator<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_187D2983C()
{
  return _ViewList_View.viewID.getter();
}

uint64_t sub_187D29860()
{
  return 16;
}

__n128 sub_187D2986C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187D29878()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for StyleApplicator() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + ((v2 + 32) & ~v2), v1);

  return swift_deallocObject();
}

uint64_t assignWithCopy for StyleApplicator.EnumeratedView(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v4 = *(void **)(a1 + 80);
  unsigned int v5 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v5;
  id v6 = v5;

  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t assignWithTake for StyleApplicator.EnumeratedView(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  id v6 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);

  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  return a1;
}

uint64_t sub_187D29A98()
{
  return swift_getWitnessTable();
}

void static UIViewPlatformViewDefinition.setProjectionTransform(_:projectionView:)(int a1, id a2)
{
  id v2 = objc_msgSend(a2, sel_layer);
  CATransform3D.init(_:)();
  v3[0] = v3[8];
  v3[1] = v3[9];
  v3[2] = v3[10];
  v3[3] = v3[11];
  v3[4] = v3[12];
  v3[5] = v3[13];
  v3[6] = v3[14];
  v3[7] = v3[15];
  objc_msgSend(v2, sel_setTransform_, v3);
}

id static UIViewPlatformViewDefinition.getRBLayer(drawingView:)()
{
  type metadata accessor for RBDrawingView();
  swift_unknownObjectRetain();
  uint64_t v0 = (void *)swift_dynamicCastClass();
  if (v0)
  {
    id v1 = objc_msgSend(v0, sel_layer);
    swift_unknownObjectRelease();
  }
  else
  {
    swift_unknownObjectRelease();
    return 0;
  }
  return v1;
}

uint64_t ObjC metadata update function for UIViewPlatformViewDefinition()
{
  return type metadata accessor for UIViewPlatformViewDefinition();
}

id _UIGraphicsView.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for _UIGraphicsView();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void __swiftcall _UIInheritedView.hitTest(_:with:)(UIView_optional *__return_ptr retstr, CGPoint _, UIEvent_optional with)
{
  Class isa = with.value.super.isa;
  double y = _.y;
  double x = _.x;
  if ((UIViewIgnoresTouchEvents() & 1) == 0)
  {
    id v7 = objc_msgSend(v3, sel_subviews);
    type metadata accessor for UIView();
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62) {
      goto LABEL_17;
    }
    unint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9)
    {
      do
      {
        while (__OFSUB__(v9--, 1))
        {
          __break(1u);
LABEL_15:
          __break(1u);
LABEL_16:
          __break(1u);
LABEL_17:
          swift_bridgeObjectRetain();
          unint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v9) {
            goto LABEL_12;
          }
        }
        if ((v8 & 0xC000000000000001) != 0)
        {
          id v11 = (id)MEMORY[0x18C117680](v9, v8);
          goto LABEL_10;
        }
        if ((v9 & 0x8000000000000000) != 0) {
          goto LABEL_15;
        }
        if (v9 >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_16;
        }
        id v11 = *(id *)(v8 + 32 + 8 * v9);
LABEL_10:
        unsigned int v12 = v11;
        objc_msgSend(v3, sel_convertPoint_toCoordinateSpace_, v11, x, y);
        id v13 = objc_msgSend(v12, sel_hitTest_withEvent_, isa);
      }
      while (!v13 && v9);
    }
LABEL_12:
    swift_bridgeObjectRelease();
  }
}

uint64_t _UIShapeHitTestingView.__ivar_destroyer()
{
  return outlined consume of Path.Storage(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path), *(void *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path + 8), *(void *)(v0+ OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path+ 16), *(void *)(v0+ OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path+ 24), *(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path + 32));
}

uint64_t EnvironmentValues.listItemTint.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>, (uint64_t)&type metadata for ListItemTintKey, (uint64_t)&protocol witness table for ListItemTintKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>, (uint64_t)&type metadata for ListItemTintKey, (uint64_t)&protocol witness table for ListItemTintKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t static ListItemTint.fixed(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(unsigned char *)(a2 + 8) = 1;
  return swift_retain();
}

uint64_t static ListItemTint.preferred(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = a1;
  *(unsigned char *)(a2 + 8) = 0;
  return swift_retain();
}

void one-time initialization function for monochrome()
{
  static ListItemTint.monochrome = 0;
  byte_1E902A2C8 = 1;
}

uint64_t static ListItemTint.monochrome.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for monochrome != -1) {
    swift_once();
  }
  char v2 = byte_1E902A2C8;
  *(void *)a1 = static ListItemTint.monochrome;
  *(unsigned char *)(a1 + 8) = v2;

  return swift_retain();
}

uint64_t View.listItemTint(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.listItemTint(_:)(uint64_t a1)
{
  if (a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = 1;
  }
  swift_retain();
  View._trait<A>(_:_:)();
  return outlined consume of Transaction?(v2);
}

void static ListItemTintTraitKey.defaultValue.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 0;
}

ValueMetadata *type metadata accessor for ListItemTintTraitKey()
{
  return &type metadata for ListItemTintTraitKey;
}

uint64_t sub_187D2A530()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ListItemTintTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<ListItemTintTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ListItemTintTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ListItemTintTraitKey>, (uint64_t)&type metadata for ListItemTintTraitKey, (uint64_t)&protocol witness table for ListItemTintTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ListItemTintTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ListItemTintKey()
{
  return &type metadata for ListItemTintKey;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListItemTintKey(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t AnyTabContent.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for AnyTabContentStorage();
  uint64_t result = LimitedAvailabilityCommandContentStorage.__allocating_init(_:)(a1);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for AnyTabContentStorage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnyTabContent._identifiedView.getter()
{
  return (*(uint64_t (**)(void))(**(void **)v0 + 80))();
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in AnyTabContent<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance AnyTabContent<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AnyTabContent._identifiedView.getter();
  *a1 = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for AnyTabContent<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for AnyTabContent()
{
  return __swift_instantiateGenericMetadata();
}

void AnyTabContentStorageBase.identifiedView.getter()
{
}

uint64_t type metadata accessor for AnyTabContentStorageBase()
{
  return self;
}

uint64_t AnyTabContentStorage.identifiedView.getter()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 104);
  uint64_t v2 = *(void *)(*(void *)v0 + 96);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v4 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, double))(v1 + 56))(v2, v1, v4);
  swift_getAssociatedConformanceWitness();
  return AnyView.init<A>(_:)();
}

double CGVector.subscript.getter(char a1, double a2, double a3)
{
  if (a1) {
    return a3;
  }
  return result;
}

double static CGVector.infinity.getter()
{
  return INFINITY;
}

BOOL CGVector.isFinite.getter(double a1, double a2)
{
  return (~*(void *)&a2 & 0x7FF0000000000000) != 0 && (~*(void *)&a1 & 0x7FF0000000000000) != 0;
}

uint64_t CGVector.isNaN.getter(double a1, double a2)
{
  BOOL v2 = (~*(void *)&a2 & 0x7FF0000000000000) == 0 && (*(void *)&a2 & 0xFFFFFFFFFFFFFLL) != 0;
  return (~*(void *)&a1 & 0x7FF0000000000000) == 0 && (*(void *)&a1 & 0xFFFFFFFFFFFFFLL) != 0 || v2;
}

uint64_t CGVector.subscript.setter(uint64_t result, double a2)
{
  *(double *)(v2 + 8 * (result & 1)) = a2;
  return result;
}

double (*CGVector.subscript.modify(uint64_t a1, char a2))(uint64_t a1)
{
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = a2;
  uint64_t v3 = v2 + 1;
  if ((a2 & 1) == 0) {
    uint64_t v3 = v2;
  }
  *(void *)a1 = *v3;
  return CGVector.subscript.modify;
}

double CGVector.subscript.modify(uint64_t a1)
{
  double result = *(double *)a1;
  *(void *)(*(void *)(a1 + 8) + 8 * (*(unsigned char *)(a1 + 16) & 1)) = *(void *)a1;
  return result;
}

double CGVector.init(_:in:by:)(char a1, double a2, double a3)
{
  if (a1) {
    return a3;
  }
  return a2;
}

double sub_187D2AA3C@<D0>(double *a1@<X0>, unsigned char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a1 + 1;
  if (!*a2) {
    uint64_t v3 = a1;
  }
  double result = *v3;
  *a3 = *(void *)v3;
  return result;
}

void *sub_187D2AA58(void *result, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = 8;
  if (!*a3) {
    uint64_t v3 = 0;
  }
  *(void *)(a2 + v3) = *result;
  return result;
}

uint64_t sub_187D2AA74()
{
  return 0;
}

uint64_t static AnimatedValueTrackBuilder.buildExpression(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AnimatedValueTrack();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, a1, v4);
}

uint64_t static AnimatedValueTrackBuilder.buildPartialBlock(accumulated:next:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AnimatedValueTrack();
  return AnimatedValueTrack.appending(track:)(a1, v4, a2);
}

uint64_t type metadata accessor for AnimatedValueTrackBuilder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for AnyTransferable()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for AnyTransferable(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for AnyTransferable(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for AnyTransferable(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AnyTransferable()
{
  return &type metadata for AnyTransferable;
}

void type metadata accessor for String?()
{
  if (!lazy cache variable for type metadata for String?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for String?);
    }
  }
}

uint64_t closure #3 in AnyTransferable.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  void v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  type metadata accessor for UTType?();
  v5[7] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UTType();
  v5[8] = v7;
  v5[9] = *(void *)(v7 - 8);
  v5[10] = swift_task_alloc();
  v5[11] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Optional();
  v5[12] = v8;
  v5[13] = *(void *)(v8 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = *(void *)(a4 - 8);
  v5[16] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #3 in AnyTransferable.init<A>(_:), 0, 0);
}

uint64_t closure #3 in AnyTransferable.init<A>(_:)()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 40);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 104) + 16))(v1, *(void *)(v0 + 32), *(void *)(v0 + 96));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
    uint64_t v4 = type metadata accessor for TransferableError();
    _s22UniformTypeIdentifiers6UTTypeVACSHAAWlTm_0(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, MEMORY[0x1E4F248F8]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v5, *MEMORY[0x1E4F248E8], v4);
    swift_willThrow();
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    id v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  uint64_t v8 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v10 = *(void *)(v0 + 56);
  uint64_t v11 = *(void *)(v0 + 24);
  (*(void (**)(void, void, void))(*(void *)(v0 + 120) + 32))(*(void *)(v0 + 128), *(void *)(v0 + 112), *(void *)(v0 + 40));
  _s22UniformTypeIdentifiers6UTTypeVSgWOcTm_0(v11, v10, (uint64_t (*)(void))type metadata accessor for UTType?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) == 1)
  {
    outlined destroy of UTType?(*(void *)(v0 + 56));
    uint64_t v12 = static Transferable.writableContentTypes.getter();
    *(void *)(v0 + 136) = v12;
    uint64_t v13 = *(void *)(v12 + 16);
    *(void *)(v0 + 144) = v13;
    if (!v13)
    {
      swift_bridgeObjectRelease();
      uint64_t v29 = *(void *)(v0 + 120);
      uint64_t v28 = *(void *)(v0 + 128);
      uint64_t v30 = *(void *)(v0 + 40);
      uint64_t v31 = type metadata accessor for TransferableError();
      _s22UniformTypeIdentifiers6UTTypeVACSHAAWlTm_0(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, MEMORY[0x1E4F248F8]);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104))(v32, *MEMORY[0x1E4F248E8], v31);
      swift_willThrow();
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
      goto LABEL_3;
    }
    uint64_t v14 = *(void *)(v0 + 64);
    uint64_t v15 = *(void *)(v0 + 72);
    uint64_t v16 = *(void (**)(void, unint64_t, uint64_t))(v15 + 16);
    v15 += 16;
    int v17 = *(_DWORD *)(v15 + 64);
    *(_DWORD *)(v0 + 240) = v17;
    *(void *)(v0 + 152) = *(void *)(v15 + 56);
    *(void *)(v0 + 160) = v16;
    *(void *)(v0 + 208) = 0;
    v16(*(void *)(v0 + 80), v12 + ((v17 + 32) & ~(unint64_t)v17), v14);
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v18;
    *uint64_t v18 = v0;
    v18[1] = closure #3 in AnyTransferable.init<A>(_:);
    uint64_t v19 = *(void *)(v0 + 80);
  }
  else
  {
    uint64_t v20 = *(void *)(v0 + 88);
    uint64_t v21 = *(void *)(v0 + 64);
    uint64_t v22 = *(void *)(v0 + 72);
    uint64_t v23 = *(void *)(v0 + 56);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
    *(void *)(v0 + 168) = v24;
    *(void *)(v0 + 176) = (v22 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v24(v20, v23, v21);
    char v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v25;
    *char v25 = v0;
    v25[1] = closure #3 in AnyTransferable.init<A>(_:);
    uint64_t v19 = *(void *)(v0 + 88);
  }
  uint64_t v26 = *(void *)(v0 + 40);
  uint64_t v27 = *(void *)(v0 + 48);
  return MEMORY[0x1F40DFA18](v19, v26, v27);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t v11;

  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[8];
  uint64_t v5 = v0[9];
  id v6 = v0[5];
  uint64_t v7 = type metadata accessor for TransferableError();
  _s22UniformTypeIdentifiers6UTTypeVACSHAAWlTm_0(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, MEMORY[0x1E4F248F8]);
  swift_allocError();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104))(v8, *MEMORY[0x1E4F248E8], v7);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v6);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Class isa;
  id v10;
  uint64_t (*v11)(id);
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;

  uint64_t v1 = v0[24];
  uint64_t v2 = v0[25];
  uint64_t v14 = (void (*)(uint64_t, uint64_t, uint64_t))v0[21];
  uint64_t v4 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v13 = v0[11];
  uint64_t v5 = v0[8];
  id v6 = v0[5];
  uint64_t v7 = v0[2];
  uint64_t v8 = objc_allocWithZone(MEMORY[0x1E4F28CF0]);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v10 = objc_msgSend(v8, sel_initRegularFileWithContents_, isa);
  outlined consume of Data._Representation(v2, v1);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  v14(v7, v13, v5);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(id))v0[1];
  return v11(v10);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 208) + 1;
  (*(void (**)(void, void))(*(void *)(v0 + 72) + 8))(*(void *)(v0 + 80), *(void *)(v0 + 64));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v3 = *(void *)(v0 + 128);
    uint64_t v5 = *(void *)(v0 + 40);
    id v6 = type metadata accessor for TransferableError();
    _s22UniformTypeIdentifiers6UTTypeVACSHAAWlTm_0(&lazy protocol witness table cache variable for type TransferableError and conformance TransferableError, MEMORY[0x1E4F248F8]);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v6 - 8) + 104))(v7, *MEMORY[0x1E4F248E8], v6);
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 208) + 1;
    *(void *)(v0 + 208) = v10;
    (*(void (**)(void, unint64_t, void))(v0 + 160))(*(void *)(v0 + 80), *(void *)(v0 + 136)+ ((*(unsigned __int8 *)(v0 + 240) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 240))+ *(void *)(v0 + 152) * v10, *(void *)(v0 + 64));
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v11;
    uint64_t *v11 = v0;
    v11[1] = closure #3 in AnyTransferable.init<A>(_:);
    uint64_t v12 = *(void *)(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 40);
    uint64_t v14 = *(void *)(v0 + 48);
    return MEMORY[0x1F40DFA18](v12, v13, v14);
  }
}

{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Class isa;
  id v10;
  uint64_t (*v11)(id);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  uint64_t v1 = v0[28];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[9];
  uint64_t v13 = v0[8];
  uint64_t v14 = v0[10];
  id v6 = v0[5];
  uint64_t v7 = v0[2];
  swift_bridgeObjectRelease();
  uint64_t v8 = objc_allocWithZone(MEMORY[0x1E4F28CF0]);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v10 = objc_msgSend(v8, sel_initRegularFileWithContents_, isa);
  outlined consume of Data._Representation(v2, v1);

  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v7, v14, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(id))v0[1];
  return v11(v10);
}

uint64_t closure #3 in AnyTransferable.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  swift_task_dealloc();
  if (v2)
  {

    uint64_t v7 = closure #3 in AnyTransferable.init<A>(_:);
  }
  else
  {
    *(void *)(v6 + 192) = a2;
    *(void *)(v6 + 200) = a1;
    uint64_t v7 = closure #3 in AnyTransferable.init<A>(_:);
  }
  return MEMORY[0x1F4188298](v7, 0, 0);
}

{
  void *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t (*v7)();
  uint64_t v9;

  uint64_t v6 = *v3;
  swift_task_dealloc();
  if (v2)
  {

    uint64_t v7 = closure #3 in AnyTransferable.init<A>(_:);
  }
  else
  {
    *(void *)(v6 + 224) = a2;
    *(void *)(v6 + 232) = a1;
    uint64_t v7 = closure #3 in AnyTransferable.init<A>(_:);
  }
  return MEMORY[0x1F4188298](v7, 0, 0);
}

uint64_t outlined init with take of (UTType, String?)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (UTType, String?)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v49 = type metadata accessor for UTType();
  uint64_t v7 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v50 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (UTType, String?)();
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 + 16);
  if (!v14) {
    return;
  }
  BOOL v45 = &v13[*(int *)(v10 + 48)];
  uint64_t v15 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  uint64_t v16 = *(void *)(v11 + 72);
  uint64_t v42 = v7;
  uint64_t v43 = v16;
  uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v7 + 32);
  void v40[2] = v3;
  char v41 = (void (**)(uint64_t, uint64_t))(v7 + 8);
  v40[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v44 = v13;
  while (1)
  {
    _s22UniformTypeIdentifiers6UTTypeVSgWOcTm_0(v15, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for (UTType, String?));
    uint64_t v21 = *v47;
    uint64_t v22 = (uint64_t)v50;
    (*v47)((uint64_t)v50, v13, v49);
    uint64_t v23 = *((void *)v45 + 1);
    uint64_t v46 = *(void *)v45;
    uint64_t v24 = a3;
    uint64_t v25 = *a3;
    unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v22);
    uint64_t v28 = *(void *)(v25 + 16);
    BOOL v29 = (v26 & 1) == 0;
    uint64_t v30 = v28 + v29;
    if (__OFADD__(v28, v29)) {
      break;
    }
    char v31 = v26;
    uint64_t v32 = *(void *)(v25 + 24);
    uint64_t v48 = v14;
    if (v32 >= v30)
    {
      if (a2)
      {
        int64_t v35 = (void *)*v24;
        if (v26) {
          goto LABEL_3;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        int64_t v35 = (void *)*v24;
        if (v31) {
          goto LABEL_3;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v30, a2 & 1);
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v50);
      if ((v31 & 1) != (v34 & 1)) {
        goto LABEL_20;
      }
      unint64_t v27 = v33;
      int64_t v35 = (void *)*v24;
      if (v31)
      {
LABEL_3:
        int v17 = (uint64_t *)(v35[7] + 16 * v27);
        uint64_t v19 = *v17;
        uint64_t v18 = v17[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        (*v41)((uint64_t)v50, v49);
        uint64_t v20 = (void *)(*(void *)(*v24 + 56) + 16 * v27);
        swift_bridgeObjectRelease();
        void *v20 = v19;
        v20[1] = v18;
        goto LABEL_4;
      }
    }
    v35[(v27 >> 6) + 8] |= 1 << v27;
    v21(v35[6] + *(void *)(v42 + 72) * v27, v50, v49);
    uint64_t v36 = (void *)(v35[7] + 16 * v27);
    *uint64_t v36 = v46;
    v36[1] = v23;
    uint64_t v37 = v35[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_19;
    }
    v35[2] = v39;
LABEL_4:
    a3 = v24;
    uint64_t v13 = v44;
    v15 += v43;
    a2 = 1;
    uint64_t v14 = v48 - 1;
    if (v48 == 1)
    {
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t sub_187D2BFCC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, v1)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v3, v1);
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in AnyTransferable.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(type metadata accessor for Optional() - 8);
  uint64_t v9 = v2 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v10;
  *uint64_t v10 = v3;
  v10[1] = partial apply for closure #3 in AnyTransferable.init<A>(_:);
  return closure #3 in AnyTransferable.init<A>(_:)(a1, a2, v9, v6, v7);
}

uint64_t partial apply for closure #3 in AnyTransferable.init<A>(_:)(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t _s22UniformTypeIdentifiers6UTTypeVACSHAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s22UniformTypeIdentifiers6UTTypeVSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void static URLReceipt.systemAction.getter()
{
}

void static URLReceipt.systemAction(_:)()
{
}

void URLReceipt.description.getter()
{
}

void Scene.onReceiveURLs(_:)()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for URLReceipt(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)(*a2 - 1) >= 2) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  *a1 = v3;
  return a1;
}

uint64_t destroy for URLReceipt(uint64_t *a1)
{
  uint64_t result = *a1;
  if ((unint64_t)(result - 1) >= 2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *assignWithCopy for URLReceipt(uint64_t *a1, uint64_t *a2)
{
  unint64_t v3 = *a1 - 1;
  uint64_t v4 = *a2;
  unint64_t v5 = *a2 - 1;
  if (v3 >= 2)
  {
    if (v5 >= 2)
    {
      *a1 = v4;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of (urls: [URL]?)((uint64_t)a1);
      *a1 = *a2;
    }
  }
  else
  {
    *a1 = v4;
    if (v5 >= 2) {
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t outlined destroy of (urls: [URL]?)(uint64_t a1)
{
  type metadata accessor for (urls: [URL]?)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (urls: [URL]?)()
{
  if (!lazy cache variable for type metadata for (urls: [URL]?))
  {
    type metadata accessor for [URL]?(0, &lazy cache variable for type metadata for [URL]?, (uint64_t (*)(uint64_t))type metadata accessor for [URL], MEMORY[0x1E4FBB718]);
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (urls: [URL]?));
    }
  }
}

void type metadata accessor for [URL](uint64_t a1)
{
}

void type metadata accessor for [URL]?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void *assignWithTake for URLReceipt(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((unint64_t)(*a1 - 1) >= 2)
  {
    if ((unint64_t)(v3 - 1) >= 2)
    {
      *a1 = v3;
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of (urls: [URL]?)((uint64_t)a1);
  }
  *a1 = v3;
  return a1;
}

uint64_t getEnumTagSinglePayload for URLReceipt(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 2);
  int v6 = v4 - 2;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for URLReceipt(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFC)
  {
    *(void *)uint64_t result = a2 - 2147483645;
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFD) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for URLReceipt()
{
  return &type metadata for URLReceipt;
}

unint64_t destroy for URLReceipt.Result(unint64_t *a1)
{
  unint64_t result = *a1;
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if (v2 - 1 < 0) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for URLReceipt.Result(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v4 = *a2;
  }
  if ((int)v4 - 1 < 0) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  *a1 = v3;
  return a1;
}

uint64_t *assignWithCopy for URLReceipt.Result(uint64_t *a1, uint64_t *a2)
{
  LODWORD(v3) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v4) = -1;
  }
  else {
    uint64_t v4 = *a1;
  }
  int v5 = v4 - 1;
  uint64_t v6 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v3 = *a2;
  }
  int v7 = v3 - 1;
  if (v5 < 0)
  {
    if (v7 < 0)
    {
      *a1 = v6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      *a1 = *a2;
    }
  }
  else
  {
    *a1 = v6;
    if (v7 < 0) {
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

unint64_t *assignWithTake for URLReceipt.Result(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  int v4 = -1;
  if (v3 < 0xFFFFFFFF) {
    int v4 = v3;
  }
  unint64_t v5 = *a2;
  if (v4 - 1 < 0)
  {
    LODWORD(v6) = -1;
    if (v5 < 0xFFFFFFFF) {
      unint64_t v6 = *a2;
    }
    if ((int)v6 - 1 < 0)
    {
      *a1 = v5;
      swift_bridgeObjectRelease();
      return a1;
    }
    swift_bridgeObjectRelease();
  }
  *a1 = v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for URLReceipt.Result(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFD && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483645);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  unsigned int v5 = v4 + 1;
  unsigned int v6 = v4 - 1;
  if (v5 >= 3) {
    return v6;
  }
  else {
    return 0;
  }
}

void *destructiveInjectEnumTag for URLReceipt.Result(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    a2 -= 0x7FFFFFFF;
    goto LABEL_5;
  }
  if (a2) {
LABEL_5:
  }
    void *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for URLReceipt.Result()
{
  return &type metadata for URLReceipt.Result;
}

void static URLReceipt.discarded.getter()
{
}

void static URLReceipt.handled.getter()
{
}

uint64_t TabContent.popover<A>(isPresented:attachmentAnchor:arrowEdge:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, unsigned __int8 a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = *(void *)a4;
  uint64_t v11 = *(void *)(a4 + 8);
  int v12 = a5;
  char v13 = *(unsigned char *)(a4 + 16);
  PopoverConditionalStateProvider.init(isPresented:content:)(a1, a2, a3, a6, a7, (uint64_t)v22);
  v20[0] = v10;
  v20[1] = v11;
  char v21 = v13;
  if (v12 == 4) {
    unsigned __int8 v14 = 0;
  }
  else {
    unsigned __int8 v14 = specialized Edge.Set.init(_:)(a5);
  }
  uint64_t v15 = type metadata accessor for PopoverConditionalStateProvider();
  swift_getWitnessTable();
  PopoverPresentationModifier.init(provider:attachmentAnchor:arrowEdges:isDetachable:keyType:attachmentBehavior:)((uint64_t)v22, v20, v14 | ((v12 == 4) << 8), 0, 0, 0, v15, (uint64_t)v23);
  uint64_t v16 = type metadata accessor for PopoverPresentationModifier();
  TabContent.modifier<A>(_:)((uint64_t)v23, a8, v16, a9);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v10, v11, v13);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v16 - 8) + 8))(v23, v16);
}

uint64_t TabContent.popover<A, B>(item:attachmentAnchor:arrowEdge:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v47 = a6;
  uint64_t v43 = a5;
  uint64_t v44 = a4;
  uint64_t v42 = a1;
  uint64_t v46 = a9;
  uint64_t v37 = a12;
  uint64_t v38 = a8;
  uint64_t v45 = a10;
  uint64_t v35 = a7;
  uint64_t v36 = a11;
  int v34 = a3;
  int v41 = a3;
  type metadata accessor for Optional();
  uint64_t v39 = type metadata accessor for Binding();
  uint64_t v15 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  int v17 = &v33[-v16];
  uint64_t v48 = a7;
  uint64_t v49 = a8;
  uint64_t v50 = a11;
  uint64_t v51 = a12;
  uint64_t v18 = type metadata accessor for PopoverItemStateProvider();
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = &v33[-v19];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v21 = type metadata accessor for PopoverPresentationModifier();
  uint64_t v22 = *(void *)(v21 - 8);
  double v23 = MEMORY[0x1F4188790](v21);
  uint64_t v25 = &v33[-v24];
  uint64_t v26 = *(void *)a2;
  uint64_t v27 = *(void *)(a2 + 8);
  char v28 = *(unsigned char *)(a2 + 16);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v15 + 16))(v17, v42, v39, v23);
  uint64_t v29 = (uint64_t)v17;
  int v30 = v41;
  PopoverItemStateProvider.init(item:content:)(v29, v44, v43, (uint64_t)v20);
  uint64_t v48 = v26;
  uint64_t v49 = v27;
  LOBYTE(v50) = v28;
  if (v30 == 4) {
    unsigned __int8 v31 = 0;
  }
  else {
    unsigned __int8 v31 = specialized Edge.Set.init(_:)(v34);
  }
  PopoverPresentationModifier.init(provider:attachmentAnchor:arrowEdges:isDetachable:keyType:attachmentBehavior:)((uint64_t)v20, &v48, v31 | ((v30 == 4) << 8), 0, 0, 0, v18, (uint64_t)v25);
  TabContent.modifier<A>(_:)((uint64_t)v25, v47, v21, v46);
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v26, v27, v28);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v22 + 8))(v25, v21);
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance TabPopoverPresentationsKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static TabPopoverPresentationsKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t sub_187D2CE94()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D2CF3C()
{
  return swift_getWitnessTable();
}

void __swiftcall CheckboxToggleStyle.init()()
{
}

void CheckboxToggleStyle.makeBody(configuration:)()
{
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in CheckboxToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for CheckboxToggleStyle()
{
  return &type metadata for CheckboxToggleStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>();
    lazy protocol witness table accessor for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>)
  {
    type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>();
    type metadata accessor for _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>)
  {
    type metadata accessor for Toggle<ToggleStyleConfiguration.Label>(255, &lazy cache variable for type metadata for Toggle<ToggleStyleConfiguration.Label>, (uint64_t)&type metadata for ToggleStyleConfiguration.Label, (uint64_t)&protocol witness table for ToggleStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Toggle);
    type metadata accessor for ToggleStyleModifier<_CheckboxToggleStyle>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>);
    }
  }
}

void type metadata accessor for ToggleStyleModifier<_CheckboxToggleStyle>()
{
  if (!lazy cache variable for type metadata for ToggleStyleModifier<_CheckboxToggleStyle>)
  {
    lazy protocol witness table accessor for type _CheckboxToggleStyle and conformance _CheckboxToggleStyle();
    unint64_t v0 = type metadata accessor for ToggleStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ToggleStyleModifier<_CheckboxToggleStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _CheckboxToggleStyle and conformance _CheckboxToggleStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type _CheckboxToggleStyle and conformance _CheckboxToggleStyle;
  if (!lazy protocol witness table cache variable for type _CheckboxToggleStyle and conformance _CheckboxToggleStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CheckboxToggleStyle and conformance _CheckboxToggleStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>>();
    lazy protocol witness table accessor for type Toggle<ToggleStyleConfiguration.Label> and conformance Toggle<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, ToggleStyleModifier<_CheckboxToggleStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

ValueMetadata *type metadata accessor for _CheckboxToggleStyle()
{
  return &type metadata for _CheckboxToggleStyle;
}

uint64_t associated type witness table accessor for ToggleStyle.Body : View in _CheckboxToggleStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187D2D314()
{
  return MEMORY[0x1E4F417F0];
}

id UIActivityViewController.init(configuration:env:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*(unsigned char *)(a1 + 32) == 1)
  {
    uint64_t v5 = *(void *)(a1 + 16);
    swift_retain();
    outlined copy of AppIntentExecutor?(v5);
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);
    swift_release();
    swift_release();
    outlined retain of AnyShareConfiguration(a1, (void (*)(void, void, void, void, void))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
    return 0;
  }
  else
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIActivityItemsConfiguration);
    uint64_t v13 = v3;
    uint64_t v14 = v4;
    outlined retain of AnyShareConfiguration(a1, (void (*)(void, void, void, void, void))outlined copy of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of Text?);
    swift_retain();
    swift_retain();
    id v7 = UIActivityItemsConfiguration.init(configuration:env:)(a1, &v13);
    if (v7)
    {
      unint64_t v8 = v7;
      swift_release();
      swift_release();
      id v9 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      Class isa = v8;
      id v6 = objc_msgSend(v9, sel_initWithActivityItemsConfiguration_, isa, v13, v14);
      outlined retain of AnyShareConfiguration(a1, (void (*)(void, void, void, void, void))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
    }
    else
    {
      uint64_t v13 = v3;
      uint64_t v14 = v4;
      AnyShareConfiguration.resolveActivityItems(in:)(&v13);
      swift_release();
      swift_release();
      id v11 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v6 = objc_msgSend(v11, sel_initWithActivityItems_applicationActivities_, isa, 0);
      outlined retain of AnyShareConfiguration(a1, (void (*)(void, void, void, void, void))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
    }
  }
  return v6;
}

id UIActivityItemsConfiguration.init(configuration:env:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  int v6 = *(unsigned __int8 *)(a1 + 32);
  if (v6 == 2)
  {
    uint64_t v30 = *a2;
    id v7 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    swift_bridgeObjectRetain();
    outlined copy of AppIntentExecutor?(v5);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSItemProvider);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v27 = objc_msgSend(v7, sel_initWithItemProviders_, isa);

    uint64_t v9 = *(void *)(a1 + 40);
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v28 = v5;
    uint64_t v11 = *(void *)(a1 + 56);
    uint64_t v12 = *(void *)(a1 + 64);
    uint64_t v25 = v4;
    uint64_t v13 = *(void *)(a1 + 72);
    uint64_t v14 = *(void *)(a1 + 80);
    uint64_t v15 = v3;
    uint64_t v16 = *(void *)(a1 + 88);
    uint64_t v17 = *(void *)(a1 + 96);
    uint64_t v18 = (void *)swift_allocObject();
    uint64_t v18[2] = v9;
    v18[3] = v10;
    v18[4] = v11;
    v18[5] = v12;
    v18[6] = v30;
    v18[7] = v15;
    v18[8] = v13;
    v18[9] = v14;
    v18[10] = v16;
    v18[11] = v17;
    uint64_t v35 = partial apply for closure #1 in UIActivityItemsConfiguration.init(configuration:env:);
    uint64_t v36 = v18;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v32 = 1107296256;
    unint64_t v33 = thunk for @escaping @callee_guaranteed (@guaranteed UIActivityItemsConfigurationMetadataKey) -> (@out Any?);
    int v34 = &block_descriptor_44;
    uint64_t v26 = _Block_copy(&aBlock);
    outlined copy of Text?(v9, v10, v11, v12);
    outlined copy of Text?(v13, v14, v16, v17);
    uint64_t v29 = v9;
    outlined copy of Text?(v9, v10, v11, v12);
    outlined copy of Text?(v13, v14, v16, v17);
    swift_retain();
    id v19 = v27;
    swift_retain();
    swift_release();
    objc_msgSend(v19, sel_setMetadataProvider_, v26);
    _Block_release(v26);
    if (v28)
    {
      uint64_t v20 = (void *)swift_allocObject();
      uint64_t v20[2] = v28;
      void v20[3] = v25;
      v20[4] = v30;
      v20[5] = v15;
      uint64_t v35 = partial apply for closure #2 in UIActivityItemsConfiguration.init(configuration:env:);
      uint64_t v36 = v20;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v32 = 1107296256;
      unint64_t v33 = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed UIActivityItemsConfigurationMetadataKey) -> (@out Any?);
      int v34 = &block_descriptor_11;
      uint64_t v21 = _Block_copy(&aBlock);
      swift_retain_n();
      swift_release();
      objc_msgSend(v19, sel_setPerItemMetadataProvider_, v21);
      _Block_release(v21);
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v28;
      *(void *)(v22 + 24) = v25;
      uint64_t v35 = partial apply for closure #3 in UIActivityItemsConfiguration.init(configuration:env:);
      uint64_t v36 = (void *)v22;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v32 = 1107296256;
      unint64_t v33 = thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed UIActivityItemsConfigurationPreviewIntent, @unowned CGSize) -> (@owned NSItemProvider?);
      int v34 = &block_descriptor_17_2;
      double v23 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v19, sel_setPreviewProvider_, v23);
      outlined retain of AnyShareConfiguration(a1, (void (*)(void, void, void, void, void))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
      _Block_release(v23);

      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v28);
      outlined consume of Text?(v13, v14, v16, v17);
      outlined consume of Text?(v29, v10, v11, v12);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v28);
    }
    else
    {
      outlined retain of AnyShareConfiguration(a1, (void (*)(void, void, void, void, void))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);

      swift_release();
      swift_release();
      outlined consume of Text?(v13, v14, v16, v17);
      outlined consume of Text?(v29, v10, v11, v12);
    }
  }
  else
  {
    swift_release();
    swift_release();
    if (v6 == 1)
    {
      swift_retain();
      outlined copy of AppIntentExecutor?(v4);
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
    }
    outlined retain of AnyShareConfiguration(a1, (void (*)(void, void, void, void, void))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
    return 0;
  }
  return v19;
}

double closure #1 in UIActivityItemsConfiguration.init(configuration:env:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;
  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10)
  {
    swift_bridgeObjectRelease_n();
LABEL_14:
    if (!a1) {
      goto LABEL_20;
    }
LABEL_15:
    uint64_t v19 = Text.resolveString(in:with:idiom:)();
    *(void *)(a2 + 24) = MEMORY[0x1E4FBB1A0];
    *(void *)a2 = v19;
    *(void *)(a2 + 8) = v21;
    return result;
  }
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v12) {
    goto LABEL_14;
  }
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;
  if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
  {
    swift_bridgeObjectRelease_n();
    if (!a5) {
      goto LABEL_20;
    }
  }
  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0 || !a5) {
      goto LABEL_20;
    }
  }
  if ((Text.isStyled(options:)() & 1) == 0) {
    goto LABEL_15;
  }
  default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  uint64_t v22 = Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  if (v22)
  {
    uint64_t v23 = v22;
    *(void *)(a2 + 24) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    *(void *)a2 = v23;
    return result;
  }
LABEL_20:
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

id thunk for @escaping @callee_guaranteed (@guaranteed UIActivityItemsConfigurationMetadataKey) -> (@out Any?)(uint64_t a1, void *a2)
{
  void (*v3)(void *__return_ptr);
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void v13[3];
  uint64_t v14;
  uint64_t vars8;

  uint64_t v3 = *(void (**)(void *__return_ptr))(a1 + 32);
  swift_retain();
  uint64_t v4 = a2;
  v3(v13);
  swift_release();

  uint64_t v5 = v14;
  if (v14)
  {
    int v6 = __swift_project_boxed_opaque_existential_1(v13, v14);
    uint64_t v7 = *(void *)(v5 - 8);
    uint64_t v8 = MEMORY[0x1F4188790](v6);
    uint64_t v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v7 + 16))(v10, v8);
    uint64_t v11 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    uint64_t v11 = 0;
  }

  return v11;
}

uint64_t closure #2 in UIActivityItemsConfiguration.init(configuration:env:)@<X0>(void (*a1)(uint64_t *__return_ptr)@<X2>, uint64_t a2@<X8>)
{
  a1(&v22);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v8 & 1) == 0)
    {
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v11 = v10;
      if (v9 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v11 == v12)
      {
        swift_bridgeObjectRelease_n();
LABEL_17:
        outlined init with copy of Any?((uint64_t)&v26, a2);
        return outlined destroy of AnySharePreview((uint64_t)&v22);
      }
      char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_17;
      }
LABEL_15:
      uint64_t result = outlined destroy of AnySharePreview((uint64_t)&v22);
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      return result;
    }
  }
  if (!v25) {
    goto LABEL_15;
  }
  uint64_t v15 = v23;
  uint64_t v16 = v22;
  char v17 = v24 & 1;
  outlined copy of Text.Storage(v22, v23, v24 & 1);
  swift_bridgeObjectRetain();
  uint64_t v18 = Text.resolveString(in:with:idiom:)();
  uint64_t v20 = v19;
  outlined consume of Text.Storage(v16, v15, v17);
  swift_bridgeObjectRelease();
  *(void *)(a2 + 24) = MEMORY[0x1E4FBB1A0];
  *(void *)a2 = v18;
  *(void *)(a2 + 8) = v20;
  return outlined destroy of AnySharePreview((uint64_t)&v22);
}

id thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed UIActivityItemsConfigurationMetadataKey) -> (@out Any?)(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v5)(void *__return_ptr, uint64_t, id);
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void v15[3];
  uint64_t v16;
  uint64_t vars8;

  uint64_t v5 = *(void (**)(void *__return_ptr, uint64_t, id))(a1 + 32);
  swift_retain();
  uint64_t v6 = a3;
  v5(v15, a2, v6);
  swift_release();

  uint64_t v7 = v16;
  if (v16)
  {
    char v8 = __swift_project_boxed_opaque_existential_1(v15, v16);
    uint64_t v9 = *(void *)(v7 - 8);
    uint64_t v10 = MEMORY[0x1F4188790](v8);
    uint64_t v12 = (char *)v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v9 + 16))(v12, v10);
    uint64_t v13 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    uint64_t v13 = 0;
  }

  return v13;
}

uint64_t closure #3 in UIActivityItemsConfiguration.init(configuration:env:)(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr))
{
  a3(v20);
  uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = v4;
  if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
  {
    uint64_t v9 = swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
  char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = swift_bridgeObjectRelease();
  if (v8)
  {
LABEL_13:
    uint64_t v18 = ((uint64_t (*)(uint64_t))v20[6])(v9);
LABEL_14:
    uint64_t v17 = v18;
    goto LABEL_15;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {
    uint64_t v16 = swift_bridgeObjectRelease_n();
    goto LABEL_17;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = swift_bridgeObjectRelease();
  if (v15)
  {
LABEL_17:
    uint64_t v18 = ((uint64_t (*)(uint64_t))v20[4])(v16);
    goto LABEL_14;
  }
  uint64_t v17 = 0;
LABEL_15:
  outlined destroy of AnySharePreview((uint64_t)v20);
  return v17;
}

id thunk for @escaping @callee_guaranteed (@unowned Int, @guaranteed UIActivityItemsConfigurationPreviewIntent, @unowned CGSize) -> (@owned NSItemProvider?)(uint64_t a1, uint64_t a2, void *a3, double a4, double a5)
{
  uint64_t v9 = *(uint64_t (**)(uint64_t, id, double, double))(a1 + 32);
  swift_retain();
  id v10 = a3;
  uint64_t v11 = (void *)v9(a2, v10, a4, a5);
  swift_release();

  return v11;
}

uint64_t AnyShareConfiguration.resolveActivityItems(in:)(uint64_t *a1)
{
  if (*(unsigned char *)(v1 + 32)) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v5 = *(void *)v1;
  uint64_t v6 = *(void *)(v1 + 8);
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + 24);
  outlined init with take of Text?(v1 + 40, (uint64_t)v31);
  outlined init with take of Text?((uint64_t)v31, (uint64_t)v32);
  uint64_t v24 = v3;
  if (v32[3])
  {
    *(void *)&long long v25 = v3;
    *((void *)&v25 + 1) = v4;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v28 = 0;
    swift_bridgeObjectRetain();
    uint64_t v9 = Text.resolveString(in:with:idiom:)();
    uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayypG_yps5NeverOTg5136_s7SwiftUI21AnyShareConfigurationV20resolveActivityItems33_91555EE1A45CC99D949E9B39601C01F62inSayypGAA17EnvironmentValuesV_tFypypXEfU_SSTf1cn_nTf4ng_n(v5, v9, v10);
    outlined consume of AnyShareConfiguration.Storage(v5, v6, v7, v8, 0);
    swift_bridgeObjectRelease();
    if (!*(void *)(v1 + 96)) {
      return v2;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = v5;
    if (!*(void *)(v1 + 96)) {
      return v2;
    }
  }
  uint64_t v11 = *(void *)(v1 + 72);
  uint64_t v12 = *(void *)(v1 + 80);
  uint64_t v13 = *(void *)(v1 + 88);
  *(void *)&long long v25 = 0;
  outlined copy of Text.Storage(v11, v12, v13 & 1);
  swift_bridgeObjectRetain();
  LOBYTE(v29) = v13 & 1;
  char v14 = Text.isStyled(options:)();
  if (v14)
  {
    *(void *)&long long v25 = v24;
    *((void *)&v25 + 1) = v4;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
    char v27 = v13 & 1;
    uint64_t v15 = Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
    if (!v15)
    {
      outlined consume of Text.Storage(v11, v12, v13 & 1);
      swift_bridgeObjectRelease();
      return v2;
    }
    uint64_t v16 = (void *)v15;
    uint64_t v17 = 0;
    uint64_t v26 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
    *(void *)&long long v25 = v16;
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    uint64_t v28 = 0;
    char v27 = v13 & 1;
    uint64_t v16 = (void *)Text.resolveString(in:with:idiom:)();
    uint64_t v17 = v18;
    uint64_t v26 = MEMORY[0x1E4FBB1A0];
    *(void *)&long long v25 = v16;
    *((void *)&v25 + 1) = v18;
  }
  outlined copy of AccessibilityText.Storage(v16, v17, v14 & 1);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v20 = *(void *)(v2 + 16);
  unint64_t v19 = *(void *)(v2 + 24);
  unint64_t v21 = v20 + 1;
  if (v20 >= v19 >> 1)
  {
    uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v20 + 1, 1, (char *)v2);
    unint64_t v21 = v20 + 1;
    uint64_t v2 = (uint64_t)v23;
  }
  *(void *)(v2 + 16) = v21;
  outlined init with take of Any(&v25, (_OWORD *)(v2 + 32 * v20 + 32));
  outlined consume of Text.Storage(v11, v12, v13 & 1);
  swift_bridgeObjectRelease();
  outlined consume of AccessibilityText.Storage(v16, v17, v14 & 1);
  return v2;
}

id ActivitySubjectProvider.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ActivitySubjectProvider();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for ActivitySubjectProvider()
{
  return self;
}

uint64_t outlined retain of AnyShareConfiguration(uint64_t a1, void (*a2)(void, void, void, void, void), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  uint64_t v11 = *(void *)(a1 + 88);
  uint64_t v12 = *(void *)(a1 + 96);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  a3(v5, v6, v7, v8);
  a3(v9, v10, v11, v12);
  return a1;
}

uint64_t outlined init with take of Text?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for Text?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSayypG_yps5NeverOTg5136_s7SwiftUI21AnyShareConfigurationV20resolveActivityItems33_91555EE1A45CC99D949E9B39601C01F6LL2inSayypGAA17EnvironmentValuesV_tFypypXEfU_SSTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v8 = a1 + 32;
    do
    {
      outlined init with copy of Any(v8, (uint64_t)&v17);
      uint64_t v9 = (objc_class *)type metadata accessor for ActivitySubjectProvider();
      uint64_t v10 = (char *)objc_allocWithZone(v9);
      outlined init with copy of Any((uint64_t)&v17, (uint64_t)&v10[OBJC_IVAR____TtC7SwiftUIP33_91555EE1A45CC99D949E9B39601C01F623ActivitySubjectProvider_item]);
      uint64_t v11 = &v10[OBJC_IVAR____TtC7SwiftUIP33_91555EE1A45CC99D949E9B39601C01F623ActivitySubjectProvider_subject];
      *(void *)uint64_t v11 = a2;
      *((void *)v11 + 1) = a3;
      v16.receiver = v10;
      v16.super_class = v9;
      swift_bridgeObjectRetain();
      id v12 = objc_msgSendSuper2(&v16, sel_init);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v17);
      uint64_t v18 = v9;
      *(void *)&long long v17 = v12;
      uint64_t v4 = v19;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1);
        uint64_t v4 = v19;
      }
      unint64_t v14 = *(void *)(v4 + 16);
      unint64_t v13 = *(void *)(v4 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1);
        uint64_t v4 = v19;
      }
      *(void *)(v4 + 16) = v14 + 1;
      outlined init with take of Any(&v17, (_OWORD *)(v4 + 32 * v14 + 32));
      v8 += 32;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_187D2EAF0()
{
  if (*(void *)(v0 + 40))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  if (*(void *)(v0 + 88))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

double partial apply for closure #1 in UIActivityItemsConfiguration.init(configuration:env:)@<D0>(uint64_t a1@<X8>)
{
  return closure #1 in UIActivityItemsConfiguration.init(configuration:env:)(v1[5], a1, v1[9], v1[10], v1[11]);
}

uint64_t sub_187D2EBA8()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIActivityItemsConfiguration.init(configuration:env:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in UIActivityItemsConfiguration.init(configuration:env:)(*(void (**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_187D2EBFC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in UIActivityItemsConfiguration.init(configuration:env:)(uint64_t a1, uint64_t a2)
{
  return closure #3 in UIActivityItemsConfiguration.init(configuration:env:)(a1, a2, *(void (**)(void *__return_ptr))(v2 + 16));
}

uint64_t sub_187D2EC4C()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in LabelsHiddenModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance LabelsHiddenModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 2;
  return result;
}

ValueMetadata *type metadata accessor for HiddenLabeledContentStyle()
{
  return &type metadata for HiddenLabeledContentStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>, _EnvironmentKeyWritingModifier<Visibility>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>)
  {
    type metadata accessor for _ViewModifier_Content<LabelsHiddenModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<LabelsHiddenModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier, (uint64_t)&type metadata for LabelsHiddenModifier, MEMORY[0x1E4F408E0]);
    type metadata accessor for _ViewModifier_Content<LabelsHiddenModifier>(255, &lazy cache variable for type metadata for _LabeledContentStyleModifier<HiddenLabeledContentStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type HiddenLabeledContentStyle and conformance HiddenLabeledContentStyle, (uint64_t)&type metadata for HiddenLabeledContentStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LabeledContentStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<LabelsHiddenModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Visibility>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<LabelsHiddenModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LabelsHiddenModifier>, _LabeledContentStyleModifier<HiddenLabeledContentStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<LabelsHiddenModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<LabelsHiddenModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<LabelsHiddenModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<LabelsHiddenModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<LabelsHiddenModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type LabelsHiddenModifier and conformance LabelsHiddenModifier, (uint64_t)&type metadata for LabelsHiddenModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<LabelsHiddenModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for LabeledContentStyle.Body : View in HiddenLabeledContentStyle()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **sub_187D2F114()
{
  return &protocol witness table for LabeledContentStyleConfiguration.Content;
}

uint64_t View.backdropEffect<A>(_:)()
{
  return MEMORY[0x1F4100B00]();
}

uint64_t sub_187D2F124()
{
  return swift_getWitnessTable();
}

void View.immersiveEnvironmentPicker<A>(content:)()
{
}

void one-time initialization function for defaultInspectorWidth()
{
  defaultInspectorWidth = 0x4074000000000000;
}

uint64_t InspectorSplitView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v33 = *(void *)(a1 + 24);
  uint64_t v39 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v38 = &v29[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = &v29[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v34 = *(void *)(v10 + 32);
  uint64_t v35 = type metadata accessor for _InspectorSplitViewRoot();
  MEMORY[0x1F4188790](v35);
  uint64_t v32 = &v29[-v11];
  uint64_t v12 = type metadata accessor for _VariadicView.Tree();
  uint64_t v37 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unsigned __int8 v31 = &v29[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v14);
  uint64_t v36 = &v29[-v15];
  uint64_t v17 = *(void *)v2;
  uint64_t v16 = *(void *)(v2 + 8);
  int v30 = *(unsigned __int8 *)(v2 + 17);
  char v18 = *(unsigned char *)(v2 + 56);
  uint64_t v19 = *(unsigned __int8 *)(v2 + 16);
  v44[0] = v17;
  v44[1] = v16;
  char v45 = v19;
  char v46 = v30;
  long long v20 = *(_OWORD *)(v2 + 40);
  long long v47 = *(_OWORD *)(v2 + 24);
  long long v48 = v20;
  char v49 = v18;
  uint64_t v21 = *(int *)(a1 + 64);
  char v43 = *(unsigned char *)(v2 + *(int *)(a1 + 60));
  char v22 = *(unsigned char *)(v2 + v21);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v7 + 16))(v9, v2 + *(int *)(a1 + 52), v6);
  _InspectorSplitViewRoot.init(inspectorState:sizeClass:inspectorHasToolbarItems:mainContent:)((uint64_t)v44, &v43, v22, (uint64_t)v9, v6, (uint64_t)v32);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v39 + 16))(v38, v2 + *(int *)(a1 + 56), v33);
  outlined copy of StateOrBinding<Bool>(v17, v16, v19, v30);
  uint64_t v23 = v31;
  _VariadicView.Tree.init(root:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v25 = *(void *)(a1 + 40);
  uint64_t v41 = WitnessTable;
  uint64_t v42 = v25;
  swift_getWitnessTable();
  uint64_t v26 = v36;
  static ViewBuilder.buildExpression<A>(_:)(v23);
  char v27 = *(void (**)(unsigned char *, uint64_t))(v37 + 8);
  v27(v23, v12);
  static ViewBuilder.buildExpression<A>(_:)(v26);
  return ((uint64_t (*)(unsigned char *, uint64_t))v27)(v26, v12);
}

uint64_t _InspectorSplitViewRoot.init(inspectorState:sizeClass:inspectorHasToolbarItems:mainContent:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v9 = *(unsigned char *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 17);
  char v11 = *(unsigned char *)(a1 + 56);
  char v12 = *a2;
  *(_OWORD *)a6 = *(_OWORD *)a1;
  *(unsigned char *)(a6 + 16) = v9;
  *(unsigned char *)(a6 + 17) = v10;
  *(_OWORD *)(a6 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a6 + 40) = *(_OWORD *)(a1 + 40);
  *(unsigned char *)(a6 + 56) = v11;
  *(unsigned char *)(a6 + 57) = v12;
  *(unsigned char *)(a6 + 58) = a3;
  uint64_t v13 = a6 + *(int *)(type metadata accessor for _InspectorSplitViewRoot() + 44);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32);

  return v14(v13, a4, a5);
}

__n128 InspectorSplitView.init(inspectorState:mainContent:inspectorContent:horizontalSizeClass:inspectorHasToolbarItems:presentationOptions:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  char v16 = *(unsigned char *)(a1 + 16);
  char v17 = *(unsigned char *)(a1 + 17);
  char v18 = *(unsigned char *)(a1 + 56);
  char v19 = *a4;
  *(_OWORD *)a9 = *(_OWORD *)a1;
  *(unsigned char *)(a9 + 16) = v16;
  *(unsigned char *)(a9 + 17) = v17;
  *(_OWORD *)(a9 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a9 + 40) = *(_OWORD *)(a1 + 40);
  *(unsigned char *)(a9 + 56) = v18;
  long long v20 = (int *)type metadata accessor for InspectorSplitView();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32))(a9 + v20[13], a2, a7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a8 - 8) + 32))(a9 + v20[14], a3, a8);
  *(unsigned char *)(a9 + v20[15]) = v19;
  *(unsigned char *)(a9 + v20[16]) = a5;
  uint64_t v21 = a9 + v20[17];
  long long v22 = *(_OWORD *)(a6 + 112);
  *(_OWORD *)(v21 + 96) = *(_OWORD *)(a6 + 96);
  *(_OWORD *)(v21 + 112) = v22;
  *(_OWORD *)(v21 + 121) = *(_OWORD *)(a6 + 121);
  long long v23 = *(_OWORD *)(a6 + 48);
  *(_OWORD *)(v21 + 32) = *(_OWORD *)(a6 + 32);
  *(_OWORD *)(v21 + 48) = v23;
  long long v24 = *(_OWORD *)(a6 + 80);
  *(_OWORD *)(v21 + 64) = *(_OWORD *)(a6 + 64);
  *(_OWORD *)(v21 + 80) = v24;
  __n128 result = *(__n128 *)(a6 + 16);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)a6;
  *(__n128 *)(v21 + 16) = result;
  return result;
}

uint64_t type metadata accessor for InspectorSplitView()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for InspectorSplitView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for InspectorSplitView(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  unint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(v6 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v9 + v11;
  if ((v11 | v8) > 7
    || ((*(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((*(void *)(*(void *)(v6 - 8) + 64) + ((v9 + v11 + ((v8 + 57) & ~v8)) & ~v11) + 9) & 0xFFFFFFFFFFFFFFF8)
     + 137 > 0x18)
  {
    uint64_t v15 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v15 + (((v11 | v8) & 0xF8 ^ 0x1F8) & ((v11 | v8) + 16));
    swift_retain();
    return a1;
  }
  uint64_t v38 = v5;
  uint64_t v39 = ~v11;
  uint64_t v40 = v6;
  uint64_t v17 = *(void *)a2;
  uint64_t v16 = *(void *)(a2 + 8);
  char v18 = *(unsigned char *)(a2 + 17);
  unsigned __int8 v19 = *(unsigned char *)(a2 + 16);
  uint64_t v41 = *(void *)(*(void *)(v6 - 8) + 64);
  outlined copy of StateOrBinding<Bool>(*(void *)a2, v16, v19, v18);
  *(void *)a1 = v17;
  *(void *)(a1 + 8) = v16;
  *(unsigned char *)(a1 + 16) = v19;
  *(unsigned char *)(a1 + 17) = v18;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v20 = (a2 + v8 + 57) & ~v8;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16))((a1 + v8 + 57) & ~v8, v20, v38);
  uint64_t v21 = (((a1 + v8 + 57) & ~v8) + v12) & v39;
  uint64_t v22 = (v20 + v12) & v39;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v21, v22, v40);
  long long v23 = (unsigned char *)(v21 + v41);
  *long long v23 = *(unsigned char *)(v22 + v41);
  v23[1] = *(unsigned char *)(v22 + v41 + 1);
  unint64_t v24 = (v21 + v41 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v22 + v41 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v24 = *(void *)v25;
  uint64_t v26 = *(void *)(v25 + 16);
  swift_bridgeObjectRetain();
  if (v26)
  {
    *(void *)(v24 + 8) = *(void *)(v25 + 8);
    *(void *)(v24 + 16) = *(void *)(v25 + 16);
    *(_OWORD *)(v24 + 24) = *(_OWORD *)(v25 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v27 = *(_OWORD *)(v25 + 24);
    *(_OWORD *)(v24 + 8) = *(_OWORD *)(v25 + 8);
    *(_OWORD *)(v24 + 24) = v27;
  }
  *(unsigned char *)(v24 + 40) = *(unsigned char *)(v25 + 40);
  *(unsigned char *)(v24 + 41) = *(unsigned char *)(v25 + 41);
  unint64_t v28 = *(void *)(v25 + 48);
  if (v28 < 2) {
    goto LABEL_17;
  }
  if (v28 == 2)
  {
    unint64_t v28 = 2;
LABEL_17:
    *(void *)(v24 + 48) = v28;
    goto LABEL_18;
  }
  *(void *)(v24 + 48) = v28;
  id v29 = (id)v28;
LABEL_18:
  *(unsigned char *)(v24 + 56) = *(unsigned char *)(v25 + 56);
  *(unsigned char *)(v24 + 57) = *(unsigned char *)(v25 + 57);
  *(unsigned char *)(v24 + 58) = *(unsigned char *)(v25 + 58);
  uint64_t v30 = *(void *)(v25 + 64);
  *(unsigned char *)(v24 + 72) = *(unsigned char *)(v25 + 72);
  *(void *)(v24 + 64) = v30;
  uint64_t v31 = *(void *)(v25 + 80);
  *(unsigned char *)(v24 + 88) = *(unsigned char *)(v25 + 88);
  *(void *)(v24 + 80) = v31;
  uint64_t v32 = (_OWORD *)(v24 + 96);
  uint64_t v33 = (long long *)(v25 + 96);
  uint64_t v34 = *(void *)(v25 + 120);
  if (v34)
  {
    *(void *)(v24 + 120) = v34;
    *(void *)(v24 + 128) = *(void *)(v25 + 128);
    (**(void (***)(_OWORD *, long long *))(v34 - 8))(v32, v33);
  }
  else
  {
    long long v35 = *v33;
    long long v36 = *(_OWORD *)(v25 + 112);
    *(void *)(v24 + 128) = *(void *)(v25 + 128);
    *uint64_t v32 = v35;
    *(_OWORD *)(v24 + 112) = v36;
  }
  *(unsigned char *)(v24 + 136) = *(unsigned char *)(v25 + 136);
  return a1;
}

void destroy for InspectorSplitView(uint64_t a1, uint64_t a2)
{
  outlined consume of StateOrBinding<Bool>(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(unsigned char *)(a1 + 17));
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 57) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v8 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v9 = v8 + 8;
  unint64_t v10 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  (*(void (**)(unint64_t))(v8 + 8))(v10);
  uint64_t v11 = (void *)((*(void *)(v9 + 56) + v10 + 9) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  if (v11[2])
  {
    swift_release();
    swift_release();
  }
  uint64_t v12 = (void *)v11[6];
  if ((unint64_t)v12 >= 3) {

  }
  if (v11[15])
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v11 + 12));
  }
}

uint64_t initializeWithCopy for InspectorSplitView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 17);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of StateOrBinding<Bool>(*(void *)a2, v7, v9, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 17) = v8;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 16;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 57 + a1) & ~v12;
  uint64_t v14 = (v12 + 57 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 48);
  uint64_t v16 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v17 = v16 + 16;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = v15 + v18;
  uint64_t v20 = (v19 + v13) & ~v18;
  uint64_t v21 = (v19 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 16))(v20, v21);
  uint64_t v22 = *(void *)(v17 + 48);
  long long v23 = (unsigned char *)(v22 + v20);
  unint64_t v24 = (unsigned char *)(v22 + v21);
  *long long v23 = *v24;
  v23[1] = v24[1];
  unint64_t v25 = (unint64_t)(v23 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (unint64_t)(v24 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v25 = *(void *)v26;
  uint64_t v27 = *(void *)(v26 + 16);
  swift_bridgeObjectRetain();
  if (v27)
  {
    *(void *)(v25 + 8) = *(void *)(v26 + 8);
    *(void *)(v25 + 16) = *(void *)(v26 + 16);
    *(_OWORD *)(v25 + 24) = *(_OWORD *)(v26 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v28 = *(_OWORD *)(v26 + 24);
    *(_OWORD *)(v25 + 8) = *(_OWORD *)(v26 + 8);
    *(_OWORD *)(v25 + 24) = v28;
  }
  *(unsigned char *)(v25 + 40) = *(unsigned char *)(v26 + 40);
  *(unsigned char *)(v25 + 41) = *(unsigned char *)(v26 + 41);
  unint64_t v29 = *(void *)(v26 + 48);
  if (v29 >= 2)
  {
    if (v29 != 2)
    {
      *(void *)(v25 + 48) = v29;
      id v30 = (id)v29;
      goto LABEL_9;
    }
    unint64_t v29 = 2;
  }
  *(void *)(v25 + 48) = v29;
LABEL_9:
  *(unsigned char *)(v25 + 56) = *(unsigned char *)(v26 + 56);
  *(unsigned char *)(v25 + 57) = *(unsigned char *)(v26 + 57);
  *(unsigned char *)(v25 + 58) = *(unsigned char *)(v26 + 58);
  uint64_t v31 = *(void *)(v26 + 64);
  *(unsigned char *)(v25 + 72) = *(unsigned char *)(v26 + 72);
  *(void *)(v25 + 64) = v31;
  uint64_t v32 = *(void *)(v26 + 80);
  *(unsigned char *)(v25 + 88) = *(unsigned char *)(v26 + 88);
  *(void *)(v25 + 80) = v32;
  uint64_t v33 = (_OWORD *)(v25 + 96);
  uint64_t v34 = (long long *)(v26 + 96);
  uint64_t v35 = *(void *)(v26 + 120);
  if (v35)
  {
    *(void *)(v25 + 120) = v35;
    *(void *)(v25 + 128) = *(void *)(v26 + 128);
    (**(void (***)(_OWORD *, long long *))(v35 - 8))(v33, v34);
  }
  else
  {
    long long v36 = *v34;
    long long v37 = *(_OWORD *)(v26 + 112);
    *(void *)(v25 + 128) = *(void *)(v26 + 128);
    *uint64_t v33 = v36;
    *(_OWORD *)(v25 + 112) = v37;
  }
  *(unsigned char *)(v25 + 136) = *(unsigned char *)(v26 + 136);
  return a1;
}

uint64_t assignWithCopy for InspectorSplitView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 17);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of StateOrBinding<Bool>(*(void *)a2, v7, v9, v8);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  char v12 = *(unsigned char *)(a1 + 17);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v13 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 17) = v8;
  outlined consume of StateOrBinding<Bool>(v10, v11, v13, v12);
  long long v14 = *(_OWORD *)(a2 + 24);
  long long v15 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v15;
  *(_OWORD *)(a1 + 24) = v14;
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v17 = v16 + 24;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (v18 + 57 + a1) & ~v18;
  uint64_t v20 = (v18 + 57 + a2) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 24))(v19, v20);
  uint64_t v21 = *(void *)(v17 + 40);
  uint64_t v22 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v23 = v22 + 24;
  uint64_t v24 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v25 = v21 + v24;
  uint64_t v26 = (v25 + v19) & ~v24;
  uint64_t v27 = (v25 + v20) & ~v24;
  (*(void (**)(uint64_t, uint64_t))(v22 + 24))(v26, v27);
  uint64_t v28 = *(void *)(v23 + 40);
  unint64_t v29 = (unsigned char *)(v28 + v26);
  id v30 = (unsigned char *)(v28 + v27);
  *unint64_t v29 = *v30;
  v29[1] = v30[1];
  unint64_t v31 = (unint64_t)(v29 + 9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (unint64_t)(v30 + 9) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v31 = *(void *)v32;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = (_OWORD *)(v31 + 8);
  uint64_t v34 = (_OWORD *)(v32 + 8);
  uint64_t v35 = *(void *)(v32 + 16);
  if (*(void *)(v31 + 16))
  {
    if (v35)
    {
      *(void *)(v31 + 8) = *(void *)(v32 + 8);
      swift_retain();
      swift_release();
      *(void *)(v31 + 16) = *(void *)(v32 + 16);
      swift_retain();
      swift_release();
      *(_OWORD *)(v31 + 24) = *(_OWORD *)(v32 + 24);
    }
    else
    {
      outlined destroy of Binding<PresentationDetent>(v31 + 8);
      long long v36 = *(_OWORD *)(v32 + 24);
      *uint64_t v33 = *v34;
      *(_OWORD *)(v31 + 24) = v36;
    }
  }
  else if (v35)
  {
    *(void *)(v31 + 8) = *(void *)(v32 + 8);
    *(void *)(v31 + 16) = *(void *)(v32 + 16);
    *(_OWORD *)(v31 + 24) = *(_OWORD *)(v32 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v37 = *(_OWORD *)(v32 + 24);
    *uint64_t v33 = *v34;
    *(_OWORD *)(v31 + 24) = v37;
  }
  uint64_t v38 = (unint64_t *)(v31 + 48);
  uint64_t v39 = *(void **)(v31 + 48);
  *(unsigned char *)(v31 + 40) = *(unsigned char *)(v32 + 40);
  *(unsigned char *)(v31 + 41) = *(unsigned char *)(v32 + 41);
  unint64_t v40 = *(void *)(v32 + 48);
  if (v39 == (void *)2)
  {
    if (v40 < 2)
    {
LABEL_20:
      *uint64_t v38 = v40;
      goto LABEL_21;
    }
    if (v40 == 2)
    {
      unint64_t v40 = 2;
      goto LABEL_20;
    }
LABEL_16:
    *uint64_t v38 = v40;
    id v41 = (id)v40;
    goto LABEL_21;
  }
  if (v40 == 2)
  {
    outlined destroy of PresentationDimmingBehavior(v31 + 48);
LABEL_19:
    unint64_t v40 = *(void *)(v32 + 48);
    goto LABEL_20;
  }
  if ((unint64_t)v39 < 2)
  {
    if (v40 < 2) {
      goto LABEL_20;
    }
    goto LABEL_16;
  }
  if (v40 < 2)
  {
    outlined destroy of ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>(v31 + 48, (uint64_t (*)(void))type metadata accessor for UISheetPresentationControllerDetentIdentifier);
    goto LABEL_19;
  }
  *uint64_t v38 = v40;
  id v48 = (id)v40;

LABEL_21:
  *(unsigned char *)(v31 + 56) = *(unsigned char *)(v32 + 56);
  *(unsigned char *)(v31 + 57) = *(unsigned char *)(v32 + 57);
  *(unsigned char *)(v31 + 58) = *(unsigned char *)(v32 + 58);
  uint64_t v42 = *(void *)(v32 + 64);
  *(unsigned char *)(v31 + 72) = *(unsigned char *)(v32 + 72);
  *(void *)(v31 + 64) = v42;
  uint64_t v43 = *(void *)(v32 + 80);
  *(unsigned char *)(v31 + 88) = *(unsigned char *)(v32 + 88);
  *(void *)(v31 + 80) = v43;
  uint64_t v44 = *(void *)(v32 + 120);
  if (!*(void *)(v31 + 120))
  {
    if (v44)
    {
      *(void *)(v31 + 120) = v44;
      *(void *)(v31 + 128) = *(void *)(v32 + 128);
      (**(void (***)(uint64_t, uint64_t))(v44 - 8))(v31 + 96, v32 + 96);
      goto LABEL_28;
    }
LABEL_27:
    long long v45 = *(_OWORD *)(v32 + 96);
    long long v46 = *(_OWORD *)(v32 + 112);
    *(void *)(v31 + 128) = *(void *)(v32 + 128);
    *(_OWORD *)(v31 + 96) = v45;
    *(_OWORD *)(v31 + 112) = v46;
    goto LABEL_28;
  }
  if (!v44)
  {
    __swift_destroy_boxed_opaque_existential_1(v31 + 96);
    goto LABEL_27;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v31 + 96), (uint64_t *)(v32 + 96));
LABEL_28:
  *(unsigned char *)(v31 + 136) = *(unsigned char *)(v32 + 136);
  return a1;
}

uint64_t outlined destroy of Binding<PresentationDetent>(uint64_t a1)
{
  type metadata accessor for Binding<PresentationDetent>(0, &lazy cache variable for type metadata for Binding<PresentationDetent>, (uint64_t)&type metadata for PresentationDetent, MEMORY[0x1E4F41638]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of PresentationDimmingBehavior(uint64_t a1)
{
  return a1;
}

_OWORD *initializeWithTake for InspectorSplitView(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  a1[2] = a2[2];
  *(_OWORD *)((char *)a1 + 41) = *(_OWORD *)((char *)a2 + 41);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 57) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 57) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 32))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 32);
  uint64_t v12 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v13 = v12 + 32;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v11 + v14;
  uint64_t v16 = (v15 + v9) & ~v14;
  uint64_t v17 = (v15 + v10) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 32))(v16, v17);
  uint64_t v18 = *(void *)(v13 + 32);
  uint64_t v19 = (unsigned char *)(v18 + v16);
  uint64_t v20 = (unsigned char *)(v18 + v17);
  unsigned char *v19 = *v20;
  v19[1] = v20[1];
  uint64_t v21 = (_OWORD *)((unint64_t)(v19 + 9) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (_OWORD *)((unint64_t)(v20 + 9) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v21 = *v22;
  long long v23 = v22[4];
  long long v25 = v22[1];
  long long v24 = v22[2];
  v21[3] = v22[3];
  void v21[4] = v23;
  v21[1] = v25;
  void v21[2] = v24;
  long long v26 = *(_OWORD *)((char *)v22 + 121);
  long long v28 = v22[6];
  long long v27 = v22[7];
  v21[5] = v22[5];
  v21[6] = v28;
  v21[7] = v27;
  *(_OWORD *)((char *)v21 + 121) = v26;
  return a1;
}

uint64_t getEnumTagSinglePayload for InspectorSplitView(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  if (v6 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v5 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(v7 + 64) + 9;
  if (v12 < a2)
  {
    unint64_t v14 = ((v13 + ((v10 + v11 + ((v9 + 57) & ~v9)) & ~v11)) & 0xFFFFFFFFFFFFFFF8) + 137;
    unsigned int v15 = (a2 - v12 + 255) >> (8 * (((v13 + ((v10 + v11 + ((v9 + 57) & ~(_BYTE)v9)) & ~(_BYTE)v11)) & 0xF8) - 119));
    if (v14 < 4) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      LODWORD(v17) = 4;
    }
    else {
      LODWORD(v17) = 2;
    }
    if (v16 < 0x100) {
      LODWORD(v17) = 1;
    }
    if (v16 >= 2) {
      uint64_t v17 = v17;
    }
    else {
      uint64_t v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int v18 = a1[v14];
        if (!a1[v14]) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v18 = *(unsigned __int16 *)&a1[v14];
        if (*(_WORD *)&a1[v14]) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D30768);
      case 4:
        int v18 = *(_DWORD *)&a1[v14];
        if (!v18) {
          break;
        }
LABEL_24:
        int v20 = (v18 - 1) << (8 * (((v13 + ((v10 + v11 + ((v9 + 57) & ~(_BYTE)v9)) & ~(_BYTE)v11)) & 0xF8) - 119));
        if (v14 >= 4) {
          int v20 = 0;
        }
        if (((v13 + ((v10 + v11 + ((v9 + 57) & ~v9)) & ~v11)) & 0xFFFFFFF8) == 0xFFFFFF78) {
          int v21 = *a1;
        }
        else {
          int v21 = *(_DWORD *)a1;
        }
        return v12 + (v21 | v20) + 1;
      default:
        break;
    }
  }
  uint64_t v22 = (unint64_t)&a1[v9 + 57] & ~v9;
  if (v6 == v12) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v22, v6, v4);
  }
  uint64_t v23 = (v22 + v10 + v11) & ~v11;
  if (v8 == v12) {
    return (*(uint64_t (**)(uint64_t))(v7 + 48))(v23);
  }
  unint64_t v24 = *(void *)((v13 + v23) & 0xFFFFFFFFFFFFFFF8);
  if (v24 >= 0xFFFFFFFF) {
    LODWORD(v24) = -1;
  }
  return (v24 + 1);
}

void storeEnumTagSinglePayload for InspectorSplitView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(void *)(v6 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= v10) {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v6 + 84);
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  uint64_t v15 = *(void *)(*(void *)(v8 - 8) + 64) + 9;
  size_t v16 = ((v15 + ((v12 + v13 + ((v11 + 57) & ~v11)) & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 137;
  char v17 = 8 * (((v15 + ((v12 + v13 + ((v11 + 57) & ~(_BYTE)v11)) & ~(_BYTE)v13)) & 0xF8) - 119);
  if (v14 >= a3)
  {
    int v21 = 0;
    if (v14 >= a2)
    {
LABEL_19:
      switch(v21)
      {
        case 1:
          a1[v16] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 2:
          *(_WORD *)&a1[v16] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_36;
        case 3:
          goto LABEL_53;
        case 4:
          *(_DWORD *)&a1[v16] = 0;
          goto LABEL_35;
        default:
LABEL_35:
          if (a2)
          {
LABEL_36:
            unint64_t v24 = (unint64_t)&a1[v11 + 57] & ~v11;
            if (v7 == v14)
            {
              long long v25 = *(void (**)(unint64_t))(v6 + 56);
              v25(v24);
            }
            else
            {
              unint64_t v26 = (v24 + v12 + v13) & ~v13;
              if (v10 == v14)
              {
                long long v27 = *(void (**)(unint64_t))(v9 + 56);
                v27(v26);
              }
              else
              {
                unint64_t v28 = (v15 + v26) & 0xFFFFFFFFFFFFFFF8;
                if ((a2 & 0x80000000) != 0)
                {
                  *(_OWORD *)(v28 + 120) = 0u;
                  uint64_t v29 = a2 ^ 0x80000000;
                  *(_OWORD *)(v28 + 104) = 0u;
                  *(_OWORD *)(v28 + 88) = 0u;
                  *(_OWORD *)(v28 + 72) = 0u;
                  *(_OWORD *)(v28 + 56) = 0u;
                  *(_OWORD *)(v28 + 40) = 0u;
                  *(_OWORD *)(v28 + 24) = 0u;
                  *(_OWORD *)(v28 + 8) = 0u;
                  *(unsigned char *)(v28 + 136) = 0;
                }
                else
                {
                  uint64_t v29 = a2 - 1;
                }
                *(void *)unint64_t v28 = v29;
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v18 = (a3 - v14 + 255) >> v17;
    if (v16 <= 3) {
      unsigned int v19 = v18 + 1;
    }
    else {
      unsigned int v19 = 2;
    }
    if (v19 >= 0x10000) {
      int v20 = 4;
    }
    else {
      int v20 = 2;
    }
    if (v19 < 0x100) {
      int v20 = 1;
    }
    if (v19 >= 2) {
      int v21 = v20;
    }
    else {
      int v21 = 0;
    }
    if (v14 >= a2) {
      goto LABEL_19;
    }
  }
  if (v16 < 4) {
    unsigned int v22 = ((~v14 + a2) >> v17) + 1;
  }
  else {
    unsigned int v22 = 1;
  }
  if (v16 >= 4) {
    unsigned int v23 = ~v14 + a2;
  }
  else {
    unsigned int v23 = (~(_BYTE)v14 + a2);
  }
  bzero(a1, v16);
  if (v16 == 1) {
    *a1 = v23;
  }
  else {
    *(_DWORD *)a1 = v23;
  }
  switch(v21)
  {
    case 1:
      a1[v16] = v22;
      break;
    case 2:
      *(_WORD *)&a1[v16] = v22;
      break;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x187D30A80);
    case 4:
      *(_DWORD *)&a1[v16] = v22;
      break;
    default:
      return;
  }
}

uint64_t associated type witness table accessor for View.Body : View in InspectorSplitView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for _InspectorSplitViewRoot()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for _InspectorSplitViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 59) & (unint64_t)~v7) + *(void *)(v6 + 64) > 0x18)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    uint64_t v11 = *(void *)a2;
    uint64_t v12 = *(void *)(a2 + 8);
    char v13 = *(unsigned char *)(a2 + 17);
    unsigned __int8 v14 = *(unsigned char *)(a2 + 16);
    outlined copy of StateOrBinding<Bool>(*(void *)a2, v12, v14, v13);
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v12;
    *(unsigned char *)(a1 + 16) = v14;
    *(unsigned char *)(a1 + 17) = v13;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
    *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))((a1 + v7 + 59) & ~v7, (a2 + v7 + 59) & ~v7, v5);
  }
  return a1;
}

uint64_t destroy for _InspectorSplitViewRoot(uint64_t a1, uint64_t a2)
{
  outlined consume of StateOrBinding<Bool>(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(unsigned char *)(a1 + 17));
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 59) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t initializeWithCopy for _InspectorSplitViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 17);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of StateOrBinding<Bool>(*(void *)a2, v7, v9, v8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 17) = v8;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 16))((*(unsigned __int8 *)(v10 + 80) + 59 + a1) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 59 + a2) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t assignWithCopy for _InspectorSplitViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  char v8 = *(unsigned char *)(a2 + 17);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of StateOrBinding<Bool>(*(void *)a2, v7, v9, v8);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  char v12 = *(unsigned char *)(a1 + 17);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v13 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 17) = v8;
  outlined consume of StateOrBinding<Bool>(v10, v11, v13, v12);
  long long v14 = *(_OWORD *)(a2 + 24);
  long long v15 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v15;
  *(_OWORD *)(a1 + 24) = v14;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 24))((*(unsigned __int8 *)(v16 + 80) + 59 + a1) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), (*(unsigned __int8 *)(v16 + 80) + 59 + a2) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return a1;
}

uint64_t initializeWithTake for _InspectorSplitViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))((*(unsigned __int8 *)(v5 + 80) + 59 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 59 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t assignWithTake for _InspectorSplitViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 17);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  char v10 = *(unsigned char *)(a1 + 17);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v11 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 17) = v7;
  outlined consume of StateOrBinding<Bool>(v8, v9, v11, v10);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 40))((*(unsigned __int8 *)(v12 + 80) + 59 + a1) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(unsigned __int8 *)(v12 + 80) + 59 + a2) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _InspectorSplitViewRoot(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 59) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0x7FFFFFFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 59) & ~v6);
      }
      uint64_t v15 = *((void *)a1 + 4) >> 1;
      int v16 = -2 - v15;
      if (-2 - (int)v15 < 0) {
        int v16 = -1;
      }
      if (v15 > 0x80000000) {
        return (v16 + 1);
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for _InspectorSplitViewRoot(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 59) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187D31454);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0x7FFFFFFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 59] & ~v9;
          unsigned int v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *(_OWORD *)(a1 + 40) = 0u;
          *(_OWORD *)(a1 + 24) = 0u;
          *(_OWORD *)(a1 + 8) = 0u;
          a1[56] = 0;
          *(void *)a1 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *((void *)a1 + 3) = 0;
          *((void *)a1 + 4) = 2 * ~a2;
          *((void *)a1 + 5) = 0;
          *((void *)a1 + 6) = 0;
          a1[56] = 0;
        }
      }
      return;
  }
}

uint64_t sub_187D3147C()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for _InspectorSplitViewRoot<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in _InspectorSplitViewRoot<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t _InspectorSplitViewRoot.presented.getter()
{
  if (*(unsigned char *)(v0 + 17))
  {
    type metadata accessor for Binding<PresentationDetent>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v2);
  }
  else
  {
    type metadata accessor for Binding<PresentationDetent>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    State.wrappedValue.getter();
  }
  return v2;
}

uint64_t _InspectorSplitViewRoot.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  double v9 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2, v9);
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v21);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  long long v18 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v11 + 16) = v18;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  unint64_t v12 = v11 + ((v8 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = v21[1];
  *(_OWORD *)unint64_t v12 = v21[0];
  *(_OWORD *)(v12 + 16) = v13;
  *(_OWORD *)(v12 + 32) = v21[2];
  *(void *)(v12 + 48) = v22;
  type metadata accessor for _LayoutRoot<InspectorSplitViewLayout>(255, &lazy cache variable for type metadata for _LayoutRoot<InspectorSplitViewLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout, (uint64_t)&unk_1ED4423C8, MEMORY[0x1E4F3F598]);
  type metadata accessor for _AnimationModifier<Bool>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _LayoutRoot<InspectorSplitViewLayout>(255, &lazy cache variable for type metadata for _OverlayModifier<InspectorDimmingView>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorDimmingView and conformance InspectorDimmingView, (uint64_t)&type metadata for InspectorDimmingView, MEMORY[0x1E4F3FE70]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?(255);
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  lazy protocol witness table accessor for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>();
  type metadata accessor for _VariadicView.Tree();
  unint64_t v14 = lazy protocol witness table accessor for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v19 = v14;
  uint64_t v20 = WitnessTable;
  swift_getWitnessTable();
  uint64_t result = GeometryReader.init(content:)();
  *a3 = result;
  a3[1] = v17;
  return result;
}

uint64_t closure #1 in _InspectorSplitViewRoot.body(children:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v44 = a3;
  type metadata accessor for _LayoutRoot<InspectorSplitViewLayout>(255, &lazy cache variable for type metadata for _LayoutRoot<InspectorSplitViewLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout, (uint64_t)&unk_1ED4423C8, MEMORY[0x1E4F3F598]);
  type metadata accessor for _AnimationModifier<Bool>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _LayoutRoot<InspectorSplitViewLayout>(255, &lazy cache variable for type metadata for _OverlayModifier<InspectorDimmingView>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorDimmingView and conformance InspectorDimmingView, (uint64_t)&type metadata for InspectorDimmingView, MEMORY[0x1E4F3FE70]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?(255);
  swift_getTupleTypeMetadata2();
  uint64_t v11 = type metadata accessor for TupleView();
  lazy protocol witness table accessor for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>();
  uint64_t v42 = v11;
  uint64_t v12 = type metadata accessor for _VariadicView.Tree();
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v40 - v16;
  long long v18 = a1[1];
  long long v51 = *a1;
  long long v52 = v18;
  long long v53 = a1[2];
  int v54 = *((_DWORD *)a1 + 12);
  type metadata accessor for _InspectorSplitViewRoot();
  char v19 = _InspectorSplitViewRoot.presented.getter();
  int v41 = *(unsigned __int8 *)(a2 + 57);
  unsigned int v20 = *(unsigned __int8 *)(a2 + 56);
  if (*(void *)(a2 + 32) >> 1 == 0xFFFFFFFFLL && v20 < 2)
  {
    v40[0] = a5;
    v40[1] = a6;
    uint64_t v21 = *(void *)a2;
    uint64_t v22 = *(void *)(a2 + 8);
    uint64_t v23 = *(unsigned __int8 *)(a2 + 16);
    char v24 = *(unsigned char *)(a2 + 17);
    outlined copy of StateOrBinding<Bool>(*(void *)a2, v22, v23, v24);
    if (one-time initialization token for defaultInspectorWidth != -1) {
      swift_once();
    }
    double v25 = *(double *)&defaultInspectorWidth;
    outlined consume of StateOrBinding<Bool>(v21, v22, v23, v24);
    a5 = v40[0];
  }
  else
  {
    if ((v20 & 0x80u) == 0) {
      unint64_t v26 = (double *)(a2 + 24);
    }
    else {
      unint64_t v26 = (double *)(a2 + 40);
    }
    double v25 = *v26;
  }
  long long v47 = v51;
  long long v48 = v52;
  long long v49 = v53;
  int v50 = v54;
  GeometryProxy.safeAreaInsets.getter();
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  uint64_t v32 = v31;
  uint64_t v34 = v33;
  uint64_t v35 = swift_allocObject();
  *(void *)(v35 + 16) = a4;
  *(void *)(v35 + 24) = a5;
  *(unsigned char *)(v35 + 32) = v19 & 1;
  *(unsigned char *)(v35 + 33) = v41;
  *(double *)(v35 + 40) = v25 + 0.5;
  *(void *)(v35 + 48) = v28;
  *(void *)(v35 + 56) = v30;
  *(void *)(v35 + 64) = v32;
  *(void *)(v35 + 72) = v34;
  MEMORY[0x1F4188790](v35);
  v40[-6] = a4;
  v40[-5] = a5;
  v40[-4] = a2;
  v40[-3] = &v51;
  v40[-2] = v44;
  implicit closure #2 in implicit closure #1 in closure #1 in _InspectorSplitViewRoot.body(children:)((uint64_t)partial apply for closure #1 in closure #1 in _InspectorSplitViewRoot.body(children:), (uint64_t)&v40[-8], (uint64_t)v14);
  swift_release();
  unint64_t v36 = lazy protocol witness table accessor for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v45 = v36;
  uint64_t v46 = WitnessTable;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v14);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v43 + 8);
  v38(v14, v12);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v38)(v17, v12);
}

uint64_t implicit closure #2 in implicit closure #1 in closure #1 in _InspectorSplitViewRoot.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for _AnimationModifier<Bool>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _LayoutRoot<InspectorSplitViewLayout>(255, &lazy cache variable for type metadata for _OverlayModifier<InspectorDimmingView>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorDimmingView and conformance InspectorDimmingView, (uint64_t)&type metadata for InspectorDimmingView, MEMORY[0x1E4F3FE70]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?(255);
  swift_getTupleTypeMetadata2();
  uint64_t v6 = type metadata accessor for TupleView();
  unint64_t v7 = lazy protocol witness table accessor for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout();
  uint64_t WitnessTable = swift_getWitnessTable();
  return Layout.callAsFunction<A>(_:)(a1, a2, (uint64_t)&unk_1ED4423C8, v6, v7, WitnessTable, a3);
}

uint64_t closure #1 in closure #1 in _InspectorSplitViewRoot.body(children:)@<X0>(uint64_t *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v66 = a3;
  uint64_t v68 = a6;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = &v63[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for _AnimationModifier<Bool>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v72 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v77 = &v63[-v14];
  type metadata accessor for _LayoutRoot<InspectorSplitViewLayout>(255, &lazy cache variable for type metadata for _OverlayModifier<InspectorDimmingView>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorDimmingView and conformance InspectorDimmingView, (uint64_t)&type metadata for InspectorDimmingView, MEMORY[0x1E4F3FE70]);
  uint64_t v73 = v13;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v75 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  int v67 = &v63[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v17);
  uint64_t v71 = &v63[-v18];
  MEMORY[0x1F4188790](v19);
  int v76 = &v63[-v20];
  long long v21 = a2[1];
  long long v104 = *a2;
  long long v105 = v21;
  long long v106 = a2[2];
  LODWORD(v107) = *((_DWORD *)a2 + 12);
  GeometryProxy.size.getter();
  double v23 = v22;
  double v25 = v24;
  uint64_t v26 = type metadata accessor for _InspectorSplitViewRoot();
  uint64_t v27 = v26;
  int v28 = *((unsigned __int8 *)a1 + 57);
  uint64_t v74 = v15;
  if (v28 == 1)
  {
    double v29 = 1194.0;
    if (v25 < v23) {
      double v29 = 1024.0;
    }
    int v30 = v29 <= v23;
  }
  else
  {
    int v30 = 2;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v12, (uint64_t)a1 + *(int *)(v26 + 44), a4);
  Spring.init(mass:stiffness:damping:allowOverDamping:)();
  long long v89 = v104;
  *(void *)&long long v90 = v105;
  static Animation.spring(_:blendDuration:)();
  uint64_t v32 = *a1;
  uint64_t v31 = a1[1];
  char v33 = *((unsigned char *)a1 + 17);
  uint64_t v65 = v27;
  if (v33)
  {
    char v34 = a1[2] & 1;
    *(void *)&long long v104 = v32;
    *((void *)&v104 + 1) = v31;
    LOBYTE(v105) = v34;
    type metadata accessor for Binding<PresentationDetent>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v89);
  }
  else
  {
    LOBYTE(v104) = v32 & 1;
    *((void *)&v104 + 1) = v31;
    type metadata accessor for Binding<PresentationDetent>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    State.wrappedValue.getter();
  }
  LOBYTE(v104) = v89;
  View.animation<A>(_:value:)();
  swift_release();
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v12, a4);
  uint64_t v35 = *a1;
  uint64_t v36 = a1[1];
  char v37 = *((unsigned char *)a1 + 17);
  uint64_t v70 = a1;
  if (v37)
  {
    swift_retain();
    uint64_t v38 = swift_retain();
  }
  else
  {
    LOBYTE(v89) = v35 & 1;
    *((void *)&v89 + 1) = v36;
    type metadata accessor for Binding<PresentationDetent>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    uint64_t v38 = State.projectedValue.getter();
  }
  uint64_t v69 = v63;
  MEMORY[0x1F4188790](v38);
  static Alignment.center.getter();
  unint64_t v39 = lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>();
  uint64_t v121 = a5;
  unint64_t v122 = v39;
  uint64_t v40 = v73;
  uint64_t WitnessTable = swift_getWitnessTable();
  int v64 = v30;
  uint64_t v42 = WitnessTable;
  lazy protocol witness table accessor for type InspectorDimmingView and conformance InspectorDimmingView();
  uint64_t v43 = v71;
  uint64_t v44 = v77;
  View.overlay<A>(alignment:content:)();
  (*(void (**)(unsigned char *, uint64_t))(v72 + 8))(v44, v40);
  swift_release();
  swift_release();
  unint64_t v45 = lazy protocol witness table accessor for type _OverlayModifier<InspectorDimmingView> and conformance _OverlayModifier<A>();
  uint64_t v119 = v42;
  unint64_t v120 = v45;
  uint64_t v46 = v74;
  uint64_t v47 = swift_getWitnessTable();
  long long v48 = v76;
  static ViewBuilder.buildExpression<A>(_:)(v43);
  uint64_t v49 = v75;
  int v50 = *(void (**)(unsigned char *, uint64_t))(v75 + 8);
  v50(v43, v46);
  long long v51 = v70;
  if (*((unsigned char *)v70 + 57) == 1)
  {
    uint64_t v80 = static VerticalAlignment.center.getter();
    uint64_t v81 = 0;
    char v82 = 0;
    static Alignment.center.getter();
    specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v79, 0.0, 1, INFINITY, 0);
    outlined init with copy of ModifiedContent<_VariadicView_Children, _FlexFrameLayout>((uint64_t)v79, (uint64_t)v78);
    outlined init with copy of ModifiedContent<_VariadicView_Children, _FlexFrameLayout>((uint64_t)v78, (uint64_t)&v83);
    outlined destroy of ModifiedContent<_VariadicView_Children, _FlexFrameLayout>((uint64_t)v79);
    outlined destroy of ModifiedContent<_VariadicView_Children, _FlexFrameLayout>((uint64_t)v78);
    uint64_t v52 = static Alignment.leading.getter();
    uint64_t v54 = v53;
    char v55 = _InspectorSplitViewRoot.presented.getter() & 1;
    outlined init with copy of ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?((uint64_t)&v80, (uint64_t)v84, (uint64_t (*)(void))type metadata accessor for HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>);
    char v85 = v64;
    char v86 = v55;
    uint64_t v87 = v52;
    uint64_t v88 = v54;
    outlined destroy of ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>((uint64_t)&v80, (uint64_t (*)(void))type metadata accessor for HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>);
    Spring.init(mass:stiffness:damping:allowOverDamping:)();
    long long v89 = v104;
    *(void *)&long long v90 = v105;
    uint64_t v56 = static Animation.spring(_:blendDuration:)();
    uint64_t v57 = v51[1];
    if (*((unsigned char *)v51 + 17))
    {
      char v58 = v51[2] & 1;
      *(void *)&long long v104 = *v51;
      *((void *)&v104 + 1) = v57;
      LOBYTE(v105) = v58;
      type metadata accessor for Binding<PresentationDetent>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
      MEMORY[0x18C113DA0](&v89);
    }
    else
    {
      LOBYTE(v104) = *v51 & 1;
      *((void *)&v104 + 1) = v57;
      type metadata accessor for Binding<PresentationDetent>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
      State.wrappedValue.getter();
    }
    char v60 = v89;
    outlined init with copy of ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?((uint64_t)v84, (uint64_t)&v89, (uint64_t (*)(void))type metadata accessor for ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>);
    *((void *)&v102 + 1) = v56;
    char v103 = v60;
    outlined destroy of ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>((uint64_t)v84, (uint64_t (*)(void))type metadata accessor for ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>);
    long long v116 = v101;
    long long v117 = v102;
    char v118 = v103;
    long long v112 = v97;
    long long v113 = v98;
    long long v114 = v99;
    long long v115 = v100;
    long long v108 = v93;
    long long v109 = v94;
    long long v110 = v95;
    long long v111 = v96;
    long long v104 = v89;
    long long v105 = v90;
    long long v106 = v91;
    long long v107 = v92;
    uint64_t v59 = v67;
    uint64_t v49 = v75;
    long long v48 = v76;
  }
  else
  {
    char v118 = 0;
    long long v116 = 0u;
    long long v117 = 0u;
    long long v114 = 0u;
    long long v115 = 0u;
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    uint64_t v59 = v67;
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v49 + 16))(v59, v48, v46);
  v84[0] = v59;
  outlined init with copy of ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?((uint64_t)&v104, (uint64_t)&v89, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?);
  v84[1] = &v89;
  uint64_t v80 = v46;
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?(0);
  uint64_t v81 = v61;
  v79[0] = v47;
  v79[1] = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>? and conformance <A> A?();
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v84, 2uLL, (uint64_t)&v80);
  outlined destroy of ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>((uint64_t)&v104, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?);
  v50(v48, v46);
  outlined destroy of ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>((uint64_t)&v89, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?);
  return ((uint64_t (*)(unsigned char *, uint64_t))v50)(v59, v46);
}

uint64_t static _InspectorSplitViewRoot._viewListOptions.getter()
{
  return 128;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _InspectorSplitViewRoot<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance _InspectorSplitViewRoot<A>()
{
  return static _InspectorSplitViewRoot._viewListOptions.getter();
}

uint64_t sub_187D32A38()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for _InspectorSplitViewRoot() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  unint64_t v4 = (*(void *)(*(void *)v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  outlined consume of StateOrBinding<Bool>(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8), *(unsigned __int8 *)(v0 + v3 + 16), *(unsigned char *)(v0 + v3 + 17));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v5 + v2[13], v1);
  __swift_destroy_boxed_opaque_existential_1(v0 + v4);

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in _InspectorSplitViewRoot.body(children:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for _InspectorSplitViewRoot() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v2 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);

  return closure #1 in _InspectorSplitViewRoot.body(children:)(a1, v2 + v8, v9, v5, v6, a2);
}

unint64_t lazy protocol witness table accessor for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout;
  if (!lazy protocol witness table cache variable for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout;
  if (!lazy protocol witness table cache variable for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InspectorDimmingView and conformance InspectorDimmingView()
{
  unint64_t result = lazy protocol witness table cache variable for type InspectorDimmingView and conformance InspectorDimmingView;
  if (!lazy protocol witness table cache variable for type InspectorDimmingView and conformance InspectorDimmingView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InspectorDimmingView and conformance InspectorDimmingView);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>();
    type metadata accessor for _AnimationModifier<Bool>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>);
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>)
  {
    type metadata accessor for HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>();
    type metadata accessor for _LayoutRoot<InspectorSplitViewLayout>(255, &lazy cache variable for type metadata for _BackgroundModifier<InspectorSeparatorShadow>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorSeparatorShadow and conformance InspectorSeparatorShadow, (uint64_t)&type metadata for InspectorSeparatorShadow, MEMORY[0x1E4F40558]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>);
    }
  }
}

void type metadata accessor for HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>)
  {
    type metadata accessor for TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>(255);
    lazy protocol witness table accessor for type TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)> and conformance TupleView<A>, type metadata accessor for TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>);
    }
  }
}

void type metadata accessor for TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)()
{
  if (!lazy cache variable for type metadata for (InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>))
  {
    type metadata accessor for _AnimationModifier<Bool>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children, _FlexFrameLayout>, MEMORY[0x1E4F40A38], MEMORY[0x1E4F3FE58], MEMORY[0x1E4F3FBA0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>));
    }
  }
}

void type metadata accessor for _AnimationModifier<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for _LayoutRoot<InspectorSplitViewLayout>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type InspectorSeparatorShadow and conformance InspectorSeparatorShadow()
{
  unint64_t result = lazy protocol witness table cache variable for type InspectorSeparatorShadow and conformance InspectorSeparatorShadow;
  if (!lazy protocol witness table cache variable for type InspectorSeparatorShadow and conformance InspectorSeparatorShadow)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InspectorSeparatorShadow and conformance InspectorSeparatorShadow);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for _LayoutRoot<InspectorSplitViewLayout>(255, &lazy cache variable for type metadata for _LayoutRoot<InspectorSplitViewLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout, (uint64_t)&unk_1ED4423C8, MEMORY[0x1E4F3F598]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for _LayoutRoot<InspectorSplitViewLayout>(255, &lazy cache variable for type metadata for _LayoutRoot<InspectorSplitViewLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout, (uint64_t)&unk_1ED4423C8, MEMORY[0x1E4F3F598]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<InspectorSplitViewLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in _InspectorSplitViewRoot.body(children:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in _InspectorSplitViewRoot.body(children:)(*(uint64_t **)(v1 + 32), *(long long **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in _InspectorSplitViewRoot.body(children:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  char v4 = *(unsigned char *)(v1 + 40);
  *(unsigned char *)a1 = *(unsigned char *)(v1 + 16);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  swift_retain();

  return swift_retain();
}

unint64_t lazy protocol witness table accessor for type _OverlayModifier<InspectorDimmingView> and conformance _OverlayModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _OverlayModifier<InspectorDimmingView> and conformance _OverlayModifier<A>;
  if (!lazy protocol witness table cache variable for type _OverlayModifier<InspectorDimmingView> and conformance _OverlayModifier<A>)
  {
    type metadata accessor for _LayoutRoot<InspectorSplitViewLayout>(255, &lazy cache variable for type metadata for _OverlayModifier<InspectorDimmingView>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorDimmingView and conformance InspectorDimmingView, (uint64_t)&type metadata for InspectorDimmingView, MEMORY[0x1E4F3FE70]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OverlayModifier<InspectorDimmingView> and conformance _OverlayModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, (void (*)(void))lazy protocol witness table accessor for type HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>> and conformance HStack<A>, (void (*)(void))lazy protocol witness table accessor for type _BackgroundModifier<InspectorSeparatorShadow> and conformance _BackgroundModifier<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>> and conformance HStack<A>()
{
  return lazy protocol witness table accessor for type TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>);
}

uint64_t lazy protocol witness table accessor for type TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)> and conformance TupleView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundModifier<InspectorSeparatorShadow> and conformance _BackgroundModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _BackgroundModifier<InspectorSeparatorShadow> and conformance _BackgroundModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundModifier<InspectorSeparatorShadow> and conformance _BackgroundModifier<A>)
  {
    type metadata accessor for _LayoutRoot<InspectorSplitViewLayout>(255, &lazy cache variable for type metadata for _BackgroundModifier<InspectorSeparatorShadow>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorSeparatorShadow and conformance InspectorSeparatorShadow, (uint64_t)&type metadata for InspectorSeparatorShadow, MEMORY[0x1E4F40558]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundModifier<InspectorSeparatorShadow> and conformance _BackgroundModifier<A>);
  }
  return result;
}

uint64_t outlined init with copy of ModifiedContent<_VariadicView_Children, _FlexFrameLayout>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _AnimationModifier<Bool>(0, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children, _FlexFrameLayout>, MEMORY[0x1E4F40A38], MEMORY[0x1E4F3FE58], MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<_VariadicView_Children, _FlexFrameLayout>(uint64_t a1)
{
  type metadata accessor for _AnimationModifier<Bool>(0, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children, _FlexFrameLayout>, MEMORY[0x1E4F40A38], MEMORY[0x1E4F3FE58], MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<HStack<TupleView<(InspectorColumnSeparator, ModifiedContent<_VariadicView_Children, _FlexFrameLayout>)>>, _BackgroundModifier<InspectorSeparatorShadow>>, _AnimationModifier<Bool>>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for Binding<PresentationDetent>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_187D337D0()
{
  return swift_deallocObject();
}

void *type metadata accessor for InspectorSplitViewLayout()
{
  return &unk_1ED4423C8;
}

uint64_t sub_187D337F0()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance InspectorSplitViewLayout(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double *a9)
{
  return specialized InspectorSplitViewLayout.placeSubviews(in:proposal:subviews:cache:)(a9, a1, a2, a3, a4);
}

unint64_t instantiation function for generic protocol witness table for InspectorSplitViewLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type InspectorSplitViewLayout and conformance InspectorSplitViewLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t specialized InspectorSplitViewLayout.placeSubviews(in:proposal:subviews:cache:)(double *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  int v10 = *(_DWORD *)a1;
  CGFloat v11 = a1[1];
  char v12 = *((unsigned char *)a1 + 16);
  char v13 = *((unsigned char *)a1 + 17);
  int v14 = *(unsigned __int8 *)v5;
  double v15 = v5[1];
  double v16 = v5[5];
  double v24 = v5[2];
  if (*((unsigned char *)v5 + 1) == 1)
  {
    double v17 = 1194.0;
    if (a5 < a4) {
      double v17 = 1024.0;
    }
    if (v17 > a4)
    {
      LODWORD(v25.a) = *(_DWORD *)a1;
      v25.b = v11;
      LOBYTE(v25.c) = v12;
      BYTE1(v25.c) = v13;
      uint64_t result = LayoutSubviews.endIndex.getter();
      if ((result & 0x8000000000000000) == 0)
      {
        uint64_t v19 = result;
        if (result)
        {
          uint64_t v20 = 0;
          do
          {
            if (v20)
            {
              v33.origin.double x = a2;
              v33.origin.double y = a3;
              v33.size.width = a4;
              v33.size.height = a5;
              CGRectGetWidth(v33);
              v34.origin.double x = a2;
              v34.origin.double y = a3;
              v34.size.width = a4;
              v34.size.height = a5;
              CGRectGetHeight(v34);
              BYTE1(v25.c) = v13;
              LayoutSubviews.subscript.getter();
              *(_OWORD *)&v25.a = v28;
              LOBYTE(v25.c) = v29;
            }
            else
            {
              BYTE1(v25.c) = v13;
              LayoutSubviews.subscript.getter();
              *(_OWORD *)&v25.a = v28;
              LOBYTE(v25.c) = v29;
              v31.origin.double x = a2;
              v31.origin.double y = a3;
              v31.size.width = a4;
              v31.size.height = a5;
              CGRectGetWidth(v31);
              v32.origin.double x = a2;
              v32.origin.double y = a3;
              v32.size.width = a4;
              v32.size.height = a5;
              CGRectGetHeight(v32);
            }
            static UnitPoint.topLeading.getter();
            LOBYTE(v26) = 0;
            uint64_t result = LayoutSubview.place(at:anchor:proposal:)();
            ++v20;
          }
          while (v19 != v20);
        }
        return result;
      }
LABEL_23:
      __break(1u);
      return result;
    }
  }
  LODWORD(v25.a) = *(_DWORD *)a1;
  v25.b = v11;
  LOBYTE(v25.c) = v12;
  BYTE1(v25.c) = v13;
  uint64_t result = LayoutSubviews.endIndex.getter();
  if (result < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v21 = result;
  if (result)
  {
    uint64_t v22 = 0;
    if (v14) {
      double v16 = -v15;
    }
    do
    {
      LODWORD(v25.a) = v10;
      v25.b = v11;
      LOBYTE(v25.c) = v12;
      BYTE1(v25.c) = v13;
      LayoutSubviews.subscript.getter();
      if (v22)
      {
        long long v26 = v28;
        char v27 = v29;
        v37.origin.double x = a2;
        v37.origin.double y = a3;
        v37.size.width = a4;
        v37.size.height = a5;
        CGFloat Width = CGRectGetWidth(v37);
        CGAffineTransformMakeTranslation(&v25, Width + v16, -v24);
        v30.double x = a2;
        v30.double y = a3;
        CGPointApplyAffineTransform(v30, &v25);
        v38.origin.double x = a2;
        v38.origin.double y = a3;
        v38.size.width = a4;
        v38.size.height = a5;
        CGRectGetHeight(v38);
        static UnitPoint.topLeading.getter();
        LOBYTE(v25.a) = 0;
      }
      else
      {
        *(_OWORD *)&v25.a = v28;
        LOBYTE(v25.c) = v29;
        v35.origin.double x = a2;
        v35.origin.double y = a3;
        v35.size.width = a4;
        v35.size.height = a5;
        CGRectGetWidth(v35);
        v36.origin.double x = a2;
        v36.origin.double y = a3;
        v36.size.width = a4;
        v36.size.height = a5;
        CGRectGetHeight(v36);
        static UnitPoint.topLeading.getter();
        LOBYTE(v26) = 0;
      }
      uint64_t result = LayoutSubview.place(at:anchor:proposal:)();
      ++v22;
    }
    while (v21 != v22);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for InspectorPresentationMode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    void *result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D33F40);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InspectorPresentationMode()
{
  return &type metadata for InspectorPresentationMode;
}

unint64_t lazy protocol witness table accessor for type InspectorPresentationMode and conformance InspectorPresentationMode()
{
  unint64_t result = lazy protocol witness table cache variable for type InspectorPresentationMode and conformance InspectorPresentationMode;
  if (!lazy protocol witness table cache variable for type InspectorPresentationMode and conformance InspectorPresentationMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InspectorPresentationMode and conformance InspectorPresentationMode);
  }
  return result;
}

uint64_t dispatch thunk of ClarityUIApplicationDelegate.rootViewForSimplifiedApplication.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of RootViewForSimplifiedApplicationProvider.rootViewForSimplifiedApplication.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t ClarityUIApplicationDelegate.makeRootViewForSimplifiedApplication()(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v5 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 24))(a1, a2, v5);
  swift_getAssociatedConformanceWitness();
  return AnyView.init<A>(_:)();
}

uint64_t RootViewForSimplifiedApplicationProvider.makeRootViewForSimplifiedApplication()(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v5 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, double))(a2 + 24))(a1, a2, v5);
  swift_getAssociatedConformanceWitness();
  return AnyView.init<A>(_:)();
}

void type metadata completion function for TokenField()
{
  type metadata accessor for Binding<AttributedString>();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for TokenField(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = ((v8 + 16) & ~v8) + *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  unint64_t v13 = ((v12 + 32 + ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v12) + *(void *)(v11 + 64);
  int v14 = (*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000;
  uint64_t v15 = *a2;
  *a1 = *a2;
  if ((v12 | v8) > 7 || v14 != 0 || v13 > 0x18)
  {
    a1 = (uint64_t *)(v15 + (((v12 | v8) & 0xF8 ^ 0x1F8) & ((v12 | v8) + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v35 = v12 + 32;
    uint64_t v36 = v10;
    uint64_t v34 = ~v12;
    uint64_t v18 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v19 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v18 = *v19;
    uint64_t v20 = ((unint64_t)v18 + v8 + 8) & ~v8;
    uint64_t v21 = ((unint64_t)v19 + v8 + 8) & ~v8;
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v22(v20, v21, v6);
    double v23 = (void *)(((unint64_t)a1 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
    double v24 = (void *)(((unint64_t)a2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v25 = v24[1];
    *double v23 = *v24;
    v23[1] = v25;
    unint64_t v26 = ((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = ((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v28 = *(void *)(v27 + 24);
    swift_retain();
    if (v28 < 0xFFFFFFFF)
    {
      long long v32 = *(_OWORD *)(v27 + 16);
      *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
      *(_OWORD *)(v26 + 16) = v32;
    }
    else
    {
      uint64_t v29 = *(void *)v27;
      uint64_t v30 = *(void *)(v27 + 8);
      char v31 = *(unsigned char *)(v27 + 16);
      outlined copy of Text.Storage(*(void *)v27, v30, v31);
      *(void *)unint64_t v26 = v29;
      *(void *)(v26 + 8) = v30;
      *(unsigned char *)(v26 + 16) = v31;
      *(void *)(v26 + 24) = *(void *)(v27 + 24);
      swift_bridgeObjectRetain();
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))((v35 + v26) & v34, (v35 + v27) & v34, v36);
  }
  return a1;
}

uint64_t destroy for TokenField(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6 + 8;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(((v4 & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & ~v8, v5);
  unint64_t v9 = (a1 + *(void *)(v7 + 56) + ((v8 + 16) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  unint64_t v10 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v10 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v12 = *(uint64_t (**)(unint64_t))(v11 + 8);
  unint64_t v13 = (v10 + *(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);

  return v12(v13);
}

void *initializeWithCopy for TokenField(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = type metadata accessor for AttributedString();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = *(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v8 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  swift_retain();
  swift_retain();
  v9(((unint64_t)v5 + v11 + 8) & ~v11, ((unint64_t)v6 + v11 + 8) & ~v11, v7);
  uint64_t v12 = ((v11 + 16) & ~v11) + *(void *)(v10 + 48) + 7;
  unint64_t v13 = (void *)(((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8);
  int v14 = (void *)(((unint64_t)a2 + v12) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = v14[1];
  *unint64_t v13 = *v14;
  v13[1] = v15;
  unint64_t v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = *(void *)(v17 + 24);
  swift_retain();
  if (v18 < 0xFFFFFFFF)
  {
    long long v22 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v22;
  }
  else
  {
    uint64_t v19 = *(void *)v17;
    uint64_t v20 = *(void *)(v17 + 8);
    char v21 = *(unsigned char *)(v17 + 16);
    outlined copy of Text.Storage(*(void *)v17, v20, v21);
    *(void *)unint64_t v16 = v19;
    *(void *)(v16 + 8) = v20;
    *(unsigned char *)(v16 + 16) = v21;
    *(void *)(v16 + 24) = *(void *)(v17 + 24);
    swift_bridgeObjectRetain();
  }
  uint64_t v23 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v23 + 16))((v16 + *(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80), (v17 + *(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  return a1;
}

void *assignWithCopy for TokenField(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_retain();
  swift_release();
  uint64_t v8 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9 + 24;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24))(((unint64_t)v7 + v11 + 8) & ~v11, (v11 + 8 + v6) & ~v11, v8);
  uint64_t v12 = ((v11 + 16) & ~v11) + *(void *)(v10 + 40) + 7;
  unint64_t v13 = (void *)(((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8);
  int v14 = (void *)(((unint64_t)a2 + v12) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = v14[1];
  *unint64_t v13 = *v14;
  v13[1] = v15;
  swift_retain();
  swift_release();
  unint64_t v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = *(void *)(v17 + 24);
  if (*(void *)(v16 + 24) < 0xFFFFFFFFuLL)
  {
    if (v18 >= 0xFFFFFFFF)
    {
      uint64_t v25 = *(void *)v17;
      uint64_t v26 = *(void *)(v17 + 8);
      char v27 = *(unsigned char *)(v17 + 16);
      outlined copy of Text.Storage(*(void *)v17, v26, v27);
      *(void *)unint64_t v16 = v25;
      *(void *)(v16 + 8) = v26;
      *(unsigned char *)(v16 + 16) = v27;
      *(void *)(v16 + 24) = *(void *)(v17 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    long long v28 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v28;
    goto LABEL_8;
  }
  if (v18 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(void *)v16, *(void *)(v16 + 8), *(unsigned char *)(v16 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v19 = *(void *)v17;
  uint64_t v20 = *(void *)(v17 + 8);
  char v21 = *(unsigned char *)(v17 + 16);
  outlined copy of Text.Storage(*(void *)v17, v20, v21);
  uint64_t v22 = *(void *)v16;
  uint64_t v23 = *(void *)(v16 + 8);
  char v24 = *(unsigned char *)(v16 + 16);
  *(void *)unint64_t v16 = v19;
  *(void *)(v16 + 8) = v20;
  *(unsigned char *)(v16 + 16) = v21;
  outlined consume of Text.Storage(v22, v23, v24);
  *(void *)(v16 + 24) = *(void *)(v17 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v29 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v29 + 24))((v16 + *(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80), (v17 + *(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
  return a1;
}

void *initializeWithTake for TokenField(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v6 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v6 = *v7;
  uint64_t v8 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))(((unint64_t)v6 + v11 + 8) & ~v11, ((unint64_t)v7 + v11 + 8) & ~v11, v8);
  uint64_t v12 = ((v11 + 16) & ~v11) + *(void *)(v10 + 32) + 7;
  unint64_t v13 = (_OWORD *)(((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8);
  int v14 = (_OWORD *)(((unint64_t)a2 + v12) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  uint64_t v15 = (_OWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (_OWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v18 + 32))(((unint64_t)v15 + *(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80), ((unint64_t)v16 + *(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
  return a1;
}

void *assignWithTake for TokenField(void *a1, void *a2, uint64_t a3)
{
  unint64_t v6 = (unint64_t)a2 + 15;
  *a1 = *a2;
  swift_release();
  uint64_t v7 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  v6 &= 0xFFFFFFFFFFFFFFF8;
  *uint64_t v7 = *(void *)v6;
  swift_release();
  uint64_t v8 = type metadata accessor for AttributedString();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = v9 + 40;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))(((unint64_t)v7 + v11 + 8) & ~v11, (v11 + 8 + v6) & ~v11, v8);
  uint64_t v12 = ((v11 + 16) & ~v11) + *(void *)(v10 + 24) + 7;
  unint64_t v13 = (_OWORD *)(((unint64_t)a1 + v12) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (unint64_t)a2 + v12;
  unint64_t v15 = (v14 & 0xFFFFFFFFFFFFFFF8) + 23;
  *unint64_t v13 = *(_OWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  unint64_t v16 = ((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v16 + 24) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)(v17 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v16, *(void *)(v16 + 8), *(unsigned char *)(v16 + 16));
    swift_bridgeObjectRelease();
LABEL_5:
    long long v22 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    *(_OWORD *)(v16 + 16) = v22;
    goto LABEL_6;
  }
  char v18 = *(unsigned char *)(v17 + 16);
  uint64_t v19 = *(void *)v16;
  uint64_t v20 = *(void *)(v16 + 8);
  char v21 = *(unsigned char *)(v16 + 16);
  *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
  *(unsigned char *)(v16 + 16) = v18;
  outlined consume of Text.Storage(v19, v20, v21);
  *(void *)(v16 + 24) = *(void *)(v17 + 24);
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v23 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v23 + 40))((v16 + *(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80), (v17 + *(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for TokenField(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for AttributedString() - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= v9) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v10 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v16 = ((v12 + 16) & ~v12) + v13;
  uint64_t v17 = v14 + 32;
  if (a2 > v15)
  {
    unint64_t v18 = ((v17 + ((((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v14) + *(void *)(v10 + 64);
    char v19 = 8 * v18;
    if (v18 > 3) {
      goto LABEL_10;
    }
    unsigned int v22 = ((a2 - v15 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v22))
    {
      int v20 = *(_DWORD *)((char *)a1 + v18);
      if (!v20) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 > 0xFF)
    {
      int v20 = *(unsigned __int16 *)((char *)a1 + v18);
      if (!*(unsigned __int16 *)((char *)a1 + v18)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 >= 2)
    {
LABEL_10:
      int v20 = *((unsigned __int8 *)a1 + v18);
      if (!*((unsigned char *)a1 + v18)) {
        goto LABEL_28;
      }
LABEL_18:
      int v23 = (v20 - 1) << v19;
      if (v18 > 3) {
        int v23 = 0;
      }
      if (v18)
      {
        if (v18 <= 3) {
          int v24 = ((v17 + ((((v16 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8)) & ~v14) + *(_DWORD *)(v10 + 64);
        }
        else {
          int v24 = 4;
        }
        switch(v24)
        {
          case 2:
            int v25 = *a1;
            break;
          case 3:
            int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v25 = *(_DWORD *)a1;
            break;
          default:
            int v25 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v25 = 0;
      }
      return v15 + (v25 | v23) + 1;
    }
  }
LABEL_28:
  if (v9 >= v11)
  {
    long long v28 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 0x80000000) == 0)
    {
      unint64_t v27 = *v28;
      goto LABEL_33;
    }
    uint64_t v30 = *(uint64_t (**)(unint64_t))(v7 + 48);
    return v30(((unint64_t)v28 + v12 + 8) & ~v12);
  }
  else
  {
    uint64_t v26 = (unint64_t *)(((unint64_t)a1 + v16 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v15 == 0x7FFFFFFF)
    {
      unint64_t v27 = *v26;
LABEL_33:
      if (v27 >= 0xFFFFFFFF) {
        LODWORD(v27) = -1;
      }
      return (v27 + 1);
    }
    uint64_t v29 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 48);
    return v29((v17 + (((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v14, v11);
  }
}

void storeEnumTagSinglePayload for TokenField(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for AttributedString() - 8);
  uint64_t v9 = v8;
  unsigned int v10 = *(_DWORD *)(v8 + 84);
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v12 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  uint64_t v14 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = *(void *)(v8 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v12 + 80);
  if (v13 <= v11) {
    unsigned int v17 = v11;
  }
  else {
    unsigned int v17 = *(_DWORD *)(v12 + 84);
  }
  size_t v18 = ((v14 + 16) & ~v14) + v15;
  uint64_t v19 = v16 + 32;
  size_t v20 = ((v16 + 32 + ((((v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)) & ~v16) + *(void *)(v12 + 64);
  if (a3 <= v17)
  {
    int v21 = 0;
  }
  else if (v20 <= 3)
  {
    unsigned int v25 = ((a3 - v17 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
    if (HIWORD(v25))
    {
      int v21 = 4;
    }
    else if (v25 >= 0x100)
    {
      int v21 = 2;
    }
    else
    {
      int v21 = v25 > 1;
    }
  }
  else
  {
    int v21 = 1;
  }
  if (v17 < a2)
  {
    unsigned int v22 = ~v17 + a2;
    if (v20 < 4)
    {
      int v23 = (v22 >> (8 * v20)) + 1;
      if (v20)
      {
        int v26 = v22 & ~(-1 << (8 * v20));
        bzero(a1, v20);
        if (v20 == 3)
        {
          *(_WORD *)a1 = v26;
          a1[2] = BYTE2(v26);
        }
        else if (v20 == 2)
        {
          *(_WORD *)a1 = v26;
        }
        else
        {
          *a1 = v26;
        }
      }
    }
    else
    {
      bzero(a1, v20);
      *(_DWORD *)a1 = v22;
      int v23 = 1;
    }
    switch(v21)
    {
      case 1:
        a1[v20] = v23;
        return;
      case 2:
        *(_WORD *)&a1[v20] = v23;
        return;
      case 3:
        goto LABEL_66;
      case 4:
        *(_DWORD *)&a1[v20] = v23;
        return;
      default:
        return;
    }
  }
  uint64_t v24 = ~v16;
  switch(v21)
  {
    case 1:
      a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_66:
      __break(1u);
      JUMPOUT(0x187D353E8);
    case 4:
      *(_DWORD *)&a1[v20] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v11 >= v13)
        {
          if (v11 >= a2)
          {
            long long v32 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v10 & 0x80000000) != 0)
            {
              uint64_t v34 = *(void (**)(unint64_t, uint64_t))(v9 + 56);
              v34(((unint64_t)v32 + v14 + 8) & ~v14, a2);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v33 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v33 = (a2 - 1);
              }
              *long long v32 = v33;
            }
          }
          else
          {
            if (v18 <= 3) {
              int v28 = ~(-1 << (8 * v18));
            }
            else {
              int v28 = -1;
            }
            if (v18)
            {
              int v29 = v28 & (~v11 + a2);
              if (v18 <= 3) {
                int v30 = v18;
              }
              else {
                int v30 = 4;
              }
              bzero(a1, v18);
              switch(v30)
              {
                case 2:
                  *(_WORD *)a1 = v29;
                  break;
                case 3:
                  *(_WORD *)a1 = v29;
                  a1[2] = BYTE2(v29);
                  break;
                case 4:
                  *(_DWORD *)a1 = v29;
                  break;
                default:
                  *a1 = v29;
                  break;
              }
            }
          }
        }
        else
        {
          unint64_t v27 = (void *)((unint64_t)&a1[v18 + 7] & 0xFFFFFFFFFFFFFFF8);
          if (v17 == 0x7FFFFFFF)
          {
            if ((a2 & 0x80000000) != 0)
            {
              *unint64_t v27 = a2 ^ 0x80000000;
              v27[1] = 0;
            }
            else
            {
              *unint64_t v27 = (a2 - 1);
            }
          }
          else
          {
            char v31 = *(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 56);
            v31((v19 + (((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8)) & v24, a2, v13);
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for TokenField()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in TokenField<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TokenField.init(valueType:text:prompt:token:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(uint64_t), uint64_t a11, uint64_t a12)
{
  uint64_t v31 = a7;
  long long v32 = a10;
  uint64_t v33 = a11;
  uint64_t v34 = a12;
  uint64_t v35 = *(void *)(a12 - 8);
  *(double *)&long long v19 = MEMORY[0x1F4188790](a1);
  int v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = v22;
  long long v37 = v23;
  long long v38 = v19;
  uint64_t v39 = v24;
  unsigned int v25 = (int *)type metadata accessor for TokenField();
  int v26 = (uint64_t *)(a9 + v25[18]);
  outlined init with copy of Binding<AttributedString>(a2, a9);
  unint64_t v27 = (void *)(a9 + v25[17]);
  *unint64_t v27 = v31;
  v27[1] = a8;
  *int v26 = a3;
  v26[1] = a4;
  v26[2] = a5;
  v26[3] = a6;
  swift_retain();
  uint64_t v28 = outlined copy of Text?(a3, a4, a5, a6);
  v32(v28);
  swift_release();
  outlined consume of Text?(a3, a4, a5, a6);
  outlined destroy of ResolvedTokenFieldStyle(a2, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 32))(a9 + v25[19], v21, v34);
}

uint64_t TokenField.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v19[1] = a2;
  uint64_t v4 = type metadata accessor for ResolvedTokenFieldStyle(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  v19[0] = lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label();
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v28 = &type metadata for TokenFieldConfiguration.Label;
  uint64_t v29 = v7;
  uint64_t v30 = v19[0];
  uint64_t v31 = v8;
  type metadata accessor for StaticSourceWriter();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v19 - v14;
  TokenField.configuration.getter(a1, (uint64_t)v6);
  uint64_t v21 = v7;
  long long v22 = *(_OWORD *)(a1 + 24);
  uint64_t v23 = v8;
  long long v24 = *(_OWORD *)(a1 + 48);
  uint64_t v25 = v2;
  unint64_t v16 = lazy protocol witness table accessor for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for TokenFieldConfiguration.Label, (void (*)(double))partial apply for closure #1 in TokenField.body.getter, (uint64_t)v20, v4, (uint64_t)&type metadata for TokenFieldConfiguration.Label, v7, v16);
  outlined destroy of ResolvedTokenFieldStyle((uint64_t)v6, type metadata accessor for ResolvedTokenFieldStyle);
  unint64_t v26 = v16;
  unint64_t v27 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  unsigned int v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v9);
}

uint64_t TokenField.configuration.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v24 = a2;
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](a1);
  type metadata accessor for Binding<AttributedString>();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Binding<AttributedString>(v3, (uint64_t)v9);
  uint64_t v10 = (uint64_t *)(v3 + *(int *)(a1 + 72));
  uint64_t v11 = v10[1];
  uint64_t v23 = *v10;
  uint64_t v12 = v10[2];
  uint64_t v13 = v10[3];
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a1);
  unint64_t v14 = (*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v15 = (char *)swift_allocObject();
  long long v16 = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v15 + 1) = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v15 + 2) = v16;
  *((_OWORD *)v15 + 3) = *(_OWORD *)(a1 + 48);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v15[v14], (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  uint64_t v17 = type metadata accessor for TokenFieldConfiguration(0);
  size_t v18 = (uint64_t *)(v24 + *(int *)(v17 + 24));
  uint64_t v19 = v24;
  outlined init with take of Binding<AttributedString>((uint64_t)v9, v24);
  uint64_t v20 = v23;
  *size_t v18 = v23;
  v18[1] = v11;
  uint64_t v18[2] = v12;
  v18[3] = v13;
  uint64_t v21 = (uint64_t (**)(uint64_t))(v19 + *(int *)(v17 + 28));
  *uint64_t v21 = partial apply for closure #1 in TokenField.configuration.getter;
  v21[1] = (uint64_t (*)(uint64_t))v15;
  return outlined copy of Text?(v20, v11, v12, v13);
}

uint64_t closure #1 in TokenField.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = v7;
  v15[1] = v8;
  void v15[2] = v9;
  void v15[3] = v10;
  void v15[4] = v11;
  v15[5] = v12;
  uint64_t v13 = type metadata accessor for TokenField();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v13 + 76));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t closure #1 in TokenField.configuration.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v23 = a2;
  v21[0] = a1;
  MEMORY[0x1F4188790](a1);
  v21[1] = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for Binding();
  uint64_t v15 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v17 = (char *)v21 - v16;
  type metadata accessor for Binding<AnyToken>();
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  type metadata accessor for TokenField.ToToken();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  uint64_t v18 = type metadata accessor for TokenField();
  (*(void (**)(char *))(v23 + *(int *)(v18 + 68)))(v17);
  uint64_t v19 = AnyView.init<A>(_:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v22);
  return v19;
}

unint64_t lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label;
  if (!lazy protocol witness table cache variable for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label;
  if (!lazy protocol witness table cache variable for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label);
  }
  return result;
}

uint64_t partial apply for closure #1 in TokenField.body.getter()
{
  return closure #1 in TokenField.body.getter(*(void *)(v0 + 64), *(void *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle;
  if (!lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle)
  {
    type metadata accessor for ResolvedTokenFieldStyle(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedTokenFieldStyle and conformance ResolvedTokenFieldStyle);
  }
  return result;
}

uint64_t sub_187D35E6C()
{
  long long v8 = *(_OWORD *)(v0 + 16);
  uint64_t v1 = type metadata accessor for TokenField();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  swift_release();
  type metadata accessor for Binding<AttributedString>();
  uint64_t v4 = v2 + *(int *)(v3 + 32);
  uint64_t v5 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_release();
  uint64_t v6 = v2 + *(int *)(v1 + 72);
  if (*(void *)(v6 + 24))
  {
    outlined consume of Text.Storage(*(void *)v6, *(void *)(v6 + 8), *(unsigned char *)(v6 + 16));
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t))(*(void *)(v8 - 8) + 8))(v2 + *(int *)(v1 + 76));
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TokenField.configuration.getter(uint64_t a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v9 = *(void *)(type metadata accessor for TokenField() - 8);
  uint64_t v10 = (uint64_t)v1 + ((*(unsigned __int8 *)(v9 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return closure #1 in TokenField.configuration.getter(a1, v10, v3, v4, v5, v6, v7, v8);
}

void type metadata accessor for Binding<AnyToken>()
{
  if (!lazy cache variable for type metadata for Binding<AnyToken>)
  {
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyToken>);
    }
  }
}

uint64_t type metadata accessor for TokenField.ToToken()
{
  return swift_getGenericMetadata();
}

uint64_t outlined destroy of ResolvedTokenFieldStyle(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_187D3618C()
{
  return swift_getWitnessTable();
}

uint64_t TokenField.ToToken.get(base:)(uint64_t a1)
{
  outlined init with copy of Any(a1, (uint64_t)&v2);
  return swift_dynamicCast();
}

uint64_t protocol witness for Projection.get(base:) in conformance TokenField<A, B, C>.ToToken(uint64_t a1)
{
  return TokenField.ToToken.get(base:)(a1);
}

double protocol witness for Projection.set(base:newValue:) in conformance TokenField<A, B, C>.ToToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized TokenField.ToToken.set(base:newValue:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t base witness table accessor for Equatable in TokenField<A, B, C>.ToToken()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Hashable in TokenField<A, B, C>.ToToken()
{
  return swift_getWitnessTable();
}

double specialized TokenField.ToToken.set(base:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined destroy of AnyToken(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a2, a4);
  return AnyToken.init<A>(_:)((uint64_t)v9, a4, a1);
}

void RoundedBorderTextEditorStyle.makeBody(configuration:)()
{
}

void __swiftcall RoundedBorderTextEditorStyle.init()()
{
}

uint64_t associated type witness table accessor for TextEditorStyle.Body : View in RoundedBorderTextEditorStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for RoundedBorderTextEditorStyle()
{
  return &type metadata for RoundedBorderTextEditorStyle;
}

uint64_t TableRowContent.swipeActions<A>(edge:allowsFullSwipe:content:)@<X0>(char a1@<W0>, int a2@<W1>, void (*a3)(double)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v10 = 0;
  __int16 v11 = 256;
  return TableRowContent.swipeActions<A>(edge:allowsFullSwipe:style:content:)(a1 & 1, a2, (uint64_t)&v10, a3, a4, a5, a6, a7, a9, a8);
}

uint64_t TableRowContent.swipeActions<A>(edge:allowsFullSwipe:style:content:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, void (*a4)(double)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v45 = a8;
  uint64_t v43 = a9;
  uint64_t v44 = a6;
  uint64_t v38 = a5;
  uint64_t v39 = a4;
  int v42 = a2;
  uint64_t v33 = a10;
  uint64_t v36 = a7;
  uint64_t v40 = *(void *)(a7 - 8);
  int v41 = a1 & 1;
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v30 - v14;
  type metadata accessor for StyleContextWriter<SwipeActionsStyleContext>();
  uint64_t v16 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v16);
  uint64_t v35 = (char *)&v30 - v17;
  uint64_t v18 = _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>);
  uint64_t v52 = a10;
  uint64_t v53 = v18;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v20 = _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<SwipeActionsStyleContext> and conformance StyleContextWriter<A>, (void (*)(uint64_t))type metadata accessor for StyleContextWriter<SwipeActionsStyleContext>);
  uint64_t v50 = WitnessTable;
  uint64_t v51 = v20;
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v21 = type metadata accessor for SwipeActionsTableRowModifier();
  uint64_t v22 = *(void *)(v21 - 8);
  double v23 = MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v30 - v24;
  uint64_t v32 = *(void *)a3;
  int v26 = *(unsigned __int8 *)(a3 + 8);
  int v30 = *(unsigned __int8 *)(a3 + 9);
  int v31 = v26;
  v39(v23);
  static SymbolVariants.fill.getter();
  __int16 v49 = v46;
  uint64_t v27 = v36;
  View.symbolVariant(_:)();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v27);
  uint64_t v28 = (uint64_t)v35;
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v13);
  uint64_t v46 = v32;
  char v47 = v31;
  char v48 = v30;
  SwipeActionsTableRowModifier.init(edge:actions:allowsFullSwipe:style:)(v41, v28, v42, &v46, v16, v25);
  swift_getWitnessTable();
  TableRowContent.modifier<A>(_:)((uint64_t)v25, v44, v21);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v22 + 8))(v25, v21);
}

void type metadata accessor for _EnvironmentKeyTransformModifier<SymbolVariants>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>);
    }
  }
}

void type metadata accessor for StyleContextWriter<SwipeActionsStyleContext>()
{
  if (!lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>)
  {
    unint64_t v0 = type metadata accessor for StyleContextWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SwipeActionsStyleContext>);
    }
  }
}

uint64_t _s7SwiftUI32_EnvironmentKeyTransformModifierVyAA14SymbolVariantsVGACyxGAA04ViewF0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for SwipeActionsTableRowModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SwipeActionsTableRowModifier.init(edge:actions:allowsFullSwipe:style:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  uint64_t v10 = *a4;
  char v11 = *((unsigned char *)a4 + 8);
  char v12 = *((unsigned char *)a4 + 9);
  *a6 = a1 & 1;
  uint64_t v13 = (int *)type metadata accessor for SwipeActionsTableRowModifier();
  uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(&a6[v13[9]], a2, a5);
  a6[v13[10]] = a3;
  uint64_t v15 = &a6[v13[11]];
  *(void *)uint64_t v15 = v10;
  v15[8] = v11;
  v15[9] = v12;
  return result;
}

uint64_t sub_187D36A48()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for SwipeActionsTableRowModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SwipeActionsTableRowModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((((v5 + 1) & ~v5) + v6) & 0xFFFFFFFFFFFFFFF8) + 18 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v10 = ((unint64_t)a1 + v5 + 1) & ~v5;
    uint64_t v11 = ((unint64_t)a2 + v5 + 1) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    *(unsigned char *)(v10 + v6) = *(unsigned char *)(v11 + v6);
    unint64_t v12 = (v10 + v6) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = (v11 + v6) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v14 = *(void *)(v13 + 8);
    *(_WORD *)(v12 + 16) = *(_WORD *)(v13 + 16);
    *(void *)(v12 + 8) = v14;
  }
  return v3;
}

unsigned char *initializeWithCopy for SwipeActionsTableRowModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  *(unsigned char *)uint64_t v10 = *(unsigned char *)v11;
  v10 &= 0xFFFFFFFFFFFFFFF8;
  v11 &= 0xFFFFFFFFFFFFFFF8;
  __int16 v12 = *(_WORD *)(v11 + 16);
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  *(_WORD *)(v10 + 16) = v12;
  return a1;
}

unsigned char *assignWithCopy for SwipeActionsTableRowModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 24;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 24))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 40);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  *(unsigned char *)uint64_t v10 = *(unsigned char *)v11;
  v10 &= 0xFFFFFFFFFFFFFFF8;
  v11 &= 0xFFFFFFFFFFFFFFF8;
  __int16 v12 = *(_WORD *)(v11 + 16);
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  *(_WORD *)(v10 + 16) = v12;
  return a1;
}

unsigned char *initializeWithTake for SwipeActionsTableRowModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  *(unsigned char *)uint64_t v10 = *(unsigned char *)v11;
  v10 &= 0xFFFFFFFFFFFFFFF8;
  v11 &= 0xFFFFFFFFFFFFFFF8;
  __int16 v12 = *(_WORD *)(v11 + 16);
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  *(_WORD *)(v10 + 16) = v12;
  return a1;
}

unsigned char *assignWithTake for SwipeActionsTableRowModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (unint64_t)&a1[v6 + 1] & ~v6;
  uint64_t v8 = (unint64_t)&a2[v6 + 1] & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 24);
  uint64_t v10 = v9 + v7;
  uint64_t v11 = v9 + v8;
  *(unsigned char *)uint64_t v10 = *(unsigned char *)v11;
  v10 &= 0xFFFFFFFFFFFFFFF8;
  v11 &= 0xFFFFFFFFFFFFFFF8;
  __int16 v12 = *(_WORD *)(v11 + 16);
  *(void *)(v10 + 8) = *(void *)(v11 + 8);
  *(_WORD *)(v10 + 16) = v12;
  return a1;
}

uint64_t getEnumTagSinglePayload for SwipeActionsTableRowModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 1) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)) & 0xFFFFFFFFFFFFFFF8) + 18;
    unsigned int v9 = (a2 - v7 + 0xFFFF) >> (8 * v8);
    if (v8 <= 3) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = *((unsigned __int8 *)a1 + v8);
        if (!*((unsigned char *)a1 + v8)) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)((char *)a1 + v8);
        if (*(unsigned __int16 *)((char *)a1 + v8)) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D371C0);
      case 4:
        int v13 = *(_DWORD *)((char *)a1 + v8);
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 <= 3)
        {
          int v16 = *a1;
        }
        else
        {
          int v15 = 0;
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 > 0xFE) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 1) & ~v6);
  }
  unsigned int v17 = *(unsigned __int8 *)a1;
  if (v17 >= 2) {
    return v17 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for SwipeActionsTableRowModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((v9 + 1) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64)) & 0xFFFFFFFFFFFFFFF8) + 18;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_40;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            if (v7 > 0xFE)
            {
              unint64_t v19 = (unint64_t)&a1[v9 + 1] & ~v9;
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
            else
            {
              *a1 = a2 + 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 0xFFFF) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = v16 >> v11;
  bzero(a1, v10);
  if (v10 <= 3) {
    int v18 = v17 + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 > 3) {
    *(_DWORD *)a1 = v16;
  }
  else {
    *(_WORD *)a1 = v16;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_40:
      __break(1u);
      JUMPOUT(0x187D373D8);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in SwipeActionsTableRowModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SwipeActionsTableRowModifier.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  double v6 = MEMORY[0x1F4188790](a1);
  unsigned int v7 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v4 + 16))(v7, v6);
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(a1 + 16);
  uint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, v7, a1);
  *a2 = partial apply for closure #1 in SwipeActionsTableRowModifier.body.getter;
  a2[1] = v9;
  return result;
}

uint64_t closure #1 in SwipeActionsTableRowModifier.body.getter(void *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for SwipeActionsTableRowModifier();
  uint64_t v10 = a2[v9[10]];
  uint64_t v11 = &a2[v9[11]];
  uint64_t v12 = *(void *)v11;
  uint64_t v13 = v11[8];
  int v14 = v11[9];
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, &a2[v9[9]], a3);
  uint64_t v15 = AnyView.init<A>(_:)();
  char v16 = *a2;
  unsigned int v17 = v5 + 5;
  int v18 = v5 + 6;
  unint64_t v19 = v5 + 2;
  if (*a2) {
    uint64_t v20 = v5 + 7;
  }
  else {
    uint64_t v20 = v5 + 3;
  }
  if (*a2)
  {
    v5 += 4;
    uint64_t v21 = v17;
  }
  else
  {
    uint64_t v21 = v5 + 1;
  }
  if (v16) {
    uint64_t v22 = v18;
  }
  else {
    uint64_t v22 = v19;
  }
  uint64_t v23 = 256;
  if (!v14) {
    uint64_t v23 = 0;
  }
  uint64_t v24 = v23 | v13;
  uint64_t result = swift_release();
  *uint64_t v5 = v10;
  *uint64_t v21 = v12;
  uint64_t *v22 = v24;
  uint64_t *v20 = v15;
  return result;
}

uint64_t sub_187D376DC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for SwipeActionsTableRowModifier();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ *(int *)(v2 + 36)+ ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80)), v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SwipeActionsTableRowModifier.body.getter(void *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(type metadata accessor for SwipeActionsTableRowModifier() - 8);
  uint64_t v5 = (char *)(v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));

  return closure #1 in SwipeActionsTableRowModifier.body.getter(a1, v5, v3);
}

ValueMetadata *type metadata accessor for TableRowSwipeActionsTraitKey()
{
  return &type metadata for TableRowSwipeActionsTraitKey;
}

_UNKNOWN **sub_187D37854()
{
  return &protocol witness table for TableRowTraitTransformerModifier<A>;
}

uint64_t destroy for TableRowSwipeActionsTraitKey.Storage()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for TableRowSwipeActionsTraitKey.Storage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TableRowSwipeActionsTraitKey.Storage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TableRowSwipeActionsTraitKey.Storage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TableRowSwipeActionsTraitKey.Storage()
{
  return &type metadata for TableRowSwipeActionsTraitKey.Storage;
}

uint64_t initializeWithCopy for TableRowSwipeActionsTraitKey.Item(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TableRowSwipeActionsTraitKey.Item(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TableRowSwipeActionsTraitKey.Item(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TableRowSwipeActionsTraitKey.Item()
{
  return &type metadata for TableRowSwipeActionsTraitKey.Item;
}

void ContainerBackground.AnyVersionSeedTracker.didChange(_:action:)()
{
}

Swift::Int ContainerBackgroundPlacement.Storage.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x8000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Swift::UInt v1 = v1;
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ContainerBackgroundPlacement.Storage()
{
  Swift::UInt v1 = *v0;
  if ((*v0 & 0x8000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Swift::UInt v1 = v1;
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ContainerBackgroundPlacement.Storage()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x8000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Swift::UInt v1 = v1;
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static ContainerBackgroundPlacement.custom<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t result = ContainerBackgroundKeys.AnyCustomKey.init<A>(_:)(a1, a1);
  *a2 = result;
  return result;
}

void static ContainerBackgroundPlacement.navigation.getter(void *a1@<X8>)
{
  *a1 = 0x8000000000000000;
}

void static ContainerBackgroundPlacement.navigationSplitView.getter(void *a1@<X8>)
{
  *a1 = 0x8000000000000001;
}

void static ContainerBackgroundPlacement.presentation.getter(void *a1@<X8>)
{
  *a1 = 0x8000000000000003;
}

void static ContainerBackgroundPlacement.window.getter()
{
}

void ContainerBackgroundPlacement.hash(into:)()
{
  Swift::UInt v1 = *v0;
  if ((*v0 & 0x8000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Swift::UInt v1 = v1;
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
}

uint64_t static ContainerBackgroundPlacement.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1 < 0)
  {
    if (v3 < 0 && v3 == v2) {
      return 1;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v2 == v3)
  {
    return 1;
  }
  return 0;
}

Swift::Int ContainerBackgroundPlacement.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  if ((v1 & 0x8000000000000000) != 0)
  {
    Hasher._combine(_:)(1uLL);
    Swift::UInt v1 = v1;
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ContainerBackgroundPlacement(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  if (*a1 < 0)
  {
    if (v3 < 0 && v3 == v2) {
      return 1;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v2 == v3)
  {
    return 1;
  }
  return 0;
}

uint64_t static ContainerBackgroundModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(void)@<X2>, void *a4@<X8>)
{
  int v38 = *a1;
  long long v7 = a2[3];
  long long v52 = a2[2];
  long long v53 = v7;
  long long v54 = a2[4];
  int v55 = *((_DWORD *)a2 + 20);
  long long v8 = a2[1];
  long long v50 = *a2;
  long long v51 = v8;
  uint64_t v39 = swift_allocObject();
  long long v9 = a2[3];
  long long v46 = a2[2];
  long long v47 = v9;
  long long v48 = a2[4];
  int v49 = *((_DWORD *)a2 + 20);
  long long v10 = a2[1];
  long long v44 = *a2;
  long long v45 = v10;
  uint64_t v37 = v39 + 16;
  a3();
  uint64_t v11 = static ContainerBackgroundKind.Builtin.allCases.getter();
  uint64_t v12 = *(void *)(v11 + 16);
  if (!v12)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  uint64_t v36 = a4;
  uint64_t v13 = 0;
  while (2)
  {
    uint64_t v14 = *(unsigned __int8 *)(v11 + v13++ + 32);
    switch(v14)
    {
      case 1:
        *((void *)&v45 + 1) = &type metadata for ContainerBackgroundKeys.NavigationSplitViewKey;
        *(void *)&long long v46 = &protocol witness table for ContainerBackgroundKeys.NavigationSplitViewKey;
        uint64_t v15 = &protocol witness table for ContainerBackgroundKeys.NavigationSplitViewKey;
        goto LABEL_9;
      case 2:
      case 4:
        long long v45 = 0u;
        long long v46 = 0u;
        long long v44 = 0u;
        goto LABEL_10;
      case 3:
        *((void *)&v45 + 1) = &type metadata for ContainerBackgroundKeys.PresentationKey;
        *(void *)&long long v46 = &protocol witness table for ContainerBackgroundKeys.PresentationKey;
        uint64_t v15 = &protocol witness table for ContainerBackgroundKeys.PresentationKey;
        goto LABEL_9;
      default:
        *((void *)&v45 + 1) = &type metadata for ContainerBackgroundKeys.NavigationKey;
        *(void *)&long long v46 = &protocol witness table for ContainerBackgroundKeys.NavigationKey;
        uint64_t v15 = &protocol witness table for ContainerBackgroundKeys.NavigationKey;
LABEL_9:
        *((void *)&v46 + 1) = v15;
LABEL_10:
        outlined init with take of (ContainerBackgroundPlacementKey & HostPreferenceKey)?((uint64_t)&v44, (uint64_t)&v42);
        if (!v43)
        {
          outlined destroy of (ContainerBackgroundPlacementKey & HostPreferenceKey)?((uint64_t)&v42);
          if (v12 == v13) {
            goto LABEL_12;
          }
          continue;
        }
        outlined init with take of ToggleStyleConfiguration.Effect(&v42, &v44);
        uint64_t v16 = *((void *)&v45 + 1);
        long long v17 = v46;
        int v18 = __swift_project_boxed_opaque_existential_1(&v44, *((uint64_t *)&v45 + 1));
        MEMORY[0x1F4188790](v18);
        char v31 = v14;
        uint64_t v32 = &v50;
        int v33 = v38;
        uint64_t v35 = v39;
        MEMORY[0x1F4188790](v19);
        void v27[2] = v16;
        long long v28 = v17;
        uint64_t v29 = partial apply for closure #1 in static ContainerBackgroundModifier._makeView(modifier:inputs:body:);
        uint64_t v30 = v20;
        static ContainerBackgroundKind.Builtin.apply<A, B>(key:_:)(v21, partial apply for thunk for @callee_guaranteed (@unowned @thick ContainerBackgroundPlacementKey & HostPreferenceKey.Type) -> (), (uint64_t)v27, v16);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
        if (v12 != v13) {
          continue;
        }
LABEL_12:
        swift_bridgeObjectRelease();
        a4 = v36;
LABEL_14:
        LODWORD(v44) = v38;
        type metadata accessor for ContainerBackgroundKind?(0, &lazy cache variable for type metadata for _GraphValue<ContainerBackgroundModifier>, (uint64_t)&type metadata for ContainerBackgroundModifier, MEMORY[0x1E4F3F590]);
        int v22 = _GraphValue.value.getter();
        long long v46 = v52;
        long long v47 = v53;
        long long v48 = v54;
        int v49 = v55;
        long long v44 = v50;
        long long v45 = v51;
        uint64_t v23 = _ViewInputs.transaction.getter();
        *(void *)&long long v42 = v53;
        DWORD2(v42) = DWORD2(v53);
        uint64_t v40 = v53;
        int v41 = DWORD2(v53);
        MEMORY[0x1F4188790](v23);
        int v33 = v22;
        int v34 = v24;
        swift_beginAccess();
        outlined retain of [Text.Modifier]((uint64_t)&v42);
        PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
        swift_endAccess();
        swift_bridgeObjectRelease();
        uint64_t v25 = v39;
        *a4 = *(void *)(v39 + 16);
        a4[1] = *(void *)(v25 + 24);
        swift_bridgeObjectRetain();
        return swift_release();
    }
  }
}

uint64_t transformKey #1 <A>(_:) in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ContainerBackgroundKind?(0, &lazy cache variable for type metadata for _GraphValue<ContainerBackgroundModifier>, (uint64_t)&type metadata for ContainerBackgroundModifier, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  _ViewInputs.transaction.getter();
  _ViewInputs.environment.getter();
  uint64_t v5 = *(void *)(a3 + 48);
  int v6 = *(_DWORD *)(a3 + 56);
  swift_beginAccess();
  outlined retain of [Text.Modifier]((uint64_t)&v5);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_endAccess();
  return swift_bridgeObjectRelease();
}

uint64_t transformKeyAnimated #1 <A>(_:) in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1, long long *a2, int a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v22 = *((void *)a2 + 6);
  int v23 = *((_DWORD *)a2 + 14);
  *(void *)&long long v24 = *((void *)a2 + 6);
  DWORD2(v24) = *((_DWORD *)a2 + 14);
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    LODWORD(v24) = a3;
    type metadata accessor for ContainerBackgroundKind?(0, &lazy cache variable for type metadata for _GraphValue<ContainerBackgroundModifier>, (uint64_t)&type metadata for ContainerBackgroundModifier, MEMORY[0x1E4F3F590]);
    unsigned int v6 = _GraphValue.value.getter();
    long long v7 = a2[3];
    long long v26 = a2[2];
    long long v27 = v7;
    long long v28 = a2[4];
    int v29 = *((_DWORD *)a2 + 20);
    long long v8 = a2[1];
    long long v24 = *a2;
    long long v25 = v8;
    unsigned int v9 = _ViewInputs.transaction.getter();
    long long v10 = a2[3];
    long long v26 = a2[2];
    long long v27 = v10;
    long long v28 = a2[4];
    int v29 = *((_DWORD *)a2 + 20);
    long long v11 = a2[1];
    long long v24 = *a2;
    *((void *)&v25 + 1) = *((void *)&v11 + 1);
    int v12 = _ViewInputs.environment.getter();
    type metadata accessor for PropertyList.Tracker();
    *(void *)&long long v24 = __PAIR64__(v9, v6);
    DWORD2(v24) = v12;
    *(void *)&long long v25 = PropertyList.Tracker.__allocating_init()();
    MEMORY[0x1F4188790](v25);
    uint64_t v18 = type metadata accessor for ContainerBackgroundModifier.AnimatedPreferenceValue();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<(_:)>();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v24, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_19, (uint64_t)&v17, v18, MEMORY[0x1E4FBC248], v13, MEMORY[0x1E4FBC278], v14);
    swift_release();
    int v15 = v20;
    static AGAttributeFlags.transactional.getter();
    uint64_t v16 = AGGraphSetFlags();
    uint64_t v20 = v22;
    int v21 = v23;
    MEMORY[0x1F4188790](v16);
    LODWORD(v18) = v15;
    swift_beginAccess();
    outlined retain of [Text.Modifier]((uint64_t)&v22);
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_endAccess();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, long long *a5, uint64_t a6)
{
  if (a4 == 4) {
    return transformKeyAnimated #1 <A>(_:) in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(a1, a5, a6);
  }
  else {
    return transformKey #1 <A>(_:) in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(a1, a6, (uint64_t)a5);
  }
}

uint64_t implicit closure #1 in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t ContainerBackgroundModifier.transformPreference(_:placement:environment:transaction:)(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v17 = *a2;
  uint64_t v5 = *a3;
  uint64_t v6 = a3[1];
  uint64_t v8 = *(void *)(v3 + 8);
  uint64_t v7 = *(void *)(v3 + 16);
  int v9 = *(unsigned __int8 *)(v3 + 24);
  if (v8)
  {
    uint64_t v11 = *(void *)a1;
    unint64_t v10 = *(void *)(a1 + 8);
    if (v10 >> 62)
    {
      if (v10 >> 62 != 1)
      {
        swift_retain();
        if (v7) {
          goto LABEL_7;
        }
        goto LABEL_9;
      }
      swift_retain();
      outlined copy of ContainerBackgroundValue.Content(v11, v10);
      swift_release();
    }
    else
    {
      swift_retain();
      outlined copy of ContainerBackgroundValue.Content(v11, v10);
    }
    static Alignment.center.getter();
    type metadata accessor for ModifiedContent<AnyView, _BackgroundModifier<AnyView>>();
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _BackgroundModifier<AnyView>> and conformance <> ModifiedContent<A, B>();
    uint64_t v8 = AnyView.init<A>(_:)();
    if (v7)
    {
LABEL_7:
      swift_retain();
      outlined consume of ContainerBackgroundValue.Content(v11, v10);
      uint64_t v12 = v7 | 0x4000000000000000;
LABEL_10:
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v12;
      goto LABEL_11;
    }
LABEL_9:
    outlined consume of ContainerBackgroundValue.Content(v11, v10);
    uint64_t v12 = 0;
    goto LABEL_10;
  }
LABEL_11:
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  uint64_t v13 = Transaction.animation.getter();
  uint64_t result = swift_release();
  *(void *)(a1 + 40) = v13;
  if (v9 != 2)
  {
    char v16 = (*(unsigned char *)(a1 + 16) | v9) & 1;
LABEL_21:
    *(unsigned char *)(a1 + 16) = v16;
    return result;
  }
  if (v7 && (*(unsigned char *)(a1 + 16) & 1) == 0)
  {
    if (v17 < 0) {
      char v15 = v17;
    }
    else {
      char v15 = 5;
    }
    LOBYTE(v18) = v15;
    swift_retain();
    swift_retain();
    swift_retain();
    EnvironmentValues.containerBackgroundKind.setter();
    ShapeStyle.resolveBackgroundMaterial(in:level:)();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    if (v19 != 255) {
      uint64_t result = outlined consume of Material?(v18, v19);
    }
    char v16 = v19 != 255;
    goto LABEL_21;
  }
  return result;
}

uint64_t ContainerBackgroundModifier.PreferenceValue.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)(Value + 8);
  uint64_t v4 = *(void *)(Value + 16);
  char v5 = *(unsigned char *)(Value + 24);
  *(void *)a1 = *(void *)Value;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  swift_retain();

  return swift_retain();
}

uint64_t (*ContainerBackgroundModifier.PreferenceValue.value.getter(uint64_t a1, int a2, uint64_t a3, uint64_t a4))(uint64_t a1)
{
  ContainerBackgroundModifier.PreferenceValue.modifier.getter((uint64_t)&v13);
  uint64_t v8 = v13;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 16))(&v12, a3, a4);
  if (v8 < 0)
  {
    if (v12 < 0 && v12 == v8) {
      goto LABEL_4;
    }
    return (uint64_t (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
  if (v12 < 0 || v8 != v12) {
    return (uint64_t (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  }
LABEL_4:
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = a4;
  *(void *)(v9 + 32) = a1;
  *(_DWORD *)(v9 + 40) = a2;
  return partial apply for closure #2 in ContainerBackgroundModifier.PreferenceValue.value.getter;
}

uint64_t closure #2 in ContainerBackgroundModifier.PreferenceValue.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  ContainerBackgroundModifier.PreferenceValue.modifier.getter((uint64_t)v15);
  v13[1] = v15[0];
  void v13[2] = v15[1];
  v13[3] = v15[2];
  char v14 = v16;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 16))(v13, a4, a5);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v9 = *Value;
  uint64_t v10 = Value[1];
  swift_retain();
  swift_retain();
  v12[0] = v9;
  v12[1] = v10;
  static Transaction.current.getter();
  ContainerBackgroundModifier.transformPreference(_:placement:environment:transaction:)(a1, v13, v12);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance ContainerBackgroundModifier.PreferenceValue<A>@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v4 = ContainerBackgroundModifier.PreferenceValue.value.getter(*(void *)v2, *(_DWORD *)(v2 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v6 = v5;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ();
  a2[1] = (uint64_t (*)())result;
  return result;
}

unint64_t closure #2 in ContainerBackgroundModifier.CustomPreferenceValue.value.getter(uint64_t a1, uint64_t a2, Swift::UInt a3)
{
  unint64_t result = *(void *)(AGGraphGetValue() + 8);
  if (result)
  {
    uint64_t v5 = swift_retain();
    return specialized Dictionary.subscript.setter(v5, a3);
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ContainerBackgroundModifier.CustomPreferenceValue@<X0>(uint64_t (**a1)(uint64_t a1)@<X8>)
{
  int v3 = *v1;
  uint64_t v4 = *(void *)AGGraphGetValue();
  if (v4 < 0)
  {
    uint64_t v7 = (unint64_t (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    uint64_t v6 = 0;
  }
  else
  {
    int v5 = v1[1];
    uint64_t v6 = swift_allocObject();
    *(_DWORD *)(v6 + 16) = v3;
    *(_DWORD *)(v6 + 20) = v5;
    *(void *)(v6 + 24) = v4;
    uint64_t v7 = partial apply for closure #2 in ContainerBackgroundModifier.CustomPreferenceValue.value.getter;
  }
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v7;
  *(void *)(result + 24) = v6;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a1[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t ContainerBackgroundModifier.AnimatedPreferenceValue.updateValue()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v19 = *(void *)(a1 + 24);
  uint64_t Value = AGGraphGetValue();
  char v3 = v2;
  unint64_t v5 = *(void *)Value;
  uint64_t v4 = *(void *)(Value + 8);
  uint64_t v6 = *(void *)(Value + 16);
  char v17 = *(unsigned char *)(Value + 24);
  AGGraphGetValue();
  char v8 = v7;
  type metadata accessor for (_:)(0, &lazy cache variable for type metadata for (_:));
  uint64_t result = AGGraphGetOutputValue();
  if (!result || (v3 & 1) != 0)
  {
    swift_retain();
    uint64_t v10 = v4;
    swift_retain();
    uint64_t v11 = v6;
    swift_retain();
    swift_retain();
    goto LABEL_9;
  }
  if ((v8 & 1) == 0) {
    return result;
  }
  swift_retain();
  swift_retain();
  swift_retain_n();
  uint64_t v10 = v4;
  swift_retain();
  uint64_t v11 = v6;
  swift_retain();
  char v12 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
  swift_release();
  swift_release();
  if (v12)
  {
LABEL_9:
    swift_retain();
    PropertyList.Tracker.reset()();
    swift_release();
    (*(void (**)(uint64_t (**__return_ptr)(uint64_t), uint64_t))(v19 + 16))(&v20, v18);
    if ((v5 & 0x8000000000000000) != 0)
    {
      if (((unint64_t)v20 & 0x8000000000000000) != 0 && v20 == v5) {
        goto LABEL_12;
      }
    }
    else if (((unint64_t)v20 & 0x8000000000000000) == 0 && (uint64_t (*)(uint64_t))v5 == v20)
    {
LABEL_12:
      AGGraphClearUpdate();
      uint64_t v13 = *(void *)AGGraphGetValue();
      swift_retain();
      AGGraphSetUpdate();
      swift_retain();
      swift_retain();
      EnvironmentValues.init(_:tracker:)();
      char v14 = v20;
      uint64_t v15 = v21;
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v18;
      *(void *)(v16 + 24) = v19;
      *(void *)(v16 + 32) = v5;
      *(void *)(v16 + 40) = v10;
      *(void *)(v16 + 48) = v11;
      *(unsigned char *)(v16 + 56) = v17;
      *(void *)(v16 + 64) = v14;
      *(void *)(v16 + 72) = v15;
      *(void *)(v16 + 80) = v13;
      uint64_t v20 = partial apply for closure #2 in ContainerBackgroundModifier.AnimatedPreferenceValue.updateValue();
      uint64_t v21 = v16;
      AGGraphSetOutputValue();
      swift_release();
      swift_release();
      return swift_release();
    }
    uint64_t v20 = (uint64_t (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    uint64_t v21 = 0;
    AGGraphSetOutputValue();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void protocol witness for ViewModifier.body(content:) in conformance ContainerBackgroundModifier()
{
}

uint64_t View.containerBackground<A>(_:for:)()
{
  return StaticIf<>.init(_:then:else:)();
}

uint64_t closure #1 in View.containerBackground<A>(_:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v34 = a1;
  uint64_t v35 = a6;
  uint64_t v32 = a8;
  uint64_t v33 = a4;
  uint64_t v28 = a3;
  uint64_t v29 = a2;
  uint64_t v31 = *(void *)(a5 - 8);
  double v12 = MEMORY[0x1F4188790](a1);
  uint64_t v30 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v14(v12);
  uint64_t v38 = a9;
  uint64_t v39 = a5;
  uint64_t v40 = v15;
  uint64_t v41 = a7;
  uint64_t v16 = type metadata accessor for _ShapeView();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v28 - v18;
  type metadata accessor for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>, &lazy cache variable for type metadata for ContainerBackgroundKind?, MEMORY[0x1E4F40C18], MEMORY[0x1E4F411E8]);
  uint64_t v20 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v20);
  Shape.fill<A>(_:style:)(a3, 256, a9, a5);
  swift_getKeyPath();
  uint64_t v21 = v29;
  if (v29 < 0) {
    char v22 = v29;
  }
  else {
    char v22 = 5;
  }
  LOBYTE(v38) = v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  unint64_t v24 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v36 = WitnessTable;
  unint64_t v37 = v24;
  swift_getWitnessTable();
  uint64_t v25 = AnyView.init<A>(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v30, v28, a5);
  uint64_t v26 = AnyShapeStyle.init<A>(_:)();
  uint64_t v38 = v21;
  uint64_t v39 = v25;
  uint64_t v40 = v26;
  LOBYTE(v41) = 2;
  MEMORY[0x18C113660](&v38, v33, &type metadata for ContainerBackgroundModifier, v35);
  swift_release();
  return swift_release();
}

uint64_t View.containerBackground<A>(for:alignment:content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v29 = a8;
  uint64_t v27 = a6;
  uint64_t v30 = a5;
  uint64_t v28 = a4;
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  uint64_t v33 = a9;
  uint64_t v26 = a10;
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for ZStack();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v25 - v15;
  type metadata accessor for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>, &lazy cache variable for type metadata for ContainerBackgroundKind?, MEMORY[0x1E4F40C18], MEMORY[0x1E4F411E8]);
  uint64_t v17 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v17);
  uint64_t v18 = *a1;
  uint64_t v34 = a6;
  uint64_t v35 = a7;
  uint64_t v19 = v29;
  uint64_t v36 = v29;
  uint64_t v37 = v26;
  uint64_t v38 = v28;
  uint64_t v39 = v30;
  ZStack.init(alignment:content:)();
  swift_getKeyPath();
  if (v18 < 0) {
    char v20 = v18;
  }
  else {
    char v20 = 5;
  }
  LOBYTE(v40[0]) = v20;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  unint64_t v22 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v42 = WitnessTable;
  unint64_t v43 = v22;
  swift_getWitnessTable();
  uint64_t v23 = AnyView.init<A>(_:)();
  v40[0] = v18;
  v40[1] = v23;
  void v40[2] = 0;
  char v41 = 2;
  MEMORY[0x18C113660](v40, v27, &type metadata for ContainerBackgroundModifier, v19);
  return swift_release();
}

uint64_t View.containerBackground<A>(_:for:allowsVibrancy:)()
{
  return StaticIf<>.init(_:then:else:)();
}

uint64_t closure #1 in View.containerBackground<A>(for:alignment:content:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v18 - v13;
  uint64_t v15 = static Color.clear.getter();
  a1();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, a4);
  uint64_t v20 = v15;
  v21[0] = &v20;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v14, a4);
  v21[1] = v11;
  swift_retain();
  v19[0] = MEMORY[0x1E4F414E0];
  v19[1] = a4;
  v18[1] = MEMORY[0x1E4F414D8];
  uint64_t v18[2] = a6;
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v21, 2uLL, (uint64_t)v19);
  v16(v14, a4);
  swift_release();
  v16(v11, a4);
  return swift_release();
}

uint64_t closure #1 in View.applyContainerBackground<A>(for:isEnabled:)@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  if (a2)
  {
    uint64_t v5 = *a1;
    Swift::UInt v6 = ContainerBackgroundKeys.AnyCustomKey.init<A>(_:)(a3, a3);
    if (*(void *)(v5 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(v6), (v7 & 1) != 0)) {
      uint64_t result = swift_retain();
    }
    else {
      uint64_t result = 0;
    }
  }
  else
  {
    uint64_t result = 1;
  }
  *a4 = result;
  return result;
}

uint64_t View.applyContainerBackground<A, B>(for:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a4;
  void v15[3] = a5;
  void v15[4] = a6;
  v15[5] = a7;
  void v15[6] = a8;
  void v15[7] = a2;
  v15[8] = a3;
  swift_retain();
  static Alignment.center.getter();
  View.backgroundPreferenceValue<A, B>(_:alignment:_:)();

  return swift_release();
}

uint64_t closure #1 in View.applyContainerBackground<A, B>(for:content:)(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v15 = *v14;
  Swift::UInt v17 = ContainerBackgroundKeys.AnyCustomKey.init<A>(_:)(v16, v16);
  if (*(void *)(v15 + 16) && (unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v17), (v19 & 1) != 0))
  {
    uint64_t v20 = *(void *)(*(void *)(v15 + 56) + 8 * v18);
    swift_retain();
  }
  else
  {
    uint64_t v20 = 0;
  }
  a2(v20);
  swift_release();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
  v21(v10, a6);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v21)(v13, a6);
}

void View.containerBackgroundSpecifiedPreference<A, B>(key:placement:)()
{
  type metadata accessor for ContainerBackground.CustomSpecifiedPreferenceModifier();

  JUMPOUT(0x18C113660);
}

void View.containerBackground<A>(_:)()
{
}

void View.containerBackground<A>(alignment:content:)()
{
}

uint64_t static ContainerBackgroundTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t View.containerBackground<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v7[2] = a2;
  _DWORD v7[3] = a3;
  void v7[4] = a4;
  _OWORD v7[5] = a5;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.containerBackground<A>(_:), (uint64_t)v7, MEMORY[0x1E4FBC248], MEMORY[0x1E4F41618], v5, (uint64_t)&v8);
  v7[7] = v8;
  View._trait<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in View.containerBackground<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = AnyView.init<A>(_:)();
  *a2 = result;
  return result;
}

double static ContainerBackground.CustomSpecifiedPreferenceModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a3@<X8>)
{
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  int v7 = *((_DWORD *)a1 + 20);
  uint64_t v25 = *a1;
  int v26 = v3;
  long long v28 = *(_OWORD *)(a1 + 3);
  uint64_t v27 = v4;
  uint64_t v29 = v5;
  uint64_t v30 = v6;
  long long v31 = *(_OWORD *)(a1 + 7);
  int v11 = v31;
  uint64_t v32 = a1[9];
  int v33 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)();
  PreferenceKeys.add(_:)();
  uint64_t v14 = v25;
  int v15 = v26;
  uint64_t v16 = v4;
  long long v17 = v28;
  uint64_t v18 = v5;
  uint64_t v19 = v6;
  long long v20 = v31;
  uint64_t v21 = v32;
  int v22 = v33;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a2(&v23, v8, &v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v14 = v6;
  int v15 = v11;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v14 = v23;
    int v15 = LODWORD(v24);
    uint64_t v9 = PreferencesOutputs.subscript.getter();
    uint64_t v14 = v6;
    int v15 = v11;
    MEMORY[0x1F4188790](v9);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  *(void *)a3 = v23;
  double result = v24;
  a3[1] = v24;
  return result;
}

uint64_t implicit closure #1 in static ContainerBackground.CustomSpecifiedPreferenceModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v1 = *MEMORY[0x1E4F4E7A0];
  if ((a1 & 0x100000000) == 0) {
    int v1 = a1;
  }
  int v6 = v1;
  uint64_t v8 = type metadata accessor for ContainerBackground.Specified();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for ContainerBackgroundKind?(0, &lazy cache variable for type metadata for Attribute<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v6, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v7, v8, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v5;
}

uint64_t ContainerBackground.Specified.childValue.getter(int a1)
{
  if (*MEMORY[0x1E4F4E7A0] == a1) {
    return 0;
  }
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContainerBackground.CustomSpecifiedPreferenceModifier<A, B>@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a3@<X8>)
{
  return static ContainerBackground.CustomSpecifiedPreferenceModifier._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ContainerBackground.CustomSpecifiedPreferenceModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t ContainerBackground.Specified.value.getter(int a1, uint64_t a2)
{
  uint64_t v3 = ContainerBackground.Specified.childValue.getter(a1);
  if (v3)
  {
    uint64_t v4 = v3;
    Swift::UInt v5 = ContainerBackgroundKeys.AnyCustomKey.init<A>(_:)(a2, a2);
    if (*(void *)(v4 + 16))
    {
      specialized __RawDictionaryStorage.find<A>(_:)(v5);
      char v7 = v6;
    }
    else
    {
      char v7 = 0;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t protocol witness for Rule.value.getter in conformance ContainerBackground.Specified<A>@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = ContainerBackground.Specified.value.getter(*v2, *(void *)(a1 + 16));
  *a2 = result & 1;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance ContainerBackground.Specified<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t partial apply for closure #1 in View.containerBackground<A>(_:for:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in View.containerBackground<A>(_:for:)(MEMORY[0x1E4F41830], a1);
}

uint64_t partial apply for closure #2 in View.containerBackground<A>(_:for:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in View.containerBackground<A>(_:for:)(MEMORY[0x1E4F40900], a1);
}

uint64_t partial apply for closure #1 in View.containerBackground<A>(_:for:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return closure #1 in View.containerBackground<A>(_:for:)(v2[6], v2[7], v2[8], v2[2], v2[3], v2[4], v2[5], a2, a1);
}

uint64_t lazy protocol witness table accessor for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.CustomKey, AnyView??> and conformance _BackgroundPreferenceModifier<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187D3A7D4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.containerBackgroundKind.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187D3A818()
{
  return EnvironmentValues.containerBackgroundKind.setter();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>, &lazy cache variable for type metadata for ContainerBackgroundKind?, MEMORY[0x1E4F40C18], MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ContainerBackgroundKind?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in View.containerBackground<A>(_:for:allowsVibrancy:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in View.containerBackground<A>(_:for:allowsVibrancy:)((uint64_t)lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E4F41830], a1);
}

uint64_t partial apply for closure #2 in View.containerBackground<A>(_:for:allowsVibrancy:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in View.containerBackground<A>(_:for:allowsVibrancy:)((uint64_t)lazy protocol witness table accessor for type ContainerRelativeShape and conformance ContainerRelativeShape, MEMORY[0x1E4F40900], a1);
}

uint64_t partial apply for closure #1 in View.containerBackground<A>(_:for:allowsVibrancy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in View.containerBackground<A>(_:for:allowsVibrancy:)(*(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), *(unsigned __int8 *)(v3 + 72), *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), a3, a1, a2);
}

uint64_t partial apply for closure #1 in View.containerBackground<A>(for:alignment:content:)()
{
  return closure #1 in View.containerBackground<A>(for:alignment:content:)(*(void (**)(void))(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_187D3A978()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.applyContainerBackground<A>(for:isEnabled:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in View.applyContainerBackground<A>(for:isEnabled:)(a1, *(unsigned char *)(v2 + 40), *(void *)(v2 + 24), a2);
}

unint64_t lazy protocol witness table accessor for type AnyView? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyView? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AnyView? and conformance <A> A?)
  {
    type metadata accessor for ContainerBackgroundKind?(255, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E4F41618], MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyView? and conformance <A> A?);
  }
  return result;
}

uint64_t sub_187D3AA24()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.applyContainerBackground<A, B>(for:content:)(uint64_t a1)
{
  return closure #1 in View.applyContainerBackground<A, B>(for:content:)(a1, *(void (**)(uint64_t))(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t type metadata accessor for ContainerBackground.CustomSpecifiedPreferenceModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in View.containerBackground<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in View.containerBackground<A>(_:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type ContainerBackgroundPlacement and conformance ContainerBackgroundPlacement()
{
  unint64_t result = lazy protocol witness table cache variable for type ContainerBackgroundPlacement and conformance ContainerBackgroundPlacement;
  if (!lazy protocol witness table cache variable for type ContainerBackgroundPlacement and conformance ContainerBackgroundPlacement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerBackgroundPlacement and conformance ContainerBackgroundPlacement);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContainerBackgroundPlacement()
{
  return &type metadata for ContainerBackgroundPlacement;
}

ValueMetadata *type metadata accessor for ContainerBackgroundTraitKey()
{
  return &type metadata for ContainerBackgroundTraitKey;
}

uint64_t sub_187D3AB2C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D3AC20()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D3AC88()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.CustomKey, AnyView??>()
{
  if (!lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.CustomKey, AnyView??>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<ContainerBackgroundKind?>(255, &lazy cache variable for type metadata for AnyView??, &lazy cache variable for type metadata for AnyView?, MEMORY[0x1E4F41618], MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type AnyView?? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for _BackgroundPreferenceModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.CustomKey, AnyView??>);
    }
  }
}

uint64_t sub_187D3ADD4()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D3AE88()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D3AEFC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_187D3AF04()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ContainerBackgroundTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<ContainerBackgroundTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ContainerBackgroundTraitKey> and conformance _TraitWritingModifier<A>)
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGMaTm_1(255, &lazy cache variable for type metadata for _TraitWritingModifier<ContainerBackgroundTraitKey>, (uint64_t)&type metadata for ContainerBackgroundTraitKey, (uint64_t)&protocol witness table for ContainerBackgroundTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ContainerBackgroundTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContainerBackgroundPlacement(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 15);
  }
  unsigned int v3 = (((*(void *)a1 >> 60) >> 3) & 0xFFFFFFF1 | (2 * ((*(void *)a1 >> 60) & 7))) ^ 0xF;
  if (v3 >= 0xE) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ContainerBackgroundPlacement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE)
  {
    *(void *)unint64_t result = a2 - 15;
    if (a3 >= 0xF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = (unint64_t)(((-a2 >> 1) & 7) - 8 * a2) << 60;
    }
  }
  return result;
}

uint64_t *destructiveInjectEnumTag for ContainerBackgroundPlacement.Storage(uint64_t *result, uint64_t a2)
{
  void *result = *result & 0xFFFFFFFFFFFFFFFLL | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for ContainerBackgroundPlacement.Storage()
{
  return &type metadata for ContainerBackgroundPlacement.Storage;
}

ValueMetadata *type metadata accessor for ContainerBackground()
{
  return &type metadata for ContainerBackground;
}

uint64_t assignWithTake for ContainerBackgroundValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  outlined consume of ContainerBackgroundValue.Content(v4, v5);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t assignWithTake for ContainerBackgroundModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in ContainerBackgroundModifier()
{
  return &protocol witness table for ContainerBackgroundModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ContainerBackground.CustomSpecifiedPreferenceModifier<A, B>()
{
  return &protocol witness table for ContainerBackground.CustomSpecifiedPreferenceModifier<A, B>;
}

unint64_t lazy protocol witness table accessor for type ContainerBackgroundPlacement.Storage and conformance ContainerBackgroundPlacement.Storage()
{
  unint64_t result = lazy protocol witness table cache variable for type ContainerBackgroundPlacement.Storage and conformance ContainerBackgroundPlacement.Storage;
  if (!lazy protocol witness table cache variable for type ContainerBackgroundPlacement.Storage and conformance ContainerBackgroundPlacement.Storage)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerBackgroundPlacement.Storage and conformance ContainerBackgroundPlacement.Storage);
  }
  return result;
}

uint64_t sub_187D3B224()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t outlined destroy of (ContainerBackgroundPlacementKey & HostPreferenceKey)?(uint64_t a1)
{
  type metadata accessor for (ContainerBackgroundPlacementKey & HostPreferenceKey)?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for implicit closure #1 in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)();
}

uint64_t partial apply for closure #1 in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in static ContainerBackgroundModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(unsigned char *)(v3 + 16), *(long long **)(v3 + 24), *(unsigned int *)(v3 + 32));
}

uint64_t type metadata accessor for ContainerBackgroundModifier.AnimatedPreferenceValue()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187D3B35C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187D3B394()
{
  return swift_deallocObject();
}

BOOL specialized static ContainerBackgroundPlacement.Storage.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  BOOL v4 = *a2 == *a1;
  if (*a2 >= 0) {
    BOOL v4 = 0;
  }
  BOOL v5 = v3 >= 0 && v2 == v3;
  if (v2 >= 0) {
    return v5;
  }
  else {
    return v4;
  }
}

uint64_t partial apply for implicit closure #1 in static ContainerBackground.CustomSpecifiedPreferenceModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static ContainerBackground.CustomSpecifiedPreferenceModifier._makeView(modifier:inputs:body:)(*(unsigned int *)(v0 + 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 44) << 32));
}

uint64_t type metadata accessor for ContainerBackground.Specified()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for ContainerBackgroundKind?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ContainerRelativeShape and conformance ContainerRelativeShape()
{
  unint64_t result = lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape;
  if (!lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeShape and conformance ContainerRelativeShape);
  }
  return result;
}

void *type metadata accessor for ContainerBackgroundModifier.CustomPreferenceValue()
{
  return &unk_1ED44EC58;
}

uint64_t *initializeBufferWithCopyOfBuffer for ContainerBackgroundValue.Content(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of ContainerBackgroundValue.Content(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for ContainerBackgroundValue.Content(uint64_t a1)
{
  return outlined consume of ContainerBackgroundValue.Content(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t *assignWithCopy for ContainerBackgroundValue.Content(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  outlined copy of ContainerBackgroundValue.Content(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  outlined consume of ContainerBackgroundValue.Content(v5, v6);
  return a1;
}

uint64_t *assignWithTake for ContainerBackgroundValue.Content(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  outlined consume of ContainerBackgroundValue.Content(v3, v4);
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in ContainerBackground.Specified<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ContainerBackgroundModifier.PreferenceValue<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ContainerBackgroundModifier.AnimatedPreferenceValue<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D3B5F4()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ContainerBackgroundModifier.AnimatedPreferenceValue.updateValue()(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 48);
  char v5 = *(unsigned char *)(v1 + 56);
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = *(void *)(v1 + 72);
  long long v11 = *(_OWORD *)(v1 + 32);
  uint64_t v12 = v4;
  char v13 = v5;
  (*(void (**)(uint64_t *__return_ptr))(v3 + 16))(&v10);
  v9[0] = v6;
  v9[1] = v7;
  return ContainerBackgroundModifier.transformPreference(_:placement:environment:transaction:)(a1, &v10, v9);
}

void type metadata accessor for ModifiedContent<AnyView, _BackgroundModifier<AnyView>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<AnyView, _BackgroundModifier<AnyView>>)
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGMaTm_1(255, &lazy cache variable for type metadata for _BackgroundModifier<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], MEMORY[0x1E4F40558]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, _BackgroundModifier<AnyView>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _BackgroundModifier<AnyView>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _BackgroundModifier<AnyView>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _BackgroundModifier<AnyView>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<AnyView, _BackgroundModifier<AnyView>>();
    lazy protocol witness table accessor for type _BackgroundModifier<AnyView> and conformance _BackgroundModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _BackgroundModifier<AnyView>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BackgroundModifier<AnyView> and conformance _BackgroundModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _BackgroundModifier<AnyView> and conformance _BackgroundModifier<A>;
  if (!lazy protocol witness table cache variable for type _BackgroundModifier<AnyView> and conformance _BackgroundModifier<A>)
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGMaTm_1(255, &lazy cache variable for type metadata for _BackgroundModifier<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], MEMORY[0x1E4F40558]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BackgroundModifier<AnyView> and conformance _BackgroundModifier<A>);
  }
  return result;
}

uint64_t sub_187D3B868()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ContainerBackgroundModifier.PreferenceValue.value.getter(uint64_t a1)
{
  return closure #2 in ContainerBackgroundModifier.PreferenceValue.value.getter(a1, *(void *)(v1 + 32), *(unsigned int *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void static ContainerBackgroundPlacement.tabView.getter()
{
}

uint64_t TraitValues.isAuxiliaryContent.getter()
{
  ViewTraitCollection.value<A>(for:defaultValue:)();
  return v1;
}

uint64_t partial apply for closure #1 in _VariadicView_Children.tagIndex<A>(_:)(uint64_t a1)
{
  return closure #1 in _VariadicView_Children.tagIndex<A>(_:)(a1, *(char **)(v1 + 32), *(void **)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t _VariadicView_Children.Element.tag<A>(for:)()
{
  return ViewTraitCollection.tag<A>(for:)();
}

uint64_t GroupBox.init(label:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(double)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v19 - v11;
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2(v14);
  uint64_t v17 = *(void *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v12, a1, a3);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, a3);
  GroupBox.init(content:label:)((uint64_t)v16, (uint64_t)v12, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a3);
}

uint64_t GroupBox<>.init(content:)@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t)@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for GroupBox();
  *(void *)&a2[*(int *)(v4 + 56)] = 0;
  *a2 = 1;
  return a1(v4, v5, v6, v7);
}

uint64_t GroupBox.init(content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56))(a5, 1, 1, a3);
  uint64_t v9 = type metadata accessor for GroupBox();
  *(void *)(a5 + *(int *)(v9 + 56)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v9 + 52), a1, a4);
  uint64_t v10 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(a5, a2, v10);
}

uint64_t GroupBox.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v34 = a1[2];
  type metadata accessor for ModifiedContent();
  type metadata accessor for RelationshipModifier<String>();
  uint64_t v3 = type metadata accessor for ModifiedContent();
  unint64_t v39 = lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label();
  uint64_t v67 = a1[4];
  uint64_t v4 = v67;
  uint64_t v68 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v5 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v66 = &protocol witness table for RelationshipModifier<A>;
  uint64_t v32 = v5;
  uint64_t v38 = v3;
  uint64_t v6 = swift_getWitnessTable();
  uint64_t v61 = &type metadata for GroupBoxStyleConfiguration.Label;
  uint64_t v62 = v3;
  unint64_t v63 = v39;
  uint64_t v64 = v6;
  type metadata accessor for OptionalSourceWriter();
  uint64_t v30 = type metadata accessor for ModifiedContent();
  uint64_t v40 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  int v33 = (char *)&v29 - v7;
  uint64_t v8 = a1[3];
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v35 = v9;
  unint64_t v10 = lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content();
  unint64_t v36 = v10;
  uint64_t v59 = a1[5];
  uint64_t v11 = v59;
  char v60 = &protocol witness table for RelationshipModifier<A>;
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v61 = &type metadata for GroupBoxStyleConfiguration.Content;
  uint64_t v62 = v9;
  unint64_t v63 = v10;
  uint64_t v64 = v31;
  type metadata accessor for StaticSourceWriter();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  double v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v29 - v16;
  uint64_t v18 = v34;
  uint64_t v50 = v34;
  uint64_t v51 = v8;
  uint64_t v19 = v8;
  uint64_t v20 = v4;
  uint64_t v52 = v4;
  uint64_t v53 = v11;
  uint64_t v21 = v41;
  uint64_t v54 = v41;
  unint64_t v22 = lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle();
  uint64_t v28 = v6;
  uint64_t v23 = v33;
  View.optionalViewAlias<A, B>(_:_:)((uint64_t)&type metadata for GroupBoxStyleConfiguration.Label, (void (*)(double))partial apply for closure #1 in GroupBox.body.getter, (uint64_t)v49, (uint64_t)&type metadata for ResolvedGroupBoxStyle, (uint64_t)&type metadata for GroupBoxStyleConfiguration.Label, v38, v22, v39, v28);
  uint64_t v44 = v18;
  uint64_t v45 = v19;
  uint64_t v46 = v20;
  uint64_t v47 = v11;
  uint64_t v48 = v21;
  unint64_t v57 = v22;
  char v58 = &protocol witness table for OptionalSourceWriter<A, B>;
  uint64_t v24 = v30;
  uint64_t v25 = swift_getWitnessTable();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for GroupBoxStyleConfiguration.Content, (void (*)(double))partial apply for closure #2 in GroupBox.body.getter, (uint64_t)v43, v24, (uint64_t)&type metadata for GroupBoxStyleConfiguration.Content, v35, v25);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v23, v24);
  uint64_t v55 = v25;
  uint64_t v56 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v14);
  int v26 = *(void (**)(char *, uint64_t))(v37 + 8);
  v26(v14, v12);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v26)(v17, v12);
}

void type metadata accessor for RelationshipModifier<String>()
{
  if (!lazy cache variable for type metadata for RelationshipModifier<String>)
  {
    unint64_t v0 = type metadata accessor for RelationshipModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RelationshipModifier<String>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content);
  }
  return result;
}

uint64_t closure #1 in GroupBox.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)v25 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)v25 - v15, a1, v12, v14);
  uint64_t v17 = *(void *)(a2 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    type metadata accessor for ModifiedContent();
    type metadata accessor for RelationshipModifier<String>();
    uint64_t v18 = type metadata accessor for ModifiedContent();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(a6, 1, 1, v18);
  }
  else
  {
    v26[0] = a2;
    v26[1] = a3;
    v26[2] = a4;
    v26[3] = a5;
    type metadata accessor for GroupBox();
    uint64_t v20 = Namespace.wrappedValue.getter();
    v26[0] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v20, a2, a4, v21);
    uint64_t v22 = type metadata accessor for AccessibilityGroupBoxLabelModifier();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for ModifiedContent();
    type metadata accessor for RelationshipModifier<String>();
    type metadata accessor for ModifiedContent();
    _OWORD v25[2] = a4;
    v25[3] = &protocol witness table for AccessibilityAttachmentModifier;
    v25[0] = swift_getWitnessTable();
    v25[1] = &protocol witness table for RelationshipModifier<A>;
    swift_getWitnessTable();
    View.accessibilityConfiguration<A>(_:)((uint64_t)v26, a2, v22, a4, WitnessTable);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v16, a2);
    uint64_t v24 = swift_checkMetadataState();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(a6, 0, 1, v24);
  }
}

uint64_t partial apply for closure #1 in GroupBox.body.getter()
{
  return partial apply for closure #1 in GroupBox.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in GroupBox.body.getter);
}

unint64_t lazy protocol witness table accessor for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle;
  if (!lazy protocol witness table cache variable for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle;
  if (!lazy protocol witness table cache variable for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedGroupBoxStyle and conformance ResolvedGroupBoxStyle);
  }
  return result;
}

uint64_t closure #2 in GroupBox.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v22[1] = a5;
  type metadata accessor for RelationshipModifier<String>();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v22 - v14;
  v23[0] = a1;
  v23[1] = a2;
  uint64_t v23[2] = a3;
  v23[3] = a4;
  type metadata accessor for GroupBox();
  uint64_t v16 = Namespace.wrappedValue.getter();
  v23[0] = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v16, a2, a4, v17);
  uint64_t v18 = type metadata accessor for AccessibilityGroupBoxContentModifier();
  uint64_t WitnessTable = swift_getWitnessTable();
  _OWORD v22[2] = a4;
  v22[3] = &protocol witness table for RelationshipModifier<A>;
  swift_getWitnessTable();
  View.accessibilityConfiguration<A>(_:)((uint64_t)v23, a2, v18, a4, WitnessTable);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v20(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v20)(v15, v9);
}

uint64_t partial apply for closure #2 in GroupBox.body.getter()
{
  return partial apply for closure #1 in GroupBox.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in GroupBox.body.getter);
}

uint64_t partial apply for closure #1 in GroupBox.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

void GroupBox<>.init(_:)(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
}

uint64_t associated type witness table accessor for View.Body : View in GroupBox<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for GroupBox()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupBox(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84)) {
    size_t v8 = *(void *)(v7 + 64);
  }
  else {
    size_t v8 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  size_t v11 = v8 + v10;
  uint64_t v12 = *(void *)(v9 + 64) + 7;
  unsigned int v13 = v10 | *(_DWORD *)(v7 + 80) & 0xF8;
  if (v13 > 7
    || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || ((v12 + ((v8 + v10) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v10;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    unint64_t v18 = ((unint64_t)a2 + v11) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v17, v18, v5);
    *(void *)((v12 + (((unint64_t)a1 + v11) & v17)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v12 + v18) & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

uint64_t destroy for GroupBox(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(*(void *)(v6 - 8) + 8);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v9 = *(void *)(v5 + 64) + a1;
  if (!*(_DWORD *)(v5 + 84)) {
    ++v9;
  }

  return v7((v9 + v8) & ~v8);
}

void *initializeWithCopy for GroupBox(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    int v8 = *(_DWORD *)(v7 + 84);
    size_t v9 = *(void *)(v7 + 64);
    if (v8) {
      size_t v10 = v9;
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    uint64_t v12 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v11 = v7 + 56;
    v12(a1, 0, 1, v6);
    int v8 = *(_DWORD *)(v11 + 28);
    size_t v9 = *(void *)(v11 + 8);
  }
  if (v8) {
    size_t v13 = v9;
  }
  else {
    size_t v13 = v9 + 1;
  }
  uint64_t v14 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  unint64_t v18 = ((unint64_t)a1 + v17) & ~v16;
  unint64_t v19 = ((unint64_t)a2 + v17) & ~v16;
  (*(void (**)(unint64_t, unint64_t))(v14 + 16))(v18, v19);
  *(void *)((*(void *)(v15 + 48) + 7 + v18) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v15 + 48)
                                                                                       + 7
                                                                                       + v19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithCopy for GroupBox(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_12;
    }
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
  }
  if (v11) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v12 + 1;
  }
  memcpy(a1, a2, v13);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v14 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v14 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v15 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v16 = v15 + 24;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = v14 + v17;
  unint64_t v19 = ((unint64_t)a1 + v18) & ~v17;
  unint64_t v20 = ((unint64_t)a2 + v18) & ~v17;
  (*(void (**)(unint64_t, unint64_t))(v15 + 24))(v19, v20);
  *(void *)((*(void *)(v16 + 40) + 7 + v19) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v16 + 40)
                                                                                       + 7
                                                                                       + v20) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *initializeWithTake for GroupBox(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    int v8 = *(_DWORD *)(v7 + 84);
    size_t v9 = *(void *)(v7 + 64);
    if (v8) {
      size_t v10 = v9;
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    size_t v12 = *(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v11 = v7 + 56;
    v12(a1, 0, 1, v6);
    int v8 = *(_DWORD *)(v11 + 28);
    size_t v9 = *(void *)(v11 + 8);
  }
  if (v8) {
    size_t v13 = v9;
  }
  else {
    size_t v13 = v9 + 1;
  }
  uint64_t v14 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  unint64_t v18 = ((unint64_t)a1 + v17) & ~v16;
  unint64_t v19 = ((unint64_t)a2 + v17) & ~v16;
  (*(void (**)(unint64_t, unint64_t))(v14 + 32))(v18, v19);
  *(void *)((*(void *)(v15 + 32) + 7 + v18) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v15 + 32)
                                                                                       + 7
                                                                                       + v19) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for GroupBox(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_12;
    }
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
  }
  if (v11) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v12 + 1;
  }
  memcpy(a1, a2, v13);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v14 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v14 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v15 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v16 = v15 + 40;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = v14 + v17;
  unint64_t v19 = ((unint64_t)a1 + v18) & ~v17;
  unint64_t v20 = ((unint64_t)a2 + v18) & ~v17;
  (*(void (**)(unint64_t, unint64_t))(v15 + 40))(v19, v20);
  *(void *)((*(void *)(v16 + 24) + 7 + v19) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v16 + 24)
                                                                                       + 7
                                                                                       + v20) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupBox(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  uint64_t v10 = *(unsigned int *)(v8 + 84);
  if (v10 <= v6) {
    unsigned int v11 = v6;
  }
  else {
    unsigned int v11 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  if (v5) {
    uint64_t v13 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  else {
    uint64_t v13 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v13 + v12;
  if (v11 < a2)
  {
    unint64_t v15 = ((*(void *)(*(void *)(v7 - 8) + 64) + (v14 & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = a2 - v11 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v15);
        if (!*((unsigned char *)a1 + v15)) {
          break;
        }
        goto LABEL_27;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v15);
        if (*(_WORD *)((char *)a1 + v15)) {
          goto LABEL_27;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D3D55CLL);
      case 4:
        int v19 = *(_DWORD *)((char *)a1 + v15);
        if (!v19) {
          break;
        }
LABEL_27:
        int v20 = v19 - 1;
        if ((v15 & 0xFFFFFFF8) != 0)
        {
          int v20 = 0;
          int v21 = *a1;
        }
        else
        {
          int v21 = 0;
        }
        return v11 + (v21 | v20) + 1;
      default:
        break;
    }
  }
  if (!v11) {
    return 0;
  }
  if (v6 >= v10)
  {
    unsigned int v25 = (*(uint64_t (**)(void))(v4 + 48))();
    if (v25 >= 2) {
      return v25 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v22 = ((unint64_t)a1 + v14) & ~v12;
    uint64_t v23 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
    return v23(v22, v10, v7);
  }
}

void storeEnumTagSinglePayload for GroupBox(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(a4 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  unsigned int v12 = *(_DWORD *)(v11 + 84);
  size_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v9) {
    unsigned int v15 = v9;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v11 + 84);
  }
  if (!v8) {
    ++v13;
  }
  size_t v16 = ((*(void *)(*(void *)(v10 - 8) + 64) + ((v13 + v14) & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v15 < a3)
  {
    unsigned int v17 = a3 - v15;
    if (((*(_DWORD *)(*(void *)(v10 - 8) + 64) + ((v13 + v14) & ~v14) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v18 = v17 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v6 = v19;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v15)
  {
    if (((*(_DWORD *)(*(void *)(v10 - 8) + 64) + ((v13 + v14) & ~v14) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v20 = a2 - v15;
    }
    else {
      int v20 = 1;
    }
    if (((*(_DWORD *)(*(void *)(v10 - 8) + 64) + ((v13 + v14) & ~v14) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      unsigned int v21 = ~v15 + a2;
      bzero(a1, v16);
      *(_DWORD *)a1 = v21;
    }
    switch(v6)
    {
      case 1:
        a1[v16] = v20;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v20;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v16] = v20;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x187D3D86CLL);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (a2)
      {
LABEL_36:
        if (v9 >= v12)
        {
          if (v9 >= a2)
          {
            uint64_t v26 = a2 + 1;
            uint64_t v27 = *(void (**)(char *, uint64_t))(v7 + 56);
            v27(a1, v26);
          }
          else
          {
            if (v13 <= 3) {
              int v23 = ~(-1 << (8 * v13));
            }
            else {
              int v23 = -1;
            }
            if (v13)
            {
              int v24 = v23 & (~v9 + a2);
              if (v13 <= 3) {
                int v25 = v13;
              }
              else {
                int v25 = 4;
              }
              bzero(a1, v13);
              switch(v25)
              {
                case 2:
                  *(_WORD *)a1 = v24;
                  break;
                case 3:
                  *(_WORD *)a1 = v24;
                  a1[2] = BYTE2(v24);
                  break;
                case 4:
                  *(_DWORD *)a1 = v24;
                  break;
                default:
                  *a1 = v24;
                  break;
              }
            }
          }
        }
        else
        {
          unint64_t v22 = *(void (**)(unint64_t))(v11 + 56);
          v22((unint64_t)&a1[v13 + v14] & ~v14);
        }
      }
      return;
  }
}

uint64_t sub_187D3D8A4()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for BaseFocusResponder.platformItem.getter in conformance UIViewResponder(uint64_t a1)
{
  return FocusResponder.platformItem.getter(a1, (uint64_t)&protocol witness table for UIViewResponder);
}

uint64_t FocusResponder.platformItem.getter(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void *__return_ptr))(a2 + 16))(v7);
  if (v7[5]) {
    BOOL v2 = 0;
  }
  else {
    BOOL v2 = v7[6] == 1;
  }
  if (v2)
  {
    outlined destroy of FocusItem?((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for FocusItem?);
    return 0;
  }
  else
  {
    outlined init with copy of FocusItem.Base((uint64_t)v7, (uint64_t)v5);
    if (v5[32] == 1)
    {
      outlined init with take of WeakBox<UIFocusItem>((uint64_t)v5, (uint64_t)v6);
      uint64_t v3 = MEMORY[0x18C119DF0](v6);
      outlined destroy of FocusItem?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for WeakBox<UIFocusItem>);
    }
    else
    {
      outlined destroy of FocusItem.Base((uint64_t)v5);
      uint64_t v3 = 0;
    }
    outlined destroy of FocusItem((uint64_t)v7);
  }
  return v3;
}

uint64_t Gesture<>.values(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v11 = *(void *)(a3 - 8);
  double v12 = MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v11 + 16))(v14, v5, v12);
  unsigned int v15 = (void *)swift_allocObject();
  void v15[2] = a3;
  void v15[3] = a4;
  void v15[4] = a1;
  v15[5] = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(a5, v14, a3);
  size_t v16 = (void *)(a5 + *(int *)(type metadata accessor for TaskGesture() + 36));
  *size_t v16 = &async function pointer to partial apply for closure #1 in Gesture<>.values(_:);
  v16[1] = v15;
  return swift_retain();
}

uint64_t closure #1 in Gesture<>.values(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[5] = a4;
  void v5[6] = a5;
  v5[3] = a2;
  v5[4] = a3;
  v5[2] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v5[7] = AssociatedTypeWitness;
  uint64_t v7 = type metadata accessor for TaskPhase();
  v5[8] = v7;
  uint64_t v8 = type metadata accessor for AsyncStream();
  v5[9] = v8;
  v5[10] = *(void *)(v8 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = swift_getWitnessTable();
  type metadata accessor for AsyncMapSequence();
  v5[13] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for GestureValues();
  v5[14] = v9;
  v5[15] = *(void *)(v9 - 8);
  v5[16] = swift_task_alloc();
  v5[17] = *(void *)(AssociatedTypeWitness - 8);
  v5[18] = swift_task_alloc();
  v5[19] = swift_task_alloc();
  v5[20] = *(void *)(v7 - 8);
  v5[21] = swift_task_alloc();
  type metadata accessor for Optional();
  v5[22] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for AsyncStream.Iterator();
  v5[23] = v10;
  v5[24] = *(void *)(v10 - 8);
  v5[25] = swift_task_alloc();
  v5[26] = type metadata accessor for MainActor();
  v5[27] = static MainActor.shared.getter();
  uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter();
  v5[28] = v12;
  v5[29] = v11;
  return MEMORY[0x1F4188298](closure #1 in Gesture<>.values(_:), v12, v11);
}

uint64_t closure #1 in Gesture<>.values(_:)()
{
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = static MainActor.shared.getter();
  v0[30] = v1;
  BOOL v2 = (void *)swift_task_alloc();
  v0[31] = v2;
  void *v2 = v0;
  v2[1] = closure #1 in Gesture<>.values(_:);
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[23];
  uint64_t v5 = MEMORY[0x1E4FBCFD8];
  return MEMORY[0x1F4187D58](v3, v1, v5, v4);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  BOOL v2 = *(void *)(v1 + 232);
  uint64_t v3 = *(void *)(v1 + 224);
  return MEMORY[0x1F4188298](closure #1 in Gesture<>.values(_:), v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t (*v17)();
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  long long v24;
  int *v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  uint64_t v28;

  uint64_t v1 = *(void *)(v0 + 176);
  BOOL v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v1, 1, v3) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 200), *(void *)(v0 + 184));
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 168), v1, v3);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      uint64_t v7 = *(void *)(v0 + 144);
      uint64_t v8 = *(void *)(v0 + 152);
      uint64_t v9 = *(void *)(v0 + 136);
      uint64_t v10 = *(void *)(v0 + 104);
      uint64_t v11 = *(void *)(v0 + 80);
      uint64_t v12 = *(void *)(v0 + 88);
      uint64_t v13 = *(void *)(v0 + 72);
      uint64_t v14 = *(void *)(v0 + 56);
      unsigned int v15 = *(void *)(v0 + 16);
      int v25 = *(int **)(v0 + 24);
      uint64_t v26 = *(void *)(v0 + 128);
      int v24 = *(_OWORD *)(v0 + 40);
      if (EnumCaseMultiPayload == 1)
      {
        (*(void (**)(void, void, void))(v9 + 32))(*(void *)(v0 + 152), *(void *)(v0 + 168), *(void *)(v0 + 56));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v8, v14);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v12, v15, v13);
        *(_OWORD *)(swift_allocObject() + 16) = v24;
        AsyncSequence.map<A>(_:)();
        swift_release();
        GestureValues.init(firstValue:hasEnded:base:)(v7, 0, v10, v14, v26);
        uint64_t v27 = (uint64_t (*)(uint64_t))((char *)v25 + *v25);
        size_t v16 = (void *)swift_task_alloc();
        *(void *)(v0 + 256) = v16;
        *size_t v16 = v0;
        unsigned int v17 = closure #1 in Gesture<>.values(_:);
      }
      else
      {
        (*(void (**)(void, void, void))(v9 + 32))(*(void *)(v0 + 152), *(void *)(v0 + 168), *(void *)(v0 + 56));
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v7, v8, v14);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v12, v15, v13);
        *(_OWORD *)(swift_allocObject() + 16) = v24;
        AsyncSequence.map<A>(_:)();
        swift_release();
        GestureValues.init(firstValue:hasEnded:base:)(v7, 1, v10, v14, v26);
        uint64_t v27 = (uint64_t (*)(uint64_t))((char *)v25 + *v25);
        size_t v16 = (void *)swift_task_alloc();
        *(void *)(v0 + 264) = v16;
        *size_t v16 = v0;
        unsigned int v17 = closure #1 in Gesture<>.values(_:);
      }
      v16[1] = v17;
      int v23 = *(void *)(v0 + 128);
      return v27(v23);
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 160) + 8))(*(void *)(v0 + 168), *(void *)(v0 + 64));
      uint64_t v18 = static MainActor.shared.getter();
      *(void *)(v0 + 240) = v18;
      int v19 = (void *)swift_task_alloc();
      *(void *)(v0 + 248) = v19;
      char *v19 = v0;
      v19[1] = closure #1 in Gesture<>.values(_:);
      int v20 = *(void *)(v0 + 176);
      unsigned int v21 = *(void *)(v0 + 184);
      unint64_t v22 = MEMORY[0x1E4FBCFD8];
      return MEMORY[0x1F4187D58](v20, v18, v22, v21);
    }
  }
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *v0;
  BOOL v2 = *(void *)(*v0 + 128);
  uint64_t v3 = *(void *)(*v0 + 120);
  uint64_t v4 = *(void *)(*v0 + 112);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v1 + 232);
  int v6 = *(void *)(v1 + 224);
  return MEMORY[0x1F4188298](closure #1 in Gesture<>.values(_:), v6, v5);
}

{
  void *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  (*(void (**)(void, void))(v0[17] + 8))(v0[19], v0[7]);
  uint64_t v1 = static MainActor.shared.getter();
  v0[30] = v1;
  BOOL v2 = (void *)swift_task_alloc();
  v0[31] = v2;
  void *v2 = v0;
  v2[1] = closure #1 in Gesture<>.values(_:);
  uint64_t v3 = v0[22];
  uint64_t v4 = v0[23];
  uint64_t v5 = MEMORY[0x1E4FBCFD8];
  return MEMORY[0x1F4187D58](v3, v1, v5, v4);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  uint64_t v1 = *v0;
  BOOL v2 = *(void *)(*v0 + 128);
  uint64_t v3 = *(void *)(*v0 + 120);
  uint64_t v4 = *(void *)(*v0 + 112);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  uint64_t v5 = *(void *)(v1 + 232);
  int v6 = *(void *)(v1 + 224);
  return MEMORY[0x1F4188298](closure #1 in Gesture<>.values(_:), v6, v5);
}

uint64_t sub_187D3EAD0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture<>.values(_:)(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return closure #1 in Gesture<>.values(_:)(a1, v7, v6, v4, v5);
}

uint64_t closure #1 in closure #1 in Gesture<>.values(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[4] = a3;
  v4[5] = a4;
  void v4[2] = a1;
  void v4[3] = a2;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in Gesture<>.values(_:), 0, 0);
}

uint64_t TaskPhase.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v6, v4);
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a2, v6);
}

uint64_t GestureValues.init(firstValue:hasEnded:base:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t v8 = type metadata accessor for GestureValues();
  *(unsigned char *)(a5 + *(int *)(v8 + 28)) = a2;
  uint64_t v9 = a5 + *(int *)(v8 + 32);
  type metadata accessor for TaskPhase();
  type metadata accessor for AsyncStream();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for AsyncMapSequence();
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32);

  return v11(v9, a3, v10);
}

uint64_t closure #2 in closure #1 in Gesture<>.values(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[4] = a3;
  v4[5] = a4;
  void v4[2] = a1;
  void v4[3] = a2;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in Gesture<>.values(_:), 0, 0);
}

uint64_t closure #2 in closure #1 in Gesture<>.values(_:)()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for TaskPhase();
  TaskPhase.value.getter(v2, v1);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t GestureValues.firstValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t GestureValues.firstValue.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*GestureValues.firstValue.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GestureValues.hasEnded.getter(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 28));
}

uint64_t GestureValues.hasEnded.setter(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 28)) = result;
  return result;
}

uint64_t (*GestureValues.hasEnded.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t GestureValues.makeAsyncIterator()(uint64_t a1)
{
  type metadata accessor for TaskPhase();
  type metadata accessor for AsyncStream();
  swift_getWitnessTable();
  uint64_t v3 = type metadata accessor for AsyncMapSequence();
  double v4 = MEMORY[0x1F4188790](v3);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v8 - v5, v1 + *(int *)(a1 + 32), v3, v4);
  return AsyncMapSequence.makeAsyncIterator()();
}

uint64_t protocol witness for AsyncSequence.makeAsyncIterator() in conformance GestureValues<A>(uint64_t a1)
{
  GestureValues.makeAsyncIterator()(a1);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v3(v1, a1);
}

uint64_t static TaskGesture._makeGesture(gesture:inputs:)@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a3;
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  int v8 = *a1;
  long long v9 = a2[5];
  long long v42 = a2[4];
  long long v43 = v9;
  v44[0] = a2[6];
  *(_OWORD *)((char *)v44 + 12) = *(long long *)((char *)a2 + 108);
  long long v10 = a2[1];
  long long v38 = *a2;
  long long v39 = v10;
  long long v11 = a2[3];
  long long v40 = a2[2];
  long long v41 = v11;
  uint64_t v29 = a3;
  uint64_t v30 = a4;
  type metadata accessor for TaskGesture();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  long long v36 = v43;
  v37[0] = v44[0];
  *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)((char *)v44 + 12);
  long long v31 = v38;
  long long v32 = v39;
  long long v33 = v40;
  long long v34 = v41;
  long long v35 = v42;
  (*(void (**)(long long *__return_ptr, int *, long long *, uint64_t, uint64_t))(a4 + 32))(&v23, &v22, &v31, v6, a4);
  LODWORD(v31) = v8;
  unsigned int v12 = _GraphValue.value.getter();
  long long v31 = v23;
  LODWORD(v32) = v24;
  swift_getAssociatedTypeWitness();
  type metadata accessor for _GestureOutputs();
  unsigned int v13 = _GestureOutputs.phase.getter();
  long long v36 = v43;
  v37[0] = v44[0];
  *(_OWORD *)((char *)v37 + 12) = *(_OWORD *)((char *)v44 + 12);
  long long v31 = v38;
  long long v32 = v39;
  long long v33 = v40;
  long long v34 = v41;
  long long v35 = v42;
  unsigned int v14 = _GestureInputs.resetSeed.getter();
  *(void *)&long long v31 = __PAIR64__(v13, v12);
  *((void *)&v31 + 1) = v14;
  *(void *)&long long v32 = 0;
  uint64_t v26 = type metadata accessor for GesturePhase();
  uint64_t v15 = type metadata accessor for TaskGesturePhase();
  uint64_t v27 = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v31, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v25, v15, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v17);
  swift_release();
  _GestureOutputs.phase.setter();
  LODWORD(v6) = v23;
  int v18 = DWORD1(v23);
  uint64_t v19 = *((void *)&v23 + 1);
  int v20 = v24;
  long long v31 = v23;
  LODWORD(v32) = v24;
  _GestureOutputs.phase.getter();
  static AGAttributeFlags.transactional.getter();
  static AGAttributeFlags.removable.getter();
  uint64_t result = AGGraphSetFlags();
  *(_DWORD *)a5 = v6;
  *(_DWORD *)(a5 + 4) = v18;
  *(void *)(a5 + 8) = v19;
  *(_DWORD *)(a5 + 16) = v20;
  return result;
}

uint64_t closure #1 in static TaskGesture._makeGesture(gesture:inputs:)(uint64_t a1, uint64_t a2)
{
  void v7[2] = type metadata accessor for TaskGesture();
  _DWORD v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance TaskGesture<A>@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static TaskGesture._makeGesture(gesture:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

void protocol witness for Gesture.body.getter in conformance TaskGesture<A>()
{
}

uint64_t static TaskPhase<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a4;
  uint64_t v53 = a1;
  uint64_t v54 = a2;
  uint64_t v51 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v47 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v46 = (char *)&v45 - v6;
  MEMORY[0x1F4188790](v7);
  uint64_t v48 = (char *)&v45 - v8;
  uint64_t v52 = v9;
  uint64_t v10 = type metadata accessor for TaskPhase();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unsigned int v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v45 - v15;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v45 - v18;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v21 = *(void *)(TupleTypeMetadata2 - 8);
  double v22 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  int v24 = (char *)&v45 - v23;
  uint64_t v26 = (char *)&v45 + *(int *)(v25 + 48) - v23;
  uint64_t v50 = v11;
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16);
  v27((char *)&v45 - v23, v53, v10, v22);
  ((void (*)(char *, uint64_t, uint64_t))v27)(v26, v54, v10);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      ((void (*)(char *, char *, uint64_t))v27)(v16, v24, v10);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v30 = v51;
        uint64_t v29 = v52;
        long long v31 = v46;
        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v46, v26, v52);
        char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
        long long v33 = *(void (**)(char *, uint64_t))(v30 + 8);
        v33(v31, v29);
        v33(v16, v29);
LABEL_13:
        uint64_t v21 = v50;
        goto LABEL_14;
      }
      unsigned int v13 = v16;
    }
    else
    {
      ((void (*)(char *, char *, uint64_t))v27)(v13, v24, v10);
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v36 = v51;
        uint64_t v35 = v52;
        uint64_t v37 = v47;
        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v47, v26, v52);
        char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
        long long v38 = *(void (**)(char *, uint64_t))(v36 + 8);
        v38(v37, v35);
        v38(v13, v35);
        goto LABEL_13;
      }
    }
  }
  else
  {
    long long v34 = v48;
    ((void (*)(char *, char *, uint64_t))v27)(v19, v24, v10);
    if (!swift_getEnumCaseMultiPayload())
    {
      uint64_t v39 = v51;
      long long v40 = v34;
      long long v41 = v34;
      uint64_t v42 = v52;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v41, v26, v52);
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      long long v43 = *(void (**)(char *, uint64_t))(v39 + 8);
      v43(v40, v42);
      v43(v19, v42);
      goto LABEL_13;
    }
    unsigned int v13 = v19;
  }
  (*(void (**)(char *, uint64_t))(v51 + 8))(v13, v52);
  char v32 = 0;
  uint64_t v10 = TupleTypeMetadata2;
LABEL_14:
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v10);
  return v32 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance <> TaskPhase<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static TaskPhase<>.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t TaskPhase<>.hash(into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v10, v12, a2, v8);
  Swift::UInt EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v10, v3);
  Hasher._combine(_:)(EnumCaseMultiPayload);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

Swift::Int TaskPhase<>.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  TaskPhase<>.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

uint64_t TaskGesturePhase.gesture.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for TaskGesture();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance <> TaskPhase<A>(uint64_t a1)
{
  return TaskPhase<>.hashValue.getter(a1);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance <> TaskPhase<A>(uint64_t a1, uint64_t a2)
{
  return TaskPhase<>.hash(into:)(a1, a2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance <> TaskPhase<A>(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  TaskPhase<>.hash(into:)((uint64_t)v4, a2);
  return Hasher._finalize()();
}

uint64_t associated type witness table accessor for AsyncSequence.AsyncIterator : AsyncIteratorProtocol in GestureValues<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in <> TaskPhase<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for GestureValues()
{
  uint64_t v0 = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for TaskPhase();
    type metadata accessor for AsyncStream();
    swift_getWitnessTable();
    uint64_t v0 = type metadata accessor for AsyncMapSequence();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return v0;
}

void *initializeBufferWithCopyOfBuffer for GestureValues(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    (*(void (**)(void *, void *, void))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1, a2, *(void *)(a3 + 16));
    uint64_t v7 = *(int *)(a3 + 32);
    *((unsigned char *)v4 + *(int *)(a3 + 28)) = *((unsigned char *)a2 + *(int *)(a3 + 28));
    double v8 = (char *)v4 + v7;
    uint64_t v9 = (char *)a2 + v7;
    type metadata accessor for TaskPhase();
    type metadata accessor for AsyncStream();
    swift_getWitnessTable();
    uint64_t v10 = type metadata accessor for AsyncMapSequence();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  }
  return v4;
}

uint64_t destroy for GestureValues(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(a1, *(void *)(a2 + 16));
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  type metadata accessor for TaskPhase();
  type metadata accessor for AsyncStream();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for AsyncMapSequence();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t initializeWithCopy for GestureValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(int *)(a3 + 32);
  *(unsigned char *)(a1 + *(int *)(a3 + 28)) = *(unsigned char *)(a2 + *(int *)(a3 + 28));
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  type metadata accessor for TaskPhase();
  type metadata accessor for AsyncStream();
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for AsyncMapSequence();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  return a1;
}

uint64_t assignWithCopy for GestureValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a3 + 16) - 8) + 24))(a1, a2, *(void *)(a3 + 16));
  *(unsigned char *)(a1 + *(int *)(a3 + 28)) = *(unsigned char *)(a2 + *(int *)(a3 + 28));
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  type metadata accessor for TaskPhase();
  type metadata accessor for AsyncStream();
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for AsyncMapSequence();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for GestureValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(int *)(a3 + 32);
  *(unsigned char *)(a1 + *(int *)(a3 + 28)) = *(unsigned char *)(a2 + *(int *)(a3 + 28));
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  type metadata accessor for TaskPhase();
  type metadata accessor for AsyncStream();
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for AsyncMapSequence();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t assignWithTake for GestureValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)(a3 + 16) - 8) + 40))(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(int *)(a3 + 32);
  *(unsigned char *)(a1 + *(int *)(a3 + 28)) = *(unsigned char *)(a2 + *(int *)(a3 + 28));
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  type metadata accessor for TaskPhase();
  type metadata accessor for AsyncStream();
  swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for AsyncMapSequence();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for GestureValues(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187D40484);
}

uint64_t sub_187D40484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) == a2)
  {
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 48);
    return v6();
  }
  else if (a2 == 254)
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 28));
    if (v9 >= 2) {
      return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    type metadata accessor for TaskPhase();
    type metadata accessor for AsyncStream();
    swift_getWitnessTable();
    uint64_t v10 = type metadata accessor for AsyncMapSequence();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 32);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for GestureValues(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187D40620);
}

uint64_t sub_187D40620(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  if (*(_DWORD *)(v7 + 84) == a3)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
    uint64_t v6 = *(void *)(a4 + 16);
    return v8(result, a2, a2, v6);
  }
  else if (a3 == 254)
  {
    *(unsigned char *)(result + *(int *)(a4 + 28)) = a2 + 1;
  }
  else
  {
    type metadata accessor for TaskPhase();
    type metadata accessor for AsyncStream();
    swift_getWitnessTable();
    uint64_t v10 = type metadata accessor for AsyncMapSequence();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v12 = v10;
    uint64_t v13 = v5 + *(int *)(a4 + 32);
    return v11(v13, a2, a2, v12);
  }
  return result;
}

uint64_t type metadata accessor for GestureValues()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithTake for TaskPhase(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unsigned int v5 = a2[v4];
  if (v5 >= 3)
  {
    if (v4 <= 3) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a2;
        goto LABEL_10;
      case 2:
        int v7 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v7 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v7 = *(_DWORD *)a2;
LABEL_10:
        int v8 = (v7 | ((v5 - 3) << (8 * v4))) + 3;
        char v9 = v7 + 3;
        if (v4 >= 4) {
          LOBYTE(v5) = v9;
        }
        else {
          LOBYTE(v5) = v8;
        }
        break;
      default:
        break;
    }
  }
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
  *(unsigned char *)(a1 + v4) = v5;
  return a1;
}

uint64_t getEnumTag for TaskPhase(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v3 = a1[v2];
  int v4 = v3 - 3;
  if (v3 >= 3)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_10;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_10;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_10;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_10:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 3;
        LODWORD(v3) = v6 + 3;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void destructiveInjectEnumTag for TaskPhase(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (a2 > 2)
  {
    unsigned int v5 = a2 - 3;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 3;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 3;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

void closure #1 in TaskGesturePhase.Handler.invalidate()()
{
}

uint64_t TaskGesturePhase.Handler.deinit()
{
  TaskGesturePhase.Handler.invalidate()();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96);
  swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase();
  type metadata accessor for AsyncStream.Continuation();
  uint64_t v2 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t TaskGesturePhase.Handler.__deallocating_deinit()
{
  TaskGesturePhase.Handler.deinit();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TaskGesturePhase.Handler()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TaskGesturePhase.Handler.__allocating_init()()
{
  return TaskGesturePhase.Handler.init()();
}

uint64_t sub_187D40CBC()
{
  type metadata accessor for TaskGesture();

  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TaskGesture()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for TaskGesture(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D40E68);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for TaskGesture(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x187D4105CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t base witness table accessor for Gesture in TaskGesture<A>()
{
  return swift_getWitnessTable();
}

uint64_t TaskGesturePhase.Handler.init()()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 96);
  swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase();
  uint64_t v2 = type metadata accessor for AsyncStream.Continuation();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = *(void *)(*(void *)v0 + 104);
  swift_checkMetadataState();
  *(void *)(v0 + v3) = Array.init()();
  *(unsigned char *)(v0 + *(void *)(*(void *)v0 + 112)) = 0;
  return v0;
}

uint64_t TaskGesturePhase.updateValue()(uint64_t a1)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v108 = type metadata accessor for TaskGesture();
  uint64_t v106 = *(void *)(v108 - 8);
  MEMORY[0x1F4188790](v108);
  long long v104 = &v85[-v5];
  uint64_t v110 = v4;
  uint64_t v112 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for TaskPhase();
  uint64_t v101 = type metadata accessor for AsyncStream.Continuation.BufferingPolicy();
  uint64_t v99 = *(void *)(v101 - 8);
  MEMORY[0x1F4188790](v101);
  long long v100 = &v85[-v8];
  uint64_t v107 = type metadata accessor for AsyncStream();
  uint64_t v105 = *(void *)(v107 - 8);
  MEMORY[0x1F4188790](v107);
  char v103 = &v85[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v102 = v9;
  MEMORY[0x1F4188790](v10);
  long long v109 = &v85[-v11];
  uint64_t v117 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v12);
  long long v113 = &v85[-v13];
  uint64_t v14 = type metadata accessor for GesturePhase();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  long long v111 = &v85[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v17);
  long long v115 = &v85[-v18];
  MEMORY[0x1F4188790](v19);
  uint64_t v121 = &v85[-v20];
  uint64_t v21 = type metadata accessor for Optional();
  uint64_t v118 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  long long v116 = &v85[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v23);
  unint64_t v120 = &v85[-v24];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v119 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v27 = &v85[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = &v85[-v29];
  swift_getWitnessTable();
  uint64_t result = ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    uint64_t v92 = AssociatedTypeWitness;
    uint64_t v114 = v7;
    uint64_t v98 = v21;
    uint64_t v96 = a1;
    uint64_t v32 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v97 = v1;
    uint64_t Value = AGGraphGetValue();
    char v35 = v34;
    uint64_t v36 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v15 + 16);
    v36(v30, Value, v14);
    v30[v32] = v35 & 1;
    uint64_t v37 = *(int *)(TupleTypeMetadata2 + 48);
    v36(v27, (uint64_t)v30, v14);
    v27[v37] = v35 & 1;
    long long v38 = *(unsigned char **)(v15 + 8);
    long long v94 = v27;
    ((void (*)(unsigned char *, uint64_t))v38)(v27, v14);
    if (v35)
    {
      uint64_t v90 = TupleTypeMetadata2;
      uint64_t v95 = v15 + 8;
      uint64_t v39 = v117;
      long long v40 = *(void (**)(unsigned char *, void, uint64_t, uint64_t))(v117 + 56);
      int v91 = 1;
      long long v41 = v120;
      uint64_t v87 = v40;
      v40(v120, 1, 1, v114);
      uint64_t v93 = v15 + 16;
      v36(v121, (uint64_t)v30, v14);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      long long v89 = v30;
      long long v43 = (uint64_t (*)(uint64_t, unsigned char *, uint64_t))v36;
      uint64_t v44 = v97;
      uint64_t v45 = v98;
      uint64_t v46 = v114;
      uint64_t v47 = v115;
      switch(EnumCaseMultiPayload)
      {
        case 1:
          int v86 = EnumCaseMultiPayload;
          (*(void (**)(unsigned char *, uint64_t))(v118 + 8))(v41, v98);
          uint64_t v50 = v44;
          uint64_t v51 = v111;
          v43((uint64_t)v111, v121, v14);
          uint64_t v52 = v51;
          uint64_t v44 = v50;
          (*(void (**)(unsigned char *, unsigned char *))(*(void *)(v92 - 8) + 32))(v41, v52);
          goto LABEL_10;
        case 2:
          int v86 = EnumCaseMultiPayload;
          (*(void (**)(unsigned char *, uint64_t))(v118 + 8))(v41, v98);
          uint64_t v53 = v44;
          uint64_t v54 = v111;
          v43((uint64_t)v111, v121, v14);
          uint64_t v55 = v54;
          uint64_t v44 = v53;
          (*(void (**)(unsigned char *, unsigned char *))(*(void *)(v92 - 8) + 32))(v41, v55);
          int v91 = 1;
          goto LABEL_11;
        case 3:
          goto LABEL_12;
        default:
          int v86 = EnumCaseMultiPayload;
          v43((uint64_t)v115, v121, v14);
          uint64_t v48 = v92;
          uint64_t v49 = *(void *)(v92 - 8);
          if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v92) == 1)
          {
            int v91 = 0;
            uint64_t v46 = v114;
          }
          else
          {
            uint64_t v56 = v120;
            (*(void (**)(unsigned char *, uint64_t))(v118 + 8))(v120, v45);
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v49 + 32))(v56, v47, v48);
            long long v41 = v56;
            uint64_t v39 = v117;
LABEL_10:
            int v91 = 0;
LABEL_11:
            uint64_t v46 = v114;
            swift_storeEnumTagMultiPayload();
            v87(v41, 0, 1, v46);
          }
LABEL_12:
          ((void (*)(unsigned char *, uint64_t))v38)(v121, v14);
          uint64_t v57 = v45;
          uint64_t v58 = v118;
          uint64_t v59 = v116;
          (*(void (**)(void))(v118 + 16))();
          int v60 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v39 + 48))(v59, 1, v46);
          uint64_t v88 = v43;
          if (v60 == 1)
          {
            (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v59, v57);
            uint64_t v61 = (uint64_t)v94;
          }
          else
          {
            uint64_t v62 = v59;
            uint64_t v63 = (uint64_t)v113;
            (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v39 + 32))(v113, v62, v46);
            if (!*(void *)(v44 + 16))
            {
              type metadata accessor for TaskGesturePhase.Handler();
              swift_allocObject();
              uint64_t v64 = TaskGesturePhase.Handler.init()();
              (*(void (**)(unsigned char *, void, uint64_t))(v99 + 104))(v100, *MEMORY[0x1E4FBD028], v101);
              swift_retain();
              uint64_t v65 = v109;
              AsyncStream.init(_:bufferingPolicy:_:)();
              uint64_t v121 = v38;
              uint64_t v66 = v104;
              TaskGesturePhase.gesture.getter((uint64_t)v104);
              uint64_t v67 = v108;
              uint64_t v68 = (uint64_t *)&v66[*(int *)(v108 + 36)];
              uint64_t v69 = v68[1];
              uint64_t v117 = *v68;
              uint64_t v70 = *(void (**)(unsigned char *, uint64_t))(v106 + 8);
              swift_retain();
              v70(v66, v67);
              uint64_t v71 = v105;
              uint64_t v72 = v103;
              uint64_t v73 = v65;
              uint64_t v74 = v107;
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v105 + 16))(v103, v73, v107);
              unint64_t v75 = (*(unsigned __int8 *)(v71 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
              int v76 = (void *)swift_allocObject();
              uint64_t v77 = v110;
              v76[2] = v112;
              v76[3] = v77;
              v76[4] = v117;
              v76[5] = v69;
              uint64_t v78 = (char *)v76 + v75;
              uint64_t v44 = v97;
              Swift::UInt v79 = v72;
              long long v38 = v121;
              (*(void (**)(char *, unsigned char *, uint64_t))(v71 + 32))(v78, v79, v74);
              swift_retain();
              static Update.enqueueAction(_:)();
              uint64_t v63 = (uint64_t)v113;
              swift_release();
              uint64_t v46 = v114;
              swift_release();
              (*(void (**)(unsigned char *, uint64_t))(v71 + 8))(v109, v74);
              swift_release();
              *(void *)(v44 + 16) = v64;
            }
            uint64_t v61 = (uint64_t)v94;
            swift_retain();
            TaskGesturePhase.Handler.enqueue(phase:)(v63);
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v63, v46);
          }
          uint64_t v80 = v90;
          if (v91)
          {
            if (*(void *)(v44 + 16))
            {
              TaskGesturePhase.Handler.invalidate()();
              swift_release();
            }
            *(void *)(v44 + 16) = 0;
          }
          uint64_t v81 = *(int *)(v80 + 48);
          char v82 = v89;
          uint64_t v83 = v88(v61, v89, v14);
          *(unsigned char *)(v61 + v81) = 1;
          MEMORY[0x1F4188790](v83);
          *(void *)&v85[-16] = v96;
          *(void *)&v85[-8] = swift_getWitnessTable();
          _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v61, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)&v85[-32], v14, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v84);
          (*(void (**)(unsigned char *, uint64_t))(v58 + 8))(v120, v98);
          (*(void (**)(unsigned char *, uint64_t))(v119 + 8))(v82, v80);
          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v38)(v61, v14);
          break;
      }
    }
    else
    {
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v119 + 8))(v30, TupleTypeMetadata2);
    }
  }
  return result;
}

uint64_t closure #2 in TaskGesturePhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a1;
  swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase();
  uint64_t v9 = type metadata accessor for AsyncStream();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v20 - v11;
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = 0;
  *((void *)v18 + 3) = 0;
  *((void *)v18 + 4) = a4;
  *((void *)v18 + 5) = a5;
  *((void *)v18 + 6) = v21;
  *((void *)v18 + 7) = a2;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v18[v17], v12, v9);
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v15, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in TaskGesturePhase.updateValue(), (uint64_t)v18);
  return swift_release();
}

uint64_t closure #1 in closure #2 in TaskGesturePhase.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = (uint64_t (*)(uint64_t))((char *)a4 + *a4);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v8;
  *uint64_t v8 = v6;
  v8[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v10(a6);
}

uint64_t TaskGesturePhase.resetPhase()()
{
  if (*(void *)(v0 + 16))
  {
    TaskGesturePhase.Handler.invalidate()();
    uint64_t result = swift_release();
  }
  *(void *)(v0 + 16) = 0;
  return result;
}

uint64_t static TaskGesturePhase.willRemove(attribute:)()
{
  return TaskGesturePhase.resetPhase()();
}

uint64_t protocol witness for ResettableGestureRule.phaseValue.getter in conformance TaskGesturePhase<A>()
{
  return MEMORY[0x1F40FFCE8]();
}

uint64_t protocol witness for ResettableGestureRule.resetSeed.getter in conformance TaskGesturePhase<A>()
{
  return SequencePhase.resetSeed.getter();
}

uint64_t protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance TaskGesturePhase<A>()
{
  return static TaskGesturePhase.willRemove(attribute:)();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance TaskGesturePhase<A>@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for GesturePhase();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t partial apply for closure #1 in static TaskGesture._makeGesture(gesture:inputs:)(uint64_t a1)
{
  return closure #1 in static TaskGesture._makeGesture(gesture:inputs:)(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for TaskGesturePhase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187D42358()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase();
  uint64_t v1 = type metadata accessor for AsyncStream.Continuation();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80)), v1);

  return swift_deallocObject();
}

void partial apply for closure #1 in TaskGesturePhase.Handler.invalidate()()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase();
  type metadata accessor for AsyncStream.Continuation();

  closure #1 in TaskGesturePhase.Handler.invalidate()();
}

uint64_t sub_187D424C0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in Gesture<>.values(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v6;
  *(void *)uint64_t v6 = v3;
  *(void *)(v6 + 8) = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  *(_OWORD *)(v6 + 32) = v7;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  return MEMORY[0x1F4188298](closure #2 in closure #1 in Gesture<>.values(_:), 0, 0);
}

uint64_t sub_187D42590()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in Gesture<>.values(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v2 + 16);
  *(void *)(v3 + 16) = v6;
  *(void *)uint64_t v6 = v3;
  *(void *)(v6 + 8) = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  *(_OWORD *)(v6 + 32) = v7;
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  return MEMORY[0x1F4188298](closure #1 in closure #1 in Gesture<>.values(_:), 0, 0);
}

uint64_t assignWithCopy for TaskGesturePhase(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TaskGesturePhase(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in TaskGesturePhase<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for StatefulRule in TaskGesturePhase<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D42734()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase();
  uint64_t v1 = type metadata accessor for AsyncStream();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in TaskGesturePhase.updateValue()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase();
  uint64_t v3 = *(void *)(type metadata accessor for AsyncStream() - 8);
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = (uint64_t)v0 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #2 in TaskGesturePhase.updateValue()(v4, v5, v6, v1, v2);
}

uint64_t sub_187D428DC()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase();
  uint64_t v1 = type metadata accessor for AsyncStream();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in TaskGesturePhase.updateValue()()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for TaskPhase();
  uint64_t v2 = *(void *)(type metadata accessor for AsyncStream() - 8);
  unint64_t v3 = *(int **)(v0 + 48);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  uint64_t v8 = (uint64_t (*)(uint64_t))((char *)v3 + *v3);
  uint64_t v6 = (void *)swift_task_alloc();
  v5[2] = v6;
  *uint64_t v6 = v5;
  v6[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v8(v4);
}

void PickerOption.init<A>(value:isAlternate:content:)()
{
}

void PickerOption.init<A, B>(_:value:isAlternate:)()
{
}

void PickerOption.init<>(_:value:isAlternate:)()
{
}

{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void PickerOption.init<A>(_:value:isAlternate:)()
{
}

{
  PickerOption.init<A, B>(_:value:isAlternate:)();
}

void PickerOption.init<>(_:_:isAlternate:)()
{
}

void PickerOption.init<A>(_:_:isAlternate:)()
{
}

{
  PickerOption.init<A, B>(_:value:isAlternate:)();
}

void PickerOption.init<A, B>(_:_:isAlternate:)()
{
}

void PickerOption.init(value:isAlternate:content:)()
{
}

void PickerOption.init(_:isAlternate:content:)()
{
}

void PickerOption.init<A>(_:isAlternate:content:)()
{
}

uint64_t destroy for DocumentIntroductionConfiguration(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(a1 + 24)) {
    swift_release();
  }
  if (*(void *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
    swift_bridgeObjectRelease();
  }
  swift_release();
  if (*(void *)(a1 + 80)) {
    swift_release();
  }
  if (*(void *)(a1 + 96)) {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DocumentIntroductionConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = (_OWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v7;
    swift_retain();
    uint64_t v8 = *(void *)(a2 + 64);
    if (v8)
    {
LABEL_3:
      uint64_t v9 = *(void *)(a2 + 40);
      uint64_t v10 = *(void *)(a2 + 48);
      char v11 = *(unsigned char *)(a2 + 56);
      outlined copy of Text.Storage(v9, v10, v11);
      *(void *)(a1 + 40) = v9;
      *(void *)(a1 + 48) = v10;
      *(unsigned char *)(a1 + 56) = v11;
      *(void *)(a1 + 64) = v8;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *v6;
    uint64_t v8 = *(void *)(a2 + 64);
    if (v8) {
      goto LABEL_3;
    }
  }
  long long v12 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v12;
LABEL_6:
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  if (v13)
  {
    uint64_t v14 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v13;
    *(void *)(a1 + 88) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  uint64_t v15 = *(void *)(a2 + 96);
  if (v15)
  {
    uint64_t v16 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v15;
    *(void *)(a1 + 104) = v16;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }
  uint64_t v17 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v17;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DocumentIntroductionConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v4)
    {
      uint64_t v5 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v4;
      *(void *)(a1 + 32) = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_8:
  uint64_t v7 = (_OWORD *)(a1 + 40);
  uint64_t v8 = (_OWORD *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 40);
      uint64_t v11 = *(void *)(a2 + 48);
      char v12 = *(unsigned char *)(a2 + 56);
      outlined copy of Text.Storage(v10, v11, v12);
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 48);
      char v15 = *(unsigned char *)(a1 + 56);
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 48) = v11;
      *(unsigned char *)(a1 + 56) = v12;
      outlined consume of Text.Storage(v13, v14, v15);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      long long v19 = *(_OWORD *)(a2 + 56);
      *uint64_t v7 = *v8;
      *(_OWORD *)(a1 + 56) = v19;
    }
  }
  else if (v9)
  {
    uint64_t v16 = *(void *)(a2 + 40);
    uint64_t v17 = *(void *)(a2 + 48);
    char v18 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v16, v17, v18);
    *(void *)(a1 + 40) = v16;
    *(void *)(a1 + 48) = v17;
    *(unsigned char *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 56);
    *uint64_t v7 = *v8;
    *(_OWORD *)(a1 + 56) = v20;
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  uint64_t v21 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v21)
    {
      uint64_t v22 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v21;
      *(void *)(a1 + 88) = v22;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v21)
  {
    uint64_t v23 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v21;
    *(void *)(a1 + 88) = v23;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_22:
  uint64_t v24 = *(void *)(a2 + 96);
  if (!*(void *)(a1 + 96))
  {
    if (v24)
    {
      uint64_t v26 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v24;
      *(void *)(a1 + 104) = v26;
      swift_retain();
      goto LABEL_29;
    }
LABEL_28:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_29;
  }
  if (!v24)
  {
    swift_release();
    goto LABEL_28;
  }
  uint64_t v25 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v24;
  *(void *)(a1 + 104) = v25;
  swift_retain();
  swift_release();
LABEL_29:
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  return a1;
}

uint64_t assignWithTake for DocumentIntroductionConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v5;
      *(void *)(a1 + 32) = v6;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v7;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_8:
  if (*(void *)(a1 + 64))
  {
    uint64_t v8 = *(void *)(a2 + 64);
    if (v8)
    {
      char v9 = *(unsigned char *)(a2 + 56);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      char v12 = *(unsigned char *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 64) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of Text(a1 + 40);
  }
  long long v13 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v13;
LABEL_13:
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  uint64_t v14 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v14;
      *(void *)(a1 + 88) = v15;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  else if (v14)
  {
    uint64_t v16 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v14;
    *(void *)(a1 + 88) = v16;
    goto LABEL_20;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_20:
  uint64_t v17 = *(void *)(a2 + 96);
  if (!*(void *)(a1 + 96))
  {
    if (v17)
    {
      uint64_t v19 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v17;
      *(void *)(a1 + 104) = v19;
      goto LABEL_27;
    }
LABEL_26:
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    goto LABEL_27;
  }
  if (!v17)
  {
    swift_release();
    goto LABEL_26;
  }
  uint64_t v18 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v17;
  *(void *)(a1 + 104) = v18;
  swift_release();
LABEL_27:
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  return a1;
}

ValueMetadata *type metadata accessor for DocumentIntroductionConfiguration()
{
  return &type metadata for DocumentIntroductionConfiguration;
}

UIContextMenuConfiguration_optional __swiftcall ListCollectionViewCellBase.outermostContextMenuConfiguration()()
{
  uint64_t v0 = (objc_class *)ListCollectionViewCellBase.outermostContextMenuConfiguration()((uint64_t (*)(void))ContextMenuBridge.outermostConfiguration());
  result.value.super.Class isa = v0;
  result.is_nil = v1;
  return result;
}

uint64_t ListCollectionViewCellBase.outermostContextMenuResponder.getter()
{
  return ListCollectionViewCellBase.outermostContextMenuConfiguration()(ContextMenuBridge.outermostContextMenuResponder.getter);
}

uint64_t ListCollectionViewCellBase.outermostContextMenuConfiguration()(uint64_t (*a1)(void))
{
  if (!*(void *)(v1 + direct field offset for ListCollectionViewCellBase.host)) {
    return 0;
  }
  id v3 = (id)specialized _UIHostingView.contextMenuBridge.getter();
  uint64_t v4 = a1();

  return v4;
}

uint64_t ListCollectionViewCellBase.swipeActions.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(void *)(v1 + direct field offset for ListCollectionViewCellBase.host))
  {
    specialized _UIHostingView.viewGraph.getter();
    type metadata accessor for SwipeActions.Value?();
    swift_retain();
    static Update.dispatchImmediately<A>(_:)();
    return swift_release();
  }
  else
  {
    _s7SwiftUI12SwipeActionsO5ValueVSgWOi0_((uint64_t)v4);
    return outlined init with take of SwipeActions.Value?((uint64_t)v4, a1);
  }
}

double ListCollectionViewCellBase.identifiedViews.getter@<D0>(uint64_t a1@<X8>)
{
  id v3 = *(void **)(v1 + direct field offset for ListCollectionViewCellBase.host);
  if (v3)
  {
    type metadata accessor for ModifiedContent();
    lazy protocol witness table accessor for type CollectionViewCellModifier and conformance CollectionViewCellModifier();
    id v4 = v3;
    swift_getWitnessTable();
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    ViewRendererHost.preferenceValue<A>(_:)();

    outlined init with take of _IdentifiedViewTree((uint64_t)v6, a1);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
  }
  return result;
}

uint64_t ListCollectionViewCellBase.responderNode.getter()
{
  if (!*(void *)(v0 + direct field offset for ListCollectionViewCellBase.host)) {
    return 0;
  }
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  uint64_t v1 = ViewGraph.responderNode.getter();
  swift_release();
  return v1;
}

uint64_t ListCollectionViewCellBase.secondaryNavigationBehavior.getter()
{
  uint64_t v1 = *(void *)(v0 + direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior);
  outlined copy of PlatformItemList.Item.SecondaryNavigationBehavior?(v1, *(void *)(v0 + direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior + 8));
  return v1;
}

void *ListCollectionViewCellBase.dragBridge.getter()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for ListCollectionViewCellBase.host);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void **)((char *)v1 + *(void *)((*v1 & *MEMORY[0x1E4FBC8C8]) + 0x100));
  id v3 = v2;
  return v2;
}

void __swiftcall ListCollectionViewCellBase.editMenuInteraction(_:menuFor:suggestedActions:)(UIMenu_optional *__return_ptr retstr, UIEditMenuInteraction _, UIEditMenuConfiguration *menuFor, Swift::OpaquePointer suggestedActions)
{
  uint64_t v8 = v4 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate;
  if (MEMORY[0x18C119DF0](v4 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate))
  {
    uint64_t v9 = *(void *)(v8 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(Class, UIEditMenuConfiguration *, void *, uint64_t, uint64_t))(v9 + 8))(_.super.isa, menuFor, suggestedActions._rawValue, ObjectType, v9);
    swift_unknownObjectRelease();
  }
}

__C::CGRect __swiftcall ListCollectionViewCellBase.editMenuInteraction(_:targetRectFor:)(UIEditMenuInteraction _, UIEditMenuConfiguration *targetRectFor)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate;
  if (MEMORY[0x18C119DF0](v2 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate))
  {
    uint64_t v6 = *(void *)(v5 + 8);
    uint64_t ObjectType = swift_getObjectType();
    double v8 = (*(double (**)(Class, UIEditMenuConfiguration *, uint64_t, uint64_t))(v6 + 16))(_.super.isa, targetRectFor, ObjectType, v6);
    double v10 = v9;
    double v12 = v11;
    double v14 = v13;
    swift_unknownObjectRelease();
  }
  else
  {
    double v12 = 0.0;
    double v14 = 0.0;
    double v8 = 0.0;
    double v10 = 0.0;
  }
  double v15 = v8;
  double v16 = v10;
  double v17 = v12;
  double v18 = v14;
  result.size.height = v18;
  result.size.width = v17;
  result.origin.double y = v16;
  result.origin.double x = v15;
  return result;
}

uint64_t ListCollectionViewCellBase.editMenuInteraction(_:willPresentMenuFor:animator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate;
  uint64_t result = MEMORY[0x18C119DF0](v3 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate);
  if (result)
  {
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 24))(a1, a2, a3, ObjectType, v9);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ListCollectionViewCellBase.editMenuInteraction(_:willDismissMenuFor:animator:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = v3 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate;
  uint64_t result = MEMORY[0x18C119DF0](v3 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_editMenuDelegate);
  if (result)
  {
    uint64_t v9 = *(void *)(v7 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 32))(a1, a2, a3, ObjectType, v9);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t ListCollectionViewCellBase.avoidOffScreenRendering.getter()
{
  static Semantics.v6.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0) {
    return 0;
  }
  uint64_t result = ListCollectionViewCellBase.backgroundHost.getter();
  if (result)
  {

    return 1;
  }
  return result;
}

void AnyListCollectionViewCell.explicitAlignment(of:at:)()
{
}

UIContextMenuConfiguration_optional __swiftcall AnyListCollectionViewCell.outermostContextMenuConfiguration()()
{
  uint64_t v0 = (objc_class *)_assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  result.value.super.Class isa = v0;
  result.is_nil = v1;
  return result;
}

void AnyListCollectionViewCell.outermostContextMenuResponder.getter()
{
}

void AnyListCollectionViewCell.swipeActions.getter()
{
}

void AnyListCollectionViewCell.identifiedViews.getter()
{
}

void AnyListCollectionViewCell.responderNode.getter()
{
}

void AnyListCollectionViewCell.secondaryNavigationBehavior.getter()
{
}

void AnyListCollectionViewCell.dragBridge.getter()
{
}

id AnyListCollectionViewCell.__deallocating_deinit(uint64_t a1)
{
  return AnyListCollectionViewCell.__deallocating_deinit(a1, type metadata accessor for AnyListCollectionViewCell);
}

id @objc ListCollectionViewCell.init(coder:)(void *a1, uint64_t a2, uint64_t a3)
{
  v5.receiver = a1;
  v5.super_class = (Class)type metadata accessor for ListCollectionViewCell();
  return objc_msgSendSuper2(&v5, sel_initWithCoder_, a3);
}

id ListCollectionViewCell.__deallocating_deinit()
{
  return AnyListCollectionViewCell.__deallocating_deinit(0, type metadata accessor for ListCollectionViewCell);
}

id AnyListCollectionViewCell.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t ObjC metadata update function for ListCollectionViewCell()
{
  return type metadata accessor for ListCollectionViewCell();
}

void ListCollectionViewCellBase.selectionBehavior.getter(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior);
  uint64_t v3 = *(void *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 8);
  uint64_t v4 = *(void *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 16);
  uint64_t v5 = *(void *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 24);
  uint64_t v6 = *(void *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 32);
  uint64_t v7 = *(void *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 40);
  uint64_t v8 = *(void *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 48);
  uint64_t v9 = *(void *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 56);
  char v10 = *(unsigned char *)(v1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 64);
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  *(unsigned char *)(a1 + 64) = v10;
  LOBYTE(v11) = v10;
  outlined copy of PlatformItemList.Item.SelectionBehavior?(v2, v3, v4, v5, v6, v7, v8, v9, v11, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
}

id @objc ListCollectionViewCellBase.focusEffect.getter(void *a1)
{
  id v1 = a1;
  id v2 = ListCollectionViewCellBase.focusEffect.getter();

  return v2;
}

id ListCollectionViewCellBase.focusEffect.getter()
{
  id v1 = (void *)ListCollectionViewCellBase.backgroundHost.getter();
  if (v1)
  {

    if (one-time initialization token for suppressFocusHaloWithBackground != -1) {
      swift_once();
    }
    if (suppressFocusHaloWithBackground) {
      return 0;
    }
  }
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for ListCollectionViewCellBase();
  return objc_msgSendSuper2(&v3, sel_focusEffect);
}

void @objc ListCollectionViewCellBase.focusEffect.setter(void *a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  id v5 = a1;
  specialized ListCollectionViewCellBase.focusEffect.setter((uint64_t)a3);
}

id ListCollectionViewCellBase.init(coder:)(void *a1)
{
  v1[direct field offset for ListCollectionViewCellBase.wasEditing] = 0;
  v1[direct field offset for ListCollectionViewCellBase.wasSwiped] = 0;
  objc_super v3 = &v1[direct field offset for ListCollectionViewCellBase.cellHostWidth];
  *(void *)objc_super v3 = 0;
  v3[8] = 1;
  uint64_t v4 = &v1[direct field offset for ListCollectionViewCellBase.lastConfiguration];
  uint64_t v5 = type metadata accessor for UIListContentConfiguration();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v1[direct field offset for ListCollectionViewCellBase.shouldHugContent] = 0;
  id v6 = &v1[direct field offset for ListCollectionViewCellBase.viewListID];
  *id v6 = 0;
  v6[1] = 0;
  uint64_t v7 = &v1[direct field offset for ListCollectionViewCellBase.selectionBehavior];
  v7[64] = 0;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *(_OWORD *)uint64_t v7 = xmmword_18834BB90;
  *((_OWORD *)v7 + 1) = 0u;
  uint64_t v8 = &v1[direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior];
  *uint64_t v8 = 1;
  v8[1] = 0;
  _OWORD v8[2] = 0;
  *(_DWORD *)&v1[direct field offset for ListCollectionViewCellBase.popUpButtonSeed] = -1;
  *(void *)&v1[direct field offset for ListCollectionViewCellBase.host] = 0;
  v11.receiver = v1;
  v11.super_class = (Class)type metadata accessor for ListCollectionViewCellBase();
  id v9 = objc_msgSendSuper2(&v11, sel_initWithCoder_, a1);

  return v9;
}

id @objc ListCollectionViewCellBase.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return ListCollectionViewCellBase.init(coder:)(a3);
}

uint64_t @objc ListCollectionViewCellBase.canBecomeFocused.getter(void *a1)
{
  id v1 = a1;
  unsigned __int8 v2 = ListCollectionViewCellBase.canBecomeFocused.getter();

  return v2 & 1;
}

id ListCollectionViewCellBase.canBecomeFocused.getter()
{
  id v1 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL);
  Class v2 = NSClassFromString(v1);

  if (v2
    && objc_msgSend(v0, sel_respondsToSelector_, sel__accessibilityIsFKARunningForFocusItem)
    && (objc_msgSend(v0, sel__accessibilityIsFKARunningForFocusItem) & 1) != 0)
  {
    return 0;
  }
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for ListCollectionViewCellBase();
  return objc_msgSendSuper2(&v4, sel_canBecomeFocused);
}

uint64_t @objc ListCollectionViewCellBase.isAccessibilityElement.getter()
{
  return 0;
}

id @objc ListCollectionViewCellBase.editMenuInteraction(_:menuFor:suggestedActions:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a4;
  id v10 = a1;
  ListCollectionViewCellBase.editMenuInteraction(_:menuFor:suggestedActions:)(v11, (UIEditMenuInteraction)v8, v9, (Swift::OpaquePointer)v7);
  double v13 = v12;

  swift_bridgeObjectRelease();

  return v13;
}

double @objc ListCollectionViewCellBase.editMenuInteraction(_:targetRectFor:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  uint64_t v7 = a4;
  id v8 = a1;
  *(void *)&double v9 = (unint64_t)ListCollectionViewCellBase.editMenuInteraction(_:targetRectFor:)((UIEditMenuInteraction)v6, v7);

  return v9;
}

void @objc ListCollectionViewCellBase.editMenuInteraction(_:willPresentMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
}

void @objc ListCollectionViewCellBase.editMenuInteraction(_:willDismissMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
}

void @objc ListCollectionViewCellBase.editMenuInteraction(_:willPresentMenuFor:animator:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id, id, uint64_t))
{
  id v10 = a3;
  id v11 = a4;
  swift_unknownObjectRetain();
  id v12 = a1;
  a6(v10, v11, a5);

  swift_unknownObjectRelease();
}

uint64_t closure #1 in ListCollectionViewCellBase.hostingView<A>(_:didChangePlatformItemList:)(void *a1, char a2)
{
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *a1;
  uint64_t v5 = (char *)a1 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_selectionDelegate;
  uint64_t result = MEMORY[0x18C119DF0]((char *)a1 + OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_selectionDelegate);
  if (result)
  {
    uint64_t v7 = *((void *)v5 + 1);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, void, void, void, uint64_t, uint64_t))(v7 + 8))(a1, a2 & 1, *(void *)(v4 + 168), *(void *)(v4 + 176), ObjectType, v7);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ListCollectionViewCellBase.removeFromSuperview()()
{
  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8);
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xB0);
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for ListCollectionViewCellBase();
  objc_msgSendSuper2(&v5, sel_removeFromSuperview);
  uint64_t v3 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v4 = (void *)swift_allocObject();
  void v4[2] = v1;
  void v4[3] = v2;
  void v4[4] = v3;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
}

void closure #1 in ListCollectionViewCellBase.removeFromSuperview()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (char *)MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    uint64_t v3 = v2;
    uint64_t v4 = *(void **)&v2[direct field offset for ListCollectionViewCellBase.host];
    if (v4)
    {
      id v5 = v4;

      _UIHostingView.base.getter();
      UIHostingViewBase.updateRemovedState(uiView:)(0);
      swift_release();
    }
    else
    {
    }
  }
}

void @objc ListCollectionViewCellBase.removeFromSuperview()(void *a1)
{
  id v1 = a1;
  ListCollectionViewCellBase.removeFromSuperview()();
}

uint64_t ListCollectionViewCellBase.canUpdateSwipeActionPresentationBinding.getter()
{
  ListCollectionViewCellBase.swipeActions.getter((uint64_t)v31);
  outlined init with take of SwipeActions.Value?((uint64_t)v31, (uint64_t)v45);
  outlined init with take of SwipeActions.Value?((uint64_t)v45, (uint64_t)&v46);
  if (_s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)&v46) != 1)
  {
    uint64_t v0 = v49;
    uint64_t v1 = v50;
    uint64_t v2 = v51;
    uint64_t v3 = v52;
    uint64_t v4 = v55;
    uint64_t v5 = v56;
    uint64_t v6 = v57;
    uint64_t v7 = v58;
    uint64_t v20 = v54;
    uint64_t v21 = v53;
    uint64_t v25 = v47;
    uint64_t v27 = v46;
    uint64_t v23 = v48;
    outlined copy of SwipeActions.Configuration?(v46, v47, v48, v49, v50, v51, v52, v53, v54, v55, v56, v57, v58);
    outlined release of SwipeActions.Value?(v45);
    if (v0)
    {
      outlined copy of Binding<NavigationSplitViewColumn>?(v1, v2);
      outlined consume of SwipeActions.Configuration?(v27, v25, v23, v0, v1, v2, v3, v21, v20, v4, v5, v6, v7);
      if (v2)
      {
        uint64_t v8 = v1;
        uint64_t v9 = v2;
LABEL_9:
        outlined consume of Binding<NavigationSplitViewColumn>?(v8, v9);
        return 1;
      }
    }
  }
  ListCollectionViewCellBase.swipeActions.getter((uint64_t)v29);
  outlined init with take of SwipeActions.Value?((uint64_t)v29, (uint64_t)v30);
  outlined init with take of SwipeActions.Value?((uint64_t)v30, (uint64_t)v31);
  if (_s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)v31) != 1)
  {
    uint64_t v10 = v35;
    uint64_t v11 = v36;
    uint64_t v12 = v37;
    uint64_t v13 = v38;
    uint64_t v14 = v40;
    uint64_t v15 = v41;
    uint64_t v16 = v42;
    uint64_t v17 = v43;
    uint64_t v18 = v44;
    uint64_t v26 = v33;
    uint64_t v28 = v32;
    uint64_t v22 = v39;
    uint64_t v24 = v34;
    outlined copy of SwipeActions.Configuration?(v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
    outlined release of SwipeActions.Value?(v30);
    if (v10)
    {
      outlined copy of Binding<NavigationSplitViewColumn>?(v11, v12);
      outlined consume of SwipeActions.Configuration?(v28, v26, v24, v10, v11, v12, v13, v22, v14, v15, v16, v17, v18);
      if (v12)
      {
        uint64_t v8 = v11;
        uint64_t v9 = v12;
        goto LABEL_9;
      }
    }
  }
  return 0;
}

void @objc ListCollectionViewCellBase.didUpdateFocus(in:with:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  ListCollectionViewCellBase.didUpdateFocus(in:with:)((UIFocusUpdateContext)v6, (UIFocusAnimationCoordinator)v7);
}

uint64_t @objc ListCollectionViewCellBase._disableRasterizeInAnimations()(void *a1)
{
  id v1 = a1;
  char v2 = ListCollectionViewCellBase._disableRasterizeInAnimations()((SEL *)&selRef__disableRasterizeInAnimations);

  return v2 & 1;
}

uint64_t ListCollectionViewCellBase._disableRasterizeInAnimations()(SEL *a1)
{
  if (ListCollectionViewCellBase.avoidOffScreenRendering.getter()) {
    return 1;
  }
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for ListCollectionViewCellBase();
  return (uint64_t)objc_msgSendSuper2(&v4, *a1);
}

uint64_t @objc ListCollectionViewCellBase._disableGroupOpacityInAnimations()(void *a1)
{
  id v1 = a1;
  char v2 = ListCollectionViewCellBase._disableRasterizeInAnimations()((SEL *)&selRef__disableGroupOpacityInAnimations);

  return v2 & 1;
}

void ListCollectionViewCellBase.__ivar_destroyer()
{
  _s7SwiftUI16PlatformItemListV0D0VWOhTm_1(v0 + direct field offset for ListCollectionViewCellBase.lastConfiguration, (uint64_t (*)(void))type metadata accessor for UIListContentConfiguration?);
  swift_bridgeObjectRelease();
  LOBYTE(v2) = *(unsigned char *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 64);
  outlined copy of PlatformItemList.Item.SelectionBehavior?(*(void *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior), *(void *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 8), *(void *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 16), *(void *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 24), *(void *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 32), *(void *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 40), *(void *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 48), *(void *)(v0 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 56), v2, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of PlatformItemList.Item.SecondaryNavigationBehavior?(*(void *)(v0 + direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior), *(void *)(v0 + direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior + 8));
  id v1 = *(void **)(v0 + direct field offset for ListCollectionViewCellBase.host);
}

id ListCollectionViewCellBase.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ListCollectionViewCellBase();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void @objc ListCollectionViewCellBase.__ivar_destroyer(uint64_t a1)
{
  _s7SwiftUI16PlatformItemListV0D0VWOhTm_1(a1 + direct field offset for ListCollectionViewCellBase.lastConfiguration, (uint64_t (*)(void))type metadata accessor for UIListContentConfiguration?);
  swift_bridgeObjectRelease();
  LOBYTE(v3) = *(unsigned char *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 64);
  outlined copy of PlatformItemList.Item.SelectionBehavior?(*(void *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior), *(void *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 8), *(void *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 16), *(void *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 24), *(void *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 32), *(void *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 40), *(void *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 48), *(void *)(a1 + direct field offset for ListCollectionViewCellBase.selectionBehavior + 56), v3, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined consume of PlatformItemList.Item.SecondaryNavigationBehavior?(*(void *)(a1 + direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior), *(void *)(a1 + direct field offset for ListCollectionViewCellBase._secondaryNavigationBehavior + 8));
  objc_super v2 = *(void **)(a1 + direct field offset for ListCollectionViewCellBase.host);
}

uint64_t one-time initialization function for suppressFocusHaloWithBackground()
{
  uint64_t result = closure #1 in variable initialization expression of suppressFocusHaloWithBackground();
  suppressFocusHaloWithBackground = result & 1;
  return result;
}

uint64_t closure #1 in variable initialization expression of suppressFocusHaloWithBackground()
{
  id v0 = objc_msgSend(self, sel_mainBundle);
  id v1 = objc_msgSend(v0, sel_bundleIdentifier);

  if (!v1) {
    return 0;
  }
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  if (v2 == 0xD000000000000011 && v4 == 0x8000000188338D60)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    return v6 & 1;
  }
}

uint64_t sub_187D44E30()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ListCollectionViewCellBase.hostingView<A>(_:didChangePlatformItemList:)()
{
  return closure #1 in ListCollectionViewCellBase.hostingView<A>(_:didChangePlatformItemList:)(*(void **)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t sub_187D44E78()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in ListCollectionViewCellBase.updateConfiguration(using:)()
{
}

uint64_t sub_187D44ED4()
{
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for SwipeActions.Value?()
{
  if (!lazy cache variable for type metadata for SwipeActions.Value?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SwipeActions.Value?);
    }
  }
}

uint64_t sub_187D44F64()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187D44F9C()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in ListCollectionViewCellBase.removeFromSuperview()()
{
  closure #1 in ListCollectionViewCellBase.removeFromSuperview()(*(void *)(v0 + 32));
}

id specialized ListCollectionViewCellBase.focusEffect.setter(uint64_t a1)
{
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for ListCollectionViewCellBase();
  return objc_msgSendSuper2(&v4, sel_setFocusEffect_, a1);
}

void __swiftcall InsetTableStyle.init(alternatesRowBackgrounds:)(Swift::Bool alternatesRowBackgrounds)
{
}

uint64_t InsetTableStyle.makeBody(configuration:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[12];
  uint64_t v9 = a1[13];
  uint64_t v10 = a1[14];
  uint64_t v13 = v4;
  uint64_t v14 = v5;
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  uint64_t v18 = v9;
  uint64_t v19 = v10;
  outlined init with copy of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)v12, a2, (uint64_t (*)(void))type metadata accessor for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>);
  outlined copy of Binding<[SwiftUIAnySortComparator]>?(v4, v5);
  outlined copy of Binding<AnyTableColumnCustomization>?(v7, v8);
  return outlined destroy of CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>((uint64_t)v12);
}

void type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?()
{
  if (!lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>?)
  {
    type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<SelectionManagerBox<AnyHashable>>?);
    }
  }
}

uint64_t outlined init with copy of Binding<SelectionManagerBox<AnyHashable>>?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>()
{
  if (!lazy cache variable for type metadata for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>)
  {
    unint64_t v0 = type metadata accessor for CollectionViewTableRoot();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>);
    }
  }
}

uint64_t outlined destroy of CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>(uint64_t a1)
{
  type metadata accessor for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t associated type witness table accessor for TableStyle.Body : View in InsetTableStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for TableStyle.makeBody(configuration:) in conformance InsetTableStyle@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)a1, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?);
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[12];
  uint64_t v9 = a1[13];
  uint64_t v10 = a1[14];
  uint64_t v13 = v4;
  uint64_t v14 = v5;
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  uint64_t v18 = v9;
  uint64_t v19 = v10;
  outlined init with copy of Binding<SelectionManagerBox<AnyHashable>>?((uint64_t)v12, a2, (uint64_t (*)(void))type metadata accessor for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>);
  outlined copy of Binding<[SwiftUIAnySortComparator]>?(v4, v5);
  outlined copy of Binding<AnyTableColumnCustomization>?(v7, v8);
  return outlined destroy of CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>((uint64_t)v12);
}

ValueMetadata *type metadata accessor for InsetTableStyle()
{
  return &type metadata for InsetTableStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier>)
  {
    type metadata accessor for CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<CollectionViewTableRoot<Never, TableStyleConfiguration.RowsAlias, TableStyleConfiguration.ColumnsAlias>, TableShowsFirstColumnOnlyModifier>);
    }
  }
}

double TableShowsFirstColumnOnlyModifier.Child.value.getter@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v5 = Value[1];
  *(void *)&long long v7 = *Value;
  *((void *)&v7 + 1) = v5;
  if ((a1 & 0x100000000) != 0)
  {
    type metadata accessor for SelectionManagerBox<AnyHashable>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey>, (uint64_t)&unk_1ED454870, (uint64_t)&protocol witness table for TableShowsFirstColumnOnlyKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    EnvironmentValues.horizontalSizeClass.getter();
    type metadata accessor for SelectionManagerBox<AnyHashable>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey>, (uint64_t)&unk_1ED454870, (uint64_t)&protocol witness table for TableShowsFirstColumnOnlyKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>();
  }
  swift_retain();
  PropertyList.subscript.setter();
  if (v5)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  double result = *(double *)&v7;
  *a2 = v7;
  return result;
}

uint64_t EnvironmentValues.tableShowsFirstColumnOnly.setter()
{
  type metadata accessor for SelectionManagerBox<AnyHashable>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey>, (uint64_t)&unk_1ED454870, (uint64_t)&protocol witness table for TableShowsFirstColumnOnlyKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

double protocol witness for Rule.value.getter in conformance TableShowsFirstColumnOnlyModifier.Child@<D0>(_OWORD *a1@<X8>)
{
  uint64_t v2 = 0x100000000;
  if (!*((unsigned char *)v1 + 4)) {
    uint64_t v2 = 0;
  }
  return TableShowsFirstColumnOnlyModifier.Child.value.getter(v2 | *v1, a1);
}

_UNKNOWN **base witness table accessor for ViewModifier in TableShowsFirstColumnOnlyModifier()
{
  return &protocol witness table for TableShowsFirstColumnOnlyModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TableShowsFirstColumnOnlyModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, long long *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v7[2] = *(_OWORD *)(a2 + 32);
  _DWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TableShowsFirstColumnOnlyModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, long long *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v7[2] = *(_OWORD *)(a2 + 32);
  _DWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance TableShowsFirstColumnOnlyModifier()
{
}

void type metadata accessor for SelectionManagerBox<AnyHashable>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for SelectionManagerBox<AnyHashable>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey>, (uint64_t)&unk_1ED454870, (uint64_t)&protocol witness table for TableShowsFirstColumnOnlyKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues.tableShowsFirstColumnOnly.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for SelectionManagerBox<AnyHashable>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey>, (uint64_t)&unk_1ED454870, (uint64_t)&protocol witness table for TableShowsFirstColumnOnlyKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for SelectionManagerBox<AnyHashable>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey>, (uint64_t)&unk_1ED454870, (uint64_t)&protocol witness table for TableShowsFirstColumnOnlyKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<TableShowsFirstColumnOnlyKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t specialized static TableShowsFirstColumnOnlyModifier._makeInputs(modifier:inputs:)()
{
  return _GraphInputs.environment.setter();
}

ValueMetadata *type metadata accessor for TableShowsFirstColumnOnlyModifier.Child()
{
  return &type metadata for TableShowsFirstColumnOnlyModifier.Child;
}

void *type metadata accessor for TableShowsFirstColumnOnlyKey()
{
  return &unk_1ED454870;
}

void ImmersiveSpaceViewContent.body.getter()
{
}

void ImmersiveSpaceViewContent._makeView()()
{
}

_UNKNOWN **associated type witness table accessor for ImmersiveSpaceContent.Body : ImmersiveSpaceContent in ImmersiveSpaceViewContent<A>()
{
  return &protocol witness table for Never;
}

uint64_t getEnumTagSinglePayload for ImmersiveSpaceViewContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ImmersiveSpaceViewContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187D45FA0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for ImmersiveSpaceViewContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t __designTimeSelection<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t __designTimeSelection<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v8[0] = a2;
  v8[1] = a3;
  lazy protocol witness table accessor for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier();
  return View._identified<A>(by:)((uint64_t)v8, a4, (uint64_t)&type metadata for __DesignTimeSelectionIdentifier, a5);
}

uint64_t sub_187D460D0()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _IdentifiedModifier<__DesignTimeSelectionIdentifier>()
{
  if (!lazy cache variable for type metadata for _IdentifiedModifier<__DesignTimeSelectionIdentifier>)
  {
    lazy protocol witness table accessor for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier();
    unint64_t v0 = type metadata accessor for _IdentifiedModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _IdentifiedModifier<__DesignTimeSelectionIdentifier>);
    }
  }
}

ValueMetadata *type metadata accessor for AnyButtonStyleType.Unknown()
{
  return &type metadata for AnyButtonStyleType.Unknown;
}

ValueMetadata *type metadata accessor for EffectiveButtonStyle()
{
  return &type metadata for EffectiveButtonStyle;
}

BOOL AnyButtonStyleType.isTopLevelStyle.getter(ValueMetadata *a1)
{
  if (a1 == &type metadata for DefaultButtonStyle) {
    return 1;
  }
  lazy protocol witness table accessor for type BorderedButtonStyle and conformance BorderedButtonStyle();
  if (a1 == &type metadata for BorderedButtonStyle) {
    return 1;
  }
  lazy protocol witness table accessor for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle();
  if (a1 == &type metadata for BorderedProminentButtonStyle) {
    return 1;
  }
  lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle();
  if (a1 == &type metadata for PlainButtonStyle) {
    return 1;
  }
  lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle();
  return a1 == &type metadata for BorderlessButtonStyle;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance EffectiveButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized static EffectiveButtonStyle._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5, (void (*)(void))lazy protocol witness table accessor for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput, (uint64_t)&type metadata for EffectiveButtonStyleInput, (void (*)(uint64_t))lazy protocol witness table accessor for type EffectiveButtonStyle.Box and conformance EffectiveButtonStyle.Box);
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in AnyButtonStyleType.Unknown()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for DynamicPropertyBox.update(property:phase:) in conformance CurrentButtonStyle.Box(_OWORD *a1)
{
  *a1 = *v1;
  return 0;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance CurrentButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized static EffectiveButtonStyle._makeProperty<A>(in:container:fieldOffset:inputs:)(a1, a3, a4, a5, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleInput and conformance ButtonStyleInput, (uint64_t)&type metadata for ButtonStyleInput, (void (*)(uint64_t))lazy protocol witness table accessor for type CurrentButtonStyle.Box and conformance CurrentButtonStyle.Box);
}

void protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance AnyButtonStyleType.Unknown()
{
}

unint64_t lazy protocol witness table accessor for type EffectiveButtonStyle.Box and conformance EffectiveButtonStyle.Box()
{
  unint64_t result = lazy protocol witness table cache variable for type EffectiveButtonStyle.Box and conformance EffectiveButtonStyle.Box;
  if (!lazy protocol witness table cache variable for type EffectiveButtonStyle.Box and conformance EffectiveButtonStyle.Box)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EffectiveButtonStyle.Box and conformance EffectiveButtonStyle.Box);
  }
  return result;
}

void *type metadata accessor for EffectiveButtonStyle.Box()
{
  return &unk_1ED4308E0;
}

ValueMetadata *type metadata accessor for CurrentButtonStyle()
{
  return &type metadata for CurrentButtonStyle;
}

uint64_t sub_187D463F0()
{
  return MEMORY[0x1E4F418E8];
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in EffectiveButtonStyle.Box()
{
  return &protocol witness table for EffectiveButtonStyle;
}

uint64_t specialized static EffectiveButtonStyle._makeProperty<A>(in:container:fieldOffset:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6, void (*a7)(uint64_t))
{
  a5();
  uint64_t v8 = PropertyList.subscript.getter();
  a7(v8);
  return _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
}

unint64_t lazy protocol witness table accessor for type CurrentButtonStyle.Box and conformance CurrentButtonStyle.Box()
{
  unint64_t result = lazy protocol witness table cache variable for type CurrentButtonStyle.Box and conformance CurrentButtonStyle.Box;
  if (!lazy protocol witness table cache variable for type CurrentButtonStyle.Box and conformance CurrentButtonStyle.Box)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CurrentButtonStyle.Box and conformance CurrentButtonStyle.Box);
  }
  return result;
}

void *type metadata accessor for CurrentButtonStyle.Box()
{
  return &unk_1ED487490;
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in CurrentButtonStyle.Box()
{
  return &protocol witness table for CurrentButtonStyle;
}

ValueMetadata *type metadata accessor for KitCoreUINamedColorProvider()
{
  return &type metadata for KitCoreUINamedColorProvider;
}

id specialized static KitCoreUINamedColorProvider.effectiveCGColor(cuiColor:in:)(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2[1];
  id result = objc_msgSend(a1, sel_systemColorName);
  if (result)
  {
    unsigned int v5 = result;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = Selector.init(_:)();
    type metadata accessor for UIColor();
    ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
    id v8 = 0;
    if (!objc_msgSend(ObjCClassFromMetadata, sel_respondsToSelector_, v6)) {
      return v8;
    }
    BOOL v9 = self;
    id v10 = objc_msgSend(v9, sel_currentTraitCollection);
    uint64_t v18 = v2;
    uint64_t v19 = v3;
    int v17 = 0;
    uint64_t v14 = 0;
    char v15 = 0;
    int v16 = 0;
    int v11 = (void *)EnvironmentValues.resolvedTraitCollection(viewPhase:focusedValues:)(&v17, &v14);
    objc_msgSend(v9, sel_setCurrentTraitCollection_, v11);

    id v12 = objc_msgSend(ObjCClassFromMetadata, sel_performSelector_, v6);
    id result = ObjCClassFromMetadata;
    if (v12)
    {
      swift_unknownObjectRetain();
      self;
      int v13 = (void *)swift_dynamicCastObjCClassUnconditional();
      id v8 = objc_msgSend(v13, sel_CGColor);

      objc_msgSend(v9, sel_setCurrentTraitCollection_, v10);
      return v8;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t PickerStyleConfiguration.$selection.getter()
{
  type metadata accessor for Binding();

  return Binding.projectedValue.getter();
}

uint64_t ResolvedPicker.init(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PickerStyleConfiguration();
  unsigned int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t View.pickerStyle<A, B>(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v39 = a6;
  uint64_t v35 = a2;
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v38 = a3;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v33 = a1;
  uint64_t v34 = v10;
  MEMORY[0x1F4188790](a1);
  uint64_t v32 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v14);
  int v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for PickerStyleWriter();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v31 - v19;
  uint64_t v21 = type metadata accessor for StyleContextAcceptsPredicate();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v42 = v21;
  uint64_t v43 = v17;
  uint64_t v44 = MEMORY[0x1E4F3F740];
  uint64_t v45 = WitnessTable;
  uint64_t v23 = type metadata accessor for StaticIf();
  uint64_t v24 = *(void *)(v23 - 8);
  double v25 = MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v31 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v33, a4, v25);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v20, v16, a4);
  uint64_t v28 = v34;
  uint64_t v29 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v32, v35, a5);
  uint64_t v41 = a5;
  uint64_t v42 = (uint64_t)v29;
  uint64_t v40 = v36;
  ViewModifier.requiring<A>(_:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, a5);
  MEMORY[0x18C113660](v27, v38, v23, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v27, v23);
}

uint64_t View.pickerStyle<A, B>(_:if:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v25 = a7;
  uint64_t v26 = a2;
  uint64_t v24 = a1;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PickerStyleWriter();
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v28 = a3;
  uint64_t v29 = v16;
  uint64_t v30 = MEMORY[0x1E4F3F740];
  uint64_t v31 = a6;
  uint64_t v17 = type metadata accessor for StaticIf();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v23 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v24, a4, v19);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v12, a4);
  StaticIf<>.init<>(_:then:)();
  MEMORY[0x18C113660](v21, v26, v17, v27);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v17);
}

void protocol witness for View.body.getter in conformance PickerStyleConfiguration<A>.Label()
{
}

void protocol witness for View.body.getter in conformance PickerStyleConfiguration<A>.Content()
{
}

void protocol witness for View.body.getter in conformance PickerStyleConfiguration<A>.CurrentValueLabel()
{
}

uint64_t PickerStyleConfiguration.selectedBoundIndices(children:)(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *(void *)(v2 + *(int *)(a2 + 36));
  v10[1] = *(_OWORD *)(a2 + 16);
  uint64_t v11 = a1;
  type metadata accessor for Binding();
  uint64_t v3 = type metadata accessor for Array();
  type metadata accessor for Binding<Int?>();
  uint64_t v5 = v4;
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in PickerStyleConfiguration.selectedBoundIndices(children:), (uint64_t)v10, v3, v5, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t PickerStyleConfiguration.init(selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PickerStyleConfiguration();
  *(unsigned char *)(a2 + *(int *)(v4 + 40)) = 1;
  type metadata accessor for Binding();
  type metadata accessor for Array();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t result = Binding.init<A>(flattening:)();
  *(void *)(a2 + *(int *)(v4 + 36)) = a1;
  return result;
}

uint64_t _PickerValue.selection.getter()
{
  return Binding.projectedValue.getter();
}

uint64_t _PickerValue.Init1.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ResolvedPicker();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t _PickerValue.init(style:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = a4 + *(int *)(type metadata accessor for _PickerValue() + 52);
  uint64_t v7 = type metadata accessor for PickerStyleConfiguration();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, a2, v7);
}

uint64_t _PickerValue.Init2.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ResolvedPicker();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t _PickerValue.Init2.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  v17[0] = a3;
  v17[1] = a2;
  uint64_t v4 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v17 - v6;
  uint64_t v8 = type metadata accessor for ResolvedPicker();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v17 - v9;
  uint64_t v11 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, Value, a1);
  _PickerValue.Init2.base.getter((uint64_t)v10);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  return _PickerValue.init(style:configuration:)((uint64_t)v14, (uint64_t)v7, a1, v17[0]);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance _PickerValue<A, B>.Init1@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _PickerValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance _PickerValue<A, B>.Init2@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return _PickerValue.Init2.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 32), a2);
}

uint64_t closure #1 in static PickerStyleWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2)
{
  void v7[2] = type metadata accessor for PickerStyleWriter();
  _DWORD v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PickerStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for PickerStyleWriter<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance PickerStyleWriter<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t static ResolvedPicker._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5 = *a1;
  uint64_t v6 = *(void *)a2;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  int v10 = *(_DWORD *)(a2 + 24);
  int v9 = *(_DWORD *)(a2 + 28);
  int v11 = *(_DWORD *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  int v16 = *(_DWORD *)(a2 + 36);
  int v17 = *(_DWORD *)(a2 + 56);
  int v18 = *(_DWORD *)(a2 + 60);
  int v19 = *(_DWORD *)(a2 + 64);
  int v20 = *(_DWORD *)(a2 + 68);
  int v21 = *(_DWORD *)(a2 + 72);
  int v22 = *(_DWORD *)(a2 + 76);
  int v23 = *(_DWORD *)(a2 + 80);
  lazy protocol witness table accessor for type PickerStyleInput and conformance PickerStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v27)
  {
    uint64_t v14 = v28;
    v43[0] = v5;
    uint64_t v27 = v6;
    LODWORD(v28) = v7;
    uint64_t v29 = v8;
    int v30 = v10;
    int v31 = v9;
    int v32 = v11;
    int v33 = v16;
    uint64_t v34 = v12;
    uint64_t v35 = v13;
    int v36 = v17;
    int v37 = v18;
    int v38 = v19;
    int v39 = v20;
    int v40 = v21;
    int v41 = v22;
    int v42 = v23;
    return (*(uint64_t (**)(int *))(v14 + 8))(v43);
  }
  else
  {
    v43[0] = v5;
    uint64_t v27 = v6;
    LODWORD(v28) = v7;
    uint64_t v29 = v8;
    int v30 = v10;
    int v31 = v9;
    int v32 = v11;
    int v33 = v16;
    uint64_t v34 = v12;
    uint64_t v35 = v13;
    int v36 = v17;
    int v37 = v18;
    int v38 = v19;
    int v39 = v20;
    int v40 = v21;
    int v41 = v22;
    int v42 = v23;
    return static ResolvedPicker.makeView<A>(view:style:inputs:)(v43, 0, &v27, a3, (uint64_t)&type metadata for DefaultPickerStyle, a4, (uint64_t)&protocol witness table for DefaultPickerStyle, a5);
  }
}

uint64_t static ResolvedPicker.makeView<A>(view:style:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v36 = a2;
  int v40 = a1;
  uint64_t v41 = a8;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = v17;
  uint64_t v43 = v16;
  uint64_t v44 = v19;
  uint64_t v45 = v18;
  uint64_t v20 = type metadata accessor for _PickerValue.Init1();
  uint64_t v34 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  int v22 = (char *)&v33 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v33 - v24;
  int v26 = *v40;
  uint64_t v39 = *a3;
  int v38 = *((_DWORD *)a3 + 2);
  uint64_t v37 = a3[2];
  LODWORD(v40) = *((_DWORD *)a3 + 20);
  LODWORD(v42) = v26;
  type metadata accessor for ResolvedPicker();
  type metadata accessor for _GraphValue();
  long long v35 = *(_OWORD *)(a3 + 5);
  uint64_t v27 = a3[3];
  uint64_t v28 = a3[4];
  long long v33 = *(_OWORD *)(a3 + 7);
  uint64_t v29 = a3[9];
  LODWORD(a3) = _GraphValue.value.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v36, a5);
  *(_DWORD *)uint64_t v25 = a3;
  uint64_t v42 = a5;
  uint64_t v43 = a4;
  uint64_t v44 = a7;
  uint64_t v45 = a6;
  uint64_t v30 = type metadata accessor for _PickerValue.Init1();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v25[*(int *)(v30 + 52)], v15, a5);
  uint64_t v31 = v34;
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v22, v25, v20);
  uint64_t v42 = a5;
  uint64_t v43 = a4;
  uint64_t v44 = a7;
  uint64_t v45 = a6;
  type metadata accessor for _PickerValue();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v42 = v39;
  LODWORD(v43) = v38;
  uint64_t v44 = v37;
  uint64_t v45 = v27;
  uint64_t v46 = v28;
  long long v47 = v35;
  long long v48 = v33;
  uint64_t v49 = v29;
  int v50 = (int)v40;
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 8))(v51, &v42, a4, a6, a5, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v25, v20);
}

uint64_t static ResolvedPicker.makeViewList<A>(view:style:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v34 = a2;
  *(void *)&long long v42 = a1;
  uint64_t v43 = a8;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = v17;
  uint64_t v45 = v16;
  uint64_t v46 = v19;
  uint64_t v47 = v18;
  uint64_t v20 = type metadata accessor for _PickerValue.Init1();
  uint64_t v33 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  int v22 = (char *)&v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v32 - v24;
  int v26 = *(_DWORD *)v42;
  uint64_t v37 = *a3;
  int v36 = *((_DWORD *)a3 + 2);
  uint64_t v35 = a3[2];
  long long v42 = *(_OWORD *)(a3 + 5);
  uint64_t v41 = a3[7];
  int v40 = *((_DWORD *)a3 + 16);
  uint64_t v39 = a3[9];
  int v38 = *((unsigned __int8 *)a3 + 80);
  LODWORD(v44) = v26;
  type metadata accessor for ResolvedPicker();
  type metadata accessor for _GraphValue();
  uint64_t v27 = a3[3];
  uint64_t v28 = a3[4];
  LODWORD(a3) = _GraphValue.value.getter();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v34, a5);
  *(_DWORD *)uint64_t v25 = a3;
  uint64_t v44 = a5;
  uint64_t v45 = a4;
  uint64_t v46 = a7;
  uint64_t v47 = a6;
  uint64_t v29 = type metadata accessor for _PickerValue.Init1();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v25[*(int *)(v29 + 52)], v15, a5);
  uint64_t v30 = v33;
  (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v22, v25, v20);
  uint64_t v44 = a5;
  uint64_t v45 = a4;
  uint64_t v46 = a7;
  uint64_t v47 = a6;
  type metadata accessor for _PickerValue();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v44 = v37;
  LODWORD(v45) = v36;
  uint64_t v46 = v35;
  uint64_t v47 = v27;
  uint64_t v48 = v28;
  long long v49 = v42;
  uint64_t v50 = v41;
  int v51 = v40;
  uint64_t v52 = v39;
  char v53 = v38;
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a7 + 16))(v54, &v44, a4, a6, a5, a7);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v25, v20);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedPicker<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static ResolvedPicker._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedPicker<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return static ResolvedPicker._makeViewList(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

void protocol witness for View.body.getter in conformance ResolvedPicker<A>()
{
}

uint64_t dispatch thunk of static PickerStyle._makeView<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t dispatch thunk of static PickerStyle._makeViewList<A>(value:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t type metadata completion function for _PickerValue()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PickerStyleConfiguration();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _PickerValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = (v8 | 7) + *(void *)(v5 + 64);
  uint64_t v10 = ((v8 + 16) & ~v8) + *(void *)(v7 + 64);
  uint64_t v11 = v8 | 7 | *(_DWORD *)(v5 + 80);
  if (v11 != 7
    || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || (v9 & ~(v8 | 7)) + ((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 9 > 0x18)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v11 + 16) & ~v11));
    swift_retain();
  }
  else
  {
    uint64_t v15 = ~(v8 | 7);
    uint64_t v16 = ~v8;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v17 = ((unint64_t)v4 + v9) & v15;
    unint64_t v18 = ((unint64_t)a2 + v9) & v15;
    *(void *)unint64_t v17 = *(void *)v18;
    uint64_t v19 = (void *)((v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (void *)((v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v19 = *v20;
    uint64_t v21 = v8 + 8;
    uint64_t v22 = ((unint64_t)v19 + v8 + 8) & ~v8;
    unint64_t v23 = ((unint64_t)v20 + v21) & v16;
    uint64_t v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v24(v22, v23, v6);
    unint64_t v25 = ((v17 | 7) + v10) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v26 = ((v18 | 7) + v10) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v25 = *(void *)v26;
    *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for _PickerValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v4 + 56);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v6 + a1 + (v8 | 7)) & ~(v8 | 7);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))((v8 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v8, v5);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _PickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v8 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v11 | 7) + *(void *)(v6 + 48);
  uint64_t v13 = (void *)((v12 + a1) & ~(v11 | 7));
  uint64_t v14 = (void *)((v12 + a2) & ~(v11 | 7));
  *uint64_t v13 = *v14;
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  uint64_t v17 = ((unint64_t)v15 + v11 + 8) & ~v11;
  uint64_t v18 = ((unint64_t)v16 + v11 + 8) & ~v11;
  swift_retain();
  swift_retain();
  v9(v17, v18, v7);
  uint64_t v19 = *(void *)(v10 + 48) + ((v11 + 16) & ~v11) + 7;
  unint64_t v20 = ((unint64_t)v13 + v19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = ((unint64_t)v14 + v19) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v20 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _PickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v6 + 40);
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 | 7) + v8;
  uint64_t v12 = (void *)((v11 + a1) & ~(v10 | 7));
  uint64_t v13 = (void *)((v11 + a2) & ~(v10 | 7));
  void *v12 = *v13;
  swift_retain();
  swift_release();
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 24))(((unint64_t)v14 + v10 + 8) & ~v10, ((unint64_t)v15 + v10 + 8) & ~v10, v7);
  uint64_t v16 = *(void *)(v9 + 64) + ((v10 + 16) & ~v10) + 7;
  unint64_t v17 = ((unint64_t)v12 + v16) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v13 + v16) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v17 = *(void *)v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  return a1;
}

uint64_t initializeWithTake for _PickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = *(void (**)(unint64_t, unint64_t))(v8 + 32);
  uint64_t v10 = v8 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = (v11 | 7) + v7;
  uint64_t v13 = (void *)((v12 + a1) & ~(v11 | 7));
  uint64_t v14 = (void *)((v12 + a2) & ~(v11 | 7));
  *uint64_t v13 = *v14;
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  v9(((unint64_t)v15 + v11 + 8) & ~v11, ((unint64_t)v16 + v11 + 8) & ~v11);
  uint64_t v17 = *(void *)(v10 + 32) + ((v11 + 16) & ~v11) + 7;
  unint64_t v18 = ((unint64_t)v13 + v17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = ((unint64_t)v14 + v17) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  return a1;
}

uint64_t assignWithTake for _PickerValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v6 + 24);
  uint64_t v9 = *(void *)(v7 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 | 7) + v8;
  uint64_t v12 = (void *)((v11 + a1) & ~(v10 | 7));
  uint64_t v13 = (void *)((v11 + a2) & ~(v10 | 7));
  void *v12 = *v13;
  swift_release();
  uint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v15 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v14 = *v15;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 40))(((unint64_t)v14 + v10 + 8) & ~v10, ((unint64_t)v15 + v10 + 8) & ~v10, v7);
  uint64_t v16 = *(void *)(v9 + 64) + ((v10 + 16) & ~v10) + 7;
  unint64_t v17 = ((unint64_t)v12 + v16) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v13 + v16) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v17 = *(void *)v18;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _PickerValue(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (v10 <= v6) {
    unsigned int v11 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v11 = v10;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v12 = v9 | 7;
  uint64_t v13 = (v9 | 7) + *(void *)(*(void *)(v4 - 8) + 64);
  int v14 = a2 - v11;
  if (a2 <= v11) {
    goto LABEL_24;
  }
  unint64_t v15 = (v13 & ~v12) + ((*(void *)(v7 + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v17 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v17))
    {
      int v18 = *(_DWORD *)&a1[v15];
      if (!v18) {
        goto LABEL_24;
      }
      goto LABEL_17;
    }
    if (v17 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)&a1[v15];
      if (!*(_WORD *)&a1[v15]) {
        goto LABEL_24;
      }
      goto LABEL_17;
    }
    if (v17 < 2) {
      goto LABEL_24;
    }
  }
  int v18 = a1[v15];
  if (!a1[v15])
  {
LABEL_24:
    if (v6 >= v10) {
      return (*(uint64_t (**)(void))(v5 + 48))();
    }
    uint64_t v22 = (unint64_t *)((((unint64_t)&a1[v13] & ~v12) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v8 & 0x80000000) != 0) {
      return (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v22 + v9 + 8) & ~v9);
    }
    unint64_t v23 = *v22;
    if (v23 >= 0xFFFFFFFF) {
      LODWORD(v23) = -1;
    }
    return (v23 + 1);
  }
LABEL_17:
  int v20 = (v18 - 1) << v16;
  if (v15 >= 4) {
    int v20 = 0;
  }
  if ((v13 & ~v12)
     + ((*(_DWORD *)(v7 + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFF8) == -8)
    int v21 = *a1;
  else {
    int v21 = *(_DWORD *)a1;
  }
  return v11 + (v21 | v20) + 1;
}

void storeEnumTagSinglePayload for _PickerValue(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (v12 <= v8) {
    unsigned int v13 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v13 = v12;
  }
  uint64_t v14 = (v11 | 7) + *(void *)(*(void *)(v6 - 8) + 64);
  size_t v15 = ((*(void *)(v9 + 64) + ((v11 + 16) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  size_t v16 = v15 + (v14 & ~(v11 | 7));
  BOOL v17 = a3 >= v13;
  unsigned int v18 = a3 - v13;
  if (v18 != 0 && v17)
  {
    if (v16 <= 3)
    {
      unsigned int v22 = ((v18 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
      if (HIWORD(v22))
      {
        int v19 = 4;
      }
      else if (v22 >= 0x100)
      {
        int v19 = 2;
      }
      else
      {
        int v19 = v22 > 1;
      }
    }
    else
    {
      int v19 = 1;
    }
  }
  else
  {
    int v19 = 0;
  }
  if (v13 < a2)
  {
    unsigned int v20 = ~v13 + a2;
    if (v16 < 4)
    {
      int v21 = (v20 >> (8 * v16)) + 1;
      v20 &= ~(-1 << (8 * v16));
      bzero(a1, v16);
      if (v16 == 1)
      {
        *a1 = v20;
LABEL_24:
        switch(v19)
        {
          case 1:
            a1[v16] = v21;
            return;
          case 2:
            *(_WORD *)&a1[v16] = v21;
            return;
          case 3:
            goto LABEL_53;
          case 4:
            *(_DWORD *)&a1[v16] = v21;
            return;
          default:
            return;
        }
      }
    }
    else
    {
      bzero(a1, v15 + (v14 & ~(v11 | 7)));
      int v21 = 1;
    }
    *(_DWORD *)a1 = v20;
    goto LABEL_24;
  }
  switch(v19)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_28;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x187D48FA4);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_27;
    default:
LABEL_27:
      if (a2)
      {
LABEL_28:
        if (v8 >= v12)
        {
          unint64_t v25 = *(void (**)(char *))(v7 + 56);
          v25(a1);
        }
        else
        {
          unint64_t v23 = (unsigned char *)((unint64_t)&a1[v14] & ~(v11 | 7));
          if (v12 >= a2)
          {
            unint64_t v26 = (void *)((unint64_t)(v23 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v10 & 0x80000000) != 0)
            {
              uint64_t v28 = *(void (**)(unint64_t))(v9 + 56);
              v28(((unint64_t)v26 + v11 + 8) & ~v11);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v27 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v27 = a2 - 1;
              }
              *unint64_t v26 = v27;
            }
          }
          else
          {
            if (v15 >= 4) {
              int v24 = ~v12 + a2;
            }
            else {
              int v24 = (~(_BYTE)v12 + a2);
            }
            bzero(v23, v15);
            if (v15 == 1) {
              *unint64_t v23 = v24;
            }
            else {
              *(_DWORD *)unint64_t v23 = v24;
            }
          }
        }
      }
      return;
  }
}

uint64_t type metadata accessor for _PickerValue()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **sub_187D48FE4()
{
  return &protocol witness table for PickerStyleConfiguration<A>.Label;
}

_UNKNOWN **sub_187D48FF0()
{
  return &protocol witness table for PickerStyleConfiguration<A>.Content;
}

uint64_t sub_187D48FFC()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for PickerStyleConfiguration.CurrentValueLabel()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PickerStyleConfiguration.Content()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PickerStyleConfiguration.Label()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for PickerStyleConfiguration(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D49248);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  BOOL v17 = (unint64_t *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v6 + 8) & ~v6);
  }
  unint64_t v18 = *v17;
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

void storeEnumTagSinglePayload for PickerStyleConfiguration(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_47;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            int v19 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v7 & 0x80000000) != 0)
            {
              int v21 = *(void (**)(unint64_t))(v6 + 56);
              v21(((unint64_t)v19 + v9 + 8) & ~v9);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = (~v8 + a2) >> v11;
  if (v10 < 4) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (v10 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v17;
      break;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x187D4947CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v17;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for ResolvedPicker(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D49620);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 16) & ~v6) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  int v17 = (unint64_t *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v6 + 8) & ~v6);
  }
  unint64_t v18 = *v17;
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

void storeEnumTagSinglePayload for ResolvedPicker(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_47;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            int v19 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v7 & 0x80000000) != 0)
            {
              int v21 = *(void (**)(unint64_t))(v6 + 56);
              v21(((unint64_t)v19 + v9 + 8) & ~v9);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v20 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v20 = a2 - 1;
              }
              void *v19 = v20;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = (~v8 + a2) >> v11;
  if (v10 < 4) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (v10 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v17;
      break;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x187D49854);
    case 4:
      *(_DWORD *)&a1[v10] = v17;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for PickerStyleWriter(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PickerStyleWriter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187D49BF0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in PickerStyleWriter<A>()
{
  return &protocol witness table for PickerStyleWriter<A>;
}

_UNKNOWN **base witness table accessor for View in ResolvedPicker<A>()
{
  return &protocol witness table for ResolvedPicker<A>;
}

_UNKNOWN **base witness table accessor for View in PickerStyleConfiguration<A>.Label()
{
  return &protocol witness table for PickerStyleConfiguration<A>.Label;
}

_UNKNOWN **base witness table accessor for View in PickerStyleConfiguration<A>.Content()
{
  return &protocol witness table for PickerStyleConfiguration<A>.Content;
}

_UNKNOWN **base witness table accessor for View in PickerStyleConfiguration<A>.CurrentValueLabel()
{
  return &protocol witness table for PickerStyleConfiguration<A>.CurrentValueLabel;
}

uint64_t instantiation function for generic protocol witness table for PickerStyleConfiguration<A>.CurrentValueLabel(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PickerStyleConfiguration<A>.Content(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for PickerStyleConfiguration<A>.Label(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for _PickerValue.Init1()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for _PickerValue.Init1(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 4) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 4) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for _PickerValue.Init1(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 4) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187D4A0D0);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 4] & ~v8;
        unsigned int v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

void *type metadata accessor for PickerStyleInput()
{
  return &unk_1ED41E840;
}

uint64_t base witness table accessor for _AttributeBody in _PickerValue<A, B>.Init1()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in PickerStyleConfiguration.selectedBoundIndices(children:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = _VariadicView_Children.tagIndex<A>(_:)();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5 & 1;
  return result;
}

void type metadata accessor for Int?()
{
  if (!lazy cache variable for type metadata for Int?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Int?);
    }
  }
}

uint64_t type metadata accessor for _PickerValue.Init2()
{
  return swift_getGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in _PickerValue<A, B>.Init2()
{
  return swift_getWitnessTable();
}

uint64_t static SegmentedPickerStyle._makeView<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeView(view:inputs:)();
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>();
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<PalettePickerStyle>);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier>);
    }
  }
}

uint64_t type metadata accessor for SegmentedPickerStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t SegmentedPickerStyle.Body.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v25 = a1;
  uint64_t v27 = a4;
  uint64_t v26 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v24 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  unsigned int v7 = (char *)&v24 - v6;
  uint64_t v30 = &type metadata for SegmentedPickerStyle;
  uint64_t v31 = a2;
  uint64_t v32 = &protocol witness table for SegmentedPickerStyle;
  uint64_t v33 = a3;
  uint64_t v8 = type metadata accessor for _PickerValue();
  MEMORY[0x1F4188790](v8 - 8);
  BOOL v10 = (char *)&v24 - v9;
  uint64_t v11 = type metadata accessor for ResolvedPicker();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  int v14 = (char *)&v24 - v13;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier>();
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  unsigned int v18 = (char *)&v24 - v17;
  SegmentedPickerStyle.Body.base.getter((uint64_t)v10);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v7, v10, v26);
  uint64_t v19 = ResolvedPicker.init(configuration:)((uint64_t)v7, (uint64_t)v14);
  View.pickerStyle<A, B>(_:in:)(v19, v20, v11, (uint64_t)&type metadata for PalettePickerStyle, MEMORY[0x1E4F3FCF0], (uint64_t)&protocol witness table for ResolvedPicker<A>, MEMORY[0x1E4F3FCE8], (uint64_t)v18);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  unint64_t v21 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v28 = &protocol witness table for ResolvedPicker<A>;
  unint64_t v29 = v21;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.pickerStyle<A>(_:)(WitnessTable, v15, (uint64_t)&unk_1ED454120, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance SegmentedPickerStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ResolvedPicker();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<PalettePickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<ResolvedSegmentedPickerStyle>);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance SegmentedPickerStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SegmentedPickerStyle.Body.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

ValueMetadata *type metadata accessor for SegmentedPickerStyle()
{
  return &type metadata for SegmentedPickerStyle;
}

void *type metadata accessor for ResolvedSegmentedPickerStyle()
{
  return &unk_1ED454120;
}

uint64_t base witness table accessor for _AttributeBody in SegmentedPickerStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t static ResolvedSegmentedPickerStyle._makeView<A>(value:inputs:)()
{
  return static _SegmentedControl._makeView(view:inputs:)();
}

uint64_t static ResolvedSegmentedPickerStyle._makeViewList<A>(value:inputs:)()
{
  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t SegmentedPickerStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _PickerValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t closure #1 in ResolvedSegmentedPickerStyle.Body.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v9[0] = &unk_1ED454120;
  v9[1] = a1;
  uint64_t v9[2] = &protocol witness table for ResolvedSegmentedPickerStyle;
  void v9[3] = a2;
  uint64_t v4 = type metadata accessor for _PickerValue();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)v9 - v5;
  SegmentedPickerStyle.Body.base.getter((uint64_t)v9 - v5);
  uint64_t v7 = type metadata accessor for PickerStyleConfiguration();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a3, v6, v7);
}

uint64_t closure #2 in ResolvedSegmentedPickerStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a3, a3, a4);
  uint64_t v4 = type metadata accessor for PickerStyleConfiguration.Content();
  uint64_t v5 = static ViewBuilder.buildExpression<A>(_:)(v4);

  return static ViewBuilder.buildExpression<A>(_:)(v5);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance ResolvedSegmentedPickerStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for PickerStyleConfiguration.Content();
  uint64_t v2 = type metadata accessor for _SegmentedControl();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance ResolvedSegmentedPickerStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ResolvedSegmentedPickerStyle.Body.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t type metadata accessor for ResolvedSegmentedPickerStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in ResolvedSegmentedPickerStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in ResolvedSegmentedPickerStyle.Body.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ResolvedSegmentedPickerStyle.Body.value.getter(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #2 in ResolvedSegmentedPickerStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return closure #2 in ResolvedSegmentedPickerStyle.Body.value.getter(v4[4], v4[2], v4[3], a4);
}

uint64_t LinearCapacityGaugeStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  char v5 = *((unsigned char *)a1 + 9);
  char v6 = *((unsigned char *)a1 + 10);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5;
  *(unsigned char *)(a2 + 10) = v6;
  *(void *)(a2 + 16) = KeyPath;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = result;
  *(unsigned char *)(a2 + 40) = 0;
  return result;
}

uint64_t protocol witness for GaugeStyle.makeBody(configuration:) in conformance LinearCapacityGaugeStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  char v5 = *((unsigned char *)a1 + 9);
  char v6 = *((unsigned char *)a1 + 10);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5;
  *(unsigned char *)(a2 + 10) = v6;
  *(void *)(a2 + 16) = KeyPath;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = result;
  *(unsigned char *)(a2 + 40) = 0;
  return result;
}

double LinearCapacityGauge.body.getter@<D0>(uint64_t a1@<X8>)
{
  long long v3 = v1[1];
  long long v30 = *v1;
  v31[0] = v3;
  *(_OWORD *)((char *)v31 + 9) = *(long long *)((char *)v1 + 25);
  uint64_t v28 = static HorizontalAlignment.center.getter();
  uint64_t v27 = static VerticalAlignment.center.getter();
  closure #1 in closure #1 in LinearCapacityGauge.body.getter((uint64_t)&v30, (uint64_t)v69);
  uint64_t v4 = *(void *)&v69[8];
  uint64_t v25 = *(void *)&v69[32];
  uint64_t v26 = *(void *)&v69[16];
  char v16 = v69[24];
  char v17 = v69[40];
  uint64_t v5 = *(void *)&v69[48];
  char v24 = v69[56];
  uint64_t v23 = *(void *)&v69[64];
  uint64_t v22 = *(void *)&v69[72];
  char v6 = v69[80];
  uint64_t v21 = *(void *)&v69[88];
  uint64_t v20 = *(void *)&v69[104];
  char v18 = v69[96];
  char v19 = v69[112];
  char v7 = v69[113];
  v33[50] = 1;
  v33[42] = v69[0];
  v33[34] = v69[24];
  v33[26] = v69[40];
  v33[18] = v69[80];
  v33[10] = v69[96];
  v33[2] = v69[112];
  v33[1] = v69[113];
  char v8 = v69[0];
  *(_DWORD *)&v32[7] = *(_DWORD *)((char *)&v30 + 7);
  *(void *)uint64_t v32 = v30;
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v32[8], (uint64_t)v33, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v33, (uint64_t)&v29, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
  v34[0] = v27;
  v34[1] = 0;
  LOBYTE(v35) = 1;
  BYTE8(v35) = v8;
  *(void *)&long long v36 = v4;
  *((void *)&v36 + 1) = v26;
  LOBYTE(v37) = v16;
  *((void *)&v37 + 1) = v25;
  LOBYTE(v38) = v17;
  *((void *)&v38 + 1) = v5;
  LOBYTE(v39) = v24;
  *((void *)&v39 + 1) = v23;
  *(void *)&long long v40 = v22;
  BYTE8(v40) = v6;
  *(void *)uint64_t v41 = v21;
  v41[8] = v18;
  *(void *)&char v41[16] = v20;
  v41[24] = v19;
  v41[25] = v7;
  long long v46 = v37;
  long long v47 = v38;
  long long v43 = (unint64_t)v27;
  long long v44 = v35;
  *(_OWORD *)((char *)v50 + 10) = *(_OWORD *)&v41[10];
  long long v49 = v40;
  v50[0] = *(_OWORD *)v41;
  long long v48 = v39;
  char v9 = v29;
  long long v45 = v36;
  char v42 = v29;
  v51[0] = v27;
  v51[1] = 0;
  char v52 = 1;
  char v53 = v8;
  uint64_t v54 = v4;
  uint64_t v55 = v26;
  char v56 = v16;
  uint64_t v57 = v25;
  char v58 = v17;
  uint64_t v59 = v5;
  char v60 = v24;
  uint64_t v61 = v23;
  uint64_t v62 = v22;
  char v63 = v6;
  uint64_t v64 = v21;
  char v65 = v18;
  uint64_t v66 = v20;
  char v67 = v19;
  char v68 = v7;
  outlined retain of HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>((uint64_t)v34);
  outlined release of HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>((uint64_t)v51);
  *(_OWORD *)&v69[87] = v48;
  *(_OWORD *)&v69[103] = v49;
  *(_OWORD *)&v69[119] = v50[0];
  *(_OWORD *)&v69[129] = *(_OWORD *)((char *)v50 + 10);
  *(_OWORD *)&v69[23] = v44;
  *(_OWORD *)&v69[39] = v45;
  *(_OWORD *)&v69[55] = v46;
  *(_OWORD *)&v69[71] = v47;
  char v70 = 1;
  *(_OWORD *)&v69[7] = v43;
  uint64_t v10 = static VerticalAlignment.center.getter();
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v33, (uint64_t)&v71, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
  long long v11 = *(_OWORD *)&v69[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v69[96];
  *(_OWORD *)(a1 + 129) = v11;
  *(_OWORD *)(a1 + 145) = *(_OWORD *)&v69[128];
  long long v12 = *(_OWORD *)&v69[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v69[32];
  *(_OWORD *)(a1 + 65) = v12;
  long long v13 = *(_OWORD *)&v69[80];
  *(_OWORD *)(a1 + 81) = *(_OWORD *)&v69[64];
  *(_OWORD *)(a1 + 97) = v13;
  double result = *(double *)v69;
  long long v15 = *(_OWORD *)&v69[16];
  *(_OWORD *)(a1 + 17) = *(_OWORD *)v69;
  *(void *)a1 = v28;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 161) = v69[144];
  *(_OWORD *)(a1 + 33) = v15;
  *(unsigned char *)(a1 + 162) = v9;
  *(_DWORD *)(a1 + 163) = v72;
  *(unsigned char *)(a1 + 167) = v73;
  *(void *)(a1 + 168) = v10;
  *(void *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 1;
  *(unsigned char *)(a1 + 185) = v71;
  return result;
}

uint64_t closure #1 in closure #1 in LinearCapacityGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)char v29 = *(void *)a1;
  *(_DWORD *)&v29[7] = *(_DWORD *)(a1 + 7);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v29[9], (uint64_t)&v30, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
  uint64_t v4 = *(void *)(a1 + 16);
  char v5 = *(unsigned char *)(a1 + 24);
  outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v4, v5);
  specialized Environment.wrappedValue.getter(v4, v5, &v23);
  outlined consume of Environment<Bool>.Content(v4, v5);
  if ((v23 & 2) == 0)
  {
    outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
LABEL_4:
    uint64_t v9 = *(void *)v29;
    goto LABEL_5;
  }
  uint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 40);
  outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v6, v7);
  char v8 = specialized Environment.wrappedValue.getter(v6, v7);
  outlined consume of Environment<Bool>.Content(v6, v7);
  outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  outlined retain of LinearCapacityGauge(a1, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  uint64_t v9 = 0;
  if ((v8 & 1) == 0) {
    goto LABEL_4;
  }
LABEL_5:
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v10 = swift_getKeyPath();
  uint64_t v11 = swift_getKeyPath();
  uint64_t v22 = 0x4030000000000000;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  uint64_t v12 = v23;
  char v13 = v24;
  uint64_t v14 = v25;
  char v15 = v26;
  uint64_t v16 = v27;
  char v17 = v28;
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v29[10], (uint64_t)&v23, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v30, (uint64_t)&v22, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v23, (uint64_t)&v21, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?);
  char v18 = v21;
  *(unsigned char *)a2 = v22;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v12;
  *(unsigned char *)(a2 + 24) = v13;
  *(void *)(a2 + 32) = v14;
  *(unsigned char *)(a2 + 40) = v15;
  *(void *)(a2 + 48) = v16;
  *(unsigned char *)(a2 + 56) = v17;
  *(void *)(a2 + 64) = KeyPath;
  *(void *)(a2 + 72) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = v10;
  *(unsigned char *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = v11;
  *(unsigned char *)(a2 + 112) = 0;
  *(unsigned char *)(a2 + 113) = v18;
  outlined copy of Environment<Bool>.Content(v12, v13);
  outlined copy of Environment<Bool>.Content(v14, v15);
  outlined copy of Environment<(Color, Color)?>.Content(KeyPath, 0, 0);
  outlined copy of Environment<HoverEffect?>.Content(v10, 0);
  outlined copy of Environment<Bool>.Content(v11, 0);
  outlined consume of Environment<Bool>.Content(v12, v13);
  outlined consume of Environment<Bool>.Content(v14, v15);
  outlined consume of Environment<(Color, Color)?>.Content(KeyPath, 0, 0);
  outlined consume of Environment<AnyShapeStyle?>.Content(v10, 0);
  return outlined consume of Environment<Bool>.Content(v11, 0);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LinearCapacityGauge()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t LinearCapsuleGauge.effectiveFillStyle.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v26 = v1;
  char v2 = *(unsigned char *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(unsigned char *)(v0 + 32);
  char v27 = v4;
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v6 = *(void *)(v0 + 64);
  char v7 = *(unsigned char *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v9 = *(unsigned __int8 *)(v0 + 88);
  uint64_t v10 = *(void *)(v0 + 96);
  char v11 = *(unsigned char *)(v0 + 104);
  outlined copy of Environment<Bool>.Content(v1, v2);
  outlined copy of Environment<Bool>.Content(v3, v4);
  outlined copy of Environment<(Color, Color)?>.Content(v5, v6, v7);
  uint64_t v12 = v9;
  outlined copy of Environment<HoverEffect?>.Content(v8, v9);
  outlined copy of Environment<Bool>.Content(v10, v11);
  outlined copy of Environment<(Color, Color)?>.Content(v5, v6, v7);
  uint64_t v13 = specialized Environment.wrappedValue.getter(v5, v6, v7);
  outlined consume of Environment<(Color, Color)?>.Content(v5, v6, v7);
  outlined consume of Environment<Bool>.Content(v26, v2);
  outlined consume of Environment<Bool>.Content(v3, v27);
  uint64_t v14 = v5;
  uint64_t v15 = v10;
  outlined consume of Environment<(Color, Color)?>.Content(v14, v6, v7);
  outlined consume of Environment<AnyShapeStyle?>.Content(v8, v12);
  outlined consume of Environment<Bool>.Content(v10, v11);
  if (v13)
  {
    swift_release();
    v28[0] = v13;
  }
  else
  {
    outlined copy of Environment<HoverEffect?>.Content(v8, v12);
    uint64_t v16 = specialized Environment.wrappedValue.getter(v8, v12);
    outlined consume of Environment<AnyShapeStyle?>.Content(v8, v12);
    if (v16)
    {
      AnyShapeStyle.as<A>(type:)();
      swift_release();
      uint64_t v17 = v28[0];
      if (v28[0])
      {
        outlined copy of Environment<Bool>.Content(v15, v11);
        specialized Environment.wrappedValue.getter(v15, v11, v28);
        outlined consume of Environment<Bool>.Content(v15, v11);
        if (LOBYTE(v28[0]) == 1)
        {
          uint64_t v18 = Gradient.reversed.getter();
          swift_bridgeObjectRelease();
          uint64_t v17 = v18;
        }
        static UnitPoint.leading.getter();
        uint64_t v20 = v19;
        uint64_t v22 = v21;
        static UnitPoint.trailing.getter();
        v28[0] = v17;
        v28[1] = v20;
        v28[2] = v22;
        v28[3] = v23;
        void v28[4] = v24;
      }
    }
  }
  return AnyShapeStyle.init<A>(_:)();
}

double LinearCapsuleGauge.body.getter@<D0>(uint64_t a1@<X8>)
{
  long long v3 = v1[4];
  v24[0] = v1[5];
  *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)((char *)v1 + 89);
  long long v4 = v1[1];
  *(_OWORD *)uint64_t v22 = *v1;
  *(_OWORD *)&unsigned char v22[16] = v4;
  long long v5 = v1[2];
  *(_OWORD *)&v22[48] = v1[3];
  long long v23 = v3;
  *(_OWORD *)&v22[32] = v5;
  uint64_t v6 = static Alignment.center.getter();
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)&v22[56];
  uint64_t v10 = v23;
  char v11 = BYTE8(v23);
  outlined retain of LinearCapsuleGauge((uint64_t)v22);
  outlined copy of Environment<(Color, Color)?>.Content(v9, v10, v11);
  uint64_t v12 = specialized Environment.wrappedValue.getter(v9, v10, v11);
  uint64_t v14 = v13;
  outlined consume of Environment<(Color, Color)?>.Content(v9, v10, v11);
  if (v12) {
    swift_release();
  }
  else {
    uint64_t v14 = static Color.tertiarySystemFill.getter();
  }
  outlined release of LinearCapsuleGauge((uint64_t)v22);
  uint64_t v15 = (_OWORD *)swift_allocObject();
  long long v16 = v24[0];
  v15[5] = v23;
  void v15[6] = v16;
  *(_OWORD *)((char *)v15 + 105) = *(_OWORD *)((char *)v24 + 9);
  long long v17 = *(_OWORD *)&v22[16];
  v15[1] = *(_OWORD *)v22;
  void v15[2] = v17;
  long long v18 = *(_OWORD *)&v22[48];
  void v15[3] = *(_OWORD *)&v22[32];
  void v15[4] = v18;
  outlined retain of LinearCapsuleGauge((uint64_t)v22);
  long long v20 = *(_OWORD *)&v22[8];
  *(_OWORD *)uint64_t v21 = *(_OWORD *)&v22[24];
  *(_OWORD *)&v21[9] = *(_OWORD *)&v22[33];
  _s7SwiftUI12ScaledMetricVy12CoreGraphics7CGFloatVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ScaledMetric<CGFloat>, (uint64_t (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat, MEMORY[0x1E4FBC958], MEMORY[0x1E4F3F620]);
  ScaledMetric.wrappedValue.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = v14;
  *(_WORD *)(a1 + 32) = 256;
  *(void *)(a1 + 40) = partial apply for closure #1 in closure #1 in LinearCapsuleGauge.body.getter;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v20;
  *(unsigned char *)(a1 + 64) = BYTE8(v20);
  *(void *)(a1 + 72) = *(void *)v21;
  *(unsigned char *)(a1 + 80) = v21[8];
  double result = *(double *)&v21[16];
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&v21[16];
  return result;
}

uint64_t closure #1 in closure #1 in LinearCapsuleGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(_DWORD *)(a1 + 48);
  long long v6 = *(_OWORD *)(a1 + 16);
  v14[0] = *(_OWORD *)a1;
  v14[1] = v6;
  void v14[2] = *(_OWORD *)(a1 + 32);
  int v15 = v5;
  GeometryProxy.size.getter();
  double v8 = v7;
  uint64_t v9 = *(void *)(a2 + 96);
  char v10 = *(unsigned char *)(a2 + 104);
  outlined copy of Environment<Bool>.Content(v9, v10);
  specialized Environment.wrappedValue.getter(v9, v10, v14);
  outlined consume of Environment<Bool>.Content(v9, v10);
  double v11 = -v8;
  if (LOBYTE(v14[0])) {
    double v11 = v8;
  }
  double v12 = v11 * (1.0 - *(double *)a2);
  uint64_t result = LinearCapsuleGauge.effectiveFillStyle.getter();
  *(unsigned char *)a3 = 1;
  *(void *)(a3 + 8) = result;
  *(_WORD *)(a3 + 16) = 256;
  *(unsigned char *)(a3 + 24) = 1;
  *(double *)(a3 + 32) = v12;
  *(void *)(a3 + 40) = 0;
  *(_WORD *)(a3 + 48) = 256;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LinearCapsuleGauge()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t key path getter for EnvironmentValues.sensitiveContent : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.sensitiveContent.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187D4BED0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.sensitiveContent.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for EnvironmentValues.sensitiveContent : EnvironmentValues()
{
  return EnvironmentValues.sensitiveContent.setter();
}

uint64_t sub_187D4BF38()
{
  return EnvironmentValues.sensitiveContent.setter();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in LinearCapacityGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for LinearCapacityGaugeStyle()
{
  return &type metadata for LinearCapacityGaugeStyle;
}

unint64_t lazy protocol witness table accessor for type LinearCapacityGauge and conformance LinearCapacityGauge()
{
  unint64_t result = lazy protocol witness table cache variable for type LinearCapacityGauge and conformance LinearCapacityGauge;
  if (!lazy protocol witness table cache variable for type LinearCapacityGauge and conformance LinearCapacityGauge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearCapacityGauge and conformance LinearCapacityGauge);
  }
  return result;
}

uint64_t destroy for LinearCapacityGauge(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  uint64_t v2 = *(void *)(a1 + 32);
  char v3 = *(unsigned char *)(a1 + 40);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t assignWithTake for LinearCapacityGauge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *(unsigned char *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinearCapacityGauge(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LinearCapacityGauge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinearCapacityGauge()
{
  return &type metadata for LinearCapacityGauge;
}

uint64_t associated type witness table accessor for View.Body : View in LinearCapacityGauge()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined retain of HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  char v3 = *(unsigned char *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  char v6 = *(unsigned char *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 128);
  char v10 = *(unsigned char *)(a1 + 136);
  outlined copy of Environment<Bool>.Content(*(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<(Color, Color)?>.Content(v4, v5, v6);
  outlined copy of Environment<HoverEffect?>.Content(v7, v8);
  outlined copy of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t outlined release of HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  char v3 = *(unsigned char *)(a1 + 64);
  uint64_t v4 = *(void *)(a1 + 88);
  uint64_t v5 = *(void *)(a1 + 96);
  char v6 = *(unsigned char *)(a1 + 104);
  uint64_t v7 = *(void *)(a1 + 112);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 128);
  char v10 = *(unsigned char *)(a1 + 136);
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 40), *(unsigned char *)(a1 + 48));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<(Color, Color)?>.Content(v4, v5, v6);
  outlined consume of Environment<AnyShapeStyle?>.Content(v7, v8);
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t outlined retain of LinearCapacityGauge(uint64_t a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 40);
  a2(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  a3(v5, v6);
  return a1;
}

void type metadata accessor for VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>)
  {
    type metadata accessor for TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>(255, &lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>, (void (*)(uint64_t))type metadata accessor for (GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?));
    lazy protocol witness table accessor for type TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>, (void (*)(uint64_t))type metadata accessor for (GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?));
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>);
    }
  }
}

void type metadata accessor for (GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)()
{
  if (!lazy cache variable for type metadata for (GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?))
  {
    type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>();
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?));
    }
  }
}

void type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>)
  {
    type metadata accessor for TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>(255, &lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>, (void (*)(uint64_t))type metadata accessor for (GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?));
    lazy protocol witness table accessor for type TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>, (void (*)(uint64_t))type metadata accessor for (GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?));
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>);
    }
  }
}

void type metadata accessor for (GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)()
{
  if (!lazy cache variable for type metadata for (GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?))
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?);
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?));
    }
  }
}

uint64_t lazy protocol witness table accessor for type TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)> and conformance TupleView<A>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>()
{
  if (!lazy cache variable for type metadata for AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>)
  {
    type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>();
    lazy protocol witness table accessor for type ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>> and conformance ZStack<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>);
    unint64_t v0 = type metadata accessor for AccessibilityRepresentationModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>);
    }
  }
}

void type metadata accessor for HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>)
  {
    type metadata accessor for TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>(255, (unint64_t *)&lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>, (void (*)(uint64_t))type metadata accessor for (GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?));
    lazy protocol witness table accessor for type TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)> and conformance TupleView<A>((unint64_t *)&lazy protocol witness table cache variable for type TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)> and conformance TupleView<A>, (unint64_t *)&lazy cache variable for type metadata for TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>, (void (*)(uint64_t))type metadata accessor for (GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?));
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>);
    }
  }
}

void type metadata accessor for (GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)()
{
  if (!lazy cache variable for type metadata for (GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?))
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?));
    }
  }
}

uint64_t destroy for LinearCapsuleGauge(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  outlined consume of Environment<(Color, Color)?>.Content(*(void *)(a1 + 56), *(void *)(a1 + 64), *(unsigned char *)(a1 + 72));
  outlined consume of Environment<AnyShapeStyle?>.Content(*(void *)(a1 + 80), *(unsigned __int8 *)(a1 + 88));
  uint64_t v2 = *(void *)(a1 + 96);
  char v3 = *(unsigned char *)(a1 + 104);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t initializeWithCopy for LinearCapsuleGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  uint64_t v6 = *(void *)(v2 + 24);
  char v7 = *(unsigned char *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = *(void *)(v2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(v2 + 48);
  uint64_t v8 = *(void *)(v2 + 56);
  uint64_t v9 = *(void *)(v2 + 64);
  char v10 = *(unsigned char *)(v2 + 72);
  outlined copy of Environment<(Color, Color)?>.Content(v8, v9, v10);
  *(void *)(a1 + 56) = v8;
  *(void *)(a1 + 64) = v9;
  *(unsigned char *)(a1 + 72) = v10;
  uint64_t v11 = *(void *)(v2 + 80);
  LOBYTE(v9) = *(unsigned char *)(v2 + 88);
  outlined copy of Environment<HoverEffect?>.Content(v11, v9);
  *(void *)(a1 + 80) = v11;
  *(unsigned char *)(a1 + 88) = v9;
  uint64_t v12 = *(void *)(v2 + 96);
  LOBYTE(v2) = *(unsigned char *)(v2 + 104);
  outlined copy of Environment<Bool>.Content(v12, v2);
  *(void *)(a1 + 96) = v12;
  *(unsigned char *)(a1 + 104) = v2;
  return a1;
}

uint64_t assignWithCopy for LinearCapsuleGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(v2 + 24);
  char v9 = *(unsigned char *)(v2 + 32);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 24);
  char v11 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 32) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  *(void *)(a1 + 40) = *(void *)(v2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(v2 + 48);
  uint64_t v12 = *(void *)(v2 + 56);
  uint64_t v13 = *(void *)(v2 + 64);
  char v14 = *(unsigned char *)(v2 + 72);
  outlined copy of Environment<(Color, Color)?>.Content(v12, v13, v14);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v16 = *(void *)(a1 + 64);
  char v17 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(unsigned char *)(a1 + 72) = v14;
  outlined consume of Environment<(Color, Color)?>.Content(v15, v16, v17);
  uint64_t v18 = *(void *)(v2 + 80);
  LOBYTE(v13) = *(unsigned char *)(v2 + 88);
  outlined copy of Environment<HoverEffect?>.Content(v18, v13);
  uint64_t v19 = *(void *)(a1 + 80);
  uint64_t v20 = *(unsigned __int8 *)(a1 + 88);
  *(void *)(a1 + 80) = v18;
  *(unsigned char *)(a1 + 88) = v13;
  outlined consume of Environment<AnyShapeStyle?>.Content(v19, v20);
  uint64_t v21 = *(void *)(v2 + 96);
  LOBYTE(v2) = *(unsigned char *)(v2 + 104);
  outlined copy of Environment<Bool>.Content(v21, v2);
  uint64_t v22 = *(void *)(a1 + 96);
  char v23 = *(unsigned char *)(a1 + 104);
  *(void *)(a1 + 96) = v21;
  *(unsigned char *)(a1 + 104) = v2;
  outlined consume of Environment<Bool>.Content(v22, v23);
  return a1;
}

uint64_t assignWithTake for LinearCapsuleGauge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *(unsigned char *)(a2 + 32);
  uint64_t v9 = *(void *)(a1 + 24);
  char v10 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  char v11 = *(unsigned char *)(a2 + 72);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v13 = *(void *)(a1 + 64);
  char v14 = *(unsigned char *)(a1 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = v11;
  outlined consume of Environment<(Color, Color)?>.Content(v12, v13, v14);
  char v15 = *(unsigned char *)(a2 + 88);
  uint64_t v16 = *(void *)(a1 + 80);
  uint64_t v17 = *(unsigned __int8 *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = v15;
  outlined consume of Environment<AnyShapeStyle?>.Content(v16, v17);
  char v18 = *(unsigned char *)(a2 + 104);
  uint64_t v19 = *(void *)(a1 + 96);
  char v20 = *(unsigned char *)(a1 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = v18;
  outlined consume of Environment<Bool>.Content(v19, v20);
  return a1;
}

uint64_t getEnumTagSinglePayload for LinearCapsuleGauge(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 105)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LinearCapsuleGauge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 105) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LinearCapsuleGauge()
{
  return &type metadata for LinearCapsuleGauge;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>>();
    lazy protocol witness table accessor for type ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>> and conformance ZStack<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>>)
  {
    type metadata accessor for VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>();
    type metadata accessor for AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>>, AccessibilityRepresentationModifier<HStack<TupleView<(GaugeStyleConfiguration.Label, GaugeStyleConfiguration.CurrentValueLabel?)>>>>);
    }
  }
}

uint64_t associated type witness table accessor for View.Body : View in LinearCapsuleGauge()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined retain of LinearCapsuleGauge(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  char v6 = *(unsigned char *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 96);
  char v10 = *(unsigned char *)(a1 + 104);
  outlined copy of Environment<Bool>.Content(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  outlined copy of Environment<Bool>.Content(v2, v3);
  outlined copy of Environment<(Color, Color)?>.Content(v4, v5, v6);
  outlined copy of Environment<HoverEffect?>.Content(v7, v8);
  outlined copy of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t outlined release of LinearCapsuleGauge(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v3 = *(unsigned char *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  char v6 = *(unsigned char *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v9 = *(void *)(a1 + 96);
  char v10 = *(unsigned char *)(a1 + 104);
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  outlined consume of Environment<Bool>.Content(v2, v3);
  outlined consume of Environment<(Color, Color)?>.Content(v4, v5, v6);
  outlined consume of Environment<AnyShapeStyle?>.Content(v7, v8);
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t sub_187D4CDD8()
{
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  outlined consume of Environment<(Color, Color)?>.Content(*(void *)(v0 + 72), *(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
  outlined consume of Environment<AnyShapeStyle?>.Content(*(void *)(v0 + 96), *(unsigned __int8 *)(v0 + 104));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 112), *(unsigned char *)(v0 + 120));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in LinearCapsuleGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in LinearCapsuleGauge.body.getter(a1, v2 + 16, a2);
}

void type metadata accessor for ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>()
{
  if (!lazy cache variable for type metadata for ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>)
  {
    type metadata accessor for TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>(255, &lazy cache variable for type metadata for TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>, (void (*)(uint64_t))type metadata accessor for (_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>));
    lazy protocol witness table accessor for type TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>, (void (*)(uint64_t))type metadata accessor for (_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>));
    unint64_t v0 = type metadata accessor for ZStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>);
    }
  }
}

void type metadata accessor for TupleView<(GaugeStyleConfiguration.Label, HStack<TupleView<(GaugeStyleConfiguration.MinimumValueLabel?, LinearCapsuleGauge, GaugeStyleConfiguration.MaximumValueLabel?)>>, GaugeStyleConfiguration.CurrentValueLabel?)>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for TupleView();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for (_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)()
{
  if (!lazy cache variable for type metadata for (_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>))
  {
    type metadata accessor for _ShapeView<Capsule, Color>(255, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Capsule, Color>);
    type metadata accessor for GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>));
    }
  }
}

void type metadata accessor for GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>()
{
  if (!lazy cache variable for type metadata for GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>();
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for GeometryReader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>)
  {
    type metadata accessor for _ShapeView<Capsule, Color>(255, &lazy cache variable for type metadata for _ShapeView<Capsule, AnyShapeStyle>);
    type metadata accessor for _ClipEffect<OffsetShape<Capsule>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>);
    }
  }
}

void type metadata accessor for _ShapeView<Capsule, Color>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    lazy protocol witness table accessor for type Capsule and conformance Capsule();
    unint64_t v3 = type metadata accessor for _ShapeView();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void type metadata accessor for _ClipEffect<OffsetShape<Capsule>>()
{
  if (!lazy cache variable for type metadata for _ClipEffect<OffsetShape<Capsule>>)
  {
    _s7SwiftUI12ScaledMetricVy12CoreGraphics7CGFloatVGMaTm_0(255, &lazy cache variable for type metadata for OffsetShape<Capsule>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule, MEMORY[0x1E4F41670], MEMORY[0x1E4F3F508]);
    lazy protocol witness table accessor for type OffsetShape<Capsule> and conformance OffsetShape<A>();
    unint64_t v0 = type metadata accessor for _ClipEffect();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ClipEffect<OffsetShape<Capsule>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type OffsetShape<Capsule> and conformance OffsetShape<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type OffsetShape<Capsule> and conformance OffsetShape<A>;
  if (!lazy protocol witness table cache variable for type OffsetShape<Capsule> and conformance OffsetShape<A>)
  {
    _s7SwiftUI12ScaledMetricVy12CoreGraphics7CGFloatVGMaTm_0(255, &lazy cache variable for type metadata for OffsetShape<Capsule>, (uint64_t (*)(void))lazy protocol witness table accessor for type Capsule and conformance Capsule, MEMORY[0x1E4F41670], MEMORY[0x1E4F3F508]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OffsetShape<Capsule> and conformance OffsetShape<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>();
    lazy protocol witness table accessor for type _ShapeView<Capsule, AnyShapeStyle> and conformance _ShapeView<A, B>();
    lazy protocol witness table accessor for type ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>> and conformance ZStack<A>(&lazy protocol witness table cache variable for type _ClipEffect<OffsetShape<Capsule>> and conformance _ClipEffect<A>, (void (*)(uint64_t))type metadata accessor for _ClipEffect<OffsetShape<Capsule>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeView<Capsule, AnyShapeStyle> and conformance _ShapeView<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeView<Capsule, AnyShapeStyle> and conformance _ShapeView<A, B>;
  if (!lazy protocol witness table cache variable for type _ShapeView<Capsule, AnyShapeStyle> and conformance _ShapeView<A, B>)
  {
    type metadata accessor for _ShapeView<Capsule, Color>(255, &lazy cache variable for type metadata for _ShapeView<Capsule, AnyShapeStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeView<Capsule, AnyShapeStyle> and conformance _ShapeView<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>> and conformance ZStack<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout>();
    lazy protocol witness table accessor for type ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>> and conformance ZStack<A>(&lazy protocol witness table cache variable for type ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>> and conformance ZStack<A>, (void (*)(uint64_t))type metadata accessor for ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout>)
  {
    type metadata accessor for ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(_ShapeView<Capsule, Color>, GeometryReader<ModifiedContent<_ShapeView<Capsule, AnyShapeStyle>, _ClipEffect<OffsetShape<Capsule>>>>)>>, _FrameLayout>);
    }
  }
}

void AlertScene.init<>(_:isPresented:actions:)()
{
}

void AlertScene.init<>(_:isPresented:actions:)(uint64_t a1, uint64_t a2, char a3)
{
}

void AlertScene.init<A>(_:isPresented:actions:)()
{
}

void AlertScene.init(_:isPresented:actions:message:)(uint64_t a1, uint64_t a2, char a3)
{
}

{
  swift_release();
  swift_release();
  outlined consume of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertScene.init(_:isPresented:actions:message:)()
{
}

{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertScene.init<A>(_:isPresented:actions:message:)()
{
}

{
  swift_release();
  swift_release();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void AlertScene.init<A>(_:isPresented:presenting:actions:)()
{
}

void AlertScene.init<A>(_:isPresented:presenting:actions:)(uint64_t a1, uint64_t a2, char a3)
{
}

void AlertScene.init<A, B>(_:isPresented:presenting:actions:)()
{
}

void AlertScene.init<A>(_:isPresented:presenting:actions:message:)(uint64_t a1, uint64_t a2, char a3)
{
}

void AlertScene.init<A>(_:isPresented:presenting:actions:message:)()
{
}

void AlertScene.init<A, B>(_:isPresented:presenting:actions:message:)()
{
}

void AlertScene.body.getter()
{
}

void AlertDialog.init(_:isPresented:message:actions:)()
{
}

void AlertDialog.init<A>(_:isPresented:message:actions:)()
{
}

void AlertDialog.init(_:isPresented:message:actions:)(uint64_t a1, uint64_t a2, char a3)
{
}

uint64_t associated type witness table accessor for Scene.Body : Scene in AlertScene<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for Scene.Body : Scene in AlertDialog<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t type metadata completion function for AlertScene()
{
  uint64_t result = type metadata accessor for AlertScene.DialogContent();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AlertScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v4 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(_DWORD *)(v7 + 80);
  int v10 = *(_DWORD *)(v7 + 80) | *(_DWORD *)(v6 + 80);
  uint64_t v11 = (*(unsigned char *)(v7 + 80) | *(unsigned char *)(v6 + 80));
  uint64_t v12 = *(unsigned int *)(v6 + 84);
  uint64_t v13 = *(void *)(v6 + 64) + v9;
  uint64_t v14 = (v13 & ~v9) + *(void *)(v7 + 64);
  int v15 = v8 | v12;
  if (v8 | v12) {
    size_t v16 = (v13 & ~v9) + *(void *)(v7 + 64);
  }
  else {
    size_t v16 = v14 + 1;
  }
  uint64_t v17 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  if (v11 > 7 || (v10 & 0x100000) != 0 || v16 + ((v11 + 56) & ~v11) > 0x18)
  {
    uint64_t v20 = v17 + ((v10 & 0xF8 ^ 0x1F8u) & (unint64_t)(v11 + 16));
    swift_retain();
    return v20;
  }
  unsigned int v41 = v8;
  size_t __n = v16;
  uint64_t v43 = v13;
  uint64_t v44 = v14;
  uint64_t v45 = v6;
  uint64_t v46 = v5;
  uint64_t v47 = v7;
  uint64_t v48 = v4;
  uint64_t v42 = ~v9;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v49 = a1;
  unint64_t v21 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v24 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  char v25 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v23, v24, v25);
  *(void *)(v21 + 24) = v23;
  *(void *)(v21 + 32) = v24;
  int v26 = v15;
  *(unsigned char *)(v21 + 40) = v25;
  *(void *)(v21 + 48) = *(void *)(v22 + 48);
  char v27 = (void *)((v21 + v11 + 56) & ~v11);
  char v28 = (unsigned __int16 *)((v22 + v11 + 56) & ~v11);
  swift_bridgeObjectRetain();
  if (!v15)
  {
    uint64_t v34 = v44;
    uint64_t v33 = v45;
    uint64_t v30 = v48;
    uint64_t v20 = v49;
    uint64_t v32 = v46;
    uint64_t v31 = v47;
    uint64_t v29 = v43;
    if (!*((unsigned char *)v28 + v44)) {
      goto LABEL_33;
    }
    int v35 = (*((unsigned __int8 *)v28 + v44) - 1) << (8 * v44);
    if (v44 > 3) {
      int v35 = 0;
    }
    if (v44)
    {
      int v36 = v44 <= 3 ? v44 : 4;
      switch(v36)
      {
        case 2:
          int v37 = *v28;
          break;
        case 3:
          int v37 = *v28 | (*((unsigned __int8 *)v28 + 2) << 16);
          break;
        case 4:
          int v37 = *(_DWORD *)v28;
          break;
        default:
          int v37 = *(unsigned __int8 *)v28;
          break;
      }
    }
    else
    {
      int v37 = 0;
    }
    if ((v37 | v35) == 0xFFFFFFFF) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  if (v12 >= v41)
  {
    uint64_t v33 = v45;
    uint64_t v32 = v46;
    int v38 = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v45 + 48))(v28, v12, v46);
    uint64_t v30 = v48;
    uint64_t v20 = v49;
    uint64_t v31 = v47;
    uint64_t v29 = v43;
    uint64_t v34 = v44;
    if (!v38) {
      goto LABEL_33;
    }
LABEL_27:
    memcpy(v27, v28, __n);
    return v20;
  }
  uint64_t v29 = v43;
  uint64_t v31 = v47;
  uint64_t v30 = v48;
  uint64_t v20 = v49;
  uint64_t v33 = v45;
  uint64_t v32 = v46;
  uint64_t v34 = v44;
  if ((*(unsigned int (**)(unint64_t))(v47 + 48))(((unint64_t)v28 + v43) & v42)) {
    goto LABEL_27;
  }
LABEL_33:
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v33 + 16))(v27, v28, v32);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v31 + 16))(((unint64_t)v27 + v29) & v42, ((unint64_t)v28 + v29) & v42, v30);
  if (!v26) {
    *((unsigned char *)v27 + v34) = 0;
  }
  return v20;
}

uint64_t destroy for AlertScene(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24), *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32), *(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFF8) + 40));
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v5 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(_DWORD *)(v8 + 80) | *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = *(_DWORD *)(v8 + 80);
  uint64_t v12 = (unsigned __int16 *)((v4 + v10 + 56) & ~v10);
  uint64_t v13 = *(unsigned int *)(v7 + 84);
  uint64_t v14 = ~v11;
  uint64_t v15 = *(void *)(v7 + 64) + v11;
  uint64_t v21 = v8;
  if (v9 | v13)
  {
    if (v13 >= v9)
    {
      uint64_t result = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v7 + 48))(v12, v13, v6);
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(unint64_t))(v8 + 48))(((unint64_t)v12 + v15) & v14);
      if (result) {
        return result;
      }
    }
    goto LABEL_19;
  }
  uint64_t v17 = (v15 & ~v11) + *(void *)(*(void *)(v5 - 8) + 64);
  if (!*((unsigned char *)v12 + v17)) {
    goto LABEL_19;
  }
  int v18 = (*((unsigned __int8 *)v12 + v17) - 1) << (8 * v17);
  if (v17 > 3) {
    int v18 = 0;
  }
  if (v17)
  {
    if (v17 > 3) {
      LODWORD(v17) = 4;
    }
    switch((int)v17)
    {
      case 2:
        LODWORD(v17) = *v12;
        break;
      case 3:
        LODWORD(v17) = *v12 | (*((unsigned __int8 *)v12 + 2) << 16);
        break;
      case 4:
        LODWORD(v17) = *(_DWORD *)v12;
        break;
      default:
        LODWORD(v17) = *(unsigned __int8 *)v12;
        break;
    }
  }
  int v19 = v17 | v18;
  uint64_t result = (v19 + 1);
  if (v19 == -1)
  {
LABEL_19:
    (*(void (**)(unsigned __int16 *, uint64_t))(v7 + 8))(v12, v6);
    uint64_t v20 = *(uint64_t (**)(unint64_t, uint64_t))(v21 + 8);
    return v20(((unint64_t)v12 + v15) & v14, v5);
  }
  return result;
}

uint64_t initializeWithCopy for AlertScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  char v10 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v8, v9, v10);
  *(void *)(v6 + 24) = v8;
  *(void *)(v6 + 32) = v9;
  *(unsigned char *)(v6 + 40) = v10;
  *(void *)(v6 + 48) = *(void *)(v7 + 48);
  uint64_t v30 = *(void *)(a3 + 16);
  uint64_t v31 = *(void *)(a3 + 24);
  uint64_t v11 = *(void *)(v30 - 8);
  uint64_t v12 = *(void *)(v31 - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  uint64_t v14 = *(_DWORD *)(v12 + 80);
  uint64_t v15 = *(_DWORD *)(v12 + 80) | *(unsigned __int8 *)(v11 + 80);
  size_t v16 = (void *)((v15 + 56 + v6) & ~v15);
  uint64_t v17 = (unsigned __int8 *)((v15 + 56 + v7) & ~v15);
  uint64_t v18 = *(unsigned int *)(v11 + 84);
  uint64_t v19 = *(void *)(v11 + 64);
  uint64_t v29 = ~v14;
  uint64_t v20 = v19 + v14;
  size_t v21 = ((v19 + v14) & ~v14) + *(void *)(v12 + 64);
  int v22 = v13 | v18;
  swift_bridgeObjectRetain();
  if (v13 | v18)
  {
    if (v18 >= v13) {
      int v23 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v11 + 48))(v17, v18, v30);
    }
    else {
      int v23 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48))((unint64_t)&v17[v20] & v29, v13, v31);
    }
    if (v23)
    {
LABEL_15:
      if (v22) {
        size_t v27 = v21;
      }
      else {
        size_t v27 = v21 + 1;
      }
      memcpy(v16, v17, v27);
      return a1;
    }
  }
  else if (v17[v21])
  {
    int v24 = (v17[v21] - 1) << (8 * v21);
    if (v21 > 3) {
      int v24 = 0;
    }
    if (v21)
    {
      int v25 = v21 <= 3 ? v21 : 4;
      switch(v25)
      {
        case 2:
          int v26 = *(unsigned __int16 *)v17;
          break;
        case 3:
          int v26 = *(unsigned __int16 *)v17 | (v17[2] << 16);
          break;
        case 4:
          int v26 = *(_DWORD *)v17;
          break;
        default:
          int v26 = *v17;
          break;
      }
    }
    else
    {
      int v26 = 0;
    }
    if ((v26 | v24) != 0xFFFFFFFF) {
      goto LABEL_15;
    }
  }
  (*(void (**)(void *, unsigned __int8 *, uint64_t))(v11 + 16))(v16, v17, v30);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16))(((unint64_t)v16 + v20) & v29, (unint64_t)&v17[v20] & v29, v31);
  if (!v22) {
    *((unsigned char *)v16 + v21) = 0;
  }
  return a1;
}

uint64_t assignWithCopy for AlertScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v9 = *(void *)(v7 + 32);
  char v10 = *(unsigned char *)(v7 + 40);
  outlined copy of Text.Storage(v8, v9, v10);
  uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  char v13 = *(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(void *)(v6 + 24) = v8;
  *(void *)(v6 + 32) = v9;
  *(unsigned char *)(v6 + 40) = v10;
  outlined consume of Text.Storage(v11, v12, v13);
  *(void *)(v6 + 48) = *(void *)(v7 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(a3 + 24);
  uint64_t v16 = *(void *)(v14 - 8);
  uint64_t v17 = *(void *)(v15 - 8);
  uint64_t v18 = *(unsigned int *)(v17 + 84);
  uint64_t v19 = *(_DWORD *)(v17 + 80);
  uint64_t v20 = *(_DWORD *)(v17 + 80) | *(unsigned __int8 *)(v16 + 80);
  size_t v21 = (unsigned __int16 *)((v20 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v20);
  int v22 = (unsigned __int16 *)((v20 + 56 + v7) & ~v20);
  uint64_t v23 = *(unsigned int *)(v16 + 84);
  uint64_t v24 = *(void *)(v16 + 64) + v19;
  uint64_t v25 = v24 & ~v19;
  uint64_t v26 = *(void *)(v17 + 64);
  size_t v27 = v25 + v26;
  int v28 = v18 | v23;
  uint64_t v57 = ~v19;
  uint64_t v58 = v15;
  uint64_t v55 = v14;
  uint64_t v56 = v24;
  if (!(v18 | v23))
  {
    char v35 = 8 * v27;
    if (*((unsigned char *)v21 + v27))
    {
      int v36 = (*((unsigned __int8 *)v21 + v27) - 1) << v35;
      if (v27 > 3) {
        int v36 = 0;
      }
      if (v27)
      {
        int v37 = v27 <= 3 ? v27 : 4;
        switch(v37)
        {
          case 2:
            int v38 = *v21;
            break;
          case 3:
            int v38 = *v21 | (*((unsigned __int8 *)v21 + 2) << 16);
            break;
          case 4:
            int v38 = *(_DWORD *)v21;
            break;
          default:
            int v38 = *(unsigned __int8 *)v21;
            break;
        }
      }
      else
      {
        int v38 = 0;
      }
      if ((v38 | v36) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)v22 + v27)) {
          goto LABEL_57;
        }
        int v43 = (*((unsigned __int8 *)v22 + v27) - 1) << v35;
        if (v27 > 3) {
          int v43 = 0;
        }
        if (v27)
        {
          int v44 = v27 <= 3 ? v27 : 4;
          switch(v44)
          {
            case 2:
              int v45 = *v22;
              break;
            case 3:
              int v45 = *v22 | (*((unsigned __int8 *)v22 + 2) << 16);
              break;
            case 4:
              int v45 = *(_DWORD *)v22;
              break;
            default:
              int v45 = *(unsigned __int8 *)v22;
              break;
          }
        }
        else
        {
          int v45 = 0;
        }
        if ((v45 | v43) == 0xFFFFFFFF) {
          goto LABEL_57;
        }
        goto LABEL_48;
      }
    }
    if (!*((unsigned char *)v22 + v27)) {
      goto LABEL_52;
    }
    int v46 = (*((unsigned __int8 *)v22 + v27) - 1) << v35;
    if (v27 > 3) {
      int v46 = 0;
    }
    if (v27)
    {
      int v47 = v27 <= 3 ? v27 : 4;
      switch(v47)
      {
        case 2:
          int v48 = *v22;
          break;
        case 3:
          int v48 = *v22 | (*((unsigned __int8 *)v22 + 2) << 16);
          break;
        case 4:
          int v48 = *(_DWORD *)v22;
          break;
        default:
          int v48 = *(unsigned __int8 *)v22;
          break;
      }
    }
    else
    {
      int v48 = 0;
    }
    if ((v48 | v46) == 0xFFFFFFFF)
    {
LABEL_52:
      (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v16 + 24))(v21, v22, v14);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 24))(((unint64_t)v21 + v56) & v57, ((unint64_t)v22 + v56) & v57, v58);
      return a1;
    }
LABEL_47:
    (*(void (**)(unsigned __int16 *, uint64_t))(v16 + 8))(v21, v14);
    (*(void (**)(unint64_t, uint64_t))(v17 + 8))(((unint64_t)v21 + v56) & v57, v58);
    goto LABEL_48;
  }
  int v54 = v18 | v23;
  if (v23 < v18)
  {
    unint64_t v29 = ((unint64_t)v21 + v24) & ~v19;
    unint64_t v52 = (v20 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v20;
    uint64_t v30 = v22;
    uint64_t v31 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v17 + 48);
    uint64_t v32 = ~v19;
    uint64_t v33 = *(void *)(*(void *)(v14 - 8) + 64) + v19;
    int v51 = v31(v29, v18, v15);
    int v34 = v31(((unint64_t)v30 + v33) & v32, v18, v15);
    int v22 = v30;
    size_t v21 = (unsigned __int16 *)v52;
    int v28 = v54;
    if (v51) {
      goto LABEL_4;
    }
LABEL_16:
    uint64_t v14 = v55;
    if (!v34) {
      goto LABEL_52;
    }
    goto LABEL_47;
  }
  uint64_t v53 = *(void *)(v15 - 8);
  size_t v39 = v25 + v26;
  long long v40 = *(uint64_t (**)(unsigned __int16 *, uint64_t))(v16 + 48);
  uint64_t v41 = v14;
  int v42 = v40(v21, v23);
  int v34 = ((uint64_t (*)(unsigned __int16 *, uint64_t, uint64_t))v40)(v22, v23, v41);
  size_t v27 = v39;
  uint64_t v17 = v53;
  if (!v42) {
    goto LABEL_16;
  }
LABEL_4:
  if (!v34)
  {
LABEL_57:
    (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v16 + 16))(v21, v22, v55);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v17 + 16))(((unint64_t)v21 + v56) & v57, ((unint64_t)v22 + v56) & v57, v58);
    if (!v28) {
      *((unsigned char *)v21 + v27) = 0;
    }
    return a1;
  }
LABEL_48:
  if (v28) {
    size_t v49 = v27;
  }
  else {
    size_t v49 = v27 + 1;
  }
  memcpy(v21, v22, v49);
  return a1;
}

uint64_t initializeWithTake for AlertScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = a2 & 0xFFFFFFFFFFFFFFF8;
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v4 + 40) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_OWORD *)(v4 + 24) = v6;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v7 - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(_DWORD *)(v10 + 80);
  uint64_t v13 = *(_DWORD *)(v10 + 80) | *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = (unsigned char *)((v13 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v13);
  uint64_t v15 = (unsigned __int16 *)((v13 + 56 + v5) & ~v13);
  uint64_t v16 = *(unsigned int *)(v9 + 84);
  uint64_t v17 = ~v12;
  uint64_t v18 = *(void *)(v9 + 64) + v12;
  size_t v19 = (v18 & ~v12) + *(void *)(v10 + 64);
  int v20 = v11 | v16;
  uint64_t v26 = v7;
  if (v11 | v16)
  {
    if (v16 >= v11)
    {
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + 56 + v5) & ~v13, v16, v8))goto LABEL_24; {
    }
      }
    else if (!(*(unsigned int (**)(unint64_t))(v10 + 48))(((unint64_t)v15 + v18) & v17))
    {
LABEL_24:
      (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v9 + 32))(v14, v15, v8);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32))((unint64_t)&v14[v18] & v17, ((unint64_t)v15 + v18) & v17, v26);
      if (!v20) {
        v14[v19] = 0;
      }
      return a1;
    }
  }
  else
  {
    if (!*((unsigned char *)v15 + v19)) {
      goto LABEL_24;
    }
    int v21 = (*((unsigned __int8 *)v15 + v19) - 1) << (8 * v19);
    if (v19 > 3) {
      int v21 = 0;
    }
    if (v19)
    {
      int v22 = v19 <= 3 ? (v18 & ~v12) + *(_DWORD *)(v10 + 64) : 4;
      switch(v22)
      {
        case 2:
          int v23 = *v15;
          break;
        case 3:
          int v23 = *v15 | (*(unsigned __int8 *)(((v13 + 56 + v5) & ~v13) + 2) << 16);
          break;
        case 4:
          int v23 = *(_DWORD *)v15;
          break;
        default:
          int v23 = *(unsigned __int8 *)v15;
          break;
      }
    }
    else
    {
      int v23 = 0;
    }
    if ((v23 | v21) == 0xFFFFFFFF) {
      goto LABEL_24;
    }
  }
  if (v20) {
    size_t v24 = v19;
  }
  else {
    size_t v24 = v19 + 1;
  }
  memcpy(v14, v15, v24);
  return a1;
}

uint64_t assignWithTake for AlertScene(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  char v8 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  char v11 = *(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(unsigned char *)(v6 + 40) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(void *)(v6 + 48) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v12 - 8);
  uint64_t v15 = *(void *)(v13 - 8);
  uint64_t v16 = *(unsigned int *)(v15 + 84);
  uint64_t v17 = *(_DWORD *)(v15 + 80);
  uint64_t v18 = *(_DWORD *)(v15 + 80) | *(unsigned __int8 *)(v14 + 80);
  size_t v19 = (unsigned __int16 *)((v18 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v18);
  int v20 = (unsigned __int16 *)((v18 + 56 + v7) & ~v18);
  uint64_t v21 = *(unsigned int *)(v14 + 84);
  uint64_t v22 = *(void *)(v14 + 64) + v17;
  uint64_t v23 = v22 & ~v17;
  uint64_t v24 = *(void *)(v15 + 64);
  size_t v25 = v23 + v24;
  int v26 = v16 | v21;
  uint64_t v55 = ~v17;
  uint64_t v56 = v13;
  uint64_t v53 = v12;
  uint64_t v54 = v22;
  if (!(v16 | v21))
  {
    char v33 = 8 * v25;
    if (*((unsigned char *)v19 + v25))
    {
      int v34 = (*((unsigned __int8 *)v19 + v25) - 1) << v33;
      if (v25 > 3) {
        int v34 = 0;
      }
      if (v25)
      {
        int v35 = v25 <= 3 ? v25 : 4;
        switch(v35)
        {
          case 2:
            int v36 = *v19;
            break;
          case 3:
            int v36 = *v19 | (*((unsigned __int8 *)v19 + 2) << 16);
            break;
          case 4:
            int v36 = *(_DWORD *)v19;
            break;
          default:
            int v36 = *(unsigned __int8 *)v19;
            break;
        }
      }
      else
      {
        int v36 = 0;
      }
      if ((v36 | v34) != 0xFFFFFFFF)
      {
        if (!*((unsigned char *)v20 + v25)) {
          goto LABEL_57;
        }
        int v41 = (*((unsigned __int8 *)v20 + v25) - 1) << v33;
        if (v25 > 3) {
          int v41 = 0;
        }
        if (v25)
        {
          int v42 = v25 <= 3 ? v25 : 4;
          switch(v42)
          {
            case 2:
              int v43 = *v20;
              break;
            case 3:
              int v43 = *v20 | (*((unsigned __int8 *)v20 + 2) << 16);
              break;
            case 4:
              int v43 = *(_DWORD *)v20;
              break;
            default:
              int v43 = *(unsigned __int8 *)v20;
              break;
          }
        }
        else
        {
          int v43 = 0;
        }
        if ((v43 | v41) == 0xFFFFFFFF) {
          goto LABEL_57;
        }
        goto LABEL_48;
      }
    }
    if (!*((unsigned char *)v20 + v25)) {
      goto LABEL_52;
    }
    int v44 = (*((unsigned __int8 *)v20 + v25) - 1) << v33;
    if (v25 > 3) {
      int v44 = 0;
    }
    if (v25)
    {
      int v45 = v25 <= 3 ? v25 : 4;
      switch(v45)
      {
        case 2:
          int v46 = *v20;
          break;
        case 3:
          int v46 = *v20 | (*((unsigned __int8 *)v20 + 2) << 16);
          break;
        case 4:
          int v46 = *(_DWORD *)v20;
          break;
        default:
          int v46 = *(unsigned __int8 *)v20;
          break;
      }
    }
    else
    {
      int v46 = 0;
    }
    if ((v46 | v44) == 0xFFFFFFFF)
    {
LABEL_52:
      (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v14 + 40))(v19, v20, v12);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 40))(((unint64_t)v19 + v54) & v55, ((unint64_t)v20 + v54) & v55, v56);
      return a1;
    }
LABEL_47:
    (*(void (**)(unsigned __int16 *, uint64_t))(v14 + 8))(v19, v12);
    (*(void (**)(unint64_t, uint64_t))(v15 + 8))(((unint64_t)v19 + v54) & v55, v56);
    goto LABEL_48;
  }
  int v52 = v16 | v21;
  if (v21 < v16)
  {
    unint64_t v27 = ((unint64_t)v19 + v22) & ~v17;
    unint64_t v50 = (v18 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v18;
    int v28 = v20;
    unint64_t v29 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v15 + 48);
    uint64_t v30 = ~v17;
    uint64_t v31 = *(void *)(*(void *)(v12 - 8) + 64) + v17;
    int v49 = v29(v27, v16, v13);
    int v32 = v29(((unint64_t)v28 + v31) & v30, v16, v13);
    int v20 = v28;
    size_t v19 = (unsigned __int16 *)v50;
    int v26 = v52;
    if (v49) {
      goto LABEL_4;
    }
LABEL_16:
    uint64_t v12 = v53;
    if (!v32) {
      goto LABEL_52;
    }
    goto LABEL_47;
  }
  uint64_t v51 = *(void *)(v13 - 8);
  size_t v37 = v23 + v24;
  int v38 = *(uint64_t (**)(unsigned __int16 *, uint64_t))(v14 + 48);
  uint64_t v39 = v12;
  int v40 = v38(v19, v21);
  int v32 = ((uint64_t (*)(unsigned __int16 *, uint64_t, uint64_t))v38)(v20, v21, v39);
  size_t v25 = v37;
  uint64_t v15 = v51;
  if (!v40) {
    goto LABEL_16;
  }
LABEL_4:
  if (!v32)
  {
LABEL_57:
    (*(void (**)(unsigned __int16 *, unsigned __int16 *, uint64_t))(v14 + 32))(v19, v20, v53);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v15 + 32))(((unint64_t)v19 + v54) & v55, ((unint64_t)v20 + v54) & v55, v56);
    if (!v26) {
      *((unsigned char *)v19 + v25) = 0;
    }
    return a1;
  }
LABEL_48:
  if (v26) {
    size_t v47 = v25;
  }
  else {
    size_t v47 = v25 + 1;
  }
  memcpy(v19, v20, v47);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertScene(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  if (v9 <= v5) {
    int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    int v10 = *(_DWORD *)(v7 + 84);
  }
  if (v10) {
    unsigned int v11 = v10 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  if (v10) {
    uint64_t v13 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v13 = *(void *)(v7 + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = *(_DWORD *)(v7 + 80);
  uint64_t v15 = *(_DWORD *)(v7 + 80) | *(unsigned __int8 *)(v4 + 80);
  uint64_t v16 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v14;
  int v17 = a2 - v12;
  if (a2 <= v12) {
    goto LABEL_33;
  }
  uint64_t v18 = v13 + (v16 & ~v14) + ((v15 + 56) & ~v15);
  char v19 = 8 * v18;
  if (v18 > 3) {
    goto LABEL_16;
  }
  unsigned int v21 = ((v17 + ~(-1 << v19)) >> v19) + 1;
  if (HIWORD(v21))
  {
    int v20 = *(_DWORD *)(a1 + v18);
    if (v20) {
      goto LABEL_23;
    }
LABEL_33:
    if ((v11 & 0x80000000) == 0)
    {
      unint64_t v25 = *(void *)(a1 + 8);
      if (v25 >= 0xFFFFFFFF) {
        LODWORD(v25) = -1;
      }
      return (v25 + 1);
    }
    if (v10)
    {
      unint64_t v27 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v15 + 56) & ~v15;
      if (v5 >= v9)
      {
        int v30 = (*(uint64_t (**)(unint64_t))(v4 + 48))(v27);
        BOOL v29 = v30 != 0;
        uint64_t result = (v30 - 1);
        if (result != 0 && v29) {
          return result;
        }
      }
      else
      {
        int v28 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))((v16 + v27) & ~v14, v9, v6);
        BOOL v29 = v28 != 0;
        uint64_t result = (v28 - 1);
        if (result != 0 && v29) {
          return result;
        }
      }
    }
    return 0;
  }
  if (v21 > 0xFF)
  {
    int v20 = *(unsigned __int16 *)(a1 + v18);
    if (*(_WORD *)(a1 + v18)) {
      goto LABEL_23;
    }
    goto LABEL_33;
  }
  if (v21 < 2) {
    goto LABEL_33;
  }
LABEL_16:
  int v20 = *(unsigned __int8 *)(a1 + v18);
  if (!*(unsigned char *)(a1 + v18)) {
    goto LABEL_33;
  }
LABEL_23:
  int v22 = (v20 - 1) << v19;
  if (v18 > 3) {
    int v22 = 0;
  }
  if (v18)
  {
    if (v18 <= 3) {
      int v23 = v18;
    }
    else {
      int v23 = 4;
    }
    switch(v23)
    {
      case 2:
        int v24 = *(unsigned __int16 *)a1;
        break;
      case 3:
        int v24 = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        int v24 = *(_DWORD *)a1;
        break;
      default:
        int v24 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v24 = 0;
  }
  return v12 + (v24 | v22) + 1;
}

void storeEnumTagSinglePayload for AlertScene(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v8 = *(void *)(a4 + 24);
  unsigned int v9 = *(_DWORD *)(v7 + 84);
  uint64_t v10 = *(void *)(v8 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(void *)(v7 + 64);
  if (v11 <= v9) {
    unsigned int v13 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = v14;
  }
  uint64_t v16 = *(_DWORD *)(v10 + 80);
  uint64_t v17 = *(_DWORD *)(v10 + 80) | *(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = v12 + v16;
  size_t v19 = ((v12 + v16) & ~v16) + *(void *)(*(void *)(v8 - 8) + 64);
  if (v13) {
    size_t v20 = v19;
  }
  else {
    size_t v20 = v19 + 1;
  }
  size_t v21 = v20 + ((v17 + 56) & ~v17);
  BOOL v22 = a3 >= v15;
  unsigned int v23 = a3 - v15;
  if (v23 == 0 || !v22)
  {
LABEL_23:
    if (v15 < a2) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  if (v21 > 3)
  {
    int v6 = 1;
    if (v15 < a2) {
      goto LABEL_24;
    }
    goto LABEL_16;
  }
  unsigned int v24 = ((v23 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
  if (!HIWORD(v24))
  {
    if (v24 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v24 > 1;
    }
    goto LABEL_23;
  }
  int v6 = 4;
  if (v15 < a2)
  {
LABEL_24:
    unsigned int v25 = ~v15 + a2;
    if (v21 < 4)
    {
      int v26 = (v25 >> (8 * v21)) + 1;
      if (v21)
      {
        int v27 = v25 & ~(-1 << (8 * v21));
        bzero((void *)a1, v21);
        if (v21 == 3)
        {
          *(_WORD *)a1 = v27;
          *(unsigned char *)(a1 + 2) = BYTE2(v27);
        }
        else if (v21 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *(unsigned char *)a1 = v27;
        }
      }
    }
    else
    {
      bzero((void *)a1, v21);
      *(_DWORD *)a1 = v25;
      int v26 = 1;
    }
    switch(v6)
    {
      case 1:
        *(unsigned char *)(a1 + v21) = v26;
        return;
      case 2:
        *(_WORD *)(a1 + v21) = v26;
        return;
      case 3:
        goto LABEL_77;
      case 4:
        *(_DWORD *)(a1 + v21) = v26;
        return;
      default:
        return;
    }
  }
LABEL_16:
  switch(v6)
  {
    case 1:
      *(unsigned char *)(a1 + v21) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)(a1 + v21) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_77:
      __break(1u);
      JUMPOUT(0x187D4F620);
    case 4:
      *(_DWORD *)(a1 + v21) = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (a2)
      {
LABEL_32:
        if ((v14 & 0x80000000) != 0)
        {
          int v28 = (unsigned char *)(((a1 & 0xFFFFFFFFFFFFFFF8) + v17 + 56) & ~v17);
          if (v14 >= a2)
          {
            if (a2 + 1 <= v13)
            {
              if (a2 != -1)
              {
                if (v9 >= v11)
                {
                  int v36 = *(void (**)(unsigned char *, uint64_t))(v7 + 56);
                  uint64_t v37 = a2 + 1;
                  v36(v28, v37);
                }
                else
                {
                  int v34 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
                  uint64_t v35 = a2 + 1;
                  v34((unint64_t)&v28[v18] & ~v16, v35, v11, v8);
                }
              }
            }
            else
            {
              if (v19 <= 3) {
                int v32 = ~(-1 << (8 * v19));
              }
              else {
                int v32 = -1;
              }
              if (v19)
              {
                int v30 = v32 & (a2 - v13);
                if (v19 <= 3) {
                  int v33 = v19;
                }
                else {
                  int v33 = 4;
                }
                bzero(v28, v19);
                switch(v33)
                {
                  case 2:
LABEL_72:
                    *(_WORD *)int v28 = v30;
                    break;
                  case 3:
LABEL_71:
                    *(_WORD *)int v28 = v30;
                    v28[2] = BYTE2(v30);
                    break;
                  case 4:
LABEL_73:
                    *(_DWORD *)int v28 = v30;
                    break;
                  default:
LABEL_58:
                    *int v28 = v30;
                    break;
                }
              }
            }
          }
          else
          {
            if (v20 <= 3) {
              int v29 = ~(-1 << (8 * v20));
            }
            else {
              int v29 = -1;
            }
            if (v20)
            {
              int v30 = v29 & (~v14 + a2);
              if (v20 <= 3) {
                int v31 = v20;
              }
              else {
                int v31 = 4;
              }
              bzero(v28, v20);
              switch(v31)
              {
                case 2:
                  goto LABEL_72;
                case 3:
                  goto LABEL_71;
                case 4:
                  goto LABEL_73;
                default:
                  goto LABEL_58;
              }
            }
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(unsigned char *)(a1 + 16) = 0;
          *(void *)a1 = a2 ^ 0x80000000;
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          *(void *)(a1 + 8) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for AlertScene()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for AlertScene.DialogContent()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata completion function for AlertDialog()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AlertDialog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a3 + 16;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v6 + 8);
  uint64_t v7 = *(void *)(v5 - 8);
  unint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v4 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = *(void *)(v7 + 64) + v10;
  unint64_t v12 = ((v11 + ((v8 + 56) & ~v8)) & ~v10) + *(void *)(v9 + 64);
  int v13 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000;
  uint64_t v14 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  if ((v10 | v8) > 7 || v13 != 0 || v12 > 0x18)
  {
    a1 = v14 + (((v10 | v8) & 0xF8 ^ 0x1F8) & ((v10 | v8) + 16));
    swift_retain();
  }
  else
  {
    uint64_t v28 = v4;
    uint64_t v29 = ~v10;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    unint64_t v17 = a1 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = a2 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    uint64_t v20 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
    char v21 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
    uint64_t v26 = v5;
    uint64_t v27 = v11;
    swift_retain();
    swift_retain();
    outlined copy of Text.Storage(v19, v20, v21);
    *(void *)(v17 + 24) = v19;
    *(void *)(v17 + 32) = v20;
    *(unsigned char *)(v17 + 40) = v21;
    *(void *)(v17 + 48) = *(void *)(v18 + 48);
    unint64_t v22 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v8 + 56) & ~v8;
    uint64_t v23 = (v18 + v8 + 56) & ~v8;
    unsigned int v24 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16);
    swift_bridgeObjectRetain();
    v24(v22, v23, v26);
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v9 + 16))((v22 + v27) & v29, (v23 + v27) & v29, v28);
  }
  return a1;
}

uint64_t destroy for AlertDialog(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  a1 &= 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v8 = *(uint64_t (**)(unint64_t))(v7 + 8);
  unint64_t v9 = (v6 + *(void *)(v5 + 56) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);

  return v8(v9);
}

uint64_t initializeWithCopy for AlertDialog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v9 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  char v10 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v8, v9, v10);
  *(void *)(v6 + 24) = v8;
  *(void *)(v6 + 32) = v9;
  *(unsigned char *)(v6 + 40) = v10;
  *(void *)(v6 + 48) = *(void *)(v7 + 48);
  uint64_t v11 = *(void *)(a3 + 24);
  unint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16);
  uint64_t v13 = *(void *)(v11 - 8) + 16;
  uint64_t v14 = *(unsigned __int8 *)(*(void *)(v11 - 8) + 80);
  uint64_t v15 = (v14 + 56 + v6) & ~v14;
  uint64_t v16 = (v14 + 56 + v7) & ~v14;
  swift_bridgeObjectRetain();
  v12(v15, v16, v11);
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 16))((*(void *)(v13 + 48) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(void *)(v13 + 48) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t assignWithCopy for AlertDialog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v9 = *(void *)(v7 + 32);
  char v10 = *(unsigned char *)(v7 + 40);
  outlined copy of Text.Storage(v8, v9, v10);
  uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  char v13 = *(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(void *)(v6 + 24) = v8;
  *(void *)(v6 + 32) = v9;
  *(unsigned char *)(v6 + 40) = v10;
  outlined consume of Text.Storage(v11, v12, v13);
  *(void *)(v6 + 48) = *(void *)(v7 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v15 = v14 + 24;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  unint64_t v17 = (v16 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v16;
  uint64_t v18 = (v16 + 56 + v7) & ~v16;
  (*(void (**)(unint64_t, uint64_t))(v14 + 24))(v17, v18);
  uint64_t v19 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v19 + 24))((*(void *)(v15 + 40) + *(unsigned __int8 *)(v19 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80), (*(void *)(v15 + 40) + *(unsigned __int8 *)(v19 + 80) + v18) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  return a1;
}

uint64_t initializeWithTake for AlertDialog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_OWORD *)(v5 + 24) = v6;
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  unint64_t v10 = (v9 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  unint64_t v11 = (v9 + 56 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v9;
  (*(void (**)(unint64_t, unint64_t))(v7 + 32))(v10, v11);
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))((*(void *)(v8 + 32) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(void *)(v8 + 32) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t assignWithTake for AlertDialog(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  unint64_t v6 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = a2 & 0xFFFFFFFFFFFFFFF8;
  char v8 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 32);
  char v11 = *(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFF8) + 40);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(unsigned char *)(v6 + 40) = v8;
  outlined consume of Text.Storage(v9, v10, v11);
  *(void *)(v6 + 48) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v13 = v12 + 40;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = (v14 + 56 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v14;
  uint64_t v16 = (v14 + 56 + v7) & ~v14;
  (*(void (**)(unint64_t, uint64_t))(v12 + 40))(v15, v16);
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 40))((*(void *)(v13 + 24) + *(unsigned __int8 *)(v17 + 80) + v15) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(void *)(v13 + 24) + *(unsigned __int8 *)(v17 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertDialog(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  if (v5 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v4 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  int v14 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  uint64_t v15 = ((v10 + v11 + ((v9 + 56) & ~v9)) & ~v11) + *(void *)(*(void *)(v6 - 8) + 64);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)(a1 + v15);
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_28:
      if ((v12 & 0x80000000) != 0)
      {
        unint64_t v24 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v9 + 56) & ~v9;
        if (v5 == v13) {
          return (*(uint64_t (**)(unint64_t))(v4 + 48))(v24);
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))((v24 + v10 + v11) & ~v11, v8, v6);
        }
      }
      else
      {
        unint64_t v23 = *(void *)(a1 + 8);
        if (v23 >= 0xFFFFFFFF) {
          LODWORD(v23) = -1;
        }
        return (v23 + 1);
      }
    }
  }
  int v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(unsigned char *)(a1 + v15)) {
    goto LABEL_28;
  }
LABEL_18:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v21 = v15;
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *(unsigned __int16 *)a1;
        break;
      case 3:
        int v22 = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v13 + (v22 | v20) + 1;
}

void storeEnumTagSinglePayload for AlertDialog(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  size_t v15 = ((v11 + v12 + ((v10 + 56) & ~v10)) & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v16 = a3 >= v14;
  unsigned int v17 = a3 - v14;
  if (v17 != 0 && v16)
  {
    if (v15 <= 3)
    {
      unsigned int v21 = ((v17 + ~(-1 << (8 * v15))) >> (8 * v15)) + 1;
      if (HIWORD(v21))
      {
        int v18 = 4;
      }
      else if (v21 >= 0x100)
      {
        int v18 = 2;
      }
      else
      {
        int v18 = v21 > 1;
      }
    }
    else
    {
      int v18 = 1;
    }
  }
  else
  {
    int v18 = 0;
  }
  if (v14 < a2)
  {
    unsigned int v19 = ~v14 + a2;
    if (v15 < 4)
    {
      int v20 = (v19 >> (8 * v15)) + 1;
      if (v15)
      {
        int v22 = v19 & ~(-1 << (8 * v15));
        bzero((void *)a1, v15);
        if (v15 == 3)
        {
          *(_WORD *)a1 = v22;
          *(unsigned char *)(a1 + 2) = BYTE2(v22);
        }
        else if (v15 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *(unsigned char *)a1 = v22;
        }
      }
    }
    else
    {
      bzero((void *)a1, v15);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        *(unsigned char *)(a1 + v15) = v20;
        return;
      case 2:
        *(_WORD *)(a1 + v15) = v20;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)(a1 + v15) = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      *(unsigned char *)(a1 + v15) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)(a1 + v15) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x187D50470);
    case 4:
      *(_DWORD *)(a1 + v15) = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if ((v13 & 0x80000000) != 0)
        {
          unint64_t v23 = ((a1 & 0xFFFFFFFFFFFFFFF8) + v10 + 56) & ~v10;
          if (v7 == v14)
          {
            unint64_t v24 = *(void (**)(unint64_t))(v6 + 56);
            v24(v23);
          }
          else
          {
            unint64_t v25 = (v23 + v11 + v12) & ~v12;
            uint64_t v26 = *(void (**)(unint64_t))(v9 + 56);
            v26(v25);
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *(unsigned char *)(a1 + 16) = 0;
          *(void *)a1 = a2 ^ 0x80000000;
          *(void *)(a1 + 8) = 0;
        }
        else
        {
          *(void *)(a1 + 8) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for AlertDialog()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **sub_187D504B0()
{
  return &protocol witness table for _EmptyScene;
}

uint64_t type metadata completion function for AlertScene.DialogContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      swift_initEnumMetadataSinglePayload();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AlertScene.DialogContent(void *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  int v11 = *(_DWORD *)(v9 + 80);
  uint64_t v12 = *(void *)(v7 + 64) + v11;
  unint64_t v13 = v12 & ~(unint64_t)v11;
  uint64_t v14 = *(void *)(v9 + 64);
  uint64_t v15 = v13 + v14;
  int v16 = v10 | v8;
  if (v10 | v8) {
    size_t v17 = v13 + v14;
  }
  else {
    size_t v17 = v15 + 1;
  }
  uint64_t v18 = (*(unsigned char *)(v7 + 80) | v11);
  if (v18 > 7 || ((*(_DWORD *)(v7 + 80) | v11) & 0x100000) != 0 || v17 > 0x18)
  {
    uint64_t v21 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v21 + ((v18 + 16) & ~v18));
    swift_retain();
    return a1;
  }
  unint64_t v26 = ~(unint64_t)v11;
  if (!v16)
  {
    if (!*((unsigned char *)a2 + v15)) {
      goto LABEL_33;
    }
    int v22 = (*((unsigned __int8 *)a2 + v15) - 1) << (8 * v15);
    if (v15 > 3) {
      int v22 = 0;
    }
    if (v15)
    {
      int v23 = v15 <= 3 ? v15 : 4;
      switch(v23)
      {
        case 2:
          int v24 = *a2;
          break;
        case 3:
          int v24 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v24 = *(_DWORD *)a2;
          break;
        default:
          int v24 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v24 = 0;
    }
    if ((v24 | v22) == 0xFFFFFFFF) {
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  if (v8 >= v10)
  {
    if (!(*(unsigned int (**)(unsigned __int16 *))(v7 + 48))(a2)) {
      goto LABEL_33;
    }
LABEL_27:
    memcpy(a1, a2, v17);
    return a1;
  }
  if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((unint64_t)a2 + v12) & ~(unint64_t)v11, v10, v5))
  {
    goto LABEL_27;
  }
LABEL_33:
  (*(void (**)(void *, unsigned __int16 *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v12) & v26, ((unint64_t)a2 + v12) & v26, v5);
  if (!v16) {
    *((unsigned char *)a1 + v15) = 0;
  }
  return a1;
}

uint64_t destroy for AlertScene.DialogContent(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = ~v10;
  uint64_t v12 = *(void *)(v5 + 64) + v10;
  uint64_t v18 = v8;
  if (v9 | v6)
  {
    if (v6 >= v9)
    {
      uint64_t result = (*(uint64_t (**)(unsigned __int16 *))(v5 + 48))(a1);
      if (result) {
        return result;
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((unint64_t)a1 + v12) & v11, v9, v7);
      if (result) {
        return result;
      }
    }
    goto LABEL_19;
  }
  uint64_t v14 = (v12 & ~v10) + *(void *)(v8 + 64);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_19;
  }
  int v15 = (*((unsigned __int8 *)a1 + v14) - 1) << (8 * v14);
  if (v14 > 3) {
    int v15 = 0;
  }
  if (v14)
  {
    if (v14 > 3) {
      LODWORD(v14) = 4;
    }
    switch((int)v14)
    {
      case 2:
        LODWORD(v14) = *a1;
        break;
      case 3:
        LODWORD(v14) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v14) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v14) = *(unsigned __int8 *)a1;
        break;
    }
  }
  int v16 = v14 | v15;
  uint64_t result = (v16 + 1);
  if (v16 == -1)
  {
LABEL_19:
    (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(a1, v4);
    size_t v17 = *(uint64_t (**)(unint64_t, uint64_t))(v18 + 8);
    return v17(((unint64_t)a1 + v12) & v11, v7);
  }
  return result;
}

unsigned char *initializeWithCopy for AlertScene.DialogContent(unsigned char *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ~v11;
  uint64_t v13 = *(void *)(v7 + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(v9 + 64);
  int v15 = v10 | v8;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      if (!(*(unsigned int (**)(unsigned __int16 *))(v7 + 48))(a2)) {
        goto LABEL_24;
      }
    }
    else if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((unint64_t)a2 + v13) & v12, v10, v5))
    {
LABEL_24:
      (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((unint64_t)&a1[v13] & v12, ((unint64_t)a2 + v13) & v12, v5);
      if (!v15) {
        a1[v14] = 0;
      }
      return a1;
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + v14)) {
      goto LABEL_24;
    }
    int v16 = (*((unsigned __int8 *)a2 + v14) - 1) << (8 * v14);
    if (v14 > 3) {
      int v16 = 0;
    }
    if (v14)
    {
      int v17 = v14 <= 3 ? (v13 & ~v11) + *(_DWORD *)(v9 + 64) : 4;
      switch(v17)
      {
        case 2:
          int v18 = *a2;
          break;
        case 3:
          int v18 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v18 = *(_DWORD *)a2;
          break;
        default:
          int v18 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v18 = 0;
    }
    if ((v18 | v16) == 0xFFFFFFFF) {
      goto LABEL_24;
    }
  }
  if (v15) {
    size_t v19 = v14;
  }
  else {
    size_t v19 = v14 + 1;
  }
  memcpy(a1, a2, v19);
  return a1;
}

unsigned __int16 *assignWithCopy for AlertScene.DialogContent(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v44 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v44 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ~v9;
  uint64_t v11 = *(void *)(v5 + 64) + v9;
  size_t v12 = (v11 & ~v9) + *(void *)(v7 + 64);
  int v13 = v8 | v6;
  uint64_t v42 = ~v9;
  uint64_t v43 = v4;
  uint64_t v41 = v11;
  if (!(v8 | v6))
  {
    char v24 = 8 * v12;
    if (*((unsigned char *)a1 + v12))
    {
      int v25 = (*((unsigned __int8 *)a1 + v12) - 1) << v24;
      if (v12 > 3) {
        int v25 = 0;
      }
      if (v12)
      {
        int v26 = v12 <= 3 ? (v11 & ~v9) + *(_DWORD *)(v7 + 64) : 4;
        switch(v26)
        {
          case 2:
            int v27 = *a1;
            break;
          case 3:
            int v27 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v27 = *(_DWORD *)a1;
            break;
          default:
            int v27 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v27 = 0;
      }
      if ((v27 | v25) != 0xFFFFFFFF)
      {
        if (*((unsigned char *)a2 + v12))
        {
          int v32 = (*((unsigned __int8 *)a2 + v12) - 1) << v24;
          if (v12 > 3) {
            int v32 = 0;
          }
          if (v12)
          {
            int v33 = v12 <= 3 ? v12 : 4;
            switch(v33)
            {
              case 2:
                int v34 = *a2;
                break;
              case 3:
                int v34 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
                break;
              case 4:
                int v34 = *(_DWORD *)a2;
                break;
              default:
                int v34 = *(unsigned __int8 *)a2;
                break;
            }
          }
          else
          {
            int v34 = 0;
          }
          if ((v34 | v32) != 0xFFFFFFFF) {
            goto LABEL_5;
          }
        }
        goto LABEL_60;
      }
    }
    if (!*((unsigned char *)a2 + v12)) {
      goto LABEL_55;
    }
    int v35 = (*((unsigned __int8 *)a2 + v12) - 1) << v24;
    if (v12 > 3) {
      int v35 = 0;
    }
    if (v12)
    {
      int v36 = v12 <= 3 ? v12 : 4;
      switch(v36)
      {
        case 2:
          int v37 = *a2;
          break;
        case 3:
          int v37 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v37 = *(_DWORD *)a2;
          break;
        default:
          int v37 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v37 = 0;
    }
    uint64_t v10 = v42;
    if ((v37 | v35) == 0xFFFFFFFF)
    {
LABEL_55:
      (*(void (**)(unsigned __int16 *, const void *, uint64_t))(v5 + 24))(a1, v3, v44);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)a1 + v11) & v10, ((unint64_t)v3 + v11) & v10, v43);
      return a1;
    }
LABEL_50:
    (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(a1, v44);
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)a1 + v11) & v10, v43);
    if (v13) {
      size_t v22 = v12;
    }
    else {
      size_t v22 = v12 + 1;
    }
    int v23 = a1;
    goto LABEL_54;
  }
  if (v6 < v8)
  {
    unint64_t v14 = ((unint64_t)a1 + v11) & v10;
    uint64_t v40 = *(void *)(v4 - 8);
    int v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48);
    size_t v17 = (v11 & ~v9) + *(void *)(v40 + 64);
    uint64_t v18 = *(void *)(*(void *)(v44 - 8) + 64) + v9;
    uint64_t v19 = *(void *)(a3 + 24);
    int v39 = v16(v14, v8, v4);
    unint64_t v20 = ((unint64_t)a2 + v18) & v10;
    size_t v12 = v17;
    int v21 = v16(v20, v8, v19);
    int v13 = v8 | v6;
    unint64_t v3 = a2;
    uint64_t v7 = v40;
    if (v39) {
      goto LABEL_4;
    }
LABEL_19:
    uint64_t v11 = v41;
    uint64_t v10 = v42;
    if (!v21) {
      goto LABEL_55;
    }
    goto LABEL_50;
  }
  int v29 = v8 | v6;
  int v30 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
  int v31 = v30(a1, v6, v44);
  int v21 = v30(a2, v6, v44);
  int v13 = v29;
  unint64_t v3 = a2;
  if (!v31) {
    goto LABEL_19;
  }
LABEL_4:
  if (v21)
  {
LABEL_5:
    if (v13) {
      size_t v22 = v12;
    }
    else {
      size_t v22 = v12 + 1;
    }
    int v23 = a1;
LABEL_54:
    memcpy(v23, v3, v22);
    return a1;
  }
LABEL_60:
  (*(void (**)(unsigned __int16 *, const void *, uint64_t))(v5 + 16))(a1, v3, v44);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)a1 + v41) & v42, ((unint64_t)v3 + v41) & v42, v43);
  if (!v13) {
    *((unsigned char *)a1 + v12) = 0;
  }
  return a1;
}

unsigned char *initializeWithTake for AlertScene.DialogContent(unsigned char *a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = ~v11;
  uint64_t v13 = *(void *)(v7 + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(v9 + 64);
  int v15 = v10 | v8;
  if (v10 | v8)
  {
    if (v8 >= v10)
    {
      if (!(*(unsigned int (**)(unsigned __int16 *))(v7 + 48))(a2)) {
        goto LABEL_24;
      }
    }
    else if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(((unint64_t)a2 + v13) & v12, v10, v5))
    {
LABEL_24:
      (*(void (**)(unsigned char *, unsigned __int16 *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&a1[v13] & v12, ((unint64_t)a2 + v13) & v12, v5);
      if (!v15) {
        a1[v14] = 0;
      }
      return a1;
    }
  }
  else
  {
    if (!*((unsigned char *)a2 + v14)) {
      goto LABEL_24;
    }
    int v16 = (*((unsigned __int8 *)a2 + v14) - 1) << (8 * v14);
    if (v14 > 3) {
      int v16 = 0;
    }
    if (v14)
    {
      int v17 = v14 <= 3 ? (v13 & ~v11) + *(_DWORD *)(v9 + 64) : 4;
      switch(v17)
      {
        case 2:
          int v18 = *a2;
          break;
        case 3:
          int v18 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v18 = *(_DWORD *)a2;
          break;
        default:
          int v18 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v18 = 0;
    }
    if ((v18 | v16) == 0xFFFFFFFF) {
      goto LABEL_24;
    }
  }
  if (v15) {
    size_t v19 = v14;
  }
  else {
    size_t v19 = v14 + 1;
  }
  memcpy(a1, a2, v19);
  return a1;
}

unsigned __int16 *assignWithTake for AlertScene.DialogContent(unsigned __int16 *a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v44 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v44 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(v4 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ~v9;
  uint64_t v11 = *(void *)(v5 + 64) + v9;
  size_t v12 = (v11 & ~v9) + *(void *)(v7 + 64);
  int v13 = v8 | v6;
  uint64_t v42 = ~v9;
  uint64_t v43 = v4;
  uint64_t v41 = v11;
  if (!(v8 | v6))
  {
    char v24 = 8 * v12;
    if (*((unsigned char *)a1 + v12))
    {
      int v25 = (*((unsigned __int8 *)a1 + v12) - 1) << v24;
      if (v12 > 3) {
        int v25 = 0;
      }
      if (v12)
      {
        int v26 = v12 <= 3 ? (v11 & ~v9) + *(_DWORD *)(v7 + 64) : 4;
        switch(v26)
        {
          case 2:
            int v27 = *a1;
            break;
          case 3:
            int v27 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            int v27 = *(_DWORD *)a1;
            break;
          default:
            int v27 = *(unsigned __int8 *)a1;
            break;
        }
      }
      else
      {
        int v27 = 0;
      }
      if ((v27 | v25) != 0xFFFFFFFF)
      {
        if (*((unsigned char *)a2 + v12))
        {
          int v32 = (*((unsigned __int8 *)a2 + v12) - 1) << v24;
          if (v12 > 3) {
            int v32 = 0;
          }
          if (v12)
          {
            int v33 = v12 <= 3 ? v12 : 4;
            switch(v33)
            {
              case 2:
                int v34 = *a2;
                break;
              case 3:
                int v34 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
                break;
              case 4:
                int v34 = *(_DWORD *)a2;
                break;
              default:
                int v34 = *(unsigned __int8 *)a2;
                break;
            }
          }
          else
          {
            int v34 = 0;
          }
          if ((v34 | v32) != 0xFFFFFFFF) {
            goto LABEL_5;
          }
        }
        goto LABEL_60;
      }
    }
    if (!*((unsigned char *)a2 + v12)) {
      goto LABEL_55;
    }
    int v35 = (*((unsigned __int8 *)a2 + v12) - 1) << v24;
    if (v12 > 3) {
      int v35 = 0;
    }
    if (v12)
    {
      int v36 = v12 <= 3 ? v12 : 4;
      switch(v36)
      {
        case 2:
          int v37 = *a2;
          break;
        case 3:
          int v37 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v37 = *(_DWORD *)a2;
          break;
        default:
          int v37 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v37 = 0;
    }
    uint64_t v10 = v42;
    if ((v37 | v35) == 0xFFFFFFFF)
    {
LABEL_55:
      (*(void (**)(unsigned __int16 *, const void *, uint64_t))(v5 + 40))(a1, v3, v44);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(((unint64_t)a1 + v11) & v10, ((unint64_t)v3 + v11) & v10, v43);
      return a1;
    }
LABEL_50:
    (*(void (**)(unsigned __int16 *, uint64_t))(v5 + 8))(a1, v44);
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)a1 + v11) & v10, v43);
    if (v13) {
      size_t v22 = v12;
    }
    else {
      size_t v22 = v12 + 1;
    }
    int v23 = a1;
    goto LABEL_54;
  }
  if (v6 < v8)
  {
    unint64_t v14 = ((unint64_t)a1 + v11) & v10;
    uint64_t v40 = *(void *)(v4 - 8);
    int v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v40 + 48);
    size_t v17 = (v11 & ~v9) + *(void *)(v40 + 64);
    uint64_t v18 = *(void *)(*(void *)(v44 - 8) + 64) + v9;
    uint64_t v19 = *(void *)(a3 + 24);
    int v39 = v16(v14, v8, v4);
    unint64_t v20 = ((unint64_t)a2 + v18) & v10;
    size_t v12 = v17;
    int v21 = v16(v20, v8, v19);
    int v13 = v8 | v6;
    unint64_t v3 = a2;
    uint64_t v7 = v40;
    if (v39) {
      goto LABEL_4;
    }
LABEL_19:
    uint64_t v11 = v41;
    uint64_t v10 = v42;
    if (!v21) {
      goto LABEL_55;
    }
    goto LABEL_50;
  }
  int v29 = v8 | v6;
  int v30 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
  int v31 = v30(a1, v6, v44);
  int v21 = v30(a2, v6, v44);
  int v13 = v29;
  unint64_t v3 = a2;
  if (!v31) {
    goto LABEL_19;
  }
LABEL_4:
  if (v21)
  {
LABEL_5:
    if (v13) {
      size_t v22 = v12;
    }
    else {
      size_t v22 = v12 + 1;
    }
    int v23 = a1;
LABEL_54:
    memcpy(v23, v3, v22);
    return a1;
  }
LABEL_60:
  (*(void (**)(unsigned __int16 *, const void *, uint64_t))(v5 + 32))(a1, v3, v44);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)a1 + v41) & v42, ((unint64_t)v3 + v41) & v42, v43);
  if (!v13) {
    *((unsigned char *)a1 + v12) = 0;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertScene.DialogContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned int *)(v7 + 84);
  if (v9 <= v5) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  unsigned int v11 = v10 - 1;
  if (!v10) {
    unsigned int v11 = 0;
  }
  uint64_t v12 = *(unsigned __int8 *)(v7 + 80);
  if (v10) {
    uint64_t v13 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  else {
    uint64_t v13 = *(void *)(*(void *)(v6 - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v12;
  int v15 = a2 - v11;
  if (a2 > v11)
  {
    uint64_t v16 = v13 + (v14 & ~v12);
    char v17 = 8 * v16;
    if (v16 > 3) {
      goto LABEL_12;
    }
    unsigned int v19 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v19))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (v18) {
        goto LABEL_19;
      }
    }
    else
    {
      if (v19 <= 0xFF)
      {
        if (v19 < 2) {
          goto LABEL_29;
        }
LABEL_12:
        int v18 = *((unsigned __int8 *)a1 + v16);
        if (!*((unsigned char *)a1 + v16)) {
          goto LABEL_29;
        }
LABEL_19:
        int v20 = (v18 - 1) << v17;
        if (v16 > 3) {
          int v20 = 0;
        }
        if (v16)
        {
          if (v16 <= 3) {
            int v21 = v16;
          }
          else {
            int v21 = 4;
          }
          switch(v21)
          {
            case 2:
              int v22 = *a1;
              break;
            case 3:
              int v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v22 = *(_DWORD *)a1;
              break;
            default:
              int v22 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v22 = 0;
        }
        return v11 + (v22 | v20) + 1;
      }
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_19;
      }
    }
  }
LABEL_29:
  if (v10 < 2) {
    return 0;
  }
  if (v5 >= v9) {
    unsigned int v24 = (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    unsigned int v24 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))(((unint64_t)a1 + v14) & ~v12, v9, v6);
  }
  if (v24 >= 2) {
    return v24 - 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for AlertScene.DialogContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= v8) {
    unsigned int v14 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v10 + 84);
  }
  if (v14) {
    unsigned int v15 = v14 - 1;
  }
  else {
    unsigned int v15 = 0;
  }
  uint64_t v16 = v12 + v13;
  size_t v17 = ((v12 + v13) & ~v13) + *(void *)(*(void *)(v9 - 8) + 64);
  if (v14) {
    size_t v18 = v17;
  }
  else {
    size_t v18 = v17 + 1;
  }
  BOOL v19 = a3 >= v15;
  unsigned int v20 = a3 - v15;
  if (v20 == 0 || !v19)
  {
LABEL_19:
    if (v15 < a2) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
  if (v18 > 3)
  {
    int v6 = 1;
    if (v15 < a2) {
      goto LABEL_20;
    }
    goto LABEL_27;
  }
  unsigned int v21 = ((v20 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
  if (!HIWORD(v21))
  {
    if (v21 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v21 > 1;
    }
    goto LABEL_19;
  }
  int v6 = 4;
  if (v15 < a2)
  {
LABEL_20:
    unsigned int v22 = ~v15 + a2;
    if (v18 < 4)
    {
      int v23 = (v22 >> (8 * v18)) + 1;
      if (v18)
      {
        int v24 = v22 & ~(-1 << (8 * v18));
        bzero(a1, v18);
        if (v18 == 3)
        {
          *(_WORD *)a1 = v24;
          a1[2] = BYTE2(v24);
        }
        else if (v18 == 2)
        {
          *(_WORD *)a1 = v24;
        }
        else
        {
          *a1 = v24;
        }
      }
    }
    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v22;
      int v23 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v18] = v23;
        return;
      case 2:
        *(_WORD *)&a1[v18] = v23;
        return;
      case 3:
        goto LABEL_63;
      case 4:
        *(_DWORD *)&a1[v18] = v23;
        return;
      default:
        return;
    }
  }
LABEL_27:
  uint64_t v25 = ~v13;
  switch(v6)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_32;
    case 3:
LABEL_63:
      __break(1u);
      JUMPOUT(0x187D51DF8);
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_31;
    default:
LABEL_31:
      if (a2)
      {
LABEL_32:
        if (v14 >= 2)
        {
          if (a2 + 1 <= v14)
          {
            if (a2 != -1)
            {
              if (v8 >= v11)
              {
                int v31 = *(void (**)(char *, uint64_t))(v7 + 56);
                uint64_t v32 = a2 + 1;
                v31(a1, v32);
              }
              else
              {
                int v29 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
                uint64_t v30 = a2 + 1;
                v29((unint64_t)&a1[v16] & v25, v30, v11, v9);
              }
            }
          }
          else
          {
            if (v17 <= 3) {
              int v26 = ~(-1 << (8 * v17));
            }
            else {
              int v26 = -1;
            }
            if (v17)
            {
              int v27 = v26 & (a2 - v14);
              if (v17 <= 3) {
                int v28 = v17;
              }
              else {
                int v28 = 4;
              }
              bzero(a1, v17);
              switch(v28)
              {
                case 2:
                  *(_WORD *)a1 = v27;
                  break;
                case 3:
                  *(_WORD *)a1 = v27;
                  a1[2] = BYTE2(v27);
                  break;
                case 4:
                  *(_DWORD *)a1 = v27;
                  break;
                default:
                  *a1 = v27;
                  break;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t getEnumTag for AlertScene.DialogContent(unsigned __int16 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v4 = v3;
  unsigned int v5 = *(_DWORD *)(v3 + 84);
  uint64_t v6 = *(void *)(v2 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v3 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = v8 + v9;
  if (v7 | v5)
  {
    if (v5 >= v7) {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
    else {
      return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(((unint64_t)a1 + v10) & ~v9, v7, v2);
    }
  }
  else
  {
    uint64_t v12 = (v10 & ~v9) + *(void *)(*(void *)(v2 - 8) + 64);
    if (*((unsigned char *)a1 + v12))
    {
      int v13 = (*((unsigned __int8 *)a1 + v12) - 1) << (8 * v12);
      if (v12 > 3) {
        int v13 = 0;
      }
      if (v12)
      {
        if (v12 > 3) {
          LODWORD(v12) = 4;
        }
        switch((int)v12)
        {
          case 2:
            LODWORD(v12) = *a1;
            break;
          case 3:
            LODWORD(v12) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v12) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v12) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return (v12 | v13) + 1;
    }
    else
    {
      return 0;
    }
  }
}

void destructiveInjectEnumTag for AlertScene.DialogContent(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5;
  unsigned int v7 = *(_DWORD *)(v5 + 84);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v5 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v14 = ((v10 + v11) & ~v11) + v12;
  if (v13 >= a2)
  {
    if (v13)
    {
      if (!a2) {
        return;
      }
    }
    else
    {
      a1[v14] = 0;
      if (!a2) {
        return;
      }
    }
    if (v7 >= v9)
    {
      unsigned int v20 = *(void (**)(void))(v6 + 56);
      v20();
    }
    else
    {
      unint64_t v18 = (unint64_t)&a1[v10 + v11] & ~v11;
      BOOL v19 = *(void (**)(unint64_t))(v8 + 56);
      v19(v18);
    }
    return;
  }
  unsigned int v15 = ~v13 + a2;
  if (v14 >= 4)
  {
    bzero(a1, ((v10 + v11) & ~v11) + v12);
    *(_DWORD *)a1 = v15;
    LOBYTE(v16) = 1;
    if (v13) {
      return;
    }
    goto LABEL_26;
  }
  int v16 = (v15 >> (8 * v14)) + 1;
  if (!v14)
  {
LABEL_25:
    if (v13) {
      return;
    }
    goto LABEL_26;
  }
  int v17 = v15 & ~(-1 << (8 * v14));
  bzero(a1, ((v10 + v11) & ~v11) + v12);
  if (v14 == 3)
  {
    *(_WORD *)a1 = v17;
    a1[2] = BYTE2(v17);
    goto LABEL_25;
  }
  if (v14 == 2)
  {
    *(_WORD *)a1 = v17;
    if (v13) {
      return;
    }
    goto LABEL_26;
  }
  *a1 = v17;
  if (!v13) {
LABEL_26:
  }
    a1[v14] = v16;
}

uint64_t destroy for DialogConfiguration(uint64_t a1)
{
  swift_release();
  swift_release();
  outlined consume of Text.Storage(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for DialogConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 40);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v5, v6, v7);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v7;
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for DialogConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  char v6 = *(unsigned char *)(a2 + 40);
  outlined copy of Text.Storage(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  char v9 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(unsigned char *)(a1 + 40) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for DialogConfiguration(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 40);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(void *)(a1 + 32);
  char v7 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = v4;
  outlined consume of Text.Storage(v5, v6, v7);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for DialogConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DialogConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DialogConfiguration()
{
  return &type metadata for DialogConfiguration;
}

void AlertDialog.body.getter()
{
}

void static EffectiveLabelStyle.titleAndIcon.getter(void *a1@<X8>)
{
  *a1 = &type metadata for TitleAndIconLabelStyle;
}

void static EffectiveLabelStyle.iconOnly.getter(void *a1@<X8>)
{
  *a1 = &type metadata for IconOnlyLabelStyle;
}

void static EffectiveLabelStyle.titleOnly.getter(void *a1@<X8>)
{
  *a1 = &type metadata for TitleOnlyLabelStyle;
}

BOOL static EffectiveLabelStyle.== infix(_:_:)(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t EnvironmentValues.effectiveLabelStyle.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t (*EnvironmentValues.effectiveLabelStyle.modify(uint64_t a1))(void *a1)
{
  *(void *)(a1 + 16) = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.effectiveLabelStyle.modify;
}

uint64_t EnvironmentValues.effectiveLabelStyle.modify(void *a1)
{
  uint64_t v1 = a1[2];
  a1[1] = *a1;
  type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t getEnumTagSinglePayload for EffectiveLabelStyle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for EffectiveLabelStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EffectiveLabelStyleKey()
{
  return &type metadata for EffectiveLabelStyleKey;
}

uint64_t key path setter for EnvironmentValues.labelIconToTitleSpacing : EnvironmentValues()
{
  return EnvironmentValues.labelIconToTitleSpacing.setter();
}

uint64_t key path getter for EnvironmentValues.backgroundProminence : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.backgroundProminence.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.backgroundProminence : EnvironmentValues()
{
  return EnvironmentValues.backgroundProminence.setter();
}

uint64_t closure #1 in ListLabelStyle.Implementation.preV6Layout.getter(char a1, _OWORD *a2)
{
  uint64_t v4 = swift_allocObject();
  long long v5 = a2[2];
  *(_OWORD *)(v4 + 72) = a2[3];
  long long v6 = a2[5];
  *(_OWORD *)(v4 + 88) = a2[4];
  *(_OWORD *)(v4 + 104) = v6;
  *(_OWORD *)(v4 + 114) = *(_OWORD *)((char *)a2 + 90);
  long long v7 = a2[1];
  *(_OWORD *)(v4 + 24) = *a2;
  *(_OWORD *)(v4 + 40) = v7;
  *(unsigned char *)(v4 + 16) = a1;
  *(_OWORD *)(v4 + 56) = v5;
  outlined retain of ListLabelStyle.Implementation((uint64_t)a2);
  type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>(0);
  lazy protocol witness table accessor for type AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>> and conformance AccessibilityAdaptiveStack<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)> and conformance TupleView<A>, type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>);

  return Group.init<A, B>(subviews:transform:)();
}

uint64_t closure #1 in closure #1 in ListLabelStyle.Implementation.preV6Layout.getter@<X0>(unsigned __int8 a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = SubviewsCollection.endIndex.getter();
  int v7 = (v6 != 0) & a1;
  if (v6)
  {
    uint64_t v47 = static VerticalAlignment.center.getter();
    uint64_t v48 = 0;
    LOBYTE(v49) = 1;
    uint64_t v8 = *(void *)(a2 + 96);
    uint64_t v9 = *(unsigned __int8 *)(a2 + 104);
    int v10 = *(unsigned __int8 *)(a2 + 105);
    outlined retain of ListLabelStyle.Implementation(a2);
    outlined copy of Environment<ListItemTint?>.Content(v8, v9, v10);
    specialized Environment.wrappedValue.getter(v8, v9 | (v10 << 8), (uint64_t)&v44);
    outlined consume of Environment<ListItemTint?>.Content(v8, v9, v10);
    uint64_t v11 = v44;
    if ((void)v44 == 1)
    {
      static Color.accentColor.getter();
    }
    else
    {
      static Color.secondary.getter();
      if (v11) {
        swift_release();
      }
    }
    outlined release of ListLabelStyle.Implementation(a2);
    type metadata accessor for EnvironmentPropertyKey<ListItemTintKey>(0, &lazy cache variable for type metadata for HStack<LabelStyleConfiguration.Icon>, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, (uint64_t)&protocol witness table for LabelStyleConfiguration.Icon, MEMORY[0x1E4F415B8]);
    lazy protocol witness table accessor for type HStack<LabelStyleConfiguration.Icon> and conformance HStack<A>();
    View.defaultForegroundColor(_:)();
    swift_release();
    long long v15 = v44;
    unsigned int v43 = v45[0];
    uint64_t v17 = *(void *)&v45[8];
    uint64_t v16 = *(void *)&v45[16];
    uint64_t v18 = *(void *)(a2 + 80);
    char v19 = *(unsigned char *)(a2 + 88);
    outlined retain of ListLabelStyle.Implementation(a2);
    outlined copy of Environment<Bool>.Content(v18, v19);
    specialized Environment.wrappedValue.getter(v18, v19, &v47);
    outlined consume of Environment<Bool>.Content(v18, v19);
    uint64_t v41 = v17;
    uint64_t v39 = v15;
    if (v47 > 8u)
    {
      outlined release of ListLabelStyle.Implementation(a2);
      uint64_t v38 = 0;
    }
    else
    {
      outlined copy of Environment<Bool>.Content(v18, v19);
      specialized Environment.wrappedValue.getter(v18, v19, &v47);
      outlined consume of Environment<Bool>.Content(v18, v19);
      unsigned int v20 = v47;
      outlined release of ListLabelStyle.Implementation(a2);
      uint64_t v21 = 1;
      if (v20 < 7) {
        uint64_t v21 = 2;
      }
      uint64_t v38 = v21;
    }
    uint64_t v40 = *((void *)&v15 + 1);
    uint64_t v42 = v16;
    uint64_t KeyPath = swift_getKeyPath();
    long long v22 = *(_OWORD *)(a2 + 16);
    long long v44 = *(_OWORD *)a2;
    *(_OWORD *)int v45 = v22;
    *(_OWORD *)&v45[9] = *(_OWORD *)(a2 + 25);
    type metadata accessor for ScaledMetric<CGFloat>();
    ScaledMetric.wrappedValue.getter();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v36 = v47;
    unsigned int v13 = v48;
    uint64_t v35 = v49;
    unsigned int v12 = v50;
    uint64_t v34 = v51;
    uint64_t v33 = v52;
    if (v7)
    {
      ScaledMetric.wrappedValue.getter();
      uint64_t v23 = *(void *)(a2 + 64);
      uint64_t v24 = *(unsigned __int8 *)(a2 + 72);
      int v25 = *(unsigned __int8 *)(a2 + 73);
      outlined retain of ListLabelStyle.Implementation(a2);
      outlined copy of Environment<CGFloat?>.Content(v23, v24, v25);
      specialized Environment.wrappedValue.getter(v23, v24 | (v25 << 8));
      outlined consume of Environment<CGFloat?>.Content(v23, v24, v25);
      outlined release of ListLabelStyle.Implementation(a2);
    }
    unsigned int v14 = v43;
  }
  else
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    unsigned int v12 = 0;
    uint64_t v35 = 0;
    unsigned int v13 = 0;
    uint64_t v36 = 0;
    uint64_t v38 = 0;
    uint64_t KeyPath = 0;
    uint64_t v42 = 0;
    uint64_t v41 = 0;
    unsigned int v14 = 0;
    uint64_t v40 = 0;
    uint64_t v39 = 0;
  }
  uint64_t v26 = v14;
  View.bodyHeadOutdent(_:)();
  type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>();
  MEMORY[0x1F4188790](v27);
  type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>();
  type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>(0);
  lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type AccessibilityAdaptiveStack<Group<GroupElementsOfContent<LabelStyleConfiguration.Icon, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?, StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>>)>>>> and conformance AccessibilityAdaptiveStack<A>(&lazy protocol witness table cache variable for type InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>> and conformance InvertedViewInputPredicate<A>, (void (*)(uint64_t))type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>, _AlignmentWritingModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>);
  View.staticIf<A, B>(_:trueModifier:)();
  swift_release();
  long long v28 = v44;
  uint64_t v29 = *(void *)v45;
  uint64_t v30 = *(void *)&v45[24];
  uint64_t v31 = v46;
  *(void *)a3 = v39;
  *(void *)(a3 + 8) = v40;
  *(void *)(a3 + 16) = v26;
  *(void *)(a3 + 24) = v41;
  *(void *)(a3 + 32) = v42;
  *(void *)(a3 + 40) = KeyPath;
  *(void *)(a3 + 48) = v38;
  *(void *)(a3 + 56) = v36;
  *(void *)(a3 + 64) = v13;
  *(void *)(a3 + 72) = v35;
  *(void *)(a3 + 80) = v12;
  *(void *)(a3 + 88) = v34;
  *(void *)(a3 + 96) = v33;
  *(_OWORD *)(a3 + 104) = v28;
  *(void *)(a3 + 120) = v29;
  *(_OWORD *)(a3 + 128) = *(_OWORD *)&v45[8];
  *(void *)(a3 + 144) = v30;
  *(void *)(a3 + 152) = v31;
  outlined copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?(v39, v40, v26, v41);
  return outlined consume of ModifiedContent<ModifiedContent<ModifiedContent<HStack<LabelStyleConfiguration.Icon>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Image.Scale>>, _FrameLayout>?(v39, v40, v26, v41);
}

uint64_t closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.preV6Layout.getter@<X0>(uint64_t *a1@<X0>, _OWORD *a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = static HorizontalAlignment.listRowSeparatorLeading.getter();
  uint64_t v10 = swift_allocObject();
  long long v11 = a2[5];
  *(_OWORD *)(v10 + 80) = a2[4];
  *(_OWORD *)(v10 + 96) = v11;
  *(_OWORD *)(v10 + 106) = *(_OWORD *)((char *)a2 + 90);
  long long v12 = a2[1];
  *(_OWORD *)(v10 + 16) = *a2;
  *(_OWORD *)(v10 + 32) = v12;
  long long v13 = a2[3];
  *(_OWORD *)(v10 + 48) = a2[2];
  *(_OWORD *)(v10 + 64) = v13;
  *(unsigned char *)(v10 + 122) = a3;
  *a4 = v7;
  a4[1] = v8;
  a4[2] = v9;
  a4[3] = partial apply for closure #1 in closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.preV6Layout.getter;
  a4[4] = v10;
  outlined retain of ListLabelStyle.Implementation((uint64_t)a2);

  return swift_retain();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ListLabelStyle.Implementation()
{
  return static StaticIf<>._viewListCount(inputs:)();
}

uint64_t sub_187D531FC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.backgroundProminence.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187D53240()
{
  return EnvironmentValues.backgroundProminence.setter();
}

uint64_t sub_187D53278@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.labelIconToTitleSpacing.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_187D532BC()
{
  return EnvironmentValues.labelIconToTitleSpacing.setter();
}

uint64_t protocol witness for static AlignmentID.defaultValue(in:) in conformance VerticalAlignment.ListLabelIconAlignment()
{
  uint64_t v0 = static VerticalAlignment.center.getter();
  return MEMORY[0x18C10E980](v0);
}

uint64_t protocol witness for static AlignmentID._combineExplicit(childValue:_:into:) in conformance VerticalAlignment.ListLabelIconAlignment()
{
  return MEMORY[0x1F40FD2D8]();
}

uint64_t assignWithCopy for ListLabelStyle.Implementation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  char v9 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  char v13 = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<Bool>.Content(v12, v13);
  uint64_t v14 = *(void *)(a1 + 48);
  char v15 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = v12;
  *(unsigned char *)(a1 + 56) = v13;
  outlined consume of Environment<Bool>.Content(v14, v15);
  uint64_t v16 = *(void *)(a2 + 64);
  char v17 = *(unsigned char *)(a2 + 73);
  unsigned __int8 v18 = *(unsigned char *)(a2 + 72);
  outlined copy of Environment<CGFloat?>.Content(v16, v18, v17);
  uint64_t v19 = *(void *)(a1 + 64);
  char v20 = *(unsigned char *)(a1 + 73);
  *(void *)(a1 + 64) = v16;
  uint64_t v21 = *(unsigned __int8 *)(a1 + 72);
  *(unsigned char *)(a1 + 72) = v18;
  *(unsigned char *)(a1 + 73) = v17;
  outlined consume of Environment<CGFloat?>.Content(v19, v21, v20);
  uint64_t v22 = *(void *)(a2 + 80);
  char v23 = *(unsigned char *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v22, v23);
  uint64_t v24 = *(void *)(a1 + 80);
  char v25 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = v22;
  *(unsigned char *)(a1 + 88) = v23;
  outlined consume of Environment<Bool>.Content(v24, v25);
  uint64_t v26 = *(void *)(a2 + 96);
  char v27 = *(unsigned char *)(a2 + 105);
  uint64_t v28 = *(unsigned __int8 *)(a2 + 104);
  outlined copy of Environment<ListItemTint?>.Content(v26, v28, v27);
  uint64_t v29 = *(void *)(a1 + 96);
  char v30 = *(unsigned char *)(a1 + 105);
  *(void *)(a1 + 96) = v26;
  uint64_t v31 = *(unsigned __int8 *)(a1 + 104);
  *(unsigned char *)(a1 + 104) = v28;
  *(unsigned char *)(a1 + 105) = v27;
  outlined consume of Environment<ListItemTint?>.Content(v29, v31, v30);
  return a1;
}

uint64_t assignWithTake for ListLabelStyle.Implementation(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  *(void *)(a1 + 32) = a2[4];
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  char v11 = *((unsigned char *)a2 + 56);
  uint64_t v12 = *(void *)(a1 + 48);
  char v13 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = a2[6];
  *(unsigned char *)(a1 + 56) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  char v14 = *((unsigned char *)a2 + 72);
  char v15 = *((unsigned char *)a2 + 73);
  uint64_t v16 = *(void *)(a1 + 64);
  char v17 = *(unsigned char *)(a1 + 73);
  *(void *)(a1 + 64) = a2[8];
  uint64_t v18 = *(unsigned __int8 *)(a1 + 72);
  *(unsigned char *)(a1 + 72) = v14;
  *(unsigned char *)(a1 + 73) = v15;
  outlined consume of Environment<CGFloat?>.Content(v16, v18, v17);
  char v19 = *((unsigned char *)a2 + 88);
  uint64_t v20 = *(void *)(a1 + 80);
  char v21 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = a2[10];
  *(unsigned char *)(a1 + 88) = v19;
  outlined consume of Environment<Bool>.Content(v20, v21);
  char v22 = *((unsigned char *)a2 + 104);
  char v23 = *((unsigned char *)a2 + 105);
  uint64_t v24 = *(void *)(a1 + 96);
  char v25 = *(unsigned char *)(a1 + 105);
  *(void *)(a1 + 96) = a2[12];
  uint64_t v26 = *(unsigned __int8 *)(a1 + 104);
  *(unsigned char *)(a1 + 104) = v22;
  *(unsigned char *)(a1 + 105) = v23;
  outlined consume of Environment<ListItemTint?>.Content(v24, v26, v25);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListLabelStyle.Implementation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 106)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ListLabelStyle.Implementation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 104) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 106) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 106) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_187D53654()
{
  return objectdestroyTm_21();
}

uint64_t sub_187D53664()
{
  return objectdestroyTm_21();
}

uint64_t partial apply for closure #1 in ListLabelStyle.Implementation.preV6Layout.getter(char a1)
{
  return closure #1 in ListLabelStyle.Implementation.preV6Layout.getter(a1, (_OWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in ListLabelStyle.Implementation.preV6Layout.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in ListLabelStyle.Implementation.preV6Layout.getter(*(unsigned char *)(v1 + 16), v1 + 24, a1);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.preV6Layout.getter@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.preV6Layout.getter(a1, *(_OWORD **)(v2 + 16), *(unsigned char *)(v2 + 24), a2);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_187D53710()
{
  return objectdestroyTm_21();
}

uint64_t sub_187D5371C()
{
  return swift_deallocObject();
}

uint64_t sub_187D53730()
{
  return objectdestroyTm_21();
}

void *type metadata accessor for VerticalAlignment.ListLabelIconAlignment()
{
  return &unk_1ED425CC8;
}

double DelaySource.duration.getter(uint64_t a1)
{
  double v2 = *(double *)(v1 + *(int *)(a1 + 36));
  return v2 + (*(double (**)(void))(*(void *)(a1 + 24) + 40))(*(void *)(a1 + 16));
}

uint64_t DelaySource.update(value:mix:at:)(uint64_t a1, uint64_t a2, __n128 a3, double a4)
{
  return (*(uint64_t (**)(uint64_t, void, __n128, double))(*(void *)(a2 + 24) + 24))(a1, *(void *)(a2 + 16), a3, a4 - *(double *)(v4 + *(int *)(a2 + 36)));
}

uint64_t DelaySource.update(velocity:mix:at:)(uint64_t a1, uint64_t a2, __n128 a3, double a4)
{
  return (*(uint64_t (**)(uint64_t, void, __n128, double))(*(void *)(a2 + 24) + 32))(a1, *(void *)(a2 + 16), a3, a4 - *(double *)(v4 + *(int *)(a2 + 36)));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DelaySource<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DelaySource.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DelaySource);
}

uint64_t AnimatedValueTrack.delay(_:)@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  return AnimatedValueTrack.delay(_:)((uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DelaySource, a1, a2);
}

double SequencedTrackSource.duration.getter(void *a1)
{
  double v2 = (*(double (**)(void))(a1[5] + 40))(a1[3]);
  return v2 + (*(double (**)(void))(a1[6] + 40))(a1[4]);
}

uint64_t SequencedTrackSource.update(value:mix:at:)(uint64_t a1, void *a2, double a3, double a4)
{
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[3];
  v10.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v8 + 40))(v9, v8);
  if (v10.n128_f64[0] <= a4) {
    return (*(uint64_t (**)(uint64_t, void, double, double))(a2[6] + 24))(a1, a2[4], a3, a4 - v10.n128_f64[0]);
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128, __n128))(v8 + 24);
  v10.n128_f64[0] = a3;
  v11.n128_f64[0] = a4;

  return v12(a1, v9, v8, v10, v11);
}

uint64_t SequencedTrackSource.update(velocity:mix:at:)(uint64_t a1, void *a2, double a3, double a4)
{
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[3];
  v10.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v8 + 40))(v9, v8);
  if (v10.n128_f64[0] <= a4) {
    return (*(uint64_t (**)(uint64_t, void, double, double))(a2[6] + 32))(a1, a2[4], a3, a4 - v10.n128_f64[0]);
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128, __n128))(v8 + 32);
  v10.n128_f64[0] = a3;
  v11.n128_f64[0] = a4;

  return v12(a1, v9, v8, v10, v11);
}

uint64_t static SequencedTrackSource.== infix(_:_:)()
{
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    type metadata accessor for SequencedTrackSource();
    char v0 = dispatch thunk of static Equatable.== infix(_:_:)();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t SequencedTrackSource.init(first:second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1, a3);
  uint64_t v8 = type metadata accessor for SequencedTrackSource();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 60), a2, a4);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SequencedTrackSource<A, B, C>()
{
  return static SequencedTrackSource.== infix(_:_:)();
}

uint64_t AnimatedValueTrackSource.sequenced<A>(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  char v14 = (char *)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v18, v20, a2, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  v23[1] = swift_getAssociatedTypeWitness();
  uint64_t v23[2] = a2;
  v23[3] = a3;
  void v23[4] = a4;
  v23[5] = a5;
  a6[3] = type metadata accessor for SequencedTrackSource();
  a6[4] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a6);
  return SequencedTrackSource.init(first:second:)((uint64_t)v18, (uint64_t)v14, a2, a3, (uint64_t)boxed_opaque_existential_1);
}

uint64_t AnimatedValueTrackSource.sequenced<A>(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7 = v6;
  uint64_t v13 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v20 + 16))(v19, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v7, a2);
  v23[1] = swift_getAssociatedTypeWitness();
  uint64_t v23[2] = a3;
  v23[3] = a2;
  void v23[4] = a5;
  v23[5] = a4;
  a6[3] = type metadata accessor for SequencedTrackSource();
  a6[4] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a6);
  return SequencedTrackSource.init(first:second:)((uint64_t)v19, (uint64_t)v15, a3, a2, (uint64_t)boxed_opaque_existential_1);
}

uint64_t AnimatedValueTrack.sequenced(before:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return AnimatedValueTrack.sequenced(before:)(a1, (void (*)(void *__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t))AnimatedValueTrackSource.sequenced<A>(before:), a2);
}

uint64_t AnimatedValueTrack.sequenced(after:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return AnimatedValueTrack.sequenced(before:)(a1, (void (*)(void *__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t))AnimatedValueTrackSource.sequenced<A>(after:), a2);
}

uint64_t AnimatedValueTrack.sequenced(before:)@<X0>(void *a1@<X0>, void (*a2)(void *__return_ptr, void *, uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  __n128 v11 = __swift_project_boxed_opaque_existential_1(a1, v9);
  a2(v21, v11, v7, v9, v8, v10);
  uint64_t v12 = v22;
  uint64_t v13 = v23;
  uint64_t v14 = __swift_project_boxed_opaque_existential_1(v21, v22);
  double v15 = MEMORY[0x1F4188790](v14);
  double v17 = (char *)&v21[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v18 + 16))(v17, v15);
  AnimatedValueTrack.init<A>(source:)((uint64_t)v17, v12, v13, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
}

uint64_t TimingCurveTrackSource.update(value:mix:at:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v9 = *(double (**)(uint64_t, uint64_t))(v7 + 40);
  double v10 = v9(v8, v7);
  double v11 = UnitCurve.value(at:)(a4 / v10);
  v12.n128_f64[0] = v11 * v9(v8, v7);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128, __n128))(v7 + 24);
  v14.n128_f64[0] = a3;

  return v13(a1, v8, v7, v14, v12);
}

uint64_t TimingCurveTrackSource.update(velocity:mix:at:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v9 = *(double (**)(uint64_t, uint64_t))(v7 + 40);
  double v10 = v9(v8, v7);
  double v11 = UnitCurve.value(at:)(a4 / v10);
  v12.n128_f64[0] = v11 * v9(v8, v7);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128, __n128))(v7 + 32);
  v14.n128_f64[0] = a3;

  return v13(a1, v8, v7, v14, v12);
}

uint64_t static TimingCurveTrackSource.== infix(_:_:)()
{
  if (dispatch thunk of static Equatable.== infix(_:_:)())
  {
    type metadata accessor for TimingCurveTrackSource();
    char v0 = static UnitCurve.== infix(_:_:)();
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

uint64_t protocol witness for AnimatedValueTrackSource.duration.getter in conformance TimingCurveTrackSource<A>(uint64_t a1)
{
  return TimingCurveTrackSource.duration.getter(a1);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TimingCurveTrackSource<A>()
{
  return static TimingCurveTrackSource.== infix(_:_:)();
}

double AnimatedValueTrackSource.timingCurve(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v17 = *v9;
  uint64_t v10 = *((void *)v9 + 2);
  uint64_t v11 = *((void *)v9 + 3);
  char v12 = *((unsigned char *)v9 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v3, a2);
  uint64_t v13 = type metadata accessor for TimingCurveTrackSource();
  a3[3] = v13;
  a3[4] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a3);
  (*(void (**)(uint64_t *, char *, uint64_t))(v6 + 32))(boxed_opaque_existential_1, v8, a2);
  double v15 = (char *)boxed_opaque_existential_1 + *(int *)(v13 + 36);
  double result = *(double *)&v17;
  *(_OWORD *)double v15 = v17;
  *((void *)v15 + 2) = v10;
  *((void *)v15 + 3) = v11;
  v15[32] = v12;
  return result;
}

uint64_t AnimatedValueTrack.timingCurve(_:)@<X0>(long long *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v16 = *a1;
  uint64_t v4 = *((void *)a1 + 2);
  uint64_t v5 = *((void *)a1 + 3);
  char v6 = *((unsigned char *)a1 + 32);
  uint64_t v7 = v2[3];
  __swift_project_boxed_opaque_existential_1(v2, v7);
  long long v17 = v16;
  uint64_t v18 = v4;
  uint64_t v19 = v5;
  char v20 = v6;
  AnimatedValueTrackSource.timingCurve(_:)((uint64_t)&v17, v7, v21);
  uint64_t v8 = v22;
  uint64_t v9 = v23;
  uint64_t v10 = __swift_project_boxed_opaque_existential_1(v21, v22);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v14 + 16))(v13, v11);
  AnimatedValueTrack.init<A>(source:)((uint64_t)v13, v8, v9, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
}

uint64_t DurationTrackSource.update(value:mix:at:)(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4)
{
  double v5 = a4.n128_f64[0];
  unint64_t v6 = a3.n128_u64[0];
  double v8 = *(double *)(v4 + *(int *)(a2 + 36));
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  a4.n128_u64[0] = 0;
  if (v8 > 0.0) {
    a4.n128_f64[0] = (*(double (**)(void, void, __n128, double))(v9 + 40))(*(void *)(a2 + 16), *(void *)(a2 + 24), a3, 0.0)* v5/ v8;
  }
  double v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128, __n128))(v9 + 24);
  a3.n128_u64[0] = v6;

  return v11(a1, v10, v9, a3, a4);
}

uint64_t DurationTrackSource.update(velocity:mix:at:)(uint64_t a1, uint64_t a2, __n128 a3, __n128 a4)
{
  double v5 = a4.n128_f64[0];
  unint64_t v6 = a3.n128_u64[0];
  double v8 = *(double *)(v4 + *(int *)(a2 + 36));
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  a4.n128_u64[0] = 0;
  if (v8 > 0.0) {
    a4.n128_f64[0] = (*(double (**)(void, void, __n128, double))(v9 + 40))(*(void *)(a2 + 16), *(void *)(a2 + 24), a3, 0.0)* v5/ v8;
  }
  double v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128, __n128))(v9 + 32);
  a3.n128_u64[0] = v6;

  return v11(a1, v10, v9, a3, a4);
}

double protocol witness for AnimatedValueTrackSource.duration.getter in conformance DurationTrackSource<A>(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 36));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DurationTrackSource<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DelaySource.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DurationTrackSource);
}

uint64_t AnimatedValueTrackSource.duration(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t v7 = *(void *)(a1 - 8);
  double v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v3, a1, v8);
  if (a3 <= 0.0) {
    a3 = 0.0;
  }
  uint64_t v11 = type metadata accessor for DurationTrackSource();
  a2[3] = v11;
  a2[4] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  uint64_t result = (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v7 + 32))(boxed_opaque_existential_1, v10, a1);
  *(double *)((char *)boxed_opaque_existential_1 + *(int *)(v11 + 36)) = a3;
  return result;
}

uint64_t AnimatedValueTrack.duration(_:)@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  uint64_t v5 = v2[3];
  __swift_project_boxed_opaque_existential_1(v2, v5);
  AnimatedValueTrackSource.duration(_:)(v5, v15, a2);
  uint64_t v6 = v16;
  uint64_t v7 = v17;
  double v8 = __swift_project_boxed_opaque_existential_1(v15, v16);
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v12 + 16))(v11, v9);
  AnimatedValueTrack.init<A>(source:)((uint64_t)v11, v6, v7, a1);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
}

double SpeedTrackSource.duration.getter(uint64_t a1)
{
  double v2 = *(double *)(v1 + *(int *)(a1 + 36));
  (*(void (**)(void))(*(void *)(a1 + 24) + 40))(*(void *)(a1 + 16));
  double v4 = 1.0;
  if (v2 > 0.0) {
    double v4 = v2;
  }
  return v3 / v4;
}

uint64_t SpeedTrackSource.update(value:mix:at:)(uint64_t a1, uint64_t a2, __n128 a3, double a4)
{
  return (*(uint64_t (**)(uint64_t, void, __n128, double))(*(void *)(a2 + 24) + 24))(a1, *(void *)(a2 + 16), a3, *(double *)(v4 + *(int *)(a2 + 36)) * a4);
}

uint64_t SpeedTrackSource.update(velocity:mix:at:)(uint64_t a1, uint64_t a2, __n128 a3, double a4)
{
  return (*(uint64_t (**)(uint64_t, void, __n128, double))(*(void *)(a2 + 24) + 32))(a1, *(void *)(a2 + 16), a3, *(double *)(v4 + *(int *)(a2 + 36)) * a4);
}

BOOL static DelaySource.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v10 = a5(0, a3, a4);
  return *(double *)(a1 + *(int *)(v10 + 36)) == *(double *)(a2 + *(int *)(v10 + 36));
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SpeedTrackSource<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static DelaySource.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SpeedTrackSource);
}

uint64_t AnimatedValueTrackSource.delay(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(void, uint64_t, uint64_t)@<X2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t v11 = *(void *)(a1 - 8);
  double v12 = MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, v5, a1, v12);
  uint64_t v15 = a3(0, a1, a2);
  a4[3] = v15;
  a4[4] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  uint64_t result = (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v11 + 32))(boxed_opaque_existential_1, v14, a1);
  *(double *)((char *)boxed_opaque_existential_1 + *(int *)(v15 + 36)) = a5;
  return result;
}

uint64_t AnimatedValueTrack.speed(_:)@<X0>(uint64_t *a1@<X8>, double a2@<D0>)
{
  return AnimatedValueTrack.delay(_:)((uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for SpeedTrackSource, a1, a2);
}

uint64_t AnimatedValueTrack.delay(_:)@<X0>(uint64_t (*a1)(void, uint64_t, uint64_t)@<X1>, uint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t v7 = v3[3];
  uint64_t v8 = v3[4];
  __swift_project_boxed_opaque_existential_1(v3, v7);
  AnimatedValueTrackSource.delay(_:)(v7, v8, a1, v18, a3);
  uint64_t v9 = v19;
  uint64_t v10 = v20;
  uint64_t v11 = __swift_project_boxed_opaque_existential_1(v18, v19);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v18[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v15 + 16))(v14, v12);
  AnimatedValueTrack.init<A>(source:)((uint64_t)v14, v9, v10, a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
}

uint64_t TimingCurveTrackSource.duration.getter(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40))(*(void *)(a1 + 16));
}

uint64_t ReversedTrackSource.update(value:mix:at:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  v8.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v6 + 40))(v7, v6) - a4;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128, __n128))(v6 + 24);
  v10.n128_f64[0] = a3;

  return v9(a1, v7, v6, v10, v8);
}

uint64_t ReversedTrackSource.update(velocity:mix:at:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  v8.n128_f64[0] = (*(double (**)(uint64_t, uint64_t))(v6 + 40))(v7, v6) - a4;
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128, __n128))(v6 + 32);
  v10.n128_f64[0] = a3;

  return v9(a1, v7, v6, v10, v8);
}

uint64_t static ReversedTrackSource.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ReversedTrackSource<A>()
{
  return static ReversedTrackSource.== infix(_:_:)();
}

uint64_t AnimatedValueTrackSource.reversed()@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(a1 - 8);
  double v6 = MEMORY[0x1F4188790](a1);
  __n128 v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, v2, a1, v6);
  a2[3] = type metadata accessor for ReversedTrackSource();
  a2[4] = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a2);
  return (*(uint64_t (**)(uint64_t *, char *, uint64_t))(v5 + 32))(boxed_opaque_existential_1, v8, a1);
}

uint64_t AnimatedValueTrack.reversed()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1[3];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  AnimatedValueTrackSource.reversed()(v3, v13);
  uint64_t v4 = v14;
  uint64_t v5 = v15;
  double v6 = __swift_project_boxed_opaque_existential_1(v13, v14);
  double v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v10 + 16))(v9, v7);
  AnimatedValueTrack.init<A>(source:)((uint64_t)v9, v4, v5, a1);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
}

uint64_t type metadata accessor for ReversedTrackSource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SpeedTrackSource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for DurationTrackSource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TimingCurveTrackSource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SequencedTrackSource()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for DelaySource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for SequencedTrackSource()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SequencedTrackSource(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(void *)(a3 + 32);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for SequencedTrackSource(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 32);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187D558D8);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for TimingCurveTrackSource()
{
  return type metadata completion function for DelaySource();
}

uint64_t *initializeBufferWithCopyOfBuffer for TimingCurveTrackSource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 33 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    char v11 = *(unsigned char *)(v10 + 32);
    long long v12 = *(_OWORD *)(v10 + 16);
    unint64_t v13 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v10;
    *(_OWORD *)(v13 + 16) = v12;
    *(unsigned char *)(v13 + 32) = v11;
  }
  return v4;
}

uint64_t initializeWithCopy for TimingCurveTrackSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 32);
  long long v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(unsigned char *)(v7 + 32) = v9;
  return a1;
}

uint64_t assignWithCopy for TimingCurveTrackSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 32);
  long long v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(unsigned char *)(v7 + 32) = v9;
  return a1;
}

uint64_t initializeWithTake for TimingCurveTrackSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 32);
  long long v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(unsigned char *)(v7 + 32) = v9;
  return a1;
}

uint64_t assignWithTake for TimingCurveTrackSource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v9 = *(unsigned char *)(v8 + 32);
  long long v10 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v10;
  *(unsigned char *)(v7 + 32) = v9;
  return a1;
}

uint64_t getEnumTagSinglePayload for TimingCurveTrackSource(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 33;
    unsigned int v7 = (a2 - v5 + 255) >> (8 * v6);
    if (v6 < 4) {
      unsigned int v8 = v7 + 1;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    switch(v10)
    {
      case 1:
        int v11 = a1[v6];
        if (!a1[v6]) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v11 = *(unsigned __int16 *)&a1[v6];
        if (*(_WORD *)&a1[v6]) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D55D4CLL);
      case 4:
        int v11 = *(_DWORD *)&a1[v6];
        if (!v11) {
          break;
        }
LABEL_18:
        int v12 = (v11 - 1) << (8 * v6);
        if (v6 >= 4) {
          int v12 = 0;
        }
        if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
          int v13 = *a1;
        }
        else {
          int v13 = *(_DWORD *)a1;
        }
        return v5 + (v13 | v12) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for TimingCurveTrackSource(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 33;
  char v9 = 8 * v8;
  if (v7 >= a3)
  {
    int v13 = 0;
    if (v7 >= a2)
    {
LABEL_14:
      switch(v13)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_38;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            int v17 = *(void (**)(void))(v6 + 56);
            v17();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v10 = (a3 - v7 + 255) >> v9;
    if (v8 <= 3) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      int v12 = 4;
    }
    else {
      int v12 = 2;
    }
    if (v11 < 0x100) {
      int v12 = 1;
    }
    if (v11 >= 2) {
      int v13 = v12;
    }
    else {
      int v13 = 0;
    }
    if (v7 >= a2) {
      goto LABEL_14;
    }
  }
  unsigned int v14 = (~v7 + a2) >> v9;
  if (v8 < 4) {
    int v15 = v14 + 1;
  }
  else {
    int v15 = 1;
  }
  if (v8 >= 4) {
    unsigned int v16 = ~v7 + a2;
  }
  else {
    unsigned int v16 = (~(_BYTE)v7 + a2);
  }
  bzero(a1, v8);
  if (v8 == 1) {
    *a1 = v16;
  }
  else {
    *(_DWORD *)a1 = v16;
  }
  switch(v13)
  {
    case 1:
      a1[v8] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v15;
      break;
    case 3:
LABEL_38:
      __break(1u);
      JUMPOUT(0x187D55F34);
    case 4:
      *(_DWORD *)&a1[v8] = v15;
      break;
    default:
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for DelaySource(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  return v4;
}

uint64_t assignWithCopy for DelaySource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 40) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 40) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for DelaySource(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for DelaySource(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  if (v5 < a2)
  {
    unint64_t v6 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v7 = a2 - v5;
    uint64_t v8 = v6 & 0xFFFFFFF8;
    if ((v6 & 0xFFFFFFF8) != 0) {
      unsigned int v9 = 2;
    }
    else {
      unsigned int v9 = v7 + 1;
    }
    if (v9 >= 0x10000) {
      unsigned int v10 = 4;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v9 < 0x100) {
      unsigned int v10 = 1;
    }
    if (v9 >= 2) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    switch(v11)
    {
      case 1:
        int v12 = *((unsigned __int8 *)a1 + v6);
        if (!v12) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v12 = *(unsigned __int16 *)((char *)a1 + v6);
        if (v12) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D56260);
      case 4:
        int v12 = *(_DWORD *)((char *)a1 + v6);
        if (!v12) {
          break;
        }
LABEL_18:
        int v13 = v12 - 1;
        if (v8)
        {
          int v13 = 0;
          LODWORD(v8) = *a1;
        }
        return v5 + (v8 | v13) + 1;
      default:
        break;
    }
  }
  if (v5) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for DelaySource(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((*(void *)(v6 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 >= a3)
  {
    int v12 = 0;
    int v13 = a2 - v7;
    if (a2 <= v7)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_27;
        case 3:
          goto LABEL_34;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_26;
        default:
LABEL_26:
          if (a2)
          {
LABEL_27:
            unsigned int v16 = *(void (**)(void))(v6 + 56);
            v16();
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v9 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    int v13 = a2 - v7;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v14 = v13;
  }
  else {
    int v14 = 1;
  }
  if (((*(_DWORD *)(v6 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    unsigned int v15 = ~v7 + a2;
    bzero(a1, v8);
    *(_DWORD *)a1 = v15;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v14;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v14;
      break;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187D56420);
    case 4:
      *(_DWORD *)&a1[v8] = v14;
      break;
    default:
      return;
  }
}

uint64_t getEnumTagSinglePayload for ReversedTrackSource(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ReversedTrackSource(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187D567BCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for DelaySource<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for SequencedTrackSource<A, B, C>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for TimingCurveTrackSource<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for DurationTrackSource<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for SpeedTrackSource<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t instantiation function for generic protocol witness table for ReversedTrackSource<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t static TabBarOnlyTabViewStyle._makeView<A>(value:inputs:)()
{
  return static _VariadicView.Tree<>._makeView(view:inputs:)();
}

uint64_t type metadata accessor for TabBarOnlyTabViewStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static TabBarOnlyTabViewStyle._makeViewList<A>(value:inputs:)()
{
  return static _VariadicView.Tree<>._makeViewList(view:inputs:)();
}

uint64_t TabBarOnlyTabViewStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TabViewValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t TabBarOnlyTabViewStyle.Body.value.getter(int a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Binding();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  BOOL v9 = &v20[-v8];
  uint64_t v24 = &type metadata for TabBarOnlyTabViewStyle;
  uint64_t v25 = a2;
  uint64_t v26 = &protocol witness table for TabBarOnlyTabViewStyle;
  uint64_t v27 = a3;
  uint64_t v10 = type metadata accessor for _TabViewValue();
  MEMORY[0x1F4188790](v10 - 8);
  unsigned int v12 = &v20[-v11];
  uint64_t v13 = type metadata accessor for AdaptableTabViewRoot();
  MEMORY[0x1F4188790](v13);
  int v15 = &v20[-v14];
  TabBarOnlyTabViewStyle.Body.base.getter((uint64_t)v12);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v7 + 32))(v9, v12, v6);
  uint64_t v16 = default argument 0 of AdaptableTabViewRoot.init(clientSidebarVisibility:selection:adaptationMode:sidebarOverflowMenuItems:)();
  AdaptableTabViewRoot.init(clientSidebarVisibility:selection:adaptationMode:sidebarOverflowMenuItems:)(v16, v18, v17 & 0x1FF, (uint64_t)v9, 2, 0, 255, (uint64_t)v15);
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  int v23 = a1;
  type metadata accessor for TabViewStyleConfiguration.Content();
  return _VariadicView.Tree.init(_:content:)();
}

uint64_t closure #1 in TabBarOnlyTabViewStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[0] = &type metadata for TabBarOnlyTabViewStyle;
  v10[1] = a2;
  _OWORD v10[2] = &protocol witness table for TabBarOnlyTabViewStyle;
  void v10[3] = a3;
  uint64_t v3 = type metadata accessor for _TabViewValue();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v10 - v5;
  TabBarOnlyTabViewStyle.Body.base.getter((uint64_t)v10 - v5);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v7 = type metadata accessor for TabViewStyleConfiguration.Content();
  uint64_t v8 = static ViewBuilder.buildExpression<A>(_:)(v7);
  return static ViewBuilder.buildExpression<A>(_:)(v8);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance TabBarOnlyTabViewStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for AdaptableTabViewRoot();
  type metadata accessor for TabViewStyleConfiguration.Content();
  uint64_t v2 = type metadata accessor for _VariadicView.Tree();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance TabBarOnlyTabViewStyle.Body<A>(uint64_t a1)
{
  return TabBarOnlyTabViewStyle.Body.value.getter(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

ValueMetadata *type metadata accessor for TabBarOnlyTabViewStyle()
{
  return &type metadata for TabBarOnlyTabViewStyle;
}

uint64_t base witness table accessor for _AttributeBody in TabBarOnlyTabViewStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in TabBarOnlyTabViewStyle.Body.value.getter()
{
  return closure #1 in TabBarOnlyTabViewStyle.Body.value.getter(*(unsigned int *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t destroy for ListDisclosureGroupStyle(uint64_t a1)
{
  swift_release();
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t initializeWithCopy for ListDisclosureGroupStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 24);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v3, v4);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithCopy for ListDisclosureGroupStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(v2 + 16);
  LOBYTE(v2) = *(unsigned char *)(v2 + 24);
  outlined copy of Environment<Bool>.Content(v4, v2);
  uint64_t v5 = *(void *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v2;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

uint64_t assignWithTake for ListDisclosureGroupStyle(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  char v4 = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for ListDisclosureGroupStyle()
{
  return &type metadata for ListDisclosureGroupStyle;
}

uint64_t associated type witness table accessor for DisclosureGroupStyle.Body : View in ListDisclosureGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t specialized AccessibilityDisclosureModifier.List.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v48 = a4;
  uint64_t v46 = a2;
  uint64_t v47 = a3;
  uint64_t v51 = a5;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>();
  uint64_t v7 = v6 - 8;
  MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unsigned int v12 = (char *)&v43 - v11;
  MEMORY[0x1F4188790](v13);
  int v15 = (char *)&v43 - v14;
  MEMORY[0x1F4188790](v16);
  uint64_t v50 = (uint64_t)&v43 - v17;
  type metadata accessor for ListDisclosureGroupStyledContainer<ListDisclosureGroupStyle>(0, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Combine and conformance AccessibilityChildBehavior.Combine, (uint64_t)&type metadata for AccessibilityChildBehavior.Combine, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityChildBehaviorBox);
  uint64_t v18 = swift_allocObject();
  *(unsigned char *)(v18 + 16) = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain();
  uint64_t v52 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  uint64_t v19 = v53;
  uint64_t v20 = v54;
  _s7SwiftUI7BindingVySbGMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v19;
  *(void *)(v21 + 24) = v20;
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>(a1, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>);
  swift_release();
  uint64_t v22 = (uint64_t *)&v9[*(int *)(v7 + 44)];
  uint64_t *v22 = v21;
  v22[1] = v18;
  AccessibilityTraitSet.init(traits:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v21 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v49 = type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
  uint64_t v23 = dword_1ED466138;
  uint64_t v24 = &v12[*(int *)(v7 + 44)];
  uint64_t v25 = *(void *)v24;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v25 + 16, v23 | (v23 << 32));
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v26 = unk_1ED45A9D0;
  if ((unk_1ED45A9D0 & ~qword_1ED45A9C8) == 0) {
    uint64_t v26 = 0;
  }
  uint64_t v53 = v26 | qword_1ED45A9C8;
  AccessibilityNullableOptionSet<>.init(adding:)();
  uint64_t v27 = *(void *)v24 + 16;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v27);
  swift_endAccess();
  swift_release();
  swift_release();
  unsigned int v43 = v15;
  long long v44 = type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>;
  uint64_t v28 = v15;
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
  int v45 = type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>;
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
  uint64_t v29 = swift_allocObject();
  uint64_t v30 = v47;
  *(void *)(v29 + 16) = v46;
  *(void *)(v29 + 24) = v30;
  *(unsigned char *)(v29 + 32) = v48;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = partial apply for specialized closure #1 in AccessibilityDisclosureModifier.List.body(content:);
  *(void *)(v31 + 24) = v29;
  _s7SwiftUI7BindingVySbGMaTm_8(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
  uint64_t v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_18834BB80;
  Swift::UInt32 v33 = AccessibilityActionHandlerSeed++;
  type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>();
  *(void *)(v32 + 56) = v34;
  *(void *)(v32 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
  uint64_t v35 = swift_allocObject();
  *(void *)(v32 + 32) = v35;
  *(_OWORD *)(v35 + 16) = 0u;
  *(_OWORD *)(v35 + 32) = 0u;
  *(_OWORD *)(v35 + 48) = 0u;
  *(void *)(v35 + 64) = 0;
  *(void *)(v35 + 72) = 2;
  *(_OWORD *)(v35 + 80) = 0u;
  *(_OWORD *)(v35 + 96) = 0u;
  *(void *)(v35 + 112) = 0;
  *(void *)(v35 + 120) = partial apply for thunk for @escaping @callee_guaranteed () -> (@out AccessibilityActionResult);
  *(void *)(v35 + 128) = v31;
  *(_DWORD *)(v35 + 136) = v33;
  *(unsigned char *)(v32 + 72) = 0;
  uint64_t v36 = (uint64_t *)(*(void *)&v28[*(int *)(v7 + 44)] + 16);
  swift_beginAccess();
  uint64_t v37 = *v36;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  specialized AccessibilityProperties.subscript.getter(v37);
  swift_bridgeObjectRelease();
  uint64_t v38 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v38);
  uint64_t v52 = specialized AccessibilityProperties.subscript.getter(*v36);
  uint64_t v39 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v39);
  specialized AccessibilityProperties.subscript.setter(v52);
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v40 = (uint64_t)v43;
  uint64_t v41 = v50;
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v43, v50, (uint64_t (*)(void))v44);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>(v40, (uint64_t (*)(void))v45);
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>(v41, v51, (uint64_t (*)(void))v49);
}

uint64_t specialized closure #1 in AccessibilityDisclosureModifier.List.body(content:)@<X0>(unsigned char *a1@<X8>)
{
  _s7SwiftUI7BindingVySbGMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v3 = v2;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v5, v3);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  uint64_t result = swift_release();
  *a1 = 3;
  return result;
}

uint64_t protocol witness for DisclosureGroupStyle.makeBody(configuration:) in conformance ListDisclosureGroupStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  char v5 = *((unsigned char *)a1 + 16);
  char v6 = *v2;
  uint64_t v7 = *((void *)v2 + 1);
  uint64_t v8 = *((void *)v2 + 2);
  char v9 = v2[24];
  *(unsigned char *)a2 = v6;
  *(void *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = v3;
  *(void *)(a2 + 40) = v4;
  *(unsigned char *)(a2 + 48) = v5;
  *(void *)(a2 + 56) = 0;
  swift_retain();
  outlined copy of Environment<Bool>.Content(v8, v9);
  swift_retain();

  return swift_retain();
}

uint64_t type metadata completion function for ListDisclosureGroupStyledContainer()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ListDisclosureGroupStyledContainer(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = *(void *)(v11 + 8);
    *(unsigned char *)(v10 + 16) = *(unsigned char *)(v11 + 16);
    *(void *)(((unint64_t)v4 + v6 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)a2 + v6 + 31) & 0xFFFFFFFFFFFFFFF8);
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for ListDisclosureGroupStyledContainer(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ListDisclosureGroupStyledContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ListDisclosureGroupStyledContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v6 + a2 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  swift_retain();
  swift_release();
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for ListDisclosureGroupStyledContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  char v11 = *(unsigned char *)(v10 + 16);
  *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = v11;
  *(void *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for ListDisclosureGroupStyledContainer(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  swift_release();
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  swift_release();
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListDisclosureGroupStyledContainer(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D58158);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ListDisclosureGroupStyledContainer(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 31) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 31) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 31) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 31) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187D58350);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
          if ((a2 & 0x80000000) != 0)
          {
            *(unsigned char *)(v18 + 16) = 0;
            *(void *)unint64_t v18 = a2 ^ 0x80000000;
            *(void *)(v18 + 8) = 0;
          }
          else
          {
            *(void *)(v18 + 8) = a2 - 1;
          }
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ListDisclosureGroupStyledContainer()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ListDisclosureGroupStyledContainer<ListDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ListDisclosureGroupStyledContainer<ListDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>;
  if (!lazy protocol witness table cache variable for type ListDisclosureGroupStyledContainer<ListDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>)
  {
    type metadata accessor for ListDisclosureGroupStyledContainer<ListDisclosureGroupStyle>(255, &lazy cache variable for type metadata for ListDisclosureGroupStyledContainer<ListDisclosureGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type ListDisclosureGroupStyle and conformance ListDisclosureGroupStyle, (uint64_t)&type metadata for ListDisclosureGroupStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ListDisclosureGroupStyledContainer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListDisclosureGroupStyledContainer<ListDisclosureGroupStyle> and conformance ListDisclosureGroupStyledContainer<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in ListDisclosureGroupStyledContainer<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ListDisclosureGroupStyledContainer.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v46 = a2;
  type metadata accessor for DisclosureGroupStyleModifier();
  uint64_t v49 = type metadata accessor for ModifiedContent();
  uint64_t v48 = type metadata accessor for ModifiedContent();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<OutlineRootConfiguration.Key>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<OutlineRootConfiguration.Key>, (uint64_t)&type metadata for OutlineRootConfiguration.Key, (uint64_t)&protocol witness table for OutlineRootConfiguration.Key, MEMORY[0x1E4F41108]);
  uint64_t v50 = v5;
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  int v12 = (char *)&v40 - v11;
  uint64_t v47 = type metadata accessor for Optional();
  uint64_t v42 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v45 = (uint64_t)&v40 - v16;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>();
  uint64_t v41 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v44 = (uint64_t)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v40 - v20;
  ListDisclosureGroupStyledContainer.label.getter(a1, (uint64_t)&v40 - v20);
  uint64_t v22 = v3 + *(int *)(a1 + 36);
  uint64_t v23 = *(void *)v22;
  uint64_t v24 = *(char **)(v22 + 8);
  LOBYTE(v22) = *(unsigned char *)(v22 + 16);
  uint64_t v71 = v23;
  int v72 = v24;
  char v73 = v22;
  _s7SwiftUI7BindingVySbGMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v70);
  uint64_t v43 = v6;
  if (LOBYTE(v70[0]) == 1)
  {
    ListDisclosureGroupStyledContainer.content.getter(a1, (uint64_t)v9);
    uint64_t v57 = &protocol witness table for DisclosureGroupStyleConfiguration.Content;
    uint64_t v58 = &protocol witness table for DisclosureGroupStyleModifier<A>;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v56 = &protocol witness table for ListDisclosureGroupIndentationModifier;
    uint64_t v53 = swift_getWitnessTable();
    uint64_t v54 = &protocol witness table for IncrementListDisclosureGroupDepth;
    uint64_t v25 = swift_getWitnessTable();
    unint64_t v26 = lazy protocol witness table accessor for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>();
    uint64_t v51 = v25;
    unint64_t v52 = v26;
    swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(v9);
    uint64_t v27 = *(void (**)(char *, uint64_t))(v7 + 8);
    v27(v9, v6);
    static ViewBuilder.buildExpression<A>(_:)(v12);
    v27(v12, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v14, 1, 1, v6);
    v70[8] = &protocol witness table for DisclosureGroupStyleConfiguration.Content;
    v70[9] = &protocol witness table for DisclosureGroupStyleModifier<A>;
    void v70[6] = swift_getWitnessTable();
    v70[7] = &protocol witness table for ListDisclosureGroupIndentationModifier;
    v70[4] = swift_getWitnessTable();
    v70[5] = &protocol witness table for IncrementListDisclosureGroupDepth;
    uint64_t v29 = swift_getWitnessTable();
    unint64_t v30 = lazy protocol witness table accessor for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>();
    v70[2] = v29;
    v70[3] = v30;
    swift_getWitnessTable();
  }
  uint64_t v28 = v45;
  static ToolbarContentBuilder.buildIf<A>(_:)((uint64_t)v14, v45);
  uint64_t v31 = v42;
  uint64_t v32 = *(void (**)(char *, uint64_t))(v42 + 8);
  v32(v14, v47);
  uint64_t v33 = v44;
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v21, v44, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
  uint64_t v71 = v33;
  uint64_t v34 = v14;
  uint64_t v35 = v14;
  uint64_t v36 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v34, v28, v47);
  int v72 = v35;
  v70[0] = v41;
  v70[1] = v36;
  unint64_t v68 = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
  uint64_t v66 = &protocol witness table for DisclosureGroupStyleConfiguration.Content;
  char v67 = &protocol witness table for DisclosureGroupStyleModifier<A>;
  uint64_t v64 = swift_getWitnessTable();
  char v65 = &protocol witness table for ListDisclosureGroupIndentationModifier;
  uint64_t v62 = swift_getWitnessTable();
  char v63 = &protocol witness table for IncrementListDisclosureGroupDepth;
  uint64_t v37 = swift_getWitnessTable();
  unint64_t v38 = lazy protocol witness table accessor for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>();
  uint64_t v60 = v37;
  unint64_t v61 = v38;
  uint64_t v59 = swift_getWitnessTable();
  uint64_t v69 = swift_getWitnessTable();
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)&v71, 2uLL, (uint64_t)v70);
  v32((char *)v28, v36);
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
  v32(v35, v36);
  return outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>(v33, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>);
}

uint64_t ListDisclosureGroupStyledContainer.label.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>();
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  ListDisclosureGroupStyledContainer.resolvedLabel.getter(a1, (uint64_t)v7);
  uint64_t v12 = v2 + *(int *)(a1 + 36);
  uint64_t v13 = *(void *)(v12 + 8);
  char v14 = *(unsigned char *)(v12 + 16);
  v21[1] = *(void *)v12;
  void v21[2] = v13;
  char v22 = v14;
  _s7SwiftUI7BindingVySbGMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v23);
  char v15 = v23;
  uint64_t v16 = swift_allocObject();
  *(unsigned char *)(v16 + 16) = 0;
  *(unsigned char *)(v16 + 17) = v15;
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
  uint64_t v17 = &v11[*(int *)(v9 + 44)];
  *(void *)uint64_t v17 = _s7SwiftUI4ViewPAAE11outlineRoot_10isExpandedQrSb_SbSgtFyAA07OutlineE13ConfigurationVzcfU_TA_0;
  *((void *)v17 + 1) = v16;
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
  uint64_t v18 = *(void *)v12;
  uint64_t v19 = *(void *)(v12 + 8);
  LODWORD(v9) = *(unsigned __int8 *)(v12 + 16);
  swift_retain();
  swift_retain();
  specialized AccessibilityDisclosureModifier.List.body(content:)((uint64_t)v11, v18, v19, v9, a2);
  swift_release();
  swift_release();
  return outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>);
}

uint64_t ListDisclosureGroupStyledContainer.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for DisclosureGroupStyleModifier();
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v16 - v5;
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v17 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v16 - v8;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v18 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v16 - v11;
  View.disclosureGroupStyle<A>(_:)(v16, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Content, v2, (uint64_t)&protocol witness table for DisclosureGroupStyleConfiguration.Content);
  uint64_t v24 = &protocol witness table for DisclosureGroupStyleConfiguration.Content;
  uint64_t v25 = &protocol witness table for DisclosureGroupStyleModifier<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.listDisclosureGroupIndentation(base:step:)(v3, WitnessTable, 20.0, 20.0);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v22 = WitnessTable;
  uint64_t v23 = &protocol witness table for ListDisclosureGroupIndentationModifier;
  uint64_t v14 = swift_getWitnessTable();
  MEMORY[0x18C113660](v14, v7, &type metadata for IncrementListDisclosureGroupDepth, v14);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v7);
  uint64_t v20 = v14;
  uint64_t v21 = &protocol witness table for IncrementListDisclosureGroupDepth;
  swift_getWitnessTable();
  View.outlineRoot(_:isExpanded:)(0, 2);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v12, v10);
}

uint64_t ListDisclosureGroupStyledContainer.resolvedLabel.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = *(void *)(a1 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x1F4188790](a1);
  type metadata accessor for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)uint64_t v10 = static VerticalAlignment.center.getter();
  *((void *)v10 + 1) = 0;
  unsigned char v10[16] = 1;
  type metadata accessor for _VariadicView.Tree<_HStackLayout, Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>();
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  closure #1 in closure #1 in ListDisclosureGroupStyledContainer.resolvedLabel.getter((uint64_t)&v10[*(int *)(v11 + 44)]);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a1);
  unint64_t v14 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v12;
  *(void *)(v15 + 24) = v13;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v15 + v14, (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v10, a2, (uint64_t (*)(void))type metadata accessor for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>);
  type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>();
  uint64_t v17 = (void (**)(uint64_t *))(a2 + *(int *)(v16 + 36));
  *uint64_t v17 = partial apply for closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter;
  v17[1] = (void (*)(uint64_t *))v15;
  return outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>);
}

uint64_t ListDisclosureGroupStyledContainer.disclosureIndicator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  type metadata accessor for Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>();
  uint64_t v5 = v4 - 8;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (_WORD *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>(0);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v31 = (uint64_t)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v2 + *(int *)(a1 + 36);
  uint64_t v18 = *(void *)v17;
  uint64_t v19 = *(void *)(v17 + 8);
  LOBYTE(v17) = *(unsigned char *)(v17 + 16);
  uint64_t v33 = v18;
  uint64_t v34 = v19;
  char v35 = v17;
  _s7SwiftUI7BindingVySbGMaTm_8(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v36);
  int v20 = v36;
  uint64_t v21 = implicit closure #1 in ListDisclosureGroupStyledContainer.disclosureIndicator.getter(v2, *(void *)(a1 + 16), *(void *)(a1 + 24));
  *uint64_t v7 = 256;
  uint64_t v22 = (uint64_t (**)())((char *)v7 + *(int *)(v5 + 44));
  uint64_t *v22 = v21;
  v22[1] = v23;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  if (v20) {
    __int16 v24 = 257;
  }
  else {
    __int16 v24 = 1;
  }
  closure #1 in ListDisclosureGroupStyledContainer.disclosureIndicator.getter(v24, (uint64_t)v7 + *(int *)(v5 + 48));
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>);
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v26 = swift_getKeyPath();
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
  uint64_t v27 = &v14[*(int *)(v12 + 44)];
  *(void *)uint64_t v27 = KeyPath;
  char v27[8] = 0;
  *((void *)v27 + 2) = v26;
  v27[24] = 0;
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
  uint64_t v28 = v31;
  specialized View.accessibility<A>(_:_:isEnabled:)(dword_1ED4603C0 | ((unint64_t)dword_1ED4603C0 << 32), 1, v31);
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>(v28, v32, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>);
}

uint64_t (*implicit closure #1 in ListDisclosureGroupStyledContainer.disclosureIndicator.getter(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = type metadata accessor for ListDisclosureGroupStyledContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v14 - v9, a1, v6, v8);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, v10, v6);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter;
}

uint64_t ListDisclosureGroupStyledContainer.toggleExpansion()()
{
  swift_retain();
  swift_retain();
  specialized static RotatingDisclosureIndicator.toggle(_:)();
  swift_release();

  return swift_release();
}

uint64_t closure #1 in ListDisclosureGroupStyledContainer.disclosureIndicator.getter@<X0>(__int16 a1@<W0>, uint64_t a2@<X8>)
{
  type metadata accessor for ListDisclosureGroupStyledContainer();
  uint64_t result = EdgeInsets.init(_all:)();
  *(unsigned char *)a2 = a1 & 1;
  *(unsigned char *)(a2 + 1) = HIBYTE(a1) & 1;
  *(unsigned char *)(a2 + 8) = 8;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v8;
  *(unsigned char *)(a2 + 48) = 0;
  return result;
}

uint64_t closure #1 in closure #1 in ListDisclosureGroupStyledContainer.resolvedLabel.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v11 - v6;
  uint64_t v8 = type metadata accessor for ListDisclosureGroupStyledContainer();
  ListDisclosureGroupStyledContainer.disclosureIndicator.getter(v8, (uint64_t)v7);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v7, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>);
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  type metadata accessor for (DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)();
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v4, a1 + *(int *)(v9 + 64), (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>);
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>);
  return outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>);
}

void closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for PlatformItemList.Item();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *a1;
  PlatformItemList.containerSelectionBehavior.getter(*a1, (uint64_t)&v23);
  uint64_t v16 = v24;
  outlined consume of PlatformItemList.Item.SelectionBehavior?(v23, v24, v25, v26, v27, v28);
  if (v16 == 1)
  {
    PlatformItemList.mergedContentItem.getter(v15, (uint64_t)v14);
    swift_bridgeObjectRelease();
    uint64_t v17 = implicit closure #1 in closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter(a2, a3, a4);
    uint64_t v19 = v18;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(*((void *)v14 + 50), *((void *)v14 + 51), *((void *)v14 + 52), *((void *)v14 + 53), *((void *)v14 + 54), *((void *)v14 + 55));
    *((void *)v14 + 50) = 65793;
    *((void *)v14 + 51) = v17;
    *((void *)v14 + 52) = v19;
    *(_OWORD *)(v14 + 424) = 0u;
    *(_OWORD *)(v14 + 440) = 0u;
    *(_OWORD *)(v14 + 449) = 0u;
    outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    _s7SwiftUI5GroupVyAA9TupleViewVyAA010DisclosureC18StyleConfigurationV5LabelV_AA6SpacerVAA15ModifiedContentVyAMyAMyAA6ButtonVyAMyAA08RotatingF9IndicatorVAA14_PaddingLayoutVGGAA8StaticIfVyAA23InterfaceIdiomPredicateVyAA03MactU0VGAA09PrimitivemG17ContainerModifierVyAA05PlainmG0VGAA05EmptyZ0VGGA2_yAA010BorderlessmG0VGGAA023AccessibilityAttachmentZ0VGtGGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
    unint64_t v20 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_18834BB80;
    outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v11, v21 + v20, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    *a1 = v21;
    outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  }
}

uint64_t (*implicit closure #1 in closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = type metadata accessor for ListDisclosureGroupStyledContainer();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v14 - v9, a1, v6, v8);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, v10, v6);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter;
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>)
  {
    type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>();
    type metadata accessor for _PreferenceTransformModifier<OutlineRootConfiguration.Key>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<OutlineRootConfiguration.Key>, (uint64_t)&type metadata for OutlineRootConfiguration.Key, (uint64_t)&protocol witness table for OutlineRootConfiguration.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>> and conformance HStack<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _PreferenceTransformModifier<OutlineRootConfiguration.Key>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>();
    lazy protocol witness table accessor for type ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>();
    lazy protocol witness table accessor for type HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>> and conformance HStack<A>(&lazy protocol witness table cache variable for type HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_187D59F78()
{
  return swift_deallocObject();
}

uint64_t sub_187D59F88()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in AccessibilityDisclosureModifier.List.body(content:)@<X0>(unsigned char *a1@<X8>)
{
  return specialized closure #1 in AccessibilityDisclosureModifier.List.body(content:)(a1);
}

uint64_t sub_187D59FD4()
{
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for ListDisclosureGroupStyledContainer<ListDisclosureGroupStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_187D5A074()
{
  if (*(void *)(v0 + 40) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 72) >= 3uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 48), *(void *)(v0 + 56), *(unsigned char *)(v0 + 64));
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v0 + 104))
  {
    outlined consume of Text.Storage(*(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void type metadata accessor for _VariadicView.Tree<_HStackLayout, Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>)
  {
    _s7SwiftUI5GroupVyAA9TupleViewVyAA010DisclosureC18StyleConfigurationV5LabelV_AA6SpacerVAA15ModifiedContentVyAMyAMyAA6ButtonVyAMyAA08RotatingF9IndicatorVAA14_PaddingLayoutVGGAA8StaticIfVyAA23InterfaceIdiomPredicateVyAA03MactU0VGAA09PrimitivemG17ContainerModifierVyAA05PlainmG0VGAA05EmptyZ0VGGA2_yAA010BorderlessmG0VGGAA023AccessibilityAttachmentZ0VGtGGMaTm_0(255, &lazy cache variable for type metadata for Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>, MEMORY[0x1E4F414E8]);
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_HStackLayout, Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>);
    }
  }
}

void partial apply for closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter(uint64_t *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for ListDisclosureGroupStyledContainer() - 8);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter(a1, v6, v3, v4);
}

void _s7SwiftUI5GroupVyAA9TupleViewVyAA010DisclosureC18StyleConfigurationV5LabelV_AA6SpacerVAA15ModifiedContentVyAMyAMyAA6ButtonVyAMyAA08RotatingF9IndicatorVAA14_PaddingLayoutVGGAA8StaticIfVyAA23InterfaceIdiomPredicateVyAA03MactU0VGAA09PrimitivemG17ContainerModifierVyAA05PlainmG0VGAA05EmptyZ0VGGA2_yAA010BorderlessmG0VGGAA023AccessibilityAttachmentZ0VGtGGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t objectdestroy_16Tm_0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ListDisclosureGroupStyledContainer() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + ((v2 + 32) & ~v2), v1);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #2 in ListDisclosureGroupStyledContainer.resolvedLabel.getter()
{
  return ListDisclosureGroupStyledContainer.toggleExpansion()();
}

uint64_t sub_187D5A548()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<Group<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, AccessibilityAttachmentModifier>)>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, _PreferenceTransformModifier<OutlineRootConfiguration.Key>>, AccessibilityAttachmentModifier>();
  type metadata accessor for DisclosureGroupStyleModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<OutlineRootConfiguration.Key>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<OutlineRootConfiguration.Key>, (uint64_t)&type metadata for OutlineRootConfiguration.Key, (uint64_t)&protocol witness table for OutlineRootConfiguration.Key, MEMORY[0x1E4F41108]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for Optional();
  swift_getTupleTypeMetadata2();
  type metadata accessor for TupleView();

  return swift_getWitnessTable();
}

void static MoveCommandDirection.== infix(_:_:)()
{
}

void MoveCommandDirection.hash(into:)()
{
}

void MoveCommandDirection.hashValue.getter()
{
}

void View.onMoveCommand(perform:)()
{
}

uint64_t View.onExitCommand(perform:)(uint64_t a1, uint64_t a2)
{
  char v3 = 9;
  return View.onPhysicalButtonPress(_:perform:)((uint64_t)&v3, a1, a2);
}

void View.pageCommand<A>(value:in:step:)()
{
}

unint64_t lazy protocol witness table accessor for type MoveCommandDirection and conformance MoveCommandDirection()
{
  unint64_t result = lazy protocol witness table cache variable for type MoveCommandDirection and conformance MoveCommandDirection;
  if (!lazy protocol witness table cache variable for type MoveCommandDirection and conformance MoveCommandDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MoveCommandDirection and conformance MoveCommandDirection);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MoveCommandDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    void *result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D5A82CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          void *result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MoveCommandDirection()
{
  return &type metadata for MoveCommandDirection;
}

uint64_t sub_187D5A864()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D5A900(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void View.onPlayPauseCommand(perform:)()
{
}

void View.onDeleteCommand(perform:)()
{
}

uint64_t NavigationLinkButtonStyle.init(destination:presentedValue:modifierID:shouldTargetSourceColumn:deprecated_isActive:authority:listKey:stackKey:isPresentingViewDestinationView:selectionPopsSubsequentColumn:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, unint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15, char a16, char a17, uint64_t a18)
{
  uint64_t v19 = type metadata accessor for NavigationLinkButtonStyle();
  *(void *)a9 = 0;
  *(void *)(a9 + 8) = 0;
  *(_WORD *)(a9 + 16) = 0;
  uint64_t v20 = a9 + *(int *)(v19 + 36);
  uint64_t v21 = type metadata accessor for NavigationLinkButtonStyle.Payload();
  uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
  v22(v20, 1, 1, v21);
  uint64_t v23 = *(int *)(v19 + 40);
  *(unsigned char *)(a9 + v23) = 1;
  uint64_t v24 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v20, v24);
  NavigationLinkButtonStyle.PayloadV4.init(destination:presentedValue:modifierID:shouldTargetSourceColumn:deprecated_isActive:authority:listKey:stackKey:)(a1, a2, a3, a4, a5, a6, a7, a8, v20, a10, (__n128)__PAIR128__(a12, a11), a13, a18);
  swift_storeEnumTagMultiPayload();
  v22(v20, 0, 1, v21);
  uint64_t result = outlined consume of StateOrBinding<Bool>(*(void *)a9, *(void *)(a9 + 8), *(unsigned __int8 *)(a9 + 16), *(unsigned char *)(a9 + 17));
  *(void *)a9 = a14;
  *(void *)(a9 + 8) = a15;
  *(unsigned char *)(a9 + 16) = a16;
  *(unsigned char *)(a9 + 17) = 1;
  *(unsigned char *)(a9 + v23) = a17;
  return result;
}

uint64_t NavigationLinkButtonStyle.init(deprecated_isActive:destination:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void (*v18)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v11 = type metadata accessor for NavigationLinkButtonStyle();
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(_WORD *)(a6 + 16) = 0;
  uint64_t v12 = a6 + *(int *)(v11 + 36);
  uint64_t v13 = type metadata accessor for NavigationLinkButtonStyle.Payload();
  uint64_t v18 = *(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v18((void *)(v13 - 8), v12, 1, 1, v13);
  *(unsigned char *)(a6 + *(int *)(v11 + 40)) = 1;
  uint64_t v14 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v12, v14);
  *(void *)uint64_t v12 = a1;
  *(void *)(v12 + 8) = a2;
  *(unsigned char *)(v12 + 16) = a3;
  uint64_t v15 = type metadata accessor for NavigationLinkButtonStyle.PayloadV1();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(v12 + *(int *)(v15 + 36), a4, a5);
  swift_storeEnumTagMultiPayload();

  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v18)(v12, 0, 1, v13);
}

double NavigationLinkButtonStyle.init<>()@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_WORD *)(a1 + 168) = 511;
  return result;
}

uint64_t NavigationLinkButtonStyle.Payload.presentedValue.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v15 - v10;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))(v6, v2, a1, v9);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
    uint64_t v12 = *(void *)&v11[*(int *)(v7 + 36)];
    uint64_t v13 = *(void (**)(char *, uint64_t))(v8 + 8);
    swift_retain();
    v13(v11, v7);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
    return 0;
  }
  return v12;
}

uint64_t NavigationLinkButtonStyle.isPresentingViewDestinationView.getter()
{
  if (*(unsigned char *)(v0 + 17))
  {
    type metadata accessor for StyleContextAcceptsPredicate<PlainListStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v2);
  }
  else
  {
    type metadata accessor for StyleContextAcceptsPredicate<PlainListStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    State.wrappedValue.getter();
  }
  return v2;
}

uint64_t NavigationLinkButtonStyle.isPresentingViewDestinationView.setter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 16);
  if (*(unsigned char *)(v0 + 17))
  {
    outlined copy of StateOrBinding<Bool>(v1, v2, v3, 1);
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    uint64_t v4 = v1;
    uint64_t v5 = v2;
    uint64_t v6 = v3;
    char v7 = 1;
  }
  else
  {
    if (v2)
    {
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      uint64_t v4 = v1;
      uint64_t v5 = v2;
    }
    else
    {
      uint64_t v4 = *(void *)v0;
      uint64_t v5 = 0;
    }
    uint64_t v6 = v3;
    char v7 = 0;
  }
  return outlined consume of StateOrBinding<Bool>(v4, v5, v6, v7);
}

uint64_t NavigationLinkButtonStyle.$isPresentingViewDestinationView.getter()
{
  uint64_t v1 = *v0;
  if (*((unsigned char *)v0 + 17))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    type metadata accessor for StyleContextAcceptsPredicate<PlainListStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
    return v3;
  }
  return v1;
}

uint64_t NavigationLinkButtonStyle.triggerV4(payload:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + *(int *)(type metadata accessor for NavigationLinkButtonStyle.PayloadV4() + 48));
  uint64_t v4 = v3[1];
  if (v4)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(*v3, v4);
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release_n();
    return swift_release_n();
  }
  else
  {
    return NavigationLinkButtonStyle.present()(a2);
  }
}

uint64_t NavigationLinkButtonStyle.present()(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  *(void *)&long long v68 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  *(void *)&long long v67 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for NavigationLinkButtonStyle.Payload();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  double v9 = (char *)&v64 - v8;
  uint64_t v71 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4();
  uint64_t v69 = *(void *)(v71 - 8);
  double v10 = MEMORY[0x1F4188790](v71);
  char v70 = (char *)&v64 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v1 + *(int *)(a1 + 36), v6, v10);
  uint64_t v12 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v9, 1, v5) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v9, v5);
  }
  uint64_t v15 = v69;
  uint64_t v14 = v70;
  uint64_t v16 = v9;
  uint64_t v17 = (int *)v71;
  (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v70, v16, v71);
  outlined init with copy of NavigationAuthority?((uint64_t)&v14[v17[13]], (uint64_t)&v96);
  if (*((void *)&v96 + 1) == 1)
  {
    (*(void (**)(char *, int *))(v15 + 8))(v14, v17);
    return outlined destroy of NavigationAuthority?((uint64_t)&v96);
  }
  outlined init with take of NavigationAuthority((uint64_t)&v96, (uint64_t)v102);
  uint64_t v18 = &v14[v17[14]];
  uint64_t v19 = *((void *)v18 + 5);
  if (v19 == 1)
  {
    uint64_t v20 = &v14[v17[15]];
    uint64_t v21 = v20[8];
    if (v21 == 6)
    {
      uint64_t v22 = 0;
      uint64_t v21 = 0;
      uint64_t v19 = 0;
      long long v23 = 0uLL;
      uint64_t v24 = 0x1FFFFFFFELL;
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v19 = 0;
      uint64_t v22 = *(void *)v20;
      long long v23 = *((unint64_t *)v20 + 2);
    }
  }
  else
  {
    uint64_t v25 = *((void *)v18 + 4);
    long long v23 = *((_OWORD *)v18 + 1);
    uint64_t v22 = *(void *)v18;
    uint64_t v21 = *(void *)&v14[v17[14] + 8];
    uint64_t v24 = v25 & 1 | 0x4000000000000000;
  }
  v103[0] = v22;
  v103[1] = v21;
  long long v104 = v23;
  uint64_t v105 = v24;
  uint64_t v106 = v19;
  outlined init with take of NavigationState.ListKey?((uint64_t)v103, (uint64_t)v107, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind, MEMORY[0x1E4FBB718]);
  if ((unint64_t)v108 >> 1 == 0xFFFFFFFF) {
    goto LABEL_13;
  }
  outlined init with take of NavigationRequest.KeyKind((uint64_t)v107, (uint64_t)v109);
  uint64_t v26 = *(void *)&v14[v17[9]];
  if (v26)
  {
    long long v67 = v107[1];
    long long v68 = v107[0];
    long long v66 = v108;
    outlined init with take of NavigationRequest.KeyKind((uint64_t)v109, (uint64_t)v72);
    if (!((unint64_t)v73 >> 62))
    {
      *(void *)&long long v73 = v73 & 0x3FFFFFFFFFFFFFFFLL;
      int v45 = *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
      swift_retain();
      static Transaction.current.getter();
      uint64_t v46 = &v14[v17[12]];
      uint64_t v48 = *(void *)v46;
      uint64_t v47 = *((void *)v46 + 1);
      char v49 = v46[16];
      if (v47)
      {
        unsigned int v50 = v49 & 1;
        *(void *)&long long v96 = v48;
        *((void *)&v96 + 1) = v47;
        LOBYTE(v97) = v49 & 1;
        uint64_t v34 = v47;
        uint64_t v51 = v48;
      }
      else
      {
        LOBYTE(v80) = 0;
        static Binding.constant(_:)();
        uint64_t v34 = *((void *)&v96 + 1);
        uint64_t v51 = v96;
        unsigned int v50 = v97;
      }
      uint64_t v62 = 256;
      if (!v45) {
        uint64_t v62 = 0;
      }
      uint64_t v33 = v62 | v50;
      swift_retain();
      outlined copy of Binding<NavigationSplitViewColumn>?(v48, v47);
      swift_retain();
      swift_retain();
      char v54 = Transaction.disablesAnimations.getter();
      uint64_t v55 = Transaction.animation.getter();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v53 = 0;
      char v56 = 10;
      goto LABEL_35;
    }
    if ((unint64_t)v73 >> 62 == 1)
    {
      int v27 = *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
      *(void *)&long long v73 = v73 & 0x3FFFFFFFFFFFFFFFLL;
      uint64_t v28 = &v14[v17[12]];
      uint64_t v30 = *(void *)v28;
      uint64_t v29 = *((void *)v28 + 1);
      char v31 = v28[16];
      if (v29)
      {
        unsigned int v32 = v31 & 1;
        *(void *)&long long v96 = *(void *)v28;
        *((void *)&v96 + 1) = v29;
        LOBYTE(v97) = v31 & 1;
        swift_retain();
        uint64_t v33 = v29;
        uint64_t v34 = v30;
      }
      else
      {
        LOBYTE(v80) = 0;
        swift_retain();
        static Binding.constant(_:)();
        uint64_t v33 = *((void *)&v96 + 1);
        uint64_t v34 = v96;
        unsigned int v32 = v97;
      }
      outlined copy of Binding<NavigationSplitViewColumn>?(v30, v29);
      static Transaction.current.getter();
      uint64_t v52 = 256;
      if (!v27) {
        uint64_t v52 = 0;
      }
      uint64_t v53 = v52 | v32;
      swift_retain();
      swift_retain();
      swift_retain();
      char v54 = Transaction.disablesAnimations.getter();
      uint64_t v55 = Transaction.animation.getter();
      swift_release();
      swift_release();
      swift_release();
      uint64_t v51 = 0;
      char v56 = 17;
LABEL_35:
      char v63 = v70;
      *(void *)&long long v96 = v26;
      *((void *)&v96 + 1) = v51;
      *(void *)&long long v97 = v34;
      *((void *)&v97 + 1) = v33;
      long long v98 = (unint64_t)v53;
      long long v99 = 0uLL;
      LOBYTE(v100[0]) = v56;
      *(_OWORD *)((char *)v100 + 8) = v68;
      *(_OWORD *)((char *)&v100[1] + 8) = v67;
      *(_OWORD *)((char *)&v100[2] + 8) = v66;
      BYTE8(v100[3]) = v54 & 1;
      uint64_t v101 = v55;
      long long v86 = v100[2];
      long long v87 = v100[3];
      uint64_t v88 = v55;
      long long v82 = (unint64_t)v53;
      long long v83 = 0u;
      long long v84 = v100[0];
      long long v85 = v100[1];
      long long v80 = v96;
      long long v81 = v97;
      outlined retain of NavigationRequest((uint64_t)&v96);
      NavigationAuthority.enqueueRequest(_:)(&v80);
      swift_release();
      outlined release of NavigationRequest((uint64_t)&v96);
      outlined release of NavigationRequest((uint64_t)&v96);
      outlined destroy of NavigationAuthority((uint64_t)v102);
      return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v63, v71);
    }
LABEL_13:
    outlined destroy of NavigationAuthority((uint64_t)v102);
    return (*(uint64_t (**)(char *, int *))(v15 + 8))(v14, v17);
  }
  if (NavigationLinkButtonStyle.isPresentingViewDestinationView.getter()) {
    goto LABEL_13;
  }
  NavigationLinkButtonStyle.isPresentingViewDestinationView.setter();
  (*(void (**)(void, char *, uint64_t))(v68 + 16))(v67, v14, v3);
  uint64_t v35 = *(void *)&v14[v17[10]];
  uint64_t v92 = 0;
  uint64_t v93 = 0;
  uint64_t v94 = 1;
  uint64_t v95 = v35;
  *(void *)&long long v66 = NavigationLinkButtonStyle.$isPresentingViewDestinationView.getter();
  uint64_t v64 = v36;
  int v65 = v37;
  unint64_t v38 = &v14[v17[12]];
  uint64_t v40 = *(void *)v38;
  uint64_t v39 = *((void *)v38 + 1);
  char v41 = v38[16];
  if (v39)
  {
    char v42 = v41 & 1;
    uint64_t v89 = v40;
    uint64_t v90 = v39;
    char v91 = v41 & 1;
    uint64_t v43 = v39;
    uint64_t v44 = v40;
  }
  else
  {
    LOBYTE(v96) = 0;
    static Binding.constant(_:)();
    uint64_t v44 = v89;
    uint64_t v43 = v90;
    char v42 = v91;
  }
  *(void *)&long long v96 = v35;
  *((void *)&v96 + 1) = v44;
  *(void *)&long long v97 = v43;
  BYTE8(v97) = v42;
  outlined copy of Binding<NavigationSplitViewColumn>?(v40, v39);
  lazy protocol witness table accessor for type PresentingToActivationProjection and conformance PresentingToActivationProjection();
  uint64_t v57 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v59 = v70;
  uint64_t v58 = v71;
  uint64_t v60 = v70[*(int *)(v71 + 44)];
  static Transaction.current.getter();
  uint64_t v61 = v67;
  static NavigationRequest.presentView<A>(_:from:identifier:binding:shouldTargetSourceColumn:transaction:)(v67, (uint64_t)v109, v66, v57, v65 & 1, v60, (uint64_t)&v96);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Text.LineStyle?(0, 1);
  (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v61, v3);
  long long v86 = v100[2];
  long long v87 = v100[3];
  long long v82 = v98;
  long long v83 = v99;
  long long v84 = v100[0];
  long long v85 = v100[1];
  long long v80 = v96;
  long long v81 = v97;
  long long v77 = v100[2];
  long long v78 = v100[3];
  long long v73 = v98;
  long long v74 = v99;
  long long v75 = v100[0];
  long long v76 = v100[1];
  uint64_t v88 = v101;
  uint64_t v79 = v101;
  v72[0] = v96;
  v72[1] = v97;
  NavigationAuthority.enqueueRequest(_:)(v72);
  outlined release of NavigationRequest((uint64_t)&v80);
  outlined destroy of NavigationAuthority((uint64_t)v102);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v59, v58);
}

uint64_t closure #1 in NavigationLinkButtonStyle.makeBody(configuration:)(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NavigationLinkButtonStyle.Payload();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v24 - v7;
  uint64_t v25 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4();
  uint64_t v9 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v11 = (char *)v24 - v10;
  int v12 = *a1;
  uint64_t v13 = type metadata accessor for NavigationLinkButtonStyle();
  uint64_t v14 = *(int *)(v13 + 36);
  v24[1] = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a2 + v14, v5);
  uint64_t v15 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v8, 1, v4) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  if (swift_getEnumCaseMultiPayload() != 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v8, v4);
  }
  uint64_t v17 = (int *)v25;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v8, v25);
  if (v12)
  {
    NavigationLinkButtonStyle.present()(v13);
    return (*(uint64_t (**)(char *, int *))(v9 + 8))(v11, v17);
  }
  if (*(void *)&v11[v17[9]]) {
    return (*(uint64_t (**)(char *, int *))(v9 + 8))(v11, v17);
  }
  uint64_t v18 = &v11[v17[15]];
  uint64_t v19 = v18[8];
  if (v19 == 6) {
    return (*(uint64_t (**)(char *, int *))(v9 + 8))(v11, v17);
  }
  uint64_t v20 = *(void *)v18;
  uint64_t v21 = *((void *)v18 + 2);
  NavigationLinkButtonStyle.isPresentingViewDestinationView.setter();
  outlined init with copy of NavigationAuthority?((uint64_t)&v11[v17[13]], (uint64_t)v40);
  if (v41 == 1)
  {
    (*(void (**)(char *, int *))(v9 + 8))(v11, v17);
    return outlined destroy of NavigationAuthority?((uint64_t)v40);
  }
  else
  {
    uint64_t v22 = *(void *)&v11[v17[10]];
    static Transaction.current.getter();
    char v23 = Transaction.disablesAnimations.getter();
    swift_release();
    long long v26 = 0uLL;
    uint64_t v27 = 1;
    uint64_t v28 = v22;
    long long v29 = 0u;
    long long v30 = 0u;
    char v31 = 19;
    uint64_t v32 = v20;
    uint64_t v33 = v19;
    uint64_t v34 = v21;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    char v38 = v23 & 1;
    uint64_t v39 = 0;
    NavigationAuthority.enqueueRequest(_:)(&v26);
    (*(void (**)(char *, int *))(v9 + 8))(v11, v17);
    return outlined destroy of NavigationAuthority((uint64_t)v40);
  }
}

uint64_t sub_187D5BE14()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for NavigationLinkButtonStyle() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  outlined consume of StateOrBinding<Bool>(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8), *(unsigned __int8 *)(v0 + v3 + 16), *(unsigned char *)(v0 + v3 + 17));
  unint64_t v4 = v0 + v3 + v2[11];
  uint64_t v5 = type metadata accessor for NavigationLinkButtonStyle.Payload();
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5))
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v4, v1);
      uint64_t v6 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4();
      swift_release();
      if (*(void *)(v4 + *(int *)(v6 + 48) + 8))
      {
        swift_release();
        swift_release();
      }
      if (*(void *)(v4 + *(int *)(v6 + 52) + 8) != 1)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      uint64_t v7 = type metadata accessor for NavigationLinkButtonStyle.PayloadV1();
      (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v4 + *(int *)(v7 + 36), v1);
    }
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationLinkButtonStyle.makeBody(configuration:)(unsigned __int8 *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for NavigationLinkButtonStyle() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in NavigationLinkButtonStyle.makeBody(configuration:)(a1, v4);
}

uint64_t ContentListItemNavigationLinkStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = static HorizontalAlignment.center.getter();
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>(0, &lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>, type metadata accessor for ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>);
  return closure #1 in ContentListItemNavigationLinkStyle.makeBody(configuration:)(v2, a1, a2 + *(int *)(v5 + 44));
}

uint64_t closure #1 in ContentListItemNavigationLinkStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v5 = type metadata accessor for NavigationLinkButtonStyle.Payload();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t v10 = type metadata accessor for DefaultListNavigationLinkStyle.ListLink();
  MEMORY[0x1F4188790](v10 - 8);
  int v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>(0);
  uint64_t v21 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ContentListItemNavigationLinkStyle();
  ContentListItemNavigationLinkStyle.appearance(for:)(a2, (uint64_t)v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  uint64_t v16 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v9, 1, v5) == 1)
  {
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = NavigationLinkButtonStyle.Payload.presentedValue.getter(v5);
    uint64_t v7 = v16;
    uint64_t v6 = v5;
  }
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t KeyPath = swift_getKeyPath();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_7((uint64_t)v12, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for DefaultListNavigationLinkStyle.ListLink);
  uint64_t v19 = &v15[*(int *)(v21 + 36)];
  *(void *)uint64_t v19 = v17;
  *((void *)v19 + 1) = 0;
  *((void *)v19 + 2) = 0;
  *((void *)v19 + 3) = KeyPath;
  v19[32] = 0;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_2((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for DefaultListNavigationLinkStyle.ListLink);
  return outlined init with take of ButtonAction((uint64_t)v15, v22, (uint64_t (*)(void))type metadata accessor for ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>);
}

uint64_t ContentListItemNavigationLinkStyle.appearance(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_7(a1, a2, type metadata accessor for PrimitiveButtonStyleConfiguration);
  uint64_t v3 = (int *)type metadata accessor for DefaultListNavigationLinkStyle.ListLink();
  uint64_t v4 = a2 + v3[5];
  *(void *)uint64_t v4 = swift_getKeyPath();
  *(void *)(v4 + 8) = 0;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  *(unsigned char *)(v4 + 32) = 0;
  uint64_t v5 = a2 + v3[6];
  *(void *)uint64_t v5 = swift_getKeyPath();
  *(unsigned char *)(v5 + 8) = 0;
  uint64_t v6 = a2 + v3[7];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v6 = result;
  *(unsigned char *)(v6 + 8) = 0;
  return result;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ShowsDisclosureIndicatorPredicate()
{
  int v0 = static StyleContextAcceptsAnyPredicate.evaluate(inputs:)();
  return ((v0 | static StyleContextAcceptsPredicate.evaluate(inputs:)()) & 1) == 0;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance DefaultListNavigationLinkStyle.ListLink()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance HideNavigationLinkDisclosureIndicator()
{
  return PropertyList.subscript.setter();
}

uint64_t EnvironmentValues.showNavigationDisclosureIndicator.getter()
{
  if (*(void *)(v0 + 8))
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1ED45CFE8, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1ED45CFE8, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1ED45CFE8, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t (*EnvironmentValues.showNavigationDisclosureIndicator.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  if (*(void *)(v1 + 8))
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1ED45CFE8, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1ED45CFE8, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a1 + 9);
  return EnvironmentValues.showNavigationDisclosureIndicator.modify;
}

uint64_t EnvironmentValues.navigationIndicatorVisibility.getter()
{
  if (*(void *)(v0 + 8))
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1ED45CFE8, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    uint64_t result = v3;
    if (v3) {
      return result;
    }
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>, (uint64_t)&type metadata for DefaultNavigationIndicatorVisibilityKey, (uint64_t)&protocol witness table for DefaultNavigationIndicatorVisibilityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1ED45CFE8, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release_n();
    uint64_t result = v3;
    if (v3) {
      return result;
    }
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>, (uint64_t)&type metadata for DefaultNavigationIndicatorVisibilityKey, (uint64_t)&protocol witness table for DefaultNavigationIndicatorVisibilityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.showNavigationDisclosureIndicator.setter()
{
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1ED45CFE8, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.navigationIndicatorVisibility.modify(uint64_t a1))()
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = EnvironmentValues.navigationIndicatorVisibility.getter();
  return EnvironmentValues.showNavigationDisclosureIndicator.modify;
}

uint64_t EnvironmentValues.showNavigationDisclosureIndicator.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationIndicatorVisibilityKey>, (uint64_t)&unk_1ED45CFE8, (uint64_t)&protocol witness table for NavigationIndicatorVisibilityKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t sub_187D5CDF8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.showNavigationDisclosureIndicator.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187D5CE34(unsigned __int8 *a1)
{
  return EnvironmentValues.navigationIndicatorVisibility.setter(*a1);
}

uint64_t sub_187D5CE5C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.navigationIndicatorVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NavigationLinkButtonStyle(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = ((v5 + 17) & ~v5) + v4;
  if (((((((((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 > v6)
    unint64_t v6 = ((((((((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24;
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v7 = v6 + (((v5 | 7) + 18) & ~(v5 | 7)) + 2;
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v11 < 2)
    {
LABEL_22:
      unsigned int v13 = *((unsigned __int8 *)a1 + 17);
      if (v13 >= 2) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_22;
  }
LABEL_14:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 255;
}

void storeEnumTagSinglePayload for NavigationLinkButtonStyle(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v9 = ((v8 + 17) & ~v8) + v6;
  if (v7 > v9) {
    unint64_t v9 = v7;
  }
  size_t v10 = v9 + (((v8 | 7) + 18) & ~(v8 | 7)) + 2;
  if (a3 < 0xFF)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 + ~(-1 << (8 * v10)) - 254) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v12 = a2 - 255;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v10)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v10] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v13;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x187D5D294);
      case 4:
        *(_DWORD *)&a1[v10] = v13;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v11)
    {
      case 1:
        a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[17] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_187D5D2BC()
{
  uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F410E8];
  type metadata accessor for StyleContextAcceptsPredicate<PlainListStyleContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310], MEMORY[0x1E4F410E8]);
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  type metadata accessor for StyleContextAcceptsPredicate<PlainListStyleContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<PlainListStyleContext>, (uint64_t)&type metadata for PlainListStyleContext, v0);
  type metadata accessor for ContentListItemNavigationLinkStyle();
  swift_getWitnessTable();
  type metadata accessor for PrimitiveButtonStyleContainerModifier();
  lazy protocol witness table accessor for type StyleContextAcceptsPredicate<PlainListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<PlainListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<PlainListStyleContext>, (uint64_t)&type metadata for PlainListStyleContext);
  type metadata accessor for StaticIf();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StyleContextAcceptsPredicate<PlainListStyleContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetListStyleContext>, (uint64_t)&type metadata for InsetListStyleContext, v0);
  lazy protocol witness table accessor for type StyleContextAcceptsPredicate<PlainListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetListStyleContext>, (uint64_t)&type metadata for InsetListStyleContext);
  type metadata accessor for StaticIf();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(255, &lazy cache variable for type metadata for _BindingActionModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F409F0]);
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _BindingActionModifier<Bool> and conformance _BindingActionModifier<A>();
  swift_getWitnessTable();
  type metadata accessor for AccessibilityNavigationLinkButtonModifier.Representable();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type StyleContextAcceptsPredicate<PlainListStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310]);
  type metadata accessor for StaticIf();
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(255, &lazy cache variable for type metadata for KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for KeyboardShortcutBindingBehavior);
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for DefaultNavigationIndicatorVisibilityKey()
{
  return &type metadata for DefaultNavigationIndicatorVisibilityKey;
}

void *type metadata accessor for NavigationIndicatorVisibilityKey()
{
  return &unk_1ED45CFE8;
}

uint64_t initializeWithCopy for NavigationLinkButtonStyle.PayloadV4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  unint64_t v11 = ((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = *(void *)(v12 + 8);
  swift_retain();
  if (v13 < 0xFFFFFFFF)
  {
    long long v14 = *(_OWORD *)v12;
    *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
    *(_OWORD *)unint64_t v11 = v14;
  }
  else
  {
    *(void *)unint64_t v11 = *(void *)v12;
    *(void *)(v11 + 8) = *(void *)(v12 + 8);
    *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
    swift_retain();
    swift_retain();
  }
  unint64_t v15 = ((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = *(void *)(v16 + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((int)v17 - 1 < 0)
  {
    swift_weakCopyInit();
    *(void *)(v15 + 8) = *(void *)(v16 + 8);
    *(void *)(v15 + 16) = *(void *)(v16 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v18 = *(_OWORD *)v16;
    *(void *)(v15 + 16) = *(void *)(v16 + 16);
    *(_OWORD *)unint64_t v15 = v18;
  }
  uint64_t v19 = (_OWORD *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (long long *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v21 = *v20;
  long long v22 = v20[2];
  v19[1] = v20[1];
  void v19[2] = v22;
  _OWORD *v19 = v21;
  unint64_t v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v20 + 55) & 0xFFFFFFFFFFFFFFF8;
  long long v25 = *(_OWORD *)v24;
  *(void *)(v23 + 16) = *(void *)(v24 + 16);
  *(_OWORD *)unint64_t v23 = v25;
  return a1;
}

uint64_t assignWithCopy for NavigationLinkButtonStyle.PayloadV4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  swift_retain();
  swift_release();
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  unint64_t v11 = ((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = *(void *)(v12 + 8);
  if (*(void *)(v11 + 8) < 0xFFFFFFFFuLL)
  {
    if (v13 >= 0xFFFFFFFF)
    {
      *(void *)unint64_t v11 = *(void *)v12;
      *(void *)(v11 + 8) = *(void *)(v12 + 8);
      *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
      swift_retain();
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v13 >= 0xFFFFFFFF)
    {
      *(void *)unint64_t v11 = *(void *)v12;
      swift_retain();
      swift_release();
      *(void *)(v11 + 8) = *(void *)(v12 + 8);
      swift_retain();
      swift_release();
      *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
      goto LABEL_8;
    }
    swift_release();
    swift_release();
  }
  long long v14 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  *(_OWORD *)unint64_t v11 = v14;
LABEL_8:
  unint64_t v15 = ((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = *(void *)(v15 + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  int v18 = v17 - 1;
  unint64_t v19 = *(void *)(v16 + 8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  int v20 = v19 - 1;
  if (v18 < 0)
  {
    if (v20 < 0)
    {
      swift_weakCopyAssign();
      *(void *)(v15 + 8) = *(void *)(v16 + 8);
      swift_retain();
      swift_release();
      *(void *)(v15 + 16) = *(void *)(v16 + 16);
      swift_retain();
      swift_release();
      goto LABEL_18;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_17;
  }
  if ((v20 & 0x80000000) == 0)
  {
LABEL_17:
    long long v21 = *(_OWORD *)v16;
    *(void *)(v15 + 16) = *(void *)(v16 + 16);
    *(_OWORD *)unint64_t v15 = v21;
    goto LABEL_18;
  }
  swift_weakCopyInit();
  *(void *)(v15 + 8) = *(void *)(v16 + 8);
  *(void *)(v15 + 16) = *(void *)(v16 + 16);
  swift_retain();
  swift_retain();
LABEL_18:
  long long v22 = (_OWORD *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v23 = (long long *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v24 = *v23;
  long long v25 = v23[2];
  v22[1] = v23[1];
  _OWORD v22[2] = v25;
  _OWORD *v22 = v24;
  unint64_t v26 = ((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = ((unint64_t)v23 + 55) & 0xFFFFFFFFFFFFFFF8;
  long long v28 = *(_OWORD *)v27;
  *(void *)(v26 + 16) = *(void *)(v27 + 16);
  *(_OWORD *)unint64_t v26 = v28;
  return a1;
}

uint64_t assignWithTake for NavigationLinkButtonStyle.PayloadV4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v7 = *v8;
  swift_release();
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
  unint64_t v11 = ((unint64_t)v7 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v11 + 8) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(v12 + 8) >= 0xFFFFFFFFuLL)
    {
      *(void *)unint64_t v11 = *(void *)v12;
      swift_release();
      *(void *)(v11 + 8) = *(void *)(v12 + 8);
      swift_release();
      *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
      goto LABEL_6;
    }
    swift_release();
    swift_release();
  }
  long long v13 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  *(_OWORD *)unint64_t v11 = v13;
LABEL_6:
  unint64_t v14 = ((unint64_t)v7 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v8 + 55) & 0xFFFFFFFFFFFFFFF8;
  int v16 = *(void *)(v14 + 8);
  if (*(void *)(v14 + 8) >= 0xFFFFFFFFuLL) {
    int v16 = -1;
  }
  int v17 = v16 - 1;
  unint64_t v18 = *(void *)(v15 + 8);
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  int v19 = v18 - 1;
  if (v17 < 0)
  {
    if (v19 < 0)
    {
      swift_weakTakeAssign();
      *(void *)(v14 + 8) = *(void *)(v15 + 8);
      swift_release();
      *(void *)(v14 + 16) = *(void *)(v15 + 16);
      swift_release();
      goto LABEL_16;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_15;
  }
  if ((v19 & 0x80000000) == 0)
  {
LABEL_15:
    long long v20 = *(_OWORD *)v15;
    *(void *)(v14 + 16) = *(void *)(v15 + 16);
    *(_OWORD *)unint64_t v14 = v20;
    goto LABEL_16;
  }
  swift_weakTakeInit();
  *(_OWORD *)(v14 + 8) = *(_OWORD *)(v15 + 8);
LABEL_16:
  long long v21 = (_OWORD *)((v14 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v22 = (long long *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v23 = *v22;
  long long v24 = v22[2];
  v21[1] = v22[1];
  void v21[2] = v24;
  *long long v21 = v23;
  unint64_t v25 = ((unint64_t)v21 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = ((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFFFF8;
  long long v27 = *(_OWORD *)v26;
  *(void *)(v25 + 16) = *(void *)(v26 + 16);
  *(_OWORD *)unint64_t v25 = v27;
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationLinkButtonStyle.PayloadV4(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D5DF6CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for NavigationLinkButtonStyle.PayloadV4(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
      + 24;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFE)
            {
              int v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                void *v19 = 0;
                *(_DWORD *)int v19 = a2 - 0x7FFFFFFF;
              }
              else
              {
                void *v19 = a2;
              }
            }
            else
            {
              unint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((((v9 + 7) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) == 0xFFFFFFE8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) == 0xFFFFFFE8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((((v9 + 7) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8) != 0xFFFFFFE8)
  {
    unsigned int v17 = ~v8 + a2;
    bzero(a1, ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)+ 24);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187D5E190);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for NavigationLinkButtonStyle.PayloadV1(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 17) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *(void *)a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v12 = (a1 + v6 + 17) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 17) & ~v6;
    int v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t initializeWithCopy for NavigationLinkButtonStyle.PayloadV1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = (v7 + 17 + a1) & ~v7;
  uint64_t v9 = (v7 + 17 + a2) & ~v7;
  swift_retain();
  swift_retain();
  v6(v8, v9, v5);
  return a1;
}

uint64_t assignWithCopy for NavigationLinkButtonStyle.PayloadV1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))((*(unsigned __int8 *)(v6 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t assignWithTake for NavigationLinkButtonStyle.PayloadV1(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))((*(unsigned __int8 *)(v6 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationLinkButtonStyle.PayloadV1(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 17) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 17) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 1);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for NavigationLinkButtonStyle.PayloadV1(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 17) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187D5E8D8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 17] & ~v9;
          int v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          a1[16] = 0;
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = a2 - 1;
        }
      }
      return;
  }
}

unsigned __int8 *assignWithTake for ContentListItemNavigationLinkStyle(unsigned __int8 *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  if (((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 <= ((v7 + 17) & (unint64_t)~v7) + v9)
    unint64_t v10 = ((v7 + 17) & ~v7) + v9;
  else {
    unint64_t v10 = ((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
  }
        + 24;
  unsigned int v11 = __dst[v10];
  unsigned int v12 = __src[v10];
  if (v11 > 1)
  {
    if (v12 <= 1)
    {
      if (v12 != 1)
      {
LABEL_45:
        *(_OWORD *)__dst = *(_OWORD *)__src;
        __dst[16] = __src[16];
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))((unint64_t)&__dst[v7 + 17] & v8, (unint64_t)&__src[v7 + 17] & v8, v5);
        __dst[v10] = 0;
        return __dst;
      }
      goto LABEL_16;
    }
LABEL_28:
    memcpy(__dst, __src, v10 + 1);
    return __dst;
  }
  if (v12 > 1)
  {
    if (v11 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
      unint64_t v26 = (unint64_t)&__dst[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
      swift_release();
      if (*(void *)(((v26 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      unint64_t v27 = *(void *)(((v26 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v27 >= 0xFFFFFFFF) {
        LODWORD(v27) = -1;
      }
      if ((int)v27 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((unint64_t)&__dst[v7 + 17] & v8, v5);
    }
    goto LABEL_28;
  }
  if (__dst == __src) {
    return __dst;
  }
  if (v11 == 1)
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(__dst, v5);
    unint64_t v13 = (unint64_t)&__dst[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
    swift_release();
    if (*(void *)(((v13 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
    {
      swift_release();
      swift_release();
    }
    unint64_t v14 = *(void *)(((v13 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    if ((int)v14 - 1 < 0)
    {
      swift_weakDestroy();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))((unint64_t)&__dst[v7 + 17] & v8, v5);
  }
  unsigned int v28 = __src[v10];
  unsigned int v29 = v28 - 2;
  if (v28 >= 2)
  {
    if (v10 <= 3) {
      uint64_t v30 = v10;
    }
    else {
      uint64_t v30 = 4;
    }
    switch(v30)
    {
      case 1:
        int v31 = *__src;
        goto LABEL_41;
      case 2:
        int v31 = *(unsigned __int16 *)__src;
        goto LABEL_41;
      case 3:
        int v31 = *(unsigned __int16 *)__src | (__src[2] << 16);
        goto LABEL_41;
      case 4:
        int v31 = *(_DWORD *)__src;
LABEL_41:
        if (v10 < 4) {
          unsigned int v28 = (v31 | (v29 << (8 * v10))) + 2;
        }
        else {
          unsigned int v28 = v31 + 2;
        }
        break;
      default:
        break;
    }
  }
  if (v28 != 1) {
    goto LABEL_45;
  }
LABEL_16:
  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(__dst, __src, v5);
  int v15 = (void *)((unint64_t)&__dst[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
  unsigned int v16 = (void *)((unint64_t)&__src[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
  *int v15 = *v16;
  unint64_t v17 = ((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = *(unsigned char *)(v18 + 8);
  unint64_t v19 = ((unint64_t)v15 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = ((unint64_t)v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  long long v21 = *(_OWORD *)v20;
  *(unsigned char *)(v19 + 16) = *(unsigned char *)(v20 + 16);
  *(_OWORD *)unint64_t v19 = v21;
  unint64_t v22 = ((unint64_t)v15 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)v16 + 55) & 0xFFFFFFFFFFFFFFF8;
  int v24 = *(void *)(v23 + 8);
  if (*(void *)(v23 + 8) >= 0xFFFFFFFFuLL) {
    int v24 = -1;
  }
  if (v24 - 1 < 0)
  {
    unint64_t v22 = swift_weakTakeInit();
    *(_OWORD *)(v22 + 8) = *(_OWORD *)(v23 + 8);
  }
  else
  {
    long long v25 = *(_OWORD *)v23;
    *(void *)(v22 + 16) = *(void *)(v23 + 16);
    *(_OWORD *)unint64_t v22 = v25;
  }
  uint64_t v32 = (_OWORD *)((v22 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v33 = (long long *)((v23 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v34 = *v33;
  long long v35 = v33[2];
  v32[1] = v33[1];
  v32[2] = v35;
  *uint64_t v32 = v34;
  unint64_t v36 = ((unint64_t)v32 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = ((unint64_t)v33 + 55) & 0xFFFFFFFFFFFFFFF8;
  long long v38 = *(_OWORD *)v37;
  *(void *)(v36 + 16) = *(void *)(v37 + 16);
  *(_OWORD *)unint64_t v36 = v38;
  __dst[v10] = 1;
  return __dst;
}

uint64_t getEnumTagSinglePayload for ContentListItemNavigationLinkStyle(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = ((*(unsigned __int8 *)(v3 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  unint64_t v6 = ((((((((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v6 <= v5) {
    unint64_t v6 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_22;
  }
  unint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) > 3) {
    goto LABEL_6;
  }
  unsigned int v11 = ((a2 + ~(-1 << v8) - 253) >> v8) + 1;
  if (HIWORD(v11))
  {
    int v9 = *(_DWORD *)((char *)a1 + v7);
    if (v9) {
      goto LABEL_14;
    }
LABEL_22:
    unsigned int v13 = *((unsigned __int8 *)a1 + v6);
    if (v13 >= 2) {
      unsigned int v14 = (v13 ^ 0xFF) + 1;
    }
    else {
      unsigned int v14 = 0;
    }
    if (v14 >= 2) {
      return v14 - 1;
    }
    else {
      return 0;
    }
  }
  if (v11 > 0xFF)
  {
    int v9 = *(unsigned __int16 *)((char *)a1 + v7);
    if (*(unsigned __int16 *)((char *)a1 + v7)) {
      goto LABEL_14;
    }
    goto LABEL_22;
  }
  if (v11 < 2) {
    goto LABEL_22;
  }
LABEL_6:
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_22;
  }
LABEL_14:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 254;
}

void storeEnumTagSinglePayload for ContentListItemNavigationLinkStyle(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = ((*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  unint64_t v8 = ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v8 > v7) {
    unint64_t v7 = v8;
  }
  size_t v9 = v7 + 1;
  if (a3 < 0xFE)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 253) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v11 = a2 - 254;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v7 != -1)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x187D5F164);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v7] = ~(_BYTE)a2;
        break;
    }
  }
}

unsigned __int8 *assignWithCopy for NavigationLinkButtonStyle.Payload(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v8 = *(void *)(v6 + 64);
    if (((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24 <= ((v7 + 17) & (unint64_t)~v7) + v8)
      unint64_t v9 = ((v7 + 17) & ~v7) + v8;
    else {
      unint64_t v9 = ((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
    }
         + 24;
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          if (v9 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          if (v9 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v9 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v13 = *(_DWORD *)a1;
          if (v9 < 4) {
LABEL_15:
          }
            unsigned int v10 = (v13 | (v11 << (8 * v9))) + 2;
          else {
LABEL_17:
          }
            unsigned int v10 = v13 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v14 = ~v7;
    if (v10 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      unint64_t v15 = (unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8;
      swift_release();
      if (*(void *)(((v15 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      unint64_t v16 = *(void *)(((v15 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      if ((int)v16 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((unint64_t)&a1[v7 + 17] & v14, v5);
    }
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          if (v9 >= 4) {
            goto LABEL_48;
          }
          goto LABEL_36;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          if (v9 >= 4) {
            goto LABEL_48;
          }
          goto LABEL_36;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v9 < 4) {
            goto LABEL_36;
          }
          goto LABEL_48;
        case 4:
          int v20 = *(_DWORD *)a2;
          if (v9 < 4)
          {
LABEL_36:
            unsigned int v17 = (v20 | (v18 << (8 * v9))) + 2;
            break;
          }
LABEL_48:
          if (v20 != -1) {
            goto LABEL_49;
          }
          goto LABEL_38;
        default:
          break;
      }
    }
    if (v17 == 1)
    {
LABEL_38:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      long long v21 = (void *)((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
      unint64_t v22 = (void *)((unint64_t)&a2[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
      *long long v21 = *v22;
      unint64_t v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v23 = *(void *)v24;
      *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
      unint64_t v25 = ((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v26 = ((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v27 = *(void *)(v26 + 8);
      swift_retain();
      if (v27 < 0xFFFFFFFF)
      {
        long long v28 = *(_OWORD *)v26;
        *(unsigned char *)(v25 + 16) = *(unsigned char *)(v26 + 16);
        *(_OWORD *)unint64_t v25 = v28;
      }
      else
      {
        *(void *)unint64_t v25 = *(void *)v26;
        *(void *)(v25 + 8) = *(void *)(v26 + 8);
        *(unsigned char *)(v25 + 16) = *(unsigned char *)(v26 + 16);
        swift_retain();
        swift_retain();
      }
      unint64_t v29 = ((unint64_t)v21 + 55) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v30 = ((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v31 = *(void *)(v30 + 8);
      if (v31 >= 0xFFFFFFFF) {
        LODWORD(v31) = -1;
      }
      if ((int)v31 - 1 < 0)
      {
        swift_weakCopyInit();
        *(void *)(v29 + 8) = *(void *)(v30 + 8);
        *(void *)(v29 + 16) = *(void *)(v30 + 16);
        swift_retain();
        swift_retain();
      }
      else
      {
        long long v32 = *(_OWORD *)v30;
        *(void *)(v29 + 16) = *(void *)(v30 + 16);
        *(_OWORD *)unint64_t v29 = v32;
      }
      uint64_t v33 = (_OWORD *)((v29 + 31) & 0xFFFFFFFFFFFFFFF8);
      long long v34 = (long long *)((v30 + 31) & 0xFFFFFFFFFFFFFFF8);
      long long v35 = *v34;
      long long v36 = v34[2];
      v33[1] = v34[1];
      v33[2] = v36;
      *uint64_t v33 = v35;
      unint64_t v37 = ((unint64_t)v33 + 55) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v38 = ((unint64_t)v34 + 55) & 0xFFFFFFFFFFFFFFF8;
      long long v39 = *(_OWORD *)v38;
      *(void *)(v37 + 16) = *(void *)(v38 + 16);
      *(_OWORD *)unint64_t v37 = v39;
      char v40 = 1;
    }
    else
    {
LABEL_49:
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      a1[16] = a2[16];
      uint64_t v41 = &a2[v7];
      uint64_t v42 = (unint64_t)&a1[v7 + 17] & v14;
      uint64_t v43 = (unint64_t)(v41 + 17) & v14;
      uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
      swift_retain();
      swift_retain();
      v44(v42, v43, v5);
      char v40 = 0;
    }
    a1[v9] = v40;
  }
  return a1;
}

unsigned __int8 *assignWithTake for NavigationLinkButtonStyle.Payload(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v8 = *(void *)(v6 + 64);
    if (((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24 <= ((v7 + 17) & (unint64_t)~v7) + v8)
      unint64_t v9 = ((v7 + 17) & ~v7) + v8;
    else {
      unint64_t v9 = ((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
    }
         + 24;
    unsigned int v10 = a1[v9];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v12 = v9;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a1;
          if (v9 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v13 = *(unsigned __int16 *)a1;
          if (v9 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v13 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v9 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v13 = *(_DWORD *)a1;
          if (v9 < 4) {
LABEL_15:
          }
            unsigned int v10 = (v13 | (v11 << (8 * v9))) + 2;
          else {
LABEL_17:
          }
            unsigned int v10 = v13 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v14 = ~v7;
    if (v10 == 1)
    {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
      unint64_t v15 = (unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8;
      swift_release();
      if (*(void *)(((v15 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        swift_release();
      }
      unint64_t v16 = *(void *)(((v15 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      if ((int)v16 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
      }
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v6 + 8))((unint64_t)&a1[v7 + 17] & v14, v5);
    }
    unsigned int v17 = a2[v9];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v19 = v9;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          if (v9 >= 4) {
            goto LABEL_45;
          }
          goto LABEL_36;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          if (v9 >= 4) {
            goto LABEL_45;
          }
          goto LABEL_36;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v9 < 4) {
            goto LABEL_36;
          }
          goto LABEL_45;
        case 4:
          int v20 = *(_DWORD *)a2;
          if (v9 < 4)
          {
LABEL_36:
            unsigned int v17 = (v20 | (v18 << (8 * v9))) + 2;
            break;
          }
LABEL_45:
          if (v20 != -1) {
            goto LABEL_46;
          }
          goto LABEL_38;
        default:
          break;
      }
    }
    if (v17 == 1)
    {
LABEL_38:
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      long long v21 = (void *)((unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
      unint64_t v22 = (void *)((unint64_t)&a2[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
      *long long v21 = *v22;
      unint64_t v23 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v23 = *(void *)v24;
      *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
      unint64_t v25 = ((unint64_t)v21 + 31) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v26 = ((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFFFF8;
      long long v27 = *(_OWORD *)v26;
      *(unsigned char *)(v25 + 16) = *(unsigned char *)(v26 + 16);
      *(_OWORD *)unint64_t v25 = v27;
      unint64_t v28 = ((unint64_t)v21 + 55) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v29 = ((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFFFF8;
      int v30 = *(void *)(v29 + 8);
      if (*(void *)(v29 + 8) >= 0xFFFFFFFFuLL) {
        int v30 = -1;
      }
      if (v30 - 1 < 0)
      {
        unint64_t v28 = swift_weakTakeInit();
        *(_OWORD *)(v28 + 8) = *(_OWORD *)(v29 + 8);
      }
      else
      {
        long long v31 = *(_OWORD *)v29;
        *(void *)(v28 + 16) = *(void *)(v29 + 16);
        *(_OWORD *)unint64_t v28 = v31;
      }
      long long v32 = (_OWORD *)((v28 + 31) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v33 = (long long *)((v29 + 31) & 0xFFFFFFFFFFFFFFF8);
      long long v34 = *v33;
      long long v35 = v33[2];
      v32[1] = v33[1];
      v32[2] = v35;
      *long long v32 = v34;
      unint64_t v36 = ((unint64_t)v32 + 55) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v37 = ((unint64_t)v33 + 55) & 0xFFFFFFFFFFFFFFF8;
      long long v38 = *(_OWORD *)v37;
      *(void *)(v36 + 16) = *(void *)(v37 + 16);
      *(_OWORD *)unint64_t v36 = v38;
      char v39 = 1;
    }
    else
    {
LABEL_46:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[16] = a2[16];
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))((unint64_t)&a1[v7 + 17] & v14, (unint64_t)&a2[v7 + 17] & v14, v5);
      char v39 = 0;
    }
    a1[v9] = v39;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationLinkButtonStyle.Payload(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  unint64_t v5 = ((*(unsigned __int8 *)(v3 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)) + v4;
  unint64_t v6 = ((((((((v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v6 <= v5) {
    unint64_t v6 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  unint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 254) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v11 < 2)
    {
LABEL_22:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 2) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_22;
  }
LABEL_14:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 255;
}

void storeEnumTagSinglePayload for NavigationLinkButtonStyle.Payload(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  unint64_t v7 = ((*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)) + v6;
  unint64_t v8 = ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24;
  if (v8 > v7) {
    unint64_t v7 = v8;
  }
  size_t v9 = v7 + 1;
  if (a3 < 0xFF)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 254) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v11 = a2 - 255;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v7 != -1)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x187D5FE80);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in HideNavigationLinkDisclosureIndicator()
{
  return &protocol witness table for HideNavigationLinkDisclosureIndicator;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in ContentListItemNavigationLinkStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>(uint64_t a1)
{
}

void protocol witness for ViewModifier.body(content:) in conformance ShowsNavigationIndicatorDisclosureIndicatorModifier()
{
}

double SplitViewNavigationIndicator.value.getter@<D0>(_OWORD *a1@<X8>)
{
  if (*(void *)(AGGraphGetValue() + 8))
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *(void *)&long long v5 = *Value;
  *((void *)&v5 + 1) = v3;
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>, (uint64_t)&type metadata for DefaultNavigationIndicatorVisibilityKey, (uint64_t)&protocol witness table for DefaultNavigationIndicatorVisibilityKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  double result = *(double *)&v5;
  *a1 = v5;
  return result;
}

double protocol witness for Rule.value.getter in conformance SplitViewNavigationIndicator@<D0>(_OWORD *a1@<X8>)
{
  return SplitViewNavigationIndicator.value.getter(a1);
}

uint64_t protocol witness for Rule.value.getter in conformance AlwaysNavigationIndicator@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return specialized EnvironmentValues.subscript.setter();
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance PresentingToActivationProjection(unsigned char *a1, char *a2)
{
  char v3 = *a2;
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type PresentingToActivationProjection and conformance PresentingToActivationProjection()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection;
  if (!lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection;
  if (!lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection;
  if (!lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentingToActivationProjection and conformance PresentingToActivationProjection);
  }
  return result;
}

uint64_t sub_187D60434()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = (int *)(type metadata accessor for NavigationLinkButtonStyle() - 8);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v15 = *(void *)(*(void *)v3 + 64);
  uint64_t v6 = type metadata accessor for NavigationLinkButtonStyle.PayloadV1();
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  outlined consume of StateOrBinding<Bool>(*(void *)(v1 + v5), *(void *)(v1 + v5 + 8), *(unsigned __int8 *)(v1 + v5 + 16), *(unsigned char *)(v1 + v5 + 17));
  uint64_t v8 = v1 + v5 + v3[11];
  uint64_t v9 = type metadata accessor for NavigationLinkButtonStyle.Payload();
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9);
  uint64_t v11 = v15;
  if (!v10)
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v8, v2);
      uint64_t v12 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4();
      swift_release();
      if (*(void *)(v8 + *(int *)(v12 + 48) + 8))
      {
        swift_release();
        swift_release();
      }
      uint64_t v11 = v15;
      uint64_t v5 = (v4 + 32) & ~v4;
      if (*(void *)(v8 + *(int *)(v12 + 52) + 8) != 1)
      {
        swift_weakDestroy();
        swift_release();
        swift_release();
        uint64_t v11 = v15;
      }
    }
    else
    {
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v8 + *(int *)(v6 + 36), v2);
      uint64_t v11 = v15;
      uint64_t v5 = (v4 + 32) & ~v4;
    }
  }
  uint64_t v13 = v1 + ((v5 + v11 + v7) & ~v7);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v13 + *(int *)(v6 + 36), v2);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in NavigationLinkButtonStyle.reconfiguration(from:)()
{
  type metadata accessor for NavigationLinkButtonStyle();
  type metadata accessor for NavigationLinkButtonStyle.PayloadV1();

  return specialized NavigationLinkButtonStyle.triggerV1(payload:)();
}

uint64_t sub_187D60830()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for NavigationLinkButtonStyle() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = *(void *)(*(void *)v2 + 64);
  uint64_t v5 = type metadata accessor for NavigationLinkButtonStyle.PayloadV4();
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(*(void *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v7 = v0 + v3;
  outlined consume of StateOrBinding<Bool>(*(void *)v7, *(void *)(v7 + 8), *(unsigned __int8 *)(v7 + 16), *(unsigned char *)(v7 + 17));
  uint64_t v8 = v7 + v2[11];
  uint64_t v9 = type metadata accessor for NavigationLinkButtonStyle.Payload();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
  {
    uint64_t v10 = *(void *)(v1 - 8);
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = *(void *)(v1 - 8);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v1);
    swift_release();
    if (*(void *)(v8 + *(int *)(v5 + 48) + 8))
    {
      swift_release();
      swift_release();
    }
    if (*(void *)(v8 + *(int *)(v5 + 52) + 8) != 1)
    {
      swift_weakDestroy();
      swift_release();
      swift_release();
    }
  }
  else
  {
    swift_release();
    swift_release();
    uint64_t v11 = type metadata accessor for NavigationLinkButtonStyle.PayloadV1();
    uint64_t v10 = *(void *)(v1 - 8);
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8 + *(int *)(v11 + 36), v1);
  }
  (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v0 + v6, v1);
  swift_release();
  if (*(void *)(v0 + v6 + *(int *)(v5 + 48) + 8))
  {
    swift_release();
    swift_release();
  }
  if (*(void *)(v0 + v6 + *(int *)(v5 + 52) + 8) != 1)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationLinkButtonStyle.reconfiguration(from:)()
{
  uint64_t v1 = type metadata accessor for NavigationLinkButtonStyle();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = *(void *)(type metadata accessor for NavigationLinkButtonStyle.PayloadV4() - 8);
  return NavigationLinkButtonStyle.triggerV4(payload:)(v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)), v1);
}

uint64_t specialized NavigationLinkButtonStyle.triggerV1(payload:)()
{
  return swift_release();
}

uint64_t assignWithCopy for PresentingToActivationProjection(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for PresentingToActivationProjection(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PresentingToActivationProjection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for PresentingToActivationProjection()
{
  return &unk_1ED45D4E0;
}

void *initializeBufferWithCopyOfBuffer for DefaultListNavigationLinkStyle.ListLink(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
    uint64_t v8 = (char *)v4 + v7;
    uint64_t v9 = (char *)a2 + v7;
    type metadata accessor for ButtonAction();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v26 = *(void *)v9;
      uint64_t v27 = *((void *)v9 + 1);
      char v28 = v9[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v9, v27, v28);
      *(void *)uint64_t v8 = v26;
      *((void *)v8 + 1) = v27;
      unsigned char v8[16] = v28;
      uint64_t v29 = *((void *)v9 + 5);
      long long v30 = *(_OWORD *)(v9 + 24);
      *(_OWORD *)(v8 + 24) = v30;
      *((void *)v8 + 5) = v29;
      id v31 = (id)v30;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v11 = *(void *)v9;
        uint64_t v12 = *((void *)v9 + 1);
        uint64_t v14 = *((void *)v9 + 2);
        uint64_t v13 = *((void *)v9 + 3);
        char v51 = v9[34];
        __int16 v15 = *((_WORD *)v9 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v9, v12, v14, v13, v15, v51);
        *(void *)uint64_t v8 = v11;
        *((void *)v8 + 1) = v12;
        *((void *)v8 + 2) = v14;
        *((void *)v8 + 3) = v13;
        *((_WORD *)v8 + 16) = v15;
        v8[34] = v51;
        uint64_t v16 = *((void *)v9 + 5);
        uint64_t v17 = *((void *)v9 + 6);
        uint64_t v18 = *((void *)v9 + 7);
        uint64_t v19 = *((void *)v9 + 8);
        char v52 = v9[74];
        LOWORD(v14) = *((_WORD *)v9 + 36);
        outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v14, v52);
        *((void *)v8 + 5) = v16;
        *((void *)v8 + 6) = v17;
        *((void *)v8 + 7) = v18;
        *((void *)v8 + 8) = v19;
        *((_WORD *)v8 + 36) = v14;
        v8[74] = v52;
        uint64_t v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
        long long v21 = &v8[v20];
        unint64_t v22 = &v9[v20];
        uint64_t v23 = type metadata accessor for URL();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
        uint64_t v24 = type metadata accessor for LinkDestination.Configuration();
        v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_9:
        swift_storeEnumTagMultiPayload();
        uint64_t v33 = a3[5];
        long long v34 = (char *)v4 + v33;
        long long v35 = (char *)a2 + v33;
        uint64_t v36 = *(void *)v35;
        uint64_t v37 = *((void *)v35 + 1);
        uint64_t v38 = *((void *)v35 + 2);
        uint64_t v39 = *((void *)v35 + 3);
        char v40 = v35[32];
        outlined copy of Environment<HoverEffectContext?>.Content(*(void *)v35, v37, v38, v39, v40);
        *(void *)long long v34 = v36;
        *((void *)v34 + 1) = v37;
        *((void *)v34 + 2) = v38;
        *((void *)v34 + 3) = v39;
        v34[32] = v40;
        uint64_t v41 = a3[6];
        uint64_t v42 = (char *)v4 + v41;
        uint64_t v43 = (char *)a2 + v41;
        uint64_t v44 = *(void *)v43;
        LOBYTE(v37) = v43[8];
        outlined copy of Environment<Bool>.Content(*(void *)v43, v37);
        *(void *)uint64_t v42 = v44;
        v42[8] = v37;
        uint64_t v45 = a3[7];
        uint64_t v46 = (char *)v4 + v45;
        uint64_t v47 = (char *)a2 + v45;
        uint64_t v48 = *(void *)v47;
        char v49 = v47[8];
        outlined copy of Environment<Bool>.Content(*(void *)v47, v49);
        *(void *)uint64_t v46 = v48;
        v46[8] = v49;
        return v4;
      }
      uint64_t v32 = *((void *)v9 + 1);
      *(void *)uint64_t v8 = *(void *)v9;
      *((void *)v8 + 1) = v32;
    }
    swift_retain();
    goto LABEL_9;
  }
  uint64_t v25 = *(void *)a2;
  *uint64_t v4 = *(void *)a2;
  uint64_t v4 = (void *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

_WORD *initializeWithTake for DefaultListNavigationLinkStyle.ListLink(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v10 = *((_OWORD *)v8 + 1);
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
    *((_OWORD *)v7 + 1) = v10;
    *(_DWORD *)(v7 + 31) = *(_DWORD *)(v8 + 31);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
    *(_DWORD *)(v7 + 71) = *(_DWORD *)(v8 + 71);
    uint64_t v11 = *(int *)(type metadata accessor for LinkDestination() + 24);
    uint64_t v12 = &v7[v11];
    uint64_t v13 = &v8[v11];
    uint64_t v14 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    uint64_t v15 = type metadata accessor for LinkDestination.Configuration();
    v12[*(int *)(v15 + 20)] = v13[*(int *)(v15 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  uint64_t v16 = a3[5];
  uint64_t v17 = a3[6];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  long long v20 = *((_OWORD *)v19 + 1);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v20;
  unsigned char v18[32] = v19[32];
  long long v21 = (char *)a1 + v17;
  unint64_t v22 = (char *)a2 + v17;
  v21[8] = v22[8];
  *(void *)long long v21 = *(void *)v22;
  uint64_t v23 = a3[7];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = (char *)a2 + v23;
  *(void *)uint64_t v24 = *(void *)v25;
  v24[8] = v25[8];
  return a1;
}