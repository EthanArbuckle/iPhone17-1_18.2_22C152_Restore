uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance TabViewStyleInput()
{
  return MEMORY[0x1F40FD528]();
}

uint64_t getEnumTagSinglePayload for BaseModifier(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 9)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t getEnumTagSinglePayload for AlertTransformModifier(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for ActionSheet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

__n128 __swift_memcpy29_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 13) = *(_OWORD *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _LazyLayout_Subview(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 95)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for OnScrollVisibilityGeometryAction(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 25)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for EnvironmentChangeModifier2(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.SafeAreaTransitionStateKey()
{
  return MEMORY[0x1F40FE390]();
}

uint64_t destructiveInjectEnumTag for FocusStore.Entry.Target()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for ViewGraphFeature.needsUpdate(graph:) in conformance _UIHostingView<A>.EnableVFDFeature()
{
  return protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance AccessibilityLargeContentViewerKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void protocol witness for SetAlgebra.init() in conformance UIRectEdge(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t type metadata instantiation function for AccessibilityLargeContentViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 24);
}

uint64_t protocol witness for static _AttributeBody.comparisonMode.getter in conformance AccessibilityLargeContentViewHitTestingTransform()
{
  return 2;
}

uint64_t storeEnumTagSinglePayload for AlertTransformModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ActionSheet(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AnyDynamicItem(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void destroy for PlatformBarUpdater.UpdateContext(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

void protocol witness for PlatformGroupFactory.features.getter in conformance HostingScrollView.PlatformContainer(_WORD *a1@<X8>)
{
  *a1 = 1;
}

uint64_t getEnumTagSinglePayload for NavigationTitleStorage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BaseModifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t destructiveProjectEnumData for AnyNavigationPath.Error(uint64_t result)
{
  *(void *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

void *destructiveInjectEnumTag for AnyNavigationPath.Error(void *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
    *result &= 0xFFFFFFFFFFFFFF8uLL;
    result[1] = v2;
  }
  else
  {
    *__n128 result = 8 * (a2 - 2);
    result[1] = 0x8000000000000000;
  }
  return result;
}

uint64_t getEnumTag for AnyNavigationPath.Error(void *a1)
{
  uint64_t v1 = a1[1] >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

uint64_t type metadata instantiation function for CapsuleSlider.ScrollState()
{
  return MEMORY[0x1F41863F0]();
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance ButtonStyleContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FE6C0](a1, a2, a3, a4, a6, a5);
}

void protocol witness for static PreviewTraitProtocol.defaultValue.getter in conformance PreviewModifierTrait(void *a1@<X8>)
{
  *a1 = MEMORY[0x1E4FBC860];
}

uint64_t type metadata instantiation function for CapsuleSlider.ScrollState.Orientation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t storeEnumTagSinglePayload for _LazyLayout_Subview(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 94) = 0;
    *(_WORD *)(result + 92) = 0;
    *(_DWORD *)(result + 88) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 95) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 95) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void protocol witness for static Rule.initialValue.getter in conformance AccessibilityLargeContentViewHitTestingTransform(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t protocol witness for StyleModifier.style.setter in conformance UIKitButtonStyleModifier<A>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t protocol witness for LayoutEngine.lengthThatFits(_:in:) in conformance ScrollableItemLayoutComputer._LayoutEngine(uint64_t a1, char a2)
{
  return MEMORY[0x1F40FD920](a1, a2 & 1);
}

uint64_t getEnumTagSinglePayload for AnySource(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 29)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnySource(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 29) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 29) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ActiveContextMenu(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyDynamicItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationPath()
{
  return &type metadata for NavigationPath;
}

uint64_t storeEnumTagSinglePayload for NavigationState.StackContent.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 251;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 5;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NavigationState.StackContent.Key(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 6;
  int v5 = v3 - 6;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t type metadata instantiation function for AsOptional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 40);
}

uint64_t storeEnumTagSinglePayload for NavigationTitleStorage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

uint64_t type metadata instantiation function for RelationshipModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 32);
}

uint64_t getEnumTagSinglePayload for OutlineRootConfiguration(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ActionsLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ActionsLayout(a1, a2, a3, a4, a5, a6, a7, a8, a9, MEMORY[0x1E4F415D8]);
}

{
  return protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ActionsLayout(a1, a2, a3, a4, a5, a6, a7, a8, a9, MEMORY[0x1E4F415D0]);
}

uint64_t protocol witness for Layout.explicitAlignment(of:in:proposal:subviews:cache:) in conformance ActionsLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t))
{
  return a10(a1);
}

void *initializeBufferWithCopyOfBuffer for OnDeleteTableRowModifier(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v3 = a2[1];
    *a1 = *a2;
    a1[1] = v3;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityRelationshipScope.Key(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.OpenWindowActionKey(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

void destructiveInjectEnumTag for WindowGroupRootContent(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    size_t v4 = 16;
  }
  else {
    size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ()(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t getEnumTagSinglePayload for MenuStyleConfiguration(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 32)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t getEnumTagSinglePayload for PersistentSystemOverlaysKey.Overlays(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t type metadata instantiation function for SidebarListBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 48);
}

uint64_t storeEnumTagSinglePayload for ActiveContextMenu(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 4) = 0;
    *(_DWORD *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 5) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 4) = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContainerBackgroundValue(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

double protocol witness for LayoutEngine.layoutPriority() in conformance ScrollableItemLayoutComputer._LayoutEngine()
{
  return 0.0;
}

uint64_t storeEnumTagSinglePayload for OnScrollVisibilityGeometryAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 25) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for EnvironmentChangeModifier2(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ButtonStyleConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)__n128 result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)(result + 2) = a2 + 1;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ButtonStyleConfiguration(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
  }
  unsigned int v4 = *((unsigned __int8 *)a1 + 2);
  BOOL v5 = v4 >= 2;
  int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t destroy for ActionsLayout(uint64_t a1)
{
  return outlined consume of Environment<Bool>.Content(*(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

void protocol witness for CodingKey.init(intValue:) in conformance PlaybackButton.State.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t (*protocol witness for StyleModifier.style.modify in conformance UIKitButtonStyleModifier<A>())()
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t initializeWithCopy for OnTestViewModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void protocol witness for InternalCustomHoverEffect.systemHoverEffect.getter in conformance AutomaticHoverEffect(_WORD *a1@<X8>)
{
  *a1 = 256;
}

uint64_t protocol witness for ViewGraphFeature.modifyViewOutputs(outputs:inputs:graph:) in conformance _UIHostingView<A>.EnableVFDFeature(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1, a2, a4, a5);
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnabledTechnologiesKey(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

uint64_t getEnumTagSinglePayload for ResolvedRadioGroupPicker(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 8)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance DialogColorSchemeKey(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t destroy for StyleApplicator.EnumeratedView(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for StyleApplicator.EnumeratedView(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  int v6 = *(void **)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_bridgeObjectRetain();
  id v7 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destructiveInjectEnumTag for HoverCallback(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2 & 1;
  return result;
}

uint64_t initializeWithCopy for NavigationTitleStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    char v7 = *(unsigned char *)(a2 + 16);
    outlined copy of Text.Storage(*(void *)a2, v6, v7);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v6;
    *(unsigned char *)(a1 + 16) = v7;
    *(void *)(a1 + 24) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  uint64_t v9 = *(void *)(a2 + 32);
  if (v9 != 1) {
    uint64_t v9 = swift_retain();
  }
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_retain();
  return a1;
}

void protocol witness for static StatefulRule.initialValue.getter in conformance LimitedAvailabilityTableColumnContent<A, B>.IndirectOutputs(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance DefaultToggleIsOnKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  char v3 = v2 == 2;
  int v4 = *a2;
  if (v4 != 2) {
    char v3 = 0;
  }
  if (v2 != 2 && v4 != 2) {
    char v3 = ((v4 & 1) == 0) ^ v2;
  }
  return v3 & 1;
}

void partial apply for closure #1 in UIHostingViewBase.cancelAsyncRendering()(BOOL *a1@<X8>)
{
}

{
  uint64_t v1;
  uint64_t v2;

  int v2 = *(void *)(v1 + 176);
  if (v2) {
    *(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread) = 0;
  }
  *a1 = v2 == 0;
}

uint64_t _s7SwiftUI17UIHostingViewBaseC20cancelAsyncRenderingyyFytSgyXEfU_TA_0@<X0>(BOOL *a1@<X8>)
{
  return closure #1 in UIHostingViewBase.cancelAsyncRendering()(v1, a1);
}

uint64_t closure #1 in UIHostingViewBase.cancelAsyncRendering()@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 176);
  if (v2) {
    *(unsigned char *)(v2 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread) = 0;
  }
  *a2 = v2 == 0;
  return result;
}

uint64_t protocol witness for Animatable.animatableData.setter in conformance PlatterButtonStyleView<A>.ClippingShape(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a3, a3, a4);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FocusStore(_DWORD *a1, int *a2)
{
  int v2 = *a2;
  return *a1 != -1 && v2 != -1 && *a1 == v2;
}

uint64_t storeEnumTagSinglePayload for AccessibilityRelationshipScope.Key(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void protocol witness for static _ViewTraitKey.defaultValue.getter in conformance ShouldExpandAllTraitKey(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
}

void *assignWithTake for WindowVisibilityButton(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance SceneBridge.UserActivityPreferenceKey(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

_UNKNOWN **base witness table accessor for ViewModifier in ButtonStyleModifier<A>()
{
  return &protocol witness table for ButtonStyleModifier<A>;
}

uint64_t type metadata instantiation function for SidebarListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 56);
}

uint64_t protocol witness for static PropertyKeyLookup.lookup(in:) in conformance UITraitBridgedEnvironmentPropertyKeyLookup<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return static UITraitBridgedEnvironmentPropertyKeyLookup.lookup(in:)(*a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t getEnumTagSinglePayload for HoverCallback(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for MenuStyleConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

uint64_t type metadata instantiation function for UIKitButtonAdaptor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 80);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UIRectEdge(void *a1, void *a2)
{
  return *a1 == *a2;
}

void *initializeBufferWithCopyOfBuffer for CircularPercentageGaugeRing.StartCap(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_25(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_26(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_27(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_29(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_31(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_32(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_33(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_35(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_36(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_37(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_39(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_41(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_42(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_43(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_44(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_45(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_46(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_47(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_48(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_49(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_50(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_51(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_52(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_53(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_54(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_55(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_56(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_57(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_58(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_59(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_61(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_62(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_63(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_64(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_65(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_66(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_67(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_68(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_69(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_71(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_72(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_73(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_74(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_75(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_76(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_77(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_78(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_79(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_81(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_82(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_83(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_84(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_85(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_86(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_87(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t partial apply for closure #1 in _LazyLayout_Subviews.apply(from:style:to:)(uint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t *a4)
{
  return closure #1 in _LazyLayout_Subviews.apply(from:style:to:)(a1, a2, a3, a4, *(void *)(v4 + 16), *(void (**)(uint64_t *, char *))(v4 + 24));
}

void protocol witness for Collection.subscript.read in conformance FetchedResults<A>(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 40))(*a1);

  free(v1);
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_unknownObjectRelease();
}

uint64_t protocol witness for static DynamicProperty._propertyBehaviors.getter in conformance AppStorage<A>()
{
  return MEMORY[0x1F40FE6D0]();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AGAttribute(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for ViewGraphFeature.allowsAsyncUpdate(graph:) in conformance _UIHostingView<A>.EnableVFDFeature()
{
  return protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key();
}

ValueMetadata *type metadata accessor for AccessibilityAttachmentModifier()
{
  return &type metadata for AccessibilityAttachmentModifier;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AccessibilityLargeContentViewBehavior(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t __swift_memcpy5_4(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(unsigned char *)(result + 4) = *((unsigned char *)a2 + 4);
  *(_DWORD *)__n128 result = v2;
  return result;
}

void protocol witness for static ViewInputsModifier.graphInputsSemantics.getter in conformance NavigationDestinationScopeModifier(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance StaticSourceWriter<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for StaticSourceWriter<A, B>);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance RichTextEditor()
{
  return static View.makeView(view:inputs:)();
}

void protocol witness for CodingKey.init(intValue:) in conformance PlaybackButton.Configuration.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 7;
}

void partial apply for closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)(void *a1)
{
  closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t destroy for AccessibilityTextLayoutProperties()
{
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  return implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, v2[5], v2[2], v2[3], v2[4]);
}

uint64_t getEnumTag for AsyncImagePhase(void *a1)
{
  uint64_t v1 = *a1 >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*a1 >> 3) + 2;
  }
}

uint64_t partial apply for implicit closure #2 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)()
{
  return _ViewInputs.intern<A>(_:id:)();
}

uint64_t partial apply for implicit closure #4 in static UIViewControllerRepresentable._makeView(view:inputs:)()
{
  return implicit closure #4 in static UIViewControllerRepresentable._makeView(view:inputs:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance StaticSourceWriter<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static StaticSourceWriter._makeInputs(modifier:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

unsigned char *destructiveInjectEnumTag for AccessibilityLargeContentViewBehavior(unsigned char *result, char a2)
{
  *__n128 result = a2;
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance RichTextEditor()
{
  return static View.makeViewList(view:inputs:)();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

uint64_t block_destroy_helper_24()
{
  return swift_release();
}

uint64_t block_destroy_helper_25()
{
  return swift_release();
}

uint64_t block_destroy_helper_26()
{
  return swift_release();
}

uint64_t block_destroy_helper_27()
{
  return swift_release();
}

uint64_t block_destroy_helper_28()
{
  return swift_release();
}

uint64_t block_destroy_helper_29()
{
  return swift_release();
}

uint64_t block_destroy_helper_30()
{
  return swift_release();
}

uint64_t block_destroy_helper_31()
{
  return swift_release();
}

uint64_t block_destroy_helper_32()
{
  return swift_release();
}

uint64_t block_destroy_helper_33()
{
  return swift_release();
}

uint64_t block_destroy_helper_34()
{
  return swift_release();
}

uint64_t block_destroy_helper_35()
{
  return swift_release();
}

uint64_t block_destroy_helper_36()
{
  return swift_release();
}

uint64_t block_destroy_helper_37()
{
  return swift_release();
}

uint64_t block_destroy_helper_38()
{
  return swift_release();
}

uint64_t block_destroy_helper_39()
{
  return swift_release();
}

uint64_t block_destroy_helper_40()
{
  return swift_release();
}

uint64_t block_destroy_helper_41()
{
  return swift_release();
}

uint64_t block_destroy_helper_42()
{
  return swift_release();
}

uint64_t block_destroy_helper_43()
{
  return swift_release();
}

uint64_t block_destroy_helper_44()
{
  return swift_release();
}

uint64_t block_destroy_helper_45()
{
  return swift_release();
}

uint64_t block_destroy_helper_46()
{
  return swift_release();
}

uint64_t block_destroy_helper_47()
{
  return swift_release();
}

uint64_t block_destroy_helper_48()
{
  return swift_release();
}

uint64_t block_destroy_helper_49()
{
  return swift_release();
}

uint64_t block_destroy_helper_50()
{
  return swift_release();
}

uint64_t block_destroy_helper_51()
{
  return swift_release();
}

uint64_t block_destroy_helper_52()
{
  return swift_release();
}

uint64_t block_destroy_helper_53()
{
  return swift_release();
}

uint64_t block_destroy_helper_54()
{
  return swift_release();
}

uint64_t block_destroy_helper_55()
{
  return swift_release();
}

uint64_t block_destroy_helper_56()
{
  return swift_release();
}

uint64_t block_destroy_helper_57()
{
  return swift_release();
}

uint64_t block_destroy_helper_58()
{
  return swift_release();
}

uint64_t block_destroy_helper_59()
{
  return swift_release();
}

uint64_t block_destroy_helper_60()
{
  return swift_release();
}

uint64_t block_destroy_helper_61()
{
  return swift_release();
}

uint64_t block_destroy_helper_62()
{
  return swift_release();
}

uint64_t block_destroy_helper_63()
{
  return swift_release();
}

uint64_t block_destroy_helper_64()
{
  return swift_release();
}

uint64_t block_destroy_helper_65()
{
  return swift_release();
}

uint64_t block_destroy_helper_66()
{
  return swift_release();
}

uint64_t block_destroy_helper_67()
{
  return swift_release();
}

uint64_t block_destroy_helper_68()
{
  return swift_release();
}

uint64_t block_destroy_helper_69()
{
  return swift_release();
}

uint64_t block_destroy_helper_70()
{
  return swift_release();
}

uint64_t block_destroy_helper_71()
{
  return swift_release();
}

uint64_t block_destroy_helper_72()
{
  return swift_release();
}

uint64_t block_destroy_helper_73()
{
  return swift_release();
}

uint64_t block_destroy_helper_74()
{
  return swift_release();
}

uint64_t block_destroy_helper_75()
{
  return swift_release();
}

uint64_t block_destroy_helper_76()
{
  return swift_release();
}

uint64_t block_destroy_helper_77()
{
  return swift_release();
}

uint64_t block_destroy_helper_78()
{
  return swift_release();
}

uint64_t block_destroy_helper_79()
{
  return swift_release();
}

uint64_t block_destroy_helper_80()
{
  return swift_release();
}

uint64_t block_destroy_helper_81()
{
  return swift_release();
}

uint64_t block_destroy_helper_82()
{
  return swift_release();
}

uint64_t block_destroy_helper_83()
{
  return swift_release();
}

uint64_t block_destroy_helper_84()
{
  return swift_release();
}

uint64_t block_destroy_helper_85()
{
  return swift_release();
}

uint64_t block_destroy_helper_86()
{
  return swift_release();
}

uint64_t block_destroy_helper_87()
{
  return swift_release();
}

unsigned char *destructiveInjectEnumTag for SearchScopeActivation.Role(unsigned char *result, int a2)
{
  if (a2) {
    *__n128 result = a2 + 1;
  }
  return result;
}

uint64_t getEnumTag for SearchScopeActivation.Role(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance OnScrollVisibilityChangeModifier(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(int *, uint64_t *))
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[5];
  int v11 = *((_DWORD *)a2 + 16);
  uint64_t v12 = a2[9];
  char v13 = *((unsigned char *)a2 + 80);
  int v24 = *a1;
  uint64_t v15 = v7;
  int v16 = v8;
  uint64_t v17 = v9;
  long long v18 = *(_OWORD *)(a2 + 3);
  uint64_t v19 = v10;
  long long v20 = *((_OWORD *)a2 + 3);
  int v21 = v11;
  uint64_t v22 = v12;
  char v23 = v13;
  return a7(&v24, &v15);
}

uint64_t type metadata instantiation function for UIKitMenuButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 64);
}

uint64_t getEnumTagSinglePayload for _NavigationSplitReader.PreparedColumn(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverCallback(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SectionIndexLabel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 16) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

void *type metadata accessor for OnTestViewModifier()
{
  return &unk_1ED428908;
}

uint64_t getEnumTag for TouchBarItemPresence(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

ValueMetadata *type metadata accessor for PPTTestCase.Name()
{
  return &type metadata for PPTTestCase.Name;
}

uint64_t destroy for PrimitiveTargetVisibilityModifier()
{
  return swift_release();
}

void protocol witness for ListCoreDataSource.spacing(forSectionAt:) in conformance TableDataSourceAdaptor(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

uint64_t protocol witness for PlatformViewFactory.features.getter in conformance PlatformArchivedDisplayList<A>.Factory()
{
  return MEMORY[0x1F40FF928]();
}

uint64_t closure #1 in static ViewModifier._makeAccessibilityHitTestingModifier(modifier:inputs:outputs:)(uint64_t a1)
{
  return a1 - 1;
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedSectionStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(v1 + 8);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(v1 + 16);
  return outlined copy of Binding<NavigationSplitViewColumn>?(v2, v3);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance DefaultMinListRowHeightKey(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t result = *(unsigned __int8 *)(a2 + 8);
  if ((v3 & 1) == 0) {
    return (*(double *)a1 == *(double *)a2) & ~result;
  }
  return result;
}

void FocusState.Binding.wrappedValue.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  char v3 = *(void **)(*(void *)a1 + 24);
  int v4 = *(void **)(*(void *)a1 + 32);
  uint64_t v5 = *(void *)(*(void *)a1 + 8);
  uint64_t v6 = *(void *)(*(void *)a1 + 16);
  if (a2)
  {
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 24), v4, v5);
    type metadata accessor for Binding();
    specialized Binding.wrappedValue.setter();
    uint64_t v7 = *(void (**)(void *, uint64_t))(v6 + 8);
    v7(v3, v5);
    v7(v4, v5);
  }
  else
  {
    type metadata accessor for Binding();
    specialized Binding.wrappedValue.setter();
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  free(v4);
  free(v3);

  free(v2);
}

uint64_t type metadata completion function for _TuplePickerContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AsOptional()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for _ListStyleConfiguration()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for AccessibilityFocusStore.Entry()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for FocusState.Binding()
{
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithTake for EnvironmentValues.SafeAreaTransitionStateKey.Value(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

void protocol witness for Hashable.hash(into:) in conformance ActiveEditMenu()
{
  Hasher._combine(_:)(*v0);
}

uint64_t assignWithCopy for NavigationDestinationModifier.SeededResolver(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  return a1;
}

void *assignWithCopy for _TaskValueModifier.InnerModifier.TaskState(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t type metadata completion function for DelaySource()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

{
  return type metadata completion function for DelaySource();
}

uint64_t type metadata completion function for PlatformItemLabelView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata completion function for TransformBox()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedNavigationStackStyle@<X0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 40);
  int v5 = *(_DWORD *)(v1 + 48);
  char v6 = *(unsigned char *)(v1 + 52);
  *(void *)a1 = *(void *)v1;
  *(unsigned char *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  *(void *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 52) = v6;
  swift_bridgeObjectRetain();

  return swift_retain();
}

uint64_t type metadata completion function for TupleWidget()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for _OnHoverPickerContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for LazyPageTabView()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t type metadata completion function for MenuButton()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t destroy for FocusStore()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for GradientBackground(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t static HoverEffect.automatic.getter@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;

  return swift_retain();
}

uint64_t initializeWithTake for UserDefaultObserver.Target.GraphAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_weakTakeInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for InsetListLabelStyle.StyleView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  outlined consume of Environment<Bool>.Content(v5, v6);
  return a1;
}

void *assignWithCopy for MenuStyleConfiguration(void *a1, void *a2)
{
  uint64_t v4 = *a2;
  if (*a1)
  {
    if (v4)
    {
      uint64_t v5 = a2[1];
      *a1 = v4;
      a1[1] = v5;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v4)
  {
    uint64_t v6 = a2[1];
    *a1 = v4;
    a1[1] = v6;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_8:
  uint64_t v7 = a2[2];
  if (!a1[2])
  {
    if (v7)
    {
      uint64_t v9 = a2[3];
      a1[2] = v7;
      a1[3] = v9;
      swift_retain();
      return a1;
    }
LABEL_14:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    return a1;
  }
  if (!v7)
  {
    swift_release();
    goto LABEL_14;
  }
  uint64_t v8 = a2[3];
  a1[2] = v7;
  a1[3] = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for EditModeScopeModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeBufferWithCopyOfBuffer for DisplayList.AccessibilityUpdater.CacheValue(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t partial apply for closure #1 in FeedbackGenerator.body(content:)()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;

  unint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for FeedbackGenerator() - 8);
  id v5 = v0 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = partial apply for closure #1 in FeedbackGenerator.body(content:);
  return closure #1 in FeedbackGenerator.body(content:)(v5, v2, v3);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance UIKitSystemButtonConfigurationModifier.ResolvedPlatformItemContent()
{
  return static _ViewListOutputs.unaryViewList<A>(view:inputs:)();
}

uint64_t initializeWithCopy for TooltipModifier.TooltipResponderUpdater(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t destroy for PhoneUnbridgedNavigationStackCore()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t assignWithCopy for LazyPageTabModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t destroy for SelectionEditMenuModifier.Child(id *a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for PhoneUnbridgedNavigationStackCore(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  swift_release();
  int v5 = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 48) = v5;
  return a1;
}

uint64_t initializeWithCopy for ContextMenuResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t specialized ActionDispatcherSubscriber.receive(subscription:)(void *a1)
{
  return dispatch thunk of Subscription.request(_:)();
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance FocusBridgeKey()
{
  swift_weakInit();

  return swift_weakAssign();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key@<X0>(void *a1@<X2>, void *a2@<X3>, void *a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  *a3 = *a2;

  return swift_bridgeObjectRetain();
}

uint64_t initializeWithCopy for PhoneUnbridgedNavigationStackCore(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v3;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for EnvironmentValues.SafeAreaTransitionStateKey.Value(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

BOOL specialized static TimelineInvalidationAction.== infix(_:_:)()
{
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v1 = swift_weakLoadStrong();
  uint64_t v2 = v1;
  if (Strong)
  {
    swift_release();
    if (v2)
    {
      swift_release();
      return Strong == v2;
    }
    return 0;
  }
  if (v1)
  {
    swift_release();
    return 0;
  }
  return 1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance UIKitPresentationModeLocation<A>(uint64_t a1, uint64_t a2)
{
  return static UIKitPresentationModeLocation.== infix(_:_:)(a1, a2);
}

BOOL static UIKitPresentationModeLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)MEMORY[0x18C119DF0]();
  uint64_t v4 = (void *)MEMORY[0x18C119DF0](a2);
  int v5 = v4;
  if (v3)
  {

    if (v5)
    {

      return v3 == v5;
    }
    return 0;
  }
  if (v4)
  {

    return 0;
  }
  return 1;
}

void *initializeBufferWithCopyOfBuffer for AllowsHitTestingFilter(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ExternalGestureActionModifier()
{
  return static ViewModifier.makeView(modifier:inputs:body:)();
}

void *assignWithCopy for LazyPageTabView(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  int v5 = a1;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  size_t v11 = ((v9 + 16) & ~v9) + v10;
  uint64_t v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v34 = ~v9;
  if ((v8 & 0x80000000) != 0)
  {
    size_t v32 = ((v9 + 16) & ~v9) + v10;
    uint64_t v17 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    int v18 = v17(((unint64_t)v12 + v9 + 8) & ~v9, v8, v6);
    uint64_t v19 = v17;
    int v30 = v18;
    char v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v4 = a2;
    int v5 = a1;
    int v15 = v19(((unint64_t)v13 + v9 + 8) & ~v9, v8, v6);
    size_t v11 = v32;
    uint64_t v3 = a3;
    if (!v30)
    {
LABEL_5:
      if (!v15)
      {
        *int v5 = *v4;
        swift_retain();
        swift_release();
        *uint64_t v12 = *v13;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)v12 + v9 + 8) & v34, ((unint64_t)v13 + v9 + 8) & v34, v6);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v12 + v9 + 8) & v34, v6);
      goto LABEL_9;
    }
  }
  else
  {
    char v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = *v13;
    if (*v13 >= 0xFFFFFFFFuLL) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 + 1;
    if (*v12 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v15)
  {
    *int v5 = *v4;
    *uint64_t v12 = *v13;
    uint64_t v20 = ((unint64_t)v12 + v9 + 8) & v34;
    unint64_t v21 = (unint64_t)v13 + v9 + 8;
    uint64_t v22 = v5;
    char v23 = v4;
    uint64_t v24 = v6;
    unint64_t v25 = v21 & v34;
    v26 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    uint64_t v27 = v24;
    uint64_t v4 = v23;
    int v5 = v22;
    v26(v20, v25, v27);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v5, v4, v11);
LABEL_12:
  uint64_t v28 = *(void *)(*(void *)(v3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v28 + 24))(((unint64_t)v5 + v11 + *(unsigned __int8 *)(v28 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80), ((unint64_t)v4 + v11 + *(unsigned __int8 *)(v28 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
  return v5;
}

uint64_t destroy for CubicGradientProvider()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ContainerBackgroundModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TooltipModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Text.Storage(v7, v8, v9);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for EditModeScopeModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ExternalGestureActionModifier()
{
  return static ViewModifier.makeViewList(modifier:inputs:body:)();
}

uint64_t destroy for TooltipModifier(uint64_t a1)
{
  outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));

  return swift_bridgeObjectRelease();
}

uint64_t type metadata completion function for PickerBuilder.Content()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for ContentShapeKindResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for AsOptional(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *uint64_t v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for LazyPageTabModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  return a1;
}

void *initializeWithCopy for MenuStyleConfiguration(void *a1, void *a2)
{
  if (*a2)
  {
    uint64_t v4 = a2[1];
    *a1 = *a2;
    a1[1] = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  uint64_t v5 = a2[2];
  if (v5)
  {
    uint64_t v6 = a2[3];
    a1[2] = v5;
    a1[3] = v6;
    swift_retain();
  }
  else
  {
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  }
  return a1;
}

void protocol witness for PlatformDrawable.setContentsScale(_:) in conformance CGDrawingView(double a1)
{
  id v3 = objc_msgSend(v1, sel_layer);
  objc_msgSend(v3, sel_setContentsScale_, a1);
}

uint64_t initializeWithCopy for TooltipModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata completion function for OptionalFormatInputToString()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance EmptyTuple()
{
  return Hasher._finalize()();
}

uint64_t destroy for LazyPageTabView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
  {
    if (!(*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)v9 + v6 + 8) & v7))
    {
LABEL_5:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v9 + v6 + 8) & v7, v4);
    }
  }
  else
  {
    uint64_t v10 = *v9;
    if ((unint64_t)*v9 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    if (v10 == -1) {
      goto LABEL_5;
    }
  }
  uint64_t v11 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v12 = *(uint64_t (**)(unint64_t))(v11 + 8);
  unint64_t v13 = (v8 + a1 + ((v6 + 16) & v7) + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);

  return v12(v13);
}

void *assignWithCopy for AlertTransformModifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _AlignmentWritingModifier(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  return _ViewListOutputs.multiModifier<A>(_:inputs:)();
}

void *initializeBufferWithCopyOfBuffer for WindowVisibilityButton(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TextFieldState.DeprecatedActions(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithCopy for TableRowContextMenuTraitKey.Storage(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t SwiftUIGlue2.configureEmptyEnvironment(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = one-time initialization token for configuredForPlatform;
  uint64_t result = swift_retain();
  if (v2 != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v4 = static EnvironmentValues.configuredForPlatform;
  if (v1)
  {
    uint64_t result = swift_release();
    if (v4) {
      BOOL v5 = v1 == v4;
    }
    else {
      BOOL v5 = 0;
    }
    if (!v5) {
      return EnvironmentValues._configureForPlatform(traitCollection:)(0);
    }
  }
  else if (static EnvironmentValues.configuredForPlatform)
  {
    swift_retain();
    return EnvironmentValues.plist.setter();
  }
  return result;
}

uint64_t SwiftUIGlue.nextUpdate(nextTime:interval:reason:)(double *a1, uint64_t a2, double a3)
{
  double v5 = *a1;
  type metadata accessor for ViewGraph();
  uint64_t v6 = MEMORY[0x18C114EE0]();
  swift_beginAccess();
  double v7 = *(double *)(v6 + 376);
  if (v5 < v7) {
    double v7 = v5;
  }
  *(double *)(v6 + 376) = v7;
  uint64_t v8 = swift_release();
  uint64_t v9 = MEMORY[0x18C114EE0](v8);
  swift_beginAccess();
  double v10 = *(double *)(v9 + 384);
  if (a3 == 0.0)
  {
    if (v10 <= 0.0166666667) {
      goto LABEL_9;
    }
    double v10 = INFINITY;
  }
  else if (v10 > a3)
  {
    double v10 = a3;
  }
  *(double *)(v9 + 384) = v10;
LABEL_9:
  if ((a2 & 0x100000000) == 0) {
    specialized Set._Variant.insert(_:)(&v12, a2);
  }
  swift_endAccess();
  return swift_release();
}

id @objc _UIHostingView.next.getter(void *a1)
{
  id v1 = a1;
  id v2 = _UIHostingView.next.getter();

  return v2;
}

id _UIHostingView.next.getter()
{
  id v1 = *(void **)(*(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0)) + 64);
  id v2 = v1;
  if (!v1) {
    id v2 = _UIHostingView.defaultNextResponder.getter();
  }
  id v3 = v1;
  return v2;
}

id _UIHostingView.defaultNextResponder.getter()
{
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for _UIHostingView();
  id v1 = objc_msgSendSuper2(&v3, sel_nextResponder);

  return v1;
}

uint64_t (*protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _UIHostingView.currentTimestamp.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*_UIHostingView.currentTimestamp.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  *a1 = _UIHostingView.base.getter()[11];
  swift_release();
  return _UIHostingView.currentTimestamp.modify;
}

uint64_t protocol witness for ViewRendererHost.renderingPhase.setter in conformance _UIHostingView<A>(char *a1)
{
  char v2 = *a1;
  return _UIHostingView.renderingPhase.setter(&v2);
}

uint64_t _UIHostingView.renderingPhase.setter(char *a1)
{
  char v1 = *a1;
  *((unsigned char *)_UIHostingView.base.getter() + 98) = v1;

  return swift_release();
}

__n128 protocol witness for ViewModifier.body(content:) in conformance MatchedTransitionSourceModifier@<Q0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  outlined init with copy of MatchedTransitionSourceModifier(v1, (uint64_t)v7);
  uint64_t v3 = swift_allocObject();
  long long v4 = v8[0];
  *(_OWORD *)(v3 + 80) = v7[4];
  *(_OWORD *)(v3 + 96) = v4;
  *(_OWORD *)(v3 + 105) = *(_OWORD *)((char *)v8 + 9);
  long long v5 = v7[1];
  *(_OWORD *)(v3 + 16) = v7[0];
  *(_OWORD *)(v3 + 32) = v5;
  __n128 result = (__n128)v7[3];
  *(_OWORD *)(v3 + 48) = v7[2];
  *(__n128 *)(v3 + 64) = result;
  *a1 = partial apply for closure #1 in MatchedTransitionSourceModifier.body(content:);
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v3;
  return result;
}

uint64_t outlined init with copy of MatchedTransitionSourceModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for MatchedTransitionSourceModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  swift_retain();
  swift_retain();
  return a1;
}

void *initializeBufferWithCopyOfBuffer for AlertTransformModifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

void @objc UIHostingContentView.layoutSubviews()(void *a1)
{
  id v1 = a1;
  UIHostingContentView.layoutSubviews()();
}

id UIHostingContentView.layoutSubviews()()
{
  id v1 = (void *)MEMORY[0x1E4FBC8C8];
  long long v6 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x640);
  long long v7 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x650);
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for UIHostingContentView();
  id result = objc_msgSendSuper2(&v8, sel_layoutSubviews, v6, v7);
  uint64_t v3 = (void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x6B8));
  long long v4 = (void (*)(uint64_t))*v3;
  if (*v3)
  {
    uint64_t v5 = outlined copy of AppIntentExecutor?(*v3);
    v4(v5);
    return (id)outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v4);
  }
  return result;
}

void @objc _UIHostingView.layoutSubviews()(void *a1)
{
  id v1 = a1;
  _UIHostingView.layoutSubviews()();
}

Swift::Void __swiftcall _UIHostingView.layoutSubviews()()
{
  v1.receiver = v0;
  v1.super_class = (Class)type metadata accessor for _UIHostingView();
  objc_msgSendSuper2(&v1, sel_layoutSubviews);
  _UIHostingView.base.getter();
  UIHostingViewBase.layoutSubviews()();
  swift_release();
}

Swift::Void __swiftcall UIHostingViewBase.layoutSubviews()()
{
  if (MEMORY[0x18C119DF0](v0 + 24))
  {
    objc_super v1 = (void *)MEMORY[0x18C119DF0](v0 + 16);
    if (v1)
    {
      id v5 = v1;
      id v2 = objc_msgSend(v1, sel_window);
      if (v2 && (v2, *(unsigned char *)(v0 + 216) == 1))
      {
        static Update.lock()();
        type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for ()?);
        static Update.locked<A>(_:)();
        uint64_t v3 = *(void *)(v0 + 176);
        if (!v3
          || (double v4 = *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate),
              static Time.infinity.getter(),
              v4 >= v6))
        {
          *(CFTimeInterval *)(v0 + 184) = CACurrentMediaTime();
          UIAnimationDragCoefficient();
        }
        swift_getObjectType();
        ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
        static Update.unlock()();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

void protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape(void *a1)
{
  objc_super v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t _UIHostingView.propertiesNeedingUpdate.modify(uint64_t a1)
{
  __int16 v1 = *(_WORD *)(a1 + 8);
  *((_WORD *)_UIHostingView.base.getter() + 48) = v1;

  return swift_release();
}

uint64_t _UIHostingView.currentTimestamp.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  _UIHostingView.base.getter()[11] = v1;

  return swift_release();
}

uint64_t _UIHostingView.externalUpdateCount.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  _UIHostingView.base.getter()[13] = v1;

  return swift_release();
}

uint64_t (*protocol witness for ViewRendererHost.propertiesNeedingUpdate.modify in conformance _UIHostingView<A>(void *a1))()
{
  id v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _UIHostingView.propertiesNeedingUpdate.modify((uint64_t)v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*_UIHostingView.propertiesNeedingUpdate.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  *(_WORD *)(a1 + 8) = *((_WORD *)_UIHostingView.base.getter() + 48);
  swift_release();
  return _UIHostingView.propertiesNeedingUpdate.modify;
}

uint64_t _UIHostingView.propertiesNeedingUpdate.getter@<X0>(_WORD *a1@<X8>)
{
  *a1 = *((_WORD *)_UIHostingView.base.getter() + 48);

  return swift_release();
}

uint64_t closure #3 in WrappedButtonStyleBody.body.getter(long long *a1)
{
  long long v1 = a1[3];
  *(_OWORD *)&v7[16] = a1[2];
  *(_OWORD *)&v7[32] = v1;
  long long v2 = a1[5];
  long long v8 = a1[4];
  long long v9 = v2;
  long long v3 = a1[1];
  long long v6 = *a1;
  *(_OWORD *)long long v7 = v3;
  type metadata accessor for ResolvedButtonStyleBody();
  type metadata accessor for ButtonBehavior();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v6);
  uint64_t v4 = v16;
  *(void *)&long long v6 = v10;
  BYTE8(v6) = v11;
  *(void *)long long v7 = v12;
  *(_OWORD *)&v7[8] = v13;
  *(_OWORD *)&v7[24] = v14;
  *(void *)&v7[40] = v15;
  long long v8 = v16;
  LOWORD(v9) = v17;
  BYTE2(v9) = v18;
  *((void *)&v9 + 1) = v19;
  static ViewBuilder.buildExpression<A>(_:)(&v6);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
  return swift_release();
}

uint64_t closure #2 in WrappedButtonStyleBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)&long long v22 = a3;
  *(void *)&long long v21 = a2;
  uint64_t v23 = a4;
  uint64_t v5 = type metadata accessor for WrappedButtonStyleBody();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  long long v8 = (char *)&v21 - v7;
  uint64_t v9 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](v9 - 8);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_6(a1 + *(int *)(v5 + 36), (uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PrimitiveButtonStyleConfiguration);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  outlined init with take of PrimitiveButtonStyleConfiguration((uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, type metadata accessor for PrimitiveButtonStyleConfiguration);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  unint64_t v14 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v22;
  *(void *)(v15 + 16) = v21;
  *(void *)(v15 + 24) = v16;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v15 + v14, v8, v5);
  type metadata accessor for ResolvedButtonStyleBody();
  uint64_t v17 = property wrapper backing initializer of ButtonBehavior.state();
  *(void *)&long long v38 = 0;
  BYTE8(v38) = 1;
  *(void *)&long long v39 = partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:);
  *((void *)&v39 + 1) = v13;
  v40 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  uint64_t v41 = 0;
  *(void *)&long long v42 = partial apply for closure #1 in WrappedButtonStyleBody.body.getter;
  *((void *)&v42 + 1) = v15;
  v43 = closure #2 in closure #2 in WrappedButtonStyleBody.body.getter;
  uint64_t v44 = 0;
  LOWORD(v45) = v17;
  BYTE2(v45) = BYTE2(v17) & 1;
  *((void *)&v45 + 1) = v18;
  v25[1] = (unint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  v25[2] = v42;
  long long v26 = (unint64_t)closure #2 in closure #2 in WrappedButtonStyleBody.body.getter;
  long long v27 = v45;
  long long v24 = v38;
  v25[0] = v39;
  type metadata accessor for ButtonBehavior();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(&v24);
  outlined release of ButtonBehavior<ResolvedButtonStyleBody<A>>((uint64_t)&v38);
  uint64_t v19 = v34;
  *(void *)&long long v24 = v28;
  BYTE8(v24) = v29;
  *(void *)&v25[0] = v30;
  long long v22 = v31;
  *(_OWORD *)((char *)v25 + 8) = v31;
  long long v21 = v32;
  *(_OWORD *)((char *)&v25[1] + 8) = v32;
  *((void *)&v25[2] + 1) = v33;
  long long v26 = v34;
  LOWORD(v27) = v35;
  BYTE2(v27) = v36;
  *((void *)&v27 + 1) = v37;
  static ViewBuilder.buildExpression<A>(_:)(&v24);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v19);
  return swift_release();
}

uint64_t initializeWithCopy for ButtonBehavior(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v4;
  uint64_t v5 = (_OWORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v6;
    *(void *)(a1 + 72) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 64) = *v5;
  }
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for ButtonBehavior()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined release of ButtonBehavior<ResolvedButtonStyleBody<A>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  swift_release();
  return a1;
}

void outlined copy of PlatformItemList.Item.SelectionBehavior?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(uint64_t, uint64_t), void (*a11)(uint64_t, uint64_t))
{
  if (a2 != 1)
  {
    a10(a2, a3);
    a10(a4, a5);
    a11(a6, a7);
  }
}

uint64_t outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t _UIHostingView.renderingPhase.getter@<X0>(unsigned char *a1@<X8>)
{
  *a1 = *((unsigned char *)_UIHostingView.base.getter() + 98);

  return swift_release();
}

uint64_t EnvironmentWrapper.isEqual(_:)(uint64_t a1)
{
  outlined init with copy of Any?(a1, (uint64_t)v7);
  if (v8)
  {
    type metadata accessor for EnvironmentWrapper();
    if (swift_dynamicCast())
    {
      if (*(_DWORD *)(v1 + OBJC_IVAR___SwiftUIEnvironmentWrapper_phase) == *(_DWORD *)&v6[OBJC_IVAR___SwiftUIEnvironmentWrapper_phase])
      {
        swift_retain();
        swift_retain();
        char v2 = PropertyList.mayNotBeEqual(to:)();
        swift_release();
        swift_release();
        if ((v2 & 1) == 0)
        {
          swift_retain();
          char v5 = PropertyList.mayNotBeEqual(to:)();

          swift_release();
          char v3 = v5 ^ 1;
          return v3 & 1;
        }
      }
    }
  }
  else
  {
    _sypSgWOhTm_13((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Any?);
  }
  char v3 = 0;
  return v3 & 1;
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  _sypSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)a4 + 2);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    _sypSgMaTm_1(0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v12 = (char *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size_0(v12);
    uint64_t v14 = v13 - 32;
    if (v13 < 32) {
      uint64_t v14 = v13 - 25;
    }
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * (v14 >> 3);
  }
  else
  {
    unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v15 = v12 + 32;
  uint64_t v16 = a4 + 32;
  if (v7)
  {
    if (v12 != a4 || v15 >= &v16[8 * v10]) {
      memmove(v15, v16, 8 * v10);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v15, v16, 8 * v10);
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;

  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)a4 + 2);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    _sypSgMaTm_1(0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v12 = (char *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size_0(v12);
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 24);
  }
  else
  {
    unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v12 + 32;
  uint64_t v15 = a4 + 32;
  uint64_t v16 = 24 * v10;
  if (v7)
  {
    if (v12 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, v16);
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)a4 + 2);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    _sypSgMaTm_1(0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v12 = (char *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size_0(v12);
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 48);
  }
  else
  {
    unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v12 + 32;
  uint64_t v15 = a4 + 32;
  if (v7)
  {
    if (v12 != a4 || v14 >= &v15[48 * v10]) {
      memmove(v14, v15, 48 * v10);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)a4 + 2);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    _sypSgMaTm_1(0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v12 = (char *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size_0(v12);
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 120);
  }
  else
  {
    unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v12 + 32;
  uint64_t v15 = a4 + 32;
  if (v7)
  {
    if (v12 != a4 || v14 >= &v15[120 * v10]) {
      memmove(v14, v15, 120 * v10);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)a4 + 2);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    _sypSgMaTm_1(0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v12 = (char *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size_0(v12);
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 40);
  }
  else
  {
    unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v12 + 32;
  uint64_t v15 = a4 + 32;
  if (v7)
  {
    if (v12 != a4 || v14 >= &v15[40 * v10]) {
      memmove(v14, v15, 40 * v10);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)a4 + 2);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    _sypSgMaTm_1(0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v12 = (char *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size_0(v12);
    uint64_t v14 = v13 - 32;
    if (v13 < 32) {
      uint64_t v14 = v13 - 17;
    }
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * (v14 >> 4);
  }
  else
  {
    unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v15 = v12 + 32;
  uint64_t v16 = a4 + 32;
  if (v7)
  {
    if (v12 != a4 || v15 >= &v16[16 * v10]) {
      memmove(v15, v16, 16 * v10);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)a4 + 2);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    _sypSgMaTm_1(0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v12 = (char *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size_0(v12);
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 40);
  }
  else
  {
    unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v12 + 32;
  uint64_t v15 = a4 + 32;
  if (v7)
  {
    if (v12 != a4 || v14 >= &v15[40 * v10]) {
      memmove(v14, v15, 40 * v10);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)a4 + 2);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    _sypSgMaTm_1(0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v12 = (char *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size_0(v12);
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * ((uint64_t)(v13 - 32) / 24);
  }
  else
  {
    unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v12 + 32;
  uint64_t v15 = a4 + 32;
  if (v7)
  {
    if (v12 != a4 || v14 >= &v15[24 * v10]) {
      memmove(v14, v15, 24 * v10);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;

  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)a4 + 2);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    _sypSgMaTm_1(0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v12 = (char *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size_0(v12);
    uint64_t v14 = v13 - 32;
    if (v13 < 32) {
      uint64_t v14 = v13 + 31;
    }
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * (v14 >> 6);
  }
  else
  {
    unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v15 = v12 + 32;
  uint64_t v16 = a4 + 32;
  if (v7)
  {
    if (v12 != a4 || v15 >= &v16[64 * v10]) {
      memmove(v15, v16, v10 << 6);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

{
  char v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  int64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;

  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = *((void *)a4 + 2);
  if (v9 <= v10) {
    uint64_t v11 = *((void *)a4 + 2);
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    _sypSgMaTm_1(0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v12 = (char *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size_0(v12);
    *((void *)v12 + 2) = v10;
    *((void *)v12 + 3) = 2 * v13 - 64;
  }
  else
  {
    unint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v14 = v12 + 32;
  uint64_t v15 = a4 + 32;
  if (v7)
  {
    if (v12 != a4 || v14 >= &v15[v10]) {
      memmove(v14, v15, v10);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, v10);
  }
  swift_bridgeObjectRelease();
  return v12;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_LazyLayout_Subview>, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SharingActivityPickerPresentation>, (uint64_t)&type metadata for SharingActivityPickerPresentation, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 152);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[152 * v8]) {
      memmove(v12, v13, 152 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PPTTestCase.Name>, (uint64_t)&type metadata for PPTTestCase.Name, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationColumnState>, (uint64_t)&type metadata for NavigationColumnState, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 304);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[304 * v8]) {
      memmove(v12, v13, 304 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, MEMORY[0x1E4F3F9C8], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 40 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<HVGridGeometry>, (uint64_t)&type metadata for HVGridGeometry, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewListOutputs>, MEMORY[0x1E4F3FE88], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_LazyLayout_PlacedSubview>, (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScenePhase>, (uint64_t)&type metadata for ScenePhase, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationRequest>, (uint64_t)&type metadata for NavigationRequest, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 136);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[136 * v8]) {
      memmove(v12, v13, 136 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_VariadicView_Children>, MEMORY[0x1E4F40A38], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ToolbarOutputs>, (uint64_t)&type metadata for _ToolbarOutputs, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ResolvedGradient.Stop>, MEMORY[0x1E4F3FD20], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  uint64_t v14 = 48 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<ClosedRange<CGFloat>>();
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TabEntry>, (uint64_t)&type metadata for TabEntry, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 272);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[272 * v8]) {
      memmove(v12, v13, 272 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ButtonRepeatTiming.TimingEntry>, (uint64_t)&type metadata for ButtonRepeatTiming.TimingEntry, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityProperties>, MEMORY[0x1E4F40BB0], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityLargeContentViewTree>, (uint64_t)&type metadata for AccessibilityLargeContentViewTree, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 240);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[240 * v8]) {
      memmove(v12, v13, 240 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItem>, (uint64_t)&type metadata for PlatformItem, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 336);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[336 * v8]) {
      memmove(v12, v13, 336 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableSections.Item>, (uint64_t)&type metadata for TableSections.Item, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8]) {
      memmove(v12, v13, 96 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SceneList.Item>, (uint64_t)&type metadata for SceneList.Item, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 280);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[280 * v8]) {
      memmove(v12, v13, 280 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SwiftUIAnySortComparator>, (uint64_t)&type metadata for SwiftUIAnySortComparator, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 120);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[120 * v8]) {
      memmove(v12, v13, 120 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityRelationshipScope.Relationship>, (uint64_t)&type metadata for AccessibilityRelationshipScope.Relationship, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UIKitHostedFocusItemLifecycle.Event>, (uint64_t)&type metadata for UIKitHostedFocusItemLifecycle.Event, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationViewDestinationView>, (uint64_t)&type metadata for NavigationViewDestinationView, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_IdentifiedViewTree>, (uint64_t)&type metadata for _IdentifiedViewTree, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 168);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[168 * v8]) {
      memmove(v12, v13, 168 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridLayout.Cache.Cell>, (uint64_t)&type metadata for GridLayout.Cache.Cell, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8]) {
      memmove(v12, v13, 104 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridLayout.Cache.RowOrColumn>, (uint64_t)&type metadata for GridLayout.Cache.RowOrColumn, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8 << 6);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridIndex>, (uint64_t)&type metadata for GridIndex, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<MultimodalBadgeInfo>, (uint64_t)&type metadata for MultimodalBadgeInfo, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGRect>, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SheetPreference>, (uint64_t)&type metadata for SheetPreference, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[112 * v8]) {
      memmove(v12, v13, 112 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ScrollableLayoutItem>, (uint64_t)&type metadata for _ScrollableLayoutItem, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8]) {
      memmove(v12, v13, 104 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyToken>, (uint64_t)&type metadata for AnyToken, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UIKitSearchBarCoordinator.SearchToken>, (uint64_t)&type metadata for UIKitSearchBarCoordinator.SearchToken, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollViewBehavior.ContainerInfo>, (uint64_t)&type metadata for ScrollViewBehavior.ContainerInfo, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScalarDeceleration>, (uint64_t)&type metadata for ScalarDeceleration, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  uint64_t v14 = 88 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CodableAccessibilityAction>, (uint64_t)&type metadata for CodableAccessibilityAction, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement>, (uint64_t)&type metadata for ToolbarPlacement, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ArchivedViewState>, (uint64_t)&type metadata for ArchivedViewState, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.AccessibilityUpdater.AttachmentStorage>, (uint64_t)&type metadata for DisplayList.AccessibilityUpdater.AttachmentStorage, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 120);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[120 * v8]) {
      memmove(v12, v13, 120 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<IdentifiedDocumentGroupConfiguration>, (uint64_t)&type metadata for IdentifiedDocumentGroupConfiguration, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 + 95;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 7);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[128 * v8]) {
      memmove(v13, v14, v8 << 7);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ViewIdentity>, (uint64_t)&type metadata for ViewIdentity, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<Int?>();
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  uint64_t v15 = 16 * v8;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Color.Resolved>, MEMORY[0x1E4F414B8], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DragContext>, (uint64_t)&type metadata for DragContext, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[112 * v8]) {
      memmove(v12, v13, 112 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationState.StackContent.Key>, (uint64_t)&type metadata for NavigationState.StackContent.Key, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnimatedValueTrack<CGPoint><A>.VectorPath.Element>, (uint64_t (*)(uint64_t))type metadata accessor for AnimatedValueTrack<CGPoint><A>.VectorPath.Element, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  uint64_t v14 = 96 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Double>, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_AnyDocumentIntroAccessory>, (uint64_t)&type metadata for _AnyDocumentIntroAccessory, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<FocusableBounds>, (uint64_t)&type metadata for FocusableBounds, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  uint64_t v14 = 40 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<FocusedValueList.Item>, (uint64_t)&type metadata for FocusedValueList.Item, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<FocusableFillerBounds>, (uint64_t)&type metadata for FocusableFillerBounds, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  uint64_t v14 = 112 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityFocusStoreList.Item>, (uint64_t)&type metadata for AccessibilityFocusStoreList.Item, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<KeyboardShortcutBinding>, (uint64_t)&type metadata for KeyboardShortcutBinding, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TabItem>, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8]) {
      memmove(v12, v13, 104 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<Range<String.Index>>();
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Substring>, MEMORY[0x1E4FBB7A8], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<HostingScrollView.PlatformGroupContainer.SubstitutionCandidate>, (uint64_t)&type metadata for HostingScrollView.PlatformGroupContainer.SubstitutionCandidate, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_AccessibilityRotorEntryOutputs>, (uint64_t)&type metadata for _AccessibilityRotorEntryOutputs, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID.Canonical>, MEMORY[0x1E4F3F6D8], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID>, MEMORY[0x1E4F3F6E8], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarStorage.Entry.ID>, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8]) {
      memmove(v12, v13, 88 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Sections.Item>, (uint64_t)&type metadata for Sections.Item, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  uint64_t v15 = 16 * v8;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityNavigationRotorEntry>, (uint64_t)&type metadata for AccessibilityNavigationRotorEntry, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 136);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[136 * v8]) {
      memmove(v12, v13, 136 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAppIntentAction>, (uint64_t)&type metadata for AccessibilityAppIntentAction, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8]) {
      memmove(v12, v13, 80 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationContentAbstractPosition>, (uint64_t)&type metadata for NavigationContentAbstractPosition, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<WeakAttribute<SwipeActions.Value>>();
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<EventID>, MEMORY[0x1E4F41678], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridLayout.Cache.Earmark>, (uint64_t)&type metadata for GridLayout.Cache.Earmark, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 24 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GeneralItem>, (uint64_t)&type metadata for GeneralItem, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  uint64_t v15 = v8 << 6;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.Child>, (uint64_t)&type metadata for JindoTripleVStack.Child, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 + 223;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 8);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[256 * v8]) {
      memmove(v13, v14, v8 << 8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGFloat>, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroupState>, (uint64_t)&type metadata for JindoTripleVStack.MajorAxisGroupState, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 80);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  int64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[80 * v8]) {
      memmove(v12, v13, 80 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 80 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction.Resolved>, (uint64_t)&type metadata for AnyAccessibilityAction.Resolved, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Data>, MEMORY[0x1E4F277C0], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CommandAccumulator>, (uint64_t)&type metadata for CommandAccumulator, MEMORY[0x1E4FBBE00]);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<Range<Int>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>, (void (*)(uint64_t))type metadata accessor for Range<Int>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_2(v10);
    unint64_t v12 = v11 - 32;
    if (v11 < 32) {
      unint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void type metadata accessor for AccessibilityValueStorage?(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Optional();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void type metadata accessor for Any?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for PlatformItem.SelectionContent.AuxiliaryContent?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for String?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_3(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_5(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_6(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_7(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_9(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_10(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sypSgMaTm_11(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

id protocol witness for ColorProvider.staticColor.getter in conformance UIColor()
{
  uint64_t v1 = *v0;
  if (_UIColorDependsOnTraitCollection(*v0)) {
    return 0;
  }
  else {
    return objc_msgSend(v1, sel_CGColor);
  }
}

float protocol witness for ColorProvider.resolve(in:) in conformance UIColor(uint64_t *a1)
{
  return UIColor.resolve(in:)(a1);
}

float UIColor.resolve(in:)(uint64_t *a1)
{
  char v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (_UIColorDependsOnTraitCollection(v2))
  {
    unint64_t v5 = (void *)MEMORY[0x18C1190C0]();
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    int v18 = 0;
    uint64_t v15 = 0;
    char v16 = 0;
    int v17 = 0;
    uint64_t v6 = (void *)EnvironmentValues.resolvedTraitCollection(viewPhase:focusedValues:)(&v18, &v15);
    id v7 = objc_msgSend(v2, sel_resolvedColorWithTraitCollection_, v6);
    LODWORD(v8) = Color.Resolved.init(platformColor:)();
    char v10 = v9;

    float v11 = 0.0;
    if ((v10 & 1) == 0) {
      float v11 = v8;
    }
  }
  else
  {
    id v12 = objc_msgSend(v2, sel_CGColor);
    Color.Resolved.init(_:)();
    return v13;
  }
  return v11;
}

BOOL _UIColorDependsOnTraitCollection(void *a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___UIColorDependsOnTraitCollection_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = sel_resolvedColorWithTraitCollection_;
  uint64_t v1 = _UIColorDependsOnTraitCollection_once;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&_UIColorDependsOnTraitCollection_once, block);
  }
  uint64_t v3 = [v2 methodForSelector:sel_resolvedColorWithTraitCollection_];

  return v3 != _UIColorDependsOnTraitCollection_UIColor_imp;
}

uint64_t EnvironmentValues.resolvedTraitCollection(viewPhase:focusedValues:)(int *a1, uint64_t *a2)
{
  int v3 = *a1;
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  int v6 = *((_DWORD *)a2 + 3);
  uint64_t v7 = *v2;
  uint64_t v8 = v2[1];
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InheritedTraitCollectionKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InheritedTraitCollectionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<InheritedTraitCollectionKey>);
  swift_retain_n();
  if (v8)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  id v9 = v18;
  if (!v18) {
    id v9 = objc_msgSend(self, sel_currentTraitCollection);
  }
  char v10 = (objc_class *)type metadata accessor for EnvironmentWrapper();
  float v11 = (char *)objc_allocWithZone(v10);
  id v12 = &v11[OBJC_IVAR___SwiftUIEnvironmentWrapper_environment];
  *(void *)id v12 = v7;
  *((void *)v12 + 1) = v8;
  *(_DWORD *)&v11[OBJC_IVAR___SwiftUIEnvironmentWrapper_phase] = v3;
  float v13 = &v11[OBJC_IVAR___SwiftUIEnvironmentWrapper_focusedValues];
  *(void *)float v13 = v4;
  v13[8] = v5;
  *((_DWORD *)v13 + 3) = v6;
  v17.receiver = v11;
  v17.super_class = v10;
  swift_retain();
  swift_retain();
  swift_retain();
  id v14 = objc_msgSendSuper2(&v17, sel_init);
  MEMORY[0x1F4188790](v14);
  uint64_t v15 = UITraitCollection._modifyingTraits(environmentWrapper:mutations:)();

  return v15;
}

uint64_t type metadata accessor for EnvironmentWrapper()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for SymmetricallyScaledTextLayout(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t type metadata completion function for LazyState()
{
  uint64_t result = type metadata accessor for LazyState.Storage();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static ToolbarContent.makeViewList<A>(placement:content:inputs:)()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewListInputs.init(_:)();
  uint64_t v0 = unk_1ED4186E8;
  if ((unk_1ED4186E8 & ~qword_1ED4186E0) == 0) {
    uint64_t v0 = 0;
  }
  uint64_t v1 = v0 | qword_1ED4186E0;
  if ((v1 & ~v5) != 0) {
    v5 |= v1;
  }
  type metadata accessor for SubscriptionLifetime<ObservableObjectPublisher>(0, &lazy cache variable for type metadata for SubscriptionLifetime<ObservableObjectPublisher>, MEMORY[0x1E4F40690]);
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  SubscriptionLifetime.init()();
  type metadata accessor for ViewTransform?(0, (unint64_t *)&lazy cache variable for type metadata for External<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<()> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  type metadata accessor for SubscriptionLifetime<ObservableObjectPublisher>(0, &lazy cache variable for type metadata for AttributeInvalidatingSubscriber<ObservableObjectPublisher>, MEMORY[0x1E4F41220]);
  type metadata accessor for ViewGraph();
  MEMORY[0x18C114EE0]();
  AGCreateWeakAttribute();
  AttributeInvalidatingSubscriber.__allocating_init(host:attribute:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ToolbarPlacementEnvironment and conformance ToolbarPlacementEnvironment();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _GraphInputs.environment.setter();
  static View.makeDebuggableViewList(view:inputs:)();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v2 = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v2;
}

uint64_t specialized static LazyState._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  return static DynamicProperty.addTreeValue<A, B>(_:as:at:in:flags:)();
}

unint64_t lazy protocol witness table accessor for type External<()> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<()> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<()> and conformance External<A>)
  {
    type metadata accessor for Binding<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for External<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<()> and conformance External<A>);
  }
  return result;
}

uint64_t type metadata accessor for LazyStatePropertyBox()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for External<()>()
{
  if (!lazy cache variable for type metadata for External<()>)
  {
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<()>);
    }
  }
}

uint64_t outlined destroy of _ViewListOutputs(uint64_t a1)
{
  return a1;
}

void type metadata accessor for SubscriptionLifetime<ObservableObjectPublisher>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for ObservableObjectPublisher();
    unint64_t v7 = a3(a1, v6, MEMORY[0x1E4F1ABE8]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for ViewTransform?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t LazyState.projectedValue.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  id v9 = (char *)&v12 - v8;
  LazyState.getValue(forReading:)(0, a1, (uint64_t)&v12 - v8);
  if (*(void *)(v1 + *(int *)(a1 + 28)))
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v9, v3);
    swift_retain();
    Binding.init(value:location:)();
  }
  else
  {
    static os_log_type_t.fault.getter();
    char v10 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    static Binding.constant(_:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
}

uint64_t LazyState.getValue(forReading:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(void *)(v3 + *(int *)(a2 + 28)))
  {
    type metadata accessor for GraphHost();
    swift_retain();
    if (static GraphHost.isUpdating.getter())
    {
      if (a1) {
        dispatch thunk of AnyLocation.wasRead.setter();
      }
      uint64_t v6 = type metadata accessor for LazyState.Storage();
      LazyState.Storage.value.getter(v6, a3);
    }
    else
    {
      dispatch thunk of AnyLocation.get()();
    }
    return swift_release();
  }
  else
  {
    uint64_t v7 = type metadata accessor for LazyState.Storage();
    return LazyState.Storage.value.getter(v7, a3);
  }
}

uint64_t LazyState.init(wrappedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *(void *)((char *)a3 + *(int *)(type metadata accessor for LazyState() + 28)) = 0;
  *a3 = a1;
  a3[1] = a2;
  type metadata accessor for LazyState.Storage();

  return swift_storeEnumTagMultiPayload();
}

uint64_t LazyStatePropertyBox.update(property:phase:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = type metadata accessor for LazyState.Storage();
  uint64_t v36 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  id v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (void (**)(void))((char *)&v33 - v11);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v33 - v18;
  uint64_t v20 = *(void *)(v3 + 8);
  BOOL v35 = v20 == 0;
  if (!v20)
  {
    uint64_t v33 = v17;
    uint64_t v21 = *(int *)(type metadata accessor for LazyState() + 28);
    uint64_t v34 = a1;
    if (*(void *)(a1 + v21) && (type metadata accessor for StoredLocation(), (uint64_t v22 = swift_dynamicCastClass()) != 0))
    {
      *(void *)(v3 + 8) = v22;
      swift_retain();
      a1 = v34;
    }
    else
    {
      a1 = v34;
      (*(void (**)(void (**)(void), uint64_t, uint64_t))(v36 + 16))(v12, v34, v7);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v23 = v33;
        (*(void (**)(char *, void (**)(void), uint64_t))(v33 + 32))(v19, v12, v6);
      }
      else
      {
        (*v12)();
        swift_release();
        uint64_t v23 = v33;
      }
      uint64_t v33 = type metadata accessor for StoredLocation();
      (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v15, v19, v6);
      type metadata accessor for GraphHost();
      uint64_t v24 = v23;
      MEMORY[0x18C114840]();
      uint64_t v25 = StoredLocation.__allocating_init(initialValue:host:signal:)();
      (*(void (**)(char *, uint64_t))(v24 + 8))(v19, v6);
      swift_release();
      *(void *)(v4 + 8) = v25;
    }
  }
  uint64_t WeakValue = AGGraphGetWeakValue();
  char v28 = v27;
  StoredLocationBase.updateValue.getter();
  swift_storeEnumTagMultiPayload();
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v36 + 40))(a1, v9, v7);
  uint64_t v30 = *(void *)(v4 + 8);
  if (v30)
  {
    uint64_t v31 = *(int *)(type metadata accessor for LazyState() + 28);
    swift_retain();
    swift_release();
    *(void *)(a1 + v31) = v30;
    if (WeakValue)
    {
      char v32 = v35;
      if (v28) {
        char v32 = (v20 == 0) | StoredLocationBase.wasRead.getter();
      }
    }
    else
    {
      char v32 = v35;
    }
    return v32 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for LazyState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LazyState.Storage()
{
  return __swift_instantiateGenericMetadata();
}

unsigned __int8 *assignWithTake for LazyState.Storage(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(void *)(v6 + 64) <= 0x10uLL) {
      uint64_t v7 = 16;
    }
    else {
      uint64_t v7 = *(void *)(v6 + 64);
    }
    unsigned int v8 = a1[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a1;
          goto LABEL_14;
        case 2:
          int v11 = *(unsigned __int16 *)a1;
          goto LABEL_14;
        case 3:
          int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_14;
        case 4:
          int v11 = *(_DWORD *)a1;
LABEL_14:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    if (v8 == 1) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    else {
      swift_release();
    }
    unsigned int v13 = a2[v7];
    unsigned int v14 = v13 - 2;
    if (v13 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v15 = v7;
      }
      else {
        uint64_t v15 = 4;
      }
      switch(v15)
      {
        case 1:
          int v16 = *a2;
          goto LABEL_28;
        case 2:
          int v16 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v16 = *(_DWORD *)a2;
LABEL_28:
          int v17 = (v16 | (v14 << (8 * v7))) + 2;
          unsigned int v13 = v16 + 2;
          if (v7 < 4) {
            unsigned int v13 = v17;
          }
          break;
        default:
          break;
      }
    }
    if (v13 == 1)
    {
      (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v18 = 1;
    }
    else
    {
      char v18 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    a1[v7] = v18;
  }
  return a1;
}

uint64_t LazyState.Storage.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (void (**)(void))((char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void (**)(void), double))(v7 + 16))(v6, v4);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return (*(uint64_t (**)(uint64_t, void (**)(void)))(*(void *)(*(void *)(a1 + 16) - 8) + 32))(a2, v6);
  }
  (*v6)();
  return swift_release();
}

void *initializeWithCopy for LazyState.Storage(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    (*(void (**)(void *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
    char v10 = 1;
  }
  else
  {
    uint64_t v11 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v11;
    swift_retain();
    char v10 = 0;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

unint64_t lazy protocol witness table accessor for type ToolbarPlacementEnvironment and conformance ToolbarPlacementEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarPlacementEnvironment and conformance ToolbarPlacementEnvironment;
  if (!lazy protocol witness table cache variable for type ToolbarPlacementEnvironment and conformance ToolbarPlacementEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarPlacementEnvironment and conformance ToolbarPlacementEnvironment);
  }
  return result;
}

Swift::Void __swiftcall _UIHostingView.updateContainerSize()()
{
  unint64_t v0 = _UIHostingView.base.getter();
  uint64_t v1 = (void *)MEMORY[0x18C119DF0](v0 + 2);
  if (v1)
  {
    id v2 = v1;
    objc_msgSend(v1, sel_safeAreaInsets);
    objc_msgSend(v2, sel_bounds);
    CGSize.inset(by:)();
    static ViewSize.fixed(_:)();
    ViewGraph.setContainerSize(_:)();
    swift_release();
  }
  else
  {
    swift_release();
  }
}

id UIHostingContentView.frame.setter(double a1, double a2, double a3, double a4)
{
  uint64_t v9 = *MEMORY[0x1E4FBC8C8] & *v4;
  objc_msgSend(v4, sel_bounds);
  double v11 = v10;
  double v13 = v12;
  long long v18 = *(_OWORD *)(v9 + 1600);
  long long v19 = *(_OWORD *)(v9 + 1616);
  v20.receiver = v4;
  v20.super_class = (Class)type metadata accessor for UIHostingContentView();
  objc_msgSendSuper2(&v20, sel_setFrame_, a1, a2, a3, a4, v18, v19);
  id result = objc_msgSend(v4, sel_bounds);
  if (v11 != v16 || v13 != v15)
  {
    *((unsigned char *)_UIHostingView.base.getter() + 219) = 1;
    return (id)swift_release();
  }
  return result;
}

double @objc UIHostingContentView.bounds.getter(void *a1, uint64_t a2)
{
  return @objc UIHostingBackgroundView.frame.getter(a1, a2, (uint64_t)&selRef_bounds, (double (*)(uint64_t))UIHostingContentView.frame.getter);
}

void _UIHostingView.frame.setter(SEL *a1, SEL *a2, double a3, double a4, double a5, double a6)
{
  if (*((unsigned char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x80)) == 1)
  {
    [v6 *a1];
    double v13 = v12;
    double v15 = v14;
    v22.receiver = v6;
    v22.super_class = (Class)type metadata accessor for _UIHostingView();
    objc_msgSendSuper2(&v22, *a2, a3, a4, a5, a6);
    double v16 = _UIHostingView.base.getter();
    uint64_t v17 = MEMORY[0x18C119DF0](v16 + 2);
    if (v17)
    {
      long long v18 = (void *)v17;
      if (MEMORY[0x18C119DF0](v16 + 3))
      {
        objc_msgSend(v18, sel_bounds);
        if (v20 != v13 || v19 != v15)
        {
          swift_getObjectType();
          ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
        }
        swift_release();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_release();
      }
    }
    else
    {
      swift_release();
    }
  }
}

double @objc UIHostingBackgroundView.frame.getter(void *a1, uint64_t a2, uint64_t a3, double (*a4)(uint64_t))
{
  id v6 = a1;
  double v7 = a4(a3);

  return v7;
}

id UIHostingContentView.frame.getter(SEL *a1)
{
  long long v4 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x640);
  long long v5 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x650);
  v6.receiver = v1;
  v6.super_class = (Class)type metadata accessor for UIHostingContentView();
  return objc_msgSendSuper2(&v6, *a1, v4, v5);
}

double @objc _UIHostingView.frame.getter(void *a1, uint64_t a2, SEL *a3)
{
  id v4 = a1;
  _UIHostingView.frame.getter(a3);
  double v6 = v5;

  return v6;
}

double @objc _UIHostingView.bounds.getter(void *a1, uint64_t a2)
{
  return @objc _UIHostingView.frame.getter(a1, a2, (SEL *)&selRef_bounds);
}

uint64_t type metadata accessor for UIHostingContentView()
{
  return swift_getGenericMetadata();
}

double @objc _UIHostingView.frame.getter(void *a1, uint64_t a2)
{
  return @objc _UIHostingView.frame.getter(a1, a2, (SEL *)&selRef_frame);
}

double @objc UIHostingContentView.frame.getter(void *a1, uint64_t a2)
{
  return @objc UIHostingBackgroundView.frame.getter(a1, a2, (uint64_t)&selRef_frame, (double (*)(uint64_t))UIHostingContentView.frame.getter);
}

void @objc _UIHostingView.frame.setter(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  _UIHostingView.frame.setter((SEL *)&selRef_frame, (SEL *)&selRef_setFrame_, a2, a3, a4, a5);
}

id UIHostingBackgroundView.frame.getter(SEL *a1)
{
  v4.receiver = v1;
  v4.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v4, *a1);
}

double @objc UIHostingBackgroundView.bounds.getter(void *a1, uint64_t a2)
{
  return @objc UIHostingBackgroundView.frame.getter(a1, a2, (uint64_t)&selRef_bounds, (double (*)(uint64_t))UIHostingBackgroundView.frame.getter);
}

double @objc UIHostingBackgroundView.frame.getter(void *a1, uint64_t a2)
{
  return @objc UIHostingBackgroundView.frame.getter(a1, a2, (uint64_t)&selRef_frame, (double (*)(uint64_t))UIHostingBackgroundView.frame.getter);
}

id _UIHostingView.frame.getter(SEL *a1)
{
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for _UIHostingView();
  return objc_msgSendSuper2(&v4, *a1);
}

uint64_t __swift_instantiateGenericMetadata()
{
  return swift_getGenericMetadata();
}

void *_UIHostingView.base.getter()
{
  uint64_t v1 = *(void **)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68));
  uint64_t v2 = MEMORY[0x18C119DF0](v1 + 2);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    swift_retain();
  }
  else
  {
    swift_unknownObjectWeakAssign();
    swift_retain();
  }
  if (MEMORY[0x18C119DF0](v1 + 3))
  {
    swift_unknownObjectRelease();
  }
  else
  {
    type metadata accessor for _UIHostingView();
    v1[4] = swift_getWitnessTable();
    swift_unknownObjectWeakAssign();
  }
  if (MEMORY[0x18C119DF0](v1 + 5))
  {
    swift_unknownObjectRelease();
  }
  else
  {
    v1[6] = &protocol witness table for _UIHostingView<A>;
    swift_unknownObjectWeakAssign();
  }
  uint64_t v4 = v1[9];
  swift_beginAccess();
  if (MEMORY[0x18C119DF0](v4 + 40))
  {
    swift_unknownObjectRelease();
  }
  else
  {
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    swift_retain();
    double v5 = v0;
    DisplayList.ViewRenderer.host.setter();
    swift_release();
  }
  return v1;
}

uint64_t type metadata accessor for _UIHostingView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _UIGraphicsView()
{
  return self;
}

uint64_t getEnumTagSinglePayload for NavigationPropertiesModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  if (v6 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = v6;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64);
  if (!v5) {
    ++v9;
  }
  if (!a2) {
    return 0;
  }
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_28;
  }
  uint64_t v11 = v9 + ((v8 + 8) & ~v8);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      if (v6 > 0x7FFFFFFE)
      {
        unsigned int v18 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v8 + 8) & ~v8);
        if (v18 >= 2) {
          return v18 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        uint64_t v17 = *(void *)a1;
        if (*(void *)a1 >= 0xFFFFFFFFuLL) {
          LODWORD(v17) = -1;
        }
        if ((v17 + 1) >= 2) {
          return v17;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<TextViewAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
    }
  }
}

uint64_t (*SearchSuggestionsPlacement.Set.rawValue.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t outlined init with take of (key: Any, value: Any)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(0, &lazy cache variable for type metadata for (key: Any, value: Any)?, (uint64_t)&lazy cache variable for type metadata for (key: Any, value: Any), (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for (key: Any, value: Any), MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<(Any, Any)>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = a4(255, a3, MEMORY[0x1E4FBC840] + 8);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t LazyState.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyState.getValue(forReading:)(1, a1, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for EnvironmentChangeModifier2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t associated type witness table accessor for PropertyKeyLookup.Primary : PropertyKey in UITraitBridgedEnvironmentPropertyKeyLookup<A>()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for ScenePhase()
{
  return &type metadata for ScenePhase;
}

uint64_t storeEnumTagSinglePayload for ContentScrollViewBox(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)id result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = a2 + 1;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContentScrollViewBox(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

double protocol witness for PresentationTransitionStyle._makePresentationTransition() in conformance AutomaticPresentationTransitionStyle@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t initializeWithCopy for ToggleStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  unsigned int v6 = *(void **)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  if (v6)
  {
    uint64_t v7 = *(void *)(a2 + 48);
    uint64_t v8 = *(void *)(a2 + 56);
    char v9 = *(unsigned char *)(a2 + 64);
    outlined copy of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v8;
    *(unsigned char *)(a1 + 64) = v9;
    uint64_t v10 = *(void *)(a2 + 80);
    uint64_t v11 = *(void *)(a2 + 88);
    *(void *)(a1 + 72) = v6;
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = v11;
    id v12 = v6;
    swift_retain();
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v13;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in PlatformViewChild<A>()
{
  return swift_getWitnessTable();
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance SourceInput<A>(void *a1@<X8>)
{
}

uint64_t partial apply for applyNode #1 (start:style:node:transform:) in _LazyLayout_Subviews.applyNodes(from:style:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return applyNode #1 (start:style:node:transform:) in _LazyLayout_Subviews.applyNodes(from:style:to:)(a1, a2, a3, a4, *(uint64_t **)(v4 + 16), *(void (**)(uint64_t, uint64_t *, uint64_t *))(v4 + 24));
}

uint64_t specialized static OptionalViewAlias._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  type metadata accessor for SourceInput();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type Stack<AnySource> and conformance <A> Stack<A>();
  PropertyList.subscript.getter();
  if (v2)
  {
    char v0 = *(unsigned char *)(v2 + 44);
    swift_release();
    if (v0) {
      type metadata accessor for OptionalViewAlias.StaticSourceBox();
    }
    else {
      type metadata accessor for OptionalViewAlias.OptionalSourceBox();
    }
    swift_getWitnessTable();
  }
  else
  {
    type metadata accessor for OptionalViewAlias.StaticSourceBox();
    swift_getWitnessTable();
  }
  return _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
}

uint64_t type metadata accessor for OptionalViewAlias.OptionalSourceBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for OptionalViewAlias.StaticSourceBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static GraphInput.isTriviallyReusable.getter in conformance SourceInput<A>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = lazy protocol witness table accessor for type Stack<AnySource> and conformance <A> Stack<A>();

  return MEMORY[0x1F40FD0E0](a1, a2, v4);
}

uint64_t protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance SourceInput<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = lazy protocol witness table accessor for type Stack<AnySource> and conformance <A> Stack<A>();

  return MEMORY[0x1F40FD0E8](a1, a2, a3, a4, v8);
}

unint64_t lazy protocol witness table accessor for type Stack<AnySource> and conformance <A> Stack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Stack<AnySource> and conformance <A> Stack<A>;
  if (!lazy protocol witness table cache variable for type Stack<AnySource> and conformance <A> Stack<A>)
  {
    type metadata accessor for Stack<AnySource>(255, &lazy cache variable for type metadata for Stack<AnySource>, (uint64_t)&unk_1ED4686B0, MEMORY[0x1E4F41560]);
    lazy protocol witness table accessor for type AnySource and conformance AnySource();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Stack<AnySource> and conformance <A> Stack<A>);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityLargeContentViewModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, ValueMetadata **)@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  return static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(ValueMetadata **)(a5 + 24), a6);
}

uint64_t partial apply for implicit closure #1 in static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t type metadata instantiation function for TabViewStyleOverrideInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 8);
}

uint64_t getEnumTagSinglePayload for PresentSharingPickerAction(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t destroy for ToggleStyleConfiguration(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  unsigned int v3 = *(void **)(a1 + 72);
  if (v3)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));

    return swift_release();
  }
  return result;
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance ShadowRowCollection<A>()
{
  return MEMORY[0x1F41836E8]();
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnabledTechnologiesKey(_WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t storeEnumTagSinglePayload for InsetListLabelStyle.StyleView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for InsetListLabelStyle.StyleView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityContainerModifier()
{
  return &protocol witness table for AccessibilityContainerModifier;
}

uint64_t destroy for LazyState.Storage(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  if (v2 <= 0x10) {
    unint64_t v2 = 16;
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_12;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_12:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  }
  else {
    return swift_release();
  }
}

__n128 __swift_memcpy27_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance OnScrollVisibilityGeometryAction(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance OnScrollVisibilityChangeModifier(a1, a2, a3, a4, a5, a6, MEMORY[0x1E4F3F678]);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance OnScrollVisibilityChangeModifier(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance OnScrollVisibilityChangeModifier(a1, a2, a3, a4, a5, a6, MEMORY[0x1E4F3F670]);
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance StatusBarKey(_WORD *a1@<X8>)
{
  *a1 = 2;
}

uint64_t getEnumTagSinglePayload for Toolbar.UpdateContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 88);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t getEnumTag for CapsuleSlider.ScrollState.Orientation(unsigned __int8 *a1)
{
  return *a1;
}

void partial apply for closure #1 in PlatformViewHost.UnarySubtreeSequence.makeIterator()(void *a1@<X8>)
{
  closure #1 in PlatformViewHost.UnarySubtreeSequence.makeIterator()(v1, a1);
}

uint64_t protocol witness for static UserDefaultKeyedFeature.defaults.getter in conformance EnableLazyStackLogging()
{
  return MEMORY[0x1F4100138]();
}

uint64_t protocol witness for static TextAccessibilityProvider.makeView(content:text:resolved:) in conformance SwiftUITextAccessibilityProvider@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static SwiftUITextAccessibilityProvider.makeView(content:text:resolved:)(a1, a2, a3, a4 & 1, a5, a6, a7);
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance ScrollableItemLayoutComputer._LayoutEngine()
{
  return LayoutEngine.explicitAlignment(_:at:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityOpacityModifier()
{
  return &protocol witness table for AccessibilityOpacityModifier;
}

uint64_t View.onTest(_:handler:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v19[1] = a6;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  double v14 = (char *)v19 - v13;
  uint64_t v16 = *a1;
  uint64_t v15 = a1[1];
  v20[0] = v16;
  v20[1] = v15;
  v20[2] = a2;
  v20[3] = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  MEMORY[0x18C113660](v20, a4, &unk_1ED428908, a5);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  *(void *)(v17 + 24) = v15;
  v19[2] = a5;
  v19[3] = &protocol witness table for OnTestViewModifier;
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  View.transformPreference<A>(_:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t destroy for OnTestViewModifier()
{
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance ShadowRowCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ShadowRowCollection<A>(a1, a2, a3, (uint64_t)&associated type descriptor for ListDiffable.RowIDs, (uint64_t)&associated conformance descriptor for ListDiffable.ListDiffable.RowIDs: BidirectionalCollection, (void (*)(uint64_t, uint64_t, double))ShadowRowCollection.index(after:));
}

uint64_t NavigationDestinationResolverBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for AccessibilityContainerModifier()
{
  return &type metadata for AccessibilityContainerModifier;
}

uint64_t storeEnumTagSinglePayload for _NavigationSplitReader.PreparedColumn(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

void protocol witness for static RemovableAttribute.didReinsert(attribute:) in conformance PropertiesTransform<A>()
{
}

SwiftUI::PPTTestCase::SubTestName __swiftcall PPTTestCase.SubTestName.init(rawValue:)(SwiftUI::PPTTestCase::SubTestName rawValue)
{
  *uint64_t v1 = rawValue;
  return rawValue;
}

ValueMetadata *type metadata accessor for _AccessibilityIgnoresInvertColorsViewModifier()
{
  return &type metadata for _AccessibilityIgnoresInvertColorsViewModifier;
}

uint64_t partial apply for specialized closure #1 in ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(uint64_t a1)
{
  return specialized closure #1 in ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(a1, *(void *)(v1 + 16));
}

{
  uint64_t v1;

  return specialized closure #1 in ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(a1, *(void *)(v1 + 16));
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance ShadowSectionCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance ShadowRowCollection<A>(a1, a2, a3, (uint64_t)&associated type descriptor for ListDiffable.SectionIDs, (uint64_t)&associated conformance descriptor for ListDiffable.ListDiffable.SectionIDs: BidirectionalCollection, (void (*)(uint64_t, uint64_t, double))ShadowSectionCollection.index(after:));
}

void protocol witness for PlatformDrawable.options.getter in conformance CGDrawingView(uint64_t a1@<X8>)
{
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityGestureModifier()
{
  return &protocol witness table for AccessibilityGestureModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ButtonActionModifier<A>()
{
  return &protocol witness table for ButtonActionModifier<A>;
}

unsigned char *partial apply for closure #1 in View.hoverEffectDisabled(_:)(unsigned char *result)
{
  *result &= ~*(unsigned char *)(v1 + 16) & 1;
  return result;
}

uint64_t destroy for TableColumnCustomization()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t associated type witness table accessor for TableColumnContent.TableRowValue : Identifiable in EmptyTableColumnContent<A>(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24);
}

uint64_t __swift_memcpy10_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t ButtonStyleConfiguration.isPressed.getter()
{
  return *(unsigned __int8 *)(v0 + 2);
}

_UNKNOWN **base witness table accessor for ViewModifier in LabelStyleModifier<A>()
{
  return &protocol witness table for LabelStyleModifier<A>;
}

uint64_t getEnumTagSinglePayload for AccessibilityTextLayoutProperties(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 145)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 112);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t static UIViewPlatformViewDefinition.system.getter()
{
  return MEMORY[0x1F40FFE80]();
}

void *initializeBufferWithCopyOfBuffer for PlatformBarUpdater.UpdateContext(void *a1, uint64_t a2)
{
  unint64_t v3 = *(void **)a2;
  unsigned int v4 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  id v5 = v3;
  id v6 = v4;
  return a1;
}

uint64_t destroy for _PresentationTransitionOutputs(uint64_t a1)
{
  if (*(void *)(a1 + 24)) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

double protocol witness for static StatefulRule.initialValue.getter in conformance ScrollTransitionModifier<A>.EffectRule@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t destructiveInjectEnumTag for TouchBarItemPresence(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

uint64_t protocol witness for Shape.sizeThatFits(_:) in conformance PlatterButtonStyleView<A>.ClippingShape()
{
  return MEMORY[0x1F4100E50]();
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for HighlightHoverEffect()
{
  return &type metadata for HighlightHoverEffect;
}

uint64_t partial apply for closure #1 in ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(uint64_t a1)
{
  return closure #1 in ListSectionInfo.visitContent<A>(list:start:transform:visitor:)(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t destroy for DragGesture(uint64_t result)
{
  if (!*(unsigned char *)(result + 48)) {
    return __swift_destroy_boxed_opaque_existential_1(result + 8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OpenWindowAction(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

BOOL specialized static ListStyleContext.accepts<A>(_:at:)(ValueMetadata *a1, ValueMetadata *a2)
{
  return a2 == &type metadata for AnyListStyleContext || a2 == a1;
}

uint64_t partial apply for implicit closure #1 in static NascentViewDestinationsExtractor._makeView(modifier:inputs:body:)()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t partial apply for closure #1 in static _ContentShapeKindModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static _ContentShapeKindModifier._makeView(modifier:inputs:body:)(a1);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformItemListTransformModifier<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static PlatformItemListTransformModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t initializeWithCopy for PropertiesTransform(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  id v5 = *(void **)(a2 + 64);
  *(void *)(a1 + 64) = v5;
  id v6 = v5;
  swift_unknownObjectWeakCopyInit();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileImportOperation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188142D24);
}

uint64_t getEnumTagSinglePayload for FileExportOperation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187D91130);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ButtonStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static ButtonStyleWriter._makeInputs(modifier:inputs:)(a2, *(ValueMetadata **)(a3 + 16));
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ViewInputFlagModifier<A>(int *a1, uint64_t a2, uint64_t a3)
{
  return static ViewInputFlagModifier._makeInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NascentViewDestinationsExtractor()
{
  return static ViewModifier.makeUnaryViewList(modifier:inputs:body:)();
}

void *initializeBufferWithCopyOfBuffer for ForestRootBodyAccessor(void *a1, void *a2)
{
  char v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  id v4 = v3;
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ButtonStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for ButtonStyleWriter<A>);
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ResolvedButtonStyleBody<A>.StyleBodyAccessor(uint64_t a1, char a2, uint64_t a3)
{
  return ResolvedButtonStyleBody.StyleBodyAccessor.updateBody(of:changed:)(a1, a2, *v3, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

void destroy for ForestRootBodyAccessor(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 8);
}

uint64_t closure #2 in static BaseModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return a1 + 7;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[6];

  uint64_t v2 = type metadata accessor for BaseModifier();
  char v3 = a1 + *(int *)(v2 + 36);
  v9[2] = v2;
  _s7SwiftUI7BindingVySbGMaTm_11(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  id v5 = v4;
  id v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, v5, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v9[5];
}

uint64_t destroy for MultimodalNavigationStackViewHost()
{
  return swift_release();
}

uint64_t protocol witness for LayoutEngine.sizeThatFits(_:) in conformance AlignmentModifiedLayoutComputer.Engine()
{
  return LayoutComputer.sizeThatFits(_:)();
}

uint64_t objectdestroyTm()
{
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  if (*(void *)(v0 + 56))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v0 + 112)) {
    swift_bridgeObjectRelease();
  }
  else {
    __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  }

  return swift_deallocObject();
}

uint64_t objectdestroyTm_0()
{
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 72), *(unsigned char *)(v0 + 80));

  return swift_deallocObject();
}

uint64_t objectdestroyTm_1()
{
  uint64_t v1 = type metadata accessor for ResolvedPlaybackButton(0);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  swift_release();
  uint64_t v3 = v2 + *(int *)(v1 + 20);
  type metadata accessor for ClosedRange<Date>();
  uint64_t v5 = v4;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4))
  {
    uint64_t v6 = type metadata accessor for Date();
    int v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
    v7(v3, v6);
    v7(v3 + *(int *)(v5 + 36), v6);
  }
  uint64_t v8 = type metadata accessor for PlaybackButton.Configuration(0);
  uint64_t v9 = v3 + *(int *)(v8 + 20);
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 2, v10)) {
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = v3 + *(int *)(v8 + 40);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));

  swift_release();
  uint64_t v13 = v2 + *(int *)(v1 + 24);
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v13, *(void *)(v13 + 8), *(unsigned char *)(v13 + 16));

  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_2()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_3()
{
  outlined consume of HoverCallback();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_4()
{
  uint64_t v1 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  unint64_t v2 = v0
     + *(int *)(v1 + 24)
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), *(_WORD *)(v2 + 32), *(unsigned char *)(v2 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(_WORD *)(v2 + 72), *(unsigned char *)(v2 + 74));
  unint64_t v4 = v2 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
LABEL_8:

  return swift_deallocObject();
}

uint64_t objectdestroyTm_5()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for CountingIndex() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v0 + ((v2 + 48) & ~v2), AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t objectdestroyTm_6()
{
  uint64_t v1 = (int *)type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*((void *)v1 - 1) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v1 - 1) + 80));
  swift_release();
  swift_release();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v4 = *(int *)(v3 + 32);
  uint64_t v5 = v2 + v4 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
  uint64_t v6 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v8 = v2 + *(int *)(v7 + 24);
  int v9 = *(unsigned __int8 *)(v8 + 8);
  if (v9 != 255) {
    outlined consume of PlatformItemCollection.Storage(*(void *)v8, v9 & 1);
  }
  outlined consume of Text.Storage(*(void *)(v2 + *(int *)(v7 + 32)), *(void *)(v2 + *(int *)(v7 + 32) + 8), *(unsigned char *)(v2 + *(int *)(v7 + 32) + 16));
  swift_bridgeObjectRelease();
  outlined consume of Environment<Bool?>.Content(*(void *)(v2 + v1[5]), *(unsigned __int8 *)(v2 + v1[5] + 8));
  outlined consume of Environment<Bool?>.Content(*(void *)(v2 + v1[6]), *(unsigned __int8 *)(v2 + v1[6] + 8));
  outlined consume of Environment<Bool?>.Content(*(void *)(v2 + v1[8]), *(unsigned __int8 *)(v2 + v1[8] + 8));

  return swift_deallocObject();
}

uint64_t objectdestroyTm_7()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void **)(v0 + 88);
  if (v1)
  {
  }

  return swift_deallocObject();
}

uint64_t objectdestroyTm_8(uint64_t (*a1)(void))
{
  uint64_t v2 = a1(0);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80)), v2);

  return swift_deallocObject();
}

uint64_t objectdestroyTm_9()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_2Tm()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_10()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for _TaskModifier.InnerModifier(0) - 8) + 80);
  uint64_t v2 = v0 + ((v1 + 16) & ~v1);
  swift_release();
  uint64_t v3 = v2 + *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_4Tm()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t objectdestroy_3Tm()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_11()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void **)(v0 + 88);
  if (v1)
  {
  }

  return swift_deallocObject();
}

uint64_t objectdestroyTm_12()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t objectdestroyTm_13()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v10 = *(_OWORD *)(v0 + 24);
  uint64_t v2 = type metadata accessor for SharePreview();
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = v0 + v3;
  if (*(void *)(v0 + v3 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + v3);
  }
  if (*(void *)(v4 + 56))
  {
    outlined consume of Text.Storage(*(void *)(v4 + 32), *(void *)(v4 + 40), *(unsigned char *)(v4 + 48));
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = v4 + *(int *)(v2 + 56);
  uint64_t v6 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v5, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v1);
  }
  uint64_t v7 = v4 + *(int *)(v2 + 60);
  uint64_t v8 = *(void *)(v10 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, void))(v8 + 48))(v7, 1, v10)) {
    (*(void (**)(uint64_t, void))(v8 + 8))(v7, v10);
  }
  return swift_deallocObject();
}

uint64_t objectdestroyTm_14()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 88))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));

    swift_release();
  }
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 112), *(unsigned __int8 *)(v0 + 120));
  outlined consume of Environment<CGFloat?>.Content(*(void *)(v0 + 128), *(unsigned __int8 *)(v0 + 136), *(unsigned char *)(v0 + 137));

  return swift_deallocObject();
}

uint64_t objectdestroyTm_15()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t objectdestroyTm_16()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for OrnamentModifierLegacy() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[11], v1);

  return swift_deallocObject();
}

uint64_t objectdestroyTm_17()
{
  long long v6 = *(_OWORD *)(v0 + 16);
  uint64_t v1 = type metadata accessor for ItemNavigationLinkModifier();
  unint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80))
     + *(int *)(v1 + 52);
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  unint64_t v3 = v2 + *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v4 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, void))(v4 + 48))(v3, 1, v6)) {
    (*(void (**)(unint64_t, void))(v4 + 8))(v3, v6);
  }
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_18()
{
  if (*(void *)(v0 + 24))
  {
    swift_release();
    swift_release();
  }
  outlined consume of StateOrBinding<Bool>(*(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(unsigned char *)(v0 + 57));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 80), *(unsigned char *)(v0 + 88));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 96), *(unsigned char *)(v0 + 104));

  return swift_deallocObject();
}

uint64_t objectdestroyTm_19()
{
  if (*(void *)(v0 + 24))
  {
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_20()
{
  uint64_t v1 = *(void *)(v0 + 48);
  type metadata accessor for Optional();
  unint64_t v2 = (int *)(type metadata accessor for Binding() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = *(void *)(*(void *)v2 + 64);
  uint64_t v5 = *(void *)(v1 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  unint64_t v7 = v0 + v3 + v2[10];
  int v8 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v1);
  int v9 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  if (!v8) {
    v9(v7, v1);
  }
  v9(v0 + ((v3 + v4 + v6) & ~v6), v1);

  return swift_deallocObject();
}

uint64_t objectdestroyTm_21()
{
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
  outlined consume of Environment<CGFloat?>.Content(*(void *)(v0 + 80), *(unsigned __int8 *)(v0 + 88), *(unsigned char *)(v0 + 89));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 96), *(unsigned char *)(v0 + 104));
  outlined consume of Environment<ListItemTint?>.Content(*(void *)(v0 + 112), *(unsigned __int8 *)(v0 + 120), *(unsigned char *)(v0 + 121));

  return swift_deallocObject();
}

uint64_t objectdestroyTm_22()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t objectdestroyTm_23()
{
  uint64_t v1 = type metadata accessor for AsyncImage();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48);
  if (!v5(v0 + v2, 1, v3)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  }
  swift_release();
  swift_release();
  unint64_t v6 = v0 + v2 + *(int *)(v1 + 48);
  swift_release();
  uint64_t v7 = type metadata accessor for LoadingState(0);
  unint64_t v8 = v6 + *(int *)(v7 + 20);
  if (!v5(v8, 1, v3)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v8, v3);
  }
  outlined consume of AsyncImagePhase(*(void *)(v6 + *(int *)(v7 + 24)));
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_24(void (*a1)(void))
{
  a1(*(void *)(v1 + 40));
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_25()
{
  long long v12 = *(_OWORD *)(v0 + 16);
  uint64_t v1 = type metadata accessor for MapAnimator();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = v0 + ((v2 + 48) & ~v2);
  swift_release();
  swift_release();
  type metadata accessor for Optional();
  uint64_t v4 = v3 + *(int *)(type metadata accessor for Binding() + 32);
  uint64_t v5 = *(void *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, void))(v5 + 48))(v4, 1, v12)) {
    (*(void (**)(uint64_t, void))(v5 + 8))(v4, v12);
  }
  uint64_t v6 = v3 + *(int *)(v1 + 52);
  uint64_t v7 = (int *)type metadata accessor for AdapterState.PlaybackState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v7 - 1) + 48))(v6, 1, v7))
  {
    uint64_t v8 = type metadata accessor for Date();
    int v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    v9(v6, v8);
    v9(v6 + v7[7], v8);
    long long v10 = *(void (**)(uint64_t, void))(v5 + 8);
    v10(v6 + v7[8], v12);
    type metadata accessor for KeyframeTimeline();
    swift_bridgeObjectRelease();
    v10(v6 + v7[9], v12);
    swift_release();
  }
  type metadata accessor for AdapterState();
  type metadata accessor for State();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroyTm_26()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 88))
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 64), *(void *)(v0 + 72), *(unsigned char *)(v0 + 80));

    swift_release();
  }

  return swift_deallocObject();
}

uint64_t objectdestroyTm_27()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_28()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = type metadata accessor for SharePreview();
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  uint64_t v5 = v0 + v4;
  if (*(void *)(v0 + v4 + 24)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + v4);
  }
  if (*(void *)(v5 + 56))
  {
    outlined consume of Text.Storage(*(void *)(v5 + 32), *(void *)(v5 + 40), *(unsigned char *)(v5 + 48));
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = v5 + *(int *)(v3 + 56);
  uint64_t v7 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v6, 1, v2)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v2);
  }
  uint64_t v8 = v5 + *(int *)(v3 + 60);
  uint64_t v9 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v8, 1, v1)) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v1);
  }
  return swift_deallocObject();
}

uint64_t objectdestroyTm_29(void (*a1)(void, void))
{
  swift_release();
  a1(*(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_30()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_31()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  long long v9 = *(_OWORD *)(v0 + 32);
  uint64_t v3 = (int *)(type metadata accessor for NavigationPickerButton() - 8);
  uint64_t v4 = v0
     + ((*(unsigned __int8 *)(*(void *)v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v3 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v4, v1);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v4 + v3[19], v2);
  uint64_t v5 = v4 + v3[20];
  __swift_destroy_boxed_opaque_existential_1(v5);

  swift_bridgeObjectRelease();
  uint64_t v6 = v4 + v3[21];
  swift_release();
  swift_release();
  uint64_t v7 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, void))(*(void *)(v9 - 8) + 8))(v6 + *(int *)(v7 + 32), v9);
  return swift_deallocObject();
}

uint64_t objectdestroyTm_32()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  uint64_t v4 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, v1)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v3, v1);
  }

  return swift_deallocObject();
}

uint64_t objectdestroyTm_33()
{
  swift_unknownObjectRelease();
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(v0 + 40), *(unsigned char *)(v0 + 48));
  outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(*(void *)(v0 + 56), *(void **)(v0 + 64), *(unsigned char *)(v0 + 72));
  uint64_t v1 = *(void **)(v0 + 80);
  if (v1)
  {
  }
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_34()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for SystemListCell() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3, v1);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<Bool>.Content(*(void *)(v3 + v2[13]), *(unsigned char *)(v3 + v2[13] + 8));
  outlined consume of Environment<Bool>.Content(*(void *)(v3 + v2[14]), *(unsigned char *)(v3 + v2[14] + 8));
  outlined consume of Environment<Bool>.Content(*(void *)(v3 + v2[15]), *(unsigned char *)(v3 + v2[15] + 8));

  return swift_deallocObject();
}

uint64_t objectdestroyTm_35()
{
  swift_unknownObjectRelease();
  outlined consume of Environment<UISceneSession?>.Content(*(id *)(v0 + 56), *(unsigned char *)(v0 + 64));
  outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(*(void *)(v0 + 72), *(void **)(v0 + 80), *(unsigned char *)(v0 + 88));
  if (*(void *)(v0 + 96))
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroyTm_36()
{
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
  swift_release();
  if (*(void *)(v0 + 40)) {
    swift_release();
  }
  if (*(void *)(v0 + 56)) {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t type metadata accessor for AsyncImage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for ListLabelStyle.Implementation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  char v9 = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 64);
  char v11 = *(unsigned char *)(a2 + 73);
  unsigned __int8 v12 = *(unsigned char *)(a2 + 72);
  outlined copy of Environment<CGFloat?>.Content(v10, v12, v11);
  *(void *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 72) = v12;
  *(unsigned char *)(a1 + 73) = v11;
  uint64_t v13 = *(void *)(a2 + 80);
  char v14 = *(unsigned char *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v13, v14);
  *(void *)(a1 + 80) = v13;
  *(unsigned char *)(a1 + 88) = v14;
  uint64_t v15 = *(void *)(a2 + 96);
  char v16 = *(unsigned char *)(a2 + 105);
  uint64_t v17 = *(unsigned __int8 *)(a2 + 104);
  outlined copy of Environment<ListItemTint?>.Content(v15, v17, v16);
  *(void *)(a1 + 96) = v15;
  *(unsigned char *)(a1 + 104) = v17;
  *(unsigned char *)(a1 + 105) = v16;
  return a1;
}

uint64_t initializeWithCopy for OutsetByRowInsetsIfNecessary(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v8 = *(void *)(a2 + 56);
  char v9 = *(unsigned char *)(a2 + 64);
  outlined copy of Environment<HoverEffectContext?>.Content(v5, v6, v7, v8, v9);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  *(unsigned char *)(a1 + 64) = v9;
  uint64_t v10 = *(void *)(a2 + 72);
  LOBYTE(v6) = *(unsigned char *)(a2 + 80);
  outlined copy of Environment<Bool>.Content(v10, v6);
  *(void *)(a1 + 72) = v10;
  *(unsigned char *)(a1 + 80) = v6;
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  return a1;
}

_DWORD *initializeWithCopy for PopoverPresentationModifier.PopoverModifier(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 16;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 4) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 4) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 48) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)v11;
  uint64_t v13 = *(void *)(v11 + 8);
  LOBYTE(v5) = *(unsigned char *)(v11 + 16);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v11, v13, v5);
  *(void *)unint64_t v10 = v12;
  *(void *)(v10 + 8) = v13;
  *(unsigned char *)(v10 + 16) = v5;
  *(_WORD *)(v10 + 17) = *(_WORD *)(v11 + 17);
  *(unsigned char *)(v10 + 19) = *(unsigned char *)(v11 + 19);
  *(unsigned char *)(v10 + 20) = *(unsigned char *)(v11 + 20);
  unint64_t v14 = (v10 + 28) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v11 + 28) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(void *)(v14 + 8) = *(void *)(v15 + 8);
  *(unsigned char *)(v14 + 16) = *(unsigned char *)(v15 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for PopoverPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  char v11 = *(unsigned char *)(v8 + 16);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v8, v10, v11);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(unsigned char *)(v7 + 16) = v11;
  *(_WORD *)(v7 + 17) = *(_WORD *)(v8 + 17);
  *(unsigned char *)(v7 + 19) = *(unsigned char *)(v8 + 19);
  *(unsigned char *)(v7 + 20) = *(unsigned char *)(v8 + 20);
  *(unsigned char *)(v7 + 21) = *(unsigned char *)(v8 + 21);
  return a1;
}

uint64_t initializeWithCopy for CollectionViewCellModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 41);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 40);
  outlined copy of Environment<ListItemTint?>.Content(v8, v10, v9);
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 41) = v9;
  uint64_t v11 = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v14 = *(void *)(a2 + 72);
  char v15 = *(unsigned char *)(a2 + 80);
  outlined copy of Environment<HoverEffectContext?>.Content(v11, v12, v13, v14, v15);
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = v14;
  *(unsigned char *)(a1 + 80) = v15;
  uint64_t v16 = *(void *)(a2 + 88);
  uint64_t v17 = *(void *)(a2 + 96);
  uint64_t v18 = *(void *)(a2 + 104);
  uint64_t v19 = *(void *)(a2 + 112);
  uint64_t v20 = *(void *)(a2 + 120);
  uint64_t v21 = *(void *)(a2 + 128);
  uint64_t v22 = *(void *)(a2 + 136);
  uint64_t v23 = *(void *)(a2 + 144);
  uint64_t v33 = *(void *)(a2 + 152);
  uint64_t v34 = *(void *)(a2 + 160);
  char v35 = *(unsigned char *)(a2 + 168);
  char v36 = *(unsigned char *)(a2 + 169);
  outlined copy of Environment<ListContentStyling>.Content(v16, v17, v18, v19, v20, v21, v22, v23, v33, v34, v35, v36);
  *(void *)(a1 + 88) = v16;
  *(void *)(a1 + 96) = v17;
  *(void *)(a1 + 104) = v18;
  *(void *)(a1 + 112) = v19;
  *(void *)(a1 + 120) = v20;
  *(void *)(a1 + 128) = v21;
  *(void *)(a1 + 136) = v22;
  *(void *)(a1 + 144) = v23;
  *(void *)(a1 + 152) = v33;
  *(void *)(a1 + 160) = v34;
  *(unsigned char *)(a1 + 168) = v35;
  *(unsigned char *)(a1 + 169) = v36;
  uint64_t v24 = *(void *)(a2 + 176);
  uint64_t v25 = *(void *)(a2 + 184);
  LOBYTE(v18) = *(unsigned char *)(a2 + 192);
  outlined copy of Environment<CGFloat?>.Content(v24, v25, v18);
  *(void *)(a1 + 176) = v24;
  *(void *)(a1 + 184) = v25;
  *(unsigned char *)(a1 + 192) = v18;
  *(unsigned char *)(a1 + 193) = *(unsigned char *)(a2 + 193);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(unsigned char *)(a1 + 232) = *(unsigned char *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = *(unsigned char *)(a2 + 248);
  uint64_t v26 = *(void *)(a2 + 256);
  if (v26 == 1)
  {
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  }
  else
  {
    *(void *)(a1 + 256) = v26;
    *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
    swift_retain();
  }
  *(unsigned char *)(a1 + 265) = *(unsigned char *)(a2 + 265);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  uint64_t v27 = a1 + 280;
  uint64_t v28 = a2 + 280;
  int v29 = *(unsigned __int8 *)(a2 + 350);
  if (v29 == 2)
  {
    long long v30 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 304) = v30;
    (**(void (***)(uint64_t, uint64_t))(v30 - 8))(v27, v28);
    *(void *)(a1 + 320) = *(void *)(a2 + 320);
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
  }
  else if (v29 == 1)
  {
    *(void *)(a1 + 280) = *(void *)(a2 + 280);
    *(void *)(a1 + 288) = *(void *)(a2 + 288);
  }
  else
  {
    long long v31 = *(_OWORD *)(a2 + 304);
    *(_OWORD *)(a1 + 304) = v31;
    (**(void (***)(uint64_t, uint64_t))(v31 - 8))(v27, v28);
    *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
    *(void *)(a1 + 328) = *(void *)(a2 + 328);
    *(void *)(a1 + 336) = *(void *)(a2 + 336);
    *(_DWORD *)(a1 + 344) = *(_DWORD *)(a2 + 344);
    *(_WORD *)(a1 + 348) = *(_WORD *)(a2 + 348);
  }
  *(unsigned char *)(a1 + 350) = v29;
  swift_retain();
  *(unsigned char *)(a1 + 351) = *(unsigned char *)(a2 + 351);
  return a1;
}

uint64_t outlined copy of Environment<CGFloat?>.Content(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of Transaction?(uint64_t result)
{
  if (result != 1) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of Environment<HoverEffectContext?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined copy of Environment<ListItemTint?>.Content(uint64_t result, uint64_t a2, char a3)
{
  if (a3) {
    return outlined copy of Transaction?(result);
  }
  else {
    return swift_retain();
  }
}

uint64_t outlined copy of Environment<ListContentStyling>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12)
{
  if (a12)
  {
    swift_retain();
    swift_retain();
    return outlined copy of Transaction?(a10);
  }
  else
  {
    return swift_retain();
  }
}

uint64_t initializeWithCopy for PopoverConditionalStateProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = (_OWORD *)(a1 + 40);
  uint64_t v7 = a2 + 40;
  uint64_t v8 = *(void *)(a2 + 64);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v8;
    *(void *)(a1 + 72) = v9;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v8 - 8))(a1 + 40, v7, v8);
  }
  else
  {
    long long v10 = *(_OWORD *)(v7 + 16);
    *uint64_t v6 = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 56) = v10;
    *(void *)(a1 + 72) = *(void *)(v7 + 32);
  }
  return a1;
}

void *initializeWithCopy for PopoverItemStateProvider(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  long long v10 = (void *)(((unint64_t)v5 + v9 + 8) & ~v9);
  uint64_t v11 = (const void *)(((unint64_t)v6 + v9 + 8) & ~v9);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v8 + 48);
  swift_retain();
  swift_retain();
  if (v12(v11, 1, v7))
  {
    int v13 = *(_DWORD *)(v8 + 84);
    uint64_t v14 = *(void *)(v8 + 64);
    if (v13) {
      size_t v15 = *(void *)(v8 + 64);
    }
    else {
      size_t v15 = v14 + 1;
    }
    memcpy(v10, v11, v15);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v8 + 16))(v10, v11, v7);
    uint64_t v17 = *(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56);
    uint64_t v16 = v8 + 56;
    v17(v10, 0, 1, v7);
    int v13 = *(_DWORD *)(v16 + 28);
    uint64_t v14 = *(void *)(v16 + 8);
  }
  uint64_t v18 = v14 + ((v9 + 16) & ~v9);
  if (!v13) {
    ++v18;
  }
  uint64_t v19 = (uint64_t)a1 + v18 + 7;
  uint64_t v20 = (uint64_t *)(((unint64_t)a2 + v18 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  uint64_t v23 = (void *)(v19 & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v23 = v22;
  v23[1] = v21;
  swift_retain();
  return a1;
}

uint64_t closure #1 in closure #2 in ButtonBehavior.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - v8;
  long long v13 = *(_OWORD *)(v10 + 80);
  type metadata accessor for ButtonBehavior.StateType();
  type metadata accessor for State();
  State.wrappedValue.getter();
  (*(void (**)(void))(a1 + 48))(v14 & 1);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  uint64_t v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, a2);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  return ((uint64_t (*)(char *, uint64_t))v11)(v9, a2);
}

uint64_t initializeWithCopy for ResolvedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  char v9 = *(unsigned char *)(v8 + 2);
  *(_WORD *)uint64_t v7 = *(_WORD *)v8;
  *(unsigned char *)(v7 + 2) = v9;
  return a1;
}

uint64_t initializeWithCopy for BorderlessButtonStyleBase(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 25);
  uint64_t v8 = *(unsigned __int8 *)(a2 + 24);
  outlined copy of Environment<KeyboardShortcut?>.Content(*(void *)a2, v5, v6, v8, v7);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 25) = v7;
  uint64_t v9 = *(void *)(v2 + 32);
  LOBYTE(v5) = *(unsigned char *)(v2 + 40);
  outlined copy of Environment<Bool>.Content(v9, v5);
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = v5;
  uint64_t v10 = *(void *)(v2 + 48);
  LOBYTE(v2) = *(unsigned char *)(v2 + 56);
  outlined copy of Environment<Bool>.Content(v10, v2);
  *(void *)(a1 + 48) = v10;
  *(unsigned char *)(a1 + 56) = v2;
  return a1;
}

uint64_t outlined copy of Environment<KeyboardShortcut?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    return swift_bridgeObjectRetain();
  }
  else {
    return swift_retain();
  }
}

uint64_t initializeWithCopy for PlainButtonStyleBase(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(v2 + 16);
  LOBYTE(v2) = *(unsigned char *)(v2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v2);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v2;
  return a1;
}

uint64_t Button.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v38 = a2;
  uint64_t v31 = type metadata accessor for ResolvedButtonStyle(0);
  MEMORY[0x1F4188790](v31);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v35 = lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label();
  uint64_t v8 = *(void *)(a1 + 24);
  v51 = &type metadata for PrimitiveButtonStyleConfiguration.Label;
  uint64_t v52 = v7;
  unint64_t v53 = v35;
  uint64_t v54 = v8;
  type metadata accessor for StaticSourceWriter();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v29 - v10;
  unint64_t v34 = lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label();
  v51 = &type metadata for ButtonStyleConfiguration.Label;
  uint64_t v52 = v7;
  unint64_t v53 = v34;
  uint64_t v54 = v8;
  type metadata accessor for StaticSourceWriter();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v36 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v30 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v32 = (uint64_t)&v29 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v33 = (char *)&v29 - v17;
  char v18 = *v3;
  char v19 = v3[1];
  uint64_t v20 = (uint64_t)&v3[*(int *)(a1 + 36)];
  uint64_t v21 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  outlined init with copy of ButtonAction(v20, (uint64_t)&v6[*(int *)(v21 + 24)], (uint64_t (*)(void))type metadata accessor for ButtonAction);
  *uint64_t v6 = v18;
  v6[1] = v19;
  uint64_t v44 = v7;
  uint64_t v45 = v8;
  v46 = v3;
  uint64_t v22 = _s7SwiftUI5LabelVyAA4TextVAA5ImageVGACyxq_GAA4ViewAAWlTm_2(&lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle, (void (*)(uint64_t))type metadata accessor for ResolvedButtonStyle);
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (void (*)(double))partial apply for closure #1 in Button.body.getter, (uint64_t)v43, v31, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, v7, v22);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_6((uint64_t)v6, type metadata accessor for ResolvedButtonStyle);
  uint64_t v40 = v7;
  uint64_t v41 = v8;
  long long v42 = v3;
  uint64_t v49 = v22;
  v50 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v24 = v30;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for ButtonStyleConfiguration.Label, (void (*)(double))partial apply for closure #2 in Button.body.getter, (uint64_t)v39, v9, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, v7, WitnessTable);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v9);
  uint64_t v47 = WitnessTable;
  v48 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  uint64_t v25 = v32;
  ModifiedContent<>.accessibility()(v12, v32);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v36 + 8);
  v26(v24, v12);
  uint64_t v27 = v33;
  static ViewBuilder.buildExpression<A>(_:)(v25);
  v26((char *)v25, v12);
  static ViewBuilder.buildExpression<A>(_:)(v27);
  return ((uint64_t (*)(char *, uint64_t))v26)(v27, v12);
}

uint64_t destroy for PickerBuilder.Content(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 24) - 8) + 8))();
}

uint64_t View.viewAlias<A, B>(_:_:)(uint64_t a1, void (*a2)(double), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v23[0] = a7;
  uint64_t v10 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[2] = v13;
  v23[3] = v14;
  v23[4] = v15;
  v23[5] = v16;
  uint64_t v17 = type metadata accessor for StaticSourceWriter();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)v23 - v20;
  a2(v19);
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v21, v12, a6);
  MEMORY[0x18C113660](v21, a4, v17, v23[0]);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v17);
}

uint64_t type metadata accessor for StaticSourceWriter()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ResolvedButtonStyle(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedButtonStyle);
}

uint64_t closure #1 in Button.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Button();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v7 + 40));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t static ViewBuilder.buildExpression<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 16))(a3, a1, a2);
}

uint64_t type metadata accessor for Button()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #2 in Button.body.getter()
{
  return closure #1 in Button.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label);
  }
  return result;
}

uint64_t outlined destroy of PrimitiveButtonStyleConfiguration(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_3(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_5(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_6(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI5LabelVyAA4TextVAA5ImageVGACyxq_GAA4ViewAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI5LabelVyAA4TextVAA5ImageVGACyxq_GAA4ViewAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI5LabelVyAA4TextVAA5ImageVGACyxq_GAA4ViewAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI5LabelVyAA4TextVAA5ImageVGACyxq_GAA4ViewAAWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ModifiedContent<>.accessibility()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t outlined init with copy of ButtonAction(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t initializeWithCopy for ButtonAction(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v22 = *(void *)a2;
    uint64_t v23 = *(void *)(a2 + 8);
    char v24 = *(unsigned char *)(a2 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)a2, v23, v24);
    *(void *)a1 = v22;
    *(void *)(a1 + 8) = v23;
    *(unsigned char *)(a1 + 16) = v24;
    uint64_t v25 = *(void *)(a2 + 40);
    long long v26 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v26;
    *(void *)(a1 + 40) = v25;
    id v27 = (id)v26;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v28 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v28;
    goto LABEL_6;
  }
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  char v9 = *(unsigned char *)(a2 + 34);
  __int16 v10 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)a2, v6, v7, v8, v10, v9);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v6;
  *(void *)(a1 + 16) = v7;
  *(void *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 34) = v9;
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 56);
  uint64_t v14 = *(void *)(a2 + 64);
  char v15 = *(unsigned char *)(a2 + 74);
  __int16 v16 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v11, v12, v13, v14, v16, v15);
  *(void *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = v12;
  *(void *)(a1 + 56) = v13;
  *(void *)(a1 + 64) = v14;
  *(_WORD *)(a1 + 72) = v16;
  *(unsigned char *)(a1 + 74) = v15;
  uint64_t v17 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
  uint64_t v21 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(v18 + *(int *)(v21 + 20)) = *(unsigned char *)(v19 + *(int *)(v21 + 20));
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t initializeWithCopy for CircularUIKitProgressView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 40);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  char v11 = *(unsigned char *)(a2 + 72);
  outlined copy of Environment<Bool>.Content(v10, v11);
  *(void *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 72) = v11;
  uint64_t v12 = *(void *)(a2 + 80);
  char v13 = *(unsigned char *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v12, v13);
  *(void *)(a1 + 80) = v12;
  *(unsigned char *)(a1 + 88) = v13;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  uint64_t v14 = *(void *)(a2 + 112);
  char v15 = *(unsigned char *)(a2 + 120);
  outlined copy of Environment<Bool>.Content(v14, v15);
  *(void *)(a1 + 112) = v14;
  *(unsigned char *)(a1 + 120) = v15;
  uint64_t v16 = *(void *)(a2 + 128);
  char v17 = *(unsigned char *)(a2 + 136);
  outlined copy of Environment<Bool>.Content(v16, v17);
  *(void *)(a1 + 128) = v16;
  *(unsigned char *)(a1 + 136) = v17;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  swift_retain();
  return a1;
}

uint64_t outlined copy of Environment<Bool>.Content(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t partial apply for closure #1 in WrappedButtonStyleBody.body.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(type metadata accessor for WrappedButtonStyleBody() - 8);
  return closure #1 in WrappedButtonStyleBody.body.getter(a1, v2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5, a2);
}

uint64_t closure #1 in WrappedButtonStyleBody.body.getter@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7 = (char *)(a2 + *(int *)(type metadata accessor for WrappedButtonStyleBody() + 36));
  char v8 = *v7;
  LOBYTE(v7) = v7[1];
  v10[0] = v8;
  v10[1] = (_BYTE)v7;
  v10[2] = a1;
  return ButtonStyle.resolvedBody(configuration:)((uint64_t)v10, a3, a4);
}

uint64_t type metadata accessor for WrappedButtonStyleBody()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ButtonStyle.resolvedBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  double v7 = MEMORY[0x1F4188790](a1);
  char v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v11 = *v10;
  char v12 = v10[1];
  char v13 = v10[2];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v9, v3, a2, v7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v9, a2);
  uint64_t result = type metadata accessor for ResolvedButtonStyleBody();
  char v15 = (unsigned char *)(a3 + *(int *)(result + 36));
  *char v15 = v11;
  v15[1] = v12;
  v15[2] = v13;
  return result;
}

uint64_t type metadata accessor for ResolvedButtonStyleBody()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t property wrapper backing initializer of ButtonBehavior.state()
{
  type metadata accessor for ButtonBehavior.StateType();
  State.init(wrappedValue:)();
  if (v3) {
    int v0 = 0x10000;
  }
  else {
    int v0 = 0;
  }
  return v0 | v2;
}

uint64_t type metadata accessor for ButtonBehavior.StateType()
{
  return __swift_instantiateGenericMetadata();
}

__n128 __swift_memcpy57_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t ResolvedButtonStyle.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v95 = a1;
  type metadata accessor for StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransfor ();
  MEMORY[0x1F4188790](v2 - 8);
  v93 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = (uint64_t (*)(void))type metadata accessor for ButtonAction();
  MEMORY[0x1F4188790](v78);
  uint64_t v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v7 = v6 - 8;
  uint64_t v80 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  v77 = (void **)((char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v81 = v8;
  MEMORY[0x1F4188790](v9);
  char v11 = (char *)&v70 - v10;
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12);
  char v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v70 - v17;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>();
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>();
  uint64_t v96 = v22;
  MEMORY[0x1F4188790](v22);
  char v24 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, Platform();
  uint64_t v82 = v25;
  MEMORY[0x1F4188790](v25);
  uint64_t v83 = (uint64_t)&v70 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v92 = (uint64_t)&v70 - v28;
  type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorMod(0);
  uint64_t v85 = v29;
  MEMORY[0x1F4188790](v29);
  uint64_t v91 = (uint64_t)&v70 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclo(0);
  uint64_t v86 = v31;
  MEMORY[0x1F4188790](v31);
  uint64_t v89 = (uint64_t)&v70 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigatio();
  MEMORY[0x1F4188790](v33 - 8);
  uint64_t v90 = (uint64_t)&v70 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>(0);
  uint64_t v84 = v35;
  MEMORY[0x1F4188790](v35);
  uint64_t v87 = (uint64_t)&v70 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2((uint64_t)v1, (uint64_t)v11, type metadata accessor for PrimitiveButtonStyleConfiguration);
  char v37 = v11[1];
  *char v15 = *v11;
  v15[1] = v37;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2((uint64_t)&v11[*(int *)(v7 + 32)], (uint64_t)&v15[*(int *)(v13 + 44)], (uint64_t (*)(void))type metadata accessor for ButtonAction);
  v79 = v11;
  _s7SwiftUI12ButtonActionOWOhTm_0((uint64_t)v11, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v15, (uint64_t)v18);
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v18, (uint64_t)v21);
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v18);
  uint64_t v38 = (uint64_t)v1;
  char v39 = *v1;
  LOBYTE(v15) = *(unsigned char *)(v38 + 1);
  uint64_t v40 = swift_allocObject();
  *(unsigned char *)(v40 + 16) = v39;
  *(unsigned char *)(v40 + 17) = (_BYTE)v15;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2((uint64_t)v21, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>);
  uint64_t v41 = *(int *)(v96 + 36);
  v88 = v24;
  long long v42 = &v24[v41];
  uint64_t v43 = (uint64_t)v77;
  *(void *)long long v42 = partial apply for closure #1 in View.platformItemButtonRole(_:);
  *((void *)v42 + 1) = v40;
  _s7SwiftUI12ButtonActionOWOhTm_0((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>);
  uint64_t v94 = v38;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2(v38, v43, type metadata accessor for PrimitiveButtonStyleConfiguration);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2(v43 + *(int *)(v7 + 32), (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ButtonAction);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v44 = *(void *)v5;
    uint64_t v45 = *((void *)v5 + 1);
    uint64_t v46 = v5[16];
    uint64_t v47 = (void *)*((void *)v5 + 3);
    uint64_t v48 = *((void *)v5 + 4);
    uint64_t v49 = *((void *)v5 + 5);
  }
  else
  {
    _s7SwiftUI12ButtonActionOWOhTm_0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    uint64_t v49 = 0;
  }
  v70 = v47;
  uint64_t v71 = v45;
  uint64_t v72 = v49;
  uint64_t v73 = v48;
  uint64_t v74 = v44;
  v78 = type metadata accessor for PrimitiveButtonStyleConfiguration;
  uint64_t v50 = (uint64_t)v79;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2(v43, (uint64_t)v79, type metadata accessor for PrimitiveButtonStyleConfiguration);
  uint64_t v51 = *(unsigned __int8 *)(v80 + 80);
  v81 += (v51 + 16) & ~v51;
  uint64_t v52 = (v51 + 16) & ~v51;
  uint64_t v80 = v52;
  uint64_t v76 = v51 | 7;
  uint64_t v53 = swift_allocObject();
  v75 = type metadata accessor for PrimitiveButtonStyleConfiguration;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>(v50, v53 + v52, type metadata accessor for PrimitiveButtonStyleConfiguration);
  uint64_t v54 = _s7SwiftUI12ButtonActionOWOhTm_0(v43, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v77 = &v70;
  v97 = partial apply for implicit closure #2 in implicit closure #1 in AccessibilityButtonModifier.init(_:);
  uint64_t v98 = v53;
  uint64_t v99 = v44;
  uint64_t v100 = v45;
  uint64_t v101 = v46;
  v102 = v47;
  uint64_t v103 = v48;
  uint64_t v104 = v49;
  MEMORY[0x1F4188790](v54);
  MEMORY[0x1F4188790](v55);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>>();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>> and conformance <> StaticIf<A, B, C>();
  uint64_t v56 = (uint64_t)v93;
  uint64_t v57 = (uint64_t)v88;
  View.staticIf<A, B, C>(_:trueModifier:falseModifier:)();
  uint64_t v58 = v83;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2(v56, v83, (uint64_t (*)(void))type metadata accessor for StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransfor);
  *(unsigned char *)(v58 + *(int *)(v82 + 36)) = 1;
  _s7SwiftUI12ButtonActionOWOhTm_0(v56, (uint64_t (*)(void))type metadata accessor for StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransfor);
  uint64_t v59 = v58;
  uint64_t v60 = v92;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>(v59, v92, (uint64_t (*)(void))type metadata accessor for ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, Platform);
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v74, v71, v46, v70);
  _s7SwiftUI12ButtonActionOWOhTm_0(v57, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2(v94, v50, v78);
  uint64_t v61 = swift_allocObject();
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>(v50, v61 + v80, v75);
  uint64_t v62 = v91;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2(v60, v91, (uint64_t (*)(void))type metadata accessor for ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, Platform);
  v63 = (void (**)())(v62 + *(int *)(v85 + 36));
  *v63 = partial apply for implicit closure #2 in implicit closure #1 in FlexibleBorderedButtonStyle.makeBody(configuration:);
  v63[1] = (void (*)())v61;
  _s7SwiftUI12ButtonActionOWOhTm_0(v60, (uint64_t (*)(void))type metadata accessor for ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, Platform);
  uint64_t v64 = v89;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2(v62, v89, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorMod);
  *(_DWORD *)(v64 + *(int *)(v86 + 36)) = 0;
  _s7SwiftUI12ButtonActionOWOhTm_0(v62, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorMod);
  uint64_t v65 = v90;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2(v64, v90, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclo);
  _s7SwiftUI12ButtonActionOWOhTm_0(v64, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclo);
  unint64_t v66 = lazy protocol witness table accessor for type AnyButtonStyleType.Unknown and conformance AnyButtonStyleType.Unknown();
  uint64_t v67 = v87;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2(v65, v87, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigatio);
  v68 = (void *)(v67 + *(int *)(v84 + 36));
  void *v68 = &type metadata for AnyButtonStyleType.Unknown;
  v68[1] = v66;
  _s7SwiftUI12ButtonActionOWOhTm_0(v65, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigatio);
  return outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>(v67, v95, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<NavigationButtonInput, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityAttachmentModifier>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>.Representable>, ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>);
}

uint64_t outlined init with copy of PrimitiveButtonStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_3(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_5(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_6(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_7(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_9(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_10(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_11(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_12(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_13(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>(255, a3, a4, a5);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined destroy of ButtonAction(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI12ButtonActionOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for OnChangeOfSuggestionsModifier()
{
  swift_release();

  return swift_release();
}

_WORD *initializeWithCopy for ResolvedButtonStyle(_WORD *a1, _WORD *a2)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  uint64_t v5 = (char *)a1 + v4;
  unint64_t v6 = (char *)a2 + v4;
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v24 = *(void *)v6;
    uint64_t v25 = *((void *)v6 + 1);
    char v26 = v6[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v6, v25, v26);
    *(void *)uint64_t v5 = v24;
    *((void *)v5 + 1) = v25;
    v5[16] = v26;
    uint64_t v27 = *((void *)v6 + 5);
    long long v28 = *(_OWORD *)(v6 + 24);
    *(_OWORD *)(v5 + 24) = v28;
    *((void *)v5 + 5) = v27;
    id v29 = (id)v28;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v30 = *((void *)v6 + 1);
    *(void *)uint64_t v5 = *(void *)v6;
    *((void *)v5 + 1) = v30;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)v6;
  uint64_t v9 = *((void *)v6 + 1);
  uint64_t v10 = *((void *)v6 + 2);
  uint64_t v11 = *((void *)v6 + 3);
  char v12 = v6[34];
  __int16 v13 = *((_WORD *)v6 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v6, v9, v10, v11, v13, v12);
  *(void *)uint64_t v5 = v8;
  *((void *)v5 + 1) = v9;
  *((void *)v5 + 2) = v10;
  *((void *)v5 + 3) = v11;
  *((_WORD *)v5 + 16) = v13;
  v5[34] = v12;
  uint64_t v14 = *((void *)v6 + 5);
  uint64_t v15 = *((void *)v6 + 6);
  uint64_t v16 = *((void *)v6 + 7);
  uint64_t v17 = *((void *)v6 + 8);
  LOBYTE(v11) = v6[74];
  __int16 v18 = *((_WORD *)v6 + 36);
  outlined copy of Environment<OpenURLAction>.Content(v14, v15, v16, v17, v18, v11);
  *((void *)v5 + 5) = v14;
  *((void *)v5 + 6) = v15;
  *((void *)v5 + 7) = v16;
  *((void *)v5 + 8) = v17;
  *((_WORD *)v5 + 36) = v18;
  v5[74] = v11;
  uint64_t v19 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v20 = &v5[v19];
  uint64_t v21 = &v6[v19];
  uint64_t v22 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  uint64_t v23 = type metadata accessor for LinkDestination.Configuration();
  v20[*(int *)(v23 + 20)] = v21[*(int *)(v23 + 20)];
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t destroy for ResolvedButtonStyle(uint64_t a1)
{
  uint64_t v1 = a1 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));

LABEL_6:
    return swift_release();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24), *(_WORD *)(v1 + 32), *(unsigned char *)(v1 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(_WORD *)(v1 + 72), *(unsigned char *)(v1 + 74));
  uint64_t v3 = v1 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

uint64_t type metadata accessor for SortableTableHeaderButton(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata accessor for PrimitiveButtonStyleConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for PrimitiveButtonStyleConfiguration);
}

uint64_t type metadata accessor for ButtonAction()
{
  uint64_t result = type metadata singleton initialization cache for ButtonAction;
  if (!type metadata singleton initialization cache for ButtonAction) {
    return swift_getSingletonMetadata();
  }
  return result;
}

_WORD *initializeWithCopy for PrimitiveButtonStyleConfiguration(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  unint64_t v6 = (char *)a2 + v4;
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v24 = *(void *)v6;
    uint64_t v25 = *((void *)v6 + 1);
    char v26 = v6[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v6, v25, v26);
    *(void *)uint64_t v5 = v24;
    *((void *)v5 + 1) = v25;
    v5[16] = v26;
    uint64_t v27 = *((void *)v6 + 5);
    long long v28 = *(_OWORD *)(v6 + 24);
    *(_OWORD *)(v5 + 24) = v28;
    *((void *)v5 + 5) = v27;
    id v29 = (id)v28;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v30 = *((void *)v6 + 1);
    *(void *)uint64_t v5 = *(void *)v6;
    *((void *)v5 + 1) = v30;
    goto LABEL_6;
  }
  uint64_t v8 = *(void *)v6;
  uint64_t v9 = *((void *)v6 + 1);
  uint64_t v10 = *((void *)v6 + 2);
  uint64_t v11 = *((void *)v6 + 3);
  char v12 = v6[34];
  __int16 v13 = *((_WORD *)v6 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v6, v9, v10, v11, v13, v12);
  *(void *)uint64_t v5 = v8;
  *((void *)v5 + 1) = v9;
  *((void *)v5 + 2) = v10;
  *((void *)v5 + 3) = v11;
  *((_WORD *)v5 + 16) = v13;
  v5[34] = v12;
  uint64_t v14 = *((void *)v6 + 5);
  uint64_t v15 = *((void *)v6 + 6);
  uint64_t v16 = *((void *)v6 + 7);
  uint64_t v17 = *((void *)v6 + 8);
  LOBYTE(v11) = v6[74];
  __int16 v18 = *((_WORD *)v6 + 36);
  outlined copy of Environment<OpenURLAction>.Content(v14, v15, v16, v17, v18, v11);
  *((void *)v5 + 5) = v14;
  *((void *)v5 + 6) = v15;
  *((void *)v5 + 7) = v16;
  *((void *)v5 + 8) = v17;
  *((_WORD *)v5 + 36) = v18;
  v5[74] = v11;
  uint64_t v19 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v20 = &v5[v19];
  uint64_t v21 = &v6[v19];
  uint64_t v22 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  uint64_t v23 = type metadata accessor for LinkDestination.Configuration();
  v20[*(int *)(v23 + 20)] = v21[*(int *)(v23 + 20)];
LABEL_7:
  swift_storeEnumTagMultiPayload();
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>();
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_1(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>);
    }
  }
}

uint64_t destroy for PrimitiveButtonStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  type metadata accessor for ButtonAction();
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));

LABEL_6:
    return swift_release();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), *(_WORD *)(v2 + 32), *(unsigned char *)(v2 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(_WORD *)(v2 + 72), *(unsigned char *)(v2 + 74));
  uint64_t v4 = v2 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v5 = type metadata accessor for URL();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>);
    }
  }
}

uint64_t destroy for ButtonAction(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));

LABEL_6:
    return swift_release();
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(_WORD *)(a1 + 32), *(unsigned char *)(a1 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(_WORD *)(a1 + 72), *(unsigned char *)(a1 + 74));
  uint64_t v3 = a1 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

uint64_t outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_5(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_6(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_7(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_9(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_10(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Button();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>(uint64_t a1)
{
  type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for Button(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (a1 + (v6 | 7) + 2) & ~(v6 | 7);
  uint64_t v8 = *(void *)(v5 + 64) + ((v6 + 75) & ~v6);
  if ((unint64_t)(v8 + 1) > 0x30) {
    uint64_t v9 = v8 + 1;
  }
  else {
    uint64_t v9 = 48;
  }
  unsigned int v10 = *(unsigned __int8 *)(v7 + v9);
  unsigned int v11 = v10 - 3;
  if (v10 >= 3)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *(unsigned __int8 *)v7;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)v7;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)v7 | (*(unsigned __int8 *)(v7 + 2) << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)v7;
LABEL_13:
        int v14 = (v13 | (v11 << (8 * v9))) + 3;
        unsigned int v10 = v13 + 3;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (v10 == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
  }
  else if (v10 == 1)
  {
    outlined consume of Environment<OpenURLAction>.Content(*(void *)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(void *)(v7 + 24), *(_WORD *)(v7 + 32), *(unsigned char *)(v7 + 34));
    unint64_t v15 = (v7 + 42) & 0xFFFFFFFFFFFFFFF8;
    outlined consume of Environment<OpenURLAction>.Content(*(void *)v15, *(void *)(v15 + 8), *(void *)(v15 + 16), *(void *)(v15 + 24), *(_WORD *)(v15 + 32), *(unsigned char *)(v15 + 34));
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))((v6 + v15 + 35) & ~v6, v4);
    goto LABEL_20;
  }
  swift_release();
LABEL_20:
  uint64_t v16 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v17 = *(uint64_t (**)(unint64_t))(v16 + 8);
  unint64_t v18 = ((v7 | 1) + v9 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);

  return v17(v18);
}

uint64_t outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_WORD *initializeWithCopy for Button(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v6 - 8) + 80);
  uint64_t v8 = (v7 | 7) + 2;
  uint64_t v9 = ((unint64_t)v5 + v8) & ~(v7 | 7);
  unsigned int v10 = (unsigned __int8 *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  uint64_t v11 = *(void *)(*(void *)(v6 - 8) + 64) + ((v7 + 75) & ~v7);
  if ((unint64_t)(v11 + 1) > 0x30) {
    uint64_t v12 = v11 + 1;
  }
  else {
    uint64_t v12 = 48;
  }
  unsigned int v13 = v10[v12];
  unsigned int v14 = v13 - 3;
  if (v13 >= 3)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *v10;
        goto LABEL_13;
      case 2:
        int v16 = *(unsigned __int16 *)v10;
        goto LABEL_13;
      case 3:
        int v16 = *(unsigned __int16 *)(((unint64_t)a2 + v8) & ~(v7 | 7)) | (*(unsigned __int8 *)((((unint64_t)a2 + v8) & ~(v7 | 7)) + 2) << 16);
        goto LABEL_13;
      case 4:
        int v16 = *(_DWORD *)v10;
LABEL_13:
        int v17 = (v16 | (v14 << (8 * v12))) + 3;
        unsigned int v13 = v16 + 3;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 2)
  {
    uint64_t v30 = *(void *)v10;
    uint64_t v31 = *((void *)v10 + 1);
    char v32 = v10[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v10, v31, v32);
    *(void *)uint64_t v9 = v30;
    *(void *)(v9 + 8) = v31;
    *(unsigned char *)(v9 + 16) = v32;
    uint64_t v33 = (void *)*((void *)v10 + 3);
    *(void *)(v9 + 24) = v33;
    uint64_t v34 = *((void *)v10 + 5);
    *(void *)(v9 + 32) = *((void *)v10 + 4);
    *(void *)(v9 + 40) = v34;
    *(unsigned char *)(v9 + v12) = 2;
    id v35 = v33;
LABEL_20:
    swift_retain();
    goto LABEL_21;
  }
  if (v13 != 1)
  {
    uint64_t v36 = *(void *)((((unint64_t)a2 + v8) & ~(v7 | 7)) + 8);
    *(void *)uint64_t v9 = *(void *)v10;
    *(void *)((((unint64_t)v5 + v8) & ~(v7 | 7)) + 8) = v36;
    *(unsigned char *)(v9 + v12) = 0;
    goto LABEL_20;
  }
  uint64_t v43 = v6;
  uint64_t v18 = *(void *)v10;
  uint64_t v19 = *((void *)v10 + 1);
  uint64_t v44 = a3;
  uint64_t v45 = v5;
  uint64_t v20 = *((void *)v10 + 2);
  uint64_t v21 = *((void *)v10 + 3);
  char v22 = v10[34];
  __int16 v23 = *((_WORD *)v10 + 16);
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v42 = *(void *)(v41 + 64);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v10, v19, v20, v21, v23, v22);
  *(void *)uint64_t v9 = v18;
  *(void *)(v9 + 8) = v19;
  *(void *)(v9 + 16) = v20;
  *(void *)(v9 + 24) = v21;
  *(_WORD *)(v9 + 32) = v23;
  *(unsigned char *)(v9 + 34) = v22;
  unint64_t v24 = (v9 + 42) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (unint64_t)(v10 + 42) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)v25;
  uint64_t v27 = *(void *)(v25 + 8);
  uint64_t v28 = *(void *)(v25 + 16);
  uint64_t v29 = *(void *)(v25 + 24);
  char v39 = *(unsigned char *)(v25 + 34);
  __int16 v40 = *(_WORD *)(v25 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v25, v27, v28, v29, v40, v39);
  *(void *)unint64_t v24 = v26;
  *(void *)(v24 + 8) = v27;
  *(void *)(v24 + 16) = v28;
  *(void *)(v24 + 24) = v29;
  a3 = v44;
  uint64_t v5 = v45;
  *(_WORD *)(v24 + 32) = v40;
  *(unsigned char *)(v24 + 34) = v39;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v41 + 16))((v7 + 35 + v24) & ~v7, (v7 + 35 + v25) & ~v7, v43);
  *(unsigned char *)(((v7 + 35 + v24) & ~v7) + v42) = *(unsigned char *)(((v7 + 35 + v25) & ~v7) + v42);
  *(unsigned char *)(v9 + v12) = 1;
LABEL_21:
  uint64_t v37 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v37 + 16))((v12 + *(unsigned __int8 *)(v37 + 80) + 1 + v9) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80), (unint64_t)&v10[v12 + 1 + *(unsigned __int8 *)(v37 + 80)] & ~(unint64_t)*(unsigned __int8 *)(v37 + 80));
  return v5;
}

unint64_t lazy protocol witness table accessor for type NavigationButtonInput and conformance NavigationButtonInput()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput;
  if (!lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput;
  if (!lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput;
  if (!lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput;
  if (!lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput;
  if (!lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationButtonInput and conformance NavigationButtonInput);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<TextInputSuggestionsContext> and conformance StyleContextAcceptsPredicate<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA026AccessibilityRepresentablecD0VGMaTm_0(255, a2, a3, MEMORY[0x1E4F410E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ButtonBehavior.animation.getter()
{
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 64);
  type metadata accessor for ButtonBehavior.StateType();
  type metadata accessor for State();
  if (v1)
  {
    swift_retain();
    State.wrappedValue.getter();
    uint64_t v2 = v1(v4);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v1);
  }
  else
  {
    State.wrappedValue.getter();
    State.wrappedValue.getter();
    State.wrappedValue.getter();
    return static Animation.coreAnimationDefault(duration:)();
  }
  return v2;
}

uint64_t __swift_memcpy3_1(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)uint64_t result = v2;
  return result;
}

uint64_t partial apply for closure #1 in Section<>.internalBody.getter(uint64_t (*a1)(void, void, void, void, void, void, void))
{
  return a1(v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t partial apply for closure #1 in Label.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

__n128 __swift_memcpy25_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>);
    }
  }
}

uint64_t partial apply for closure #2 in Label.body.getter()
{
  return partial apply for closure #1 in Label.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in Label.body.getter);
}

uint64_t closure #2 in Label.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790]();
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v4);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, a2);
}

uint64_t partial apply for closure #1 in Label.body.getter()
{
  return partial apply for closure #1 in Label.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in Label.body.getter);
}

uint64_t partial apply for closure #1 in HelpView.body.getter()
{
  return closure #1 in HelpView.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t closure #1 in HelpView.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790]();
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v4);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, a2);
}

uint64_t partial apply for closure #2 in Section<>.internalBody.getter()
{
  return partial apply for closure #1 in Section<>.internalBody.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #2 in Section<>.internalBody.getter);
}

uint64_t closure #2 in Section<>.internalBody.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Section();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v9 + 48));
  static ViewBuilder.buildExpression<A>(_:)(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a4);
}

uint64_t partial apply for closure #3 in Section<>.internalBody.getter()
{
  return partial apply for closure #1 in Section<>.internalBody.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #3 in Section<>.internalBody.getter);
}

uint64_t partial apply for closure #1 in Section<>.internalBody.getter()
{
  return partial apply for closure #1 in Section<>.internalBody.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #1 in Section<>.internalBody.getter);
}

_WORD *initializeWithCopy for ToolbarButtonStyle.ResolvedBody(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v25 = *(void *)v8;
    uint64_t v26 = *((void *)v8 + 1);
    char v27 = v8[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v8, v26, v27);
    *(void *)uint64_t v7 = v25;
    *((void *)v7 + 1) = v26;
    v7[16] = v27;
    uint64_t v28 = *((void *)v8 + 5);
    long long v29 = *(_OWORD *)(v8 + 24);
    *(_OWORD *)(v7 + 24) = v29;
    *((void *)v7 + 5) = v28;
    id v30 = (id)v29;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v31 = *((void *)v8 + 1);
    *(void *)uint64_t v7 = *(void *)v8;
    *((void *)v7 + 1) = v31;
    goto LABEL_6;
  }
  uint64_t v38 = a3;
  uint64_t v10 = *(void *)v8;
  uint64_t v11 = *((void *)v8 + 1);
  uint64_t v13 = *((void *)v8 + 2);
  uint64_t v12 = *((void *)v8 + 3);
  char v14 = v8[34];
  __int16 v15 = *((_WORD *)v8 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v8, v11, v13, v12, v15, v14);
  *(void *)uint64_t v7 = v10;
  *((void *)v7 + 1) = v11;
  *((void *)v7 + 2) = v13;
  *((void *)v7 + 3) = v12;
  *((_WORD *)v7 + 16) = v15;
  v7[34] = v14;
  uint64_t v16 = *((void *)v8 + 5);
  uint64_t v17 = *((void *)v8 + 6);
  uint64_t v18 = *((void *)v8 + 7);
  uint64_t v19 = *((void *)v8 + 8);
  LOBYTE(v11) = v8[74];
  LOWORD(v13) = *((_WORD *)v8 + 36);
  outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v13, v11);
  *((void *)v7 + 5) = v16;
  *((void *)v7 + 6) = v17;
  *((void *)v7 + 7) = v18;
  *((void *)v7 + 8) = v19;
  *((_WORD *)v7 + 36) = v13;
  v7[74] = v11;
  a3 = v38;
  uint64_t v20 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v21 = &v7[v20];
  char v22 = &v8[v20];
  uint64_t v23 = type metadata accessor for URL();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  uint64_t v24 = type metadata accessor for LinkDestination.Configuration();
  v21[*(int *)(v24 + 20)] = v22[*(int *)(v24 + 20)];
LABEL_7:
  swift_storeEnumTagMultiPayload();
  uint64_t v32 = *(int *)(a3 + 24);
  *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = *(void *)((char *)a2 + v32);
  char v36 = v34[8];
  outlined copy of Environment<Bool>.Content(v35, v36);
  *(void *)uint64_t v33 = v35;
  v33[8] = v36;
  return a1;
}

uint64_t partial apply for closure #1 in LabeledContent<>.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #1 in LabelGroup.body.getter()
{
  return closure #1 in LabelGroup.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t closure #1 in LabelGroup.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790]();
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v4);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, a2);
}

uint64_t partial apply for closure #1 in LabeledContent<>.body.getter()
{
  return partial apply for closure #1 in LabeledContent<>.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in LabeledContent<>.body.getter);
}

uint64_t closure #1 in LabeledContent<>.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790]();
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v4);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, a2);
}

uint64_t partial apply for closure #2 in LabeledContent<>.body.getter()
{
  return partial apply for closure #1 in LabeledContent<>.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in LabeledContent<>.body.getter);
}

uint64_t partial apply for closure #1 in NavigationSplitView.InternalBody.body.getter(uint64_t (*a1)(void, void, void, void, void, void, void))
{
  return a1(v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t type metadata accessor for BorderlessButtonLabelShapeStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in TabView.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TabView.body.getter(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t partial apply for closure #1 in List.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in List.body.getter(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t partial apply for closure #1 in Toggle.body.getter()
{
  return closure #1 in Toggle.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t partial apply for closure #1 in NavigationSplitView.InternalBody.body.getter()
{
  return partial apply for closure #1 in NavigationSplitView.InternalBody.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #1 in NavigationSplitView.InternalBody.body.getter);
}

uint64_t partial apply for closure #3 in NavigationSplitView.InternalBody.body.getter()
{
  return partial apply for closure #1 in NavigationSplitView.InternalBody.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #3 in NavigationSplitView.InternalBody.body.getter);
}

uint64_t partial apply for closure #2 in NavigationSplitView.InternalBody.body.getter()
{
  return partial apply for closure #1 in NavigationSplitView.InternalBody.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #2 in NavigationSplitView.InternalBody.body.getter);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, (void (*)(void))lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>);
}

uint64_t partial apply for closure #1 in NavigationStackStyledCore.NavigationStackRepresentableRoot.body.getter()
{
  return closure #1 in NavigationStackStyledCore.NavigationStackRepresentableRoot.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t partial apply for closure #1 in TextField.body.getter()
{
  return closure #1 in TextField.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t closure #1 in TextField.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TextField();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v7 + 40));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t partial apply for closure #1 in SearchPrimitiveModifier.SearchConfigModifier.body(content:)()
{
  return closure #1 in SearchPrimitiveModifier.SearchConfigModifier.body(content:)();
}

uint64_t getEnumTagSinglePayload for WindowResizability(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

void protocol witness for static PropertyKey.defaultValue.getter in conformance FocusStoreInputKey(_DWORD *a1@<X8>)
{
  *a1 = *MEMORY[0x1E4F4E7A0];
}

id protocol witness for Collection.endIndex.getter in conformance FetchedResults<A>@<X0>(void *a1@<X8>)
{
  id result = FetchedResults.endIndex.getter();
  *a1 = result;
  return result;
}

id FetchedResults.endIndex.getter()
{
  return objc_msgSend(*v0, sel_count);
}

uint64_t getEnumTagSinglePayload for FocusItem(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 60)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 48) & 0xF000000000000007) != 0) {
    int v2 = *(_DWORD *)(a1 + 40) & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t partial apply for closure #3 in WrappedButtonStyleBody.body.getter()
{
  return closure #3 in WrappedButtonStyleBody.body.getter(*(long long **)(v0 + 32));
}

uint64_t partial apply for closure #2 in WrappedButtonStyleBody.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in WrappedButtonStyleBody.body.getter(v1[4], v1[2], v1[3], a1);
}

uint64_t partial apply for closure #2 in ButtonBehavior.body.getter()
{
  return closure #2 in ButtonBehavior.body.getter(v0[4], v0[2], v0[3]);
}

uint64_t destroy for AnyAccessibilityAction(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

unsigned char *initializeWithCopy for AccessibilityLargeContentViewModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t ResolvedScrollBehaviorModifier.MakeBehavior.updateValue()()
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  type metadata accessor for _GraphValue<OnTestViewModifier>(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, MEMORY[0x1E4FBB718]);
  uint64_t OutputValue = AGGraphGetOutputValue();
  ResolvedScrollBehaviorModifier.MakeBehavior.defaultBehavior.getter((uint64_t)v6);
  outlined init with copy of ResolvedScrollBehavior?((uint64_t)v6, (uint64_t)v4);
  if (!v5)
  {
    outlined destroy of ResolvedScrollBehavior?((uint64_t)v4);
    if (OutputValue) {
      return outlined destroy of ResolvedScrollBehavior?((uint64_t)v6);
    }
    goto LABEL_4;
  }
  uint64_t result = outlined destroy of ResolvedScrollBehavior?((uint64_t)v4);
  if (v7)
  {
    AGGraphGetValue();
    char v3 = v2;
    char v8 = *(unsigned char *)AGGraphGetValue();
    char v9 = 0;
    uint64_t v10 = AGCreateWeakAttribute();
    if ((v3 & 1) == 0) {
      return outlined destroy of ResolvedScrollBehavior?((uint64_t)v6);
    }
LABEL_4:
    outlined init with copy of ResolvedScrollBehavior?((uint64_t)v6, (uint64_t)v4);
    AGGraphSetOutputValue();
    outlined destroy of ResolvedScrollBehavior?((uint64_t)v4);
    return outlined destroy of ResolvedScrollBehavior?((uint64_t)v6);
  }
  __break(1u);
  return result;
}

uint64_t specialized static ScrollEnvironmentProperties.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2] || a1[3] != a2[3]) {
    goto LABEL_20;
  }
  outlined init with copy of ResolvedScrollBehavior?((uint64_t)(a1 + 8), (uint64_t)v20);
  outlined init with copy of ResolvedScrollBehavior?((uint64_t)(a2 + 8), (uint64_t)v19);
  outlined init with copy of ResolvedScrollBehavior?((uint64_t)v20, (uint64_t)v12);
  outlined init with copy of ResolvedScrollBehavior?((uint64_t)v19, (uint64_t)&v14);
  if (!v13)
  {
    outlined destroy of ResolvedScrollBehavior?((uint64_t)v19);
    outlined destroy of ResolvedScrollBehavior?((uint64_t)v20);
    if (!*((void *)&v15 + 1))
    {
      outlined destroy of ResolvedScrollBehavior?((uint64_t)v12);
      goto LABEL_11;
    }
LABEL_19:
    outlined destroy of (ResolvedScrollBehavior?, ResolvedScrollBehavior?)((uint64_t)v12);
    goto LABEL_20;
  }
  outlined init with copy of ResolvedScrollBehavior?((uint64_t)v12, (uint64_t)v11);
  if (!*((void *)&v15 + 1))
  {
    outlined destroy of ResolvedScrollBehavior?((uint64_t)v19);
    outlined destroy of ResolvedScrollBehavior?((uint64_t)v20);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v11);
    goto LABEL_19;
  }
  v9[2] = v16;
  v9[3] = v17;
  uint64_t v10 = v18;
  v9[0] = v14;
  v9[1] = v15;
  BOOL v4 = specialized static ResolvedScrollBehavior.== infix(_:_:)((uint64_t)v11, (uint64_t)v9);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v9);
  outlined destroy of ResolvedScrollBehavior?((uint64_t)v19);
  outlined destroy of ResolvedScrollBehavior?((uint64_t)v20);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v11);
  outlined destroy of ResolvedScrollBehavior?((uint64_t)v12);
  if (!v4) {
    goto LABEL_20;
  }
LABEL_11:
  if (a1[80] != a2[80] || a1[81] != a2[81] || a1[82] != a2[82] || *((_DWORD *)a1 + 21) != *((_DWORD *)a2 + 21)) {
    goto LABEL_20;
  }
  int v5 = a1[88];
  int v6 = a2[88];
  if (v5 == 2)
  {
    if (v6 == 2) {
      goto LABEL_24;
    }
LABEL_20:
    char v7 = 0;
    return v7 & 1;
  }
  if (v6 == 2 || ((v6 ^ v5) & 1) != 0) {
    goto LABEL_20;
  }
LABEL_24:
  if (a1[89] != a2[89]) {
    goto LABEL_20;
  }
  char v7 = 0;
  if (a1[96] == a2[96] && *((void *)a1 + 13) == *((void *)a2 + 13) && a1[112] == a2[112] && a1[113] == a2[113])
  {
    char v7 = 0;
    if (a1[120] == a2[120] && *((void *)a1 + 16) == *((void *)a2 + 16) && a1[136] == a2[136] && a1[137] == a2[137])
    {
      if (static EdgeInsets.== infix(_:_:)())
      {
        char v7 = static EdgeInsets.== infix(_:_:)();
        return v7 & 1;
      }
      goto LABEL_20;
    }
  }
  return v7 & 1;
}

uint64_t outlined init with copy of ResolvedScrollBehavior?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ResolvedScrollBehavior?(uint64_t a1)
{
  type metadata accessor for AccessibilityValueStorage?(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t applyNode #1 (start:style:node:transform:) in _LazyLayout_Subviews.applyNodes(from:style:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t *, uint64_t *))
{
  uint64_t v11 = outlined init with copy of _ViewList_Node(a3, (uint64_t)&v24);
  switch(v27)
  {
    case 1:
      uint64_t v12 = *a5;
      int v13 = *((_DWORD *)a5 + 2);
      outlined init with copy of _ViewList_Node(a3, (uint64_t)&v29 + 8);
      uint64_t v14 = *a4;
      int v15 = *((_DWORD *)a5 + 28);
      char v16 = *((unsigned char *)a5 + 116);
      char v17 = *((unsigned char *)a5 + 117);
      unsigned __int8 v18 = *((unsigned char *)a5 + 118);
      uint64_t v28 = v12;
      LODWORD(v29) = v13;
      uint64_t v34 = v14;
      int v35 = v15;
      char v36 = v16;
      char v37 = v17;
      __int16 v38 = v18;
      swift_retain();
      swift_bridgeObjectRetain();
      outlined destroy of _ViewList_Node((uint64_t)&v24);
      goto LABEL_5;
    case 2:
      uint64_t v28 = v24;
      MEMORY[0x1F4188790](v11);
      char v19 = _ViewList_Group.applyNodes(from:style:transform:to:)();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 3:
      uint64_t v20 = *a4;
      uint64_t v21 = *a5;
      int v22 = *((_DWORD *)a5 + 2);
      LODWORD(v28) = v24;
      long long v29 = v25;
      char v30 = v26;
      uint64_t v31 = v20;
      uint64_t v32 = v21;
      int v33 = v22;
      HIBYTE(v38) = 1;
      swift_bridgeObjectRetain();
      swift_retain();
LABEL_5:
      LOBYTE(v24) = 0;
      a6(a1, &v28, &v24);
      outlined destroy of _LazyLayout_Subviews.Node((uint64_t)&v28);
      char v19 = v24 ^ 1;
LABEL_6:
      uint64_t result = v19 & 1;
      break;
    default:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
  }
  return result;
}

uint64_t outlined destroy of _ViewList_Node(uint64_t a1)
{
  return a1;
}

uint64_t closure #1 in _LazyLayout_Subviews.apply(from:style:to:)(uint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5, void (*a6)(uint64_t *, char *))
{
  unint64_t v9 = *a2;
  uint64_t v6 = 0x1000000000000;
  if (!*(unsigned char *)(a5 + 118)) {
    uint64_t v6 = 0;
  }
  uint64_t v7 = 0x10000000000;
  if (!*(unsigned char *)(a5 + 117)) {
    uint64_t v7 = 0;
  }
  return applyNode #1 (start:style:node:transform:section:) in _LazyLayout_Subviews.apply(from:style:to:)(a1, &v9, a3, a4, v7 | v6 | ((unint64_t)*(unsigned __int8 *)(a5 + 116) << 32) | *(unsigned int *)(a5 + 112), (uint64_t *)a5, a6) & 1;
}

uint64_t applyNode #1 (start:style:node:transform:section:) in _LazyLayout_Subviews.apply(from:style:to:)(uint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t *a4, unint64_t a5, uint64_t *a6, void (*a7)(uint64_t *, char *))
{
  unint64_t v27 = a5 & 0x10000000000;
  unint64_t v12 = *a2;
  unint64_t v13 = a5 & 0x1000000000000;
  uint64_t v14 = outlined init with copy of _ViewList_Node(a3, (uint64_t)&v50);
  switch(v55)
  {
    case 1:
      v48[0] = v52;
      v48[1] = v53;
      *(_OWORD *)uint64_t v49 = *(_OWORD *)v54;
      *(void *)&v49[13] = *(void *)&v54[13];
      long long v46 = v50;
      long long v47 = v51;
      uint64_t v15 = *((void *)&v50 + 1);
      if (v12)
      {
        uint64_t v15 = *((void *)&v50 + 1) * (v12 >> 1);
        if ((unsigned __int128)(*((uint64_t *)&v50 + 1) * (__int128)(v12 >> 1)) >> 64 != v15 >> 63) {
          goto LABEL_19;
        }
      }
      if (*a1 >= v15)
      {
        outlined destroy of _ViewList_Sublist((uint64_t)&v46);
        *a1 -= v15;
        goto LABEL_15;
      }
      uint64_t v31 = *a4;
      _ViewList_SublistTransform.apply(sublist:)();
      uint64_t v17 = *((void *)&v46 + 1);
      uint64_t v16 = v46;
      if (*((uint64_t *)&v46 + 1) < (uint64_t)v46) {
        goto LABEL_20;
      }
      if ((void)v46 == *((void *)&v46 + 1))
      {
LABEL_11:
        outlined destroy of _ViewList_Sublist((uint64_t)&v46);
LABEL_15:
        char v23 = 1;
        return v23 & 1;
      }
      unint64_t v29 = HIWORD(v13);
      char v30 = (uint64_t *)v48;
      v27 >>= 40;
      uint64_t v28 = &v33;
      uint64_t v26 = HIDWORD(a5) & 1;
      while (v16 < v17)
      {
        char v45 = 0;
        v35[0] = v47;
        _ViewList_ID.elementID(at:)();
        uint64_t v18 = v32;
        uint64_t v19 = v31;
        outlined init with copy of TableColumnList((uint64_t)v30, (uint64_t)v35);
        uint64_t v20 = *(void *)&v49[8];
        swift_bridgeObjectRetain();
        uint64_t v21 = _ViewList_Sublist.list.getter();
        uint64_t v36 = v19;
        uint64_t v37 = v18;
        uint64_t v38 = v20;
        int v39 = v21;
        char v40 = BYTE4(v21) & 1;
        int v41 = a5;
        char v42 = v26;
        char v43 = v27;
        char v44 = v29;
        uint64_t v22 = *a6;
        LODWORD(v18) = *((_DWORD *)a6 + 2);
        outlined init with copy of _LazyLayout_Subview.Data((uint64_t)v35, (uint64_t)v28);
        uint64_t v31 = v22;
        LODWORD(v32) = v18;
        swift_retain();
        a7(&v31, &v45);
        outlined destroy of _LazyLayout_Subview((uint64_t)&v31);
        outlined destroy of _LazyLayout_Subview.Data((uint64_t)v35);
        if (v45 == 1)
        {
          outlined destroy of _ViewList_Sublist((uint64_t)&v46);
          char v23 = 0;
          return v23 & 1;
        }
        if (v17 == ++v16) {
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    case 2:
      char v30 = &v25;
      uint64_t v31 = v50;
      *(void *)&long long v46 = v12;
      MEMORY[0x1F4188790](v14);
      char v23 = _ViewList_Group.applyNodes(from:style:transform:to:)();
      swift_bridgeObjectRelease();
      return v23 & 1;
    case 3:
      LODWORD(v31) = v50;
      uint64_t v32 = *((void *)&v50 + 1);
      uint64_t v33 = v51;
      char v34 = BYTE8(v51);
      *(void *)&long long v46 = v12;
      MEMORY[0x1F4188790](v14);
      char v23 = _ViewList_Section.applyNodes(from:style:transform:to:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v23 & 1;
    default:
      goto LABEL_21;
  }
}

uint64_t outlined init with copy of _ViewList_Node(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of _LazyLayout_Subview.Data(uint64_t a1)
{
  return a1;
}

uint64_t destroy for _LazyLayout_Subview.Data(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of _LazyLayout_Subview.Data(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for _LazyLayout_Subview.Data(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 75) = *(_DWORD *)(a2 + 75);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined destroy of _ViewList_Sublist(uint64_t a1)
{
  return a1;
}

uint64_t closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  outlined init with copy of _LazyLayout_Subview(a1, (uint64_t)&v20);
  outlined init with copy of _LazyLayout_Subview(a5, (uint64_t)&v18);
  if ((a3 & 1) == 0) {
    goto LABEL_3;
  }
  int v11 = a4 & 1;
  LazyLayoutViewCache.item(data:)((uint64_t)&v21);
  swift_bridgeObjectRetain();
  swift_release();
  _ViewOutputs.layoutComputer.getter();
  swift_bridgeObjectRelease();
  LayoutProxy.init(context:layoutComputer:)();
  LayoutProxy.spacing()();
  AGGraphGetValue();
  LazyLayoutViewCache.item(data:)((uint64_t)&v19);
  swift_bridgeObjectRetain();
  swift_release();
  _ViewOutputs.layoutComputer.getter();
  swift_bridgeObjectRelease();
  LayoutProxy.init(context:layoutComputer:)();
  LayoutProxy.spacing()();
  a2 = Spacing.distanceToSuccessorView(along:layoutDirection:preferring:)();
  char v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v13)
  {
    defaultSpacingValue.getter();
    if (v11) {
      double v17 = v16;
    }
    else {
      double v17 = v15;
    }
    outlined destroy of _LazyLayout_Subview((uint64_t)&v18);
    uint64_t result = outlined destroy of _LazyLayout_Subview((uint64_t)&v20);
    *a6 = v17;
  }
  else
  {
LABEL_3:
    outlined destroy of _LazyLayout_Subview((uint64_t)&v18);
    uint64_t result = outlined destroy of _LazyLayout_Subview((uint64_t)&v20);
    *(void *)a6 = a2;
  }
  return result;
}

uint64_t outlined destroy of _LazyLayout_Subview(uint64_t a1)
{
  return a1;
}

uint64_t destroy for _LazyLayout_Subview(uint64_t a1)
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of _LazyLayout_Subview(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for _LazyLayout_Subview(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = a2 + 16;
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  uint64_t v6 = v5;
  uint64_t v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v5 - 8);
  swift_retain();
  v7(a1 + 16, v4, v6);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 91) = *(_DWORD *)(a2 + 91);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v4, &v7);
  swift_bridgeObjectRelease();
  specialized AccessibilityProperties.subscript.setter(a2);
  specialized AccessibilityProperties.subscript.getter(*a1, &v6);
  return specialized AccessibilityProperties.subscript.setter(v6 & (HIDWORD(v6) | ~HIDWORD(v7)) | v7 & ~HIDWORD(v6) | ((unint64_t)(HIDWORD(v6) | HIDWORD(v7)) << 32));
}

{
  uint64_t v5;
  uint64_t v6;

  specialized AccessibilityProperties.subscript.getter(*a1, &v6);
  specialized AccessibilityProperties.subscript.setter(a2);
  specialized AccessibilityProperties.subscript.getter(*a1, &v5);
  return specialized AccessibilityProperties.subscript.setter(v5 & (HIDWORD(v5) | ~HIDWORD(v6)) | v6 & ~HIDWORD(v5) | ((unint64_t)(HIDWORD(v5) | HIDWORD(v6)) << 32));
}

uint64_t specialized AccessibilityProperties.subscript.setter(unint64_t a1)
{
  int v1 = a1;
  unint64_t v2 = HIDWORD(a1);
  static AccessibilityProperties.VisibilityKey.defaultValue.getter();
  if (v6 == v1 && v7 == v2)
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E4F40AA8], (uint64_t)&v6);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)&v6, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    type metadata accessor for Locale?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
    uint64_t v8 = v4;
    uint64_t v9 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>);
    int v6 = v1;
    int v7 = v2;
    return specialized Dictionary.subscript.setter((uint64_t)&v6, MEMORY[0x1E4F40AA8]);
  }
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40AA8]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)&v9);
    uint64_t v6 = v11;
    uint64_t v7 = v12;
    __swift_project_boxed_opaque_existential_1(&v9, v11);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v13, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *a2 = v9;
  }
  else
  {
    uint64_t v9 = 0;
    char v10 = 1;
    return static AccessibilityProperties.VisibilityKey.defaultValue.getter();
  }
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void, uint64_t);
  uint64_t result;
  uint64_t v10;
  void v11[3];
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(void *)(a1 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40B38]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)v11);
    uint64_t v6 = v12;
    uint64_t v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityCustomAttributes?, MEMORY[0x1E4F41128], v8);
  uint64_t result = swift_dynamicCast();
  char v10 = v11[0];
  if (!result) {
    char v10 = 0;
  }
  *a2 = v10;
  return result;
}

uint64_t specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v6, &v9);
  swift_bridgeObjectRelease();
  specialized AccessibilityProperties.subscript.setter(a2, a3);
  specialized AccessibilityProperties.subscript.getter(*a1, &v8);
  return specialized AccessibilityProperties.subscript.setter(v8 & (*((void *)&v8 + 1) | ~*((void *)&v9 + 1)) | v9 & ~*((void *)&v8 + 1), *((void *)&v8 + 1) | *((void *)&v9 + 1));
}

{
  long long v7;
  long long v8;

  specialized AccessibilityProperties.subscript.getter(*a1, &v8);
  specialized AccessibilityProperties.subscript.setter(a2, a3);
  specialized AccessibilityProperties.subscript.getter(*a1, &v7);
  return specialized AccessibilityProperties.subscript.setter(v7 & (*((void *)&v7 + 1) | ~*((void *)&v8 + 1)) | v8 & ~*((void *)&v7 + 1), *((void *)&v7 + 1) | *((void *)&v8 + 1));
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2)
{
  static AccessibilityProperties.TraitsKey.defaultValue.getter();
  if (v7 == a1 && v8 == a2)
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E4F40BA8], (uint64_t)&v7);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)&v7, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    type metadata accessor for Locale?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>, MEMORY[0x1E4F41090]);
    uint64_t v9 = v5;
    uint64_t v10 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>);
    uint64_t v7 = a1;
    uint64_t v8 = a2;
    return specialized Dictionary.subscript.setter((uint64_t)&v7, MEMORY[0x1E4F40BA8]);
  }
}

{
  uint64_t v5;
  void v6[5];

  if (a1 == 2)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TouchInfoKey, (uint64_t)v6);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTouchInfo?>();
    v6[3] = v5;
    v6[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTouchInfo?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTouchInfo?>);
    v6[0] = a1;
    v6[1] = a2;
    return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)&type metadata for AccessibilityProperties.TouchInfoKey);
  }
}

uint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Locale?(255, a2, a3, MEMORY[0x1E4F41090]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(255, a2, a3, MEMORY[0x1E4F41090]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Locale?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40BA8]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)&v9);
    uint64_t v6 = v11;
    uint64_t v7 = v12;
    __swift_project_boxed_opaque_existential_1(&v9, v11);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v13, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>();
  uint64_t result = swift_dynamicCast();
  if (result)
  {
    *a2 = v9;
  }
  else
  {
    long long v9 = 0uLL;
    char v10 = 1;
    return static AccessibilityProperties.TraitsKey.defaultValue.getter();
  }
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void, uint64_t);
  long long v10;
  long long v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];

  if (*(void *)(a1 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40B98]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)&v10);
    uint64_t v6 = *((void *)&v11 + 1);
    uint64_t v7 = v12;
    __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  unint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80], v8);
  if (swift_dynamicCast()) {
    return outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)&v10, (uint64_t)a2, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
  }
  char v10 = 0u;
  uint64_t v11 = 0u;
  uint64_t v12 = 0;
  char v13 = 1;
  *a2 = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  return outlined destroy of AccessibilityValueStorage??((uint64_t)&v10, (uint64_t (*)(void))type metadata accessor for AccessibilityValueStorage??);
}

uint64_t outlined init with copy of TableColumnList(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v17 = a5;
  uint64_t v18 = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v16);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1, a3, a5);
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of OptionalBinaryInteger(&v16, a4[7] + 40 * a1);
  uint64_t v13 = a4[2];
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    a4[2] = v15;
  }
  return result;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (*(void *)(a1 + 24))
  {
    outlined init with take of OptionalBinaryInteger((long long *)a1, (uint64_t)&v21);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    uint64_t v6 = *((void *)&v22 + 1);
    uint64_t v7 = v23;
    uint64_t v8 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v21, *((uint64_t *)&v22 + 1));
    double v9 = MEMORY[0x1F4188790](v8);
    uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v12 + 16))(v11, v9);
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native, &v20, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
    *uint64_t v3 = v20;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of AnyAccessibilityPropertiesEntry?(a1);
    unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v15)
    {
      unint64_t v16 = v14;
      char v17 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v18 = *v3;
      uint64_t v20 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((v17 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v18 = v20;
      }
      outlined init with take of OptionalBinaryInteger((long long *)(*(void *)(v18 + 56) + 40 * v16), (uint64_t)&v21);
      specialized _NativeDictionary._delete(at:)(v16, v18);
      *uint64_t v3 = v18;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = 0;
      long long v21 = 0u;
      long long v22 = 0u;
    }
    return outlined destroy of AnyAccessibilityPropertiesEntry?((uint64_t)&v21);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v5;
  char v6;
  char v7;
  unint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  uint64_t v3 = v2;
  if (*(unsigned char *)(a1 + 8))
  {
    outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)(a1, (uint64_t (*)(void))type metadata accessor for WeakBox<Swift.AnyObject>?);
    char v5 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    uint64_t v7 = v6;
    if (v6)
    {
      uint64_t v8 = v5;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v10 = *v2;
      uint64_t v13 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v10 = v13;
      }
      outlined init with take of WeakBox<Swift.AnyObject>(*(void *)(v10 + 56) + 8 * v8, (uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4F41720]);
      specialized _NativeDictionary._delete(at:)(v8, v10);
      *uint64_t v3 = v10;
      swift_bridgeObjectRelease();
    }
    else
    {
      char v15 = 0;
    }
    unint64_t v16 = (v7 & 1) == 0;
    return outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)((uint64_t)&v15, (uint64_t (*)(void))type metadata accessor for WeakBox<Swift.AnyObject>?);
  }
  else
  {
    outlined init with take of WeakBox<Swift.AnyObject>(a1, (uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4F41720]);
    uint64_t v11 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v14 = *v2;
    *unint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v15, a2, v11);
    *unint64_t v2 = v14;
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];

  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v10);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    double v9 = *v2;
    *unint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, a2, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v9;
    swift_bridgeObjectRelease();
    char v5 = type metadata accessor for CodingUserInfoKey();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a2, v5);
  }
  else
  {
    uint64_t v7 = MEMORY[0x1E4FBC840] + 8;
    _sypSgWOhTm_1(a1, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v10);
    uint64_t v8 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a2, v8);
    return _sypSgWOhTm_1((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for Any?, v7);
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];

  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v8);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = *v2;
    *unint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, a2, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v7;
    swift_bridgeObjectRelease();
    return outlined destroy of AnyHashable(a2);
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4FBC840] + 8;
    _sypSgWOhTm_1(a1, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v8);
    outlined destroy of AnyHashable(a2);
    return _sypSgWOhTm_1((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for Any?, v6);
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t v7;
  _OWORD v8[2];

  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v8);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v7 = *v2;
    *unint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, a2, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v7;
    swift_release();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4FBC840] + 8;
    _sypSgWOhTm_1(a1, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, v8);
    swift_release();
    return _sypSgWOhTm_1((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for Any?, v6);
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  char v5;
  uint64_t v7;
  char v8;
  unint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[5];
  uint64_t v15;
  char v16;

  uint64_t v3 = v2;
  if (*(unsigned __int8 *)(a1 + 88) == 255)
  {
    _sypSgWOhTm_1(a1, &lazy cache variable for type metadata for NavigationDestinationPresentation?, (uint64_t)&type metadata for NavigationDestinationPresentation);
    uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v8)
    {
      double v9 = v7;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v11 = *v2;
      uint64_t v13 = *v3;
      *uint64_t v3 = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        uint64_t v11 = v13;
      }
      outlined init with take of NavigationDestinationPresentation(*(void *)(v11 + 56) + 96 * v9, (uint64_t)v14);
      specialized _NativeDictionary._delete(at:)(v9, v11);
      *uint64_t v3 = v11;
      swift_bridgeObjectRelease();
    }
    else
    {
      char v15 = 0;
      memset(v14, 0, sizeof(v14));
      unint64_t v16 = -1;
    }
    return _sypSgWOhTm_1((uint64_t)v14, &lazy cache variable for type metadata for NavigationDestinationPresentation?, (uint64_t)&type metadata for NavigationDestinationPresentation);
  }
  else
  {
    outlined init with take of NavigationDestinationPresentation(a1, (uint64_t)v14);
    char v5 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = *v2;
    *unint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v14, a2, v5);
    *unint64_t v2 = v12;
    return swift_bridgeObjectRelease();
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  long long v7[2];

  if (*(void *)(a1 + 24))
  {
    outlined init with take of OptionalBinaryInteger((long long *)a1, (uint64_t)v7);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v2;
    *unint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v7, a2, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v6;
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of LocationBasedSensoryFeedback?(a1, (unint64_t *)&lazy cache variable for type metadata for CommandAction?, (unint64_t *)&lazy cache variable for type metadata for CommandAction);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v7);
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for CommandAction?, (unint64_t *)&lazy cache variable for type metadata for CommandAction);
  }
}

{
  uint64_t *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  unsigned char v7[16];

  if (*(unsigned char *)(a1 + 8))
  {
    outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)(a1, (uint64_t (*)(void))type metadata accessor for WeakBox<PlatformDocument>?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v7);
    outlined destroy of IdentifiedDocumentGroupConfiguration(a2);
    return outlined destroy of (key: Namespace.ID, value: NavigationDestinationPresentation)((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for WeakBox<PlatformDocument>?);
  }
  else
  {
    outlined init with take of WeakBox<PlatformDocument>(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for WeakBox<PlatformDocument>);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = *v2;
    *unint64_t v2 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v7, a2, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v6;
    swift_bridgeObjectRelease();
    return outlined destroy of IdentifiedDocumentGroupConfiguration(a2);
  }
}

uint64_t outlined init with take of OptionalBinaryInteger(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v32);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(boxed_opaque_existential_1, a1, a5);
  uint64_t v13 = (void *)*a4;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a3 & 1) != 0)
  {
LABEL_7:
    long long v21 = (void *)*a4;
    if (v19)
    {
LABEL_8:
      uint64_t v22 = v21[7] + 40 * v15;
      __swift_destroy_boxed_opaque_existential_1(v22);
      return outlined init with take of OptionalBinaryInteger(&v32, v22);
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a3 & 1);
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v15 = v24;
  long long v21 = (void *)*a4;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  uint64_t v26 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v32, v33);
  double v27 = MEMORY[0x1F4188790](v26);
  unint64_t v29 = (char *)&v31 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v30 + 16))(v29, v27);
  specialized _NativeDictionary._insert(at:key:value:)(v15, a2, (uint64_t)v29, v21, a5, a6);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::UInt v4;
  Swift::UInt v5;
  Swift::Int v6;
  uint64_t vars8;

  long long v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v4 = *(unsigned __int8 *)(a1 + 16);
  char v5 = *(void *)(a1 + 24);
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  if (v4 == 6)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v4);
    Hasher._combine(_:)(v5);
  }
  Hasher._combine(_:)(*(unsigned char *)(a1 + 32) & 1);
  uint64_t v6 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v6);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  unint64_t v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)(a1 + 8));
  uint64_t v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::UInt v2;
  Swift::UInt v3;
  Swift::Int v4;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Hasher._combine(_:)(*(void *)a1);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 16);
  long long v3 = *(void *)(a1 + 24);
  Hasher._combine(_:)(*(void *)(a1 + 8));
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(*(void *)(a1 + 32));
  Hasher._combine(_:)(*(unsigned char *)(a1 + 40) & 1);
  unint64_t v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  Swift::Int v2;
  uint64_t vars8;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  unsigned char v4[48];
  unsigned char v5[48];

  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  _sypSgWOcTm_1(a1 + 40, (uint64_t)v5, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  if (v5[40] == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v5, (uint64_t)v4);
    Hasher._combine(_:)(1u);
    ToolbarItemPlacement.Role.hash(into:)();
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v4);
  }
  uint64_t v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for UUID();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x1E4F27990];
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  long long v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x1E4F27990], &lazy protocol witness table cache variable for type UUID and conformance UUID, v2, MEMORY[0x1E4F279B0]);
}

{
  uint64_t v2;

  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  uint64_t v2 = v1;
  unint64_t v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (unint64_t *)&lazy cache variable for type metadata for UINavigationController);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  uint64_t v2 = v1;
  unint64_t v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, &lazy cache variable for type metadata for UIDragItem);
}

{
  uint64_t v2;
  uint64_t vars8;

  type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  if (*(unsigned char *)(a1 + 32))
  {
    Hasher._combine(_:)(1uLL);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
  }
  else
  {
    Hasher._combine(_:)(0);
    swift_bridgeObjectRetain();
  }
  String.hash(into:)();
  outlined release of TableColumnCustomizationID(a1);
  uint64_t v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(a1 + 40));
  uint64_t v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  uint64_t v2 = v1;
  unint64_t v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  type metadata accessor for CommandGroupPlacement(0);
  UUID.hash(into:)();
  uint64_t v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  uint64_t vars8;

  Hasher.init(_seed:)();
  long long v3 = *(void *)(a1 + 104);
  uint64_t v2 = *(void *)(a1 + 112);
  if (*(unsigned char *)(a1 + 120))
  {
    Hasher._combine(_:)(*(void *)(a1 + 104));
    Hasher._combine(_:)(v2);
  }
  else
  {
    swift_bridgeObjectRetain();
    String.hash(into:)();
    outlined consume of SceneID(v3, v2, 0);
  }
  unint64_t v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t v2;

  type metadata accessor for PartialKeyPath<UISplitViewController>(0, (unint64_t *)&lazy cache variable for type metadata for PartialKeyPath<UISplitViewController>, &lazy cache variable for type metadata for UISplitViewController, 0x1E4FB1C48, MEMORY[0x1E4FBBAD8]);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::Int v2;
  uint64_t vars8;

  Hasher.init(_seed:)();
  Selector.hash(into:)();
  uint64_t v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  Swift::UInt v2;
  Swift::UInt v3;
  uint64_t v4;
  Swift::Int v5;
  unsigned char v7[16];
  void v8[2];

  Hasher.init(_seed:)();
  uint64_t v2 = *(void *)(a1 + 16);
  long long v3 = *(unsigned __int8 *)(a1 + 24);
  unint64_t v4 = MEMORY[0x1E4FBB1A0];
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_1(a1 + 48, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0]);
  String.hash(into:)();
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_1((uint64_t)v7, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for String?, v4);
  if (v8[1]) {
    String.hash(into:)();
  }
  char v5 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)((uint64_t *)a1, v5);
}

{
  void (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for UTType();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x1E4FBCEA8];
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
  long long v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, MEMORY[0x1E4FBCEA8], (unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, v2, MEMORY[0x1E4FBCEC0]);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  uint64_t v2 = v1;
  unint64_t v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4, (unint64_t *)&lazy cache variable for type metadata for NSFileWrapper);
}

{
  Swift::UInt v2;
  Swift::Int v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;
  char v9;

  Hasher.init(_seed:)();
  outlined init with copy of TableRowID(a1, (uint64_t)v7);
  if (v9)
  {
    v5[0] = v7[0];
    v5[1] = v7[1];
    uint64_t v6 = v8;
    Hasher._combine(_:)(1uLL);
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v5);
  }
  else
  {
    uint64_t v2 = *(void *)&v7[0];
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v2);
  }
  long long v3 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      unint64_t result = (result + 1) & v8;
      if (((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0
        && *(void *)(v7 + 8 * result) != a1)
      {
        for (unint64_t result = (result + 1) & v8;
              ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
              unint64_t result = (result + 1) & v8)
        {
          if (*(void *)(v7 + 8 * result) == a1) {
            break;
          }
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _OWORD v9[2];
  uint64_t v10;
  unsigned char v11[40];
  unsigned char v12[24];
  uint64_t v13;
  long long v14;
  long long v15;
  uint64_t v16;
  unsigned char v17[48];

  long long v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      outlined init with copy of ToolbarPlacement.Role(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v17);
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v17, (uint64_t)v12);
      outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v14);
      switch(v13)
      {
        case 0:
          if (*((void *)&v15 + 1)) {
            goto LABEL_19;
          }
          goto LABEL_25;
        case 1:
          if (*((void *)&v15 + 1) == 1) {
            goto LABEL_25;
          }
          goto LABEL_19;
        case 2:
          if (*((void *)&v15 + 1) == 2) {
            goto LABEL_25;
          }
          goto LABEL_19;
        case 3:
          if (*((void *)&v15 + 1) == 3) {
            goto LABEL_25;
          }
          goto LABEL_19;
        case 4:
          if (*((void *)&v15 + 1) == 4) {
            goto LABEL_25;
          }
          goto LABEL_19;
        case 5:
          if (*((void *)&v15 + 1) == 5) {
            goto LABEL_25;
          }
          goto LABEL_19;
        case 6:
          if (*((void *)&v15 + 1) != 6) {
            goto LABEL_19;
          }
          goto LABEL_25;
        default:
          outlined init with copy of ToolbarPlacement.Role((uint64_t)v12, (uint64_t)v11);
          if (*((void *)&v15 + 1) >= 7uLL)
          {
            v9[0] = v14;
            v9[1] = v15;
            uint64_t v10 = v16;
            uint64_t v7 = MEMORY[0x18C1174E0](v11, v9);
            outlined destroy of AnyHashable((uint64_t)v9);
            outlined destroy of AnyHashable((uint64_t)v11);
            if (v7)
            {
LABEL_25:
              outlined destroy of ToolbarPlacement.Role((uint64_t)v12);
              outlined destroy of ToolbarPlacement.Role((uint64_t)v17);
              return v4;
            }
            outlined destroy of ToolbarPlacement.Role((uint64_t)v12);
          }
          else
          {
            outlined destroy of AnyHashable((uint64_t)v11);
LABEL_19:
            outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role));
          }
          outlined destroy of ToolbarPlacement.Role((uint64_t)v17);
          uint64_t v4 = (v4 + 1) & v6;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _OWORD v9[2];
  uint64_t v10;
  unsigned char v11[40];
  unsigned char v12[24];
  uint64_t v13;
  long long v14;
  long long v15;
  uint64_t v16;
  unsigned char v17[48];

  long long v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      outlined init with copy of Toolbar.BarLocation(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v17);
      outlined init with copy of Toolbar.BarLocation((uint64_t)v17, (uint64_t)v12);
      outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v14);
      switch(v13)
      {
        case 0:
          if (*((void *)&v15 + 1)) {
            goto LABEL_35;
          }
          goto LABEL_41;
        case 1:
          if (*((void *)&v15 + 1) == 1) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 2:
          if (*((void *)&v15 + 1) == 2) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 3:
          if (*((void *)&v15 + 1) == 3) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 4:
          if (*((void *)&v15 + 1) == 4) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 5:
          if (*((void *)&v15 + 1) == 5) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 6:
          if (*((void *)&v15 + 1) == 6) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 7:
          if (*((void *)&v15 + 1) == 7) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 8:
          if (*((void *)&v15 + 1) == 8) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 9:
          if (*((void *)&v15 + 1) == 9) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 10:
          if (*((void *)&v15 + 1) == 10) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 11:
          if (*((void *)&v15 + 1) == 11) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 12:
          if (*((void *)&v15 + 1) == 12) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 13:
          if (*((void *)&v15 + 1) == 13) {
            goto LABEL_41;
          }
          goto LABEL_35;
        case 14:
          if (*((void *)&v15 + 1) != 14) {
            goto LABEL_35;
          }
          goto LABEL_41;
        default:
          outlined init with copy of Toolbar.BarLocation((uint64_t)v12, (uint64_t)v11);
          if (*((void *)&v15 + 1) >= 0xFuLL)
          {
            v9[0] = v14;
            v9[1] = v15;
            uint64_t v10 = v16;
            uint64_t v7 = MEMORY[0x18C1174E0](v11, v9);
            outlined destroy of AnyHashable((uint64_t)v9);
            outlined destroy of AnyHashable((uint64_t)v11);
            if (v7)
            {
LABEL_41:
              outlined destroy of Toolbar.BarLocation((uint64_t)v12);
              outlined destroy of Toolbar.BarLocation((uint64_t)v17);
              return v4;
            }
            outlined destroy of Toolbar.BarLocation((uint64_t)v12);
          }
          else
          {
            outlined destroy of AnyHashable((uint64_t)v11);
LABEL_35:
            outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
          }
          outlined destroy of Toolbar.BarLocation((uint64_t)v17);
          uint64_t v4 = (v4 + 1) & v6;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = ~v4;
    do
    {
      uint64_t v13 = *(void *)(v2 + 48) + 48 * result;
      if (*(void *)v13 == *(void *)a1)
      {
        char v14 = *(void *)(v13 + 16);
        unint64_t v15 = *(unsigned __int8 *)(v13 + 32);
        uint64_t v16 = *(void *)(a1 + 16);
        if (v14 == 6)
        {
          if (v16 != 6) {
            goto LABEL_13;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(v13 + 8);
          uint64_t v8 = *(void *)(v13 + 24);
          double v9 = (v16 ^ v14);
          if (v16 == 6 || v7 != *(void *)(a1 + 8) || v9 != 0 || v8 != *(void *)(a1 + 24)) {
            goto LABEL_13;
          }
        }
        if (v15 == (*(unsigned char *)(a1 + 32) & 1)) {
          return result;
        }
      }
LABEL_13:
      unint64_t result = (result + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  unsigned char v9[40];

  long long v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      uint64_t v7 = MEMORY[0x18C1174E0](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void v10[2];

  long long v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of HashableWeakBox<UIViewController>(*(void *)(v2 + 48) + 16 * v4, (uint64_t)v10);
      uint64_t v7 = v10[1];
      uint64_t v8 = *(void *)(a1 + 8);
      outlined destroy of HashableWeakBox<UIViewController>((uint64_t)v10);
      if (v7 == v8) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;

  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = ~v4;
    do
    {
      uint64_t v7 = *(void *)(v2 + 48) + 48 * result;
      if (*(void *)v7 == *(void *)a1)
      {
        uint64_t v8 = *(void *)(v7 + 8) == *(void *)(a1 + 8)
          && *(unsigned __int8 *)(v7 + 16) == *(unsigned __int8 *)(a1 + 16);
        double v9 = v8 && *(void *)(v7 + 24) == *(void *)(a1 + 24);
        if (v9 && *(void *)(v7 + 32) == *(void *)(a1 + 32) && *(unsigned char *)(v7 + 40) == (*(unsigned char *)(a1 + 40) & 1)) {
          break;
        }
      }
      unint64_t result = (result + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  long long v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    uint64_t v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      uint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          uint64_t v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            uint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned char v10[48];
  unsigned char v11[48];
  unsigned char v12[48];
  unsigned char v13[40];
  unsigned __int8 v14;
  unsigned char v15[48];
  unsigned char v16[40];
  uint64_t v17;

  long long v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
    return v4;
  }
  uint64_t v6 = ~v3;
  uint64_t v7 = a1 + 40;
  while (1)
  {
    outlined init with copy of ToolbarStorage.Entry.ID(*(void *)(v2 + 48) + 88 * v4, (uint64_t)v16);
    if ((MEMORY[0x18C1174E0](v16, a1) & 1) == 0) {
      goto LABEL_5;
    }
    _sypSgWOcTm_1(v7, (uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    _sypSgWOcTm_1((uint64_t)&v17, (uint64_t)v12, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    _sypSgWOcTm_1((uint64_t)v15, (uint64_t)v13, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    if (v12[40] == 255) {
      break;
    }
    _sypSgWOcTm_1((uint64_t)v12, (uint64_t)v11, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    if (v14 == 255)
    {
      _sypSgWOhTm_2((uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v11);
      goto LABEL_4;
    }
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v13, (uint64_t)v10);
    uint64_t v8 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v11, (uint64_t)v10);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v10);
    _sypSgWOhTm_2((uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v11);
    _sypSgWOhTm_2((uint64_t)v12, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
    if (v8) {
      goto LABEL_14;
    }
LABEL_5:
    outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v16);
    uint64_t v4 = (v4 + 1) & v6;
    if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
      return v4;
    }
  }
  _sypSgWOhTm_2((uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
  if (v14 != 255)
  {
LABEL_4:
    outlined destroy of SystemSegmentItem((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?));
    goto LABEL_5;
  }
  _sypSgWOhTm_2((uint64_t)v12, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
LABEL_14:
  outlined destroy of ToolbarStorage.Entry.ID((uint64_t)v16);
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t, __n128);
  void (*v14)(char *, unint64_t, uint64_t, __n128);
  uint64_t v15;
  void (**v16)(char *, uint64_t);
  uint64_t v17;
  char v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v22 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  v6.n128_f64[0] = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = v2;
  double v9 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = a2 & ~v9;
  long long v21 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    char v14 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v13 = v14;
    unint64_t v15 = *(void *)(v12 + 56);
    uint64_t v16 = (void (**)(char *, uint64_t))(v12 - 8);
    do
    {
      BOOL v17 = v12;
      v13(v8, *(void *)(v23 + 48) + v15 * v10, v4, v6);
      uint64_t v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v16)(v8, v4);
      if (v18) {
        break;
      }
      uint64_t v10 = (v10 + 1) & v11;
      uint64_t v12 = v17;
    }
    while (((*(void *)(v21 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  unsigned char v19[40];
  void v20[4];
  char v21;
  void v22[4];
  char v23;

  long long v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = ~v4;
    uint64_t v7 = *(void *)(v2 + 48);
    outlined init with take of TableColumnCustomizationID.Base(a1, (uint64_t)v19);
    do
    {
      uint64_t v8 = (uint64_t *)(v7 + 40 * v5);
      double v9 = *v8;
      uint64_t v10 = v8[1];
      if (v8[4])
      {
        uint64_t v11 = v8[2];
        uint64_t v12 = v8[3];
        outlined init with take of TableColumnCustomizationID.Base((uint64_t)v19, (uint64_t)v20);
        if (v21)
        {
          uint64_t v13 = v20[2];
          char v14 = v20[3];
          unint64_t v15 = v9 == v20[0] && v10 == v20[1];
          if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            if (v11 == v13 && v12 == v14) {
              return v5;
            }
LABEL_3:
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              return v5;
            }
          }
        }
      }
      else
      {
        outlined init with take of TableColumnCustomizationID.Base((uint64_t)v19, (uint64_t)v22);
        if ((v23 & 1) == 0)
        {
          if (v9 == v22[0] && v10 == v22[1]) {
            return v5;
          }
          goto LABEL_3;
        }
      }
      uint64_t v5 = (v5 + 1) & v6;
    }
    while (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;

  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = ~v4;
    do
    {
      if (*(void *)(*(void *)(v2 + 48) + 8 * result) == a1) {
        break;
      }
      unint64_t result = (result + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  void v8[6];

  long long v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      outlined init with copy of AccessibilityRelationshipScope.Key(*(void *)(v2 + 48) + 48 * v4, (uint64_t)v8);
      if ((MEMORY[0x18C1174E0](v8, a1) & 1) != 0 && v8[5] == *(void *)(a1 + 40)) {
        break;
      }
      outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v8);
      uint64_t v4 = (v4 + 1) & v6;
      if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
        return v4;
      }
    }
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v8);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;

  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = ~v4;
    do
    {
      uint64_t v7 = (int *)(*(void *)(v2 + 48) + 8 * result);
      double v9 = *v7;
      uint64_t v8 = v7[1];
      if (v9 == a1 && v8 == HIDWORD(a1)) {
        break;
      }
      unint64_t result = (result + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;

  uint64_t v4 = type metadata accessor for CommandGroupPlacementBox(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  double v9 = a2 & ~v8;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    type metadata accessor for CommandGroupPlacement(0);
    uint64_t v11 = *(void *)(v5 + 72);
    do
    {
      outlined init with copy of SystemSegmentItem(*(void *)(v2 + 48) + v11 * v9, (uint64_t)v7, type metadata accessor for CommandGroupPlacementBox);
      uint64_t v12 = static UUID.== infix(_:_:)();
      outlined destroy of SystemSegmentItem((uint64_t)v7, type metadata accessor for CommandGroupPlacementBox);
      if (v12) {
        break;
      }
      double v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  Swift::String v19;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned char v27[104];
  uint64_t v28;
  uint64_t v29;
  char v30;

  long long v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
    return v5;
  }
  uint64_t v6 = v2;
  uint64_t v8 = ~v4;
  while (1)
  {
    outlined init with copy of IdentifiedDocumentGroupConfiguration(*(void *)(v6 + 48) + (v5 << 7), (uint64_t)v27);
    char v14 = v28;
    uint64_t v12 = v29;
    uint64_t v16 = *(void *)(a1 + 104);
    unint64_t v15 = *(void *)(a1 + 112);
    if ((v30 & 1) == 0) {
      break;
    }
    if ((*(unsigned char *)(a1 + 120) & 1) == 0)
    {
      uint64_t v23 = _typeName(_:qualified:)();
      char v25 = v9;
      v10._countAndFlagsBits = 45;
      v10._object = (void *)0xE100000000000000;
      String.append(_:)(v10);
      v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      uint64_t v12 = v25;
      swift_bridgeObjectRetain();
      if (v23 == v16) {
        goto LABEL_4;
      }
LABEL_5:
      uint64_t v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_6:
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v27);
      if (v13) {
        return v5;
      }
      goto LABEL_7;
    }
    if (v28 == v16)
    {
      long long v21 = v29;
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v27);
      if (v21 == v15) {
        return v5;
      }
    }
    else
    {
      outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v27);
    }
LABEL_7:
    uint64_t v5 = (v5 + 1) & v8;
    if (((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) == 0) {
      return v5;
    }
  }
  if ((*(unsigned char *)(a1 + 120) & 1) == 0)
  {
    if (v28 == v16 && v29 == v15) {
      goto LABEL_24;
    }
    uint64_t v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  unint64_t v24 = _typeName(_:qualified:)();
  uint64_t v26 = v17;
  v18._countAndFlagsBits = 45;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  unint64_t v15 = v26;
  if (v14 != v24) {
    goto LABEL_5;
  }
LABEL_4:
  if (v12 != v15) {
    goto LABEL_5;
  }
  swift_bridgeObjectRelease_n();
LABEL_24:
  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v27);
  return v5;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  long long v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    type metadata accessor for PartialKeyPath<UISplitViewController>(0, (unint64_t *)&lazy cache variable for type metadata for PartialKeyPath<UISplitViewController>, &lazy cache variable for type metadata for UISplitViewController, 0x1E4FB1C48, MEMORY[0x1E4FBBAD8]);
    do
    {
      if (dispatch thunk of static Equatable.== infix(_:_:)()) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;

  long long v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0
    && (static Selector.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v6 = ~v4;
    for (i = (i + 1) & v6; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v6)
    {
      if (static Selector.== infix(_:_:)()) {
        break;
      }
    }
  }
  return i;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _OWORD v9[2];
  uint64_t v10;
  void v11[6];
  unsigned char v12[48];
  _OWORD v13[2];
  uint64_t v14;
  char v15;
  unsigned char v16[56];

  long long v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of TableRowID(*(void *)(v2 + 48) + 48 * v4, (uint64_t)v16);
      outlined init with copy of TableRowID((uint64_t)v16, (uint64_t)v12);
      outlined init with copy of TableRowID(a1, (uint64_t)v13);
      if (v12[40])
      {
        outlined init with copy of TableRowID((uint64_t)v12, (uint64_t)v11);
        if (v15)
        {
          v9[0] = v13[0];
          v9[1] = v13[1];
          uint64_t v10 = v14;
          uint64_t v7 = MEMORY[0x18C1174E0](v11, v9);
          outlined destroy of AnyHashable((uint64_t)v9);
          outlined destroy of AnyHashable((uint64_t)v11);
          if (v7) {
            goto LABEL_14;
          }
LABEL_12:
          outlined destroy of TableRowID((uint64_t)v12);
          goto LABEL_5;
        }
        outlined destroy of AnyHashable((uint64_t)v11);
      }
      else
      {
        outlined init with copy of TableRowID((uint64_t)v12, (uint64_t)v11);
        if ((v15 & 1) == 0)
        {
          if (v11[0] == *(void *)&v13[0])
          {
LABEL_14:
            outlined destroy of TableRowID((uint64_t)v12);
            outlined destroy of TableRowID((uint64_t)v16);
            return v4;
          }
          goto LABEL_12;
        }
      }
      outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for (TableRowID, TableRowID));
LABEL_5:
      outlined destroy of TableRowID((uint64_t)v16);
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t initializeBufferWithCopyOfBuffer for SPRotation3D(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

Swift::Void __swiftcall _UIHostingView.requestUpdate(after:)(Swift::Double after)
{
  _UIHostingView.base.getter();
  UIHostingViewBase.requestUpdate(after:)(after);

  swift_release();
}

Swift::Void __swiftcall UIHostingViewBase.requestUpdate(after:)(Swift::Double after)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&aBlock[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Update.lock()();
  if (after != 0.0
    || (uint64_t v12 = *(void *)(v1 + 64), swift_beginAccess(), *(unsigned char *)(v12 + 168) == 1)
    && (uint64_t v13 = *(void *)(v2 + 176)) != 0
    && (double v14 = *(double *)(v13 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate),
        static Time.infinity.getter(),
        v14 < aBlock[0]))
  {
    UIAnimationDragCoefficient();
    double v16 = v15 * after;
    if (v16 >= 0.25) {
      UIHostingViewBase.startUpdateTimer(delay:)(v16);
    }
    else {
      UIHostingViewBase.startDisplayLink(delay:)(v16);
    }
  }
  else if (objc_msgSend(self, sel_isMainThread))
  {
    UIHostingViewBase.requestImmediateUpdate()();
  }
  else
  {
    type metadata accessor for OS_dispatch_queue();
    BOOL v17 = (void *)static OS_dispatch_queue.main.getter();
    uint64_t v18 = swift_allocObject();
    swift_weakInit();
    *(void *)&aBlock[4] = partial apply for closure #1 in UIHostingViewBase.requestUpdate(after:);
    *(void *)&aBlock[5] = v18;
    *(void *)&aBlock[0] = MEMORY[0x1E4F143A8];
    *(void *)&aBlock[1] = 1107296256;
    *(void *)&aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    *(void *)&aBlock[3] = &block_descriptor_26;
    char v19 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    *(void *)&aBlock[0] = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x1E4FBCB00]);
    type metadata accessor for _ContiguousArrayStorage<NSNotificationName>(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x18C116870](0, v11, v7, v19);
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  static Update.unlock()();
}

Swift::Void __swiftcall UIHostingViewBase.requestImmediateUpdate()()
{
  uint64_t v1 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&aBlock[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x18C119DF0](v0 + 16, v7);
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for ()?);
    static Update.locked<A>(_:)();
    if (UIHostingViewBase.updatesWillBeVisible.getter())
    {
      objc_msgSend(v11, sel_setNeedsLayout);
      static CoreTesting.needsRender.setter();
LABEL_5:

      return;
    }
    if (*(unsigned char *)(v0 + 217)) {
      goto LABEL_5;
    }
    *(unsigned char *)(v0 + 217) = 1;
    type metadata accessor for OS_dispatch_queue();
    uint64_t v15 = static OS_dispatch_queue.main.getter();
    uint64_t v12 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = partial apply for closure #1 in UIHostingViewBase.requestImmediateUpdate();
    aBlock[5] = v12;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_16;
    uint64_t v13 = _Block_copy(aBlock);
    swift_release();
    static DispatchQoS.unspecified.getter();
    aBlock[0] = MEMORY[0x1E4FBC860];
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x1E4FBCB00]);
    type metadata accessor for _ContiguousArrayStorage<NSNotificationName>(0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E4FBCB00], MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    double v14 = (void *)v15;
    MEMORY[0x18C116870](0, v9, v4, v13);

    _Block_release(v13);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

void _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI25AccessibilityValueStorageVSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t UIHostingViewBase.updatesWillBeVisible.getter()
{
  uint64_t result = MEMORY[0x18C119DF0](v0 + 16);
  if (result)
  {
    uint64_t v2 = (void *)result;
    id v3 = objc_msgSend((id)result, sel_window);

    if (v3
      && (id v4 = objc_msgSend(v3, sel__windowHostingScene), v3, v4)
      && (v4, (*(unsigned char *)(v0 + 240) & 1) == 0)
      && (*(unsigned char *)(v0 + 220) & 1) == 0)
    {
      if (*(void *)(v0 + 232) < 2uLL || (*(unsigned char *)(v0 + 221) & 1) != 0) {
        return 1;
      }
      else {
        return *(unsigned __int8 *)(v0 + 223);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>()
{
  if (!lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityTraitSet>)
  {
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    lazy protocol witness table accessor for type UInt64 and conformance UInt64();
    unint64_t v0 = type metadata accessor for AccessibilityNullableOptionSet();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityTraitSet>);
    }
  }
}

void type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>()
{
  if (!lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityVisibility>)
  {
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    lazy protocol witness table accessor for type UInt32 and conformance UInt32();
    unint64_t v0 = type metadata accessor for AccessibilityNullableOptionSet();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityNullableOptionSet<AccessibilityVisibility>);
    }
  }
}

uint64_t specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(uint64_t a1, char a2)
{
  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, AnyAccessibilityPropertiesEntry>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = v3;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v17 >= v12) {
          goto LABEL_35;
        }
        unint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_35;
          }
          unint64_t v18 = v31[v8];
          if (!v18)
          {
            int64_t v8 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_35;
            }
            unint64_t v18 = v31[v8];
            if (!v18)
            {
              int64_t v8 = v17 + 3;
              if (v17 + 3 >= v12)
              {
LABEL_35:
                if ((a2 & 1) == 0)
                {
                  uint64_t result = swift_release();
                  id v3 = v30;
                  goto LABEL_42;
                }
                uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
                if (v29 >= 64) {
                  bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v31 = -1 << v29;
                }
                id v3 = v30;
                *(void *)(v5 + 16) = 0;
                break;
              }
              unint64_t v18 = v31[v8];
              for (int64_t i = v17 + 3; !v18; ++i)
              {
                int64_t v8 = i + 1;
                if (__OFADD__(i, 1)) {
                  goto LABEL_44;
                }
                if (v8 >= v12) {
                  goto LABEL_35;
                }
                unint64_t v18 = v31[v8];
              }
            }
          }
        }
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      long long v21 = (long long *)(*(void *)(v5 + 56) + 40 * v16);
      if (a2) {
        outlined init with take of OptionalBinaryInteger(v21, (uint64_t)v32);
      }
      else {
        outlined init with copy of TableColumnList((uint64_t)v21, (uint64_t)v32);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(void *)(*(void *)(v7 + 48) + 8 * v14) = v20;
      uint64_t result = outlined init with take of OptionalBinaryInteger(v32, *(void *)(v7 + 56) + 40 * v14);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_42:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  long long v37;
  long long v38;
  uint64_t v39;
  unsigned char v40[48];

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, BarEnvironmentViewModel>, (void (*)(uint64_t))type metadata accessor for BarEnvironmentViewModel, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_51;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  long long v32 = v2;
  uint64_t v33 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      return result;
    }
    if (v17 >= v33) {
      break;
    }
    unint64_t v18 = (void *)(v5 + 64);
    char v19 = *(void *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      uint64_t v13 = v17 + 1;
      if (v17 + 1 >= v33) {
        goto LABEL_44;
      }
      char v19 = *(void *)(v34 + 8 * v13);
      if (!v19)
      {
        uint64_t v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_44:
          swift_release();
          id v3 = v32;
          if ((a2 & 1) == 0) {
            goto LABEL_51;
          }
          goto LABEL_47;
        }
        char v19 = *(void *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            uint64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_53;
            }
            if (v13 >= v33) {
              goto LABEL_44;
            }
            char v19 = *(void *)(v34 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v20;
      }
    }
LABEL_21:
    uint64_t v10 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    long long v21 = *(void *)(v5 + 48) + 40 * v16;
    if (a2)
    {
      outlined init with take of ToolbarPlacement.Role(v21, (uint64_t)v40);
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    }
    else
    {
      outlined init with copy of ToolbarPlacement.Role(v21, (uint64_t)v40);
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
      swift_retain();
    }
    Hasher.init(_seed:)();
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v40, (uint64_t)&v37);
    switch(*((void *)&v38 + 1))
    {
      case 0:
        unint64_t v23 = 0;
        goto LABEL_34;
      case 1:
        unint64_t v23 = 1;
        goto LABEL_34;
      case 2:
        unint64_t v23 = 2;
        goto LABEL_34;
      case 3:
        unint64_t v23 = 3;
        goto LABEL_34;
      case 4:
        unint64_t v23 = 4;
        goto LABEL_34;
      case 5:
        unint64_t v23 = 5;
        goto LABEL_34;
      case 6:
        unint64_t v23 = 7;
LABEL_34:
        Hasher._combine(_:)(v23);
        break;
      default:
        v35[0] = v37;
        v35[1] = v38;
        uint64_t v36 = v39;
        Hasher._combine(_:)(6uLL);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v35);
        break;
    }
    uint64_t result = Hasher._finalize()();
    unint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
    char v25 = result & ~v24;
    unint64_t v26 = v25 >> 6;
    if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      do
      {
        if (++v26 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_52;
        }
        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v26);
      }
      while (v30 == -1);
      unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t result = outlined init with take of ToolbarPlacement.Role((uint64_t)v40, *(void *)(v7 + 48) + 40 * v14);
    *(void *)(*(void *)(v7 + 56) + 8 * v14) = v22;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v32;
  unint64_t v18 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_51;
  }
LABEL_47:
  uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
  if (v31 >= 64) {
    bzero(v18, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v18 = -1 << v31;
  }
  *(void *)(v5 + 16) = 0;
LABEL_51:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<AGAttribute, AGAttribute>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int v35 = a2;
    uint64_t v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    long long v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    int64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
    unint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        int64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        char v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        uint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          uint64_t v20 = v9[v8];
          if (!v20)
          {
            long long v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              id v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                uint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        int64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 4 * v18;
      unint64_t v23 = *(_DWORD *)(*(void *)(v5 + 48) + v22);
      unint64_t v24 = *(_DWORD *)(*(void *)(v5 + 56) + v22);
      uint64_t result = MEMORY[0x18C118330](*(void *)(v7 + 40), v23, 4);
      char v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      BOOL v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            BOOL v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = 4 * v15;
      *(_DWORD *)(*(void *)(v7 + 48) + v16) = v23;
      *(_DWORD *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::UInt32 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  void *v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  long long v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  long long v79;
  unsigned char v80[32];
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  uint64_t v93;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, AlertStorage>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  long long v50 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v48 = (void *)(v5 + 64);
    uint64_t v49 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    long long v47 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
        if (v50) {
          goto LABEL_10;
        }
      }
      else
      {
        unint64_t v23 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v48;
        if (v23 >= v47) {
          goto LABEL_33;
        }
        unint64_t v24 = v48[v23];
        ++v8;
        if (!v24)
        {
          int64_t v8 = v23 + 1;
          if (v23 + 1 >= v47) {
            goto LABEL_33;
          }
          unint64_t v24 = v48[v8];
          if (!v24)
          {
            char v25 = v23 + 2;
            if (v25 >= v47)
            {
LABEL_33:
              if ((v50 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              long long v46 = 1 << *(unsigned char *)(v5 + 32);
              if (v46 >= 64) {
                bzero(v48, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v48 = -1 << v46;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v24 = v48[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v8 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v47) {
                  goto LABEL_33;
                }
                unint64_t v24 = v48[v8];
                ++v25;
                if (v24) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v8 = v25;
          }
        }
LABEL_22:
        unint64_t v11 = (v24 - 1) & v24;
        unint64_t v16 = __clz(__rbit64(v24)) + (v8 << 6);
        if (v50)
        {
LABEL_10:
          int64_t v17 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v16);
          unint64_t v18 = *(void *)(v5 + 56) + 248 * v16;
          char v19 = *(unsigned char *)v18;
          uint64_t v20 = *(void *)(v18 + 16);
          long long v21 = *(unsigned char *)(v18 + 24);
          uint64_t v74 = *(_OWORD *)(v18 + 28);
          uint64_t v54 = *(void *)(v18 + 48);
          long long v51 = *(void *)(v18 + 56);
          long long v52 = *(void *)(v18 + 8);
          long long v53 = *(unsigned char *)(v18 + 64);
          uint64_t v56 = *(unsigned char *)(v18 + 65);
          uint64_t v57 = *(void *)(v18 + 72);
          uint64_t v58 = *(void *)(v18 + 80);
          uint64_t v22 = *(unsigned char *)(v18 + 96);
          uint64_t v62 = *(unsigned char *)(v18 + 97);
          uint64_t v72 = *(void *)(v18 + 104);
          v70 = *(void *)(v18 + 112);
          v68 = *(void *)(v18 + 120);
          unint64_t v66 = *(void *)(v18 + 128);
          uint64_t v64 = *(void *)(v18 + 136);
          uint64_t v60 = *(void *)(v18 + 144);
          uint64_t v61 = *(void *)(v18 + 88);
          char v55 = *(unsigned char *)(v18 + 152);
          v77 = *(void *)(v18 + 168);
          v78 = *(void *)(v18 + 160);
          v75 = *(void *)(v18 + 184);
          uint64_t v76 = *(void *)(v18 + 176);
          uint64_t v73 = *(void *)(v18 + 192);
          uint64_t v71 = *(void *)(v18 + 200);
          v69 = *(void *)(v18 + 208);
          uint64_t v67 = *(void *)(v18 + 216);
          uint64_t v65 = *(void *)(v18 + 224);
          v63 = *(void *)(v18 + 232);
          uint64_t v59 = *(void *)(v18 + 240);
          goto LABEL_24;
        }
      }
      int64_t v17 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v16);
      unint64_t v26 = *(void *)(v5 + 56) + 248 * v16;
      uint64_t v28 = *(_OWORD *)(v26 + 32);
      BOOL v27 = *(_OWORD *)(v26 + 48);
      uint64_t v29 = *(_OWORD *)v26;
      *(_OWORD *)uint64_t v80 = *(_OWORD *)(v26 + 16);
      *(_OWORD *)&v80[16] = v28;
      v79 = v29;
      uint64_t v30 = *(_OWORD *)(v26 + 112);
      long long v32 = *(_OWORD *)(v26 + 64);
      uint64_t v31 = *(_OWORD *)(v26 + 80);
      uint64_t v84 = *(_OWORD *)(v26 + 96);
      uint64_t v85 = v30;
      uint64_t v82 = v32;
      uint64_t v83 = v31;
      uint64_t v33 = *(_OWORD *)(v26 + 176);
      int v35 = *(_OWORD *)(v26 + 128);
      uint64_t v34 = *(_OWORD *)(v26 + 144);
      v88 = *(_OWORD *)(v26 + 160);
      uint64_t v89 = v33;
      uint64_t v86 = v35;
      uint64_t v87 = v34;
      uint64_t v37 = *(_OWORD *)(v26 + 208);
      uint64_t v36 = *(_OWORD *)(v26 + 224);
      uint64_t v38 = *(_OWORD *)(v26 + 192);
      v93 = *(void *)(v26 + 240);
      uint64_t v91 = v37;
      uint64_t v92 = v36;
      uint64_t v90 = v38;
      uint64_t v81 = v27;
      v77 = *((void *)&v88 + 1);
      v78 = v88;
      v75 = *((void *)&v89 + 1);
      uint64_t v76 = v89;
      uint64_t v67 = *((void *)&v37 + 1);
      v63 = *((void *)&v36 + 1);
      uint64_t v65 = v36;
      uint64_t v59 = v93;
      uint64_t v72 = *((void *)&v84 + 1);
      uint64_t v73 = v38;
      v70 = v85;
      uint64_t v71 = *((void *)&v38 + 1);
      v68 = *((void *)&v85 + 1);
      v69 = v37;
      uint64_t v64 = *((void *)&v35 + 1);
      unint64_t v66 = v35;
      uint64_t v62 = BYTE1(v84);
      uint64_t v60 = v87;
      uint64_t v61 = *((void *)&v83 + 1);
      uint64_t v22 = v84;
      uint64_t v57 = *((void *)&v82 + 1);
      uint64_t v58 = v83;
      char v55 = BYTE8(v87);
      uint64_t v56 = BYTE1(v82);
      long long v53 = v82;
      uint64_t v54 = v27;
      uint64_t v74 = *(_OWORD *)&v80[12];
      uint64_t v20 = *(void *)v80;
      long long v51 = *((void *)&v27 + 1);
      long long v52 = *((void *)&v79 + 1);
      long long v21 = v80[8];
      char v19 = v79;
      outlined retain of AlertStorage(&v79);
LABEL_24:
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v17);
      uint64_t result = Hasher._finalize()();
      int v39 = -1 << *(unsigned char *)(v7 + 32);
      char v40 = result & ~v39;
      int v41 = v40 >> 6;
      if (((-1 << v40) & ~*(void *)(v12 + 8 * (v40 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v40) & ~*(void *)(v12 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v42 = 0;
        char v43 = (unint64_t)(63 - v39) >> 6;
        do
        {
          if (++v41 == v43 && (v42 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          char v44 = v41 == v43;
          if (v41 == v43) {
            int v41 = 0;
          }
          v42 |= v44;
          char v45 = *(void *)(v12 + 8 * v41);
        }
        while (v45 == -1);
        uint64_t v13 = __clz(__rbit64(~v45)) + (v41 << 6);
      }
      LOBYTE(v79) = v22;
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v13) = v17;
      unint64_t v14 = *(void *)(v7 + 56) + 248 * v13;
      *(unsigned char *)unint64_t v14 = v19;
      *(void *)(v14 + 8) = v52;
      *(void *)(v14 + 16) = v20;
      *(unsigned char *)(v14 + 24) = v21;
      *(void *)(v14 + 48) = v54;
      *(void *)(v14 + 56) = v51;
      *(unsigned char *)(v14 + 64) = v53;
      *(unsigned char *)(v14 + 65) = v56;
      *(void *)(v14 + 72) = v57;
      *(void *)(v14 + 80) = v58;
      *(void *)(v14 + 88) = v61;
      *(unsigned char *)(v14 + 96) = v22;
      *(unsigned char *)(v14 + 97) = v62;
      *(void *)(v14 + 104) = v72;
      *(void *)(v14 + 112) = v70;
      *(void *)(v14 + 120) = v68;
      *(void *)(v14 + 128) = v66;
      *(void *)(v14 + 136) = v64;
      *(void *)(v14 + 144) = v60;
      *(unsigned char *)(v14 + 152) = v55;
      *(void *)(v14 + 160) = v78;
      *(void *)(v14 + 168) = v77;
      *(void *)(v14 + 176) = v76;
      *(void *)(v14 + 184) = v75;
      *(void *)(v14 + 192) = v73;
      *(void *)(v14 + 200) = v71;
      *(void *)(v14 + 208) = v69;
      *(void *)(v14 + 216) = v67;
      *(void *)(v14 + 224) = v65;
      *(void *)(v14 + 232) = v63;
      *(void *)(v14 + 240) = v59;
      *(_OWORD *)(v14 + 28) = v74;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v49;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, LazyLayoutCacheItem>, (void (*)(uint64_t))type metadata accessor for LazyLayoutCacheItem, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  int64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  unint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      long long v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    uint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      unint64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        char v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          id v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            unint64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        unint64_t v14 = v25;
      }
    }
LABEL_30:
    uint64_t v10 = (v24 - 1) & v24;
    long long v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v31 = *v30;
    long long v32 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_retain();
      swift_retain();
    }
    Hasher.init(_seed:)();
    _ViewList_ID.Canonical.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    int64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      BOOL v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          int64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    char v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *char v19 = v31;
    v19[1] = v32;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<CGFloat, Int>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int v35 = a2;
    uint64_t v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    long long v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    int64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
    unint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        int64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        char v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        uint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          uint64_t v20 = v9[v8];
          if (!v20)
          {
            long long v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              id v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                uint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        int64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      unint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      unint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      char v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      BOOL v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            BOOL v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt8 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  char v31;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<VerticalEdge, Double>, (void (*)(void))lazy protocol witness table accessor for type VerticalEdge and conformance VerticalEdge);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v31 = a2;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    int64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
    unint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        int64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        unint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v18 >= v13) {
          goto LABEL_31;
        }
        char v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_31;
          }
          char v19 = v9[v8];
          if (!v19)
          {
            uint64_t v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_31:
              if ((v31 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_38;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v30;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            char v19 = v9[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                char v19 = v9[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        int64_t v12 = (v19 - 1) & v19;
        int64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      long long v21 = *(unsigned char *)(*(void *)(v5 + 48) + v17);
      uint64_t v22 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      unint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v24 = result & ~v23;
      char v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v26 = 0;
        BOOL v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v28 = v25 == v27;
          if (v25 == v27) {
            char v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(unsigned char *)(*(void *)(v7 + 48) + v15) = v21;
      *(void *)(*(void *)(v7 + 56) + 8 * v15) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unsigned char *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  char v25;
  Swift::UInt v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _OWORD v38[2];
  uint64_t v39;
  long long v40;
  long long v41;
  uint64_t v42;
  unsigned char v43[48];

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, PlatformBarUpdates>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_51;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  int v35 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    unint64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    char v19 = (void *)(v5 + 64);
    uint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      uint64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_44;
      }
      uint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        long long v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_44:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_51;
          }
          goto LABEL_47;
        }
        uint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            uint64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_53;
            }
            if (v13 >= v35) {
              goto LABEL_44;
            }
            uint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v21;
      }
    }
LABEL_21:
    uint64_t v10 = (v20 - 1) & v20;
    int64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    uint64_t v22 = *(void *)(v5 + 48) + 40 * v17;
    if (v37) {
      outlined init with take of ToolbarPlacement.Role(v22, (uint64_t)v43);
    }
    else {
      outlined init with copy of ToolbarPlacement.Role(v22, (uint64_t)v43);
    }
    unint64_t v23 = (char *)(*(void *)(v5 + 56) + 2 * v17);
    unint64_t v24 = v23[1];
    char v25 = *v23;
    Hasher.init(_seed:)();
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v43, (uint64_t)&v40);
    switch(*((void *)&v41 + 1))
    {
      case 0:
        unint64_t v26 = 0;
        goto LABEL_34;
      case 1:
        unint64_t v26 = 1;
        goto LABEL_34;
      case 2:
        unint64_t v26 = 2;
        goto LABEL_34;
      case 3:
        unint64_t v26 = 3;
        goto LABEL_34;
      case 4:
        unint64_t v26 = 4;
        goto LABEL_34;
      case 5:
        unint64_t v26 = 5;
        goto LABEL_34;
      case 6:
        unint64_t v26 = 7;
LABEL_34:
        Hasher._combine(_:)(v26);
        break;
      default:
        v38[0] = v40;
        v38[1] = v41;
        int v39 = v42;
        Hasher._combine(_:)(6uLL);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v38);
        break;
    }
    uint64_t result = Hasher._finalize()();
    BOOL v27 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v28 = result & ~v27;
    uint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_52;
        }
        long long v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v11 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v14 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    uint64_t result = outlined init with take of ToolbarPlacement.Role((uint64_t)v43, *(void *)(v7 + 48) + 40 * v14);
    unint64_t v15 = (unsigned char *)(*(void *)(v7 + 56) + 2 * v14);
    *unint64_t v15 = v25;
    v15[1] = v24;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  char v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_51;
  }
LABEL_47:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v19, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v19 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_51:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void *v32;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, Transaction>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    long long v32 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v31 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v31) {
          goto LABEL_33;
        }
        long long v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          long long v21 = v32[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *long long v32 = -1 << v30;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            long long v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                long long v21 = v32[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        char v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      BOOL v27 = 8 * v19;
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + v27);
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          char v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      int64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  Swift::UInt v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  void *v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  unint64_t v54;
  _OWORD v55[2];
  uint64_t v56;
  long long v57;
  long long v58;
  uint64_t v59;
  unsigned char v60[48];

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, ToolbarAppearanceConfiguration>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  long long v47 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v45 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    char v43 = v2;
    char v44 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    long long v46 = v5;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        int64_t v17 = (v10 - 1) & v10;
        unint64_t v18 = v16 | (v13 << 6);
      }
      else
      {
        char v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_50:
          __break(1u);
LABEL_51:
          __break(1u);
          return result;
        }
        if (v19 >= v44) {
          goto LABEL_44;
        }
        uint64_t v20 = v45[v19];
        ++v13;
        if (!v20)
        {
          uint64_t v13 = v19 + 1;
          if (v19 + 1 >= v44) {
            goto LABEL_44;
          }
          uint64_t v20 = v45[v13];
          if (!v20)
          {
            long long v21 = v19 + 2;
            if (v21 >= v44)
            {
LABEL_44:
              swift_release();
              id v3 = v43;
              if (v47)
              {
                char v42 = 1 << *(unsigned char *)(v5 + 32);
                if (v42 >= 64) {
                  bzero(v45, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v45 = -1 << v42;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v20 = v45[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v13 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_51;
                }
                if (v13 >= v44) {
                  goto LABEL_44;
                }
                uint64_t v20 = v45[v13];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v13 = v21;
          }
        }
LABEL_21:
        int64_t v17 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v13 << 6);
      }
      uint64_t v22 = *(void *)(v5 + 48) + 40 * v18;
      unint64_t v23 = 80 * v18;
      if (v47)
      {
        outlined init with take of ToolbarPlacement.Role(v22, (uint64_t)v60);
        unint64_t v24 = *(void *)(v5 + 56) + v23;
        char v25 = *(unsigned char *)v24;
        unint64_t v26 = *(void *)(v24 + 8);
        BOOL v27 = *(void *)(v24 + 16);
        uint64_t v28 = *(unsigned char *)(v24 + 24);
        uint64_t v29 = *(void *)(v24 + 32);
        uint64_t v30 = *(unsigned char *)(v24 + 40);
        long long v53 = *(void *)(v24 + 48);
        long long v51 = *(unsigned char *)(v24 + 57);
        long long v52 = *(unsigned char *)(v24 + 56);
        long long v50 = *(unsigned char *)(v24 + 58);
        uint64_t v49 = *(void *)(v24 + 64);
        uint64_t v48 = *(unsigned char *)(v24 + 72);
      }
      else
      {
        outlined init with copy of ToolbarPlacement.Role(v22, (uint64_t)v60);
        uint64_t v31 = *(void *)(v5 + 56) + v23;
        char v25 = *(unsigned char *)v31;
        unint64_t v26 = *(void *)(v31 + 8);
        BOOL v27 = *(void *)(v31 + 16);
        uint64_t v28 = *(unsigned char *)(v31 + 24);
        uint64_t v29 = *(void *)(v31 + 32);
        uint64_t v30 = *(unsigned char *)(v31 + 40);
        long long v53 = *(void *)(v31 + 48);
        long long v51 = *(unsigned char *)(v31 + 57);
        long long v52 = *(unsigned char *)(v31 + 56);
        long long v50 = *(unsigned char *)(v31 + 58);
        uint64_t v48 = *(unsigned char *)(v31 + 72);
        uint64_t v49 = *(void *)(v31 + 64);
        swift_retain();
        swift_retain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v60, (uint64_t)&v57);
      uint64_t v54 = v17;
      switch(*((void *)&v58 + 1))
      {
        case 0:
          long long v32 = v13;
          uint64_t v33 = v26;
          uint64_t v34 = 0;
          goto LABEL_34;
        case 1:
          long long v32 = v13;
          uint64_t v33 = v26;
          uint64_t v34 = 1;
          goto LABEL_34;
        case 2:
          long long v32 = v13;
          uint64_t v33 = v26;
          uint64_t v34 = 2;
          goto LABEL_34;
        case 3:
          long long v32 = v13;
          uint64_t v33 = v26;
          uint64_t v34 = 3;
          goto LABEL_34;
        case 4:
          long long v32 = v13;
          uint64_t v33 = v26;
          uint64_t v34 = 4;
          goto LABEL_34;
        case 5:
          long long v32 = v13;
          uint64_t v33 = v26;
          uint64_t v34 = 5;
          goto LABEL_34;
        case 6:
          long long v32 = v13;
          uint64_t v33 = v26;
          uint64_t v34 = 7;
LABEL_34:
          Hasher._combine(_:)(v34);
          break;
        default:
          long long v32 = v13;
          uint64_t v33 = v26;
          v55[0] = v57;
          v55[1] = v58;
          uint64_t v56 = v59;
          Hasher._combine(_:)(6uLL);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v55);
          break;
      }
      uint64_t result = Hasher._finalize()();
      int v35 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v36 = result & ~v35;
      uint64_t v37 = v36 >> 6;
      if (((-1 << v36) & ~*(void *)(v11 + 8 * (v36 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v36) & ~*(void *)(v11 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v38 = 0;
        int v39 = (unint64_t)(63 - v35) >> 6;
        do
        {
          if (++v37 == v39 && (v38 & 1) != 0)
          {
            __break(1u);
            goto LABEL_50;
          }
          char v40 = v37 == v39;
          if (v37 == v39) {
            uint64_t v37 = 0;
          }
          v38 |= v40;
          int v41 = *(void *)(v11 + 8 * v37);
        }
        while (v41 == -1);
        unint64_t v14 = __clz(__rbit64(~v41)) + (v37 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t result = outlined init with take of ToolbarPlacement.Role((uint64_t)v60, *(void *)(v7 + 48) + 40 * v14);
      unint64_t v15 = *(void *)(v7 + 56) + 80 * v14;
      *(unsigned char *)unint64_t v15 = v25;
      *(void *)(v15 + 8) = v33;
      *(void *)(v15 + 16) = v27;
      *(unsigned char *)(v15 + 24) = v28;
      *(void *)(v15 + 32) = v29;
      *(unsigned char *)(v15 + 40) = v30;
      *(void *)(v15 + 48) = v53;
      *(unsigned char *)(v15 + 56) = v52;
      *(unsigned char *)(v15 + 57) = v51;
      *(unsigned char *)(v15 + 58) = v50;
      *(void *)(v15 + 64) = v49;
      *(unsigned char *)(v15 + 72) = v48;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v46;
      uint64_t v13 = v32;
      uint64_t v10 = v54;
    }
  }
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, PropertyList>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    long long v32 = v10;
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    int64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        char v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        long long v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        uint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          uint64_t v22 = v9[v8];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  *uint64_t v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                uint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        int64_t v12 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        int64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  void *v33;
  uint64_t v34;
  char v35[8];

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, WeakBox<Swift.AnyObject>>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    long long v32 = v3;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    uint64_t v34 = MEMORY[0x1E4FBC838] + 8;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v17 = v16 | (v8 << 6);
      }
      else
      {
        unint64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v18 >= v12) {
          goto LABEL_34;
        }
        char v19 = v33[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v12) {
            goto LABEL_34;
          }
          char v19 = v33[v8];
          if (!v19)
          {
            uint64_t v20 = v18 + 2;
            if (v20 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v32;
                goto LABEL_41;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v33 = -1 << v31;
              }
              id v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            char v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v8 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                char v19 = v33[v8];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v20;
          }
        }
LABEL_21:
        unint64_t v11 = (v19 - 1) & v19;
        int64_t v17 = __clz(__rbit64(v19)) + (v8 << 6);
      }
      long long v21 = 8 * v17;
      uint64_t v22 = *(void *)(*(void *)(v5 + 48) + v21);
      unint64_t v23 = *(void *)(v5 + 56) + v21;
      if (a2) {
        _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_3(v23, (uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, v34, MEMORY[0x1E4F41720]);
      }
      else {
        _s7SwiftUI7WeakBoxVyyXlGWOcTm_0(v23, (uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4F41720]);
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      char v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v25) & ~*(void *)(v13 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v13 + 8 * v26);
        }
        while (v30 == -1);
        unint64_t v14 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = 8 * v14;
      *(void *)(*(void *)(v7 + 48) + v15) = v22;
      uint64_t result = _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_3((uint64_t)v35, *(void *)(v7 + 56) + v15, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4F41720]);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, UIHostingKeyboardTrackingElement>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    long long v32 = -1 << v10;
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    int64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = v3;
    int v35 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        char v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        long long v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v21 >= v35) {
          goto LABEL_33;
        }
        uint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v35) {
            goto LABEL_33;
          }
          uint64_t v22 = v9[v8];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v35)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v34;
                goto LABEL_40;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v35);
              }
              else {
                *uint64_t v9 = v32;
              }
              id v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v35) {
                  goto LABEL_33;
                }
                uint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        int64_t v12 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void **)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        uint64_t v31 = v30;
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        int64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::UInt v19;
  Swift::UInt v20;
  Swift::UInt v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  void *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  long long v76;
  _OWORD __dst[19];

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.StackContent.Key, NavigationColumnState>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key);
  char v43 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    int v41 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    char v40 = (unint64_t)(v9 + 63) >> 6;
    char v42 = v5;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int64_t v17 = v16 | (v8 << 6);
        if (v43) {
          goto LABEL_10;
        }
      }
      else
      {
        uint64_t v28 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v41;
        if (v28 >= v40) {
          goto LABEL_33;
        }
        uint64_t v29 = v41[v28];
        ++v8;
        if (!v29)
        {
          int64_t v8 = v28 + 1;
          if (v28 + 1 >= v40) {
            goto LABEL_33;
          }
          uint64_t v29 = v41[v8];
          if (!v29)
          {
            uint64_t v30 = v28 + 2;
            if (v30 >= v40)
            {
LABEL_33:
              if ((v43 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              int v39 = 1 << *(unsigned char *)(v5 + 32);
              if (v39 >= 64) {
                bzero(v41, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int v41 = -1 << v39;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v29 = v41[v30];
            if (!v29)
            {
              while (1)
              {
                int64_t v8 = v30 + 1;
                if (__OFADD__(v30, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v40) {
                  goto LABEL_33;
                }
                uint64_t v29 = v41[v8];
                ++v30;
                if (v29) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v8 = v30;
          }
        }
LABEL_22:
        unint64_t v11 = (v29 - 1) & v29;
        int64_t v17 = __clz(__rbit64(v29)) + (v8 << 6);
        if (v43)
        {
LABEL_10:
          unint64_t v18 = *(void *)(v5 + 48) + 24 * v17;
          char v19 = *(void *)v18;
          uint64_t v20 = *(unsigned __int8 *)(v18 + 8);
          long long v21 = *(void *)(v18 + 16);
          uint64_t v22 = *(void *)(v5 + 56) + 304 * v17;
          unint64_t v23 = *(void *)v22;
          uint64_t v48 = *(_DWORD *)(v22 + 8);
          char v55 = *(unsigned char *)(v22 + 24);
          char v25 = *(void *)(v22 + 32);
          unint64_t v24 = *(void *)(v22 + 40);
          uint64_t v60 = *(void *)(v22 + 56);
          uint64_t v61 = *(void *)(v22 + 16);
          uint64_t v54 = *(void *)(v22 + 64);
          uint64_t v49 = *(void *)(v22 + 72);
          unint64_t v26 = *(void *)(v22 + 80);
          uint64_t v64 = *(void *)(v22 + 48);
          uint64_t v65 = *(void *)(v22 + 88);
          uint64_t v57 = *(void *)(v22 + 112);
          uint64_t v58 = *(void *)(v22 + 104);
          uint64_t v73 = *(void *)(v22 + 120);
          uint64_t v71 = *(void *)(v22 + 128);
          v68 = *(void *)(v22 + 136);
          unint64_t v66 = *(void *)(v22 + 144);
          uint64_t v62 = *(void *)(v22 + 96);
          v63 = *(void *)(v22 + 152);
          uint64_t v59 = *(void *)(v22 + 160);
          long long v47 = *(void *)(v22 + 176);
          char v44 = *(void *)(v22 + 184);
          uint64_t v76 = *(_OWORD *)(v22 + 192);
          uint64_t v74 = *(void *)(v22 + 216);
          v75 = *(void *)(v22 + 208);
          uint64_t v72 = *(void *)(v22 + 224);
          v70 = *(void *)(v22 + 232);
          BOOL v27 = *(void *)(v22 + 280);
          uint64_t v56 = *(void *)(v22 + 240);
          long long v52 = *(void *)(v22 + 248);
          long long v53 = *(void *)(v22 + 168);
          long long v50 = *(void *)(v22 + 256);
          long long v46 = *(unsigned char *)(v22 + 264);
          char v45 = *(void *)(v22 + 272);
          uint64_t v67 = *(void *)(v22 + 288);
          v69 = *(unsigned char *)(v22 + 296);
          long long v51 = *(_WORD *)(v22 + 297);
          goto LABEL_24;
        }
      }
      uint64_t v31 = *(void *)(v5 + 48) + 24 * v17;
      char v19 = *(void *)v31;
      uint64_t v20 = *(unsigned __int8 *)(v31 + 8);
      long long v21 = *(void *)(v31 + 16);
      memcpy(__dst, (const void *)(*(void *)(v5 + 56) + 304 * v17), 0x12BuLL);
      long long v51 = *(_WORD *)((char *)&__dst[18] + 9);
      v69 = BYTE8(__dst[18]);
      uint64_t v67 = *(void *)&__dst[18];
      BOOL v27 = *((void *)&__dst[17] + 1);
      uint64_t v76 = __dst[12];
      uint64_t v74 = *((void *)&__dst[13] + 1);
      v75 = *(void *)&__dst[13];
      uint64_t v56 = *(void *)&__dst[15];
      long long v50 = *(void *)&__dst[16];
      long long v46 = BYTE8(__dst[16]);
      char v45 = *(void *)&__dst[17];
      uint64_t v72 = *(void *)&__dst[14];
      uint64_t v73 = *((void *)&__dst[7] + 1);
      v70 = *((void *)&__dst[14] + 1);
      v68 = *((void *)&__dst[8] + 1);
      uint64_t v71 = *(void *)&__dst[8];
      uint64_t v59 = *(void *)&__dst[10];
      long long v52 = *((void *)&__dst[15] + 1);
      long long v53 = *((void *)&__dst[10] + 1);
      char v44 = *((void *)&__dst[11] + 1);
      long long v47 = *(void *)&__dst[11];
      uint64_t v65 = *((void *)&__dst[5] + 1);
      unint64_t v66 = *(void *)&__dst[9];
      uint64_t v62 = *(void *)&__dst[6];
      v63 = *((void *)&__dst[9] + 1);
      uint64_t v57 = *(void *)&__dst[7];
      uint64_t v58 = *((void *)&__dst[6] + 1);
      unint64_t v24 = *((void *)&__dst[2] + 1);
      uint64_t v64 = *(void *)&__dst[3];
      uint64_t v49 = *((void *)&__dst[4] + 1);
      uint64_t v54 = *(void *)&__dst[4];
      unint64_t v26 = *(void *)&__dst[5];
      uint64_t v60 = *((void *)&__dst[3] + 1);
      uint64_t v61 = *(void *)&__dst[1];
      char v55 = BYTE8(__dst[1]);
      unint64_t v23 = *(void *)&__dst[0];
      char v25 = *(void *)&__dst[2];
      uint64_t v48 = DWORD2(__dst[0]);
      outlined retain of NavigationColumnState((uint64_t *)__dst);
LABEL_24:
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v19);
      Hasher._combine(_:)(v20);
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      long long v32 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v33 = result & ~v32;
      uint64_t v34 = v33 >> 6;
      if (((-1 << v33) & ~*(void *)(v12 + 8 * (v33 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v33) & ~*(void *)(v12 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        int v35 = 0;
        uint64_t v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v37 = v34 == v36;
          if (v34 == v36) {
            uint64_t v34 = 0;
          }
          v35 |= v37;
          uint64_t v38 = *(void *)(v12 + 8 * v34);
        }
        while (v38 == -1);
        uint64_t v13 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = *(void *)(v7 + 48) + 24 * v13;
      *(void *)unint64_t v14 = v19;
      *(unsigned char *)(v14 + 8) = v20;
      *(void *)(v14 + 16) = v21;
      unint64_t v15 = *(void *)(v7 + 56) + 304 * v13;
      *(_WORD *)(v15 + 297) = v51;
      *(_DWORD *)(v15 + 8) = v48;
      *(void *)(v15 + 16) = v61;
      *(unsigned char *)(v15 + 24) = v55;
      *(void *)(v15 + 32) = v25;
      *(void *)(v15 + 40) = v24;
      *(void *)(v15 + 48) = v64;
      *(void *)(v15 + 56) = v60;
      *(void *)(v15 + 64) = v54;
      *(void *)(v15 + 72) = v49;
      *(void *)(v15 + 88) = v65;
      *(void *)(v15 + 96) = v62;
      *(void *)(v15 + 104) = v58;
      *(void *)(v15 + 112) = v57;
      *(void *)(v15 + 120) = v73;
      *(void *)(v15 + 128) = v71;
      *(void *)(v15 + 136) = v68;
      *(void *)(v15 + 144) = v66;
      *(void *)(v15 + 152) = v63;
      *(void *)(v15 + 160) = v59;
      *(void *)(v15 + 168) = v53;
      *(void *)(v15 + 176) = v47;
      *(void *)(v15 + 184) = v44;
      *(void *)(v15 + 208) = v75;
      *(void *)(v15 + 216) = v74;
      *(void *)(v15 + 224) = v72;
      *(void *)(v15 + 232) = v70;
      *(void *)(v15 + 240) = v56;
      *(void *)(v15 + 248) = v52;
      *(void *)(v15 + 256) = v50;
      *(unsigned char *)(v15 + 264) = v46;
      *(void *)(v15 + 272) = v45;
      *(void *)(v15 + 288) = v67;
      *(unsigned char *)(v15 + 296) = v69;
      *(void *)unint64_t v15 = v23;
      *(void *)(v15 + 80) = v26;
      *(_OWORD *)(v15 + 192) = v76;
      *(void *)(v15 + 280) = v27;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v42;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  long long v16;
  long long v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  long long v25;
  long long v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  long long v39;
  long long v40;
  uint64_t v41;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<AnyHashable, [AnyHashable : PassthroughSubject<Any, Never>]>();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v36 = v2;
  uint64_t v37 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      char v19 = v18 | (v13 << 6);
      goto LABEL_22;
    }
    uint64_t v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v20 >= v37) {
      break;
    }
    long long v21 = (void *)(v5 + 64);
    uint64_t v22 = *(void *)(v38 + 8 * v20);
    ++v13;
    if (!v22)
    {
      uint64_t v13 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_34;
      }
      uint64_t v22 = *(void *)(v38 + 8 * v13);
      if (!v22)
      {
        unint64_t v23 = v20 + 2;
        if (v23 >= v37)
        {
LABEL_34:
          swift_release();
          id v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v22 = *(void *)(v38 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            uint64_t v13 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v37) {
              goto LABEL_34;
            }
            uint64_t v22 = *(void *)(v38 + 8 * v13);
            ++v23;
            if (v22) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v23;
      }
    }
LABEL_21:
    uint64_t v10 = (v22 - 1) & v22;
    char v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_22:
    unint64_t v24 = *(void *)(v5 + 48) + 40 * v19;
    if (a2)
    {
      char v25 = *(_OWORD *)v24;
      unint64_t v26 = *(_OWORD *)(v24 + 16);
      int v41 = *(void *)(v24 + 32);
      int v39 = v25;
      char v40 = v26;
      BOOL v27 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    }
    else
    {
      outlined init with copy of AnyHashable(v24, (uint64_t)&v39);
      BOOL v27 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      swift_bridgeObjectRetain();
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v31 = 0;
      long long v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v11 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = *(void *)(v7 + 48) + 40 * v14;
    unint64_t v16 = v39;
    int64_t v17 = v40;
    *(void *)(v15 + 32) = v41;
    *(_OWORD *)unint64_t v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    *(void *)(*(void *)(v7 + 56) + 8 * v14) = v27;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v36;
  long long v21 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  int v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v21, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v21 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  long long v17;
  long long v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  long long v38;
  long long v39;
  uint64_t v40;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<AnyHashable, Any>();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  int64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  unint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      char v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    long long v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      unint64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            unint64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v14 = v24;
      }
    }
LABEL_21:
    uint64_t v10 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    char v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      unint64_t v26 = *(_OWORD *)v25;
      BOOL v27 = *(_OWORD *)(v25 + 16);
      char v40 = *(void *)(v25 + 32);
      uint64_t v38 = v26;
      int v39 = v27;
      outlined init with take of Any((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v38);
      outlined init with copy of Any(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v31 = 0;
      long long v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    unint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    int64_t v17 = v38;
    unint64_t v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)unint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)outlined init with take of Any(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  int v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  long long v16;
  long long v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  long long v25;
  long long v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  long long v39;
  long long v40;
  uint64_t v41;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<AnyHashable, PassthroughSubject<Any, Never>>();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v36 = v2;
  uint64_t v37 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      char v19 = v18 | (v13 << 6);
      goto LABEL_22;
    }
    uint64_t v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v20 >= v37) {
      break;
    }
    long long v21 = (void *)(v5 + 64);
    uint64_t v22 = *(void *)(v38 + 8 * v20);
    ++v13;
    if (!v22)
    {
      uint64_t v13 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_34;
      }
      uint64_t v22 = *(void *)(v38 + 8 * v13);
      if (!v22)
      {
        unint64_t v23 = v20 + 2;
        if (v23 >= v37)
        {
LABEL_34:
          swift_release();
          id v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v22 = *(void *)(v38 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            uint64_t v13 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v37) {
              goto LABEL_34;
            }
            uint64_t v22 = *(void *)(v38 + 8 * v13);
            ++v23;
            if (v22) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v23;
      }
    }
LABEL_21:
    uint64_t v10 = (v22 - 1) & v22;
    char v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_22:
    unint64_t v24 = *(void *)(v5 + 48) + 40 * v19;
    if (a2)
    {
      char v25 = *(_OWORD *)v24;
      unint64_t v26 = *(_OWORD *)(v24 + 16);
      int v41 = *(void *)(v24 + 32);
      int v39 = v25;
      char v40 = v26;
      BOOL v27 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    }
    else
    {
      outlined init with copy of AnyHashable(v24, (uint64_t)&v39);
      BOOL v27 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      swift_retain();
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v31 = 0;
      long long v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v11 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = *(void *)(v7 + 48) + 40 * v14;
    unint64_t v16 = v39;
    int64_t v17 = v40;
    *(void *)(v15 + 32) = v41;
    *(_OWORD *)unint64_t v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    *(void *)(*(void *)(v7 + 56) + 8 * v14) = v27;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v36;
  long long v21 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  int v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v21, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v21 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  long long v15;
  long long v16;
  long long v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  Swift::UInt v23;
  uint64_t v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  void *v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  char v42;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationSplitColumn, NavigationState.StackContent.PositionedView>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitColumn and conformance NavigationSplitColumn);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v37 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v36) {
          goto LABEL_34;
        }
        long long v21 = v37[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v36) {
            goto LABEL_34;
          }
          long long v21 = v37[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v36)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_41;
              }
              int v35 = 1 << *(unsigned char *)(v5 + 32);
              if (v35 >= 64) {
                bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v37 = -1 << v35;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            long long v21 = v37[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v36) {
                  goto LABEL_34;
                }
                long long v21 = v37[v8];
                ++v22;
                if (v21) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_21:
        unint64_t v11 = (v21 - 1) & v21;
        char v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      unint64_t v23 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v19);
      unint64_t v24 = *(void *)(v5 + 56) + 72 * v19;
      if (a2)
      {
        uint64_t v38 = *(_OWORD *)v24;
        char v25 = *(_OWORD *)(v24 + 16);
        unint64_t v26 = *(_OWORD *)(v24 + 32);
        BOOL v27 = *(_OWORD *)(v24 + 48);
        char v42 = *(unsigned char *)(v24 + 64);
        char v40 = v26;
        int v41 = v27;
        int v39 = v25;
      }
      else
      {
        outlined init with copy of NavigationState.StackContent.PositionedView(v24, (uint64_t)&v38);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v29 = result & ~v28;
      uint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v31 = 0;
        long long v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          uint64_t v33 = v30 == v32;
          if (v30 == v32) {
            uint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v12 + 8 * v30);
        }
        while (v34 == -1);
        uint64_t v13 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(unsigned char *)(*(void *)(v7 + 48) + v13) = v23;
      unint64_t v14 = *(void *)(v7 + 56) + 72 * v13;
      *(_OWORD *)unint64_t v14 = v38;
      unint64_t v15 = v39;
      unint64_t v16 = v40;
      int64_t v17 = v41;
      *(unsigned char *)(v14 + 64) = v42;
      *(_OWORD *)(v14 + 32) = v16;
      *(_OWORD *)(v14 + 48) = v17;
      *(_OWORD *)(v14 + 16) = v15;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  char v36;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, [Any]>();
  uint64_t v36 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      char v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    long long v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v24;
      }
    }
LABEL_30:
    uint64_t v10 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    long long v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      int64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  Swift::UInt v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<SceneID, PlatformSceneCache.Info>, (void (*)(void))lazy protocol witness table accessor for type SceneID and conformance SceneID);
  uint64_t v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_43;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  int v35 = v2;
  uint64_t v36 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    unint64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v18 >= v36) {
      break;
    }
    char v19 = (void *)(v5 + 64);
    uint64_t v20 = *(void *)(v37 + 8 * v18);
    ++v13;
    if (!v20)
    {
      uint64_t v13 = v18 + 1;
      if (v18 + 1 >= v36) {
        goto LABEL_36;
      }
      uint64_t v20 = *(void *)(v37 + 8 * v13);
      if (!v20)
      {
        long long v21 = v18 + 2;
        if (v21 >= v36)
        {
LABEL_36:
          swift_release();
          id v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_43;
          }
          goto LABEL_39;
        }
        uint64_t v20 = *(void *)(v37 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            uint64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_45;
            }
            if (v13 >= v36) {
              goto LABEL_36;
            }
            uint64_t v20 = *(void *)(v37 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v21;
      }
    }
LABEL_21:
    uint64_t v10 = (v20 - 1) & v20;
    int64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    uint64_t v22 = *(void *)(v5 + 48) + 24 * v17;
    unint64_t v24 = *(void *)v22;
    unint64_t v23 = *(void *)(v22 + 8);
    char v25 = *(unsigned char *)(v22 + 16);
    unint64_t v26 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
    if ((v38 & 1) == 0)
    {
      outlined copy of SceneID(*(void *)v22, *(void *)(v22 + 8), *(unsigned char *)(v22 + 16));
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    if (v25)
    {
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v23);
    }
    else
    {
      String.hash(into:)();
    }
    uint64_t result = Hasher._finalize()();
    BOOL v27 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v28 = result & ~v27;
    uint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        long long v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v11 + 8 * v29);
      }
      while (v33 == -1);
      unint64_t v14 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = *(void *)(v7 + 48) + 24 * v14;
    *(void *)unint64_t v15 = v24;
    *(void *)(v15 + 8) = v23;
    *(unsigned char *)(v15 + 16) = v25;
    *(void *)(*(void *)(v7 + 56) + 8 * v14) = v26;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v35;
  char v19 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_43;
  }
LABEL_39:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v19, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v19 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_43:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  Swift::UInt v27;
  Swift::UInt v28;
  Swift::UInt v29;
  Swift::UInt v30;
  Swift::UInt v31;
  Swift::UInt8 v32;
  long long *v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  unint64_t v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  void *v54;
  uint64_t v55;
  char v56;
  int64_t v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  unsigned char v65[28];
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  _OWORD v73[3];

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest>, (void (*)(void))lazy protocol witness table accessor for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
  uint64_t v56 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v54 = (void *)(v5 + 64);
    char v55 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    long long v53 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        long long v21 = v20 | (v8 << 6);
      }
      else
      {
        uint64_t v22 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v54;
        if (v22 >= v53) {
          goto LABEL_34;
        }
        unint64_t v23 = v54[v22];
        ++v8;
        if (!v23)
        {
          int64_t v8 = v22 + 1;
          if (v22 + 1 >= v53) {
            goto LABEL_34;
          }
          unint64_t v23 = v54[v8];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v53)
            {
LABEL_34:
              if ((v56 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_41;
              }
              long long v52 = 1 << *(unsigned char *)(v5 + 32);
              if (v52 >= 64) {
                bzero(v54, ((unint64_t)(v52 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v54 = -1 << v52;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v23 = v54[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v8 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v53) {
                  goto LABEL_34;
                }
                unint64_t v23 = v54[v8];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v24;
          }
        }
LABEL_21:
        unint64_t v11 = (v23 - 1) & v23;
        long long v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      uint64_t v57 = v8;
      char v25 = *(void *)(v5 + 56);
      unint64_t v26 = *(void *)(v5 + 48) + 48 * v21;
      BOOL v27 = *(void *)v26;
      uint64_t v28 = *(void *)(v26 + 8);
      uint64_t v29 = *(unsigned __int8 *)(v26 + 16);
      uint64_t v30 = *(void *)(v26 + 24);
      uint64_t v31 = *(void *)(v26 + 32);
      long long v32 = *(unsigned char *)(v26 + 40);
      uint64_t v33 = (long long *)(v25 + 144 * v21);
      if (v56)
      {
        uint64_t v34 = v33[7];
        uint64_t v72 = v33[6];
        v73[0] = v34;
        *(_OWORD *)((char *)v73 + 12) = *(long long *)((char *)v33 + 124);
        int v35 = v33[3];
        v68 = v33[2];
        v69 = v35;
        uint64_t v36 = v33[5];
        v70 = v33[4];
        uint64_t v71 = v36;
        uint64_t v38 = *v33;
        uint64_t v37 = v33[1];
      }
      else
      {
        uint64_t v58 = *v33;
        int v39 = v33[4];
        int v41 = v33[1];
        char v40 = v33[2];
        uint64_t v61 = v33[3];
        uint64_t v62 = v39;
        uint64_t v59 = v41;
        uint64_t v60 = v40;
        char v43 = v33[6];
        char v42 = v33[7];
        char v44 = v33[5];
        *(_OWORD *)&v65[12] = *(long long *)((char *)v33 + 124);
        uint64_t v64 = v43;
        *(_OWORD *)uint64_t v65 = v42;
        v63 = v44;
        outlined retain of NavigationRequest((uint64_t)&v58);
        uint64_t v72 = v64;
        v73[0] = *(_OWORD *)v65;
        *(_OWORD *)((char *)v73 + 12) = *(_OWORD *)&v65[12];
        v68 = v60;
        v69 = v61;
        v70 = v62;
        uint64_t v71 = v63;
        uint64_t v38 = v58;
        uint64_t v37 = v59;
      }
      unint64_t v66 = v38;
      uint64_t v67 = v37;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      Hasher._combine(_:)(v28);
      Hasher._combine(_:)(v29);
      Hasher._combine(_:)(v30);
      Hasher._combine(_:)(v31);
      Hasher._combine(_:)(v32);
      uint64_t result = Hasher._finalize()();
      char v45 = -1 << *(unsigned char *)(v7 + 32);
      long long v46 = result & ~v45;
      long long v47 = v46 >> 6;
      if (((-1 << v46) & ~*(void *)(v12 + 8 * (v46 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v46) & ~*(void *)(v12 + 8 * (v46 >> 6)))) | v46 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v48 = 0;
        uint64_t v49 = (unint64_t)(63 - v45) >> 6;
        do
        {
          if (++v47 == v49 && (v48 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          long long v50 = v47 == v49;
          if (v47 == v49) {
            long long v47 = 0;
          }
          v48 |= v50;
          long long v51 = *(void *)(v12 + 8 * v47);
        }
        while (v51 == -1);
        uint64_t v13 = __clz(__rbit64(~v51)) + (v47 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = *(void *)(v7 + 48) + 48 * v13;
      *(void *)unint64_t v14 = v27;
      *(void *)(v14 + 8) = v28;
      *(unsigned char *)(v14 + 16) = v29;
      *(void *)(v14 + 24) = v30;
      *(void *)(v14 + 32) = v31;
      *(unsigned char *)(v14 + 40) = v32;
      unint64_t v15 = (_OWORD *)(*(void *)(v7 + 56) + 144 * v13);
      unint64_t v16 = v73[0];
      v15[6] = v72;
      v15[7] = v16;
      *(_OWORD *)((char *)v15 + 124) = *(_OWORD *)((char *)v73 + 12);
      int64_t v17 = v69;
      v15[2] = v68;
      v15[3] = v17;
      unint64_t v18 = v71;
      v15[4] = v70;
      v15[5] = v18;
      char v19 = v67;
      *unint64_t v15 = v66;
      v15[1] = v19;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v55;
      int64_t v8 = v57;
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::UInt8 v23;
  Swift::UInt v24;
  Swift::UInt v25;
  Swift::UInt v26;
  Swift::UInt v27;
  Swift::UInt v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int64_t v38;
  void *v39;
  uint64_t v40;
  int64_t v41;
  int v42;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationStackViewPosition, VersionSeed>, (void (*)(void))lazy protocol witness table accessor for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v37 = a2;
    int64_t v8 = 0;
    int v39 = (void *)(v5 + 64);
    char v40 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v38 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int v41 = v8;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v39;
        if (v17 >= v38) {
          goto LABEL_31;
        }
        unint64_t v18 = v39[v17];
        char v19 = v8 + 1;
        if (!v18)
        {
          char v19 = v17 + 1;
          if (v17 + 1 >= v38) {
            goto LABEL_31;
          }
          unint64_t v18 = v39[v19];
          if (!v18)
          {
            uint64_t v20 = v17 + 2;
            if (v20 >= v38)
            {
LABEL_31:
              if ((v37 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_38;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
              if (v36 >= 64) {
                bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int v39 = -1 << v36;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v39[v20];
            if (!v18)
            {
              while (1)
              {
                char v19 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_40;
                }
                if (v19 >= v38) {
                  goto LABEL_31;
                }
                unint64_t v18 = v39[v19];
                ++v20;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            char v19 = v20;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        int v41 = v19;
        unint64_t v16 = __clz(__rbit64(v18)) + (v19 << 6);
      }
      long long v21 = *(void *)(v5 + 56);
      uint64_t v22 = *(void *)(v5 + 48) + 48 * v16;
      unint64_t v23 = *(unsigned char *)(v22 + 40);
      char v25 = *(void *)(v22 + 24);
      unint64_t v24 = *(void *)(v22 + 32);
      unint64_t v26 = *(unsigned __int8 *)(v22 + 16);
      BOOL v27 = *(void *)v22;
      uint64_t v28 = *(void *)(v22 + 8);
      char v42 = *(_DWORD *)(v21 + 4 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      Hasher._combine(_:)(v28);
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(v25);
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        long long v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          int v35 = *(void *)(v12 + 8 * v31);
        }
        while (v35 == -1);
        uint64_t v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = *(void *)(v7 + 48) + 48 * v13;
      *(void *)unint64_t v14 = v27;
      *(void *)(v14 + 8) = v28;
      *(unsigned char *)(v14 + 16) = v26;
      *(void *)(v14 + 24) = v25;
      *(void *)(v14 + 32) = v24;
      *(unsigned char *)(v14 + 40) = v23;
      *(_DWORD *)(*(void *)(v7 + 56) + 4 * v13) = v42;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v40;
      int64_t v8 = v41;
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  Swift::UInt v22;
  Swift::UInt v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  int64_t v34;
  void *v35;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationState.StackContent.Key, NavigationState.SelectionSeed>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v33 = a2;
    int64_t v8 = 0;
    int v35 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v34 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v34) {
          goto LABEL_31;
        }
        unint64_t v18 = v35[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v34) {
            goto LABEL_31;
          }
          unint64_t v18 = v35[v8];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v34)
            {
LABEL_31:
              if ((v33 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_38;
              }
              long long v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int v35 = -1 << v32;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v35[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v34) {
                  goto LABEL_31;
                }
                unint64_t v18 = v35[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(void *)(v5 + 48) + 24 * v16;
      long long v21 = *(void *)(v20 + 16);
      uint64_t v22 = *(unsigned __int8 *)(v20 + 8);
      unint64_t v23 = *(void *)v20;
      unint64_t v24 = *(_DWORD *)(*(void *)(v5 + 56) + 4 * v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v23);
      Hasher._combine(_:)(v22);
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      char v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      BOOL v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            BOOL v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        uint64_t v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = *(void *)(v7 + 48) + 24 * v13;
      *(void *)unint64_t v14 = v23;
      *(unsigned char *)(v14 + 8) = v22;
      *(void *)(v14 + 16) = v21;
      *(_DWORD *)(*(void *)(v7 + 56) + 4 * v13) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  void *v29;
  id v30;
  uint64_t v31;
  int64_t v32;
  void *v33;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UISplitViewControllerColumn, NavigationStackCoordinator<SplitColumnNavigationStrategy>>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    long long v32 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v32) {
          goto LABEL_33;
        }
        long long v21 = v33[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v32) {
            goto LABEL_33;
          }
          long long v21 = v33[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v33 = -1 << v31;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            long long v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v32) {
                  goto LABEL_33;
                }
                long long v21 = v33[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        char v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      BOOL v27 = 8 * v19;
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + v27);
      uint64_t v29 = *(void **)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        uint64_t v30 = v29;
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          char v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      int64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  _OWORD v35[2];

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, Any>();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        unint64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        char v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          uint64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          char v19 = v34[v13];
          if (!v19)
          {
            uint64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              id v3 = v2;
              if (a2)
              {
                long long v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            char v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                char v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v13 = v20;
          }
        }
LABEL_21:
        uint64_t v10 = (v19 - 1) & v19;
        int64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      long long v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      unint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      unint64_t v24 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v17);
      if (a2)
      {
        outlined init with take of Any(v24, v35);
      }
      else
      {
        outlined init with copy of Any((uint64_t)v24, (uint64_t)v35);
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      char v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      BOOL v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            BOOL v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = (uint64_t)outlined init with take of Any(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  id v37;
  uint64_t v38;
  int64_t v39;
  void *v40;
  uint64_t i;
  char v42;
  long long v43;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, SizeFittingState.Child>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    char v40 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    int v39 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        uint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        long long v21 = v20 | (v13 << 6);
      }
      else
      {
        uint64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v39) {
          goto LABEL_33;
        }
        unint64_t v23 = v40[v22];
        ++v13;
        if (!v23)
        {
          uint64_t v13 = v22 + 1;
          if (v22 + 1 >= v39) {
            goto LABEL_33;
          }
          unint64_t v23 = v40[v13];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v39)
            {
LABEL_33:
              swift_release();
              id v3 = v2;
              if (v42)
              {
                uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
                if (v38 >= 64) {
                  bzero(v40, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *char v40 = -1 << v38;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v40[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v39) {
                  goto LABEL_33;
                }
                unint64_t v23 = v40[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v13 = v24;
          }
        }
LABEL_30:
        uint64_t v10 = (v23 - 1) & v23;
        long long v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      long long v32 = *(void *)(v5 + 56) + 48 * v21;
      uint64_t v33 = *(void **)v32;
      uint64_t v34 = *(void *)(v32 + 8);
      int v35 = *(void *)(v32 + 16);
      char v43 = *(_OWORD *)(v32 + 24);
      uint64_t v36 = *(unsigned char *)(v32 + 40);
      if ((v42 & 1) == 0)
      {
        swift_retain();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v37 = v33;
      }
      Hasher.init(_seed:)();
      _ViewList_ID.Canonical.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        int64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *unint64_t v18 = v30;
      v18[1] = v31;
      char v19 = *(void *)(v7 + 56) + 48 * v17;
      *(void *)char v19 = v33;
      *(void *)(v19 + 8) = v34;
      *(void *)(v19 + 16) = v35;
      *(_OWORD *)(v19 + 24) = v43;
      *(unsigned char *)(v19 + 40) = v36;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(void))type metadata accessor for _DictionaryStorage<UInt, ObjectIdentifier>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Int, [ObjectIdentifier]>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    long long v32 = v10;
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    int64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        char v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        long long v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        uint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          uint64_t v22 = v9[v8];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  *uint64_t v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                uint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        int64_t v12 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        int64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, NavigationDestinationResolverBase>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    long long v32 = v10;
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    int64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        char v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        long long v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        uint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          uint64_t v22 = v9[v8];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  *uint64_t v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                uint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        int64_t v12 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        int64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unsigned __int8 *v20;
  Swift::UInt v21;
  Swift::UInt v22;
  void *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  char v35;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<NavigationContentAbstractPosition, NavigationStackHostingController<AnyView>>();
  int v35 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v34 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v33) {
          goto LABEL_36;
        }
        unint64_t v18 = v34[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v33) {
            goto LABEL_36;
          }
          unint64_t v18 = v34[v8];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v33)
            {
LABEL_36:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_43;
              }
              long long v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v34 = -1 << v32;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_45;
                }
                if (v8 >= v33) {
                  goto LABEL_36;
                }
                unint64_t v18 = v34[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = (unsigned __int8 *)(*(void *)(v5 + 48) + 16 * v16);
      long long v21 = *v20;
      uint64_t v22 = *((void *)v20 + 1);
      unint64_t v23 = *(void **)(*(void *)(v5 + 56) + 8 * v16);
      if ((v35 & 1) == 0) {
        unint64_t v24 = v23;
      }
      Hasher.init(_seed:)();
      if (v21 == 3)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        Hasher._combine(_:)(1u);
        Hasher._combine(_:)(v21);
      }
      Hasher._combine(_:)(v22);
      uint64_t result = Hasher._finalize()();
      char v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      BOOL v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            BOOL v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        uint64_t v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = *(void *)(v7 + 48) + 16 * v13;
      *(unsigned char *)unint64_t v14 = v21;
      *(void *)(v14 + 8) = v22;
      *(void *)(*(void *)(v7 + 56) + 8 * v13) = v23;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_43:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UINavigationController, Set<NavigationStackHostingController<AnyView>>>();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  int64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  unint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      long long v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    uint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      unint64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        char v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          id v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            unint64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        unint64_t v14 = v25;
      }
    }
LABEL_30:
    uint64_t v10 = (v24 - 1) & v24;
    long long v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    long long v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      uint64_t v33 = v31;
      swift_bridgeObjectRetain();
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    int64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      BOOL v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          int64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    char v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, Toolbar.VendedItem>();
  char v43 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v42 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  char v40 = v2;
  int v41 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      long long v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v41) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    char v25 = *(void *)(v42 + 8 * v23);
    ++v13;
    if (!v25)
    {
      uint64_t v13 = v23 + 1;
      if (v23 + 1 >= v41) {
        goto LABEL_33;
      }
      char v25 = *(void *)(v42 + 8 * v13);
      if (!v25)
      {
        unint64_t v26 = v23 + 2;
        if (v26 >= v41)
        {
LABEL_33:
          swift_release();
          id v3 = v40;
          if ((v43 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        char v25 = *(void *)(v42 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            uint64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v41) {
              goto LABEL_33;
            }
            char v25 = *(void *)(v42 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v26;
      }
    }
LABEL_30:
    uint64_t v10 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    long long v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    int v35 = *(void *)(v5 + 56) + v31;
    uint64_t v36 = *(void **)v35;
    uint64_t v37 = *(unsigned char *)(v35 + 8);
    if ((v43 & 1) == 0)
    {
      uint64_t v38 = v36;
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      int64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = 16 * v17;
    char v19 = (void *)(*(void *)(v7 + 48) + v18);
    *char v19 = v34;
    v19[1] = v33;
    uint64_t v20 = *(void *)(v7 + 56) + v18;
    *(void *)uint64_t v20 = v36;
    *(unsigned char *)(v20 + 8) = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v40;
  unint64_t v24 = (void *)(v5 + 64);
  if ((v43 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int v39 = 1 << *(unsigned char *)(v5 + 32);
  if (v39 >= 64) {
    bzero(v24, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v39;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  int v19;
  uint64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  void *v31;
  char v32;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.Relationship, [AccessibilityNode]>();
  long long v32 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v30 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v8 << 6);
      }
      else
      {
        unint64_t v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v16 >= v30) {
          goto LABEL_36;
        }
        int64_t v17 = v31[v16];
        ++v8;
        if (!v17)
        {
          int64_t v8 = v16 + 1;
          if (v16 + 1 >= v30) {
            goto LABEL_36;
          }
          int64_t v17 = v31[v8];
          if (!v17)
          {
            unint64_t v18 = v16 + 2;
            if (v18 >= v30)
            {
LABEL_36:
              if ((v32 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_43;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v31 = -1 << v29;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v17 = v31[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v8 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_45;
                }
                if (v8 >= v30) {
                  goto LABEL_36;
                }
                int64_t v17 = v31[v8];
                ++v18;
                if (v17) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v18;
          }
        }
LABEL_21:
        unint64_t v11 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      char v19 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v15);
      uint64_t v20 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
      if ((v32 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      if ((v19 - 2) >= 3)
      {
        long long v21 = v19 & 1;
        Hasher._combine(_:)(0);
      }
      else
      {
        long long v21 = (v19 - 2) + 1;
      }
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v12 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v24);
        }
        while (v28 == -1);
        uint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(unsigned char *)(*(void *)(v7 + 48) + v13) = v19;
      *(void *)(*(void *)(v7 + 56) + 8 * v13) = v20;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_43:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  _OWORD *v16;
  long long v17;
  long long v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  long long *v25;
  long long v26;
  long long v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  long long v40;
  long long v41;
  Swift::UInt v42[2];

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityRelationshipScope.Key, [AccessibilityRelationshipScope.Relationship : [AccessibilityNode]]>, (void (*)(uint64_t))type metadata accessor for [AccessibilityRelationshipScope.Relationship : [AccessibilityNode]], (void (*)(void))lazy protocol witness table accessor for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key);
  uint64_t v6 = a2;
  uint64_t v7 = static _DictionaryStorage.resize(original:capacity:move:)();
  int64_t v8 = v7;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
  int v39 = v5 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v5 + 64);
  uint64_t v37 = v2;
  uint64_t v38 = (unint64_t)(v9 + 63) >> 6;
  int64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  unint64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      char v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      uint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    long long v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v38) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v39 + 8 * v21);
    ++v14;
    if (!v23)
    {
      unint64_t v14 = v21 + 1;
      if (v21 + 1 >= v38) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v39 + 8 * v14);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v38)
        {
LABEL_34:
          swift_release();
          id v3 = v37;
          if ((v6 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v39 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            unint64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v38) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v39 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v11 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    char v25 = (long long *)(*(void *)(v5 + 48) + 48 * v20);
    if (v6)
    {
      unint64_t v26 = *v25;
      BOOL v27 = v25[2];
      int v41 = v25[1];
      *(_OWORD *)char v42 = v27;
      char v40 = v26;
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    }
    else
    {
      outlined init with copy of AccessibilityRelationshipScope.Key((uint64_t)v25, (uint64_t)&v40);
      uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    AnyHashable.hash(into:)();
    Hasher._combine(_:)(v42[1]);
    uint64_t result = Hasher._finalize()();
    uint64_t v29 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      long long v32 = 0;
      uint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v34 = v31 == v33;
        if (v31 == v33) {
          uint64_t v31 = 0;
        }
        v32 |= v34;
        int v35 = *(void *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      unint64_t v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    unint64_t v16 = (_OWORD *)(*(void *)(v8 + 48) + 48 * v15);
    int64_t v17 = v40;
    unint64_t v18 = *(_OWORD *)v42;
    v16[1] = v41;
    v16[2] = v18;
    *unint64_t v16 = v17;
    *(void *)(*(void *)(v8 + 56) + 8 * v15) = v28;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  id v3 = v37;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v6 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD *v16;
  long long v17;
  long long v18;
  long long v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  long long *v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<AGAttribute, (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v38 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    int64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
    unint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        uint64_t v20 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        long long v21 = v20 | (v8 << 6);
      }
      else
      {
        uint64_t v22 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v22 >= v13) {
          goto LABEL_34;
        }
        unint64_t v23 = v9[v22];
        ++v8;
        if (!v23)
        {
          int64_t v8 = v22 + 1;
          if (v22 + 1 >= v13) {
            goto LABEL_34;
          }
          unint64_t v23 = v9[v8];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v13)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v38;
                goto LABEL_41;
              }
              uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
              if (v37 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v37;
              }
              id v3 = v38;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v23 = v9[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v8 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v13) {
                  goto LABEL_34;
                }
                unint64_t v23 = v9[v8];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v24;
          }
        }
LABEL_21:
        int64_t v12 = (v23 - 1) & v23;
        long long v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      char v25 = *(unsigned int *)(*(void *)(v5 + 48) + 4 * v21);
      unint64_t v26 = (long long *)(*(void *)(v5 + 56) + (v21 << 6));
      if (a2)
      {
        BOOL v27 = *v26;
        uint64_t v28 = v26[1];
        uint64_t v29 = v26[3];
        int v41 = v26[2];
        char v42 = v29;
        int v39 = v27;
        char v40 = v28;
      }
      else
      {
        outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])((uint64_t)v26, (uint64_t)&v39, (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
      }
      uint64_t result = MEMORY[0x18C118330](*(void *)(v7 + 40), v25, 4);
      uint64_t v30 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v31 = result & ~v30;
      long long v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v14 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v31) & ~*(void *)(v14 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          int v35 = v32 == v34;
          if (v32 == v34) {
            long long v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v14 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v15 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v15) = v25;
      unint64_t v16 = (_OWORD *)(*(void *)(v7 + 56) + (v15 << 6));
      int64_t v17 = v39;
      unint64_t v18 = v40;
      char v19 = v42;
      v16[2] = v41;
      v16[3] = v19;
      *unint64_t v16 = v17;
      v16[1] = v18;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  int v22;
  uint64_t v23;
  Swift::UInt v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  char v35;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.NodeRelation, Set<AccessibilityRelationshipScope.Key>>();
  int v35 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v34 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v33) {
          goto LABEL_36;
        }
        unint64_t v18 = v34[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v33) {
            goto LABEL_36;
          }
          unint64_t v18 = v34[v8];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v33)
            {
LABEL_36:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_43;
              }
              long long v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v34 = -1 << v32;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_45;
                }
                if (v8 >= v33) {
                  goto LABEL_36;
                }
                unint64_t v18 = v34[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(void *)(v5 + 48) + 16 * v16;
      long long v21 = *(void *)v20;
      uint64_t v22 = *(unsigned __int8 *)(v20 + 8);
      unint64_t v23 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
      if ((v35 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      if ((v22 - 2) >= 3)
      {
        unint64_t v24 = v22 & 1;
        Hasher._combine(_:)(0);
      }
      else
      {
        unint64_t v24 = (v22 - 2) + 1;
      }
      Hasher._combine(_:)(v24);
      uint64_t result = Hasher._finalize()();
      char v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      BOOL v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v26) & ~*(void *)(v12 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            BOOL v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v12 + 8 * v27);
        }
        while (v31 == -1);
        uint64_t v13 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = *(void *)(v7 + 48) + 16 * v13;
      *(void *)unint64_t v14 = v21;
      *(unsigned char *)(v14 + 8) = v22;
      *(void *)(*(void *)(v7 + 56) + 8 * v13) = v23;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_43:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  long long v17;
  long long v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  long long v39;
  long long v40;
  uint64_t v41;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<AnyHashable, DisplayList.Version>();
  uint64_t v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  int64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  unint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      char v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    long long v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      unint64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v14);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((v38 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            unint64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v14 = v24;
      }
    }
LABEL_21:
    uint64_t v10 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    char v25 = *(void *)(v5 + 48) + 40 * v20;
    if (v38)
    {
      unint64_t v26 = *(_OWORD *)v25;
      BOOL v27 = *(_OWORD *)(v25 + 16);
      int v41 = *(void *)(v25 + 32);
      int v39 = v26;
      char v40 = v27;
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v39);
    }
    uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      long long v32 = 0;
      uint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v34 = v31 == v33;
        if (v31 == v33) {
          uint64_t v31 = 0;
        }
        v32 |= v34;
        int v35 = *(void *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      unint64_t v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    unint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    int64_t v17 = v39;
    unint64_t v18 = v40;
    *(void *)(v16 + 32) = v41;
    *(_OWORD *)unint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    *(void *)(*(void *)(v7 + 56) + 8 * v15) = v28;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  Swift::UInt *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt *v20;
  Swift::UInt v21;
  Swift::UInt v22;
  long long *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  void *v33;
  char v34;
  long long v35[2];

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<EventID, EventType>();
  uint64_t v34 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v33 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    long long v32 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v32) {
          goto LABEL_34;
        }
        unint64_t v18 = v33[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v32) {
            goto LABEL_34;
          }
          unint64_t v18 = v33[v8];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v32)
            {
LABEL_34:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_41;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v33 = -1 << v31;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v33[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v32) {
                  goto LABEL_34;
                }
                unint64_t v18 = v33[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = (Swift::UInt *)(*(void *)(v5 + 48) + 16 * v16);
      uint64_t v22 = *v20;
      long long v21 = v20[1];
      unint64_t v23 = (long long *)(*(void *)(v5 + 56) + 40 * v16);
      if (v34) {
        outlined init with take of OptionalBinaryInteger(v23, (uint64_t)v35);
      }
      else {
        outlined init with copy of TableColumnList((uint64_t)v23, (uint64_t)v35);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      unint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      char v25 = result & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v25) & ~*(void *)(v12 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v27 = 0;
        uint64_t v28 = (unint64_t)(63 - v24) >> 6;
        do
        {
          if (++v26 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          uint64_t v29 = v26 == v28;
          if (v26 == v28) {
            unint64_t v26 = 0;
          }
          v27 |= v29;
          uint64_t v30 = *(void *)(v12 + 8 * v26);
        }
        while (v30 == -1);
        uint64_t v13 = __clz(__rbit64(~v30)) + (v26 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = (Swift::UInt *)(*(void *)(v7 + 48) + 16 * v13);
      *unint64_t v14 = v22;
      v14[1] = v21;
      uint64_t result = outlined init with take of OptionalBinaryInteger(v35, *(void *)(v7 + 56) + 40 * v13);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  void *v31;
  char v32[8];
  Swift::UInt v33;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<HashableWeakBox<UIViewController>, ScenePhase>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v30 = v2;
    int64_t v8 = 0;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v31[v8];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v30;
                goto LABEL_41;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v31 = -1 << v29;
              }
              id v3 = v30;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v31[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(void *)(v5 + 48) + 16 * v16;
      if (a2) {
        outlined init with take of HashableWeakBox<UIViewController>(v20, (uint64_t)v32);
      }
      else {
        outlined init with copy of HashableWeakBox<UIViewController>(v20, (uint64_t)v32);
      }
      long long v21 = *(unsigned char *)(*(void *)(v5 + 56) + v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v33);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t result = outlined init with take of HashableWeakBox<UIViewController>((uint64_t)v32, *(void *)(v7 + 48) + 16 * v14);
      *(unsigned char *)(*(void *)(v7 + 56) + v14) = v21;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void *__return_ptr, uint64_t);
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  uint64_t i;
  char v38;
  long long v39;
  void v40[5];

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationLinkSelectionIdentifier, Int>, (void (*)(void))lazy protocol witness table accessor for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier);
  uint64_t v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    int v35 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        int64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        unint64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        if (v18 >= v35) {
          goto LABEL_39;
        }
        char v19 = v36[v18];
        ++v13;
        if (!v19)
        {
          uint64_t v13 = v18 + 1;
          if (v18 + 1 >= v35) {
            goto LABEL_39;
          }
          char v19 = v36[v13];
          if (!v19)
          {
            uint64_t v20 = v18 + 2;
            if (v20 >= v35)
            {
LABEL_39:
              swift_release();
              id v3 = v2;
              if (v38)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            char v19 = v36[v20];
            if (!v19)
            {
              while (1)
              {
                uint64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_46;
                }
                if (v13 >= v35) {
                  goto LABEL_39;
                }
                char v19 = v36[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v13 = v20;
          }
        }
LABEL_21:
        uint64_t v10 = (v19 - 1) & v19;
        int64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      long long v21 = *(void *)(v5 + 48) + 32 * v17;
      unint64_t v23 = *(void *)v21;
      uint64_t v22 = *(void *)(v21 + 8);
      int v39 = *(_OWORD *)(v21 + 16);
      unint64_t v24 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
      if ((v38 & 1) == 0)
      {
        swift_retain();
        outlined copy of Text.LineStyle?(v22, v39);
      }
      Hasher.init(_seed:)();
      if (v23)
      {
        Hasher._combine(_:)(1u);
        char v25 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v23 + 96);
        unint64_t v26 = swift_retain();
        v25(v40, v26);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v40);
        swift_release();
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      if ((void)v39 == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        v40[0] = v22;
        v40[1] = v39;
        Hasher._combine(_:)(1u);
        _ViewList_ID.Canonical.hash(into:)();
      }
      Hasher._combine(_:)(*((Swift::UInt *)&v39 + 1));
      uint64_t result = Hasher._finalize()();
      BOOL v27 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          long long v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        unint64_t v14 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = *(void *)(v7 + 48) + 32 * v14;
      *(void *)unint64_t v15 = v23;
      *(void *)(v15 + 8) = v22;
      *(_OWORD *)(v15 + 16) = v39;
      *(void *)(*(void *)(v7 + 56) + 8 * v14) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  void *v36;
  char v37;
  long long v38;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, Decodable & Encodable.Type>();
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    int v35 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        uint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        long long v21 = v20 | (v13 << 6);
      }
      else
      {
        uint64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35) {
          goto LABEL_33;
        }
        unint64_t v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          uint64_t v13 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v23 = v36[v13];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              id v3 = v2;
              if (v37)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
                if (v34 >= 64) {
                  bzero(v36, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v34;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v23 = v36[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v13 = v24;
          }
        }
LABEL_30:
        uint64_t v10 = (v23 - 1) & v23;
        long long v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
      uint64_t v31 = *v29;
      uint64_t v30 = v29[1];
      long long v32 = *(void *)(v5 + 56) + 24 * v21;
      uint64_t v38 = *(_OWORD *)v32;
      uint64_t v33 = *(void *)(v32 + 16);
      if ((v37 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        int64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
      *unint64_t v18 = v31;
      v18[1] = v30;
      char v19 = *(void *)(v7 + 56) + 24 * v17;
      *(_OWORD *)char v19 = v38;
      *(void *)(v19 + 16) = v33;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  void *v29;
  long long v30;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<KeyCommandID, ()>, (void (*)(uint64_t))type metadata accessor for (), (void (*)(void))lazy protocol witness table accessor for type KeyCommandID and conformance KeyCommandID);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v29 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        long long v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          long long v21 = v29[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v29 = -1 << v28;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            long long v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                long long v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        char v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      BOOL v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v30 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          char v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        int64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(void *)(*(void *)(v7 + 48) + 8 * v17) = v27;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  uint64_t v8;
  int64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  char v35;
  long long v36;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<GridIndex, Int>, (void (*)(void))lazy protocol witness table accessor for type GridIndex and conformance GridIndex);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  int64_t v8 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_37;
  }
  int v35 = a2;
  uint64_t v9 = 0;
  uint64_t v10 = (void *)(v5 + 64);
  unint64_t v11 = 1 << *(unsigned char *)(v5 + 32);
  if (v11 < 64) {
    int64_t v12 = ~(-1 << v11);
  }
  else {
    int64_t v12 = -1;
  }
  uint64_t v13 = v12 & *(void *)(v5 + 64);
  unint64_t v14 = (unint64_t)(v11 + 63) >> 6;
  unint64_t v15 = v6 + 64;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      char v19 = v18 | (v9 << 6);
      goto LABEL_22;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1)) {
      goto LABEL_39;
    }
    if (v20 >= v14) {
      break;
    }
    long long v21 = v10[v20];
    ++v9;
    if (!v21)
    {
      uint64_t v9 = v20 + 1;
      if (v20 + 1 >= v14) {
        break;
      }
      long long v21 = v10[v9];
      if (!v21)
      {
        uint64_t v22 = v20 + 2;
        if (v22 >= v14) {
          break;
        }
        long long v21 = v10[v22];
        if (!v21)
        {
          while (1)
          {
            uint64_t v9 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_40;
            }
            if (v9 >= v14) {
              goto LABEL_31;
            }
            long long v21 = v10[v9];
            ++v22;
            if (v21) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v9 = v22;
      }
    }
LABEL_21:
    uint64_t v13 = (v21 - 1) & v21;
    char v19 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_22:
    unint64_t v23 = 8 * v19;
    *(void *)&uint64_t v7 = *(void *)(*(void *)(v5 + 48) + v23);
    uint64_t v36 = v7;
    unint64_t v24 = *(void *)(*(void *)(v5 + 56) + v23);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v36);
    Hasher._combine(_:)(DWORD1(v36));
    char v25 = Hasher._finalize()();
    unint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    BOOL v27 = v25 & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v15 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v16 = __clz(__rbit64((-1 << v27) & ~*(void *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    uint64_t v29 = 0;
    uint64_t v30 = (unint64_t)(63 - v26) >> 6;
    do
    {
      if (++v28 == v30 && (v29 & 1) != 0)
      {
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        JUMPOUT(0x187ECAE68);
      }
      uint64_t v31 = v28 == v30;
      if (v28 == v30) {
        uint64_t v28 = 0;
      }
      v29 |= v31;
      long long v32 = *(void *)(v15 + 8 * v28);
    }
    while (v32 == -1);
    unint64_t v16 = __clz(__rbit64(~v32)) + (v28 << 6);
LABEL_7:
    *(void *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    int64_t v17 = 8 * v16;
    *((void *)&v7 + 1) = *((void *)&v36 + 1);
    *(void *)(*(void *)(v8 + 48) + v17) = v36;
    *(void *)(*(void *)(v8 + 56) + v17) = v24;
    ++*(void *)(v8 + 16);
  }
LABEL_31:
  if (v35)
  {
    uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
    if (v33 >= 64) {
      bzero((void *)(v5 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      *uint64_t v10 = -1 << v33;
    }
    id v3 = v2;
    *(void *)(v5 + 16) = 0;
LABEL_37:
    uint64_t result = swift_release();
  }
  else
  {
    uint64_t result = swift_release();
    id v3 = v2;
  }
  *id v3 = v8;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  char v35;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, Int>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int v35 = a2;
    uint64_t v34 = v3;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    long long v32 = -1 << v10;
    uint64_t v33 = v10;
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    int64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
    unint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        int64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        char v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        uint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          uint64_t v20 = v9[v8];
          if (!v20)
          {
            long long v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v34;
                goto LABEL_38;
              }
              if (v33 >= 64) {
                bzero((void *)(v5 + 64), 8 * v13);
              }
              else {
                *uint64_t v9 = v32;
              }
              id v3 = v34;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                uint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        int64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = 8 * v18;
      unint64_t v23 = *(void *)(*(void *)(v5 + 48) + v22);
      unint64_t v24 = *(void *)(*(void *)(v5 + 56) + v22);
      uint64_t result = static Hasher._hash(seed:_:)();
      char v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      BOOL v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v26) & ~*(void *)(v14 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v28 = 0;
        uint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v30 = v27 == v29;
          if (v27 == v29) {
            BOOL v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v14 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v15 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = 8 * v15;
      *(void *)(*(void *)(v7 + 48) + v16) = v23;
      *(void *)(*(void *)(v7 + 56) + v16) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt32 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  void *v30;
  unsigned char v31[192];

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, ConfirmationDialog>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v29 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v8 << 6);
      }
      else
      {
        unint64_t v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v16 >= v29) {
          goto LABEL_34;
        }
        int64_t v17 = v30[v16];
        ++v8;
        if (!v17)
        {
          int64_t v8 = v16 + 1;
          if (v16 + 1 >= v29) {
            goto LABEL_34;
          }
          int64_t v17 = v30[v8];
          if (!v17)
          {
            unint64_t v18 = v16 + 2;
            if (v18 >= v29)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_41;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v28;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v17 = v30[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v8 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v29) {
                  goto LABEL_34;
                }
                int64_t v17 = v30[v8];
                ++v18;
                if (v17) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v18;
          }
        }
LABEL_21:
        unint64_t v11 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      char v19 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v15);
      uint64_t v20 = *(void *)(v5 + 56) + 184 * v15;
      if (a2) {
        outlined init with take of ConfirmationDialog(v20, (uint64_t)v31);
      }
      else {
        outlined init with copy of ConfirmationDialog(v20, (uint64_t)v31);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v19);
      uint64_t result = Hasher._finalize()();
      long long v21 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          unint64_t v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v12 + 8 * v23);
        }
        while (v27 == -1);
        uint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v13) = v19;
      uint64_t result = outlined init with take of ConfirmationDialog((uint64_t)v31, *(void *)(v7 + 56) + 184 * v13);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  _OWORD *v22;
  id v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  char v35;
  _OWORD v36[2];

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>();
  int v35 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v33 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v33) {
      break;
    }
    unint64_t v18 = (void *)(v5 + 64);
    char v19 = *(void *)(v34 + 8 * v17);
    ++v13;
    if (!v19)
    {
      uint64_t v13 = v17 + 1;
      if (v17 + 1 >= v33) {
        goto LABEL_34;
      }
      char v19 = *(void *)(v34 + 8 * v13);
      if (!v19)
      {
        uint64_t v20 = v17 + 2;
        if (v20 >= v33)
        {
LABEL_34:
          swift_release();
          if ((v35 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        char v19 = *(void *)(v34 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            uint64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v33) {
              goto LABEL_34;
            }
            char v19 = *(void *)(v34 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v20;
      }
    }
LABEL_21:
    uint64_t v10 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    long long v21 = *(void **)(*(void *)(v5 + 48) + 8 * v16);
    uint64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
    if (v35)
    {
      outlined init with take of Any(v22, v36);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v22, (uint64_t)v36);
      unint64_t v23 = v21;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    unint64_t v24 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    char v25 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v26 = v24 & ~v25;
    BOOL v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v28 = 0;
      uint64_t v29 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v30 = v27 == v29;
        if (v27 == v29) {
          BOOL v27 = 0;
        }
        v28 |= v30;
        uint64_t v31 = *(void *)(v11 + 8 * v27);
      }
      while (v31 == -1);
      unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v21;
    uint64_t result = (uint64_t)outlined init with take of Any(v36, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v18 = (void *)(v5 + 64);
  if ((v35 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  long long v32 = 1 << *(unsigned char *)(v5 + 32);
  if (v32 >= 64) {
    bzero(v18, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v18 = -1 << v32;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  long long v41;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, TabItemGroup.HostCache>();
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v37 = v2;
  uint64_t v38 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      long long v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    uint64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v38) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v39 + 8 * v22);
    ++v13;
    if (!v24)
    {
      uint64_t v13 = v22 + 1;
      if (v22 + 1 >= v38) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v39 + 8 * v13);
      if (!v24)
      {
        char v25 = v22 + 2;
        if (v25 >= v38)
        {
LABEL_33:
          swift_release();
          id v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v39 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            uint64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v38) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v39 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v25;
      }
    }
LABEL_30:
    uint64_t v10 = (v24 - 1) & v24;
    long long v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    long long v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(v5 + 56) + 32 * v21;
    uint64_t v34 = *(void *)v33;
    int v35 = *(void *)(v33 + 8);
    int v41 = *(_OWORD *)(v33 + 16);
    if ((v40 & 1) == 0)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      BOOL v27 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v16 == v27;
        if (v16 == v27) {
          unint64_t v16 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v16);
      }
      while (v29 == -1);
      int64_t v17 = __clz(__rbit64(~v29)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v32;
    v18[1] = v31;
    char v19 = *(void *)(v7 + 56) + 32 * v17;
    *(void *)char v19 = v34;
    *(void *)(v19 + 8) = v35;
    *(_OWORD *)(v19 + 16) = v41;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v37;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, Int>();
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int v35 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      char v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    long long v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v35) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v13);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v35)
        {
LABEL_33:
          swift_release();
          id v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v35) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v24;
      }
    }
LABEL_30:
    uint64_t v10 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    long long v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v37 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      int64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v34;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  long long v17;
  long long v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  long long v39;
  long long v40;
  uint64_t v41;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<AnyHashable, Int>();
  uint64_t v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  int64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  unint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      char v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    long long v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v14;
    if (!v23)
    {
      unint64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v14);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((v38 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            unint64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v14 = v24;
      }
    }
LABEL_21:
    uint64_t v10 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    char v25 = *(void *)(v5 + 48) + 40 * v20;
    if (v38)
    {
      unint64_t v26 = *(_OWORD *)v25;
      BOOL v27 = *(_OWORD *)(v25 + 16);
      int v41 = *(void *)(v25 + 32);
      int v39 = v26;
      char v40 = v27;
    }
    else
    {
      outlined init with copy of AnyHashable(v25, (uint64_t)&v39);
    }
    uint64_t v28 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      long long v32 = 0;
      uint64_t v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v34 = v31 == v33;
        if (v31 == v33) {
          uint64_t v31 = 0;
        }
        v32 |= v34;
        int v35 = *(void *)(v12 + 8 * v31);
      }
      while (v35 == -1);
      unint64_t v15 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    unint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    int64_t v17 = v39;
    unint64_t v18 = v40;
    *(void *)(v16 + 32) = v41;
    *(_OWORD *)unint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    *(void *)(*(void *)(v7 + 56) + 8 * v15) = v28;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v22, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned char *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  char *v33;
  char v34;
  char v35;
  uint64_t v36;
  int64_t v37;
  void *v38;
  uint64_t i;
  char v40;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v38 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v37 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    for (i = v5; ; uint64_t v5 = i)
    {
      if (v10)
      {
        uint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        long long v21 = v20 | (v13 << 6);
      }
      else
      {
        uint64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v13;
        if (!v23)
        {
          uint64_t v13 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v13];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              swift_release();
              id v3 = v2;
              if (v40)
              {
                uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
                if (v36 >= 64) {
                  bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v38 = -1 << v36;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v13 = v24;
          }
        }
LABEL_30:
        uint64_t v10 = (v23 - 1) & v23;
        long long v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = *(void *)(v5 + 48) + 24 * v21;
      uint64_t v31 = *(void *)v29;
      uint64_t v30 = *(void *)(v29 + 8);
      long long v32 = *(unsigned __int8 *)(v29 + 16);
      uint64_t v33 = (char *)(*(void *)(v5 + 56) + 2 * v21);
      uint64_t v34 = *v33;
      int v35 = v33[1];
      if ((v40 & 1) == 0) {
        outlined copy of TabCustomizationID.Base();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v32);
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
      {
        int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v16 == v26;
          if (v16 == v26) {
            unint64_t v16 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v16);
        }
        while (v28 == -1);
        int64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
      }
      *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = *(void *)(v7 + 48) + 24 * v17;
      *(void *)unint64_t v18 = v31;
      *(void *)(v18 + 8) = v30;
      *(unsigned char *)(v18 + 16) = v32;
      char v19 = (unsigned char *)(*(void *)(v7 + 56) + 2 * v17);
      *char v19 = v34;
      v19[1] = v35;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabSectionCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
  uint64_t v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  int v35 = v2;
  uint64_t v36 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      char v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    long long v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          id v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v24;
      }
    }
LABEL_30:
    uint64_t v10 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = *(void *)(v5 + 48) + 24 * v20;
    uint64_t v31 = *(void *)v29;
    uint64_t v30 = *(void *)(v29 + 8);
    long long v32 = *(unsigned __int8 *)(v29 + 16);
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      outlined copy of TabCustomizationID.Base();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v32);
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      int64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = *(void *)(v7 + 48) + 24 * v17;
    *(void *)unint64_t v18 = v31;
    *(void *)(v18 + 8) = v30;
    *(unsigned char *)(v18 + 16) = v32;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  id v4 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, ScrollViewCommitInfo>();
  char v43 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 0;
    int v41 = (uint64_t *)(v4 + 64);
    char v42 = v4;
    int64_t v8 = 1 << *(unsigned char *)(v4 + 32);
    uint64_t v37 = -1 << v8;
    uint64_t v38 = v8;
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v4 + 64);
    char v40 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v11 = result + 64;
    while (1)
    {
      if (v10)
      {
        int64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        char v44 = v7;
        unint64_t v18 = v17 | (v7 << 6);
      }
      else
      {
        char v19 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v41;
        if (v19 >= v40) {
          goto LABEL_33;
        }
        uint64_t v20 = v41[v19];
        long long v21 = v7 + 1;
        if (!v20)
        {
          long long v21 = v19 + 1;
          if (v19 + 1 >= v40) {
            goto LABEL_33;
          }
          uint64_t v20 = v41[v21];
          if (!v20)
          {
            uint64_t v22 = v19 + 2;
            if (v22 >= v40)
            {
LABEL_33:
              if ((v43 & 1) == 0) {
                break;
              }
              if (v38 >= 64) {
                bzero(v41, 8 * v40);
              }
              else {
                *int v41 = v37;
              }
              uint64_t v36 = v39;
              *(void *)(v4 + 16) = 0;
              uint64_t result = swift_release();
              goto LABEL_39;
            }
            uint64_t v20 = v41[v22];
            if (!v20)
            {
              while (1)
              {
                long long v21 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v21 >= v40) {
                  goto LABEL_33;
                }
                uint64_t v20 = v41[v21];
                ++v22;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            long long v21 = v22;
          }
        }
LABEL_30:
        uint64_t v10 = (v20 - 1) & v20;
        char v44 = v21;
        unint64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      BOOL v27 = *(void *)(v4 + 56);
      uint64_t v28 = *(unsigned int *)(*(void *)(v4 + 48) + 4 * v18);
      uint64_t v29 = (uint64_t *)(v27 + 80 * v18);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      long long v32 = v29[2];
      uint64_t v33 = v29[3];
      uint64_t v34 = v29[4];
      uint64_t v48 = v29[5];
      int v35 = v29[6];
      long long v46 = v29[8];
      long long v47 = v29[7];
      char v45 = v29[9];
      if ((v43 & 1) == 0) {
        outlined copy of ScrollViewCommitInfo(v30, v31, v32, v33, v34, v48, v35, v47, v46);
      }
      uint64_t result = MEMORY[0x18C118330](*(void *)(v6 + 40), v28, 4);
      int64_t v12 = -1 << *(unsigned char *)(v6 + 32);
      uint64_t v13 = result & ~v12;
      unint64_t v14 = v13 >> 6;
      if (((-1 << v13) & ~*(void *)(v11 + 8 * (v13 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v13) & ~*(void *)(v11 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v12) >> 6;
        do
        {
          if (++v14 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          char v25 = v14 == v24;
          if (v14 == v24) {
            unint64_t v14 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v11 + 8 * v14);
        }
        while (v26 == -1);
        unint64_t v15 = __clz(__rbit64(~v26)) + (v14 << 6);
      }
      *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_DWORD *)(*(void *)(v6 + 48) + 4 * v15) = v28;
      unint64_t v16 = (uint64_t *)(*(void *)(v6 + 56) + 80 * v15);
      *unint64_t v16 = v30;
      v16[1] = v31;
      v16[2] = v32;
      v16[3] = v33;
      v16[4] = v34;
      v16[5] = v48;
      v16[6] = v35;
      v16[7] = v47;
      uint64_t v7 = v44;
      v16[8] = v46;
      v16[9] = v45;
      ++*(void *)(v6 + 16);
      id v4 = v42;
    }
  }
  uint64_t result = swift_release();
  uint64_t v36 = v39;
LABEL_39:
  *uint64_t v36 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  long long v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  void *v31;
  long long v32;
  char v33[72];

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<SensoryFeedback.FeedbackType, UIFeedbackGenerator>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        char v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        long long v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v21 >= v12) {
          goto LABEL_33;
        }
        uint64_t v22 = v31[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v12) {
            goto LABEL_33;
          }
          uint64_t v22 = v31[v8];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v31, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v31 = -1 << v30;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v22 = v31[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                uint64_t v22 = v31[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v11 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      long long v32 = *(_OWORD *)(*(void *)(v5 + 48) + 16 * v20);
      uint64_t v28 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
      if ((a2 & 1) == 0) {
        uint64_t v29 = v28;
      }
      Hasher.init(_seed:)();
      SensoryFeedback.FeedbackType.hash(into:)((uint64_t)v33, v32, *((Swift::UInt64 *)&v32 + 1));
      uint64_t result = Hasher._finalize()();
      unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
        unint64_t v18 = v32;
      }
      else
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v14) >> 6;
        unint64_t v18 = v32;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        int64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_OWORD *)(*(void *)(v7 + 48) + 16 * v17) = v18;
      *(void *)(*(void *)(v7 + 56) + 8 * v17) = v28;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t *v32;
  long long v33;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UIDragItem, CGPoint>();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    long long v32 = v2;
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v9 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v10 = ~(-1 << v8);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 64;
    uint64_t result = swift_retain();
    unint64_t v15 = 0;
    while (1)
    {
      if (v11)
      {
        uint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        long long v21 = v20 | (v15 << 6);
      }
      else
      {
        uint64_t v22 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v22 >= v12) {
          goto LABEL_33;
        }
        unint64_t v23 = v9[v22];
        ++v15;
        if (!v23)
        {
          unint64_t v15 = v22 + 1;
          if (v22 + 1 >= v12) {
            goto LABEL_33;
          }
          unint64_t v23 = v9[v15];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v12)
            {
LABEL_33:
              swift_release();
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v32;
                goto LABEL_40;
              }
              uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
              if (v31 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v31;
              }
              id v3 = v32;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v23 = v9[v24];
            if (!v23)
            {
              while (1)
              {
                unint64_t v15 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v15 >= v12) {
                  goto LABEL_33;
                }
                unint64_t v23 = v9[v15];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            unint64_t v15 = v24;
          }
        }
LABEL_30:
        unint64_t v11 = (v23 - 1) & v23;
        long long v21 = __clz(__rbit64(v23)) + (v15 << 6);
      }
      uint64_t v29 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
      uint64_t v33 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v21);
      if ((a2 & 1) == 0) {
        uint64_t v30 = v29;
      }
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
      unint64_t v16 = -1 << *(unsigned char *)(v7 + 32);
      int64_t v17 = result & ~v16;
      unint64_t v18 = v17 >> 6;
      if (((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        char v19 = __clz(__rbit64((-1 << v17) & ~*(void *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v18 == v26;
          if (v18 == v26) {
            unint64_t v18 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v18);
        }
        while (v28 == -1);
        char v19 = __clz(__rbit64(~v28)) + (v18 << 6);
      }
      *(void *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      *(void *)(*(void *)(v7 + 48) + 8 * v19) = v29;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v19) = v33;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  void *v30;
  long long *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  long long v35;
  long long v36;
  long long v37;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UIDragItem, CGAffineTransform>();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  int64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  unint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      long long v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    uint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v34 + 8 * v22);
    ++v14;
    if (!v24)
    {
      unint64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v34 + 8 * v14);
      if (!v24)
      {
        char v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v34 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            unint64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v34 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        unint64_t v14 = v25;
      }
    }
LABEL_30:
    uint64_t v10 = (v24 - 1) & v24;
    long long v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = *(void **)(*(void *)(v5 + 48) + 8 * v21);
    uint64_t v31 = (long long *)(*(void *)(v5 + 56) + 48 * v21);
    uint64_t v36 = v31[1];
    uint64_t v37 = *v31;
    int v35 = v31[2];
    if ((a2 & 1) == 0) {
      long long v32 = v30;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v7 + 40));
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    int64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      BOOL v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          int64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    *(void *)(*(void *)(v7 + 48) + 8 * v18) = v30;
    char v19 = (_OWORD *)(*(void *)(v7 + 56) + 48 * v18);
    *char v19 = v37;
    v19[1] = v36;
    v19[2] = v35;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v23, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, Int>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  unint64_t v11 = (unint64_t)(v8 + 63) >> 6;
  int64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  unint64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      long long v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    uint64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      unint64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        char v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          id v3 = v35;
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            unint64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        unint64_t v14 = v25;
      }
    }
LABEL_30:
    uint64_t v10 = (v24 - 1) & v24;
    long long v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v21);
    uint64_t v31 = *v30;
    long long v32 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0) {
      swift_retain();
    }
    Hasher.init(_seed:)();
    _ViewList_ID.Canonical.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    int64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      BOOL v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          int64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    char v19 = (void *)(*(void *)(v7 + 48) + 16 * v18);
    *char v19 = v31;
    v19[1] = v32;
    *(void *)(*(void *)(v7 + 56) + 8 * v18) = v33;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v35;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  long long v39;

  id v3 = v2;
  uint64_t v5 = type metadata accessor for CommandGroupPlacementBox(0);
  uint64_t v38 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v8 = *v2;
  type metadata accessor for _DictionaryStorage<CommandGroupPlacementBox, CommandAccumulator>();
  uint64_t v9 = a2;
  uint64_t v10 = static _DictionaryStorage.resize(original:capacity:move:)();
  unint64_t v11 = v10;
  if (*(void *)(v8 + 16))
  {
    int v35 = v2;
    int64_t v12 = 1 << *(unsigned char *)(v8 + 32);
    uint64_t v13 = *(void *)(v8 + 64);
    uint64_t v37 = (void *)(v8 + 64);
    if (v12 < 64) {
      unint64_t v14 = ~(-1 << v12);
    }
    else {
      unint64_t v14 = -1;
    }
    unint64_t v15 = v14 & v13;
    uint64_t v36 = (unint64_t)(v12 + 63) >> 6;
    unint64_t v16 = v10 + 64;
    uint64_t result = swift_retain();
    unint64_t v18 = 0;
    while (1)
    {
      if (v15)
      {
        uint64_t v20 = __clz(__rbit64(v15));
        v15 &= v15 - 1;
        long long v21 = v20 | (v18 << 6);
      }
      else
      {
        uint64_t v22 = v18 + 1;
        if (__OFADD__(v18, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v22 >= v36) {
          goto LABEL_34;
        }
        unint64_t v23 = v37[v22];
        ++v18;
        if (!v23)
        {
          unint64_t v18 = v22 + 1;
          if (v22 + 1 >= v36) {
            goto LABEL_34;
          }
          unint64_t v23 = v37[v18];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v36)
            {
LABEL_34:
              swift_release();
              id v3 = v35;
              if (v9)
              {
                uint64_t v34 = 1 << *(unsigned char *)(v8 + 32);
                if (v34 >= 64) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v37 = -1 << v34;
                }
                *(void *)(v8 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v37[v24];
            if (!v23)
            {
              while (1)
              {
                unint64_t v18 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_41;
                }
                if (v18 >= v36) {
                  goto LABEL_34;
                }
                unint64_t v23 = v37[v18];
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
            unint64_t v18 = v24;
          }
        }
LABEL_21:
        unint64_t v15 = (v23 - 1) & v23;
        long long v21 = __clz(__rbit64(v23)) + (v18 << 6);
      }
      char v25 = *(void *)(v38 + 72);
      unint64_t v26 = *(void *)(v8 + 48) + v25 * v21;
      if (v9)
      {
        outlined init with take of (key: String, value: Any)?(v26, (uint64_t)v7, type metadata accessor for CommandGroupPlacementBox);
        int v39 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v21);
      }
      else
      {
        outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])(v26, (uint64_t)v7, type metadata accessor for CommandGroupPlacementBox);
        int v39 = *(_OWORD *)(*(void *)(v8 + 56) + 16 * v21);
        swift_retain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      type metadata accessor for CommandGroupPlacement(0);
      UUID.hash(into:)();
      uint64_t result = Hasher._finalize()();
      BOOL v27 = -1 << *(unsigned char *)(v11 + 32);
      uint64_t v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v16 + 8 * (v28 >> 6))) != 0)
      {
        char v19 = __clz(__rbit64((-1 << v28) & ~*(void *)(v16 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          long long v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v16 + 8 * v29);
        }
        while (v33 == -1);
        char v19 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v16 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      uint64_t result = outlined init with take of (key: String, value: Any)?((uint64_t)v7, *(void *)(v11 + 48) + v25 * v19, type metadata accessor for CommandGroupPlacementBox);
      *(_OWORD *)(*(void *)(v11 + 56) + 16 * v19) = v39;
      ++*(void *)(v11 + 16);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v11;
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::UInt *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt *v26;
  Swift::UInt v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void *v32;
  char v33;

  id v4 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBinding>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t v33 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 0;
    long long v32 = (void *)(v4 + 64);
    int64_t v8 = 1 << *(unsigned char *)(v4 + 32);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v4 + 64);
    uint64_t v31 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v11 = result + 64;
    while (1)
    {
      if (v10)
      {
        int64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v18 = v17 | (v7 << 6);
      }
      else
      {
        char v19 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v4 + 64;
        if (v19 >= v31) {
          goto LABEL_33;
        }
        uint64_t v20 = v32[v19];
        ++v7;
        if (!v20)
        {
          uint64_t v7 = v19 + 1;
          if (v19 + 1 >= v31) {
            goto LABEL_33;
          }
          uint64_t v20 = v32[v7];
          if (!v20)
          {
            long long v21 = v19 + 2;
            if (v21 >= v31)
            {
LABEL_33:
              if (v33)
              {
                uint64_t v30 = 1 << *(unsigned char *)(v4 + 32);
                if (v30 >= 64) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v32 = -1 << v30;
                }
                *(void *)(v4 + 16) = 0;
              }
              break;
            }
            uint64_t v20 = v32[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v7 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v7 >= v31) {
                  goto LABEL_33;
                }
                uint64_t v20 = v32[v7];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v7 = v21;
          }
        }
LABEL_30:
        uint64_t v10 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v7 << 6);
      }
      unint64_t v26 = (Swift::UInt *)(*(void *)(v4 + 48) + 16 * v18);
      uint64_t v28 = *v26;
      BOOL v27 = v26[1];
      uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
      if ((v33 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      int64_t v12 = -1 << *(unsigned char *)(v6 + 32);
      uint64_t v13 = result & ~v12;
      unint64_t v14 = v13 >> 6;
      if (((-1 << v13) & ~*(void *)(v11 + 8 * (v13 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v13) & ~*(void *)(v11 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v12) >> 6;
        do
        {
          if (++v14 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v24 = v14 == v23;
          if (v14 == v23) {
            unint64_t v14 = 0;
          }
          v22 |= v24;
          char v25 = *(void *)(v11 + 8 * v14);
        }
        while (v25 == -1);
        unint64_t v15 = __clz(__rbit64(~v25)) + (v14 << 6);
      }
      *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = (Swift::UInt *)(*(void *)(v6 + 48) + 16 * v15);
      *unint64_t v16 = v28;
      v16[1] = v27;
      *(void *)(*(void *)(v6 + 56) + 8 * v15) = v29;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v2 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt32 v20;
  _OWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _OWORD v31[2];

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<_ViewDebug.Property, Any>, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Property and conformance _ViewDebug.Property);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v30[v8];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_41;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v29;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v30[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      long long v21 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
      if (a2) {
        outlined init with take of Any(v21, v31);
      }
      else {
        outlined init with copy of Any((uint64_t)v21, (uint64_t)v31);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      uint64_t result = (uint64_t)outlined init with take of Any(v31, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  long long v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  long long v33;
  long long v34;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.Index.ID, DisplayList.AccessibilityUpdater.CacheValue>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.Index.ID and conformance DisplayList.Index.ID);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    int64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
    unint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        long long v21 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v22 = v21 | (v8 << 6);
      }
      else
      {
        unint64_t v23 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v23 >= v13) {
          goto LABEL_33;
        }
        unint64_t v24 = v9[v23];
        ++v8;
        if (!v24)
        {
          int64_t v8 = v23 + 1;
          if (v23 + 1 >= v13) {
            goto LABEL_33;
          }
          unint64_t v24 = v9[v8];
          if (!v24)
          {
            char v25 = v23 + 2;
            if (v25 >= v13)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              long long v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v32;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v24 = v9[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v8 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v13) {
                  goto LABEL_33;
                }
                unint64_t v24 = v9[v8];
                ++v25;
                if (v24) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v25;
          }
        }
LABEL_30:
        int64_t v12 = (v24 - 1) & v24;
        uint64_t v22 = __clz(__rbit64(v24)) + (v8 << 6);
      }
      uint64_t v30 = 16 * v22;
      uint64_t v33 = *(_OWORD *)(*(void *)(v5 + 56) + v30);
      uint64_t v34 = *(_OWORD *)(*(void *)(v5 + 48) + v30);
      if ((a2 & 1) == 0)
      {
        uint64_t v31 = (id)v33;
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v34);
      Hasher._combine(_:)(DWORD1(v34));
      Hasher._combine(_:)(DWORD2(v34));
      Hasher._combine(_:)(HIDWORD(v34));
      uint64_t result = Hasher._finalize()();
      unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = result & ~v15;
      int64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v14 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        char v19 = v34;
      }
      else
      {
        unint64_t v26 = 0;
        BOOL v27 = (unint64_t)(63 - v15) >> 6;
        char v19 = v34;
        do
        {
          if (++v17 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v28 = v17 == v27;
          if (v17 == v27) {
            int64_t v17 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v14 + 8 * v17);
        }
        while (v29 == -1);
        unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
      }
      *(void *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      uint64_t v20 = 16 * v18;
      *(_OWORD *)(*(void *)(v7 + 48) + v20) = v19;
      *(_OWORD *)(*(void *)(v7 + 56) + v20) = v33;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<AccessibilityAttachmentToken, DisplayList.Version>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_38;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int v35 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    unint64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    char v19 = (void *)(v5 + 64);
    uint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      uint64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_31;
      }
      uint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        long long v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_31:
          swift_release();
          id v3 = v34;
          if ((a2 & 1) == 0) {
            goto LABEL_38;
          }
          goto LABEL_34;
        }
        uint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            uint64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_40;
            }
            if (v13 >= v35) {
              goto LABEL_31;
            }
            uint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v21;
      }
    }
LABEL_21:
    uint64_t v10 = (v20 - 1) & v20;
    int64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    uint64_t v22 = *(void *)(v5 + 48) + 12 * v17;
    unint64_t v23 = *(unsigned char *)(v22 + 8);
    unint64_t v24 = *(void *)v22;
    char v25 = *(void *)(*(void *)(v5 + 56) + 8 * v17);
    Hasher.init(_seed:)();
    AccessibilityAttachmentToken.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    BOOL v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0;
        }
        v29 |= v31;
        long long v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = *(void *)(v7 + 48) + 12 * v14;
    *(void *)unint64_t v15 = v24;
    *(unsigned char *)(v15 + 8) = v23;
    *(void *)(*(void *)(v7 + 56) + 8 * v14) = v25;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v34;
  char v19 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_38:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(void))type metadata accessor for _DictionaryStorage<Int, Int>);
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(void))type metadata accessor for _DictionaryStorage<String, MainMenuItemCoordinator>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  void *v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt v22;
  Swift::Int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t *v33;
  int64_t v34;
  uint64_t v35;
  _OWORD v36[2];
  uint64_t v37;
  long long v38;
  long long v39;
  uint64_t v40;
  unsigned char v41[48];

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, AnyShapeStyle>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_51;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v33 = v2;
  uint64_t v34 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
LABEL_8:
  if (v10)
  {
    unint64_t v14 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v15 = v14 | (v12 << 6);
    goto LABEL_22;
  }
  unint64_t v16 = v12 + 1;
  if (__OFADD__(v12, 1)) {
    goto LABEL_52;
  }
  if (v16 >= v34)
  {
    swift_release();
    id v3 = v33;
    int64_t v17 = (void *)(v5 + 64);
    if (a2)
    {
LABEL_47:
      uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
      if (v31 >= 64) {
        bzero(v17, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *int64_t v17 = -1 << v31;
      }
      *(void *)(v5 + 16) = 0;
    }
  }
  else
  {
    int64_t v17 = (void *)(v5 + 64);
    unint64_t v18 = *(void *)(v35 + 8 * v16);
    ++v12;
    if (v18) {
      goto LABEL_21;
    }
    int64_t v12 = v16 + 1;
    if (v16 + 1 >= v34) {
      goto LABEL_44;
    }
    unint64_t v18 = *(void *)(v35 + 8 * v12);
    if (v18)
    {
LABEL_21:
      uint64_t v10 = (v18 - 1) & v18;
      unint64_t v15 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_22:
      uint64_t v20 = *(void *)(v5 + 48) + 40 * v15;
      if (a2)
      {
        outlined init with take of ToolbarPlacement.Role(v20, (uint64_t)v41);
        long long v21 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
      }
      else
      {
        outlined init with copy of ToolbarPlacement.Role(v20, (uint64_t)v41);
        long long v21 = *(void *)(*(void *)(v5 + 56) + 8 * v15);
        swift_retain();
      }
      Hasher.init(_seed:)();
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v41, (uint64_t)&v38);
      switch(*((void *)&v39 + 1))
      {
        case 0:
          uint64_t v22 = 0;
          goto LABEL_34;
        case 1:
          uint64_t v22 = 1;
          goto LABEL_34;
        case 2:
          uint64_t v22 = 2;
          goto LABEL_34;
        case 3:
          uint64_t v22 = 3;
          goto LABEL_34;
        case 4:
          uint64_t v22 = 4;
          goto LABEL_34;
        case 5:
          uint64_t v22 = 5;
          goto LABEL_34;
        case 6:
          uint64_t v22 = 7;
LABEL_34:
          Hasher._combine(_:)(v22);
          break;
        default:
          v36[0] = v38;
          v36[1] = v39;
          uint64_t v37 = v40;
          Hasher._combine(_:)(6uLL);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v36);
          break;
      }
      unint64_t v23 = Hasher._finalize()();
      unint64_t v24 = -1 << *(unsigned char *)(v7 + 32);
      char v25 = v23 & ~v24;
      unint64_t v26 = v25 >> 6;
      if (((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v25) & ~*(void *)(v11 + 8 * (v25 >> 6)))) | v25 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      BOOL v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v24) >> 6;
      while (++v26 != v28 || (v27 & 1) == 0)
      {
        uint64_t v29 = v26 == v28;
        if (v26 == v28) {
          unint64_t v26 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v26);
        if (v30 != -1)
        {
          uint64_t v13 = __clz(__rbit64(~v30)) + (v26 << 6);
LABEL_7:
          *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          outlined init with take of ToolbarPlacement.Role((uint64_t)v41, *(void *)(v7 + 48) + 40 * v13);
          *(void *)(*(void *)(v7 + 56) + 8 * v13) = v21;
          ++*(void *)(v7 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_52:
      __break(1u);
LABEL_53:
      __break(1u);
      JUMPOUT(0x187ECEB5CLL);
    }
    char v19 = v16 + 2;
    if (v19 < v34)
    {
      unint64_t v18 = *(void *)(v35 + 8 * v19);
      if (!v18)
      {
        while (1)
        {
          int64_t v12 = v19 + 1;
          if (__OFADD__(v19, 1)) {
            goto LABEL_53;
          }
          if (v12 >= v34) {
            goto LABEL_44;
          }
          unint64_t v18 = *(void *)(v35 + 8 * v12);
          ++v19;
          if (v18) {
            goto LABEL_21;
          }
        }
      }
      int64_t v12 = v19;
      goto LABEL_21;
    }
LABEL_44:
    swift_release();
    id v3 = v33;
    if (a2) {
      goto LABEL_47;
    }
  }
LABEL_51:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt32 v27;
  uint64_t v28;
  void *v29;
  long long v30;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, (_:)>, (void (*)(uint64_t))type metadata accessor for (_:), (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v29 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v12) {
          goto LABEL_33;
        }
        long long v21 = v29[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v12) {
            goto LABEL_33;
          }
          long long v21 = v29[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v12)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v29, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v29 = -1 << v28;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            long long v21 = v29[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v12) {
                  goto LABEL_33;
                }
                long long v21 = v29[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        char v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      BOOL v27 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v19);
      uint64_t v30 = *(_OWORD *)(*(void *)(v5 + 56) + 16 * v19);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          char v25 = v16 == v24;
          if (v16 == v24) {
            unint64_t v16 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        int64_t v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v17) = v27;
      *(_OWORD *)(*(void *)(v7 + 56) + 16 * v17) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::UInt *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt *v28;
  Swift::UInt v29;
  Swift::UInt v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  void *v39;
  uint64_t v40;
  char v41;
  char v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, TouchEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  int v41 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    int v39 = (void *)(v5 + 64);
    char v40 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v38 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        char v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        long long v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v39;
        if (v21 >= v38) {
          goto LABEL_33;
        }
        uint64_t v22 = v39[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v38) {
            goto LABEL_33;
          }
          uint64_t v22 = v39[v8];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v38)
            {
LABEL_33:
              if ((v41 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
              if (v37 >= 64) {
                bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int v39 = -1 << v37;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v22 = v39[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v38) {
                  goto LABEL_33;
                }
                uint64_t v22 = v39[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v11 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = (Swift::UInt *)(*(void *)(v5 + 48) + 16 * v20);
      uint64_t v30 = *v28;
      uint64_t v29 = v28[1];
      uint64_t v31 = *(void *)(v5 + 56) + 112 * v20;
      long long v32 = *(void *)v31;
      uint64_t v33 = *(unsigned char *)(v31 + 8);
      uint64_t v34 = *(void *)(v31 + 16);
      char v45 = *(_OWORD *)(v31 + 40);
      long long v46 = *(_OWORD *)(v31 + 24);
      int v35 = *(void *)(v31 + 72);
      uint64_t v36 = *(void *)(v31 + 80);
      char v43 = *(_OWORD *)(v31 + 88);
      char v44 = *(_OWORD *)(v31 + 56);
      char v42 = *(unsigned char *)(v31 + 104);
      if ((v41 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v30);
      Hasher._combine(_:)(v29);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v26 = v15 == v25;
          if (v15 == v25) {
            unint64_t v15 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v12 + 8 * v15);
        }
        while (v27 == -1);
        unint64_t v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      int64_t v17 = (Swift::UInt *)(*(void *)(v7 + 48) + 16 * v16);
      *int64_t v17 = v30;
      v17[1] = v29;
      unint64_t v18 = *(void *)(v7 + 56) + 112 * v16;
      *(void *)unint64_t v18 = v32;
      *(unsigned char *)(v18 + 8) = v33;
      *(void *)(v18 + 16) = v34;
      *(_OWORD *)(v18 + 24) = v46;
      *(_OWORD *)(v18 + 40) = v45;
      *(_OWORD *)(v18 + 56) = v44;
      *(void *)(v18 + 72) = v35;
      *(void *)(v18 + 80) = v36;
      *(_OWORD *)(v18 + 88) = v43;
      *(unsigned char *)(v18 + 104) = v42;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v40;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::UInt *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt *v28;
  Swift::UInt v29;
  Swift::UInt v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int64_t v37;
  void *v38;
  uint64_t v39;
  char v40;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, PhysicalButtonEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  char v40 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v38 = (void *)(v5 + 64);
    int v39 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v37 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        char v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        long long v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v21 >= v37) {
          goto LABEL_33;
        }
        uint64_t v22 = v38[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v37) {
            goto LABEL_33;
          }
          uint64_t v22 = v38[v8];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_33:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
              if (v36 >= 64) {
                bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v38 = -1 << v36;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v37) {
                  goto LABEL_33;
                }
                uint64_t v22 = v38[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v11 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = (Swift::UInt *)(*(void *)(v5 + 48) + 16 * v20);
      uint64_t v30 = *v28;
      uint64_t v29 = v28[1];
      uint64_t v31 = *(void *)(v5 + 56) + 32 * v20;
      long long v32 = *(void *)v31;
      uint64_t v33 = *(unsigned char *)(v31 + 8);
      uint64_t v34 = *(void *)(v31 + 16);
      int v35 = *(unsigned char *)(v31 + 24);
      if ((v40 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v30);
      Hasher._combine(_:)(v29);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v26 = v15 == v25;
          if (v15 == v25) {
            unint64_t v15 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v12 + 8 * v15);
        }
        while (v27 == -1);
        unint64_t v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      int64_t v17 = (Swift::UInt *)(*(void *)(v7 + 48) + 16 * v16);
      *int64_t v17 = v30;
      v17[1] = v29;
      unint64_t v18 = *(void *)(v7 + 56) + 32 * v16;
      *(void *)unint64_t v18 = v32;
      *(unsigned char *)(v18 + 8) = v33;
      *(void *)(v18 + 16) = v34;
      *(unsigned char *)(v18 + 24) = v35;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v39;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  Swift::UInt v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  int64_t v35;
  void *v36;
  uint64_t v37;
  char v38;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationSplitColumn, NavigationSplitViewColumnWidth>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitColumn and conformance NavigationSplitColumn);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = a2;
    int64_t v8 = 0;
    uint64_t v36 = (void *)(v5 + 64);
    uint64_t v37 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int v35 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v36;
        if (v17 >= v35) {
          goto LABEL_31;
        }
        unint64_t v18 = v36[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v35) {
            goto LABEL_31;
          }
          unint64_t v18 = v36[v8];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v35)
            {
LABEL_31:
              if ((v34 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_38;
              }
              uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
              if (v33 >= 64) {
                bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v36 = -1 << v33;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v36[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v35) {
                  goto LABEL_31;
                }
                unint64_t v18 = v36[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(void *)(v5 + 56) + 40 * v16;
      long long v21 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      uint64_t v38 = *(unsigned char *)(v20 + 32);
      uint64_t v22 = *(void *)(v20 + 16);
      unint64_t v23 = *(void *)(v20 + 24);
      char v25 = *(void *)v20;
      unint64_t v24 = *(void *)(v20 + 8);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v21);
      uint64_t result = Hasher._finalize()();
      unint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
      BOOL v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0;
          }
          v29 |= v31;
          long long v32 = *(void *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        uint64_t v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(unsigned char *)(*(void *)(v7 + 48) + v13) = v21;
      unint64_t v14 = *(void *)(v7 + 56) + 40 * v13;
      *(void *)unint64_t v14 = v25;
      *(void *)(v14 + 8) = v24;
      *(void *)(v14 + 16) = v22;
      *(void *)(v14 + 24) = v23;
      *(unsigned char *)(v14 + 32) = v38;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v37;
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  int64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<SpatialEventCollection.Event.ID, SpatialEventCollection.Event>, (void (*)(void))lazy protocol witness table accessor for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v37 = a2;
    int64_t v8 = 0;
    int v39 = (void *)(v5 + 64);
    char v40 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v38 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v39;
        if (v17 >= v38) {
          goto LABEL_31;
        }
        unint64_t v18 = v39[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v38) {
            goto LABEL_31;
          }
          unint64_t v18 = v39[v8];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v38)
            {
LABEL_31:
              if ((v37 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_38;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
              if (v36 >= 64) {
                bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int v39 = -1 << v36;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v39[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v38) {
                  goto LABEL_31;
                }
                unint64_t v18 = v39[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      long long v21 = *(void *)(v5 + 56) + 80 * v16;
      char v43 = *(unsigned char *)(v21 + 72);
      uint64_t v22 = *(void *)(v21 + 48);
      int v41 = *(void *)(v21 + 56);
      char v42 = *(void *)(v21 + 64);
      unint64_t v23 = *(unsigned char *)(v21 + 40);
      char v25 = *(void *)(v21 + 24);
      unint64_t v24 = *(void *)(v21 + 32);
      unint64_t v26 = *(unsigned char *)(v21 + 16);
      BOOL v27 = *(void *)(v21 + 8);
      uint64_t v28 = *(void *)v21;
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v30 = result & ~v29;
      uint64_t v31 = v30 >> 6;
      if (((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v30) & ~*(void *)(v12 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        long long v32 = 0;
        uint64_t v33 = (unint64_t)(63 - v29) >> 6;
        do
        {
          if (++v31 == v33 && (v32 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v34 = v31 == v33;
          if (v31 == v33) {
            uint64_t v31 = 0;
          }
          v32 |= v34;
          int v35 = *(void *)(v12 + 8 * v31);
        }
        while (v35 == -1);
        uint64_t v13 = __clz(__rbit64(~v35)) + (v31 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v7 + 48) + 8 * v13) = v20;
      unint64_t v14 = *(void *)(v7 + 56) + 80 * v13;
      *(void *)unint64_t v14 = v28;
      *(void *)(v14 + 8) = v27;
      *(unsigned char *)(v14 + 16) = v26;
      *(void *)(v14 + 24) = v25;
      *(void *)(v14 + 32) = v24;
      *(unsigned char *)(v14 + 40) = v23;
      *(void *)(v14 + 48) = v22;
      *(void *)(v14 + 56) = v41;
      *(void *)(v14 + 64) = v42;
      *(unsigned char *)(v14 + 72) = v43;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v40;
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::UInt8 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  char v36;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>, (void (*)(void))lazy protocol witness table accessor for type Axis and conformance Axis);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v36 = a2;
    int64_t v8 = 0;
    uint64_t v9 = (void *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    int64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
    unint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        int64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        char v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        uint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          uint64_t v20 = v9[v8];
          if (!v20)
          {
            long long v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if ((v36 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_38;
              }
              int v35 = 1 << *(unsigned char *)(v5 + 32);
              if (v35 >= 64) {
                bzero((void *)(v5 + 64), ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v9 = -1 << v35;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                uint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        int64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = *(unsigned char *)(*(void *)(v5 + 48) + v18);
      unint64_t v23 = (uint64_t *)(*(void *)(v5 + 56) + 32 * v18);
      char v25 = v23[2];
      unint64_t v24 = v23[3];
      BOOL v27 = *v23;
      unint64_t v26 = v23[1];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v22);
      uint64_t result = Hasher._finalize()();
      uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v29 = result & ~v28;
      uint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v14 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v31 = 0;
        long long v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v33 = v30 == v32;
          if (v30 == v32) {
            uint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v14 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(unsigned char *)(*(void *)(v7 + 48) + v15) = v22;
      unint64_t v16 = (void *)(*(void *)(v7 + 56) + 32 * v15);
      *unint64_t v16 = v27;
      v16[1] = v26;
      v16[2] = v25;
      v16[3] = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  Swift::UInt32 v26;
  uint64_t v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  void *v43;
  char v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  uint64_t v52;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, InspectorStorage>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  char v44 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    char v43 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    char v42 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        long long v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v22 = v21 | (v8 << 6);
      }
      else
      {
        unint64_t v23 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v23 >= v42) {
          goto LABEL_34;
        }
        unint64_t v24 = v43[v23];
        ++v8;
        if (!v24)
        {
          int64_t v8 = v23 + 1;
          if (v23 + 1 >= v42) {
            goto LABEL_34;
          }
          unint64_t v24 = v43[v8];
          if (!v24)
          {
            char v25 = v23 + 2;
            if (v25 >= v42)
            {
LABEL_34:
              if ((v44 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_41;
              }
              int v41 = 1 << *(unsigned char *)(v5 + 32);
              if (v41 >= 64) {
                bzero(v43, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *char v43 = -1 << v41;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v24 = v43[v25];
            if (!v24)
            {
              while (1)
              {
                int64_t v8 = v25 + 1;
                if (__OFADD__(v25, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v42) {
                  goto LABEL_34;
                }
                unint64_t v24 = v43[v8];
                ++v25;
                if (v24) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v25;
          }
        }
LABEL_21:
        unint64_t v11 = (v24 - 1) & v24;
        uint64_t v22 = __clz(__rbit64(v24)) + (v8 << 6);
      }
      unint64_t v26 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v22);
      BOOL v27 = *(void *)(v5 + 56) + 120 * v22;
      if (v44)
      {
        uint64_t v28 = *(_OWORD *)v27;
        uint64_t v29 = *(_OWORD *)(v27 + 16);
        uint64_t v30 = *(_OWORD *)(v27 + 48);
        long long v47 = *(_OWORD *)(v27 + 32);
        uint64_t v48 = v30;
        char v45 = v28;
        long long v46 = v29;
        uint64_t v31 = *(_OWORD *)(v27 + 64);
        long long v32 = *(_OWORD *)(v27 + 80);
        uint64_t v33 = *(_OWORD *)(v27 + 96);
        long long v52 = *(void *)(v27 + 112);
        long long v50 = v32;
        long long v51 = v33;
        uint64_t v49 = v31;
      }
      else
      {
        outlined init with copy of InspectorStorage(v27, (uint64_t)&v45);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      uint64_t v34 = -1 << *(unsigned char *)(v7 + 32);
      int v35 = result & ~v34;
      uint64_t v36 = v35 >> 6;
      if (((-1 << v35) & ~*(void *)(v12 + 8 * (v35 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v35) & ~*(void *)(v12 + 8 * (v35 >> 6)))) | v35 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v37 = 0;
        uint64_t v38 = (unint64_t)(63 - v34) >> 6;
        do
        {
          if (++v36 == v38 && (v37 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          int v39 = v36 == v38;
          if (v36 == v38) {
            uint64_t v36 = 0;
          }
          v37 |= v39;
          char v40 = *(void *)(v12 + 8 * v36);
        }
        while (v40 == -1);
        uint64_t v13 = __clz(__rbit64(~v40)) + (v36 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v13) = v26;
      unint64_t v14 = *(void *)(v7 + 56) + 120 * v13;
      unint64_t v15 = v45;
      unint64_t v16 = v46;
      int64_t v17 = v48;
      *(_OWORD *)(v14 + 32) = v47;
      *(_OWORD *)(v14 + 48) = v17;
      *(_OWORD *)unint64_t v14 = v15;
      *(_OWORD *)(v14 + 16) = v16;
      unint64_t v18 = v49;
      char v19 = v50;
      uint64_t v20 = v51;
      *(void *)(v14 + 112) = v52;
      *(_OWORD *)(v14 + 80) = v19;
      *(_OWORD *)(v14 + 96) = v20;
      *(_OWORD *)(v14 + 64) = v18;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  int64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, OrnamentPresentation>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v34 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        int v35 = v8;
        char v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        long long v21 = v34[v20];
        uint64_t v22 = v8 + 1;
        if (!v21)
        {
          uint64_t v22 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          long long v21 = v34[v22];
          if (!v21)
          {
            unint64_t v23 = v20 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              long long v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v34 = -1 << v32;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            long long v21 = v34[v23];
            if (!v21)
            {
              while (1)
              {
                uint64_t v22 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v22 >= v33) {
                  goto LABEL_33;
                }
                long long v21 = v34[v22];
                ++v23;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v22 = v23;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        int v35 = v22;
        char v19 = __clz(__rbit64(v21)) + (v22 << 6);
      }
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v29 = *(void *)(v5 + 56) + 120 * v19;
      uint64_t v30 = *(void *)v29;
      int v41 = *(void *)(v29 + 8);
      char v42 = *(_OWORD *)(v29 + 40);
      char v43 = *(_OWORD *)(v29 + 24);
      int v39 = *(unsigned char *)(v29 + 56);
      char v40 = *(unsigned char *)(v29 + 16);
      uint64_t v38 = *(void *)(v29 + 64);
      uint64_t v36 = *(unsigned char *)(v29 + 73);
      uint64_t v37 = *(unsigned char *)(v29 + 72);
      char v44 = *(_OWORD *)(v29 + 96);
      char v45 = *(_OWORD *)(v29 + 80);
      uint64_t v31 = *(void *)(v29 + 112);
      if ((a2 & 1) == 0)
      {
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v26 = v15 == v25;
          if (v15 == v25) {
            unint64_t v15 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v12 + 8 * v15);
        }
        while (v27 == -1);
        unint64_t v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v28;
      int64_t v17 = *(void *)(v7 + 56) + 120 * v16;
      *(void *)int64_t v17 = v30;
      *(void *)(v17 + 8) = v41;
      *(unsigned char *)(v17 + 16) = v40;
      *(_OWORD *)(v17 + 24) = v43;
      *(_OWORD *)(v17 + 40) = v42;
      *(unsigned char *)(v17 + 56) = v39;
      *(void *)(v17 + 64) = v38;
      *(unsigned char *)(v17 + 72) = v37;
      *(unsigned char *)(v17 + 73) = v36;
      *(_OWORD *)(v17 + 80) = v45;
      *(_OWORD *)(v17 + 96) = v44;
      *(void *)(v17 + 112) = v31;
      ++*(void *)(v7 + 16);
      int64_t v8 = v35;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  long long *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  uint64_t v33;
  long long v34[2];

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Selector, CommandAction>();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v33 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v31 = v2;
  long long v32 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v32) {
      break;
    }
    unint64_t v18 = (void *)(v5 + 64);
    char v19 = *(void *)(v33 + 8 * v17);
    ++v13;
    if (!v19)
    {
      uint64_t v13 = v17 + 1;
      if (v17 + 1 >= v32) {
        goto LABEL_34;
      }
      char v19 = *(void *)(v33 + 8 * v13);
      if (!v19)
      {
        uint64_t v20 = v17 + 2;
        if (v20 >= v32)
        {
LABEL_34:
          swift_release();
          id v3 = v31;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        char v19 = *(void *)(v33 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            uint64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v32) {
              goto LABEL_34;
            }
            char v19 = *(void *)(v33 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v20;
      }
    }
LABEL_21:
    uint64_t v10 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    long long v21 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
    uint64_t v22 = (long long *)(*(void *)(v5 + 56) + 40 * v16);
    if (a2) {
      outlined init with take of OptionalBinaryInteger(v22, (uint64_t)v34);
    }
    else {
      outlined init with copy of TableColumnList((uint64_t)v22, (uint64_t)v34);
    }
    Hasher.init(_seed:)();
    Selector.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v24 = result & ~v23;
    char v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v24) & ~*(void *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      BOOL v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v28 = v25 == v27;
        if (v25 == v27) {
          char v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v21;
    uint64_t result = outlined init with take of OptionalBinaryInteger(v34, *(void *)(v7 + 56) + 40 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v31;
  unint64_t v18 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
  if (v30 >= 64) {
    bzero(v18, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v18 = -1 << v30;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void *v32;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ContainerBackgroundKeys.AnyCustomKey, AnyView>, (void (*)(void))lazy protocol witness table accessor for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    long long v32 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v31 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v31) {
          goto LABEL_33;
        }
        long long v21 = v32[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v31) {
            goto LABEL_33;
          }
          long long v21 = v32[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v31)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
              if (v30 >= 64) {
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *long long v32 = -1 << v30;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            long long v21 = v32[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v31) {
                  goto LABEL_33;
                }
                long long v21 = v32[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        char v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      BOOL v27 = 8 * v19;
      uint64_t v28 = *(void *)(*(void *)(v5 + 48) + v27);
      uint64_t v29 = *(void *)(*(void *)(v5 + 56) + v27);
      if ((a2 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          char v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      int64_t v17 = 8 * v16;
      *(void *)(*(void *)(v7 + 48) + v17) = v28;
      *(void *)(*(void *)(v7 + 56) + v17) = v29;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  void *v30;
  unsigned char v31[104];

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, NavigationDestinationPresentation>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v29 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v14 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v15 = v14 | (v8 << 6);
      }
      else
      {
        unint64_t v16 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v16 >= v29) {
          goto LABEL_34;
        }
        int64_t v17 = v30[v16];
        ++v8;
        if (!v17)
        {
          int64_t v8 = v16 + 1;
          if (v16 + 1 >= v29) {
            goto LABEL_34;
          }
          int64_t v17 = v30[v8];
          if (!v17)
          {
            unint64_t v18 = v16 + 2;
            if (v18 >= v29)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_41;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v28;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            int64_t v17 = v30[v18];
            if (!v17)
            {
              while (1)
              {
                int64_t v8 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v29) {
                  goto LABEL_34;
                }
                int64_t v17 = v30[v8];
                ++v18;
                if (v17) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v18;
          }
        }
LABEL_21:
        unint64_t v11 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v8 << 6);
      }
      char v19 = *(void *)(*(void *)(v5 + 48) + 8 * v15);
      uint64_t v20 = *(void *)(v5 + 56) + 96 * v15;
      if (a2) {
        outlined init with take of NavigationDestinationPresentation(v20, (uint64_t)v31);
      }
      else {
        outlined init with copy of NavigationDestinationPresentation(v20, (uint64_t)v31);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v19);
      uint64_t result = Hasher._finalize()();
      long long v21 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v22 = result & ~v21;
      unint64_t v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v12 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          unint64_t v26 = v23 == v25;
          if (v23 == v25) {
            unint64_t v23 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v12 + 8 * v23);
        }
        while (v27 == -1);
        uint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v7 + 48) + 8 * v13) = v19;
      uint64_t result = outlined init with take of NavigationDestinationPresentation((uint64_t)v31, *(void *)(v7 + 56) + 96 * v13);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  long long v16;
  long long v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  void *v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  long long v25;
  long long v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  long long v39;
  long long v40;
  uint64_t v41;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<AnyHashable, Anchor<CGRect?>>();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v36 = v2;
  uint64_t v37 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v18 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      char v19 = v18 | (v13 << 6);
      goto LABEL_22;
    }
    uint64_t v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v20 >= v37) {
      break;
    }
    long long v21 = (void *)(v5 + 64);
    uint64_t v22 = *(void *)(v38 + 8 * v20);
    ++v13;
    if (!v22)
    {
      uint64_t v13 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_34;
      }
      uint64_t v22 = *(void *)(v38 + 8 * v13);
      if (!v22)
      {
        unint64_t v23 = v20 + 2;
        if (v23 >= v37)
        {
LABEL_34:
          swift_release();
          id v3 = v36;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v22 = *(void *)(v38 + 8 * v23);
        if (!v22)
        {
          while (1)
          {
            uint64_t v13 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v37) {
              goto LABEL_34;
            }
            uint64_t v22 = *(void *)(v38 + 8 * v13);
            ++v23;
            if (v22) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v23;
      }
    }
LABEL_21:
    uint64_t v10 = (v22 - 1) & v22;
    char v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_22:
    unint64_t v24 = *(void *)(v5 + 48) + 40 * v19;
    if (a2)
    {
      char v25 = *(_OWORD *)v24;
      unint64_t v26 = *(_OWORD *)(v24 + 16);
      int v41 = *(void *)(v24 + 32);
      int v39 = v25;
      char v40 = v26;
      BOOL v27 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
    }
    else
    {
      outlined init with copy of AnyHashable(v24, (uint64_t)&v39);
      BOOL v27 = *(void *)(*(void *)(v5 + 56) + 8 * v19);
      swift_retain();
    }
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v29 = result & ~v28;
    uint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v29) & ~*(void *)(v11 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v31 = 0;
      long long v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v33 = v30 == v32;
        if (v30 == v32) {
          uint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v11 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v14 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = *(void *)(v7 + 48) + 40 * v14;
    unint64_t v16 = v39;
    int64_t v17 = v40;
    *(void *)(v15 + 32) = v41;
    *(_OWORD *)unint64_t v15 = v16;
    *(_OWORD *)(v15 + 16) = v17;
    *(void *)(*(void *)(v7 + 56) + 8 * v14) = v27;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v36;
  long long v21 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  int v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v21, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v21 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  long long v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void *__return_ptr, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  long long v41;
  void v42[5];
  unsigned char v43[168];

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationLinkSelectionIdentifier, UpdateViewDestinationRequest>, (void (*)(void))lazy protocol witness table accessor for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier);
  char v40 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_47;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int v39 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v37 = v2;
  uint64_t v38 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      int64_t v17 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_22;
    }
    char v19 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      return result;
    }
    if (v19 >= v38) {
      break;
    }
    uint64_t v20 = (void *)(v5 + 64);
    long long v21 = *(void *)(v39 + 8 * v19);
    ++v13;
    if (!v21)
    {
      uint64_t v13 = v19 + 1;
      if (v19 + 1 >= v38) {
        goto LABEL_40;
      }
      long long v21 = *(void *)(v39 + 8 * v13);
      if (!v21)
      {
        uint64_t v22 = v19 + 2;
        if (v22 >= v38)
        {
LABEL_40:
          swift_release();
          id v3 = v37;
          if ((v40 & 1) == 0) {
            goto LABEL_47;
          }
          goto LABEL_43;
        }
        long long v21 = *(void *)(v39 + 8 * v22);
        if (!v21)
        {
          while (1)
          {
            uint64_t v13 = v22 + 1;
            if (__OFADD__(v22, 1)) {
              goto LABEL_49;
            }
            if (v13 >= v38) {
              goto LABEL_40;
            }
            long long v21 = *(void *)(v39 + 8 * v13);
            ++v22;
            if (v21) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v22;
      }
    }
LABEL_21:
    uint64_t v10 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v13 << 6);
LABEL_22:
    unint64_t v23 = *(void *)(v5 + 48) + 32 * v18;
    char v25 = *(void *)v23;
    unint64_t v24 = *(void *)(v23 + 8);
    unint64_t v26 = *(void *)(v5 + 56) + 160 * v18;
    int v41 = *(_OWORD *)(v23 + 16);
    if (v40)
    {
      outlined init with take of UpdateViewDestinationRequest(v26, (uint64_t)v43);
    }
    else
    {
      outlined init with copy of UpdateViewDestinationRequest(v26, (uint64_t)v43);
      swift_retain();
      outlined copy of Text.LineStyle?(v24, v41);
    }
    Hasher.init(_seed:)();
    if (v25)
    {
      Hasher._combine(_:)(1u);
      BOOL v27 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v25 + 96);
      uint64_t v28 = swift_retain();
      v27(v42, v28);
      AnyHashable.hash(into:)();
      outlined destroy of AnyHashable((uint64_t)v42);
      swift_release();
    }
    else
    {
      Hasher._combine(_:)(0);
    }
    if ((void)v41 == 1)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      v42[0] = v24;
      v42[1] = v41;
      Hasher._combine(_:)(1u);
      _ViewList_ID.Canonical.hash(into:)();
    }
    Hasher._combine(_:)(*((Swift::UInt *)&v41 + 1));
    uint64_t result = Hasher._finalize()();
    uint64_t v29 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v30 = result & ~v29;
    uint64_t v31 = v30 >> 6;
    if (((-1 << v30) & ~*(void *)(v11 + 8 * (v30 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v30) & ~*(void *)(v11 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
      unint64_t v15 = v41;
    }
    else
    {
      long long v32 = 0;
      uint64_t v33 = (unint64_t)(63 - v29) >> 6;
      unint64_t v15 = v41;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_48;
        }
        uint64_t v34 = v31 == v33;
        if (v31 == v33) {
          uint64_t v31 = 0;
        }
        v32 |= v34;
        int v35 = *(void *)(v11 + 8 * v31);
      }
      while (v35 == -1);
      unint64_t v14 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v16 = *(void *)(v7 + 48) + 32 * v14;
    *(void *)unint64_t v16 = v25;
    *(void *)(v16 + 8) = v24;
    *(_OWORD *)(v16 + 16) = v15;
    uint64_t result = outlined init with take of UpdateViewDestinationRequest((uint64_t)v43, *(void *)(v7 + 56) + 160 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v37;
  uint64_t v20 = (void *)(v5 + 64);
  if ((v40 & 1) == 0) {
    goto LABEL_47;
  }
LABEL_43:
  uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
  if (v36 >= 64) {
    bzero(v20, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v20 = -1 << v36;
  }
  *(void *)(v5 + 16) = 0;
LABEL_47:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, [AnyConnectionOptionActionBox]>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v10;
    long long v32 = v10;
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    int64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        char v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        long long v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v33) {
          goto LABEL_33;
        }
        uint64_t v22 = v9[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v33) {
            goto LABEL_33;
          }
          uint64_t v22 = v9[v8];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v33);
                }
                else {
                  *uint64_t v9 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v22 = v9[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                uint64_t v22 = v9[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        int64_t v12 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = 8 * v20;
      uint64_t v29 = *(void *)(*(void *)(v5 + 48) + v28);
      uint64_t v30 = *(void *)(*(void *)(v5 + 56) + v28);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v15 = result & ~v14;
      unint64_t v16 = v15 >> 6;
      if (((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v26 = v16 == v25;
          if (v16 == v25) {
            unint64_t v16 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        int64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      unint64_t v18 = 8 * v17;
      *(void *)(*(void *)(v7 + 48) + v18) = v29;
      *(void *)(*(void *)(v7 + 56) + v18) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char v40;
  int64_t v41;
  uint64_t *v42;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UInt32, PinnedSection>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    char v40 = a2;
    int v39 = v3;
    int64_t v8 = 0;
    char v42 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v37 = -1 << v9;
    uint64_t v38 = v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int v41 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v41) {
          goto LABEL_31;
        }
        unint64_t v18 = v42[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v41) {
            goto LABEL_31;
          }
          unint64_t v18 = v42[v8];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v41)
            {
LABEL_31:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v39;
                goto LABEL_38;
              }
              if (v38 >= 64) {
                bzero(v42, 8 * v41);
              }
              else {
                *char v42 = v37;
              }
              id v3 = v39;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v42[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v41) {
                  goto LABEL_31;
                }
                unint64_t v18 = v42[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(unsigned int *)(*(void *)(v5 + 48) + 4 * v16);
      long long v21 = *(void *)(v5 + 56) + (v16 << 6);
      uint64_t v22 = *(unsigned char *)(v21 + 56);
      unint64_t v23 = *(void *)(v21 + 48);
      unint64_t v24 = *(unsigned char *)(v21 + 40);
      char v25 = *(void *)(v21 + 32);
      BOOL v27 = *(void *)(v21 + 16);
      unint64_t v26 = *(void *)(v21 + 24);
      uint64_t v29 = *(void *)v21;
      uint64_t v28 = *(void *)(v21 + 8);
      uint64_t result = MEMORY[0x18C118330](*(void *)(v7 + 40), v20, 4);
      uint64_t v30 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v31 = result & ~v30;
      long long v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v12 + 8 * (v31 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v31) & ~*(void *)(v12 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          int v35 = v32 == v34;
          if (v32 == v34) {
            long long v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v12 + 8 * v32);
        }
        while (v36 == -1);
        uint64_t v13 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v13) = v20;
      unint64_t v14 = *(void *)(v7 + 56) + (v13 << 6);
      *(void *)unint64_t v14 = v29;
      *(void *)(v14 + 8) = v28;
      *(void *)(v14 + 16) = v27;
      *(void *)(v14 + 24) = v26;
      *(void *)(v14 + 32) = v25;
      *(unsigned char *)(v14 + 40) = v24;
      *(void *)(v14 + 48) = v23;
      *(unsigned char *)(v14 + 56) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt16 v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  void *v30;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, [AccessibilityFocus.Match : Set<UniqueID>]>, (void (*)(uint64_t))type metadata accessor for [AccessibilityFocus.Match : Set<UniqueID>], (void (*)(void))lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v29 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        int64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        char v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v29) {
          goto LABEL_33;
        }
        uint64_t v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v29) {
            goto LABEL_33;
          }
          uint64_t v20 = v30[v8];
          if (!v20)
          {
            long long v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v28;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v29) {
                  goto LABEL_33;
                }
                uint64_t v20 = v30[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      unint64_t v26 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v18);
      BOOL v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          char v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  void *v30;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<AccessibilityFocus.Match, Set<UniqueID>>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v29 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        int64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        char v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v29) {
          goto LABEL_33;
        }
        uint64_t v20 = v30[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v29) {
            goto LABEL_33;
          }
          uint64_t v20 = v30[v8];
          if (!v20)
          {
            long long v21 = v19 + 2;
            if (v21 >= v29)
            {
LABEL_33:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              uint64_t v28 = 1 << *(unsigned char *)(v5 + 32);
              if (v28 >= 64) {
                bzero(v30, ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v28;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v20 = v30[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v29) {
                  goto LABEL_33;
                }
                uint64_t v20 = v30[v8];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_30:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      unint64_t v26 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v18);
      BOOL v27 = *(void *)(*(void *)(v5 + 56) + 8 * v18);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v26);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v24 = v15 == v23;
          if (v15 == v23) {
            unint64_t v15 = 0;
          }
          v22 |= v24;
          char v25 = *(void *)(v12 + 8 * v15);
        }
        while (v25 == -1);
        unint64_t v16 = __clz(__rbit64(~v25)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(unsigned char *)(*(void *)(v7 + 48) + v16) = v26;
      *(void *)(*(void *)(v7 + 56) + 8 * v16) = v27;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt16 v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void *v31;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Match>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v30 = a2;
    int64_t v8 = 0;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_31;
        }
        unint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v18 = v31[v8];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_38;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v31 = -1 << v29;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                unint64_t v18 = v31[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      long long v21 = *(unsigned char *)(*(void *)(v5 + 56) + v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      *(unsigned char *)(*(void *)(v7 + 56) + v14) = v21;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *id v3 = v7;
  return result;
}

{
  return specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(a1, a2, (void (*)(void))type metadata accessor for _DictionaryStorage<String, SceneStorageValues.AnyEntry>);
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt32 v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  char v31;
  uint64_t v32;
  int64_t v33;
  void *v34;
  char v35;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<_DisplayList_Identity, DisplayList>, (void (*)(void))lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity);
  int v35 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v34 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        long long v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          long long v21 = v34[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if ((v35 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              long long v32 = 1 << *(unsigned char *)(v5 + 32);
              if (v32 >= 64) {
                bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v34 = -1 << v32;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            long long v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                long long v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        char v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      BOOL v27 = *(_DWORD *)(*(void *)(v5 + 48) + 4 * v19);
      uint64_t v28 = *(void *)(v5 + 56) + 16 * v19;
      uint64_t v29 = *(void *)v28;
      uint64_t v30 = *(_WORD *)(v28 + 8);
      uint64_t v31 = *(unsigned char *)(v28 + 10);
      if ((v35 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          char v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(_DWORD *)(*(void *)(v7 + 48) + 4 * v16) = v27;
      int64_t v17 = *(void *)(v7 + 56) + 16 * v16;
      *(void *)int64_t v17 = v29;
      *(_WORD *)(v17 + 8) = v30;
      *(unsigned char *)(v17 + 10) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  void *v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  unsigned char v38[280];

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, TabEntry>();
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v34 = v2;
  int v35 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v17 = v16 | (v13 << 6);
      goto LABEL_22;
    }
    unint64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v18 >= v35) {
      break;
    }
    char v19 = (void *)(v5 + 64);
    uint64_t v20 = *(void *)(v36 + 8 * v18);
    ++v13;
    if (!v20)
    {
      uint64_t v13 = v18 + 1;
      if (v18 + 1 >= v35) {
        goto LABEL_34;
      }
      uint64_t v20 = *(void *)(v36 + 8 * v13);
      if (!v20)
      {
        long long v21 = v18 + 2;
        if (v21 >= v35)
        {
LABEL_34:
          swift_release();
          id v3 = v34;
          if ((v37 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        uint64_t v20 = *(void *)(v36 + 8 * v21);
        if (!v20)
        {
          while (1)
          {
            uint64_t v13 = v21 + 1;
            if (__OFADD__(v21, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v35) {
              goto LABEL_34;
            }
            uint64_t v20 = *(void *)(v36 + 8 * v13);
            ++v21;
            if (v20) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v21;
      }
    }
LABEL_21:
    uint64_t v10 = (v20 - 1) & v20;
    int64_t v17 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_22:
    uint64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    unint64_t v24 = *v22;
    unint64_t v23 = v22[1];
    char v25 = *(void *)(v5 + 56) + 272 * v17;
    if (v37)
    {
      outlined init with take of TabEntry(v25, (uint64_t)v38);
    }
    else
    {
      outlined init with copy of TabEntry(v25, (uint64_t)v38);
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
    BOOL v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0;
        }
        v29 |= v31;
        long long v32 = *(void *)(v11 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v14 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
    *unint64_t v15 = v24;
    v15[1] = v23;
    uint64_t result = outlined init with take of TabEntry((uint64_t)v38, *(void *)(v7 + 56) + 272 * v14);
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v34;
  char v19 = (void *)(v5 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v19, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v19 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t *v34;
  long long v35;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Int, (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String)>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v34 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v31 = -1 << v9;
    long long v32 = v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v33 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v33) {
          goto LABEL_33;
        }
        long long v21 = v34[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v33) {
            goto LABEL_33;
          }
          long long v21 = v34[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v33)
            {
LABEL_33:
              if (a2)
              {
                if (v32 >= 64) {
                  bzero(v34, 8 * v33);
                }
                else {
                  *uint64_t v34 = v31;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            long long v21 = v34[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_41;
                }
                if (v8 >= v33) {
                  goto LABEL_33;
                }
                long long v21 = v34[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        char v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      BOOL v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = *(void *)(v5 + 56) + 32 * v19;
      int v35 = *(_OWORD *)v28;
      uint64_t v29 = *(void *)(v28 + 16);
      uint64_t v30 = *(void *)(v28 + 24);
      if ((a2 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          char v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      int64_t v17 = *(void *)(v7 + 56) + 32 * v16;
      *(_OWORD *)int64_t v17 = v35;
      *(void *)(v17 + 16) = v29;
      *(void *)(v17 + 24) = v30;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  long long v38;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Int, DragReorderableLayoutCoordinator.ChildFrame>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v37 = a2;
    int64_t v8 = 0;
    uint64_t v9 = (uint64_t *)(v5 + 64);
    uint64_t v10 = 1 << *(unsigned char *)(v5 + 32);
    int v35 = -1 << v10;
    if (v10 < 64) {
      unint64_t v11 = ~(-1 << v10);
    }
    else {
      unint64_t v11 = -1;
    }
    int64_t v12 = v11 & *(void *)(v5 + 64);
    uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v13 = (unint64_t)(v10 + 63) >> 6;
    unint64_t v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        int64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        char v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v13) {
          goto LABEL_31;
        }
        uint64_t v20 = v9[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v13) {
            goto LABEL_31;
          }
          uint64_t v20 = v9[v8];
          if (!v20)
          {
            long long v21 = v19 + 2;
            if (v21 >= v13)
            {
LABEL_31:
              if (v37)
              {
                if (v36 >= 64) {
                  bzero((void *)(v5 + 64), 8 * v13);
                }
                else {
                  *uint64_t v9 = v35;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            uint64_t v20 = v9[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_39;
                }
                if (v8 >= v13) {
                  goto LABEL_31;
                }
                uint64_t v20 = v9[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        int64_t v12 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = *(void *)(*(void *)(v5 + 48) + 8 * v18);
      unint64_t v23 = *(void *)(v5 + 56) + 48 * v18;
      unint64_t v24 = *(void *)(v23 + 40);
      uint64_t v38 = *(_OWORD *)(v23 + 24);
      unint64_t v26 = *(void *)(v23 + 8);
      char v25 = *(void *)(v23 + 16);
      BOOL v27 = *(void *)v23;
      uint64_t result = static Hasher._hash(seed:_:)();
      uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v29 = result & ~v28;
      uint64_t v30 = v29 >> 6;
      if (((-1 << v29) & ~*(void *)(v14 + 8 * (v29 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v14 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v31 = 0;
        long long v32 = (unint64_t)(63 - v28) >> 6;
        do
        {
          if (++v30 == v32 && (v31 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v33 = v30 == v32;
          if (v30 == v32) {
            uint64_t v30 = 0;
          }
          v31 |= v33;
          uint64_t v34 = *(void *)(v14 + 8 * v30);
        }
        while (v34 == -1);
        unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
      }
      *(void *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(void *)(*(void *)(v7 + 48) + 8 * v15) = v22;
      unint64_t v16 = *(void *)(v7 + 56) + 48 * v15;
      *(void *)unint64_t v16 = v27;
      *(void *)(v16 + 8) = v26;
      *(void *)(v16 + 16) = v25;
      *(_OWORD *)(v16 + 24) = v38;
      *(void *)(v16 + 40) = v24;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;
  _OWORD v33[2];

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<PartialKeyPath<UISplitViewController>, Any>();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  long long v32 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v31 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_22;
    }
    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v17 >= v31) {
      break;
    }
    unint64_t v18 = (void *)(v5 + 64);
    char v19 = *(void *)(v32 + 8 * v17);
    ++v13;
    if (!v19)
    {
      uint64_t v13 = v17 + 1;
      if (v17 + 1 >= v31) {
        goto LABEL_34;
      }
      char v19 = *(void *)(v32 + 8 * v13);
      if (!v19)
      {
        uint64_t v20 = v17 + 2;
        if (v20 >= v31)
        {
LABEL_34:
          swift_release();
          id v3 = v2;
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        char v19 = *(void *)(v32 + 8 * v20);
        if (!v19)
        {
          while (1)
          {
            uint64_t v13 = v20 + 1;
            if (__OFADD__(v20, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v31) {
              goto LABEL_34;
            }
            char v19 = *(void *)(v32 + 8 * v13);
            ++v20;
            if (v19) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v20;
      }
    }
LABEL_21:
    uint64_t v10 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v13 << 6);
LABEL_22:
    long long v21 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
    uint64_t v22 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v16);
    if (a2)
    {
      outlined init with take of Any(v22, v33);
    }
    else
    {
      outlined init with copy of Any((uint64_t)v22, (uint64_t)v33);
      swift_retain();
    }
    _ss14PartialKeyPathCySo21UISplitViewControllerCGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for PartialKeyPath<UISplitViewController>, &lazy cache variable for type metadata for UISplitViewController, 0x1E4FB1C48, MEMORY[0x1E4FBBAD8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v23 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v24 = result & ~v23;
    char v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v11 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v24) & ~*(void *)(v11 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      BOOL v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v28 = v25 == v27;
        if (v25 == v27) {
          char v25 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v14 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    *(void *)(*(void *)(v7 + 48) + 8 * v14) = v21;
    uint64_t result = (uint64_t)outlined init with take of Any(v33, (_OWORD *)(*(void *)(v7 + 56) + 32 * v14));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v2;
  unint64_t v18 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v30 = 1 << *(unsigned char *)(v5 + 32);
  if (v30 >= 64) {
    bzero(v18, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v18 = -1 << v30;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  void *v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::UInt v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  long long v40;
  _OWORD v41[2];
  uint64_t v42;
  long long v43;
  long long v44;
  uint64_t v45;
  unsigned char v46[48];

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<Toolbar.BarLocation, Toolbar.LocationStorage>, (void (*)(void))lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  int v39 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_59;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v36 = v2;
  uint64_t v37 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
LABEL_8:
  if (v10)
  {
    unint64_t v15 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v16 = v15 | (v12 << 6);
    goto LABEL_22;
  }
  int64_t v17 = v12 + 1;
  if (__OFADD__(v12, 1)) {
    goto LABEL_60;
  }
  if (v17 >= v37)
  {
    swift_release();
    id v3 = v36;
    unint64_t v18 = (void *)(v5 + 64);
    if (v39)
    {
LABEL_55:
      uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
      if (v34 >= 64) {
        bzero(v18, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *unint64_t v18 = -1 << v34;
      }
      *(void *)(v5 + 16) = 0;
    }
  }
  else
  {
    unint64_t v18 = (void *)(v5 + 64);
    char v19 = *(void *)(v38 + 8 * v17);
    ++v12;
    if (v19) {
      goto LABEL_21;
    }
    int64_t v12 = v17 + 1;
    if (v17 + 1 >= v37) {
      goto LABEL_52;
    }
    char v19 = *(void *)(v38 + 8 * v12);
    if (v19)
    {
LABEL_21:
      uint64_t v10 = (v19 - 1) & v19;
      unint64_t v16 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_22:
      long long v21 = *(void *)(v5 + 48) + 40 * v16;
      if (v39)
      {
        outlined init with take of Toolbar.BarLocation(v21, (uint64_t)v46);
        uint64_t v22 = *(void *)(v5 + 56) + 24 * v16;
        char v40 = *(_OWORD *)v22;
        unint64_t v23 = *(void *)(v22 + 16);
      }
      else
      {
        outlined init with copy of Toolbar.BarLocation(v21, (uint64_t)v46);
        unint64_t v24 = *(void *)(v5 + 56) + 24 * v16;
        char v40 = *(_OWORD *)v24;
        unint64_t v23 = *(void *)(v24 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      outlined init with copy of Toolbar.BarLocation((uint64_t)v46, (uint64_t)&v43);
      switch(*((void *)&v44 + 1))
      {
        case 0:
          char v25 = 0;
          goto LABEL_42;
        case 1:
          char v25 = 1;
          goto LABEL_42;
        case 2:
          char v25 = 2;
          goto LABEL_42;
        case 3:
          char v25 = 3;
          goto LABEL_42;
        case 4:
          char v25 = 4;
          goto LABEL_42;
        case 5:
          char v25 = 5;
          goto LABEL_42;
        case 6:
          char v25 = 6;
          goto LABEL_42;
        case 7:
          char v25 = 7;
          goto LABEL_42;
        case 8:
          char v25 = 8;
          goto LABEL_42;
        case 9:
          char v25 = 9;
          goto LABEL_42;
        case 0xALL:
          char v25 = 10;
          goto LABEL_42;
        case 0xBLL:
          char v25 = 11;
          goto LABEL_42;
        case 0xCLL:
          char v25 = 12;
          goto LABEL_42;
        case 0xDLL:
          char v25 = 13;
          goto LABEL_42;
        case 0xELL:
          char v25 = 15;
LABEL_42:
          Hasher._combine(_:)(v25);
          break;
        default:
          v41[0] = v43;
          v41[1] = v44;
          char v42 = v45;
          Hasher._combine(_:)(0xEuLL);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v41);
          break;
      }
      unint64_t v26 = Hasher._finalize()();
      BOOL v27 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v28 = v26 & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_7;
      }
      uint64_t v30 = 0;
      uint64_t v31 = (unint64_t)(63 - v27) >> 6;
      while (++v29 != v31 || (v30 & 1) == 0)
      {
        long long v32 = v29 == v31;
        if (v29 == v31) {
          uint64_t v29 = 0;
        }
        v30 |= v32;
        uint64_t v33 = *(void *)(v11 + 8 * v29);
        if (v33 != -1)
        {
          uint64_t v13 = __clz(__rbit64(~v33)) + (v29 << 6);
LABEL_7:
          *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
          outlined init with take of Toolbar.BarLocation((uint64_t)v46, *(void *)(v7 + 48) + 40 * v13);
          unint64_t v14 = *(void *)(v7 + 56) + 24 * v13;
          *(_OWORD *)unint64_t v14 = v40;
          *(void *)(v14 + 16) = v23;
          ++*(void *)(v7 + 16);
          goto LABEL_8;
        }
      }
      __break(1u);
LABEL_60:
      __break(1u);
LABEL_61:
      __break(1u);
      JUMPOUT(0x187ED4B2CLL);
    }
    uint64_t v20 = v17 + 2;
    if (v20 < v37)
    {
      char v19 = *(void *)(v38 + 8 * v20);
      if (!v19)
      {
        while (1)
        {
          int64_t v12 = v20 + 1;
          if (__OFADD__(v20, 1)) {
            goto LABEL_61;
          }
          if (v12 >= v37) {
            goto LABEL_52;
          }
          char v19 = *(void *)(v38 + 8 * v12);
          ++v20;
          if (v19) {
            goto LABEL_21;
          }
        }
      }
      int64_t v12 = v20;
      goto LABEL_21;
    }
LABEL_52:
    swift_release();
    id v3 = v36;
    if (v39) {
      goto LABEL_55;
    }
  }
LABEL_59:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt16 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char v31[8];

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Target>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v30 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_34;
        }
        unint64_t v18 = v30[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_34;
          }
          unint64_t v18 = v30[v8];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_34:
              if ((a2 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_41;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v30 = -1 << v29;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v30[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_43;
                }
                if (v8 >= v12) {
                  goto LABEL_34;
                }
                unint64_t v18 = v30[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      long long v21 = *(void *)(v5 + 56) + 8 * v16;
      if (a2) {
        outlined init with take of AccessibilityFocus.Target(v21, (uint64_t)v31);
      }
      else {
        outlined init with copy of AccessibilityFocus.Target(v21, (uint64_t)v31);
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      uint64_t result = outlined init with take of AccessibilityFocus.Target((uint64_t)v31, *(void *)(v7 + 56) + 8 * v14);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_41:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int64_t v37;
  void *v38;
  char v39;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Character, String>();
  int v39 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v38 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v37 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        uint64_t v20 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        long long v21 = v20 | (v8 << 6);
      }
      else
      {
        uint64_t v22 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v22 >= v37) {
          goto LABEL_33;
        }
        unint64_t v23 = v38[v22];
        ++v8;
        if (!v23)
        {
          int64_t v8 = v22 + 1;
          if (v22 + 1 >= v37) {
            goto LABEL_33;
          }
          unint64_t v23 = v38[v8];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v37)
            {
LABEL_33:
              if ((v39 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
              if (v36 >= 64) {
                bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v38 = -1 << v36;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v23 = v38[v24];
            if (!v23)
            {
              while (1)
              {
                int64_t v8 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v37) {
                  goto LABEL_33;
                }
                unint64_t v23 = v38[v8];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v24;
          }
        }
LABEL_30:
        unint64_t v11 = (v23 - 1) & v23;
        long long v21 = __clz(__rbit64(v23)) + (v8 << 6);
      }
      uint64_t v29 = 16 * v21;
      uint64_t v30 = (uint64_t *)(*(void *)(v5 + 48) + v29);
      long long v32 = *v30;
      uint64_t v31 = v30[1];
      uint64_t v33 = (uint64_t *)(*(void *)(v5 + 56) + v29);
      uint64_t v34 = *v33;
      int v35 = v33[1];
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          BOOL v27 = v15 == v26;
          if (v15 == v26) {
            unint64_t v15 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v12 + 8 * v15);
        }
        while (v28 == -1);
        unint64_t v16 = __clz(__rbit64(~v28)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      int64_t v17 = 16 * v16;
      unint64_t v18 = (void *)(*(void *)(v7 + 48) + v17);
      *unint64_t v18 = v32;
      v18[1] = v31;
      char v19 = (void *)(*(void *)(v7 + 56) + v17);
      *char v19 = v34;
      v19[1] = v35;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt v31;
  Swift::UInt v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  int64_t v37;
  void *v38;
  uint64_t v39;
  char v40;
  long long v41;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<KeyboardShortcut, KeyboardShortcutBridge.Shortcut>, (void (*)(void))lazy protocol witness table accessor for type KeyboardShortcut and conformance KeyboardShortcut);
  char v40 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v38 = (void *)(v5 + 64);
    int v39 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v37 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        char v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        long long v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v38;
        if (v21 >= v37) {
          goto LABEL_33;
        }
        uint64_t v22 = v38[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v37) {
            goto LABEL_33;
          }
          uint64_t v22 = v38[v8];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_33:
              if ((v40 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              uint64_t v36 = 1 << *(unsigned char *)(v5 + 32);
              if (v36 >= 64) {
                bzero(v38, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v38 = -1 << v36;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v37) {
                  goto LABEL_33;
                }
                uint64_t v22 = v38[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v11 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = *(void *)(v5 + 48) + 32 * v20;
      uint64_t v29 = *(void *)v28;
      uint64_t v30 = *(void *)(v28 + 8);
      uint64_t v31 = *(void *)(v28 + 16);
      long long v32 = *(unsigned __int8 *)(v28 + 24);
      uint64_t v33 = *(void *)(v5 + 56) + 24 * v20;
      int v41 = *(_OWORD *)v33;
      uint64_t v34 = *(void *)(v33 + 16);
      if ((v40 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        int v35 = (id)v41;
        swift_retain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._combine(_:)(v31);
      Hasher._combine(_:)(v32);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v26 = v15 == v25;
          if (v15 == v25) {
            unint64_t v15 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v12 + 8 * v15);
        }
        while (v27 == -1);
        unint64_t v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      int64_t v17 = *(void *)(v7 + 48) + 32 * v16;
      *(void *)int64_t v17 = v29;
      *(void *)(v17 + 8) = v30;
      *(void *)(v17 + 16) = v31;
      *(unsigned char *)(v17 + 24) = v32;
      unint64_t v18 = *(void *)(v7 + 56) + 24 * v16;
      *(_OWORD *)unint64_t v18 = v41;
      *(void *)(v18 + 16) = v34;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v39;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::UInt v26;
  Swift::UInt v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  void *v39;
  uint64_t v40;
  char v41;
  int64_t v42;
  uint64_t v43;
  long long v44;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<KeyboardShortcutBinding, Int>, (void (*)(void))lazy protocol witness table accessor for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding);
  int v41 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    int v39 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    uint64_t v38 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    char v40 = v5;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        char v42 = v13;
        int64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        unint64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        if (v18 >= v38) {
          goto LABEL_35;
        }
        char v19 = v39[v18];
        uint64_t v20 = v13 + 1;
        if (!v19)
        {
          uint64_t v20 = v13 + 2;
          if (v13 + 2 >= v38) {
            goto LABEL_35;
          }
          char v19 = v39[v20];
          if (!v19)
          {
            long long v21 = v13 + 3;
            if (v13 + 3 >= v38)
            {
LABEL_35:
              swift_release();
              id v3 = v2;
              if (v41)
              {
                uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
                if (v37 >= 64) {
                  bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int v39 = -1 << v37;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            char v19 = v39[v21];
            if (!v19)
            {
              while (1)
              {
                uint64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_42;
                }
                if (v20 >= v38) {
                  goto LABEL_35;
                }
                char v19 = v39[v20];
                ++v21;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            uint64_t v20 = v13 + 3;
          }
        }
LABEL_21:
        uint64_t v10 = (v19 - 1) & v19;
        char v42 = v20;
        int64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
      }
      uint64_t v22 = *(void *)(v5 + 56);
      unint64_t v23 = *(void *)(v5 + 48) + (v17 << 6);
      char v25 = *(void *)v23;
      unint64_t v24 = *(void *)(v23 + 8);
      unint64_t v26 = *(void *)(v23 + 16);
      BOOL v27 = *(unsigned __int8 *)(v23 + 24);
      char v44 = *(_OWORD *)(v23 + 32);
      uint64_t v29 = *(void *)(v23 + 48);
      uint64_t v28 = *(void *)(v23 + 56);
      char v43 = *(void *)(v22 + 8 * v17);
      if ((v41 & 1) == 0)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
      }
      Hasher.init(_seed:)();
      String.hash(into:)();
      Hasher._combine(_:)(v26);
      Hasher._combine(_:)(v27);
      if (v28) {
        String.hash(into:)();
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v30 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v31 = result & ~v30;
      long long v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v11 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v31) & ~*(void *)(v11 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          int v35 = v32 == v34;
          if (v32 == v34) {
            long long v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v11 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v14 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = *(void *)(v7 + 48) + (v14 << 6);
      *(void *)unint64_t v15 = v25;
      *(void *)(v15 + 8) = v24;
      *(void *)(v15 + 16) = v26;
      *(unsigned char *)(v15 + 24) = v27;
      *(_OWORD *)(v15 + 32) = v44;
      *(void *)(v15 + 48) = v29;
      *(void *)(v15 + 56) = v28;
      *(void *)(*(void *)(v7 + 56) + 8 * v14) = v43;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v40;
      uint64_t v13 = v42;
    }
  }
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  long long *v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  uint64_t v26;
  unsigned char v27[8];
  _OWORD v28[6];
  unsigned char v29[25];

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>>, type metadata accessor for WeakBox<PlatformDocument>, (void (*)(void))lazy protocol witness table accessor for type IdentifiedDocumentGroupConfiguration and conformance IdentifiedDocumentGroupConfiguration);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v8 = (void *)(v5 + 64);
    uint64_t v9 = -1;
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    unint64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v15 = v14 | (v13 << 6);
      }
      else
      {
        unint64_t v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          return result;
        }
        if (v16 >= v11) {
          goto LABEL_23;
        }
        int64_t v17 = v8[v16];
        ++v13;
        if (!v17)
        {
          uint64_t v13 = v16 + 1;
          if (v16 + 1 >= v11) {
            goto LABEL_23;
          }
          int64_t v17 = v8[v13];
          if (!v17)
          {
            unint64_t v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_23:
              swift_release();
              if (a2)
              {
                unint64_t v26 = 1 << *(unsigned char *)(v5 + 32);
                if (v26 >= 64) {
                  bzero((void *)(v5 + 64), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v8 = -1 << v26;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            int64_t v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                uint64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_30;
                }
                if (v13 >= v11) {
                  goto LABEL_23;
                }
                int64_t v17 = v8[v13];
                ++v18;
                if (v17) {
                  goto LABEL_20;
                }
              }
            }
            uint64_t v13 = v18;
          }
        }
LABEL_20:
        uint64_t v10 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      char v19 = (long long *)(*(void *)(v5 + 48) + (v15 << 7));
      if (a2)
      {
        uint64_t v20 = *v19;
        long long v21 = v19[1];
        uint64_t v22 = v19[2];
        v28[3] = v19[3];
        unint64_t v23 = v19[4];
        unint64_t v24 = v19[5];
        char v25 = v19[6];
        *(_OWORD *)&v29[9] = *(long long *)((char *)v19 + 105);
        v28[5] = v24;
        *(_OWORD *)uint64_t v29 = v25;
        v28[4] = v23;
        v28[1] = v21;
        v28[2] = v22;
        v28[0] = v20;
        outlined init with take of (key: String, value: Any)?(*(void *)(v5 + 56) + 8 * v15, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for WeakBox<PlatformDocument>);
      }
      else
      {
        outlined init with copy of IdentifiedDocumentGroupConfiguration((uint64_t)v19, (uint64_t)v28);
        outlined init with copy of (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])(*(void *)(v5 + 56) + 8 * v15, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for WeakBox<PlatformDocument>);
      }
      uint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v28, (uint64_t)v27, v6);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  void *v36;
  char v37;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UIMenuIdentifier, [UIMenuElement]>();
  uint64_t v37 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v34 = v2;
    int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v36 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    int v35 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        uint64_t v20 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        long long v21 = v20 | (v13 << 6);
      }
      else
      {
        uint64_t v22 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v22 >= v35) {
          goto LABEL_33;
        }
        unint64_t v23 = v36[v22];
        ++v13;
        if (!v23)
        {
          uint64_t v13 = v22 + 1;
          if (v22 + 1 >= v35) {
            goto LABEL_33;
          }
          unint64_t v23 = v36[v13];
          if (!v23)
          {
            unint64_t v24 = v22 + 2;
            if (v24 >= v35)
            {
LABEL_33:
              swift_release();
              id v3 = v34;
              if (v37)
              {
                uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v36 = -1 << v33;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v23 = v36[v24];
            if (!v23)
            {
              while (1)
              {
                uint64_t v13 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_40;
                }
                if (v13 >= v35) {
                  goto LABEL_33;
                }
                unint64_t v23 = v36[v13];
                ++v24;
                if (v23) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v13 = v24;
          }
        }
LABEL_30:
        uint64_t v10 = (v23 - 1) & v23;
        long long v21 = __clz(__rbit64(v23)) + (v13 << 6);
      }
      uint64_t v29 = 8 * v21;
      uint64_t v30 = *(void **)(*(void *)(v5 + 48) + v29);
      uint64_t v31 = *(void *)(*(void *)(v5 + 56) + v29);
      if ((v37 & 1) == 0)
      {
        long long v32 = v30;
        swift_bridgeObjectRetain();
      }
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      String.hash(into:)();
      unint64_t v14 = Hasher._finalize()();
      uint64_t result = swift_bridgeObjectRelease();
      unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = v14 & ~v15;
      int64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v15) >> 6;
        do
        {
          if (++v17 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v17 == v26;
          if (v17 == v26) {
            int64_t v17 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v11 + 8 * v17);
        }
        while (v28 == -1);
        unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
      }
      *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
      char v19 = 8 * v18;
      *(void *)(*(void *)(v7 + 48) + v19) = v30;
      *(void *)(*(void *)(v7 + 56) + v19) = v31;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UIMenuIdentifier, UIMenuIdentifier>();
  int v39 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v38 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v36 = v2;
  uint64_t v37 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      long long v21 = v20 | (v13 << 6);
      goto LABEL_31;
    }
    uint64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v37) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      uint64_t v13 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v38 + 8 * v13);
      if (!v24)
      {
        char v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_33:
          swift_release();
          id v3 = v36;
          if ((v39 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            uint64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v37) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v38 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v25;
      }
    }
LABEL_30:
    uint64_t v10 = (v24 - 1) & v24;
    long long v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    long long v32 = *(void **)(*(void *)(v5 + 56) + v30);
    if ((v39 & 1) == 0)
    {
      uint64_t v33 = v31;
      uint64_t v34 = v32;
    }
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    String.hash(into:)();
    unint64_t v14 = Hasher._finalize()();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = v14 & ~v15;
    int64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v11 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v26 = 0;
      BOOL v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v28 = v17 == v27;
        if (v17 == v27) {
          int64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v11 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v11 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    char v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v36;
  unint64_t v23 = (void *)(v5 + 64);
  if ((v39 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  int v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  void *v22;
  unint64_t v23;
  int64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, UIAccessibilityCustomRotor>();
  uint64_t v38 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  int v35 = v2;
  uint64_t v36 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      char v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    long long v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      uint64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        unint64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          id v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            uint64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v24;
      }
    }
LABEL_30:
    uint64_t v10 = (v23 - 1) & v23;
    uint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    long long v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      uint64_t v33 = v32;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      int64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v35;
  uint64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  Swift::UInt *v15;
  void *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  Swift::UInt *v22;
  Swift::UInt v23;
  Swift::UInt v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void *v39;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, RawPanGesture.StateType.EventInfo>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v38 = a2;
    int64_t v8 = 0;
    int v39 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        int64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v8 << 6);
      }
      else
      {
        char v19 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v19 >= v12) {
          goto LABEL_31;
        }
        uint64_t v20 = v39[v19];
        ++v8;
        if (!v20)
        {
          int64_t v8 = v19 + 1;
          if (v19 + 1 >= v12) {
            goto LABEL_31;
          }
          uint64_t v20 = v39[v8];
          if (!v20)
          {
            long long v21 = v19 + 2;
            if (v21 >= v12)
            {
LABEL_31:
              if ((v38 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_38;
              }
              uint64_t v37 = 1 << *(unsigned char *)(v5 + 32);
              if (v37 >= 64) {
                bzero(v39, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int v39 = -1 << v37;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v20 = v39[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v8 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                uint64_t v20 = v39[v8];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v21;
          }
        }
LABEL_21:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v8 << 6);
      }
      uint64_t v22 = (Swift::UInt *)(*(void *)(v5 + 48) + 16 * v18);
      unint64_t v24 = *v22;
      unint64_t v23 = v22[1];
      char v25 = (uint64_t *)(*(void *)(v5 + 56) + 32 * v18);
      BOOL v27 = v25[2];
      unint64_t v26 = v25[3];
      uint64_t v29 = *v25;
      uint64_t v28 = v25[1];
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v23);
      uint64_t result = Hasher._finalize()();
      uint64_t v30 = -1 << *(unsigned char *)(v7 + 32);
      uint64_t v31 = result & ~v30;
      long long v32 = v31 >> 6;
      if (((-1 << v31) & ~*(void *)(v13 + 8 * (v31 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v31) & ~*(void *)(v13 + 8 * (v31 >> 6)))) | v31 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v33 = 0;
        uint64_t v34 = (unint64_t)(63 - v30) >> 6;
        do
        {
          if (++v32 == v34 && (v33 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          int v35 = v32 == v34;
          if (v32 == v34) {
            long long v32 = 0;
          }
          v33 |= v35;
          uint64_t v36 = *(void *)(v13 + 8 * v32);
        }
        while (v36 == -1);
        unint64_t v14 = __clz(__rbit64(~v36)) + (v32 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      unint64_t v15 = (Swift::UInt *)(*(void *)(v7 + 48) + 16 * v14);
      *unint64_t v15 = v24;
      v15[1] = v23;
      unint64_t v16 = (void *)(*(void *)(v7 + 56) + 32 * v14);
      *unint64_t v16 = v29;
      v16[1] = v28;
      v16[2] = v27;
      v16[3] = v26;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *id v3 = v7;
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  long long v25;
  uint64_t v26;
  char v27;
  long long v28;
  char v29;
  unsigned char v30[48];

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>, type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>)), (void (*)(void))lazy protocol witness table accessor for type TableRowID and conformance TableRowID);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v8 = (void *)(v5 + 64);
    uint64_t v9 = -1;
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    unint64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v18 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        char v19 = v18 | (v13 << 6);
      }
      else
      {
        uint64_t v20 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          return result;
        }
        if (v20 >= v11) {
          goto LABEL_23;
        }
        long long v21 = v8[v20];
        ++v13;
        if (!v21)
        {
          uint64_t v13 = v20 + 1;
          if (v20 + 1 >= v11) {
            goto LABEL_23;
          }
          long long v21 = v8[v13];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v11)
            {
LABEL_23:
              swift_release();
              if (a2)
              {
                unint64_t v24 = 1 << *(unsigned char *)(v5 + 32);
                if (v24 >= 64) {
                  bzero((void *)(v5 + 64), ((unint64_t)(v24 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v8 = -1 << v24;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            long long v21 = v8[v22];
            if (!v21)
            {
              while (1)
              {
                uint64_t v13 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_30;
                }
                if (v13 >= v11) {
                  goto LABEL_23;
                }
                long long v21 = v8[v13];
                ++v22;
                if (v21) {
                  goto LABEL_20;
                }
              }
            }
            uint64_t v13 = v22;
          }
        }
LABEL_20:
        uint64_t v10 = (v21 - 1) & v21;
        char v19 = __clz(__rbit64(v21)) + (v13 << 6);
      }
      unint64_t v23 = *(void *)(v5 + 48) + 48 * v19;
      if (a2) {
        outlined init with take of TableRowID(v23, (uint64_t)v30);
      }
      else {
        outlined init with copy of TableRowID(v23, (uint64_t)v30);
      }
      unint64_t v14 = *(void *)(v5 + 56) + 56 * v19;
      unint64_t v15 = *(unsigned char *)(v14 + 48);
      unint64_t v16 = *(unsigned char *)(v14 + 24);
      int64_t v17 = *(void *)(v14 + 16);
      char v25 = *(_OWORD *)v14;
      unint64_t v26 = v17;
      BOOL v27 = v16;
      uint64_t v28 = *(_OWORD *)(v14 + 32);
      uint64_t v29 = v15;
      uint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v30, (uint64_t *)&v25, v6);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v6;
  return result;
}

{
  void *v2;
  void *v3;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned char v21[48];

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TableRowID, Int>, (void (*)(void))lazy protocol witness table accessor for type TableRowID and conformance TableRowID);
  uint64_t v6 = (void *)static _DictionaryStorage.resize(original:capacity:move:)();
  if (*(void *)(v5 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v8 = (void *)(v5 + 64);
    uint64_t v9 = -1;
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    uint64_t v10 = v9 & *(void *)(v5 + 64);
    unint64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v14 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v15 = v14 | (v13 << 6);
      }
      else
      {
        unint64_t v16 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
          __break(1u);
LABEL_30:
          __break(1u);
          return result;
        }
        if (v16 >= v11) {
          goto LABEL_23;
        }
        int64_t v17 = v8[v16];
        ++v13;
        if (!v17)
        {
          uint64_t v13 = v16 + 1;
          if (v16 + 1 >= v11) {
            goto LABEL_23;
          }
          int64_t v17 = v8[v13];
          if (!v17)
          {
            unint64_t v18 = v16 + 2;
            if (v18 >= v11)
            {
LABEL_23:
              swift_release();
              if (a2)
              {
                uint64_t v20 = 1 << *(unsigned char *)(v5 + 32);
                if (v20 >= 64) {
                  bzero((void *)(v5 + 64), ((unint64_t)(v20 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v8 = -1 << v20;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            int64_t v17 = v8[v18];
            if (!v17)
            {
              while (1)
              {
                uint64_t v13 = v18 + 1;
                if (__OFADD__(v18, 1)) {
                  goto LABEL_30;
                }
                if (v13 >= v11) {
                  goto LABEL_23;
                }
                int64_t v17 = v8[v13];
                ++v18;
                if (v17) {
                  goto LABEL_20;
                }
              }
            }
            uint64_t v13 = v18;
          }
        }
LABEL_20:
        uint64_t v10 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v13 << 6);
      }
      char v19 = *(void *)(v5 + 48) + 48 * v15;
      if (a2) {
        outlined init with take of TableRowID(v19, (uint64_t)v21);
      }
      else {
        outlined init with copy of TableRowID(v19, (uint64_t)v21);
      }
      uint64_t result = specialized _NativeDictionary._unsafeInsertNew(key:value:)((uint64_t)v21, *(void *)(*(void *)(v5 + 56) + 8 * v15), v6);
    }
  }
  uint64_t result = swift_release();
  *id v3 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;
  int64_t v37;
  uint64_t *v38;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Int, (Int, CountingIndex<Int>)>();
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v36 = a2;
    int v35 = v3;
    int64_t v8 = 0;
    uint64_t v38 = (uint64_t *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v33 = -1 << v9;
    uint64_t v34 = v9;
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v37 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v37) {
          goto LABEL_31;
        }
        unint64_t v18 = v38[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v37) {
            goto LABEL_31;
          }
          unint64_t v18 = v38[v8];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v37)
            {
LABEL_31:
              if ((v36 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v35;
                goto LABEL_38;
              }
              if (v34 >= 64) {
                bzero(v38, 8 * v37);
              }
              else {
                *uint64_t v38 = v33;
              }
              id v3 = v35;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v38[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v37) {
                  goto LABEL_31;
                }
                unint64_t v18 = v38[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      long long v21 = *(void *)(v5 + 56) + 32 * v16;
      uint64_t v22 = *(unsigned char *)(v21 + 24);
      unint64_t v23 = *(void *)(v21 + 8);
      unint64_t v24 = *(void *)(v21 + 16);
      char v25 = *(void *)v21;
      uint64_t result = static Hasher._hash(seed:_:)();
      unint64_t v26 = -1 << *(unsigned char *)(v7 + 32);
      BOOL v27 = result & ~v26;
      uint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v29 = 0;
        uint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          uint64_t v31 = v28 == v30;
          if (v28 == v30) {
            uint64_t v28 = 0;
          }
          v29 |= v31;
          long long v32 = *(void *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        uint64_t v13 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v7 + 48) + 8 * v13) = v20;
      unint64_t v14 = *(void *)(v7 + 56) + 32 * v13;
      *(void *)unint64_t v14 = v25;
      *(void *)(v14 + 8) = v23;
      *(void *)(v14 + 16) = v24;
      *(unsigned char *)(v14 + 24) = v22;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::UInt *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt *v28;
  Swift::UInt v29;
  Swift::UInt v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  void *v37;
  char v38;
  long long v39;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, HoverEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t v38 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v37 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        char v19 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        uint64_t v20 = v19 | (v8 << 6);
      }
      else
      {
        long long v21 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v21 >= v36) {
          goto LABEL_33;
        }
        uint64_t v22 = v37[v21];
        ++v8;
        if (!v22)
        {
          int64_t v8 = v21 + 1;
          if (v21 + 1 >= v36) {
            goto LABEL_33;
          }
          uint64_t v22 = v37[v8];
          if (!v22)
          {
            unint64_t v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_33:
              if ((v38 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              int v35 = 1 << *(unsigned char *)(v5 + 32);
              if (v35 >= 64) {
                bzero(v37, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v37 = -1 << v35;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            uint64_t v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v8 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v36) {
                  goto LABEL_33;
                }
                uint64_t v22 = v37[v8];
                ++v23;
                if (v22) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v23;
          }
        }
LABEL_30:
        unint64_t v11 = (v22 - 1) & v22;
        uint64_t v20 = __clz(__rbit64(v22)) + (v8 << 6);
      }
      uint64_t v28 = (Swift::UInt *)(*(void *)(v5 + 48) + 16 * v20);
      uint64_t v30 = *v28;
      uint64_t v29 = v28[1];
      uint64_t v31 = *(void *)(v5 + 56) + 40 * v20;
      long long v32 = *(void *)v31;
      uint64_t v33 = *(unsigned char *)(v31 + 8);
      uint64_t v34 = *(void *)(v31 + 16);
      int v39 = *(_OWORD *)(v31 + 24);
      if ((v38 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v30);
      Hasher._combine(_:)(v29);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        char v25 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          unint64_t v26 = v15 == v25;
          if (v15 == v25) {
            unint64_t v15 = 0;
          }
          v24 |= v26;
          BOOL v27 = *(void *)(v12 + 8 * v15);
        }
        while (v27 == -1);
        unint64_t v16 = __clz(__rbit64(~v27)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      int64_t v17 = (Swift::UInt *)(*(void *)(v7 + 48) + 16 * v16);
      *int64_t v17 = v30;
      v17[1] = v29;
      unint64_t v18 = *(void *)(v7 + 56) + 40 * v16;
      *(void *)unint64_t v18 = v32;
      *(unsigned char *)(v18 + 8) = v33;
      *(void *)(v18 + 16) = v34;
      *(_OWORD *)(v18 + 24) = v39;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::UInt *v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  Swift::UInt *v26;
  Swift::UInt v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  void *v32;
  char v33;

  id v4 = *v2;
  type metadata accessor for _DictionaryStorage<EventID, [KeyPress.Handler]>();
  uint64_t v33 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v6 = result;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 0;
    long long v32 = (void *)(v4 + 64);
    int64_t v8 = 1 << *(unsigned char *)(v4 + 32);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    uint64_t v10 = v9 & *(void *)(v4 + 64);
    uint64_t v31 = (unint64_t)(v8 + 63) >> 6;
    unint64_t v11 = result + 64;
    while (1)
    {
      if (v10)
      {
        int64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v18 = v17 | (v7 << 6);
      }
      else
      {
        char v19 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        uint64_t result = v4 + 64;
        if (v19 >= v31) {
          goto LABEL_33;
        }
        uint64_t v20 = v32[v19];
        ++v7;
        if (!v20)
        {
          uint64_t v7 = v19 + 1;
          if (v19 + 1 >= v31) {
            goto LABEL_33;
          }
          uint64_t v20 = v32[v7];
          if (!v20)
          {
            long long v21 = v19 + 2;
            if (v21 >= v31)
            {
LABEL_33:
              if (v33)
              {
                uint64_t v30 = 1 << *(unsigned char *)(v4 + 32);
                if (v30 >= 64) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v32 = -1 << v30;
                }
                *(void *)(v4 + 16) = 0;
              }
              break;
            }
            uint64_t v20 = v32[v21];
            if (!v20)
            {
              while (1)
              {
                uint64_t v7 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v7 >= v31) {
                  goto LABEL_33;
                }
                uint64_t v20 = v32[v7];
                ++v21;
                if (v20) {
                  goto LABEL_30;
                }
              }
            }
            uint64_t v7 = v21;
          }
        }
LABEL_30:
        uint64_t v10 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v7 << 6);
      }
      unint64_t v26 = (Swift::UInt *)(*(void *)(v4 + 48) + 16 * v18);
      uint64_t v28 = *v26;
      BOOL v27 = v26[1];
      uint64_t v29 = *(void *)(*(void *)(v4 + 56) + 8 * v18);
      if ((v33 & 1) == 0) {
        swift_bridgeObjectRetain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v28);
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      int64_t v12 = -1 << *(unsigned char *)(v6 + 32);
      uint64_t v13 = result & ~v12;
      unint64_t v14 = v13 >> 6;
      if (((-1 << v13) & ~*(void *)(v11 + 8 * (v13 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v13) & ~*(void *)(v11 + 8 * (v13 >> 6)))) | v13 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v22 = 0;
        unint64_t v23 = (unint64_t)(63 - v12) >> 6;
        do
        {
          if (++v14 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          unint64_t v24 = v14 == v23;
          if (v14 == v23) {
            unint64_t v14 = 0;
          }
          v22 |= v24;
          char v25 = *(void *)(v11 + 8 * v14);
        }
        while (v25 == -1);
        unint64_t v15 = __clz(__rbit64(~v25)) + (v14 << 6);
      }
      *(void *)(v11 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = (Swift::UInt *)(*(void *)(v6 + 48) + 16 * v15);
      *unint64_t v16 = v28;
      v16[1] = v27;
      *(void *)(*(void *)(v6 + 56) + 8 * v15) = v29;
      ++*(void *)(v6 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v2 = v6;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  void *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  uint64_t v41;
  char v42;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<String, String>();
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  int v39 = v2;
  char v40 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      long long v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      uint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    unint64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    unint64_t v24 = (void *)(v5 + 64);
    char v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      uint64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      char v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        unint64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          id v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        char v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            uint64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            char v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        uint64_t v13 = v26;
      }
    }
LABEL_30:
    uint64_t v10 = (v25 - 1) & v25;
    uint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    long long v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    int v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      int64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v27 = 0;
      uint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        uint64_t v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      int64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = 16 * v17;
    char v19 = (void *)(*(void *)(v7 + 48) + v18);
    *char v19 = v34;
    v19[1] = v33;
    uint64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *uint64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  id v3 = v39;
  unint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  unsigned int v37;
  long long v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  int64_t v48;
  void *v49;
  uint64_t v50;
  char v51;
  char v52;
  long long v53;
  long long v54;
  long long v55;
  char v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  char v61;
  char v62;
  char v63;
  char v64;
  uint64_t v65;
  int v66;
  __int16 v67;
  uint64_t v68;
  long long v69;
  long long v70;
  unsigned char v71[32];
  long long v72;
  long long v73;
  unsigned char v74[64];
  unsigned char v75[19];

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<Int, Image.Resolved>();
  long long v51 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    uint64_t v49 = (void *)(v5 + 64);
    long long v50 = v5;
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    long long v47 = v3;
    uint64_t v48 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
        if (v51) {
          goto LABEL_10;
        }
      }
      else
      {
        char v25 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = (uint64_t)v49;
        if (v25 >= v48) {
          goto LABEL_33;
        }
        unint64_t v26 = v49[v25];
        ++v8;
        if (!v26)
        {
          int64_t v8 = v25 + 1;
          if (v25 + 1 >= v48) {
            goto LABEL_33;
          }
          unint64_t v26 = v49[v8];
          if (!v26)
          {
            BOOL v27 = v25 + 2;
            if (v27 >= v48)
            {
LABEL_33:
              if ((v51 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v47;
                goto LABEL_40;
              }
              long long v46 = 1 << *(unsigned char *)(v5 + 32);
              if (v46 >= 64) {
                bzero(v49, ((unint64_t)(v46 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v49 = -1 << v46;
              }
              id v3 = v47;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v26 = v49[v27];
            if (!v26)
            {
              while (1)
              {
                int64_t v8 = v27 + 1;
                if (__OFADD__(v27, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v48) {
                  goto LABEL_33;
                }
                unint64_t v26 = v49[v8];
                ++v27;
                if (v26) {
                  goto LABEL_22;
                }
              }
            }
            int64_t v8 = v27;
          }
        }
LABEL_22:
        unint64_t v11 = (v26 - 1) & v26;
        unint64_t v16 = __clz(__rbit64(v26)) + (v8 << 6);
        if (v51)
        {
LABEL_10:
          int64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
          unint64_t v18 = *(void *)(v5 + 56) + 184 * v16;
          uint64_t v65 = *(void *)v18;
          uint64_t v62 = *(unsigned char *)(v18 + 8);
          char v19 = *(void *)(v18 + 32);
          uint64_t v56 = *(unsigned char *)(v18 + 40);
          uint64_t v20 = *(unsigned char *)(v18 + 60);
          uint64_t v54 = *(_OWORD *)(v18 + 64);
          char v55 = *(_OWORD *)(v18 + 44);
          long long v53 = *(_OWORD *)(v18 + 80);
          long long v52 = *(unsigned char *)(v18 + 96);
          long long v21 = *(unsigned char *)(v18 + 97);
          uint64_t v22 = *(unsigned char *)(v18 + 98);
          unint64_t v23 = *(unsigned char *)(v18 + 99);
          uint64_t v58 = *(_OWORD *)(v18 + 104);
          uint64_t v59 = *(_OWORD *)(v18 + 16);
          uint64_t v57 = *(_OWORD *)(v18 + 120);
          uint64_t v60 = *(_OWORD *)(v18 + 136);
          uint64_t v61 = *(unsigned char *)(v18 + 152);
          unint64_t v24 = *(unsigned char *)(v18 + 160);
          v68 = *(void *)(v18 + 168);
          unint64_t v66 = *(_DWORD *)(v18 + 156);
          uint64_t v67 = *(_WORD *)(v18 + 176);
          v63 = *(unsigned char *)(v18 + 153);
          uint64_t v64 = *(unsigned char *)(v18 + 178);
          goto LABEL_24;
        }
      }
      int64_t v17 = *(void *)(*(void *)(v5 + 48) + 8 * v16);
      uint64_t v28 = *(void *)(v5 + 56) + 184 * v16;
      uint64_t v30 = *(_OWORD *)(v28 + 32);
      uint64_t v29 = *(_OWORD *)(v28 + 48);
      uint64_t v31 = *(_OWORD *)v28;
      v70 = *(_OWORD *)(v28 + 16);
      *(_OWORD *)uint64_t v71 = v30;
      v69 = v31;
      long long v32 = *(_OWORD *)(v28 + 112);
      uint64_t v34 = *(_OWORD *)(v28 + 64);
      uint64_t v33 = *(_OWORD *)(v28 + 80);
      *(_OWORD *)uint64_t v74 = *(_OWORD *)(v28 + 96);
      *(_OWORD *)&v74[16] = v32;
      uint64_t v72 = v34;
      uint64_t v73 = v33;
      uint64_t v36 = *(_OWORD *)(v28 + 144);
      int v35 = *(_OWORD *)(v28 + 160);
      uint64_t v38 = *(_OWORD *)(v28 + 128);
      *(_DWORD *)&v75[15] = *(_DWORD *)(v28 + 175);
      uint64_t v37 = *(_DWORD *)&v75[15];
      *(_OWORD *)&v74[48] = v36;
      *(_OWORD *)v75 = v35;
      *(_OWORD *)&v74[32] = v38;
      *(_OWORD *)&v71[16] = v29;
      v68 = *((void *)&v35 + 1);
      unint64_t v66 = HIDWORD(v36);
      uint64_t v67 = v37 >> 8;
      unint64_t v24 = v35;
      v63 = BYTE9(v36);
      uint64_t v64 = HIBYTE(v37);
      uint64_t v57 = *(_OWORD *)&v74[24];
      uint64_t v58 = *(_OWORD *)&v74[8];
      uint64_t v65 = v69;
      uint64_t v61 = BYTE8(v36);
      uint64_t v62 = BYTE8(v69);
      uint64_t v59 = v70;
      uint64_t v60 = *(_OWORD *)&v74[40];
      char v19 = *(void *)v71;
      uint64_t v56 = v71[8];
      uint64_t v20 = BYTE12(v29);
      uint64_t v54 = v34;
      char v55 = *(_OWORD *)&v71[12];
      long long v53 = v73;
      long long v52 = v74[0];
      long long v21 = v74[1];
      uint64_t v22 = v74[2];
      unint64_t v23 = v74[3];
      outlined retain of Image.Resolved((uint64_t)&v69);
LABEL_24:
      uint64_t result = static Hasher._hash(seed:_:)();
      int v39 = -1 << *(unsigned char *)(v7 + 32);
      char v40 = result & ~v39;
      int v41 = v40 >> 6;
      if (((-1 << v40) & ~*(void *)(v12 + 8 * (v40 >> 6))) != 0)
      {
        uint64_t v13 = __clz(__rbit64((-1 << v40) & ~*(void *)(v12 + 8 * (v40 >> 6)))) | v40 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v42 = 0;
        char v43 = (unint64_t)(63 - v39) >> 6;
        do
        {
          if (++v41 == v43 && (v42 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          char v44 = v41 == v43;
          if (v41 == v43) {
            int v41 = 0;
          }
          v42 |= v44;
          char v45 = *(void *)(v12 + 8 * v41);
        }
        while (v45 == -1);
        uint64_t v13 = __clz(__rbit64(~v45)) + (v41 << 6);
      }
      LOBYTE(v69) = v20;
      *(void *)(v12 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v7 + 48) + 8 * v13) = v17;
      unint64_t v14 = *(void *)(v7 + 56) + 184 * v13;
      *(void *)unint64_t v14 = v65;
      *(unsigned char *)(v14 + 8) = v62;
      *(_OWORD *)(v14 + 16) = v59;
      *(void *)(v14 + 32) = v19;
      *(unsigned char *)(v14 + 40) = v56;
      *(_OWORD *)(v14 + 44) = v55;
      *(unsigned char *)(v14 + 60) = v20;
      *(_OWORD *)(v14 + 64) = v54;
      *(_OWORD *)(v14 + 80) = v53;
      *(unsigned char *)(v14 + 96) = v52;
      *(unsigned char *)(v14 + 97) = v21;
      *(unsigned char *)(v14 + 98) = v22;
      *(unsigned char *)(v14 + 99) = v23;
      *(_OWORD *)(v14 + 104) = v58;
      *(_OWORD *)(v14 + 120) = v57;
      *(_OWORD *)(v14 + 136) = v60;
      *(unsigned char *)(v14 + 152) = v61;
      *(unsigned char *)(v14 + 153) = v63;
      *(_DWORD *)(v14 + 156) = v66;
      *(unsigned char *)(v14 + 160) = v24;
      *(void *)(v14 + 168) = v68;
      *(_WORD *)(v14 + 176) = v67;
      *(unsigned char *)(v14 + 178) = v64;
      ++*(void *)(v7 + 16);
      uint64_t v5 = v50;
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  Swift::UInt v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  void *v31;

  id v3 = v2;
  uint64_t v5 = *v2;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AdaptableTabBarPlacement, Visibility>, (void (*)(void))lazy protocol witness table accessor for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement);
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    uint64_t v30 = a2;
    int64_t v8 = 0;
    uint64_t v31 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v8 << 6);
      }
      else
      {
        int64_t v17 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v17 >= v12) {
          goto LABEL_31;
        }
        unint64_t v18 = v31[v17];
        ++v8;
        if (!v18)
        {
          int64_t v8 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_31;
          }
          unint64_t v18 = v31[v8];
          if (!v18)
          {
            char v19 = v17 + 2;
            if (v19 >= v12)
            {
LABEL_31:
              if ((v30 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_38;
              }
              uint64_t v29 = 1 << *(unsigned char *)(v5 + 32);
              if (v29 >= 64) {
                bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *uint64_t v31 = -1 << v29;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            unint64_t v18 = v31[v19];
            if (!v18)
            {
              while (1)
              {
                int64_t v8 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_40;
                }
                if (v8 >= v12) {
                  goto LABEL_31;
                }
                unint64_t v18 = v31[v8];
                ++v19;
                if (v18) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v8 = v19;
          }
        }
LABEL_21:
        unint64_t v11 = (v18 - 1) & v18;
        unint64_t v16 = __clz(__rbit64(v18)) + (v8 << 6);
      }
      uint64_t v20 = *(unsigned __int8 *)(*(void *)(v5 + 48) + v16);
      long long v21 = *(unsigned char *)(*(void *)(v5 + 56) + v16);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v20);
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v23) & ~*(void *)(v13 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v13 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v14 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v13 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      *(unsigned char *)(*(void *)(v7 + 48) + v14) = v20;
      *(unsigned char *)(*(void *)(v7 + 56) + v14) = v21;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_38:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  Swift::UInt v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  void *v35;
  char v36;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>, (void (*)(uint64_t))type metadata accessor for (_ViewList_ID.Canonical, AccessibilitySectionContext?), (void (*)(void))lazy protocol witness table accessor for type UniqueID and conformance UniqueID);
  uint64_t v36 = a2;
  uint64_t result = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = result;
  if (*(void *)(v5 + 16))
  {
    int64_t v8 = 0;
    int v35 = (void *)(v5 + 64);
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    uint64_t v34 = (unint64_t)(v9 + 63) >> 6;
    int64_t v12 = result + 64;
    while (1)
    {
      if (v11)
      {
        unint64_t v18 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        char v19 = v18 | (v8 << 6);
      }
      else
      {
        uint64_t v20 = v8 + 1;
        if (__OFADD__(v8, 1))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }
        uint64_t result = v5 + 64;
        if (v20 >= v34) {
          goto LABEL_33;
        }
        long long v21 = v35[v20];
        ++v8;
        if (!v21)
        {
          int64_t v8 = v20 + 1;
          if (v20 + 1 >= v34) {
            goto LABEL_33;
          }
          long long v21 = v35[v8];
          if (!v21)
          {
            uint64_t v22 = v20 + 2;
            if (v22 >= v34)
            {
LABEL_33:
              if ((v36 & 1) == 0)
              {
                uint64_t result = swift_release();
                id v3 = v2;
                goto LABEL_40;
              }
              uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
              if (v33 >= 64) {
                bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              }
              else {
                *int v35 = -1 << v33;
              }
              id v3 = v2;
              *(void *)(v5 + 16) = 0;
              break;
            }
            long long v21 = v35[v22];
            if (!v21)
            {
              while (1)
              {
                int64_t v8 = v22 + 1;
                if (__OFADD__(v22, 1)) {
                  goto LABEL_42;
                }
                if (v8 >= v34) {
                  goto LABEL_33;
                }
                long long v21 = v35[v8];
                ++v22;
                if (v21) {
                  goto LABEL_30;
                }
              }
            }
            int64_t v8 = v22;
          }
        }
LABEL_30:
        unint64_t v11 = (v21 - 1) & v21;
        char v19 = __clz(__rbit64(v21)) + (v8 << 6);
      }
      BOOL v27 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
      uint64_t v28 = *(void *)(v5 + 56) + 24 * v19;
      uint64_t v29 = *(void *)v28;
      uint64_t v30 = *(void *)(v28 + 8);
      uint64_t v31 = *(unsigned __int16 *)(v28 + 20);
      long long v32 = *(unsigned int *)(v28 + 16);
      if ((v36 & 1) == 0) {
        swift_retain();
      }
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      uint64_t v13 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v14 = result & ~v13;
      unint64_t v15 = v14 >> 6;
      if (((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6))) != 0)
      {
        unint64_t v16 = __clz(__rbit64((-1 << v14) & ~*(void *)(v12 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v13) >> 6;
        do
        {
          if (++v15 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_41;
          }
          char v25 = v15 == v24;
          if (v15 == v24) {
            unint64_t v15 = 0;
          }
          v23 |= v25;
          unint64_t v26 = *(void *)(v12 + 8 * v15);
        }
        while (v26 == -1);
        unint64_t v16 = __clz(__rbit64(~v26)) + (v15 << 6);
      }
      *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      *(void *)(*(void *)(v7 + 48) + 8 * v16) = v27;
      int64_t v17 = *(void *)(v7 + 56) + 24 * v16;
      *(void *)int64_t v17 = v29;
      *(void *)(v17 + 8) = v30;
      *(_WORD *)(v17 + 20) = (v32 | (unint64_t)(v31 << 32)) >> 32;
      *(_DWORD *)(v17 + 16) = v32;
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
LABEL_40:
  *id v3 = v7;
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;
  long long v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  void *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  uint64_t v45;

  id v3 = v2;
  uint64_t v5 = *v2;
  type metadata accessor for _DictionaryStorage<AnyHashable, _ScrollableLayoutProxy.SizeRecord>();
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  int64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v40 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  uint64_t v10 = v9 & *(void *)(v5 + 64);
  int v39 = (unint64_t)(v8 + 63) >> 6;
  unint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  uint64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      uint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      long long v21 = v20 | (v13 << 6);
      goto LABEL_22;
    }
    uint64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v22 >= v39) {
      break;
    }
    unint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v40 + 8 * v22);
    ++v13;
    if (!v24)
    {
      uint64_t v13 = v22 + 1;
      if (v22 + 1 >= v39) {
        goto LABEL_34;
      }
      unint64_t v24 = *(void *)(v40 + 8 * v13);
      if (!v24)
      {
        char v25 = v22 + 2;
        if (v25 >= v39)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v24 = *(void *)(v40 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            uint64_t v13 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_43;
            }
            if (v13 >= v39) {
              goto LABEL_34;
            }
            unint64_t v24 = *(void *)(v40 + 8 * v13);
            ++v25;
            if (v24) {
              goto LABEL_21;
            }
          }
        }
        uint64_t v13 = v25;
      }
    }
LABEL_21:
    uint64_t v10 = (v24 - 1) & v24;
    long long v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_22:
    unint64_t v26 = *(void *)(v5 + 48) + 40 * v21;
    if (a2)
    {
      BOOL v27 = *(_OWORD *)v26;
      uint64_t v28 = *(_OWORD *)(v26 + 16);
      char v45 = *(void *)(v26 + 32);
      char v43 = v27;
      char v44 = v28;
    }
    else
    {
      outlined init with copy of AnyHashable(v26, (uint64_t)&v43);
    }
    uint64_t v29 = *(void *)(v5 + 56) + 40 * v21;
    int v41 = *(_OWORD *)(v29 + 8);
    char v42 = *(_OWORD *)(v29 + 24);
    uint64_t v30 = *(_DWORD *)v29;
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v7 + 40));
    uint64_t v31 = -1 << *(unsigned char *)(v7 + 32);
    long long v32 = result & ~v31;
    uint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v14 = __clz(__rbit64((-1 << v32) & ~*(void *)(v11 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v34 = 0;
      int v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        uint64_t v36 = v33 == v35;
        if (v33 == v35) {
          uint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v11 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v14 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    unint64_t v15 = 40 * v14;
    unint64_t v16 = *(void *)(v7 + 48) + v15;
    int64_t v17 = v43;
    unint64_t v18 = v44;
    *(void *)(v16 + 32) = v45;
    *(_OWORD *)unint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    char v19 = *(void *)(v7 + 56) + v15;
    *(_DWORD *)char v19 = v30;
    *(_OWORD *)(v19 + 8) = v41;
    *(_OWORD *)(v19 + 24) = v42;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v23, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *id v3 = v7;
  return result;
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, AnyAccessibilityPropertiesEntry>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, AnyAccessibilityPropertiesEntry>)
  {
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, AnyAccessibilityPropertiesEntry>);
    }
  }
}

void closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = type metadata accessor for TypesettingConfiguration();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>);
  swift_retain_n();
  if (a3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v11 = *(void *)(v38 + 16);
  if (v11)
  {
    int64_t v12 = (uint64_t *)(v38 + 40);
    do
    {
      copyValueToMutableTraits #1 <A>(for:) in closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)(*(v12 - 1), (uint64_t)a1, a2, a3, *(v12 - 1), *v12);
      v12 += 2;
      --v11;
    }
    while (v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  EnvironmentValues.layoutDirection.getter();
  uint64_t v13 = v36;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (UIMutableTraits.layoutDirection.getter() != v13)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    UIMutableTraits.layoutDirection.setter();
  }
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  EnvironmentValues.displayScale.getter();
  double v15 = v14;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  UIMutableTraits.displayScale.getter();
  if (v15 != v16)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    UIMutableTraits.displayScale.setter();
  }
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  EnvironmentValues.dynamicTypeSize.getter();
  int64_t v17 = (void *)**((void **)&unk_1E53B9D28 + (char)v36);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  id v18 = v17;
  char v19 = (void *)UIMutableTraits.preferredContentSizeCategory.getter();
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;
  if (v20 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v22 == v23)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
      id v26 = v18;
      UIMutableTraits.preferredContentSizeCategory.setter();
    }
  }
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  EnvironmentValues.colorScheme.getter();
  if ((_BYTE)v36) {
    uint64_t v27 = 2;
  }
  else {
    uint64_t v27 = 1;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (v27 != UIMutableTraits.userInterfaceStyle.getter())
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    UIMutableTraits.userInterfaceStyle.setter();
  }
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  EnvironmentValues.displayGamut.getter();
  uint64_t v28 = v36;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (UIMutableTraits.displayGamut.getter() != v28)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    UIMutableTraits.displayGamut.setter();
  }
  if (static SemanticFeature.isEnabled.getter())
  {
    uint64_t v36 = a2;
    uint64_t v37 = a3;
    EnvironmentValues.backgroundMaterial.getter();
    char v29 = ~(_BYTE)v39;
    outlined consume of Material?(v38, v39);
    if (v29)
    {
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      if (UIMutableTraits._vibrancy.getter() == -1
        || (__swift_project_boxed_opaque_existential_1(a1, a1[3]), !UIMutableTraits._vibrancy.getter()))
      {
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
        UIMutableTraits._vibrancy.setter();
      }
    }
  }
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  EnvironmentValues._colorSchemeContrast.getter();
  uint64_t v30 = v36;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (UIMutableTraits.accessibilityContrast.getter() != v30)
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    UIMutableTraits.accessibilityContrast.setter();
  }
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  EnvironmentValues.horizontalSizeClass.getter();
  uint64_t v31 = 1;
  if (v36) {
    uint64_t v31 = 2;
  }
  if (v36 == 2) {
    uint64_t v32 = 0;
  }
  else {
    uint64_t v32 = v31;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (v32 != UIMutableTraits.horizontalSizeClass.getter())
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    UIMutableTraits.horizontalSizeClass.setter();
  }
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  EnvironmentValues.verticalSizeClass.getter();
  uint64_t v33 = 1;
  if (v36) {
    uint64_t v33 = 2;
  }
  if (v36 == 2) {
    uint64_t v34 = 0;
  }
  else {
    uint64_t v34 = v33;
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  if (v34 != UIMutableTraits.verticalSizeClass.getter())
  {
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
    UIMutableTraits.verticalSizeClass.setter();
  }
  if ((a4 & 1) == 0)
  {
    uint64_t v36 = a2;
    uint64_t v37 = a3;
    EnvironmentValues.backgroundInfo.getter();
    uint64_t v35 = v38;
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    if (v35 != UIMutableTraits.userInterfaceLevel.getter())
    {
      __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
      UIMutableTraits.userInterfaceLevel.setter();
    }
  }
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  EnvironmentValues.typesettingConfiguration.getter();
  specialized static TypesettingConfigurationKey.write(to:value:)((uint64_t)a1, (uint64_t)v10);
  _sypSgWOhTm_13((uint64_t)v10, MEMORY[0x1E4F40DE8]);
  uint64_t v38 = a2;
  uint64_t v39 = a3;
  EnvironmentValues.appearsActive.getter();
  __swift_mutable_project_boxed_opaque_existential_1((uint64_t)a1, a1[3]);
  UIMutableTraits.activeAppearance.setter();
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t outlined destroy of AccessibilityValueStorage?(uint64_t a1, unint64_t *a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of Any?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _sypSgWOhTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _sypSgWOhTm_1(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _sypSgMaTm_2(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _sypSgWOhTm_2(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for [TableColumnCustomizationID](0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _sypSgWOhTm_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _sypSgWOhTm_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _sypSgWOhTm_5(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for Binding<_DragReorderableView_DragState>(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _sypSgWOhTm_6(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _sypSgMaTm_4(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _sypSgWOhTm_7(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _s7SwiftUI7BindingVyAA14TextFieldStateVGMaTm_0(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _sypSgWOhTm_8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _sypSgWOhTm_9(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _sypSgWOhTm_10(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _sypSgWOhTm_11(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for ToolbarItemPlacement.Role?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _sypSgWOhTm_12(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _s10Foundation4DataVSgMaTm_0(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _sypSgWOhTm_13(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined consume of Material?(uint64_t a1, unsigned __int8 a2)
{
  if (a2 != 0xFF) {
    return outlined consume of Material.ID(a1, a2);
  }
  return a1;
}

uint64_t specialized static TypesettingConfigurationKey.write(to:value:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Locale.Language?();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Locale.Language();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TypesettingLanguage.Storage();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TypesettingLanguage.Storage(a2, (uint64_t)v13);
  type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48))(v13, 2, v14))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
    __swift_mutable_project_boxed_opaque_existential_1(a1, *(void *)(a1 + 24));
    return UIMutableTraits.typesettingLanguage.setter();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v6, v10, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
    __swift_mutable_project_boxed_opaque_existential_1(a1, *(void *)(a1 + 24));
    UIMutableTraits.typesettingLanguage.setter();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t outlined init with copy of TypesettingLanguage.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TypesettingLanguage.Storage();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (Locale.Language, TypesettingLanguage.Flags)()
{
  if (!lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags))
  {
    type metadata accessor for Locale.Language();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Locale.Language, TypesettingLanguage.Flags));
    }
  }
}

void type metadata accessor for Any?()
{
  if (!lazy cache variable for type metadata for Any?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Any?);
    }
  }
}

void type metadata accessor for (Badge, Spacer)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t outlined destroy of _LazyLayout_Subviews.Node(uint64_t a1)
{
  return a1;
}

uint64_t destroy for _LazyLayout_Subviews.Node(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 119);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)a1 + 2;
  }
  if (v2 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    swift_release();
    switch(*(unsigned char *)(a1 + 101))
    {
      case 0:
        __swift_destroy_boxed_opaque_existential_1(a1 + 16);
        break;
      case 1:
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1(a1 + 48);
        goto LABEL_11;
      case 2:
        goto LABEL_11;
      case 3:
        swift_bridgeObjectRelease();
LABEL_11:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    return swift_bridgeObjectRelease();
  }
}

uint64_t swapSubviews(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = MEMORY[0x1E4FBC860];
  }
  *a2 = v4;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *a2;
  if (isUniquelyReferenced_nonNull_native) {
    return specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v6 + 16));
  }
  *a2 = (uint64_t)specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v6 + 24) >> 1, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<_LazyLayout_Subview>, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBBE00], (void (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for _ContiguousArrayStorage<_LazyLayout_Subview>);

  return swift_bridgeObjectRelease();
}

uint64_t outlined destroy of ScrollableCollection?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI20ScrollableCollection_pSgWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI20ScrollableCollection_pSgWOhTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?(0, a2, a3, a4, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    a5(255, a3, a4);
    unint64_t v6 = type metadata accessor for Optional();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_23;
  }
  uint64_t v13 = *((void *)v4 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_29;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = &v4[96 * a2 + 32];
    size_t v17 = 96 * v15;
    if (96 * a1 < 96 * a2 || (&v4[96 * a1 + 32] < &v16[v17] ? (BOOL v18 = a1 == a2) : (BOOL v18 = 0), !v18)) {
      uint64_t result = (uint64_t)memmove(&v4[96 * a1 + 32], v16, v17);
    }
    uint64_t v19 = *((void *)v4 + 2);
    BOOL v14 = __OFADD__(v19, v8);
    uint64_t v20 = v19 - v7;
    if (!v14)
    {
      *((void *)v4 + 2) = v20;
LABEL_23:
      *unsigned int v2 = v4;
      return result;
    }
    goto LABEL_30;
  }
LABEL_31:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_22;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = v13 - a2;
  if (__OFSUB__(v13, a2)) {
    goto LABEL_28;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    if (72 * a1 < 72 * a2 || &v4[9 * a1 + 4] >= &v4[9 * a2 + 4 + 9 * v14])
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (a1 != a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v15 = v4[2];
    uint64_t v16 = __OFADD__(v15, v8);
    size_t v17 = v15 - v7;
    if (!v16)
    {
      v4[2] = v17;
LABEL_22:
      *(void *)unsigned int v2 = v4;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *((void *)v4 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = &v4[56 * a2 + 32];
    if (a1 != a2 || &v4[56 * a1 + 32] >= &v16[56 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[56 * a1 + 32], v16, 56 * v15);
    }
    size_t v17 = *((void *)v4 + 2);
    BOOL v14 = __OFADD__(v17, v8);
    BOOL v18 = v17 - v7;
    if (!v14)
    {
      *((void *)v4 + 2) = v18;
LABEL_20:
      *unsigned int v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  type metadata accessor for (tag: String, item: String)();
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (void *)&v16[32 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    }
    size_t v17 = v4[2];
    BOOL v14 = __OFADD__(v17, v8);
    BOOL v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *(void *)unsigned int v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *((void *)v4 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = &v4[104 * a2 + 32];
    if (a1 != a2 || &v4[104 * a1 + 32] >= &v16[104 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[104 * a1 + 32], v16, 104 * v15);
    }
    size_t v17 = *((void *)v4 + 2);
    BOOL v14 = __OFADD__(v17, v8);
    BOOL v18 = v17 - v7;
    if (!v14)
    {
      *((void *)v4 + 2) = v18;
LABEL_20:
      *unsigned int v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  void *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v4 = *(void **)v2;
  int64_t v5 = *(void *)(*(void *)v2 + 16);
  if (v5 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_22;
  }
  uint64_t v13 = v4[2];
  BOOL v14 = v13 - a2;
  if (__OFSUB__(v13, a2)) {
    goto LABEL_28;
  }
  if ((v14 & 0x8000000000000000) == 0)
  {
    if (a1 < a2 || &v4[2 * a1 + 4] >= &v4[2 * a2 + 4 + 2 * v14])
    {
      uint64_t result = swift_arrayInitWithTakeFrontToBack();
    }
    else if (a1 != a2)
    {
      uint64_t result = swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v15 = v4[2];
    uint64_t v16 = __OFADD__(v15, v8);
    size_t v17 = v15 - v7;
    if (!v16)
    {
      v4[2] = v17;
LABEL_22:
      *(void *)unsigned int v2 = v4;
      return result;
    }
    goto LABEL_29;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_20;
  }
  uint64_t v13 = *((void *)v4 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_26;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = &v4[72 * a2 + 32];
    if (a1 != a2 || &v4[72 * a1 + 32] >= &v16[72 * v15]) {
      uint64_t result = (uint64_t)memmove(&v4[72 * a1 + 32], v16, 72 * v15);
    }
    size_t v17 = *((void *)v4 + 2);
    BOOL v14 = __OFADD__(v17, v8);
    BOOL v18 = v17 - v7;
    if (!v14)
    {
      *((void *)v4 + 2) = v18;
LABEL_20:
      *unsigned int v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v2;
  char *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v4 = *v2;
  int64_t v5 = *((void *)*v2 + 2);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int64_t v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v9 > *((void *)v4 + 3) >> 1)
  {
    if (v5 <= v9) {
      int64_t v11 = v5 + v8;
    }
    else {
      int64_t v11 = v5;
    }
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  uint64_t result = swift_arrayDestroy();
  if (!v7) {
    goto LABEL_21;
  }
  uint64_t v13 = *((void *)v4 + 2);
  BOOL v14 = __OFSUB__(v13, a2);
  uint64_t v15 = v13 - a2;
  if (v14) {
    goto LABEL_27;
  }
  if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v16 = &v4[40 * a2 + 32];
    size_t v17 = 40 * v15;
    if (40 * a1 < 40 * a2 || &v4[40 * a1 + 32] >= &v16[v17] || a1 != a2) {
      uint64_t result = (uint64_t)memmove(&v4[40 * a1 + 32], v16, v17);
    }
    BOOL v18 = *((void *)v4 + 2);
    BOOL v14 = __OFADD__(v18, v8);
    uint64_t v19 = v18 - v7;
    if (!v14)
    {
      *((void *)v4 + 2) = v19;
LABEL_21:
      *unsigned int v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UIHostingConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  int v6 = *(_DWORD *)(*(void *)(*(void *)(a3 + 24) - 8) + 80);
  char v7 = *(_DWORD *)(*(void *)(type metadata accessor for UICellConfigurationState() - 8) + 80);
  unsigned __int8 v8 = *(_DWORD *)(v5 + 80);
  uint64_t v9 = *a2;
  *a1 = *a2;
  uint64_t v10 = ((v7 | v6) | v8) & 0xF8 | 7u;
  uint64_t v11 = v9 + ((v10 + 16) & ~v10);
  swift_retain();
  return v11;
}

double specialized Dictionary.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if (v6)
  {
    unint64_t v7 = v5;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v2;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v11;
    }
    outlined init with take of OptionalBinaryInteger((long long *)(*(void *)(v9 + 56) + 40 * v7), a2);
    specialized _NativeDictionary._delete(at:)(v7, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

unint64_t specialized _NativeDictionary._delete(at:)(unint64_t result, uint64_t a2)
{
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (void *)(v11 + 8 * v6);
        double result = static Hasher._hash(seed:_:)();
        unint64_t v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 >= v8 && v3 >= (uint64_t)v13)
          {
LABEL_16:
            uint64_t v16 = (void *)(v11 + 8 * v3);
            if (v3 != v6 || v16 >= v12 + 1) {
              *uint64_t v16 = *v12;
            }
            uint64_t v17 = *(void *)(a2 + 56);
            unint64_t v18 = v17 + 40 * v3;
            uint64_t v19 = (long long *)(v17 + 40 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v18 >= (unint64_t)v19 + 40))
            {
              long long v9 = *v19;
              long long v10 = v19[1];
              *(void *)(v18 + 32) = *((void *)v19 + 4);
              *(_OWORD *)unint64_t v18 = v9;
              *(_OWORD *)(v18 + 16) = v10;
              int64_t v3 = v6;
            }
          }
        }
        else if (v13 >= v8 || v3 >= (uint64_t)v13)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v10 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        uint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          unint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          BOOL v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *unint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  unsigned char *v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        double result = Hasher._finalize()();
        long long v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (unsigned char *)(v11 + v3);
          unint64_t v13 = (unsigned char *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          BOOL v14 = *(void *)(a2 + 56);
          double result = v14 + 72 * v3;
          uint64_t v15 = (const void *)(v14 + 72 * v6);
          if (72 * v3 < (uint64_t)(72 * v6) || result >= (unint64_t)v15 + 72 || (v16 = v3 == v6, int64_t v3 = v6, !v16))
          {
            double result = (unint64_t)memmove((void *)result, v15, 0x48uLL);
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    unint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt *v9;
  Swift::UInt v10;
  Swift::UInt v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = (Swift::UInt *)(*(void *)(a2 + 48) + 16 * v6);
        long long v10 = *v9;
        uint64_t v11 = v9[1];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        Hasher._combine(_:)(v11);
        double result = Hasher._finalize()();
        uint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          unint64_t v13 = *(void *)(a2 + 48);
          BOOL v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *BOOL v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          uint64_t v17 = (void *)(v16 + 8 * v3);
          unint64_t v18 = (void *)(v16 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 1))
          {
            *uint64_t v17 = *v18;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v23 = __OFSUB__(v22, 1);
  BOOL v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  Swift::UInt v12;
  unint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  long long *v18;
  long long v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;

  unsigned int v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      char v29 = v4;
      do
      {
        long long v9 = 24 * v6;
        long long v10 = v2;
        uint64_t v11 = v3;
        uint64_t v12 = *(unsigned __int8 *)(*(void *)(v2 + 48) + 24 * v6 + 16);
        unint64_t v13 = v8;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        BOOL v14 = Hasher._finalize()();
        int64_t v3 = v11;
        double result = outlined consume of TabCustomizationID.Base();
        unint64_t v8 = v13;
        uint64_t v15 = v14 & v7;
        if (v11 >= (uint64_t)v13)
        {
          if (v15 < v13)
          {
            uint64_t v4 = v29;
            unsigned int v2 = v10;
          }
          else
          {
            uint64_t v4 = v29;
            unsigned int v2 = v10;
            if (v3 >= v15) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v4 = v29;
          unsigned int v2 = v10;
          if (v15 >= v8 || v3 >= v15)
          {
LABEL_12:
            uint64_t v16 = *(void *)(v2 + 48);
            uint64_t v17 = v16 + 24 * v3;
            unint64_t v18 = (long long *)(v16 + v9);
            if (24 * v3 < v9 || v17 >= (unint64_t)v18 + 24 || v3 != v6)
            {
              uint64_t v19 = *v18;
              *(void *)(v17 + 16) = *((void *)v18 + 2);
              *(_OWORD *)uint64_t v17 = v19;
            }
            uint64_t v20 = *(void *)(v2 + 56);
            uint64_t v21 = (_WORD *)(v20 + 2 * v3);
            uint64_t v22 = (_WORD *)(v20 + 2 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v21 >= v22 + 1))
            {
              *uint64_t v21 = *v22;
              int64_t v3 = v6;
            }
          }
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v24 = *v23;
    uint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    BOOL v24 = (-1 << result) - 1;
  }
  *uint64_t v23 = v25 & v24;
  id v26 = *(void *)(v2 + 16);
  uint64_t v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v28;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  Swift::UInt v12;
  unint64_t v13;
  Swift::Int v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  long long *v18;
  long long v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;

  unsigned int v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      char v29 = v4;
      do
      {
        long long v9 = 24 * v6;
        long long v10 = v2;
        uint64_t v11 = v3;
        uint64_t v12 = *(unsigned __int8 *)(*(void *)(v2 + 48) + 24 * v6 + 16);
        unint64_t v13 = v8;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        BOOL v14 = Hasher._finalize()();
        int64_t v3 = v11;
        double result = outlined consume of TabCustomizationID.Base();
        unint64_t v8 = v13;
        uint64_t v15 = v14 & v7;
        if (v11 >= (uint64_t)v13)
        {
          if (v15 < v13)
          {
            uint64_t v4 = v29;
            unsigned int v2 = v10;
          }
          else
          {
            uint64_t v4 = v29;
            unsigned int v2 = v10;
            if (v3 >= v15) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v4 = v29;
          unsigned int v2 = v10;
          if (v15 >= v8 || v3 >= v15)
          {
LABEL_12:
            uint64_t v16 = *(void *)(v2 + 48);
            uint64_t v17 = v16 + 24 * v3;
            unint64_t v18 = (long long *)(v16 + v9);
            if (24 * v3 < v9 || v17 >= (unint64_t)v18 + 24 || v3 != v6)
            {
              uint64_t v19 = *v18;
              *(void *)(v17 + 16) = *((void *)v18 + 2);
              *(_OWORD *)uint64_t v17 = v19;
            }
            uint64_t v20 = *(void *)(v2 + 56);
            uint64_t v21 = (void *)(v20 + 8 * v3);
            uint64_t v22 = (void *)(v20 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v21 >= v22 + 1))
            {
              *uint64_t v21 = *v22;
              int64_t v3 = v6;
            }
          }
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v24 = *v23;
    uint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    BOOL v24 = (-1 << result) - 1;
  }
  *uint64_t v23 = v25 & v24;
  id v26 = *(void *)(v2 + 16);
  uint64_t v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v28;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      long long v9 = MEMORY[0x1E4FBC838] + 8;
      do
      {
        long long v10 = *(void *)(a2 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        double result = static Hasher._hash(seed:_:)();
        uint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8 || v3 < (uint64_t)v12) {
            goto LABEL_6;
          }
        }
        else if (v12 < v8 && v3 < (uint64_t)v12)
        {
          goto LABEL_6;
        }
        uint64_t v15 = (void *)(v10 + 8 * v3);
        if (v3 != v6 || v15 >= v11 + 1) {
          *uint64_t v15 = *v11;
        }
        if (v3 < (uint64_t)v6 || *(void *)(a2 + 56) + 8 * v3 >= *(void *)(a2 + 56) + 8 * v6 + 8)
        {
          type metadata accessor for [TabCustomizationID](0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4F41720]);
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v16 = v3 == v6;
          int64_t v3 = v6;
          if (v16) {
            goto LABEL_6;
          }
          type metadata accessor for [TabCustomizationID](0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, v9, MEMORY[0x1E4F41720]);
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    unint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  void *v10;
  id v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v10 = *(void **)(*(void *)(a2 + 48) + 8 * v6);
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        Hasher.init(_seed:)();
        uint64_t v11 = v10;
        String.hash(into:)();
        uint64_t v12 = Hasher._finalize()();

        double result = swift_bridgeObjectRelease();
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          BOOL v14 = *(void *)(a2 + 48);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (_OWORD *)(v17 + 32 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 2))
          {
            long long v9 = v19[1];
            *unint64_t v18 = *v19;
            v18[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::UInt v13;
  int64_t v14;
  Swift::UInt v15;
  unint64_t v16;
  Swift::UInt v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  long long v22;
  uint64_t v23;
  unint64_t v24;
  long long *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;

  unsigned int v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      uint64_t v32 = v4;
      do
      {
        long long v10 = 32 * v6;
        uint64_t v11 = v2;
        uint64_t v12 = *(void *)(v2 + 48) + 32 * v6;
        unint64_t v13 = *(void *)(v12 + 16);
        BOOL v14 = v3;
        uint64_t v15 = *(unsigned __int8 *)(v12 + 24);
        uint64_t v16 = v8;
        Hasher.init(_seed:)();
        String.hash(into:)();
        Hasher._combine(_:)(v13);
        uint64_t v17 = v15;
        int64_t v3 = v14;
        Hasher._combine(_:)(v17);
        double result = Hasher._finalize()();
        unint64_t v8 = v16;
        unint64_t v18 = result & v7;
        if (v14 >= (uint64_t)v16)
        {
          if (v18 < v16)
          {
            uint64_t v4 = v32;
            unsigned int v2 = v11;
          }
          else
          {
            uint64_t v4 = v32;
            unsigned int v2 = v11;
            if (v3 >= (uint64_t)v18) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v4 = v32;
          unsigned int v2 = v11;
          if (v18 >= v8 || v3 >= (uint64_t)v18)
          {
LABEL_12:
            uint64_t v19 = *(void *)(v2 + 48);
            uint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            uint64_t v21 = (_OWORD *)(v19 + v10);
            if (32 * v3 != v10 || v20 >= v21 + 2)
            {
              uint64_t v22 = v21[1];
              *uint64_t v20 = *v21;
              v20[1] = v22;
            }
            uint64_t v23 = *(void *)(v2 + 56);
            BOOL v24 = v23 + 24 * v3;
            uint64_t v25 = (long long *)(v23 + 24 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v24 >= (unint64_t)v25 + 24))
            {
              long long v9 = *v25;
              *(void *)(v24 + 16) = *((void *)v25 + 2);
              *(_OWORD *)BOOL v24 = v9;
              int64_t v3 = v6;
            }
          }
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    id v26 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1 << v3) - 1;
  }
  else
  {
    id v26 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1 << result) - 1;
  }
  *id v26 = v28 & v27;
  char v29 = *(void *)(v2 + 16);
  uint64_t v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v31;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(a2 + 48);
        long long v10 = (void *)(v9 + 8 * v6);
        double result = static Hasher._hash(seed:_:)();
        uint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            BOOL v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *BOOL v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  const void *v16;
  BOOL v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(a2 + 48);
        long long v10 = (void *)(v9 + 8 * v6);
        double result = static Hasher._hash(seed:_:)();
        uint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            BOOL v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *BOOL v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            double result = v15 + 184 * v3;
            uint64_t v16 = (const void *)(v15 + 184 * v6);
            if (184 * v3 < (uint64_t)(184 * v6)
              || (result < (unint64_t)v16 + 184 ? (v17 = v3 == v6) : (v17 = 0), int64_t v3 = v6, !v17))
            {
              double result = (unint64_t)memmove((void *)result, v16, 0xB8uLL);
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  unsigned char *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(unsigned char *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        if ((v9 - 2) >= 3u)
        {
          long long v10 = v9 & 1;
          Hasher._combine(_:)(0);
        }
        else
        {
          long long v10 = (v9 - 2) + 1;
        }
        Hasher._combine(_:)(v10);
        double result = Hasher._finalize()();
        uint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_14:
          uint64_t v12 = *(void *)(a2 + 48);
          unint64_t v13 = (unsigned char *)(v12 + v3);
          BOOL v14 = (unsigned char *)(v12 + v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *unint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (void *)(v15 + 8 * v3);
          uint64_t v17 = (void *)(v15 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
          {
            *uint64_t v16 = *v17;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  long long *v12;
  long long *v13;
  long long v14;
  long long v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unsigned char v25[40];
  Swift::UInt v26;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of AccessibilityRelationshipScope.Key(*(void *)(a2 + 48) + 48 * v6, (uint64_t)v25);
        Hasher.init(_seed:)();
        AnyHashable.hash(into:)();
        Hasher._combine(_:)(v26);
        long long v9 = Hasher._finalize()();
        double result = outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v25);
        long long v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (long long *)(v11 + 48 * v3);
          unint64_t v13 = (long long *)(v11 + 48 * v6);
          if (v3 != v6 || v12 >= v13 + 3)
          {
            BOOL v14 = *v13;
            uint64_t v15 = v13[2];
            v12[1] = v13[1];
            v12[2] = v15;
            *uint64_t v12 = v14;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          uint64_t v17 = (void *)(v16 + 8 * v3);
          unint64_t v18 = (void *)(v16 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 1))
          {
            *uint64_t v17 = *v18;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v23 = __OFSUB__(v22, 1);
  BOOL v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  long long v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  _DWORD *v17;
  uint64_t v18;
  long long *v19;
  long long *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v12 = *(void *)(a2 + 48);
        unint64_t v13 = (_DWORD *)(v12 + 4 * v6);
        double result = MEMORY[0x18C118330](*(void *)(a2 + 40), *v13, 4);
        BOOL v14 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 >= v8 && v3 >= (uint64_t)v14)
          {
LABEL_16:
            uint64_t v17 = (_DWORD *)(v12 + 4 * v3);
            if (v3 != v6 || v17 >= v13 + 1) {
              *uint64_t v17 = *v13;
            }
            unint64_t v18 = *(void *)(a2 + 56);
            uint64_t v19 = (long long *)(v18 + (v3 << 6));
            uint64_t v20 = (long long *)(v18 + (v6 << 6));
            if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 4))
            {
              long long v9 = *v20;
              long long v10 = v20[1];
              uint64_t v11 = v20[3];
              v19[2] = v20[2];
              v19[3] = v11;
              *uint64_t v19 = v9;
              v19[1] = v10;
              int64_t v3 = v6;
            }
          }
        }
        else if (v14 >= v8 || v3 >= (uint64_t)v14)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  BOOL v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1);
  id v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  char v12;
  Swift::UInt v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = 16 * v6;
        long long v10 = *(void *)(a2 + 48) + 16 * v6;
        uint64_t v11 = *(void *)v10;
        uint64_t v12 = *(unsigned char *)(v10 + 8);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        if ((v12 - 2) >= 3u)
        {
          unint64_t v13 = v12 & 1;
          Hasher._combine(_:)(0);
        }
        else
        {
          unint64_t v13 = (v12 - 2) + 1;
        }
        Hasher._combine(_:)(v13);
        double result = Hasher._finalize()();
        BOOL v14 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_14:
          uint64_t v15 = *(void *)(a2 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          uint64_t v17 = (_OWORD *)(v15 + v9);
          if (16 * v3 != v9 || v16 >= v17 + 1) {
            *uint64_t v16 = *v17;
          }
          unint64_t v18 = *(void *)(a2 + 56);
          uint64_t v19 = (void *)(v18 + 8 * v3);
          uint64_t v20 = (void *)(v18 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 1))
          {
            *uint64_t v19 = *v20;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  BOOL v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1);
  id v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  Swift::Int v10;
  uint64_t v13;
  unint64_t v14;
  long long *v15;
  long long v16;
  long long v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  unsigned char v27[40];

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of AnyHashable(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v27);
        long long v9 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        double result = outlined destroy of AnyHashable((uint64_t)v27);
        long long v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 >= v8 && v3 >= v10)
          {
LABEL_16:
            unint64_t v13 = *(void *)(a2 + 48);
            BOOL v14 = v13 + 40 * v3;
            uint64_t v15 = (long long *)(v13 + 40 * v6);
            if (v3 != v6 || v14 >= (unint64_t)v15 + 40)
            {
              uint64_t v16 = *v15;
              uint64_t v17 = v15[1];
              *(void *)(v14 + 32) = *((void *)v15 + 4);
              *(_OWORD *)BOOL v14 = v16;
              *(_OWORD *)(v14 + 16) = v17;
            }
            unint64_t v18 = *(void *)(a2 + 56);
            uint64_t v19 = (void *)(v18 + 8 * v3);
            uint64_t v20 = (void *)(v18 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v19 >= v20 + 1))
            {
              *uint64_t v19 = *v20;
              int64_t v3 = v6;
            }
          }
        }
        else if (v10 >= v8 || v3 >= v10)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  BOOL v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1);
  id v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  Swift::UInt *v11;
  Swift::UInt v12;
  Swift::UInt v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  unint64_t v19;
  long long *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v11 = (Swift::UInt *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v12 = *v11;
        unint64_t v13 = v11[1];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        Hasher._combine(_:)(v13);
        double result = Hasher._finalize()();
        BOOL v14 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v14 < v8) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(a2 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v3 != v6 || v16 >= v17 + 1) {
            *uint64_t v16 = *v17;
          }
          unint64_t v18 = *(void *)(a2 + 56);
          uint64_t v19 = v18 + 40 * v3;
          uint64_t v20 = (long long *)(v18 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v19 >= (unint64_t)v20 + 40))
          {
            long long v9 = *v20;
            long long v10 = v20[1];
            *(void *)(v19 + 32) = *((void *)v20 + 4);
            *(_OWORD *)uint64_t v19 = v9;
            *(_OWORD *)(v19 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  BOOL v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1);
  id v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::UInt v15;
  char v16;
  Swift::Int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  long long *v21;
  long long v22;
  uint64_t v23;
  void *v24;
  void *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;

  unsigned int v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      uint64_t v32 = v4;
      do
      {
        long long v9 = v3;
        long long v10 = v8;
        uint64_t v11 = 24 * v6;
        uint64_t v12 = v2;
        unint64_t v13 = *(void *)(v2 + 48) + 24 * v6;
        uint64_t v15 = *(void *)v13;
        BOOL v14 = *(void *)(v13 + 8);
        uint64_t v16 = *(unsigned char *)(v13 + 16);
        Hasher.init(_seed:)();
        if (v16)
        {
          Hasher._combine(_:)(v15);
          Hasher._combine(_:)(v14);
        }
        else
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
        }
        uint64_t v17 = Hasher._finalize()();
        double result = outlined consume of SceneID(v15, v14, v16);
        unint64_t v18 = v17 & v7;
        unint64_t v8 = v10;
        int64_t v3 = v9;
        if (v9 >= (uint64_t)v8)
        {
          uint64_t v4 = v32;
          unsigned int v2 = v12;
          if (v18 < v8) {
            goto LABEL_5;
          }
        }
        else
        {
          uint64_t v4 = v32;
          unsigned int v2 = v12;
          if (v18 >= v8) {
            goto LABEL_14;
          }
        }
        if ((uint64_t)v3 >= (uint64_t)v18)
        {
LABEL_14:
          uint64_t v19 = *(void *)(v2 + 48);
          uint64_t v20 = v19 + 24 * v3;
          uint64_t v21 = (long long *)(v19 + v11);
          if ((uint64_t)(24 * v3) < v11 || v20 >= (unint64_t)v21 + 24 || v3 != v6)
          {
            uint64_t v22 = *v21;
            *(void *)(v20 + 16) = *((void *)v21 + 2);
            *(_OWORD *)uint64_t v20 = v22;
          }
          uint64_t v23 = *(void *)(v2 + 56);
          BOOL v24 = (void *)(v23 + 8 * v3);
          uint64_t v25 = (void *)(v23 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v24 >= v25 + 1))
          {
            *BOOL v24 = *v25;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    id v26 = (uint64_t *)(v4 + 8 * (v3 >> 6));
    uint64_t v27 = *v26;
    uint64_t v28 = (-1 << v3) - 1;
  }
  else
  {
    id v26 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v28 = *v26;
    uint64_t v27 = (-1 << result) - 1;
  }
  *id v26 = v28 & v27;
  char v29 = *(void *)(v2 + 16);
  uint64_t v30 = __OFSUB__(v29, 1);
  uint64_t v31 = v29 - 1;
  if (v30)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v31;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  unsigned char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unsigned char v20[8];
  Swift::UInt v21;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of TabViewCustomization(*(void *)(a2 + 48) + 16 * v6, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for HashableWeakBox<UIViewController>);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v21);
        long long v9 = Hasher._finalize()();
        double result = outlined destroy of TabViewCustomizationModifier((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for HashableWeakBox<UIViewController>);
        long long v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          if (v3 < (uint64_t)v6 || *(void *)(a2 + 48) + 16 * v3 >= *(void *)(a2 + 48) + 16 * v6 + 16)
          {
            type metadata accessor for HashableWeakBox<UIViewController>();
            double result = swift_arrayInitWithTakeFrontToBack();
          }
          else if (v3 != v6)
          {
            type metadata accessor for HashableWeakBox<UIViewController>();
            double result = swift_arrayInitWithTakeBackToFront();
          }
          uint64_t v11 = *(void *)(a2 + 56);
          uint64_t v12 = (unsigned char *)(v11 + v3);
          unint64_t v13 = (unsigned char *)(v11 + v6);
          if (v3 != v6 || (int64_t v3 = v6, v12 >= v13 + 1))
          {
            *uint64_t v12 = *v13;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    BOOL v14 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v15 = *v14;
    uint64_t v16 = (-1 << v3) - 1;
  }
  else
  {
    BOOL v14 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v16 = *v14;
    uint64_t v15 = (-1 << result) - 1;
  }
  *BOOL v14 = v16 & v15;
  uint64_t v17 = *(void *)(a2 + 16);
  unint64_t v18 = __OFSUB__(v17, 1);
  uint64_t v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v19;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void *__return_ptr, uint64_t);
  uint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  long long v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::UInt v32;
  void v33[5];

  unsigned int v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      uint64_t v30 = v4;
      uint64_t v31 = v2;
      do
      {
        long long v9 = (uint64_t *)(*(void *)(v2 + 48) + 32 * v6);
        uint64_t v11 = *v9;
        long long v10 = v9[1];
        uint64_t v12 = v9[2];
        uint64_t v32 = v9[3];
        Hasher.init(_seed:)();
        if (v11)
        {
          Hasher._combine(_:)(1u);
          unint64_t v13 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v11 + 96);
          swift_retain();
          outlined copy of Text.LineStyle?(v10, v12);
          BOOL v14 = swift_retain();
          v13(v33, v14);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v33);
          swift_release();
          if (v12 == 1) {
            goto LABEL_8;
          }
        }
        else
        {
          Hasher._combine(_:)(0);
          outlined copy of Text.LineStyle?(v10, v12);
          if (v12 == 1)
          {
LABEL_8:
            Hasher._combine(_:)(0);
            goto LABEL_11;
          }
        }
        v33[0] = v10;
        v33[1] = v12;
        Hasher._combine(_:)(1u);
        _ViewList_ID.Canonical.hash(into:)();
LABEL_11:
        uint64_t v4 = v30;
        Hasher._combine(_:)(v32);
        uint64_t v15 = Hasher._finalize()();
        swift_release();
        double result = outlined consume of Text.LineStyle?(v10, v12);
        uint64_t v16 = v15 & v7;
        if (v3 >= (uint64_t)v8)
        {
          unsigned int v2 = v31;
          if (v16 < v8) {
            goto LABEL_5;
          }
        }
        else
        {
          unsigned int v2 = v31;
          if (v16 >= v8) {
            goto LABEL_16;
          }
        }
        if (v3 >= (uint64_t)v16)
        {
LABEL_16:
          uint64_t v17 = *(void *)(v2 + 48);
          unint64_t v18 = (_OWORD *)(v17 + 32 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || v18 >= v19 + 2)
          {
            uint64_t v20 = v19[1];
            *unint64_t v18 = *v19;
            v18[1] = v20;
          }
          uint64_t v21 = *(void *)(v2 + 56);
          uint64_t v22 = (void *)(v21 + 8 * v3);
          uint64_t v23 = (void *)(v21 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v22 >= v23 + 1))
          {
            *uint64_t v22 = *v23;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v30 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    BOOL v24 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v25 = *v24;
    id v26 = (-1 << v3) - 1;
  }
  else
  {
    BOOL v24 = (uint64_t *)(v4 + 8 * (result >> 6));
    id v26 = *v24;
    uint64_t v25 = (-1 << result) - 1;
  }
  *BOOL v24 = v26 & v25;
  uint64_t v27 = *(void *)(v2 + 16);
  uint64_t v28 = __OFSUB__(v27, 1);
  char v29 = v27 - 1;
  if (v28)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v29;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt v11;
  Swift::UInt v12;
  Swift::UInt v13;
  Swift::UInt v14;
  Swift::UInt8 v15;
  unint64_t v16;
  uint64_t v17;
  long long *v18;
  long long *v19;
  long long v20;
  long long v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  unsigned int v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      uint64_t v31 = (result + 1) & v7;
      uint64_t v32 = v4;
      do
      {
        unint64_t v8 = v7;
        long long v9 = v2;
        long long v10 = *(void *)(v2 + 48) + 48 * v6;
        uint64_t v12 = *(void *)v10;
        uint64_t v11 = *(void *)(v10 + 8);
        unint64_t v13 = *(unsigned __int8 *)(v10 + 16);
        BOOL v14 = *(void *)(v10 + 24);
        uint64_t v15 = *(unsigned char *)(v10 + 32);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        if (v13 == 6)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v11);
          Hasher._combine(_:)(v13);
          Hasher._combine(_:)(v14);
        }
        Hasher._combine(_:)(v15);
        double result = Hasher._finalize()();
        uint64_t v7 = v8;
        uint64_t v16 = result & v8;
        unsigned int v2 = v9;
        if (v3 >= (uint64_t)v31)
        {
          uint64_t v4 = v32;
          if (v16 < v31) {
            goto LABEL_5;
          }
        }
        else
        {
          uint64_t v4 = v32;
          if (v16 >= v31) {
            goto LABEL_14;
          }
        }
        if (v3 >= (uint64_t)v16)
        {
LABEL_14:
          uint64_t v17 = *(void *)(v9 + 48);
          unint64_t v18 = (long long *)(v17 + 48 * v3);
          uint64_t v19 = (long long *)(v17 + 48 * v6);
          if (v3 != v6 || v18 >= v19 + 3)
          {
            uint64_t v20 = *v19;
            uint64_t v21 = v19[2];
            v18[1] = v19[1];
            v18[2] = v21;
            *unint64_t v18 = v20;
          }
          uint64_t v22 = *(void *)(v9 + 56);
          uint64_t v23 = (void *)(v22 + 8 * v3);
          BOOL v24 = (void *)(v22 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v23 >= v24 + 1))
          {
            *uint64_t v23 = *v24;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    id v26 = *v25;
    uint64_t v27 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v27 = *v25;
    id v26 = (-1 << result) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(v2 + 16);
  char v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v30;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  unint64_t v16;
  long long *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v10 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        uint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          unint64_t v13 = (_OWORD *)(v12 + 16 * v3);
          BOOL v14 = (_OWORD *)(v12 + 16 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *unint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = v15 + 24 * v3;
          uint64_t v17 = (long long *)(v15 + 24 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= (unint64_t)v17 + 24))
          {
            long long v9 = *v17;
            *(void *)(v16 + 16) = *((void *)v17 + 2);
            *(_OWORD *)uint64_t v16 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  Swift::UInt v11;
  Swift::UInt v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  long long *v16;
  long long v17;
  uint64_t v18;
  const void *v19;
  BOOL v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(a2 + 48) + 24 * v6;
        long long v10 = *(void *)v9;
        uint64_t v11 = *(unsigned __int8 *)(v9 + 8);
        uint64_t v12 = *(void *)(v9 + 16);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        Hasher._combine(_:)(v11);
        Hasher._combine(_:)(v12);
        double result = Hasher._finalize()();
        unint64_t v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          BOOL v14 = *(void *)(a2 + 48);
          uint64_t v15 = v14 + 24 * v3;
          uint64_t v16 = (long long *)(v14 + 24 * v6);
          if (v3 != v6 || v15 >= (unint64_t)v16 + 24)
          {
            uint64_t v17 = *v16;
            *(void *)(v15 + 16) = *((void *)v16 + 2);
            *(_OWORD *)uint64_t v15 = v17;
          }
          unint64_t v18 = *(void *)(a2 + 56);
          double result = v18 + 304 * v3;
          uint64_t v19 = (const void *)(v18 + 304 * v6);
          if (304 * v3 < (uint64_t)(304 * v6)
            || result >= (unint64_t)v19 + 304
            || (v20 = v3 == v6, int64_t v3 = v6, !v20))
          {
            double result = (unint64_t)memmove((void *)result, v19, 0x130uLL);
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v21 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v22 = *v21;
    uint64_t v23 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v21 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v23 = *v21;
    uint64_t v22 = (-1 << result) - 1;
  }
  *uint64_t v21 = v23 & v22;
  BOOL v24 = *(void *)(a2 + 16);
  uint64_t v25 = __OFSUB__(v24, 1);
  id v26 = v24 - 1;
  if (v25)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v26;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  Swift::Int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  long long *v14;
  long long v15;
  long long v16;
  uint64_t v17;
  const void *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27;
  long long v28;
  long long v29;
  uint64_t v30;
  unsigned char v31[40];

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of ToolbarPlacement.Role(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v31);
        Hasher.init(_seed:)();
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v31, (uint64_t)&v28);
        switch(*((void *)&v29 + 1))
        {
          case 0:
            long long v9 = 0;
            goto LABEL_15;
          case 1:
            long long v9 = 1;
            goto LABEL_15;
          case 2:
            long long v9 = 2;
            goto LABEL_15;
          case 3:
            long long v9 = 3;
            goto LABEL_15;
          case 4:
            long long v9 = 4;
            goto LABEL_15;
          case 5:
            long long v9 = 5;
            goto LABEL_15;
          case 6:
            long long v9 = 7;
LABEL_15:
            Hasher._combine(_:)(v9);
            break;
          default:
            v26[0] = v28;
            v26[1] = v29;
            uint64_t v27 = v30;
            Hasher._combine(_:)(6uLL);
            AnyHashable.hash(into:)();
            outlined destroy of AnyHashable((uint64_t)v26);
            break;
        }
        long long v10 = Hasher._finalize()();
        double result = outlined destroy of ToolbarPlacement.Role((uint64_t)v31);
        uint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_21;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_21:
          uint64_t v12 = *(void *)(a2 + 48);
          unint64_t v13 = v12 + 40 * v3;
          BOOL v14 = (long long *)(v12 + 40 * v6);
          if (v3 != v6 || v13 >= (unint64_t)v14 + 40)
          {
            uint64_t v15 = *v14;
            uint64_t v16 = v14[1];
            *(void *)(v13 + 32) = *((void *)v14 + 4);
            *(_OWORD *)unint64_t v13 = v15;
            *(_OWORD *)(v13 + 16) = v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          double result = v17 + 80 * v3;
          unint64_t v18 = (const void *)(v17 + 80 * v6);
          if (80 * v3 < (uint64_t)(80 * v6) || result >= (unint64_t)v18 + 80 || (v19 = v3 == v6, int64_t v3 = v6, !v19))
          {
            double result = (unint64_t)memmove((void *)result, v18, 0x50uLL);
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
    JUMPOUT(0x187AF75B0);
  }
  *(void *)(a2 + 16) = v25;
  ++*(_DWORD *)(a2 + 36);
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt32 v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        long long v9 = *(_DWORD *)(*(void *)(a2 + 48) + 4 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        double result = Hasher._finalize()();
        long long v10 = result & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (_DWORD *)(v11 + 4 * v3);
        unint64_t v13 = (_DWORD *)(v11 + 4 * v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        BOOL v14 = *(void *)(a2 + 56);
        double result = v14 + 184 * v3;
        if (184 * v3 < (uint64_t)(184 * v6) || result >= v14 + 184 * v6 + 184)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v15 = v3 == v6;
          int64_t v3 = v6;
          if (v15) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_19;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    unint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    unint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *uint64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        long long v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          BOOL v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    unint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_retain();
        _ViewList_ID.Canonical.hash(into:)();
        long long v9 = Hasher._finalize()();
        double result = swift_release();
        long long v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          BOOL v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    unint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  Swift::Int v10;
  Swift::Int v11;
  uint64_t v14;
  unint64_t v15;
  long long *v16;
  long long v17;
  long long v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  unsigned char v28[40];

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of AnyHashable(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v28);
        long long v10 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        double result = outlined destroy of AnyHashable((uint64_t)v28);
        uint64_t v11 = v10 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= v11)
          {
LABEL_16:
            BOOL v14 = *(void *)(a2 + 48);
            uint64_t v15 = v14 + 40 * v3;
            uint64_t v16 = (long long *)(v14 + 40 * v6);
            if (v3 != v6 || v15 >= (unint64_t)v16 + 40)
            {
              uint64_t v17 = *v16;
              unint64_t v18 = v16[1];
              *(void *)(v15 + 32) = *((void *)v16 + 4);
              *(_OWORD *)uint64_t v15 = v17;
              *(_OWORD *)(v15 + 16) = v18;
            }
            uint64_t v19 = *(void *)(a2 + 56);
            uint64_t v20 = (_OWORD *)(v19 + 32 * v3);
            uint64_t v21 = (_OWORD *)(v19 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v20 >= v21 + 2))
            {
              long long v9 = v21[1];
              *uint64_t v20 = *v21;
              v20[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v23 = *v22;
    BOOL v24 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    BOOL v24 = *v22;
    uint64_t v23 = (-1 << result) - 1;
  }
  *uint64_t v22 = v24 & v23;
  uint64_t v25 = *(void *)(a2 + 16);
  id v26 = __OFSUB__(v25, 1);
  uint64_t v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  Swift::UInt32 v10;
  unint64_t v11;
  uint64_t v12;
  unsigned char *v13;
  unsigned char *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v10 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        double result = Hasher._finalize()();
        uint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          unint64_t v13 = (unsigned char *)(v12 + v3);
          BOOL v14 = (unsigned char *)(v12 + v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *unint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = (_OWORD *)(v15 + 32 * v3);
          uint64_t v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 2))
          {
            long long v9 = v17[1];
            *uint64_t v16 = *v17;
            v16[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::UInt32 *v10;
  uint64_t v11;
  Swift::UInt32 v12;
  Swift::UInt32 v13;
  int64_t v14;
  Swift::UInt32 v15;
  Swift::UInt32 v16;
  unint64_t v17;
  Swift::UInt32 v18;
  Swift::UInt32 v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;

  unsigned int v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      uint64_t v33 = v4;
      do
      {
        long long v9 = v2;
        long long v10 = (Swift::UInt32 *)(*(void *)(v2 + 48) + 16 * v6);
        uint64_t v11 = v7;
        uint64_t v12 = *v10;
        unint64_t v13 = v10[1];
        BOOL v14 = v3;
        uint64_t v15 = v10[2];
        uint64_t v16 = v10[3];
        uint64_t v17 = v8;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v12);
        unint64_t v18 = v13;
        uint64_t v7 = v11;
        Hasher._combine(_:)(v18);
        uint64_t v19 = v15;
        int64_t v3 = v14;
        Hasher._combine(_:)(v19);
        Hasher._combine(_:)(v16);
        double result = Hasher._finalize()();
        unint64_t v8 = v17;
        uint64_t v20 = result & v11;
        if (v14 >= (uint64_t)v17)
        {
          if (v20 < v17)
          {
            uint64_t v4 = v33;
            unsigned int v2 = v9;
          }
          else
          {
            uint64_t v4 = v33;
            unsigned int v2 = v9;
            if (v3 >= (uint64_t)v20) {
              goto LABEL_12;
            }
          }
        }
        else
        {
          uint64_t v4 = v33;
          unsigned int v2 = v9;
          if (v20 >= v8 || v3 >= (uint64_t)v20)
          {
LABEL_12:
            uint64_t v21 = *(void *)(v2 + 48);
            uint64_t v22 = (_OWORD *)(v21 + 16 * v3);
            uint64_t v23 = (_OWORD *)(v21 + 16 * v6);
            if (v3 != v6 || v22 >= v23 + 1) {
              *uint64_t v22 = *v23;
            }
            BOOL v24 = *(void *)(v2 + 56);
            uint64_t v25 = (_OWORD *)(v24 + 16 * v3);
            id v26 = (_OWORD *)(v24 + 16 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v25 >= v26 + 1))
            {
              *uint64_t v25 = *v26;
              int64_t v3 = v6;
            }
          }
        }
        unint64_t v6 = (v6 + 1) & v11;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v27 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v28 = *v27;
    char v29 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v27 = (uint64_t *)(v4 + 8 * (result >> 6));
    char v29 = *v27;
    uint64_t v28 = (-1 << result) - 1;
  }
  *uint64_t v27 = v29 & v28;
  uint64_t v30 = *(void *)(v2 + 16);
  uint64_t v31 = __OFSUB__(v30, 1);
  uint64_t v32 = v30 - 1;
  if (v31)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v32;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt32 v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(_DWORD *)(*(void *)(a2 + 48) + 4 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        double result = Hasher._finalize()();
        long long v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_DWORD *)(v11 + 4 * v3);
          unint64_t v13 = (_DWORD *)(v11 + 4 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          BOOL v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    unint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  Swift::UInt v11;
  unint64_t v12;
  uint64_t v13;
  unsigned char *v14;
  unsigned char *v15;
  uint64_t v16;
  unint64_t v17;
  long long *v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v11 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        double result = Hasher._finalize()();
        uint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_11:
          unint64_t v13 = *(void *)(a2 + 48);
          BOOL v14 = (unsigned char *)(v13 + v3);
          uint64_t v15 = (unsigned char *)(v13 + v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *BOOL v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          uint64_t v17 = v16 + 40 * v3;
          unint64_t v18 = (long long *)(v16 + 40 * v6);
          if (40 * v3 < (uint64_t)(40 * v6) || v17 >= (unint64_t)v18 + 40 || (v19 = v3 == v6, int64_t v3 = v6, !v19))
          {
            long long v9 = *v18;
            long long v10 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)uint64_t v17 = v9;
            *(_OWORD *)(v17 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  long long *v19;
  long long v20;
  long long v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  unsigned int v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      uint64_t v32 = v2;
      uint64_t v33 = v4;
      uint64_t v31 = (result + 1) & v7;
      do
      {
        unint64_t v8 = 40 * v6;
        long long v9 = *(void *)(v2 + 48) + 40 * v6;
        uint64_t v11 = *(void *)v9;
        long long v10 = *(void *)(v9 + 8);
        unint64_t v13 = *(void *)(v9 + 16);
        uint64_t v12 = *(void *)(v9 + 24);
        BOOL v14 = *(unsigned char *)(v9 + 32);
        Hasher.init(_seed:)();
        if (v14)
        {
          Hasher._combine(_:)(1uLL);
          outlined copy of TableColumnCustomizationID.Base(v11, v10, v13, v12, 1);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          String.hash(into:)();
          outlined consume of TableColumnCustomizationID.Base(v11, v10, v13, v12, 1);
        }
        else
        {
          Hasher._combine(_:)(0);
          swift_bridgeObjectRetain();
          String.hash(into:)();
        }
        uint64_t v15 = Hasher._finalize()();
        double result = outlined consume of TableColumnCustomizationID.Base(v11, v10, v13, v12, v14);
        uint64_t v16 = v15 & v7;
        if (v3 >= (uint64_t)v31)
        {
          unsigned int v2 = v32;
          uint64_t v4 = v33;
          if (v16 < v31) {
            goto LABEL_5;
          }
        }
        else
        {
          unsigned int v2 = v32;
          uint64_t v4 = v33;
          if (v16 >= v31) {
            goto LABEL_14;
          }
        }
        if (v3 >= (uint64_t)v16)
        {
LABEL_14:
          uint64_t v17 = *(void *)(v2 + 48);
          unint64_t v18 = v17 + 40 * v3;
          uint64_t v19 = (long long *)(v17 + v8);
          if (40 * v3 < v8 || v18 >= (unint64_t)v19 + 40 || v3 != v6)
          {
            uint64_t v20 = *v19;
            uint64_t v21 = v19[1];
            *(void *)(v18 + 32) = *((void *)v19 + 4);
            *(_OWORD *)unint64_t v18 = v20;
            *(_OWORD *)(v18 + 16) = v21;
          }
          uint64_t v22 = *(void *)(v2 + 56);
          uint64_t v23 = (_OWORD *)(v22 + 16 * v3);
          BOOL v24 = (_OWORD *)(v22 + 16 * v6);
          if (16 * v3 != 16 * v6 || (int64_t v3 = v6, v23 >= v24 + 1))
          {
            *uint64_t v23 = *v24;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    id v26 = *v25;
    uint64_t v27 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v27 = *v25;
    id v26 = (-1 << result) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(v2 + 16);
  char v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v30;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(a2 + 48);
        long long v10 = (void *)(v9 + 8 * v6);
        double result = static Hasher._hash(seed:_:)();
        uint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 >= v8 && v3 >= (uint64_t)v11)
          {
LABEL_16:
            BOOL v14 = (void *)(v9 + 8 * v3);
            if (v3 != v6 || v14 >= v10 + 1) {
              *BOOL v14 = *v10;
            }
            uint64_t v15 = *(void *)(a2 + 56);
            uint64_t v16 = (void *)(v15 + 8 * v3);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v3 = v6;
            }
          }
        }
        else if (v11 >= v8 || v3 >= (uint64_t)v11)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt16 v9;
  unint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  unsigned char *v13;
  uint64_t v14;
  unsigned char *v15;
  unsigned char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        double result = Hasher._finalize()();
        long long v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (unsigned char *)(v11 + v3);
          unint64_t v13 = (unsigned char *)(v11 + v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          BOOL v14 = *(void *)(a2 + 56);
          uint64_t v15 = (unsigned char *)(v14 + v3);
          uint64_t v16 = (unsigned char *)(v14 + v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    unint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(void *__return_ptr, uint64_t);
  uint64_t v14;
  Swift::Int v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  long long v20;
  uint64_t v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::UInt v31;
  void v32[5];

  unsigned int v2 = a2;
  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      char v29 = v4;
      uint64_t v30 = v2;
      do
      {
        long long v9 = (uint64_t *)(*(void *)(v2 + 48) + 32 * v6);
        uint64_t v11 = *v9;
        long long v10 = v9[1];
        uint64_t v12 = v9[2];
        uint64_t v31 = v9[3];
        Hasher.init(_seed:)();
        if (v11)
        {
          Hasher._combine(_:)(1u);
          unint64_t v13 = *(void (**)(void *__return_ptr, uint64_t))(*(void *)v11 + 96);
          swift_retain();
          outlined copy of Text.LineStyle?(v10, v12);
          BOOL v14 = swift_retain();
          v13(v32, v14);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v32);
          swift_release();
          if (v12 == 1) {
            goto LABEL_9;
          }
        }
        else
        {
          Hasher._combine(_:)(0);
          outlined copy of Text.LineStyle?(v10, v12);
          if (v12 == 1)
          {
LABEL_9:
            Hasher._combine(_:)(0);
            goto LABEL_12;
          }
        }
        v32[0] = v10;
        v32[1] = v12;
        Hasher._combine(_:)(1u);
        _ViewList_ID.Canonical.hash(into:)();
LABEL_12:
        uint64_t v4 = v29;
        Hasher._combine(_:)(v31);
        uint64_t v15 = Hasher._finalize()();
        swift_release();
        double result = outlined consume of Text.LineStyle?(v10, v12);
        uint64_t v16 = v15 & v7;
        if (v3 >= (uint64_t)v8)
        {
          unsigned int v2 = v30;
          if (v16 < v8) {
            goto LABEL_6;
          }
LABEL_16:
          if (v3 < (uint64_t)v16) {
            goto LABEL_6;
          }
          goto LABEL_17;
        }
        unsigned int v2 = v30;
        if (v16 < v8) {
          goto LABEL_16;
        }
LABEL_17:
        uint64_t v17 = *(void *)(v2 + 48);
        unint64_t v18 = (_OWORD *)(v17 + 32 * v3);
        uint64_t v19 = (_OWORD *)(v17 + 32 * v6);
        if (v3 != v6 || v18 >= v19 + 2)
        {
          uint64_t v20 = v19[1];
          *unint64_t v18 = *v19;
          v18[1] = v20;
        }
        uint64_t v21 = *(void *)(v2 + 56);
        double result = v21 + 160 * v3;
        if (v3 < (uint64_t)v6 || result >= v21 + 160 * v6 + 160)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v22 = v3 == v6;
          int64_t v3 = v6;
          if (v22) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v29 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v24 = *v23;
    uint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    BOOL v24 = (-1 << result) - 1;
  }
  *uint64_t v23 = v25 & v24;
  id v26 = *(void *)(v2 + 16);
  uint64_t v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v2 + 16) = v28;
    ++*(_DWORD *)(v2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        long long v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          BOOL v14 = *(void *)(a2 + 56);
          double result = v14 + 272 * v3;
          uint64_t v15 = (const void *)(v14 + 272 * v6);
          if (272 * v3 < (uint64_t)(272 * v6)
            || result >= (unint64_t)v15 + 272
            || (v16 = v3 == v6, int64_t v3 = v6, !v16))
          {
            double result = (unint64_t)memmove((void *)result, v15, 0x110uLL);
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    unint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  unint64_t v10;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      type metadata accessor for PartialKeyPath<UISplitViewController>();
      do
      {
        double result = dispatch thunk of Hashable._rawHashValue(seed:)();
        long long v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 >= v8 && v3 >= (uint64_t)v10)
          {
LABEL_16:
            unint64_t v13 = *(void *)(a2 + 48);
            BOOL v14 = (void *)(v13 + 8 * v3);
            uint64_t v15 = (void *)(v13 + 8 * v6);
            if (v3 != v6 || v14 >= v15 + 1) {
              *BOOL v14 = *v15;
            }
            uint64_t v16 = *(void *)(a2 + 56);
            uint64_t v17 = (_OWORD *)(v16 + 32 * v3);
            unint64_t v18 = (_OWORD *)(v16 + 32 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 2))
            {
              long long v9 = v18[1];
              *uint64_t v17 = *v18;
              v17[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v10 >= v8 || v3 >= (uint64_t)v10)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v23 = __OFSUB__(v22, 1);
  BOOL v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::Int v9;
  unint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        long long v9 = Hasher._finalize()();
        double result = swift_bridgeObjectRelease();
        long long v10 = v9 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_OWORD *)(v11 + 16 * v3);
          unint64_t v13 = (_OWORD *)(v11 + 16 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          BOOL v14 = *(void *)(a2 + 56);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (16 * v3 != 16 * v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    unint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        double result = Hasher._finalize()();
        long long v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (void *)(v11 + 8 * v3);
          unint64_t v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          BOOL v14 = *(void *)(a2 + 56);
          double result = v14 + 96 * v3;
          uint64_t v15 = (const void *)(v14 + 96 * v6);
          if (96 * v3 < (uint64_t)(96 * v6) || result >= (unint64_t)v15 + 96 || (v16 = v3 == v6, int64_t v3 = v6, !v16))
          {
            double result = (unint64_t)memmove((void *)result, v15, 0x60uLL);
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    unint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  long long *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        Selector.hash(into:)();
        double result = Hasher._finalize()();
        uint64_t v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          uint64_t v12 = *(void *)(a2 + 48);
          unint64_t v13 = (void *)(v12 + 8 * v3);
          BOOL v14 = (void *)(v12 + 8 * v6);
          if (v3 != v6 || v13 >= v14 + 1) {
            *unint64_t v13 = *v14;
          }
          uint64_t v15 = *(void *)(a2 + 56);
          uint64_t v16 = v15 + 40 * v3;
          uint64_t v17 = (long long *)(v15 + 40 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v16 >= (unint64_t)v17 + 40))
          {
            long long v9 = *v17;
            long long v10 = v17[1];
            *(void *)(v16 + 32) = *((void *)v17 + 4);
            *(_OWORD *)uint64_t v16 = v9;
            *(_OWORD *)(v16 + 16) = v10;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    unint64_t v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v19 = *v18;
    uint64_t v20 = (-1 << v3) - 1;
  }
  else
  {
    unint64_t v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v20 = *v18;
    uint64_t v19 = (-1 << result) - 1;
  }
  *unint64_t v18 = v20 & v19;
  uint64_t v21 = *(void *)(a2 + 16);
  uint64_t v22 = __OFSUB__(v21, 1);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt32 v9;
  unint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  const void *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(_DWORD *)(*(void *)(a2 + 48) + 4 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        double result = Hasher._finalize()();
        long long v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (_DWORD *)(v11 + 4 * v3);
          unint64_t v13 = (_DWORD *)(v11 + 4 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          BOOL v14 = *(void *)(a2 + 56);
          double result = v14 + 120 * v3;
          uint64_t v15 = (const void *)(v14 + 120 * v6);
          if (v3 != v6 || (int64_t v3 = v6, result >= (unint64_t)v15 + 120))
          {
            double result = (unint64_t)memmove((void *)result, v15, 0x78uLL);
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    unint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    unint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *uint64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt16 v9;
  unint64_t v10;
  uint64_t v11;
  unsigned char *v12;
  unsigned char *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        long long v9 = *(unsigned __int8 *)(*(void *)(a2 + 48) + v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        double result = Hasher._finalize()();
        long long v10 = result & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v10 < v8) {
          goto LABEL_11;
        }
LABEL_12:
        uint64_t v11 = *(void *)(a2 + 48);
        uint64_t v12 = (unsigned char *)(v11 + v3);
        unint64_t v13 = (unsigned char *)(v11 + v6);
        if (v3 != v6 || v12 >= v13 + 1) {
          *uint64_t v12 = *v13;
        }
        BOOL v14 = *(void *)(a2 + 56);
        double result = v14 + 8 * v3;
        if (v3 < (uint64_t)v6 || result >= v14 + 8 * v6 + 8)
        {
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v15 = v3 == v6;
          int64_t v3 = v6;
          if (v15) {
            goto LABEL_6;
          }
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_19;
        }
      }
      if (v10 < v8) {
        goto LABEL_6;
      }
LABEL_11:
      if (v3 < (uint64_t)v10) {
        goto LABEL_6;
      }
      goto LABEL_12;
    }
LABEL_19:
    uint64_t v16 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v17 = *v16;
    unint64_t v18 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v16 = (uint64_t *)(v4 + 8 * (result >> 6));
    unint64_t v18 = *v16;
    uint64_t v17 = (-1 << result) - 1;
  }
  *uint64_t v16 = v18 & v17;
  uint64_t v19 = *(void *)(a2 + 16);
  uint64_t v20 = __OFSUB__(v19, 1);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v21;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt v9;
  unint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = *(void *)(*(void *)(a2 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v9);
        double result = Hasher._finalize()();
        long long v10 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v10 < v8) {
            goto LABEL_5;
          }
        }
        else if (v10 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v10)
        {
LABEL_11:
          uint64_t v11 = *(void *)(a2 + 48);
          uint64_t v12 = (void *)(v11 + 8 * v3);
          unint64_t v13 = (void *)(v11 + 8 * v6);
          if (v3 != v6 || v12 >= v13 + 1) {
            *uint64_t v12 = *v13;
          }
          BOOL v14 = *(void *)(a2 + 56);
          uint64_t v15 = (void *)(v14 + 8 * v3);
          uint64_t v16 = (void *)(v14 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v15 >= v16 + 1))
          {
            *uint64_t v15 = *v16;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    unint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  BOOL v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned char v23[104];
  Swift::UInt v24;
  uint64_t v25;
  char v26;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      while (1)
      {
        long long v9 = v6 << 7;
        outlined init with copy of IdentifiedDocumentGroupConfiguration(*(void *)(a2 + 48) + (v6 << 7), (uint64_t)v23);
        Hasher.init(_seed:)();
        uint64_t v11 = v24;
        long long v10 = v25;
        if (v26)
        {
          Hasher._combine(_:)(v24);
          Hasher._combine(_:)(v10);
        }
        else
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          outlined consume of SceneID(v11, v10, 0);
        }
        uint64_t v12 = Hasher._finalize()();
        double result = outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v23);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8) {
          break;
        }
        if (v13 < v8) {
          goto LABEL_14;
        }
LABEL_15:
        BOOL v14 = *(void *)(a2 + 48);
        double result = v14 + (v3 << 7);
        uint64_t v15 = (const void *)(v14 + v9);
        if (v3 << 7 != v9 || result >= (unint64_t)v15 + 128) {
          double result = (unint64_t)memmove((void *)result, v15, 0x80uLL);
        }
        if (v3 < (uint64_t)v6 || *(void *)(a2 + 56) + 8 * v3 >= *(void *)(a2 + 56) + 8 * v6 + 8)
        {
          type metadata accessor for Binding<TabSidebarCustomization>?(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, MEMORY[0x1E4F41720]);
          double result = swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v16 = v3 == v6;
          int64_t v3 = v6;
          if (v16) {
            goto LABEL_6;
          }
          type metadata accessor for Binding<TabSidebarCustomization>?(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, MEMORY[0x1E4F41720]);
          double result = swift_arrayInitWithTakeBackToFront();
        }
        int64_t v3 = v6;
LABEL_6:
        unint64_t v6 = (v6 + 1) & v7;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          goto LABEL_22;
        }
      }
      if (v13 < v8) {
        goto LABEL_6;
      }
LABEL_14:
      if (v3 < (uint64_t)v13) {
        goto LABEL_6;
      }
      goto LABEL_15;
    }
LABEL_22:
    uint64_t v17 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    unint64_t v18 = *v17;
    uint64_t v19 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v17 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v19 = *v17;
    unint64_t v18 = (-1 << result) - 1;
  }
  *uint64_t v17 = v19 & v18;
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v22;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  Swift::UInt v10;
  Swift::UInt v11;
  unint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = (unsigned __int8 *)(*(void *)(a2 + 48) + 16 * v6);
        long long v10 = *v9;
        uint64_t v11 = *((void *)v9 + 1);
        Hasher.init(_seed:)();
        if (v10 == 3)
        {
          Hasher._combine(_:)(0);
        }
        else
        {
          Hasher._combine(_:)(1u);
          Hasher._combine(_:)(v10);
        }
        Hasher._combine(_:)(v11);
        double result = Hasher._finalize()();
        uint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 < v8) {
            goto LABEL_5;
          }
        }
        else if (v12 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v12)
        {
LABEL_14:
          unint64_t v13 = *(void *)(a2 + 48);
          BOOL v14 = (_OWORD *)(v13 + 16 * v3);
          uint64_t v15 = (_OWORD *)(v13 + 16 * v6);
          if (v3 != v6 || v14 >= v15 + 1) {
            *BOOL v14 = *v15;
          }
          uint64_t v16 = *(void *)(a2 + 56);
          uint64_t v17 = (void *)(v16 + 8 * v3);
          unint64_t v18 = (void *)(v16 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 1))
          {
            *uint64_t v17 = *v18;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v23 = __OFSUB__(v22, 1);
  BOOL v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  Swift::UInt *v10;
  Swift::UInt v11;
  Swift::UInt v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v10 = (Swift::UInt *)(*(void *)(a2 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        Hasher._combine(_:)(v12);
        double result = Hasher._finalize()();
        unint64_t v13 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          BOOL v14 = *(void *)(a2 + 48);
          uint64_t v15 = (_OWORD *)(v14 + 16 * v3);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1) {
            *uint64_t v15 = *v16;
          }
          uint64_t v17 = *(void *)(a2 + 56);
          unint64_t v18 = (_OWORD *)(v17 + 32 * v3);
          uint64_t v19 = (_OWORD *)(v17 + 32 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v18 >= v19 + 2))
          {
            long long v9 = v19[1];
            *unint64_t v18 = *v19;
            v18[1] = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v21 = *v20;
    uint64_t v22 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v22 = *v20;
    uint64_t v21 = (-1 << result) - 1;
  }
  *uint64_t v20 = v22 & v21;
  uint64_t v23 = *(void *)(a2 + 16);
  BOOL v24 = __OFSUB__(v23, 1);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  long long v11;
  uint64_t v12;
  Swift::UInt v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  long long *v17;
  long long *v18;
  long long v19;
  long long v20;
  uint64_t v21;
  unint64_t v22;
  long long *v23;
  BOOL v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  _OWORD v33[2];
  uint64_t v34;
  char v35;
  unsigned char v36[48];

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        uint64_t v12 = 48 * v6;
        outlined init with copy of TableRowID(*(void *)(a2 + 48) + 48 * v6, (uint64_t)v36);
        Hasher.init(_seed:)();
        outlined init with copy of TableRowID((uint64_t)v36, (uint64_t)v33);
        if (v35)
        {
          v31[0] = v33[0];
          v31[1] = v33[1];
          uint64_t v32 = v34;
          Hasher._combine(_:)(1uLL);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v31);
        }
        else
        {
          unint64_t v13 = *(void *)&v33[0];
          Hasher._combine(_:)(0);
          Hasher._combine(_:)(v13);
        }
        BOOL v14 = Hasher._finalize()();
        double result = outlined destroy of TableRowID((uint64_t)v36);
        uint64_t v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8) {
            goto LABEL_5;
          }
        }
        else if (v15 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_14:
          uint64_t v16 = *(void *)(a2 + 48);
          uint64_t v17 = (long long *)(v16 + 48 * v3);
          unint64_t v18 = (long long *)(v16 + v12);
          if (48 * v3 < v12 || v17 >= v18 + 3 || v3 != v6)
          {
            uint64_t v19 = *v18;
            uint64_t v20 = v18[2];
            v17[1] = v18[1];
            v17[2] = v20;
            *uint64_t v17 = v19;
          }
          uint64_t v21 = *(void *)(a2 + 56);
          uint64_t v22 = v21 + 56 * v3;
          uint64_t v23 = (long long *)(v21 + 56 * v6);
          if (56 * v3 < (uint64_t)(56 * v6) || v22 >= (unint64_t)v23 + 56 || (v24 = v3 == v6, int64_t v3 = v6, !v24))
          {
            long long v9 = *v23;
            long long v10 = v23[1];
            uint64_t v11 = v23[2];
            *(void *)(v22 + 48) = *((void *)v23 + 6);
            *(_OWORD *)(v22 + 16) = v10;
            *(_OWORD *)(v22 + 32) = v11;
            *(_OWORD *)uint64_t v22 = v9;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v25 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    id v26 = *v25;
    uint64_t v27 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v25 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v27 = *v25;
    id v26 = (-1 << result) - 1;
  }
  *uint64_t v25 = v27 & v26;
  uint64_t v28 = *(void *)(a2 + 16);
  char v29 = __OFSUB__(v28, 1);
  uint64_t v30 = v28 - 1;
  if (v29)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v30;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  uint64_t v10;
  void *v11;
  unint64_t v12;
  void *v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v10 = *(void *)(a2 + 48);
        uint64_t v11 = (void *)(v10 + 8 * v6);
        double result = static Hasher._hash(seed:_:)();
        uint64_t v12 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= (uint64_t)v12)
          {
LABEL_16:
            uint64_t v15 = (void *)(v10 + 8 * v3);
            if (v3 != v6 || v15 >= v11 + 1) {
              *uint64_t v15 = *v11;
            }
            uint64_t v16 = *(void *)(a2 + 56);
            uint64_t v17 = (_OWORD *)(v16 + 32 * v3);
            unint64_t v18 = (_OWORD *)(v16 + 32 * v6);
            if (32 * v3 != 32 * v6 || (int64_t v3 = v6, v17 >= v18 + 2))
            {
              long long v9 = v18[1];
              *uint64_t v17 = *v18;
              v17[1] = v9;
              int64_t v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= (uint64_t)v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v23 = __OFSUB__(v22, 1);
  BOOL v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  const void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  unsigned char v25[104];
  Swift::UInt v26;
  uint64_t v27;
  char v28;

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        long long v9 = v6 << 7;
        outlined init with copy of IdentifiedDocumentGroupConfiguration(*(void *)(a2 + 48) + (v6 << 7), (uint64_t)v25);
        Hasher.init(_seed:)();
        uint64_t v11 = v26;
        long long v10 = v27;
        if (v28)
        {
          Hasher._combine(_:)(v26);
          Hasher._combine(_:)(v10);
        }
        else
        {
          swift_bridgeObjectRetain();
          String.hash(into:)();
          outlined consume of SceneID(v11, v10, 0);
        }
        uint64_t v12 = Hasher._finalize()();
        double result = outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v25);
        unint64_t v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v8)
        {
          goto LABEL_14;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_14:
          BOOL v14 = *(void *)(a2 + 48);
          double result = v14 + (v3 << 7);
          uint64_t v15 = (const void *)(v14 + v9);
          if (v3 << 7 != v9 || result >= (unint64_t)v15 + 128) {
            double result = (unint64_t)memmove((void *)result, v15, 0x80uLL);
          }
          uint64_t v16 = *(void *)(a2 + 56);
          uint64_t v17 = (void *)(v16 + 8 * v3);
          unint64_t v18 = (void *)(v16 + 8 * v6);
          if (v3 != v6 || (int64_t v3 = v6, v17 >= v18 + 1))
          {
            *uint64_t v17 = *v18;
            int64_t v3 = v6;
          }
        }
LABEL_5:
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v19 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    uint64_t v20 = *v19;
    uint64_t v21 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v19 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v21 = *v19;
    uint64_t v20 = (-1 << result) - 1;
  }
  *uint64_t v19 = v21 & v20;
  uint64_t v22 = *(void *)(a2 + 16);
  uint64_t v23 = __OFSUB__(v22, 1);
  BOOL v24 = v22 - 1;
  if (v23)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v24;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  long long v9;
  long long v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v15;
  unint64_t v16;
  long long *v17;
  long long v18;
  long long v19;
  uint64_t v20;
  unint64_t v21;
  long long *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  unsigned char v29[40];

  int64_t v3 = result;
  uint64_t v4 = a2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    double result = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v8 = (result + 1) & v7;
      do
      {
        outlined init with copy of AnyHashable(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v29);
        uint64_t v11 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40));
        double result = outlined destroy of AnyHashable((uint64_t)v29);
        uint64_t v12 = v11 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v12 >= v8 && v3 >= v12)
          {
LABEL_16:
            uint64_t v15 = *(void *)(a2 + 48);
            uint64_t v16 = v15 + 40 * v3;
            uint64_t v17 = (long long *)(v15 + 40 * v6);
            if (v3 != v6 || v16 >= (unint64_t)v17 + 40)
            {
              unint64_t v18 = *v17;
              uint64_t v19 = v17[1];
              *(void *)(v16 + 32) = *((void *)v17 + 4);
              *(_OWORD *)uint64_t v16 = v18;
              *(_OWORD *)(v16 + 16) = v19;
            }
            uint64_t v20 = *(void *)(a2 + 56);
            uint64_t v21 = v20 + 40 * v3;
            uint64_t v22 = (long long *)(v20 + 40 * v6);
            if (v3 != v6 || (int64_t v3 = v6, v21 >= (unint64_t)v22 + 40))
            {
              long long v9 = *v22;
              long long v10 = v22[1];
              *(void *)(v21 + 32) = *((void *)v22 + 4);
              *(_OWORD *)uint64_t v21 = v9;
              *(_OWORD *)(v21 + 16) = v10;
              int64_t v3 = v6;
            }
          }
        }
        else if (v12 >= v8 || v3 >= v12)
        {
          goto LABEL_16;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    uint64_t v23 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    BOOL v24 = *v23;
    uint64_t v25 = (-1 << v3) - 1;
  }
  else
  {
    uint64_t v23 = (uint64_t *)(v4 + 8 * (result >> 6));
    uint64_t v25 = *v23;
    BOOL v24 = (-1 << result) - 1;
  }
  *uint64_t v23 = v25 & v24;
  id v26 = *(void *)(a2 + 16);
  uint64_t v27 = __OFSUB__(v26, 1);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }
  else
  {
    *(void *)(a2 + 16) = v28;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(uint64_t a1, BOOL *a2, double (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))
{
  return specialized closure #1 in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64), *(void *)(v3 + 72), *(void **)(v3 + 80), *(unsigned char *)(v3 + 88), *(void **)(v3 + 96), a3);
}

uint64_t specialized closure #1 in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(uint64_t a1, BOOL *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, char a12, void *a13, double (*a14)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))
{
  return specialized closure #1 in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(a1, a2, a3, *(void *)a4, a5, a6, *(void *)a7, *(void *)(a7 + 8), *(double *)(a4 + 8), *(double *)(a4 + 16), *(unsigned __int8 *)(a7 + 16) | ((unint64_t)*(unsigned int *)(a7 + 20) << 32), a8, a9, a10, a11, a12 & 1, a13, a14);
}

void partial apply for closure #1 in HVGrid.flexibleMinorSize(subviews:)(uint64_t a1, unsigned char *a2)
{
  closure #1 in HVGrid.flexibleMinorSize(subviews:)(a1, a2, *(double **)(v2 + 16), *(unsigned char *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

void closure #1 in HVGrid.flexibleMinorSize(subviews:)(uint64_t a1, unsigned char *a2, double *a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  type metadata accessor for AGGraphRef(0);
  if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0
    || (LazyLayoutViewCache.item(data:)(a1 + 16),
        swift_bridgeObjectRetain(),
        swift_release(),
        _ViewOutputs.layoutComputer.getter(),
        swift_bridgeObjectRelease(),
        LayoutProxy.init(context:layoutComputer:)(),
        (static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) != 0))
  {
LABEL_13:
    *a2 = 1;
    return;
  }
  CGSize v15 = LayoutProxy.idealSize()();
  double width = v15.width;
  if ((a4 & 1) == 0) {
    double width = v15.height;
  }
  double v16 = *a3 + width;
  *a3 = v16;
  if (!__OFSUB__(a6, 1))
  {
    if (a6 - 1 > a5)
    {
      if (*(unsigned char *)(a7 + 32))
      {
        defaultSpacingValue.getter();
        if ((a4 & 1) == 0) {
          double v18 = v17;
        }
        double v16 = *a3;
      }
      else
      {
        double v18 = *(double *)(a7 + 24);
      }
      *a3 = v18 + v16;
    }
    goto LABEL_13;
  }
  __break(1u);
}

uint64_t partial apply for specialized closure #1 in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(uint64_t a1, BOOL *a2)
{
  return partial apply for specialized closure #1 in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(a1, a2, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(subviews:predecessors:minorGeometry:));
}

{
  return partial apply for specialized closure #1 in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(a1, a2, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(subviews:predecessors:minorGeometry:));
}

{
  return partial apply for specialized closure #1 in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(a1, a2, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:));
}

{
  return partial apply for specialized closure #1 in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(a1, a2, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:));
}

uint64_t outlined destroy of (ResolvedScrollBehavior?, ResolvedScrollBehavior?)(uint64_t a1)
{
  type metadata accessor for (ResolvedScrollBehavior?, ResolvedScrollBehavior?)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (ResolvedScrollBehavior?, ResolvedScrollBehavior?)()
{
  if (!lazy cache variable for type metadata for (ResolvedScrollBehavior?, ResolvedScrollBehavior?))
  {
    type metadata accessor for [HandGestureShortcutPaginationDirection](255, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ResolvedScrollBehavior?, ResolvedScrollBehavior?));
    }
  }
}

BOOL specialized closure #1 in StackPlacement.place(subviews:from:position:stopping:style:)(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  outlined init with copy of _LazyLayout_Subviews.Node(a2, (uint64_t)&v16);
  if (v23 != 1)
  {
    long long v13 = v20;
    long long v14 = v21;
    *(_OWORD *)CGSize v15 = *(_OWORD *)v22;
    *(void *)&v15[15] = *(void *)&v22[15];
    long long v9 = v16;
    long long v10 = v17;
    long long v11 = v18;
    long long v12 = v19;
    MEMORY[0x1F4188790](&v10);
    v8[11] = *(void *)&v15[8];
    uint64_t v7 = outlined init with copy of _ViewList_Node(v6, (uint64_t)v8);
    MEMORY[0x1F4188790](v7);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)v8);
    swift_bridgeObjectRelease();
    outlined destroy of _LazyLayout_Subviews((uint64_t)&v9);
    if ((*a3 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    BOOL result = 1;
    goto LABEL_6;
  }
  long long v9 = v16;
  long long v10 = v17;
  long long v11 = v18;
  LODWORD(v12) = v19;
  specialized StackPlacement.placeSection(_:from:)(&v9, a1);
  outlined release of _LazyLayout_Section((uint64_t)&v9);
  if (*a3) {
    goto LABEL_5;
  }
LABEL_3:
  BOOL result = specialized StackPlacement.shouldStop()(0x8000000188328CA0);
LABEL_6:
  *a3 = result;
  return result;
}

{
  BOOL result;
  uint64_t v6;
  uint64_t v7;
  void v8[12];
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  unsigned char v15[23];
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[23];
  char v23;

  outlined init with copy of _LazyLayout_Subviews.Node(a2, (uint64_t)&v16);
  if (v23 != 1)
  {
    long long v13 = v20;
    long long v14 = v21;
    *(_OWORD *)CGSize v15 = *(_OWORD *)v22;
    *(void *)&v15[15] = *(void *)&v22[15];
    long long v9 = v16;
    long long v10 = v17;
    long long v11 = v18;
    long long v12 = v19;
    MEMORY[0x1F4188790](&v10);
    v8[11] = *(void *)&v15[8];
    uint64_t v7 = outlined init with copy of _ViewList_Node(v6, (uint64_t)v8);
    MEMORY[0x1F4188790](v7);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)v8);
    swift_bridgeObjectRelease();
    outlined destroy of _LazyLayout_Subviews((uint64_t)&v9);
    if ((*a3 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    BOOL result = 1;
    goto LABEL_6;
  }
  long long v9 = v16;
  long long v10 = v17;
  long long v11 = v18;
  LODWORD(v12) = v19;
  specialized StackPlacement.placeSection(_:from:)(&v9, a1);
  outlined release of _LazyLayout_Section((uint64_t)&v9);
  if (*a3) {
    goto LABEL_5;
  }
LABEL_3:
  BOOL result = specialized StackPlacement.shouldStop()(0x8000000188328BD0);
LABEL_6:
  *a3 = result;
  return result;
}

{
  BOOL result;
  uint64_t v6;
  uint64_t v7;
  void v8[12];
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  unsigned char v15[23];
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[23];
  char v23;

  outlined init with copy of _LazyLayout_Subviews.Node(a2, (uint64_t)&v16);
  if (v23 != 1)
  {
    long long v13 = v20;
    long long v14 = v21;
    *(_OWORD *)CGSize v15 = *(_OWORD *)v22;
    *(void *)&v15[15] = *(void *)&v22[15];
    long long v9 = v16;
    long long v10 = v17;
    long long v11 = v18;
    long long v12 = v19;
    MEMORY[0x1F4188790](&v10);
    v8[11] = *(void *)&v15[8];
    uint64_t v7 = outlined init with copy of _ViewList_Node(v6, (uint64_t)v8);
    MEMORY[0x1F4188790](v7);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)v8);
    swift_bridgeObjectRelease();
    outlined destroy of _LazyLayout_Subviews((uint64_t)&v9);
    if ((*a3 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    BOOL result = 1;
    goto LABEL_6;
  }
  long long v9 = v16;
  long long v10 = v17;
  long long v11 = v18;
  LODWORD(v12) = v19;
  specialized StackPlacement.placeSection(_:from:)(&v9, a1);
  outlined release of _LazyLayout_Section((uint64_t)&v9);
  if (*a3) {
    goto LABEL_5;
  }
LABEL_3:
  BOOL result = specialized StackPlacement.shouldStop()(0x8000000188328CF0);
LABEL_6:
  *a3 = result;
  return result;
}

{
  BOOL result;
  uint64_t v6;
  uint64_t v7;
  void v8[12];
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  unsigned char v15[23];
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[23];
  char v23;

  outlined init with copy of _LazyLayout_Subviews.Node(a2, (uint64_t)&v16);
  if (v23 != 1)
  {
    long long v13 = v20;
    long long v14 = v21;
    *(_OWORD *)CGSize v15 = *(_OWORD *)v22;
    *(void *)&v15[15] = *(void *)&v22[15];
    long long v9 = v16;
    long long v10 = v17;
    long long v11 = v18;
    long long v12 = v19;
    MEMORY[0x1F4188790](&v10);
    v8[11] = *(void *)&v15[8];
    uint64_t v7 = outlined init with copy of _ViewList_Node(v6, (uint64_t)v8);
    MEMORY[0x1F4188790](v7);
    swift_bridgeObjectRetain();
    _ViewList_Node.applyNodes(from:style:transform:to:)();
    outlined destroy of _ViewList_Node((uint64_t)v8);
    swift_bridgeObjectRelease();
    outlined destroy of _LazyLayout_Subviews((uint64_t)&v9);
    if ((*a3 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    BOOL result = 1;
    goto LABEL_6;
  }
  long long v9 = v16;
  long long v10 = v17;
  long long v11 = v18;
  LODWORD(v12) = v19;
  specialized StackPlacement.placeSection(_:from:)(&v9, a1);
  outlined release of _LazyLayout_Section((uint64_t)&v9);
  if (*a3) {
    goto LABEL_5;
  }
LABEL_3:
  BOOL result = specialized StackPlacement.shouldStop()(0x8000000188328D40);
LABEL_6:
  *a3 = result;
  return result;
}

BOOL partial apply for specialized closure #1 in StackPlacement.place(subviews:from:position:stopping:style:)(uint64_t *a1, uint64_t a2, unsigned char *a3)
{
  return specialized closure #1 in StackPlacement.place(subviews:from:position:stopping:style:)(a1, a2, a3);
}

{
  return specialized closure #1 in StackPlacement.place(subviews:from:position:stopping:style:)(a1, a2, a3);
}

{
  return specialized closure #1 in StackPlacement.place(subviews:from:position:stopping:style:)(a1, a2, a3);
}

{
  return specialized closure #1 in StackPlacement.place(subviews:from:position:stopping:style:)(a1, a2, a3);
}

BOOL partial apply for specialized closure #2 in StackPlacement.placeSection(_:from:)(uint64_t a1, unsigned char *a2)
{
  return specialized closure #1 in closure #1 in StackPlacement.place(subviews:from:position:stopping:style:)(a1, a2, *(void *)(v2 + 16), specialized StackPlacement.flushMinorGroup(), 0x8000000188328CA0);
}

{
  uint64_t v2;

  return specialized closure #1 in closure #1 in StackPlacement.place(subviews:from:position:stopping:style:)(a1, a2, *(void *)(v2 + 16), specialized StackPlacement.flushMinorGroup(), 0x8000000188328BD0);
}

{
  uint64_t v2;

  return specialized closure #1 in closure #1 in StackPlacement.place(subviews:from:position:stopping:style:)(a1, a2, *(void *)(v2 + 16), specialized StackPlacement.flushMinorGroup(), 0x8000000188328CF0);
}

{
  uint64_t v2;

  return specialized closure #1 in closure #1 in StackPlacement.place(subviews:from:position:stopping:style:)(a1, a2, *(void *)(v2 + 16), specialized StackPlacement.flushMinorGroup(), 0x8000000188328D40);
}

uint64_t partial apply for closure #1 in _LazyLayout_Subviews.id(at:style:)(uint64_t a1, unsigned char *a2)
{
  return closure #1 in _LazyLayout_Subviews.id(at:style:)(a1, a2, *(void **)(v2 + 16));
}

uint64_t closure #1 in _LazyLayout_Subviews.id(at:style:)(uint64_t a1, unsigned char *a2, void *a3)
{
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v4 = *(void *)(a1 + 64);
  *a3 = v5;
  a3[1] = v4;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = 1;
  return result;
}

unsigned char *ResolvedScrollBehaviorModifier.MakeBehavior.defaultBehavior.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = (unsigned char *)AGGraphGetValue();
  if (*result)
  {
    if (*(void *)(AGGraphGetValue() + 8))
    {
      type metadata accessor for StyleContextWriter<ContainerStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release();
    }
    else
    {
      type metadata accessor for StyleContextWriter<ContainerStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release();
    outlined init with take of ResolvedScrollBehavior?((uint64_t)&v3, a1);
    swift_release();
    return (unsigned char *)swift_release();
  }
  else
  {
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

Swift::Void __swiftcall UIHostingViewBase.startUpdateTimer(delay:)(Swift::Double delay)
{
  id v3 = objc_msgSend(self, sel_isMainThread);
  if (v3)
  {
    if (delay <= 0.1) {
      delay = 0.1;
    }
    type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for ()?);
    static Update.locked<A>(_:)();
    double v4 = *(double *)(v1 + 88);
    if (*(unsigned char *)(v1 + 200) == 1)
    {
      uint64_t v5 = (double *)&v11;
      static Time.infinity.getter();
    }
    else
    {
      uint64_t v5 = (double *)(v1 + 192);
    }
    if (delay + v4 < *v5)
    {
      unint64_t v8 = *(void **)(v1 + 208);
      if (v8) {
        objc_msgSend(v8, sel_invalidate, *v5, delay + v4);
      }
      *(Swift::Double *)(v1 + 192) = delay + *(double *)(v1 + 88);
      *(unsigned char *)(v1 + 200) = 0;
      swift_allocObject();
      swift_weakInit();
      swift_retain();
      uint64_t v9 = withDelay(_:do:)();
      swift_release_n();
      long long v10 = *(void **)(v1 + 208);
      *(void *)(v1 + 208) = v9;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(v1 + 176);
    if (v6) {
      *(unsigned char *)(v6 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread) = 0;
    }
    double v7 = MEMORY[0x1F4188790](v3);
    MEMORY[0x18C113CE0](partial apply for closure #1 in UIHostingViewBase.startUpdateTimer(delay:), v7);
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityVisibility and conformance AccessibilityVisibility()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibility and conformance AccessibilityVisibility);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityTraitSet and conformance AccessibilityTraitSet()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet;
  if (!lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityTraitSet and conformance AccessibilityTraitSet);
  }
  return result;
}

void type metadata accessor for (StackPlacement<LazyVStackLayout>, PlacementProperties<LazyVStackLayout>)?(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type UInt64 and conformance UInt64()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt64 and conformance UInt64;
  if (!lazy protocol witness table cache variable for type UInt64 and conformance UInt64)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt64 and conformance UInt64);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UInt32 and conformance UInt32()
{
  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UInt32 and conformance UInt32;
  if (!lazy protocol witness table cache variable for type UInt32 and conformance UInt32)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UInt32 and conformance UInt32);
  }
  return result;
}

uint64_t partial apply for closure #1 in LazyStack<>.placementOfNearbySubview(_:subviews:context:cache:)(uint64_t a1, unsigned char *a2)
{
  return closure #1 in LazyStack<>.placementOfNearbySubview(_:subviews:context:cache:)(a1, a2, *(uint64_t **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48));
}

uint64_t closure #1 in LazyStack<>.placementOfNearbySubview(_:subviews:context:cache:)(uint64_t a1, unsigned char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result = static _ViewList_ID.== infix(_:_:)();
  uint64_t v12 = *a3;
  if (result)
  {
    *(void *)a6 = v12;
    *(unsigned char *)(a6 + 8) = 0;
    *a2 = 1;
    uint64_t v12 = *a3 + 1;
    if (!__OFADD__(*a3, 1))
    {
LABEL_8:
      *a3 = v12;
      return result;
    }
    __break(1u);
  }
  if (v12 >= a7) {
    *a2 = 1;
  }
  if (!__OFADD__(v12++, 1)) {
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t partial apply for specialized closure #1 in LazyHVStack<>.flexibleMinorSize(subviews:)(uint64_t a1, unsigned char *a2)
{
  return specialized closure #1 in LazyHVStack<>.flexibleMinorSize(subviews:)(a1, a2, *(void **)(v2 + 16));
}

{
  uint64_t v2;

  return specialized closure #1 in LazyHVStack<>.flexibleMinorSize(subviews:)(a1, a2, *(void **)(v2 + 16));
}

uint64_t specialized closure #1 in LazyHVStack<>.flexibleMinorSize(subviews:)(uint64_t a1, unsigned char *a2, void *a3)
{
  LazyLayoutViewCache.item(data:)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  _ViewOutputs.layoutComputer.getter();
  swift_bridgeObjectRelease();
  LayoutProxy.init(context:layoutComputer:)();
  static _ProposedSize.unspecified.getter();
  uint64_t result = LayoutProxy.size(in:)();
  *a3 = v6;
  *a2 = 1;
  return result;
}

{
  uint64_t result;
  uint64_t v6;

  LazyLayoutViewCache.item(data:)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  _ViewOutputs.layoutComputer.getter();
  swift_bridgeObjectRelease();
  LayoutProxy.init(context:layoutComputer:)();
  static _ProposedSize.unspecified.getter();
  uint64_t result = LayoutProxy.size(in:)();
  *a3 = v6;
  *a2 = 1;
  return result;
}

void type metadata accessor for (StackPlacement<LazyHStackLayout>, PlacementProperties<LazyHStackLayout>)?(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for AccessibilityChildBehavior()
{
  return &type metadata for AccessibilityChildBehavior;
}

void *protocol witness for Collection.formIndex(after:) in conformance FetchedResults<A>(void *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for BidirectionalCollection.formIndex(before:) in conformance FetchedResults<A>(a1, a2, a3, MEMORY[0x1E4FBB610]);
}

uint64_t type metadata instantiation function for CapsuleSlider(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 72);
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance PersistentSystemOverlaysKey(_WORD *a1@<X8>)
{
  *a1 = 512;
}

void partial apply for closure #1 in UIView.adoptEnvironment(_:hostedSubview:)()
{
  closure #1 in UIView.adoptEnvironment(_:hostedSubview:)(*(void **)(v0 + 16), *(unsigned char *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t getEnumTagSinglePayload for _ToolbarItemList(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t initializeWithCopy for _PresentationTransitionOutputs(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  return a1;
}

uint64_t protocol witness for CollectionViewListDataSourceBase.section(forSectionLabelIndex:) in conformance TableDataSourceAdaptor()
{
  return 0;
}

uint64_t _UIHostingView.currentTimestamp.getter@<X0>(void *a1@<X8>)
{
  *a1 = _UIHostingView.base.getter()[11];

  return swift_release();
}

uint64_t getEnumTagSinglePayload for ScrollTargetBehaviorDecelerationContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ViewInputFlagModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for ViewInputFlagModifier<A>);
}

uint64_t storeEnumTagSinglePayload for Toolbar.UpdateContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 88) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t SwiftUIGlue.makeLayoutView<A>(root:inputs:body:)()
{
  return static Layout.makeLayoutView(root:inputs:body:)();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.ManagedBarAppearancesKey(uint64_t *a1, uint64_t *a2)
{
  return specialized static Set.== infix(_:_:)(*a1, *a2);
}

uint64_t getEnumTag for HandGestureShortcutInteractiveControl.BorderShape(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

ValueMetadata *type metadata accessor for PrimitiveButtonStyleConfiguration.Label()
{
  return &type metadata for PrimitiveButtonStyleConfiguration.Label;
}

uint64_t partial apply for closure #1 in _UIHostingView.beginTransaction()()
{
  return closure #1 in _UIHostingView.beginTransaction()(v0[4], v0[2], v0[3]);
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance LazyFixedSizeHStackLayout()
{
  return 256;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityScrollableModifier()
{
  return &protocol witness table for AccessibilityScrollableModifier;
}

void protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance PropertiesTransform<A>()
{
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ContentShapeKindModifier<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static _ContentShapeKindModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

ValueMetadata *type metadata accessor for Divider()
{
  return &type metadata for Divider;
}

uint64_t getEnumTagSinglePayload for CGSize(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t partial apply for closure #1 in closure #2 in ButtonBehavior.body.getter()
{
  return closure #1 in closure #2 in ButtonBehavior.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t protocol witness for static EnvironmentalModifier._tracksEnvironmentDependencies.getter in conformance PopoverPresentationModifier<A>()
{
  return MEMORY[0x1F40FFCB0]();
}

uint64_t protocol witness for static EnvironmentalModifier._requiresMainThread.getter in conformance PopoverPresentationModifier<A>()
{
  return MEMORY[0x1F40FFCB0]();
}

ValueMetadata *type metadata accessor for ButtonStyleConfiguration.Label()
{
  return &type metadata for ButtonStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for LongPressGesture()
{
  return &type metadata for LongPressGesture;
}

uint64_t storeEnumTagSinglePayload for ScrollTargetBehaviorDecelerationContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for PresentSharingPickerAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SymbolEffect.PulseConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformItemListTransformModifier<A>()
{
  return &protocol witness table for PlatformItemListTransformModifier<A>;
}

ValueMetadata *type metadata accessor for ButtonRole()
{
  return &type metadata for ButtonRole;
}

uint64_t destructiveInjectEnumTag for HandGestureShortcutInteractiveControl.BorderShape(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TransferableDropAction(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

_UNKNOWN **base witness table accessor for ViewModifier in SectionStyleModifier<A>()
{
  return &protocol witness table for SectionStyleModifier<A>;
}

uint64_t @objc static _UIHostingView._supportsInvalidatingFocusCache()()
{
  return 1;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance KeyboardShortcutBindingBehavior<A>@<D0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static KeyboardShortcutBindingBehavior._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), a5);
}

uint64_t storeEnumTagSinglePayload for FileImportOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_188142E8C);
}

uint64_t storeEnumTagSinglePayload for FileExportOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187D91320);
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityTraitsModifier<A>.ChildModifier()
{
  return &protocol witness table for AccessibilityTraitsModifier<A>.ChildModifier;
}

uint64_t getEnumTagSinglePayload for ResolvedNavigationDestinations(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t protocol witness for Projection.get(base:) in conformance OptionalSelectionManagerProjection<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return OptionalSelectionManagerProjection.get(base:)(a1, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for SectionStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  }
  return a1;
}

uint64_t storeEnumTagSinglePayload for ListStackBehavior(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = 0;
    *(_WORD *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 10) = v3;
  return result;
}

double protocol witness for ImageProvider.resolveNamedImage(in:) in conformance UIImage@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t getEnumTagSinglePayload for SheetPreference.Value(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 106)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 105);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t getEnumTagSinglePayload for SharingPickerHostModifier.Model(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 112);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t protocol witness for ViewGraphDelegate.updateViewGraph<A>(body:) in conformance _UIHostingView<A1>()
{
  swift_getWitnessTable();

  return ViewRendererHost.updateViewGraph<A>(body:)();
}

uint64_t storeEnumTagSinglePayload for LocationBasedFeedbackAdaptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LocationBasedFeedbackAdaptor(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance _UIHostingView<A>.HostViewGraph(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized _UIHostingView.HostViewGraph.modifyViewInputs(inputs:graph:)(a1, a3);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ButtonActionModifier<A>@<D0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X4>, double *a4@<X8>)
{
  return static ButtonActionModifier._makeView(modifier:inputs:body:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

id @objc UIHostingController.childForStatusBarHidden.getter(void *a1)
{
  id v1 = a1;
  unint64_t v2 = (void *)UIHostingController.childForStatusBarHidden.getter();

  return v2;
}

_DWORD *__swift_memcpy7_4(_DWORD *result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *double result = v2;
  return result;
}

uint64_t initializeWithCopy for ContextMenuModifierCore(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(unsigned char *)(v7 + 4) = *(unsigned char *)(v8 + 4);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AccessibilityTextLayoutProperties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 144) = 0;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)double result = 0u;
    *(_DWORD *)double result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 145) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 145) = 0;
    }
    if (a2) {
      *(void *)(result + 112) = a2;
    }
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance StaticSourceWriter<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for StaticSourceWriter<A, B>);
}

uint64_t protocol witness for ViewRendererHost.propertiesNeedingUpdate.setter in conformance _UIHostingView<A>(__int16 *a1)
{
  __int16 v2 = *a1;
  return _UIHostingView.propertiesNeedingUpdate.setter(&v2);
}

uint64_t _UIHostingView.propertiesNeedingUpdate.setter(__int16 *a1)
{
  __int16 v1 = *a1;
  *((_WORD *)_UIHostingView.base.getter() + 48) = v1;

  return swift_release();
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationSplitStyleModifier<A>()
{
  return &protocol witness table for NavigationSplitStyleModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in DividerStyleModifier<A>()
{
  return &protocol witness table for DividerStyleModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in ToggleStyleModifier<A>()
{
  return &protocol witness table for ToggleStyleModifier<A>;
}

uint64_t getEnumTag for ListStackBehavior(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t initializeWithCopy for _ResolvedMatchedTransitionSourceConfiguration.Shadow(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance BridgedEnvironmentKeysKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static BridgedEnvironmentKeysKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t getEnumTagSinglePayload for HeaderFooterVisitor.DefaultForegroundColorModifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t destroy for ButtonSpringLoadedInteraction()
{
  swift_release();
  swift_release();

  return swift_release();
}

void closure #1 in closure #1 in closure #1 in closure #1 in _UIHostingView.beginTransaction()()
{
}

uint64_t getEnumTagSinglePayload for ActiveEditMenu(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t partial apply for closure #1 in PlatformViewChild.updateValue()()
{
  return closure #1 in PlatformViewChild.updateValue()(v0[4], v0[2], v0[3]);
}

uint64_t destroy for ButtonBehavior(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(a1 + 64)) {
    swift_release();
  }

  return swift_release();
}

uint64_t destroy for CoordinateSpaceNameModifier(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 40) & 1) == 0) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

ValueMetadata *type metadata accessor for MatchedTransitionSourceModifier()
{
  return &type metadata for MatchedTransitionSourceModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OptionalSourceWriter<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for OptionalSourceWriter<A, B>);
}

void protocol witness for static _ViewTraitKey.defaultValue.getter in conformance KeyboardShortcutPickerOptionTraitKey(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
}

uint64_t getEnumTagSinglePayload for PPTTestCase(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 44)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 8) & 0xF000000000000007) != 0) {
    int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t destructiveProjectEnumData for ScrollTransitionConfiguration.Mode(uint64_t result)
{
  *(void *)(result + 32) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t destroy for ButtonRepeatModifier(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  uint64_t v2 = *(void *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 72);

  return outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v2, v3);
}

ValueMetadata *type metadata accessor for _FlipForRTLEffect()
{
  return &type metadata for _FlipForRTLEffect;
}

_UNKNOWN **base witness table accessor for View in _CALayerView<A>()
{
  return &protocol witness table for _CALayerView<A>;
}

uint64_t @objc _UIHostingView._axesForDerivingIntrinsicContentSizeFromLayoutSize.getter(void *a1)
{
  id v1 = a1;
  _UIHostingView._axesForDerivingIntrinsicContentSizeFromLayoutSize.getter();

  return 3;
}

uint64_t _UIHostingView._axesForDerivingIntrinsicContentSizeFromLayoutSize.getter()
{
  return 3;
}

uint64_t partial apply for closure #1 in MakeSubviewTransition.visit<A>(_:)(uint64_t a1, uint64_t *a2)
{
  return closure #1 in MakeSubviewTransition.visit<A>(_:)(a1, a2, *(uint64_t (**)(uint64_t *))(v2 + 16));
}

id protocol witness for ViewGraphRenderDelegate.renderingRootView.getter in conformance UIHostingViewBase()
{
  id result = (id)MEMORY[0x18C119DF0](v0 + 16);
  if (!result)
  {
    id v2 = objc_allocWithZone(MEMORY[0x1E4FB1EB0]);
    return objc_msgSend(v2, sel_init);
  }
  return result;
}

uint64_t destroy for OnScrollVisibilityChangeModifier()
{
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for ButtonSpringLoadedInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _GeometryActionModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _GeometryActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedButtonStyleBody<A>(int *a1, uint64_t *a2, uint64_t a3)
{
  return static ResolvedButtonStyleBody._makeViewList(view:inputs:)(a1, a2, *(void *)(a3 + 16));
}

void *initializeBufferWithCopyOfBuffer for _AlignmentWritingModifier(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = v4;
  swift_retain();
  return a1;
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance DisclosureIndicatorShapeStyle(uint64_t a1)
{
  return DisclosureIndicatorShapeStyle._apply(to:)(a1, *v1);
}

uint64_t getEnumTagSinglePayload for ArchivableAppIntentToggle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t destroy for ToolbarAppearanceModifier(uint64_t a1, uint64_t a2)
{
  return destroy for ToolbarAppearanceConfiguration(a1, a2, MEMORY[0x1E4FBC898]);
}

ValueMetadata *type metadata accessor for ScrollTargetModifier()
{
  return &type metadata for ScrollTargetModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityLargeContentViewModifier<A>()
{
  return &protocol witness table for AccessibilityLargeContentViewModifier<A>;
}

uint64_t getEnumTag for AccessibilityScrollableContext(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 70);
  if (result >= 3) {
    return (*(_DWORD *)a1 + 3);
  }
  return result;
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance NavigationTitleKey(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
}

uint64_t __swift_memcpy10_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(void *)uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewProxy()
{
  return &type metadata for ScrollViewProxy;
}

uint64_t getEnumTagSinglePayload for PresentationOptionsPreference(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 137)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t type metadata instantiation function for ScrollableLayoutState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 96);
}

uint64_t type metadata instantiation function for PlatterShadowedContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 88);
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance LazyState<A>()
{
  return specialized static LazyState._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

__n128 __swift_memcpy106_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 90) = *(long long *)((char *)a2 + 90);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in _LabeledContentStyleModifier<A>()
{
  return &protocol witness table for _LabeledContentStyleModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in HelpStyleModifier<A>()
{
  return &protocol witness table for HelpStyleModifier<A>;
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedButtonStyle@<X0>(uint64_t a1@<X8>)
{
  return _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_2(v1, a1, type metadata accessor for PrimitiveButtonStyleConfiguration);
}

uint64_t destroy for PopoverAttachmentAnchor(uint64_t a1)
{
  return outlined consume of Environment<CGFloat?>.Content(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

ValueMetadata *type metadata accessor for _AllowsHitTestingModifier()
{
  return &type metadata for _AllowsHitTestingModifier;
}

uint64_t initializeWithCopy for OnScrollVisibilityChangeModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance OptionalSourceWriter<A, B>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return static OptionalSourceWriter._makeInputs(modifier:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

uint64_t protocol witness for Layout.spacing(subviews:cache:) in conformance GridIconLayout()
{
  return MEMORY[0x1F4100F28]();
}

ValueMetadata *type metadata accessor for SheetPreference.Value()
{
  return &type metadata for SheetPreference.Value;
}

ValueMetadata *type metadata accessor for PresentationMode()
{
  return &type metadata for PresentationMode;
}

uint64_t PlatformItemListViewGraph.needsUpdate(graph:)(uint64_t a1)
{
  if (*(unsigned char *)(v1 + 9)) {
    return 1;
  }
  if (*(unsigned char *)(v1 + 8) != 1) {
    return 0;
  }
  swift_beginAccess();
  if ((*(unsigned char *)(a1 + 361) & 2) == 0) {
    return 0;
  }
  uint64_t result = AGGraphGetWeakValue();
  if (result)
  {
    uint64_t result = v4 & 1;
    *(unsigned char *)(v1 + 9) = v4 & 1;
  }
  return result;
}

uint64_t partial apply for closure #2 in ContextMenuModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in ContextMenuModifier.body(content:)(*(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t partial apply for closure #1 in ContextMenuModifier.body(content:)()
{
  return closure #1 in ContextMenuModifier.body(content:)(*(void *)(v0 + 32));
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;

  uint64_t v0 = *(void *)(AGGraphGetValue() + 8);
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>, (uint64_t)&type metadata for DefaultNavigationIndicatorVisibilityKey, (uint64_t)&protocol witness table for DefaultNavigationIndicatorVisibilityKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v0)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier.value.getter();
  return AGGraphSetOutputValue();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void v7[25];
  unsigned char v8[72];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  char v11 = *MEMORY[0x1E4F143B8];
  Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = Value[1];
  uint64_t v9 = *Value;
  long long v10 = v1;
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, MEMORY[0x1E4FBB718]);
  long long v2 = AGGraphGetValue();
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(v2, (uint64_t)v8, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior);
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v1)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  _s7SwiftUI12PlatformItemV16SelectionContentV09AuxiliaryF0OSgWOdTm_0((uint64_t)v8, (uint64_t)v7, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior);
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)&v6, (uint64_t)&v5);
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v10)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v6);
  long long v6 = 0;
  LOWORD(v7[0]) = 1;
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v10)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v3 = v10;
  }
  else
  {
    swift_release();
    uint64_t v3 = 0;
  }
  long long v6 = v9;
  v7[0] = v3;
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;

  uint64_t v0 = *(void *)(AGGraphGetValue() + 8);
  swift_retain();
  swift_retain();
  if (EnvironmentValues.accessibilityInvertColors.getter()) {
    AGGraphGetValue();
  }
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>, (uint64_t)&type metadata for IgnoreInvertColorsFilterActiveKey, (uint64_t)&protocol witness table for IgnoreInvertColorsFilterActiveKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v0)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  return UpdatedHostingScrollView.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  unsigned int v1;
  uint64_t v2;

  long long v2 = *MEMORY[0x1E4F143B8];
  LazyViewPhase.value.getter(&v1);
  return AGGraphSetOutputValue();
}

{
  return ScrollViewLayoutComputer.updateValue()();
}

{
  return ResolvedScrollBehaviorModifier.TrackedEnvironment.updateValue()();
}

{
  return LazyTransaction.updateValue()();
}

{
  return AlignmentModifiedLayoutComputer.updateValue()();
}

{
  void v1[6];

  v1[5] = *MEMORY[0x1E4F143B8];
  ScrollViewChildTransform.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  return BaseModifier.SelectionObserver.updateValue()();
}

{
  return RootEnvironmentModifier.Child.updateValue()();
}

{
  static Signpost.platformUpdate.getter();
  return Signpost.traceInterval<A>(object:_:_:closure:)();
}

{
  UnsupportedDisplayList.value.getter();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  ScrollViewDisplayList.value.getter();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  Value = (uint64_t *)AGGraphGetValue();
  char v4 = *Value;
  long long v5 = Value[1];
  swift_retain();
  swift_retain();
  EnvironmentValues.configureForRoot()();
  AGGraphGetValue();
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScenePhaseKey>, (uint64_t)&type metadata for ScenePhaseKey, (uint64_t)&protocol witness table for ScenePhaseKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v5)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  uint64_t v1 = one-time initialization token for configuredForPlatform;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  long long v2 = static EnvironmentValues.configuredForPlatform;
  if (v4)
  {
    swift_release();
    if (!v2 || v4 != v2) {
      EnvironmentValues._configureForPlatform(traitCollection:)(0);
    }
  }
  else if (static EnvironmentValues.configuredForPlatform)
  {
    swift_retain();
    EnvironmentValues.plist.setter();
  }
  type metadata accessor for [SceneID : KeyboardShortcut]();
  AGGraphGetValue();
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey>, (uint64_t)&type metadata for EnvironmentValues.SceneKeyboardShortcutsKey, (uint64_t)&protocol witness table for EnvironmentValues.SceneKeyboardShortcutsKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey> and conformance EnvironmentPropertyKey<A>();
  swift_bridgeObjectRetain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v5)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  return OnTestEffect.updateValue()();
}

{
  return ResolvedScrollBehaviorModifier.MakeBehavior.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  char v1;
  uint64_t v2;

  long long v2 = *MEMORY[0x1E4F143B8];
  BaseModifier.Child.value.getter(&v1);
  return AGGraphSetOutputValue();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  long long v5;
  void v6[3];
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x1E4F143B8];
  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value + 8, (uint64_t)v6);
  uint64_t v1 = v7;
  long long v2 = v8;
  __swift_project_boxed_opaque_existential_1(v6, v7);
  long long v5 = *(_OWORD *)AGGraphGetValue();
  (*(void (**)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t))(v2 + 8))(&v4, &v5, v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  return AGGraphSetOutputValue();
}

{
  long long v1;
  uint64_t v2;

  long long v2 = *MEMORY[0x1E4F143B8];
  IsFocusedEnvironmentChild.value.getter(&v1);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  return UpdateViewFocusItem.updateValue()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for LazyLayoutViewCache();
  uint64_t v0 = *(void *)AGGraphGetValue();
  swift_beginAccess();
  swift_retain();
  uint64_t v1 = swift_bridgeObjectRetain();
  long long v2 = specialized _NativeDictionary.filter(_:)(v1, v0);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 160) = v2;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v0 + 200) = 0;
  swift_release();
  swift_bridgeObjectRelease();
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  AGGraphGetValue();
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  long long v10 = *MEMORY[0x1E4F143B8];
  Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  long long v2 = *(void *)(Value + 8);
  uint64_t v3 = *(unsigned char *)(Value + 16);
  if (!v2)
  {
    outlined consume of Binding<NavigationSplitViewColumn>?(*(void *)Value, 0);
    goto LABEL_5;
  }
  unint64_t v7 = *(void *)Value;
  unint64_t v8 = v2;
  uint64_t v9 = v3 & 1;
  outlined copy of Binding<NavigationSplitViewColumn>?(v1, v2);
  outlined copy of Binding<NavigationSplitViewColumn>?(v1, v2);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v6);
  swift_release();
  swift_release();
  outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
  if (v6)
  {
LABEL_5:
    char v4 = 0;
    goto LABEL_6;
  }
  char v4 = 1;
LABEL_6:
  LOBYTE(v7) = v4;
  type metadata accessor for _VariadicView.Tree<SectionContainer, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>>();
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t Value;
  char *v4;
  void v6[2];

  v6[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for _TaskModifier.InnerModifier(0);
  MEMORY[0x1F4188790](v0);
  long long v2 = (char *)v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _TaskModifier(0);
  Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)v2, type metadata accessor for _TaskModifier);
  char v4 = &v2[*(int *)(v0 + 20)];
  *(void *)char v4 = 0;
  *((void *)v4 + 1) = 0;
  AGGraphSetOutputValue();
  return _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v2, type metadata accessor for _TaskModifier.InnerModifier);
}

{
  unsigned char v1[384];
  uint64_t v2;

  long long v2 = *MEMORY[0x1E4F143B8];
  _NavigationSplitReader.Core.value.getter((uint64_t)v1);
  type metadata accessor for ModifiedContent<VariadicViewForest<_NavigationSplitReader.ForestRoot, (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationStat();
  AGGraphSetOutputValue();
  return _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v1, (uint64_t (*)(void))type metadata accessor for ModifiedContent<VariadicViewForest<_NavigationSplitReader.ForestRoot, (ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Sidebar, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Content, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed>>, ModifiedContent<ModifiedContent<ModifiedContent<NavigationSplitViewStyleConfiguration.Detail, InjectKeyModifier>, StaticIf<Semantics.DismissPopsInNavigationSplitViewRoots, _EnvironmentKeyTransformModifier<Binding<PresentationMode>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<NavigationStat);
}

{
  ResolvedSafeAreaInsets.value.getter();
  return AGGraphSetOutputValue();
}

{
  return TooltipModifier.TooltipResponderUpdater.updateValue()();
}

{
  type metadata accessor for NavigationStateHost();
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  type metadata accessor for NavigationSeedHost(0);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  double v0;
  double v1;
  double v2;
  double v3;
  void (*v4)(_OWORD *, void);
  double *v5;
  double v6;
  void (*v7)(_OWORD *, void);
  float64x2_t *v8;
  float64x2_t v10;
  long long v11;
  _OWORD v12[2];
  uint64_t v13;

  long long v13 = *MEMORY[0x1E4F143B8];
  char v11 = *(_OWORD *)AGGraphGetValue();
  AGGraphGetValue();
  EdgeInsets.originOffset.getter();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  char v4 = (void (*)(_OWORD *, void))ViewOrigin.value.modify();
  long long v6 = v3 + v5[1];
  *long long v5 = v1 + *v5;
  v5[1] = v6;
  v4(v12, 0);
  type metadata accessor for CGSize(0);
  long long v10 = *(float64x2_t *)AGGraphGetValue();
  unint64_t v7 = (void (*)(_OWORD *, void))ViewOrigin.value.modify();
  *unint64_t v8 = vaddq_f64(v10, *v8);
  v7(v12, 0);
  v12[0] = v11;
  return AGGraphSetOutputValue();
}

{
  return ScrollViewChildContainerSize.updateValue()();
}

{
  void v1[6];

  v1[5] = *MEMORY[0x1E4F143B8];
  CoordinateSpaceNameTransform.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  ScrollViewAdjustedSafeArea.value.getter();
  return AGGraphSetOutputValue();
}

{
  return ScrollViewDefaultAnchors.updateValue()();
}

{
  ScrollViewRTLAlignmentAdjustment.value.getter();
  type metadata accessor for CGSize(0);
  return AGGraphSetOutputValue();
}

{
  unsigned char v1[208];
  uint64_t v2;

  long long v2 = *MEMORY[0x1E4F143B8];
  ScrollViewAdjustedProperties.value.getter(v1);
  AGGraphSetOutputValue();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v1);
}

{
  return OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  ScrollViewAlignmentAdjustment.value.getter();
  type metadata accessor for CGSize(0);
  return AGGraphSetOutputValue();
}

{
  void v1[3];

  v1[2] = *MEMORY[0x1E4F143B8];
  FlipForRTLDisplayList.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  void v1[16];

  v1[15] = *MEMORY[0x1E4F143B8];
  ScrollViewAdjustedConfiguration.value.getter(v1);
  AGGraphSetOutputValue();
  return outlined destroy of ScrollViewConfiguration((uint64_t)v1);
}

{
  return specialized ScrollActionDispatcher.updateValue()();
}

{
  long long *Value;
  void (*v1)(_OWORD *, void);
  float64x2_t *v2;
  float64x2_t v4;
  long long v5;
  long long v6;
  _OWORD v7[2];
  uint64_t v8;

  unint64_t v8 = *MEMORY[0x1E4F143B8];
  Value = (long long *)AGGraphGetValue();
  long long v5 = *Value;
  long long v6 = Value[1];
  type metadata accessor for CGSize(0);
  char v4 = *(float64x2_t *)AGGraphGetValue();
  uint64_t v1 = (void (*)(_OWORD *, void))ViewSize.value.modify();
  *long long v2 = vsubq_f64(*v2, v4);
  v1(v7, 0);
  v7[0] = v5;
  v7[1] = v6;
  return AGGraphSetOutputValue();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void v6[16];

  v6[15] = *MEMORY[0x1E4F143B8];
  AGGraphGetValue();
  Value = AGGraphGetValue();
  outlined init with copy of ScrollViewConfiguration(Value, (uint64_t)v6);
  if (static SemanticFeature.isEnabled.getter())
  {
    static Edge.Set.all.getter();
    if (Axis.Set.contains(_:)()) {
      static Edge.Set.horizontal.getter();
    }
    if (Axis.Set.contains(_:)()) {
      static Edge.Set.vertical.getter();
    }
  }
  outlined destroy of ScrollViewConfiguration((uint64_t)v6);
  EdgeInsets.in(_:)();
  v6[0] = v1;
  v6[1] = v2;
  v6[2] = v3;
  v6[3] = v4;
  return AGGraphSetOutputValue();
}

{
  int v0;

  uint64_t v0 = *(unsigned __int8 *)AGGraphGetValue();
  if (v0 == 2 || ((v0 & 1) == 0) == *(unsigned char *)AGGraphGetValue()) {
    AGGraphGetValue();
  }
  else {
    ViewOrigin.init()();
  }
  return AGGraphSetOutputValue();
}

{
  _OWORD v1[7];
  uint64_t v2;

  long long v2 = *MEMORY[0x1E4F143B8];
  ScrollGeometryProvider.value.getter(v1);
  return AGGraphSetOutputValue();
}

{
  return specialized LazyLayoutComputer.updateValue()();
}

{
  return specialized _NavigationSplitReader.PreparedColumn.updateValue()();
}

{
  return specialized _NavigationSplitReader.PreparedColumn.updateValue()();
}

{
  return specialized _NavigationSplitReader.PreparedColumn.updateValue()();
}

{
  if (static SemanticFeature.isEnabled.getter())
  {
    AGGraphGetValue();
    EdgeInsets.originOffset.getter();
    ViewOrigin.init(_:)();
  }
  else
  {
    ViewOrigin.init()();
  }
  return AGGraphSetOutputValue();
}

{
  return _NavigationSplitReader.DerivedAttributes.updateValue()();
}

{
  return NavigationItemAdaptorModifier.MakeAdaptor.updateValue()();
}

{
  void v1[6];

  v1[5] = *MEMORY[0x1E4F143B8];
  UIViewSnapshotResponder.Transform.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  return SizeFittingMux.updateValue()();
}

{
  return specialized LazyLayoutComputer.updateValue()();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v0 = ScrollTargetRole.SetLayout.value.getter();
  long long v2 = v1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v0;
  *(void *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  return SizeFittingLayoutComputer.updateValue()();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;

  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentScrollViewBox>, (uint64_t)&type metadata for ContentScrollViewBox, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18834BB80;
  type metadata accessor for HostingScrollView();
  uint64_t v1 = *(void **)AGGraphGetValue();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(unsigned char *)(v0 + 72) = 0;
  swift_unknownObjectWeakAssign();
  long long v2 = v1;
  *(void *)(v0 + 48) = AGCreateWeakAttribute();
  *(void *)(v0 + 56) = AGCreateWeakAttribute();
  uint64_t v3 = AGCreateWeakAttribute();

  *(void *)(v0 + 64) = v3;
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for [ContentScrollViewBox], (uint64_t)&type metadata for ContentScrollViewBox, MEMORY[0x1E4FBB320]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  void *v0;
  uint64_t v1;
  id v2;

  type metadata accessor for UIScrollView?();
  uint64_t v0 = *(void **)AGGraphGetValue();
  if (v0)
  {
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentScrollViewBox>, (uint64_t)&type metadata for ContentScrollViewBox, MEMORY[0x1E4FBBE00]);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_18834BB80;
    swift_unknownObjectWeakInit();
    swift_unknownObjectWeakInit();
    *(unsigned char *)(v1 + 72) = 0;
    swift_unknownObjectWeakAssign();
    long long v2 = v0;
    *(void *)(v1 + 48) = AGCreateWeakAttribute();
    *(void *)(v1 + 56) = AGCreateWeakAttribute();
    *(void *)(v1 + 64) = AGCreateWeakAttribute();
  }
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for [ContentScrollViewBox], (uint64_t)&type metadata for ContentScrollViewBox, MEMORY[0x1E4FBB320]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  lazy protocol witness table accessor for type EnsureNavigationStateSeeds and conformance EnsureNavigationStateSeeds();
  Rule.withObservation<A>(do:)();
  return AGGraphSetOutputValue();
}

{
  long long *Value;
  uint64_t v1;
  long long v3;
  long long v4;

  Value = (long long *)AGGraphGetValue();
  uint64_t v3 = *Value;
  char v4 = Value[1];
  EdgeInsets.xFlipIfRightToLeft(layoutDirection:)();
  if (static SemanticFeature.isEnabled.getter())
  {
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, MEMORY[0x1E4F3F9C8], MEMORY[0x1E4FBBE00]);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_18834BB80;
    *(void *)(v1 + 32) = 1;
    *(_OWORD *)(v1 + 40) = v3;
    *(_OWORD *)(v1 + 56) = v4;
  }
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  return swift_release();
}

{
  long long v1;
  uint64_t v2;

  long long v2 = *MEMORY[0x1E4F143B8];
  ScrollViewResponderSize.value.getter(&v1);
  return AGGraphSetOutputValue();
}

{
  uint64_t (*v0)(void, uint64_t);
  char v1;
  uint64_t WeakValue;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, MEMORY[0x1E4FBB718]);
  uint64_t v1 = *(unsigned char *)AGGraphGetValue();
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, v0);
  uint64_t WeakValue = AGGraphGetWeakValue();
  uint64_t v3 = 6;
  if (WeakValue)
  {
    char v4 = *(void *)(WeakValue + 8);
    if (v4 == 6) {
      uint64_t v3 = 6;
    }
    else {
      uint64_t v3 = v4;
    }
  }
  long long v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = v1;
  *(unsigned char *)(v5 + 17) = v3;
  long long v6 = swift_allocObject();
  *(void *)(v6 + 16) = partial apply for closure #1 in ToolbarRemovingModifier.SidebarToggleRemover.value.getter;
  *(void *)(v6 + 24) = v5;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;

  uint64_t v0 = *(unsigned char *)AGGraphGetValue();
  uint64_t v1 = swift_allocObject();
  *(unsigned char *)(v1 + 16) = v0;
  long long v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in PlatformItemEnabledModifier.PlatformItemListTransform.value.getter;
  *(void *)(v2 + 24) = v1;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarStorage.Entry], type metadata accessor for ToolbarStorage.Entry, MEMORY[0x1E4FBB320]);
  uint64_t v0 = *(void *)AGGraphGetValue();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = v0;
  long long v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in PreferenceTransform.value.getter;
  *(void *)(v2 + 24) = v1;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  return ScrollViewResponder.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized LazySubviewPlacements.updateValue()();
}

{
  return specialized LazySubviewPlacements.updateValue()();
}

{
  return AGGraphSetOutputValue();
}

{
  return _NavigationSplitReader.UpdateRequiredCompactColumn.updateValue()();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;

  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for ToolbarDefaultItemKind?, (uint64_t)&type metadata for ToolbarDefaultItemKind, MEMORY[0x1E4FBB718]);
  uint64_t v0 = *(unsigned char *)AGGraphGetValue();
  uint64_t v1 = swift_allocObject();
  *(unsigned char *)(v1 + 16) = v0;
  long long v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in ToolbarRemovingModifier.TitleRemover.value.getter;
  *(void *)(v2 + 24) = v1;
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  return _NavigationSplitReader.UpdatePreferredCompactColumn.updateValue()();
}

{
  return FocusStateBindingResponderFilter.updateValue()();
}

{
  void v1[6];

  v1[5] = *MEMORY[0x1E4F143B8];
  FlipForRTLTransform.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v2;

  uint64_t v0 = *(void *)AGGraphGetValue();
  swift_retain();
  outlined copy of AppIntentExecutor?(v0);
  swift_getAtKeyPath();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v0);
  swift_release();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0, &lazy cache variable for type metadata for (())?, (uint64_t (*)(uint64_t))type metadata accessor for (), MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  uint64_t v0 = *(void *)AGGraphGetValue();
  uint64_t v1 = swift_allocObject();
  *(void *)(v1 + 16) = v0;
  long long v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in UIKitSystemButtonConfigurationModifier.PlatformItemTransform.value.getter;
  *(void *)(v2 + 24) = v1;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;

  Value = AGGraphGetValue();
  uint64_t v1 = *(void *)(Value + 8);
  long long v2 = *(void *)(Value + 56);
  swift_retain();
  outlined copy of AppIntentExecutor?(v1);
  outlined copy of AppIntentExecutor?(v2);
  swift_getAtKeyPath();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v2);
  swift_release();
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, &lazy cache variable for type metadata for HStack<UIKitButtonConfiguration.Label>, (uint64_t)&type metadata for UIKitButtonConfiguration.Label, (uint64_t)&protocol witness table for UIKitButtonConfiguration.Label, MEMORY[0x1E4F415B8]);
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;

  uint64_t v0 = *(void *)(AGGraphGetValue() + 8);
  AGGraphGetValue();
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarCustomizationBehaviorKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarCustomizationBehaviorKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationBehaviorKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v0)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  return specialized PlatformItemListGenerator.updateValue()();
}

{
  return ViewResponderTransform.updateValue()();
}

{
  return ContextMenuResponderFilter.updateValue()();
}

{
  return OnChangeOfSuggestionsModifier.UpdateBinding.updateValue()();
}

{
  return MultimodalBadgeInfoProvider.updateValue()();
}

{
  return GridBadgeInfosActionBinding.updateValue()();
}

{
  type metadata accessor for CGSize(0);
  AGGraphGetValue();
  lazy protocol witness table accessor for type ScrollableItemLayoutComputer and conformance ScrollableItemLayoutComputer();
  lazy protocol witness table accessor for type ScrollableItemLayoutComputer._LayoutEngine and conformance ScrollableItemLayoutComputer._LayoutEngine();
  return StatefulRule<>.update<A>(to:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return LayoutScrollableTransform.updateValue()();
}

{
  return specialized PropertiesTransform.updateValue()();
}

{
  return specialized LazyLayoutComputer.updateValue()();
}

{
  return specialized LazySubviewPlacements.updateValue()((void (*)(_OWORD *__return_ptr))specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:), (uint64_t)partial apply for specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:), (uint64_t)&unk_1ED478658, (uint64_t)partial apply for closure #2 in LazySubviewPlacements.placeSubviews(placementContext:in:for:), (double (*)(double *, long long *, void))specialized LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:), (void (*)(uint64_t, double, double))specialized LazySubviewPlacements.logTranslation(_:reason:), dword_1ED476980, &dword_1ED476980[1], dword_1ED4769A8, &dword_1ED4769A8[1]);
}

{
  return specialized LazyLayoutComputer.updateValue()();
}

{
  return specialized LazySubviewPlacements.updateValue()((void (*)(_OWORD *__return_ptr))specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:), (uint64_t)partial apply for specialized closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:), (uint64_t)&unk_1ED478680, (uint64_t)closure #2 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)partial apply, (double (*)(double *, long long *, void))specialized LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:), (void (*)(uint64_t, double, double))specialized LazySubviewPlacements.logTranslation(_:reason:), dword_1ED4769F8, &dword_1ED4769F8[1], dword_1ED476A20, &dword_1ED476A20[1]);
}

{
  return specialized PropertiesTransform.updateValue()();
}

{
  return specialized PlatformItemsTransform.updateValue()();
}

{
  return PlatformAccessibilityEnv.updateValue()();
}

{
  return DropResponderFilter.updateValue()();
}

{
  return DragSnapshotResponderFilter.updateValue()();
}

{
  return UpdateFocusableViewResponder.updateValue()();
}

{
  return UpdateViewGeometry.updateValue()();
}

{
  return specialized PlatformItemsTransform.updateValue()();
}

{
  return EditMenuResponderFilter.updateValue()();
}

{
  return ResponderUpdater.updateValue()();
}

{
  return ScaledLayoutComputer.updateValue()();
}

{
  return DefaultFocusViewResponderFilter.updateValue()();
}

{
  return FocusSectionResponderFilter.updateValue()();
}

{
  return FocusNamespaceFilter.updateValue()();
}

{
  return FocusEventProxyResponderFilter.updateValue()();
}

{
  return DefaultFocusSectionResponderFilter.updateValue()();
}

{
  return TemporalStateDisplayList.updateValue()();
}

{
  return AllowsHitTestingFilter.updateValue()();
}

{
  return specialized PropertiesTransform.updateValue()();
}

{
  return HoverEffectResponderFilter.updateValue()();
}

{
  return specialized ScrollActionDispatcher.updateValue()();
}

{
  return specialized PropertiesTransform.updateValue()();
}

{
  return specialized PropertiesTransform.updateValue()();
}

{
  return DragReorderableChildModifier.ResponderFilter.updateValue()();
}

{
  return specialized PropertiesTransform.updateValue()();
}

{
  return specialized PlatformItemsTransform.updateValue()();
}

{
  return NavigationTitleBinder.updateValue()();
}

{
  return SpringLoadedResponderFilter.updateValue()();
}

{
  return specialized PlatformItemsTransform.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized ViewResponderFilter.updateValue()((void (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return ArchivedAccessibilityAttachment.updateValue()();
}

{
  return ArchivedLayoutComputer.updateValue()();
}

{
  return ArchivedDisplayList.updateValue()();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return ScrollViewFocusableBorder.updateValue()();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()((void (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter, (void (*)(uint64_t (*)(void), uint64_t))_sxSo6UIViewCSgRi_zRi0_zlySo8UISwitchCIsegno_SgSgWOe);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized ViewResponderFilter.updateValue()((void (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter, (void (*)(uint64_t (*)(void), uint64_t))_sxSo6UIViewCSgRi_zRi0_zlySo8UISwitchCIsegno_SgSgWOe);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()((void (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter, (void (*)(uint64_t (*)(void), uint64_t))_sxSo6UIViewCSgRi_zRi0_zlySo8UISwitchCIsegno_SgSgWOe);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized ViewResponderFilter.updateValue()((void (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter, (void (*)(uint64_t (*)(void), uint64_t))_sxSo6UIViewCSgRi_zRi0_zlySo8UISwitchCIsegno_SgSgWOe);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized ViewResponderFilter.updateValue()((void (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter);
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()();
}

{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)();
}

{
  return specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  return specialized ViewResponderFilter.updateValue()((void (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>, (uint64_t (*)(uint64_t))specialized ViewResponderFilter.preferredFocusableView.getter, (void (*)(uint64_t (*)(void), uint64_t))_sxSo6UIViewCSgRi_zRi0_zlySo8UISwitchCIsegno_SgSgWOe);
}

{
  return specialized PropertiesTransform.updateValue()();
}

{
  return MultimodalScrollGeometryState.updateValue()();
}

{
  return PlatformItemListTextFieldStyle.PlatformItemListWriter.TransformPlatformItems.updateValue()();
}

{
  return TupleEvents.updateValue()();
}

{
  return MapKitPlatformItem.Child.updateValue()();
}

{
  return specialized PlatformItemRule.updateValue()();
}

{
  return specialized PlatformItemRule.updateValue()();
}

{
  uint64_t result;
  uint64_t v1;
  uint64_t vars8;

  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    AGGraphGetValue();
    uint64_t v1 = swift_bridgeObjectRetain();
    UIKitDialogBridge.updateAlertActionsEnabled(_:)(v1);
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  uint64_t result;

  type metadata accessor for (_:)();
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    swift_retain();
    AGGraphSetOutputValue();
    return swift_release();
  }
  return result;
}

{
  return TransactionWrapper.updateValue()();
}

{
  return specialized LazyLayoutComputer.updateValue()();
}

{
  return specialized LazySubviewPlacements.updateValue()();
}

{
  return specialized LazyLayoutComputer.updateValue()();
}

{
  return specialized LazySubviewPlacements.updateValue()();
}

{
  return DocumentIntroductionSceneList.MakeList.updateValue()();
}

{
  uint64_t (*v0)(long long *);
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  uint64_t v0 = AccessibilityLargeContentViewTransform.value.getter();
  long long v2 = v1;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v0;
  *(void *)(v3 + 24) = v2;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  int *v3;
  uint64_t v4;
  char *v5;
  uint64_t Value;
  uint64_t *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  void v14[2];

  v14[1] = *MEMORY[0x1E4F143B8];
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>, (uint64_t)&type metadata for AutomaticMultiDatePickerStyle, (uint64_t)&protocol witness table for AutomaticMultiDatePickerStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for MultiDatePickerValue);
  MEMORY[0x1F4188790](v0);
  long long v2 = (char *)v14 - v1;
  uint64_t v3 = (int *)type metadata accessor for UIKitCalendarView(0);
  MEMORY[0x1F4188790](v3);
  long long v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  outlined init with copy of MultiDatePickerValue<AutomaticMultiDatePickerStyle>(Value, (uint64_t)v2, (unint64_t *)&lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>, (uint64_t)&type metadata for AutomaticMultiDatePickerStyle, (uint64_t)&protocol witness table for AutomaticMultiDatePickerStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for MultiDatePickerValue);
  _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v2, (uint64_t)v5, type metadata accessor for MultiDatePickerStyleConfiguration);
  unint64_t v7 = (uint64_t *)&v5[v3[5]];
  *unint64_t v7 = swift_getKeyPath();
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F3F4D8];
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = (uint64_t *)&v5[v3[6]];
  *uint64_t v9 = swift_getKeyPath();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], v8);
  swift_storeEnumTagMultiPayload();
  long long v10 = (uint64_t *)&v5[v3[7]];
  *long long v10 = swift_getKeyPath();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], v8);
  swift_storeEnumTagMultiPayload();
  char v11 = &v5[v3[8]];
  *(void *)char v11 = swift_getKeyPath();
  v11[8] = 0;
  uint64_t v12 = &v5[v3[9]];
  *(void *)uint64_t v12 = swift_getKeyPath();
  v12[8] = 0;
  AGGraphSetOutputValue();
  return _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v5, type metadata accessor for UIKitCalendarView);
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Value;
  void v8[2];

  v8[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = type metadata accessor for ResolvedMultiDatePicker(0);
  MEMORY[0x1F4188790](v0);
  long long v2 = (char *)v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>, (uint64_t)&type metadata for AutomaticMultiDatePickerStyle, (uint64_t)&protocol witness table for AutomaticMultiDatePickerStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for MultiDatePickerValue);
  MEMORY[0x1F4188790](v3);
  long long v5 = (char *)v8 - v4;
  Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)v2, type metadata accessor for ResolvedMultiDatePicker);
  _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v2, (uint64_t)v5, type metadata accessor for MultiDatePickerStyleConfiguration);
  AGGraphSetOutputValue();
  return outlined destroy of MultiDatePickerValue<AutomaticMultiDatePickerStyle>((uint64_t)v5);
}

{
  uint64_t v0;

  if (*(void *)(AGGraphGetValue() + 8))
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v0 = *(void *)(AGGraphGetValue() + 8);
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>, (uint64_t)&type metadata for DefaultNavigationIndicatorVisibilityKey, (uint64_t)&protocol witness table for DefaultNavigationIndicatorVisibilityKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v0)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  long long v5 = *(void *)(AGGraphGetValue() + 8);
  type metadata accessor for @Sendable ()();
  Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = *Value;
  long long v2 = Value[1];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>, (uint64_t)&type metadata for RefreshAction.Key, (uint64_t)&protocol witness table for RefreshAction.Key, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  swift_retain();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v5)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  type metadata accessor for @Sendable ()();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t Value;

  AGGraphGetValue();
  Value = AGGraphGetValue();
  if ((~*(void *)(Value + 16) & 0xFFFFFFFE) == 0 && (*(void *)(Value + 24) & 0xFEFELL) == 2)
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    swift_retain();
    swift_retain();
    EnvironmentValues.appendSymbolEffect(_:for:)();
  }
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  int v0;

  AGGraphGetValue();
  uint64_t v0 = *(unsigned __int8 *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  if (v0 == 1) {
    EnvironmentValues.symbolEffects.setter();
  }
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(unsigned char *, void);
  unsigned char v5[32];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  unint64_t v8 = *MEMORY[0x1E4F143B8];
  Value = (uint64_t *)AGGraphGetValue();
  long long v2 = *Value;
  uint64_t v1 = Value[1];
  long long v6 = v2;
  unint64_t v7 = v1;
  swift_retain();
  swift_retain();
  static SymbolVariants.fill.getter();
  uint64_t v3 = (void (*)(unsigned char *, void))EnvironmentValues.symbolVariants.modify();
  SymbolVariants.formUnion(_:)();
  v3(v5, 0);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  void v1[3];

  v1[2] = *MEMORY[0x1E4F143B8];
  UpdateDefaultTabFill.AdaptiveFillSymbols.value.getter(v1);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;

  uint64_t v0 = *(void *)(AGGraphGetValue() + 8);
  AGGraphGetValue();
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarItemIsHiddenKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarItemIsHiddenKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarItemIsHiddenKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v0)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  void *Value;
  uint64_t v1;
  unsigned __int8 v2;
  uint64_t v3;
  _OWORD v5[2];
  uint64_t v6;

  long long v6 = *MEMORY[0x1E4F143B8];
  Value = (void *)AGGraphGetValue();
  uint64_t v1 = Value[1];
  *(void *)&v5[0] = *Value;
  *((void *)&v5[0] + 1) = v1;
  long long v2 = *(unsigned char *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI10VisibilityO_s5NeverOytTg503_s7c114UI28CustomizationOptionsModifier33_D8F8B35B8E1C27D674C1EB157F00472FLLV16ChildEnvironmentV5valueAA0Q6ValuesVvgyAA10E6OXEfU_AD0X6ValuesVTf1cn_n(v2, (uint64_t)v5);
  uint64_t v3 = AGGraphGetValue();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI27ToolbarCustomizationOptionsV_s5NeverOytTB503_s7c4UI28fG107Modifier33_D8F8B35B8E1C27D674C1EB157F00472FLLV16ChildEnvironmentV5valueAA0Q6ValuesVvgyAA07ToolbarcD0VXEfU0_AD0X6ValuesVTf1cn_n(*(void *)(v3 + 8), *(unsigned char *)(v3 + 16), (uint64_t)v5);
  v5[1] = v5[0];
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  AGGraphGetValue();
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for AccessibilityLabeledContentPresentation?, (uint64_t)&type metadata for AccessibilityLabeledContentPresentation, MEMORY[0x1E4FBB718]);
  if (*(unsigned char *)AGGraphGetValue() == 2) {
    AGGraphGetValue();
  }
  return AGGraphSetOutputValue();
}

{
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, MEMORY[0x1E4FBB718]);
  AGGraphGetValue();
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  char v3;

  Value = AGGraphGetValue();
  uint64_t v1 = *(void *)Value;
  long long v2 = *(void *)(Value + 8);
  uint64_t v3 = *(unsigned char *)(Value + 16);
  AGGraphGetValue();
  outlined copy of Text.Storage(v1, v2, v3);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  Text.resolveString(in:with:idiom:)();
  outlined consume of Text.Storage(v1, v2, v3);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  long long v1;
  uint64_t v2;

  long long v2 = *MEMORY[0x1E4F143B8];
  ContentOffset.value.getter(&v1);
  return AGGraphSetOutputValue();
}

{
  uint64_t Value;
  unsigned char v2[64];
  uint64_t v3;

  uint64_t v3 = *MEMORY[0x1E4F143B8];
  Value = AGGraphGetValue();
  outlined init with copy of PlatformItem.SelectionContent(Value, (uint64_t)v2);
  AGGraphSetOutputValue();
  return outlined destroy of PlatformButtonActionTransform((uint64_t)v2);
}

{
  uint64_t v0;
  _OWORD v2[2];
  uint64_t v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  _OWORD v8[2];
  uint64_t v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  uint64_t v14;

  long long v14 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *(unsigned __int8 *)AGGraphGetValue();
  if (*(unsigned char *)AGGraphGetValue() == 1) {
    v0 |= 4uLL;
  }
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  uint64_t v3 = 0;
  memset(v2, 0, sizeof(v2));
  uint64_t v12 = 0u;
  long long v13 = 0u;
  char v11 = 0u;
  *(void *)&long long v10 = AGCreateWeakAttribute();
  *((void *)&v10 + 1) = AGCreateWeakAttribute();
  _s7SwiftUI12PlatformItemV16SelectionContentV09AuxiliaryF0OSgWOdTm_0((uint64_t)v2, (uint64_t)&v11 + 8, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent);
  char v4 = v10;
  *((void *)&v5 + 1) = *((void *)&v11 + 1);
  long long v6 = v12;
  unint64_t v7 = v13;
  *(void *)&long long v5 = v0;
  outlined assign with copy of PlatformItem.SelectionContent.AuxiliaryContent?((uint64_t)v8, (uint64_t)&v5 + 8);
  long long v10 = v4;
  char v11 = v5;
  uint64_t v12 = v6;
  long long v13 = v7;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v8, &lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent);
  AGGraphSetOutputValue();
  return outlined destroy of PlatformItem.SelectionContent((uint64_t)&v10);
}

{
  AGGraphGetValue();
  swift_retain();
  AGGraphSetOutputValue();
  return outlined consume of HoverCallback();
}

{
  ScaledDisplayList.value.getter();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t Value;
  CGFloat v1;
  uint64_t v2;
  CGAffineTransform v4;
  uint64_t v5;
  long long v6;
  long long v7;
  uint64_t v8;

  unint64_t v8 = *MEMORY[0x1E4F143B8];
  Value = AGGraphGetValue();
  long long v5 = *(void *)Value;
  long long v6 = *(_OWORD *)(Value + 8);
  unint64_t v7 = *(_OWORD *)(Value + 24);
  uint64_t v1 = 1.0 / *(double *)AGGraphGetValue();
  *(_OWORD *)&v4.a = *(_OWORD *)AGGraphGetValue();
  long long v2 = swift_retain();
  MEMORY[0x18C10C240](v2);
  ViewTransform.appendPosition(_:scale:)();
  CGAffineTransformMakeScale(&v4, v1, v1);
  ViewTransform.appendAffineTransform(_:inverse:)(&v4, 0);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  void (*v0)(long long *, void);
  float64x2_t *v1;
  double v3;
  long long v4;
  long long v5;
  uint64_t v6;

  long long v6 = *MEMORY[0x1E4F143B8];
  char v4 = *(_OWORD *)AGGraphGetValue();
  uint64_t v3 = 1.0 / *(double *)AGGraphGetValue();
  uint64_t v0 = (void (*)(long long *, void))ViewOrigin.value.modify();
  *uint64_t v1 = vmulq_n_f64(*v1, v3);
  v0(&v5, 0);
  long long v5 = v4;
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  EnvironmentValues.pixelLength.getter();
  AGGraphGetValue();
  EnvironmentValues.defaultPixelLength.setter();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v6;

  uint64_t v0 = *(void *)(AGGraphGetValue() + 8);
  uint64_t v1 = *(void *)AGGraphGetValue();
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>, (uint64_t)&type metadata for FocusScopesKey, (uint64_t)&protocol witness table for FocusScopesKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v0)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  long long v2 = (char *)v6;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    long long v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1, (char *)v6);
  }
  char v4 = *((void *)v2 + 2);
  uint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    long long v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  *(void *)&v2[8 * v4 + 32] = v1;
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>, (uint64_t)&type metadata for FocusScopesKey, (uint64_t)&protocol witness table for FocusScopesKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  if (v0)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;
  _OWORD v4[7];
  uint64_t v5;
  uint64_t v6;

  long long v6 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)AGGraphGetValue() == 1)
  {
    long long v5 = 0;
    memset(v4, 0, sizeof(v4));
  }
  else
  {
    Value = AGGraphGetValue();
    outlined init with copy of DragReorderableChildModifier(Value, (uint64_t)&v2);
    outlined init with take of _DraggingModifier?((uint64_t)&v3, (uint64_t)v4, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  }
  outlined init with take of _DraggingModifier?((uint64_t)v4, (uint64_t)&v2, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  AGGraphSetOutputValue();
  return outlined destroy of ConditionalDraggingModifier((uint64_t)&v2);
}

{
  uint64_t Value;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  _OWORD v5[3];
  uint64_t v6;
  long long v7;
  long long v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x1E4F143B8];
  Value = AGGraphGetValue();
  long long v6 = *(void *)Value;
  unint64_t v7 = *(_OWORD *)(Value + 8);
  unint64_t v8 = *(_OWORD *)(Value + 24);
  v5[0] = *(_OWORD *)AGGraphGetValue();
  uint64_t v1 = swift_retain();
  *(double *)&long long v2 = MEMORY[0x18C10C240](v1);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v3, v2));
  lazy protocol witness table accessor for type ReorderableChildCoordinateSpace and conformance ReorderableChildCoordinateSpace();
  AnyHashable.init<A>(_:)();
  ViewTransform.appendCoordinateSpace(name:)();
  outlined destroy of AnyHashable((uint64_t)v5);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t Value;
  uint64_t v2;
  uint64_t v3;
  _OWORD v4[7];
  uint64_t v5;
  uint64_t v6;

  long long v6 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)AGGraphGetValue() == 1)
  {
    Value = AGGraphGetValue();
    outlined init with copy of DragReorderableChildModifier(Value, (uint64_t)&v2);
    outlined init with take of _DraggingModifier?((uint64_t)&v3, (uint64_t)v4, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  }
  else
  {
    long long v5 = 0;
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of _DraggingModifier?((uint64_t)v4, (uint64_t)&v2, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
  AGGraphSetOutputValue();
  return outlined destroy of ConditionalDraggingModifier((uint64_t)&v2);
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  EnvironmentValues.accessibilityEnabled.setter();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  UnaryScrollablePreferenceProvider.value.getter();
  type metadata accessor for [Scrollable]();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  AGGraphGetValue();
  _s7SwiftUI32PlatformViewRepresentableAdaptor33_19642D833A8FE469B137699ED1426762LLVyAA19UIKitRichTextEditorVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, ScrollViewGesture>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_GeometryGroupEffect, ScrollViewGeometry>, _CoordinateSpaceModifier<ObjectIdentifier>>, _ContentShapeModifier<Rectangle>>, (uint64_t)&type metadata for ScrollViewGesture, MEMORY[0x1E4F3FBA0]);
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;

  uint64_t v0 = *(void *)(AGGraphGetValue() + 8);
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollViewKey>, (uint64_t)&type metadata for ScrollViewKey, (uint64_t)&protocol witness table for ScrollViewKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollViewKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v0)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  int *v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t Value;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  void v12[2];

  v12[1] = *MEMORY[0x1E4F143B8];
  uint64_t v0 = (int *)type metadata accessor for InterpolatableArchiveContent(0);
  MEMORY[0x1F4188790](v0);
  long long v2 = (void *)((char *)v12 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v3 = type metadata accessor for _ArchivedView(0);
  Value = AGGraphGetValue();
  long long v5 = *(void *)(Value + 32);
  long long v6 = Value + *(int *)(v3 + 24);
  unint64_t v7 = (char *)v2 + v0[5];
  unint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v7, v6, v8);
  uint64_t v9 = *(void *)(AGGraphGetValue() + *(int *)(v3 + 28)) != 0;
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, MEMORY[0x1E4FBB320]);
  long long v10 = *(void *)AGGraphGetValue();
  *long long v2 = v5;
  *((unsigned char *)v2 + v0[6]) = v9;
  *(void *)((char *)v2 + v0[7]) = v10;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  return _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v2, type metadata accessor for InterpolatableArchiveContent);
}

{
  specialized DisplayList.HostedViews.Preference.value.getter();
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, MEMORY[0x1E4FBB320]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  _OWORD *v0;
  long long v1;
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  uint64_t v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  _OWORD v32[2];
  _OWORD v33[6];
  _OWORD v34[2];
  _OWORD v35[6];
  _OWORD v36[2];
  uint64_t v37;

  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *(_OWORD **)AGGraphGetValue();
  swift_beginAccess();
  uint64_t v1 = v0[1];
  long long v2 = v0[2];
  uint64_t v3 = v0[4];
  v33[2] = v0[3];
  v33[3] = v3;
  char v4 = v0[5];
  long long v5 = v0[6];
  long long v6 = v0[7];
  *(_OWORD *)((char *)v34 + 12) = *(_OWORD *)((char *)v0 + 124);
  unint64_t v7 = *(_OWORD *)((char *)v34 + 12);
  v33[5] = v5;
  v34[0] = v6;
  v33[4] = v4;
  v33[0] = v1;
  v33[1] = v2;
  unint64_t v8 = v0[1];
  uint64_t v9 = v0[2];
  long long v10 = v0[4];
  uint64_t v28 = v0[3];
  char v29 = v10;
  id v26 = v8;
  uint64_t v27 = v9;
  char v11 = v0[5];
  uint64_t v12 = v0[6];
  long long v13 = v0[7];
  *(_OWORD *)((char *)v32 + 12) = v7;
  v32[0] = v13;
  uint64_t v30 = v11;
  uint64_t v31 = v12;
  swift_retain();
  outlined retain of DisplayList.HostedViewState((uint64_t)v33);
  DisplayList.HostedViewState.splicedDisplayList()((uint64_t)&v25);
  long long v14 = v0[5];
  CGSize v15 = v0[6];
  long long v16 = v0[7];
  *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)((char *)v0 + 124);
  v36[0] = v16;
  long long v17 = v0[1];
  long long v18 = v0[2];
  long long v19 = v0[4];
  _OWORD v35[2] = v0[3];
  v35[3] = v19;
  v35[4] = v14;
  v35[5] = v15;
  v35[0] = v17;
  v35[1] = v18;
  long long v20 = v27;
  v0[1] = v26;
  v0[2] = v20;
  long long v21 = v29;
  v0[3] = v28;
  v0[4] = v21;
  uint64_t v22 = v31;
  v0[5] = v30;
  v0[6] = v22;
  char v23 = v32[0];
  *(_OWORD *)((char *)v0 + 124) = *(_OWORD *)((char *)v32 + 12);
  v0[7] = v23;
  outlined release of DisplayList.HostedViewState((uint64_t)v35);
  swift_release();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  ScrollGeometryTransformProvider.value.getter();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t Value;

  type metadata accessor for _ContiguousArrayStorage<Scrollable>();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_18834BB80;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, v0 + 32);
  type metadata accessor for [Scrollable]();
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t Value;
  _OWORD v2[4];
  uint64_t v3;
  uint64_t v4;

  char v4 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)AGGraphGetValue())
  {
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, MEMORY[0x1E4FBB718]);
    Value = AGGraphGetValue();
    _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(Value, (uint64_t)v2, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior);
  }
  else
  {
    uint64_t v3 = 0;
    memset(v2, 0, sizeof(v2));
  }
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v2, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior);
}

{
  uint64_t v0;
  unsigned char v2[216];
  void v3[2];
  int v4;
  unsigned char v5[232];
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  long long v13 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = *(void *)(AGGraphGetValue() + 16);
  if (*(void *)(v0 + 16))
  {
    outlined init with copy of PlatformItem(v0 + 32, (uint64_t)v3);
  }
  else
  {
    _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)v2);
    *(_OWORD *)&v5[216] = 0u;
    long long v6 = 0u;
    unint64_t v7 = 0u;
    unint64_t v8 = xmmword_18834FC50;
    v3[0] = &outlined read-only object #0 of specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
    v3[1] = 0;
    char v4 = 0;
    outlined init with take of _DraggingModifier?((uint64_t)v2, (uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent);
    uint64_t v9 = 0;
    long long v10 = 1;
    uint64_t v12 = 0;
    char v11 = 0;
  }
  AGGraphSetOutputValue();
  return outlined destroy of PlatformItem((uint64_t)v3);
}

{
  uint64_t v0;

  uint64_t v0 = type metadata accessor for BridgedListState(0);
  if (*(unsigned char *)(AGGraphGetValue() + *(int *)(v0 + 24) + 112)) {
    static ScrollGeometry.zero.getter();
  }
  return AGGraphSetOutputValue();
}

{
  uint64_t v1[3];

  v1[2] = *MEMORY[0x1E4F143B8];
  AccessibilityCollectionViewTableAttachment.value.getter(v1);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  _NavigationStackStyleConfiguration.Item.Child.value.getter();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  unsigned char v1[240];
  uint64_t v2;

  long long v2 = *MEMORY[0x1E4F143B8];
  ResolvedDocumentGroupsIntroRootView.MakeRepresentable.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return outlined destroy of CustomizableDocumentViewControllerRepresentable((uint64_t)v1);
}

{
  uint64_t v1;
  uint64_t v2;

  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, &lazy cache variable for type metadata for PreferenceValueAttribute<ToolbarKey>, (uint64_t)&type metadata for ToolbarKey, (uint64_t)&protocol witness table for ToolbarKey, MEMORY[0x1E4F40DB8]);
  PreferenceValueAttribute.value.getter();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1[3];

  v1[2] = *MEMORY[0x1E4F143B8];
  AccessibilityLabeledContentLabelModifier.Attachment.value.getter(v1);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t v0;
  char v1;
  uint64_t v3;
  uint64_t v4;
  char v5;

  uint64_t v3 = AccessibilityArchivableAttachmentModifier.ArchivableTransform.value.getter();
  char v4 = v0;
  long long v5 = v1 & 1;
  AGGraphSetOutputValue();
  outlined consume of Environment<AppIntentExecutor?>.Content(v3, v4, v5);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;

  if (AGGraphGetWeakValue())
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    Dictionary.init(minimumCapacity:)();
  }
  AccessibilityAttachment.init(properties:)();
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = v2;
  *(void *)(v0 + 24) = v3;
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  void v1[6];

  v1[5] = *MEMORY[0x1E4F143B8];
  MultimodalScrollGeometryTransformProvider.value.getter((uint64_t)v1);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  AGGraphGetValue();
  _s7SwiftUI19SimultaneousGestureVyAA022TransformBasedRotationD033_BE4F31EA7CD17BEECFB3DECC6C6E6203LLVAA05TouchfgD0AELLVGMaTm_0(0, &lazy cache variable for type metadata for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value, MEMORY[0x1E4F404D8]);
  type metadata accessor for RotateGesture.Value();
  MapGesture.init(_:)();
  type metadata accessor for ModifierGesture<CategoryGesture<RotateGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>>();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  Value = (uint64_t *)AGGraphGetValue();
  long long v2 = *Value;
  uint64_t v1 = Value[1];
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  char v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for closure #1 in _HoverRegionModifier.HoverBehavior.value.getter;
  *(void *)(v4 + 24) = v3;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void v5[3];
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  unint64_t v8 = *MEMORY[0x1E4F143B8];
  Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value + 16, (uint64_t)v5);
  uint64_t v1 = v6;
  long long v2 = v7;
  __swift_project_boxed_opaque_existential_1(v5, v6);
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  v5[0] = v3;
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Value;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void v24[2];

  v24[1] = *MEMORY[0x1E4F143B8];
  type metadata accessor for Binding<AttributedString>();
  MEMORY[0x1F4188790](v0 - 8);
  long long v2 = (char *)v24 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for TokenFieldConfiguration(0);
  MEMORY[0x1F4188790](v3);
  long long v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  unint64_t v8 = (char *)v24 - v7;
  type metadata accessor for SearchFieldConfiguration.Data?(0);
  MEMORY[0x1F4188790](v9);
  char v11 = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)v8, type metadata accessor for TokenFieldConfiguration);
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0((uint64_t)v8, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v8, type metadata accessor for TokenFieldConfiguration);
  long long v13 = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(v13, (uint64_t)v5, type metadata accessor for TokenFieldConfiguration);
  long long v14 = &v5[*(int *)(v3 + 24)];
  CGSize v15 = *((void *)v14 + 3);
  if (!v15) {
    __break(1u);
  }
  long long v17 = *(void *)v14;
  long long v16 = *((void *)v14 + 1);
  long long v18 = *((_DWORD *)v14 + 4) & 1;
  outlined copy of Text.Storage(*(void *)v14, v16, v18);
  swift_bridgeObjectRetain();
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v5, type metadata accessor for TokenFieldConfiguration);
  long long v19 = AGCreateWeakAttribute();
  _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
  long long v20 = type metadata accessor for SearchFieldConfiguration.Data(0);
  long long v21 = &v11[*(int *)(v20 + 20)];
  *(void *)long long v21 = v17;
  *((void *)v21 + 1) = v16;
  v21[16] = v18;
  *((void *)v21 + 3) = v15;
  uint64_t v22 = &v11[*(int *)(v20 + 24)];
  *(void *)uint64_t v22 = v19;
  v22[8] = 0;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v11, 0, 1, v20);
  AGGraphSetOutputValue();
  return _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SearchFieldConfiguration.Data?);
}

{
  AGGraphGetValue();
  type metadata accessor for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value(0, (unint64_t *)&lazy cache variable for type metadata for SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>.Value, MEMORY[0x1E4F404D8]);
  type metadata accessor for MagnifyGesture.Value();
  MapGesture.init(_:)();
  type metadata accessor for ModifierGesture<CategoryGesture<MagnifyGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedMagnifyGesture, TouchBasedMagnifyGesture>, MagnifyGesture.Value>>();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  AGGraphGetValue();
  return AGGraphSetOutputValue();
}

{
  uint64_t (*v0)(void, uint64_t);
  uint64_t v1;

  uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3F5F8];
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for GesturePhase<PrimitiveButtonGestureCore.Value>, (uint64_t)&type metadata for PrimitiveButtonGestureCore.Value, MEMORY[0x1E4F3F5F8]);
  AGGraphGetValue();
  uint64_t v1 = MEMORY[0x1E4FBC848] + 8;
  GesturePhase.withValue<A>(_:)();
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<()>, v1, v0);
  return AGGraphSetOutputValue();
}

{
  void v1[4];

  v1[3] = *MEMORY[0x1E4F143B8];
  SpatialTapGesture.Phase.value.getter((uint64_t)v1);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for GesturePhase<SpatialTapGesture.Value>, (uint64_t)&type metadata for SpatialTapGesture.Value, MEMORY[0x1E4F3F5F8]);
  return AGGraphSetOutputValue();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void v6[2];

  v6[1] = *MEMORY[0x1E4F143B8];
  type metadata accessor for <<opaque return type of Gesture.requiredTapCount(_:)>>.0(0, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.requiredTapCount(_:)>>.0, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>, &lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TappableSpatialEvent>, ModifierGesture<RepeatGesture<TappableSpatialEvent>, SingleTapGesture<TappableSpatialEvent>>>);
  uint64_t v1 = v0;
  long long v2 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  char v4 = (char *)v6 - v3;
  SpatialTapGesture.Child.value.getter();
  AGGraphSetOutputValue();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

{
  type metadata accessor for (_:)();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;

  if (*(unsigned char *)AGGraphGetValue())
  {
    static Semantics.v6.getter();
    uint64_t v0 = isLinkedOnOrAfter(_:)();
  }
  else
  {
    uint64_t v0 = (*(unsigned char *)AGGraphGetValue() & 0xFE) != 6;
  }
  uint64_t v1 = swift_allocObject();
  *(unsigned char *)(v1 + 16) = v0 & 1;
  long long v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in IsSearchImplementedModifier.IsSearchImplemented.value.getter;
  *(void *)(v2 + 24) = v1;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t v0;
  uint64_t v2;

  if (AGGraphGetWeakValue()) {
    uint64_t v0 = swift_bridgeObjectRetain();
  }
  else {
    uint64_t v0 = 1;
  }
  long long v2 = v0;
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for WidgetAuxiliaryTextImagePreference?, (uint64_t)&type metadata for WidgetAuxiliaryTextImagePreference, MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return outlined consume of WidgetAuxiliaryTextImagePreference?(v2);
}

{
  uint64_t *Value;
  _OWORD *v1;
  double (*v2)(uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  double (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)();
  uint64_t v28;
  __int16 v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD v41[14];
  uint64_t v42;

  char v42 = *MEMORY[0x1E4F143B8];
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, MEMORY[0x1E4FBB718]);
  Value = (uint64_t *)AGGraphGetValue();
  uint64_t v1 = (_OWORD *)Value[3];
  long long v2 = (double (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  if (v1)
  {
    uint64_t v3 = Value[12];
    char v4 = Value[13];
    long long v6 = Value[10];
    long long v5 = Value[11];
    unint64_t v7 = Value[9];
    uint64_t v25 = Value[7];
    id v26 = Value[8];
    char v23 = Value[5];
    BOOL v24 = Value[6];
    uint64_t v22 = Value[4];
    uint64_t v9 = Value[1];
    unint64_t v8 = Value[2];
    long long v10 = *Value;
    AGGraphGetValue();
    LOWORD(v27) = v10 & 0x101;
    uint64_t v28 = v9;
    char v29 = v8 & 0x1FF;
    uint64_t v30 = v1;
    uint64_t v31 = v22;
    uint64_t v32 = v23;
    uint64_t v33 = v24;
    uint64_t v34 = v25;
    uint64_t v35 = v26;
    uint64_t v36 = v7;
    uint64_t v37 = v6;
    uint64_t v38 = v5;
    uint64_t v39 = v3;
    char v40 = v4;
    outlined copy of SwipeActions.Configuration?(v10, v9, v8, (uint64_t)v1, v22, v23, v24, v25, v26, v7, v6, v5, v3);
    char v11 = swift_bridgeObjectRetain();
    SwipeActions.Value.init(itemList:configuration:)(v11, (unsigned __int8 *)&v27, v41);
    uint64_t v1 = (_OWORD *)swift_allocObject();
    uint64_t v12 = v41[11];
    v1[11] = v41[10];
    v1[12] = v12;
    long long v13 = v41[13];
    v1[13] = v41[12];
    v1[14] = v13;
    long long v14 = v41[7];
    v1[7] = v41[6];
    v1[8] = v14;
    CGSize v15 = v41[9];
    v1[9] = v41[8];
    v1[10] = v15;
    long long v16 = v41[3];
    v1[3] = v41[2];
    v1[4] = v16;
    long long v17 = v41[5];
    v1[5] = v41[4];
    v1[6] = v17;
    long long v18 = v41[1];
    v1[1] = v41[0];
    v1[2] = v18;
    long long v2 = partial apply for closure #2 in SwipeActions.MakeValueTransform.value.getter;
  }
  long long v19 = v2;
  long long v20 = swift_allocObject();
  *(void *)(v20 + 16) = v19;
  *(void *)(v20 + 24) = v1;
  uint64_t v27 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ();
  uint64_t v28 = v20;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t *Value;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  uint64_t v50;

  long long v50 = *MEMORY[0x1E4F143B8];
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for SwipeActions.Configuration?, (uint64_t)&type metadata for SwipeActions.Configuration, MEMORY[0x1E4FBB718]);
  Value = (uint64_t *)AGGraphGetValue();
  long long v2 = *Value;
  uint64_t v1 = Value[1];
  uint64_t v3 = Value[2];
  char v4 = Value[3];
  long long v6 = Value[4];
  long long v5 = Value[5];
  unint64_t v8 = Value[6];
  unint64_t v7 = Value[7];
  uint64_t v9 = Value[8];
  long long v10 = Value[9];
  char v11 = Value[10];
  uint64_t v12 = Value[11];
  long long v13 = Value[12];
  long long v14 = Value[13];
  if (v4)
  {
    long long v20 = Value[8];
    long long v21 = Value[7];
    long long v18 = *((_OWORD *)Value + 2);
    long long v19 = Value[6];
    CGSize v15 = Value[9];
    AGGraphGetValue();
    LOWORD(v22) = v2 & 0x101;
    *((void *)&v22 + 1) = v1;
    LOWORD(v23) = v3 & 0x1FF;
    *((void *)&v23 + 1) = v4;
    BOOL v24 = v18;
    LOBYTE(v25) = v19;
    *((void *)&v25 + 1) = v21;
    *(void *)&id v26 = v20;
    *((void *)&v26 + 1) = v15;
    *(void *)&uint64_t v27 = v11;
    *((void *)&v27 + 1) = v12;
    *(void *)&uint64_t v28 = v13;
    *((void *)&v28 + 1) = v14;
    outlined copy of SwipeActions.Configuration?(v2, v1, v3, v4, v18, *((uint64_t *)&v18 + 1), v19, v21, v20, v15, v11, v12, v13);
    long long v16 = swift_bridgeObjectRetain();
    SwipeActions.Value.init(itemList:configuration:)(v16, (unsigned __int8 *)&v22, &v36);
  }
  else
  {
    *(void *)&uint64_t v36 = *Value;
    *((void *)&v36 + 1) = v1;
    uint64_t v37 = (unint64_t)v3;
    *(void *)&uint64_t v38 = v6;
    *((void *)&v38 + 1) = v5;
    *(void *)&uint64_t v39 = v8;
    *((void *)&v39 + 1) = v7;
    *(void *)&char v40 = v9;
    *((void *)&v40 + 1) = v10;
    *(void *)&int v41 = v11;
    *((void *)&v41 + 1) = v12;
    *(void *)&char v42 = v13;
    *((void *)&v42 + 1) = v14;
    *(void *)&char v43 = v2;
    *((void *)&v43 + 1) = v1;
    char v44 = (unint64_t)v3;
    *(void *)&char v45 = v6;
    *((void *)&v45 + 1) = v5;
    *(void *)&long long v46 = v8;
    *((void *)&v46 + 1) = v7;
    *(void *)&long long v47 = v9;
    *((void *)&v47 + 1) = v10;
    *(void *)&uint64_t v48 = v11;
    *((void *)&v48 + 1) = v12;
    *(void *)&uint64_t v49 = v13;
    *((void *)&v49 + 1) = v14;
  }
  AGGraphSetOutputValue();
  uint64_t v32 = v46;
  uint64_t v33 = v47;
  uint64_t v34 = v48;
  uint64_t v35 = v49;
  uint64_t v28 = v42;
  char v29 = v43;
  uint64_t v30 = v44;
  uint64_t v31 = v45;
  BOOL v24 = v38;
  uint64_t v25 = v39;
  id v26 = v40;
  uint64_t v27 = v41;
  uint64_t v22 = v36;
  char v23 = v37;
  return outlined release of SwipeActions.Value((uint64_t)&v22);
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t Value;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  _UNKNOWN **v14;
  int v15;
  unsigned char v16[64];
  uint64_t v17;

  long long v17 = *MEMORY[0x1E4F143B8];
  Value = AGGraphGetValue();
  uint64_t v1 = *(_DWORD *)Value;
  long long v2 = *(unsigned char *)(Value + 4);
  uint64_t v3 = *(void *)(Value + 8);
  char v4 = *(void *)(Value + 16);
  long long v5 = *(void *)(Value + 24);
  swift_weakInit();
  CGSize v15 = 0;
  unint64_t v7 = v1;
  unint64_t v8 = v2;
  uint64_t v9 = v3;
  long long v10 = v4;
  char v11 = v5;
  uint64_t v12 = 0;
  long long v14 = &protocol witness table for FocusableViewResponder;
  swift_weakAssign();
  long long v13 = 0;
  outlined init with take of FocusItem((uint64_t)&v7, (uint64_t)v16);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718]);
  swift_retain();
  AGGraphSetOutputValue();
  return _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v16, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem);
}

uint64_t __swift_memcpy12_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t initializeWithCopy for AccessibilityTextLayoutProperties(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(unsigned char *)(a1 + 27) = *(unsigned char *)(a2 + 27);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for PopoverAttachmentAnchor()
{
  return &type metadata for PopoverAttachmentAnchor;
}

id protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _ContentShapeModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(long long *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  return static _ContentShapeModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t type metadata accessor for CGDrawingLayer()
{
  return self;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance EnableLazyStackLogging()
{
  return static EnableLazyStackLogging.cachedValue;
}

void partial apply for specialized closure #1 in PlatformViewChild.updateValue()()
{
  specialized closure #1 in PlatformViewChild.updateValue()(*(long long **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(long long **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(long long **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(long long **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(long long **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(long long **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(long long **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(long long **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(long long **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(long long **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(long long **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(long long **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(long long **)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16));
}

{
  uint64_t v0;

  specialized closure #1 in PlatformViewChild.updateValue()(*(void *)(v0 + 16));
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.FileDialogCustomizationIDKey(void *a1, void *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a2[1];
  uint64_t result = (v4 | v5) == 0;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    if (*a1 == *a2 && v4 == v5) {
      return 1;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance ListRowInsetsKey()
{
  return static EdgeInsets.== infix(_:_:)();
}

uint64_t ModifiedContent<>.accessibilityAddTraits(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ModifiedContent<>.accessibilityAddTraits(_:)(a1, a2, MEMORY[0x1E4F41170], a3);
}

void partial apply for closure #1 in _UIHostingView.HostViewGraph.modifyViewInputs(inputs:graph:)()
{
  closure #1 in _UIHostingView.HostViewGraph.modifyViewInputs(inputs:graph:)(*(void **)(v0 + 16), *(id *)(v0 + 24));
}

uint64_t @objc closure #2 in closure #1 in _UIHostingView.rootTransform()()
{
  return @objc closure #1 in closure #1 in _UIHostingView.rootTransform()();
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance IdentityLink()
{
  return specialized static IdentityLink._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

ValueMetadata *type metadata accessor for ButtonBorderShape()
{
  return &type metadata for ButtonBorderShape;
}

void protocol witness for PlatformDrawable.options.getter in conformance CGDrawingView(void *a1@<X2>, uint64_t a2@<X8>)
{
  long long v3 = (char *)(v2 + *a1);
  char v4 = *v3;
  int v5 = *((_DWORD *)v3 + 1);
  char v6 = v3[8];
  int v7 = *((_DWORD *)v3 + 3);
  LOBYTE(v3) = v3[16];
  *(unsigned char *)a2 = v4;
  *(_DWORD *)(a2 + 4) = v5;
  *(unsigned char *)(a2 + 8) = v6;
  *(_DWORD *)(a2 + 12) = v7;
  *(unsigned char *)(a2 + 16) = (_BYTE)v3;
}

uint64_t partial apply for closure #1 in static _AccessibilityIgnoresInvertColorsViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2)
{
  return closure #1 in static _AccessibilityIgnoresInvertColorsViewModifier._makeView(modifier:inputs:body:)(a1, a2, *(unsigned int *)(v2 + 16), *(void (**)(uint64_t, uint64_t *))(v2 + 24));
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance InsetGroupedListStyleContext(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext();

  return specialized static ListStyleContext.accepts<A>(_:at:)(a4, a3);
}

unint64_t lazy protocol witness table accessor for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext()
{
  unint64_t result = lazy protocol witness table cache variable for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext;
  if (!lazy protocol witness table cache variable for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext;
  if (!lazy protocol witness table cache variable for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetGroupedListStyleContext and conformance InsetGroupedListStyleContext);
  }
  return result;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance OptionalViewAlias<A>()
{
  return specialized static OptionalViewAlias._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

uint64_t storeEnumTagSinglePayload for ResolvedNavigationDestinations(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CapsuleSlider.ScrollState.Orientation(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

void LongPressGesture.init(minimumDuration:maximumDistance:)(double *a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  *a1 = a2;
  a1[1] = a3;
}

_UNKNOWN **base witness table accessor for ViewModifier in KeyboardShortcutBindingBehavior<A>()
{
  return &protocol witness table for KeyboardShortcutBindingBehavior<A>;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1)
{
  if (*(unsigned char *)a1 == 2 && *(_DWORD *)(a1 + 4) != *MEMORY[0x1E4F4E7A0])
  {
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Axis?, MEMORY[0x1E4F41338], MEMORY[0x1E4FBB718]);
    AGGraphGetValue();
  }
  return AGGraphSetOutputValue();
}

{
  double v1;
  double v2;
  double v3;
  double v4;

  if (*(_DWORD *)(a1 + 4) != *MEMORY[0x1E4F4E7A0])
  {
    AGGraphGetValue();
    uint64_t v1 = MEMORY[0x18C114450]();
    ContainerRelativeFrameModifier.MakeLayout.resolvedLength(axis:size:)(0, v1, v2);
    int v3 = MEMORY[0x18C114450]();
    ContainerRelativeFrameModifier.MakeLayout.resolvedLength(axis:size:)(1, v3, v4);
  }
  AGGraphGetValue();
  _FrameLayout.init(width:height:alignment:)();
  return AGGraphSetOutputValue();
}

{
  ScrollViewDisplayListFrame.value.getter(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16));
  type metadata accessor for CGRect(0);
  return AGGraphSetOutputValue();
}

{
  unsigned char v2[16];
  unsigned char v3[16];
  uint64_t v4;

  int v4 = *MEMORY[0x1E4F143B8];
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(a1, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t)v3);
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4[3];

  v4[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 8);
  int v2 = *(void *)AGGraphGetValue();
  v4[0] = v1;
  v4[1] = v2;
  swift_bridgeObjectRetain();
  PreferenceKeys.removeHiddenKeys(allowing:)(v4);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  _NavigationSplitReader.CustomParameters.value.getter(*(void *)a1, *(_DWORD *)(a1 + 8));
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v2[6];

  v2[5] = *MEMORY[0x1E4F143B8];
  ScrollableProvider.value.getter(*(void *)(a1 + 8), *(_DWORD *)(a1 + 16), v2);
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  AGGraphSetOutputValue();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char v5;
  void v7[2];
  char v8;
  uint64_t v9;

  uint64_t v9 = *MEMORY[0x1E4F143B8];
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  MEMORY[0x1F4188790](v2);
  int v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v5 = *(unsigned char *)(a1 + 8);
  v7[1] = *(void *)a1;
  int v8 = v5;
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, &lazy cache variable for type metadata for PreferenceValueAttribute<SearchKey>, (uint64_t)&type metadata for SearchKey, (uint64_t)&protocol witness table for SearchKey, MEMORY[0x1E4F40DB8]);
  PreferenceValueAttribute.value.getter();
  AGGraphSetOutputValue();
  return _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
}

{
  uint64_t result;

  lazy protocol witness table accessor for type EmptyTuplePhase and conformance EmptyTuplePhase();
  unint64_t result = ResettableGestureRule.resetIfNeeded()();
  if (result)
  {
    if ((*(unsigned char *)(a1 + 8) & 1) == 0)
    {
      type metadata accessor for [EventID : EventType]();
      if (*(void *)(*(void *)AGGraphGetValue() + 16)) {
        *(unsigned char *)(a1 + 8) = 1;
      }
    }
    type metadata accessor for External<UInt32>(0, (unint64_t *)&lazy cache variable for type metadata for GesturePhase<EmptyTuple>, (uint64_t)&type metadata for EmptyTuple, MEMORY[0x1E4F3F5F8]);
    return AGGraphSetOutputValue();
  }
  return result;
}

{
  char *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 4) == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v1 = (char *)MEMORY[0x1E4FBC860];
    int v2 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (!v2) {
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v1 = *(char **)AGGraphGetValue();
    swift_bridgeObjectRetain();
    int v2 = *((void *)v1 + 2);
    if (!v2) {
      goto LABEL_10;
    }
  }
  int v3 = 0;
  int v4 = 289;
  do
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
    }
    if (v3 >= *((void *)v1 + 2)) {
      __break(1u);
    }
    ++v3;
    v1[v4] = *(unsigned char *)AGGraphGetValue();
    v4 += 280;
  }
  while (v2 != v3);
LABEL_10:
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  void *v1;
  unsigned char v3[8];
  unsigned char v4[8];
  unsigned char v5[16];
  uint64_t v6;

  unsigned int v6 = *MEMORY[0x1E4F143B8];
  outlined init with copy of BridgedPopUpButtonProvider(a1, (uint64_t)v4);
  uint64_t v1 = (void *)MEMORY[0x18C119DF0](v4);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();

  _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v3, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>);
  v5[8] = 0;
  outlined destroy of BridgedPopUpButtonProvider((uint64_t)v4);
  type metadata accessor for WeakBox<UIButton>?(0);
  AGGraphSetOutputValue();
  return _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  void v10[2];

  v10[1] = *MEMORY[0x1E4F143B8];
  type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>(0);
  MEMORY[0x1F4188790](v2);
  int v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(a1 + 9)) {
    int v5 = 256;
  }
  else {
    int v5 = 0;
  }
  unsigned int v6 = v5 | *(unsigned __int8 *)(a1 + 8);
  if (*(unsigned char *)(a1 + 10)) {
    BOOL v7 = 0x10000;
  }
  else {
    BOOL v7 = 0;
  }
  if (*(unsigned char *)(a1 + 11)) {
    int v8 = 0x1000000;
  }
  else {
    int v8 = 0;
  }
  UIKitSystemButtonConfigurationModifier.MakePlatformAdaptor.value.getter(*(void *)a1, v6 | v7 | v8, (uint64_t)v4);
  AGGraphSetOutputValue();
  return _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for ModifiedContent<UIKitButtonAdaptor<PlatformItemContent>, AccessibilityAttachmentModifier>);
}

{
  unsigned char v2[16];
  unsigned char v3[16];
  uint64_t v4;

  int v4 = *MEMORY[0x1E4F143B8];
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(a1, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t)v3);
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
}

{
  unsigned char v2[32];
  void v3[3];

  v3[2] = *MEMORY[0x1E4F143B8];
  outlined init with copy of ReplacedRootDismissModifier.ChildEnvironment(a1, (uint64_t)v2);
  ReplacedRootDismissModifier.ChildEnvironment.value.getter(v3);
  outlined destroy of ReplacedRootDismissModifier.ChildEnvironment((uint64_t)v2);
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  int v1;

  uint64_t v1 = *(_DWORD *)(a1 + 4);
  AGCreateWeakAttribute();
  if (v1 != *MEMORY[0x1E4F4E7A0]) {
    AGCreateWeakAttribute();
  }
  return AGGraphSetOutputValue();
}

{
  uint64_t v1;
  int v2;
  uint64_t v3;

  uint64_t v1 = *(void *)a1;
  int v2 = *(_DWORD *)(a1 + 8);
  int v3 = *(void *)(a1 + 16);
  swift_retain();
  ContentSize.value.getter(v1, v2, v3);
  swift_release();
  return AGGraphSetOutputValue();
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t Value;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  long long v13;
  uint64_t v14;

  long long v14 = *MEMORY[0x1E4F143B8];
  int v2 = type metadata accessor for SystemTextFieldConfiguration(0);
  MEMORY[0x1F4188790](v2);
  int v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v5 = type metadata accessor for ResolvedSystemTextField(0);
  MEMORY[0x1F4188790](v5);
  BOOL v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  long long v13 = *(_OWORD *)(a1 + 4);
  uint64_t v9 = *(void *)(a1 + 20);
  long long v10 = *(void *)(a1 + 28);
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)v4, type metadata accessor for SystemTextFieldConfiguration);
  *(void *)BOOL v7 = swift_getKeyPath();
  v7[8] = 0;
  _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v4, (uint64_t)&v7[*(int *)(v5 + 20)], type metadata accessor for SystemTextFieldConfiguration);
  char v11 = &v7[*(int *)(v5 + 24)];
  *(_OWORD *)char v11 = v13;
  *((void *)v11 + 2) = v9;
  *((void *)v11 + 3) = v10;
  AGGraphSetOutputValue();
  return _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v7, type metadata accessor for ResolvedSystemTextField);
}

{
  unsigned char v2[16];
  unsigned char v3[16];
  uint64_t v4;

  int v4 = *MEMORY[0x1E4F143B8];
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(a1, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t)v3);
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
}

{
  unsigned char v2[16];
  unsigned char v3[16];
  uint64_t v4;

  int v4 = *MEMORY[0x1E4F143B8];
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(a1, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t)v3);
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t Value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  long long v22;
  uint64_t v23;

  char v23 = *MEMORY[0x1E4F143B8];
  int v2 = type metadata accessor for TextEditorStyleConfiguration(0);
  MEMORY[0x1F4188790](v2);
  int v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v5 = (int *)type metadata accessor for UIKitTextViewAdaptor(0);
  MEMORY[0x1F4188790](v5);
  BOOL v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  long long v10 = (char *)&v22 - v9;
  char v11 = *(unsigned char *)(a1 + 4);
  Value = AGGraphGetValue();
  uint64_t v22 = *(_OWORD *)(a1 + 8);
  long long v13 = *(void *)(a1 + 24);
  long long v14 = *(void *)(a1 + 32);
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)v4, type metadata accessor for TextEditorStyleConfiguration);
  *(void *)BOOL v7 = swift_getKeyPath();
  v7[8] = 0;
  CGSize v15 = (uint64_t)&v7[v5[6]];
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v15, 1, 1, v16);
  long long v17 = *((void *)v4 + 2);
  long long v18 = *((void *)v4 + 3);
  *((_OWORD *)v7 + 1) = *(_OWORD *)v4;
  *((void *)v7 + 4) = v17;
  *((void *)v7 + 5) = v18;
  long long v19 = (uint64_t)&v4[*(int *)(v2 + 20)];
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0(v15, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>?);
  _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0(v19, v15, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>?);
  long long v20 = &v7[v5[7]];
  *(_OWORD *)long long v20 = v22;
  *((void *)v20 + 2) = v13;
  *((void *)v20 + 3) = v14;
  v7[v5[8]] = v11;
  _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v7, (uint64_t)v10, type metadata accessor for UIKitTextViewAdaptor);
  AGGraphSetOutputValue();
  return _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v10, type metadata accessor for UIKitTextViewAdaptor);
}

{
  unsigned char v2[16];
  unsigned char v3[16];
  uint64_t v4;

  int v4 = *MEMORY[0x1E4F143B8];
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(a1, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>>);
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t)v3);
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<KitRepresentable>>);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
}

{
  unsigned char v2[16];
  unsigned char v3[16];
  uint64_t v4;

  int v4 = *MEMORY[0x1E4F143B8];
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(a1, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t)v3);
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
}

{
  unsigned char v2[16];
  unsigned char v3[16];
  uint64_t v4;

  int v4 = *MEMORY[0x1E4F143B8];
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(a1, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>, (uint64_t)v3);
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
}

{
  unsigned char v2[16];
  unsigned char v3[16];
  uint64_t v4;

  int v4 = *MEMORY[0x1E4F143B8];
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(a1, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t)v3);
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
}

{
  unsigned char v2[16];
  unsigned char v3[16];
  uint64_t v4;

  int v4 = *MEMORY[0x1E4F143B8];
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(a1, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
  specialized RemoteSheetContainerVCWriter.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t)v3);
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
}

{
  uint64_t View;
  uint64_t v3;
  unsigned char *v4;
  unsigned char v7[176];
  uint64_t v8;

  int v8 = *MEMORY[0x1E4F143B8];
  View = type metadata accessor for DisplayList.HostedViewState.FetchView(0);
  MEMORY[0x1F4188790](View - 8);
  int v4 = &v7[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(a1, (uint64_t)v4, type metadata accessor for DisplayList.HostedViewState.FetchView);
  DisplayList.HostedViewState.FetchView.value.getter((uint64_t)v7);
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v4, type metadata accessor for DisplayList.HostedViewState.FetchView);
  AGGraphSetOutputValue();
  return outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v7);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  long long v7;
  double v8;
  uint64_t Value;
  uint64_t v10;
  char v11;
  char v12;
  long long v13;
  long long v14;
  long long v16;
  double v17;
  long long v18;
  long long v19;
  char v20;
  long long v21;
  uint64_t v22;

  uint64_t v22 = *MEMORY[0x1E4F143B8];
  type metadata accessor for <<opaque return type of Gesture.requiredTapCount(_:)>>.0(0, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.requiredTapCount(_:)>>.0, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>, &lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>);
  int v3 = v2;
  int v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unsigned int v6 = (char *)&v16 - v5;
  *(void *)&BOOL v7 = *(void *)a1;
  long long v16 = v7;
  long long v17 = *(double *)&v7;
  long long v18 = *(_OWORD *)(a1 + 8);
  int v8 = PrimitiveButtonGesture.Child.effectiveOutset.getter();
  Value = AGGraphGetValue();
  long long v10 = *(void *)(Value + 40);
  char v11 = *(unsigned char *)(Value + 48);
  uint64_t v12 = *(unsigned char *)(Value + 16);
  long long v13 = *(_OWORD *)(Value + 24);
  long long v14 = *(_OWORD *)Value;
  long long v17 = v8;
  *(void *)&long long v18 = v10;
  BYTE8(v18) = v11;
  long long v19 = v14;
  long long v20 = v12;
  long long v21 = v13;
  type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>();
  _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PrimitiveButtonGestureCallbacks>, PrimitiveButtonGestureCore>);
  Gesture.requiredTapCount(_:)();
  AGGraphSetOutputValue();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

{
  char v2;
  uint64_t v3;
  uint64_t v4;

  int v2 = *(unsigned char *)(a1 + 8);
  int v3 = swift_allocObject();
  *(void *)(v3 + 16) = *(void *)a1;
  *(unsigned char *)(v3 + 24) = v2;
  int v4 = swift_allocObject();
  *(void *)(v4 + 16) = partial apply for closure #1 in NavigationBarDefaults.DefaultNavigationBarVisibility.value.getter;
  *(void *)(v4 + 24) = v3;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:), (void (*)(uint64_t))type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration]);
  AGGraphSetOutputValue();
  return swift_release();
}

{
  if (__OFSUB__(*(void *)(a1 + 8), 1)) {
    __break(1u);
  }
  AGGraphGetValue();
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<ListDisclosureGroupIndentationTraitKey>, (uint64_t)&type metadata for ListDisclosureGroupIndentationTraitKey, (uint64_t)&protocol witness table for ListDisclosureGroupIndentationTraitKey, MEMORY[0x1E4F408B8]);
  return AGGraphSetOutputValue();
}

{
  uint64_t v1;

  uint64_t v1 = 0x100000000;
  if (!*(unsigned char *)(a1 + 12)) {
    uint64_t v1 = 0;
  }
  FocusableBoundsTransform.value.getter(*(void *)a1, v1 | *(unsigned int *)(a1 + 8));
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for [FocusableBounds], (uint64_t)&type metadata for FocusableBounds, MEMORY[0x1E4FBB320]);
  AGGraphSetOutputValue();
  return swift_bridgeObjectRelease();
}

{
  void (*v1)(void *__return_ptr, uint64_t *);
  uint64_t Value;
  int v3;
  uint64_t v5;
  int v6;
  void v7[3];

  v7[2] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void (**)(void *__return_ptr, uint64_t *))(a1 + 8);
  Value = AGGraphGetValue();
  int v3 = *(_DWORD *)(Value + 8);
  int v5 = *(void *)Value;
  unsigned int v6 = v3;
  swift_retain();
  swift_retain();
  v1(v7, &v5);
  swift_release();
  swift_release();
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for _ScrollViewProxy?, (uint64_t)&type metadata for _ScrollViewProxy, MEMORY[0x1E4FBB718]);
  AGGraphSetOutputValue();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey>, (uint64_t)&type metadata for DefaultNavigationIndicatorVisibilityKey, (uint64_t)&protocol witness table for DefaultNavigationIndicatorVisibilityKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultNavigationIndicatorVisibilityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.scrollProperties : EnvironmentValues(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t _AccessibilityIgnoresInvertColorsViewModifier.ChildModifier.value.getter()
{
  if (*(void *)(AGGraphGetValue() + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  AGGraphGetValue();
  char v0 = EnvironmentValues.accessibilityInvertColors.getter();
  char v1 = 0;
  if (v0) {
    char v1 = v3 ^ *(unsigned char *)AGGraphGetValue();
  }
  return v1 & 1;
}

void type metadata accessor for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>);
    }
  }
}

void type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>, (uint64_t)&type metadata for IgnoreInvertColorsFilterActiveKey, (uint64_t)&protocol witness table for IgnoreInvertColorsFilterActiveKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined assign with take of PlatformItem.SelectionContent.AuxiliaryContent?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for External<UInt32>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI12PlatformItemV16SelectionContentV09AuxiliaryF0OSgWOdTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t static UIViewControllerRepresentable._makeView(view:inputs:)@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  long long v3 = a1[3];
  long long v24 = a1[2];
  long long v25 = v3;
  long long v26 = a1[4];
  int v27 = *((_DWORD *)a1 + 20);
  long long v4 = a1[1];
  long long v22 = *a1;
  long long v23 = v4;
  v28[0] = v22;
  v28[1] = v4;
  v28[2] = v24;
  outlined retain of _GraphInputs((uint64_t)v28);
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)v28);
  if (v16 == 1)
  {
    _StringGuts.grow(_:)(119);
    v5._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 0xD000000000000075;
    v6._object = (void *)0x8000000188336960;
    String.append(_:)(v6);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    _ViewOutputs.init()();
    *(void *)&long long v16 = v25;
    DWORD2(v16) = DWORD2(v25);
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      _DisplayList_Identity.init()();
      LODWORD(v13) = v16;
      _ViewInputs.pushIdentity(_:)();
      long long v18 = v24;
      long long v19 = v25;
      long long v20 = v26;
      int v21 = v27;
      long long v17 = v23;
      DWORD1(v16) = _ViewInputs.animatedPosition()();
      DWORD2(v16) = _ViewInputs.animatedSize()();
      HIDWORD(v16) = _ViewInputs.containerPosition.getter();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type UnsupportedDisplayList and conformance UnsupportedDisplayList();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v16) = 0;
      uint64_t result = _ViewOutputs.subscript.setter();
    }
    goto LABEL_7;
  }
  static Semantics.v4.getter();
  if (isLinkedOnOrAfter(_:)() & 1) == 0 || (AGTypeID.isValueType.getter())
  {
    uint64_t v8 = type metadata accessor for PlatformViewControllerRepresentableAdaptor();
    type metadata accessor for _GraphValue();
    _GraphValue.unsafeBitCast<A>(to:)();
    long long v18 = v24;
    long long v19 = v25;
    long long v20 = v26;
    int v21 = v27;
    long long v16 = v22;
    long long v17 = v23;
    uint64_t WitnessTable = swift_getWitnessTable();
    static PlatformViewRepresentable._makeView(view:inputs:)((unsigned int *)&v13, (uint64_t)&v16, v8, WitnessTable, v15);
    *(void *)&long long v16 = v25;
    DWORD2(v16) = DWORD2(v25);
    uint64_t v13 = v25;
    int v14 = DWORD2(v25);
    MEMORY[0x1F4188790](v10);
    outlined retain of [Text.Modifier]((uint64_t)&v16);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    uint64_t result = swift_bridgeObjectRelease();
LABEL_7:
    *a2 = v15[0];
    a2[1] = v15[1];
    return result;
  }
  _StringGuts.grow(_:)(54);
  v11._object = (void *)0x8000000188336920;
  v11._countAndFlagsBits = 0xD000000000000034;
  String.append(_:)(v11);
  v12._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PlatformViewControllerRepresentableAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t key path getter for EnvironmentValues.onScrollToTopGesture : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.onScrollToTopGesture.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t EnvironmentValues.onScrollToTopGesture.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t specialized static ResetScrollEnvironmentModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  AGGraphCreateOffsetAttribute2();
  AGGraphGetValue();
  int v31 = 257;
  int v36 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  memset(v35, 0, sizeof(v35));
  __int16 v37 = 1;
  char v38 = 0;
  uint64_t v39 = 0;
  __int16 v40 = 0;
  char v41 = 0;
  uint64_t v42 = 0;
  __int16 v43 = 0;
  static EdgeInsets.zero.getter();
  uint64_t v44 = v3;
  uint64_t v45 = v4;
  uint64_t v46 = v5;
  uint64_t v47 = v6;
  static EdgeInsets.zero.getter();
  uint64_t v48 = v7;
  uint64_t v49 = v8;
  uint64_t v50 = v9;
  uint64_t v51 = v10;
  if ((Axis.Set.contains(_:)() & 1) == 0)
  {
    if (*(void *)(a2 + 8))
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    char v11 = v25;
    uint64_t v12 = v26;
    __int16 v13 = v27;
    outlined destroy of ScrollEnvironmentProperties((uint64_t)&v22);
    char v38 = v11;
    uint64_t v39 = v12;
    __int16 v40 = v13;
  }
  if ((Axis.Set.contains(_:)() & 1) == 0)
  {
    if (*(void *)(a2 + 8))
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    char v14 = v28;
    uint64_t v15 = v29;
    __int16 v16 = v30;
    outlined destroy of ScrollEnvironmentProperties((uint64_t)&v22);
    char v41 = v14;
    uint64_t v42 = v15;
    __int16 v43 = v16;
  }
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)&v31, (uint64_t)&v22);
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)&v22, (uint64_t)&v19);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(a2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ScrollEnvironmentProperties((uint64_t)&v22);
  ScrollAnchorStorage.init()();
  uint64_t v19 = v22;
  long long v20 = v23;
  char v21 = v24;
  EnvironmentValues.scrollAnchors.setter();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey>);
  uint64_t v22 = 0;
  *(void *)&long long v23 = 0;
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  uint64_t v17 = *(void *)(a2 + 8);
  if (v17)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  uint64_t v22 = 0;
  LOWORD(v23) = 0;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollContentBackgroundKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v17)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  LOBYTE(v22) = 2;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v17)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)&v31);
}

uint64_t destroy for NavigationDestinationModifier.SeededResolver()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_popoverAutomaticallyDismissesWhenScrolledOutOfView> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TransformScrollIndicators and conformance TransformScrollIndicators()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformScrollIndicators and conformance TransformScrollIndicators;
  if (!lazy protocol witness table cache variable for type TransformScrollIndicators and conformance TransformScrollIndicators)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformScrollIndicators and conformance TransformScrollIndicators);
  }
  return result;
}

uint64_t ScrollBehaviorModifier.ScrollBehaviorProvider.updateValue()(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(v1 + 12) + 1;
  *(_DWORD *)(v1 + 12) = v2;
  long long v13 = *(_OWORD *)(a1 + 16);
  uint64_t v11 = v13;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(boxed_opaque_existential_1, Value, v11);
  unint64_t v5 = AGCreateWeakAttribute();
  int v6 = v5;
  unint64_t v7 = HIDWORD(v5);
  unint64_t v8 = AGCreateWeakAttribute();
  LODWORD(boxed_opaque_existential_1) = v8;
  unint64_t v9 = HIDWORD(v8);
  outlined init with take of OptionalBinaryInteger(&v12, (uint64_t)v14);
  int v15 = v2;
  __int16 v16 = 256;
  int v17 = v6;
  int v18 = v7;
  int v19 = (int)boxed_opaque_existential_1;
  int v20 = v9;
  uint64_t v21 = 0;
  AGGraphSetOutputValue();
  return outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v14);
}

uint64_t initializeWithCopy for ResolvedScrollBehavior(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t specialized static TransformScrollIndicators.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t Value = AGGraphGetValue();
  char v4 = *(unsigned char *)Value;
  uint64_t v5 = *(void *)(Value + 8);
  if (Axis.Set.contains(_:)())
  {
    uint64_t v6 = *(void *)(a2 + 8);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v6)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v12[96] = v4;
    outlined init with copy of ScrollEnvironmentProperties((uint64_t)v12, (uint64_t)v11);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v6)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined destroy of ScrollEnvironmentProperties((uint64_t)v12);
    uint64_t v7 = *(void *)(a2 + 8);
    swift_retain_n();
    if (v7)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    uint64_t v13 = v5;
    outlined init with copy of ScrollEnvironmentProperties((uint64_t)v12, (uint64_t)v11);
    swift_retain();
    PropertyList.subscript.setter();
    if (v7)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined destroy of ScrollEnvironmentProperties((uint64_t)v12);
  }
  uint64_t result = Axis.Set.contains(_:)();
  if (result)
  {
    uint64_t v9 = *(void *)(a2 + 8);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v9)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    char v14 = v4;
    outlined init with copy of ScrollEnvironmentProperties((uint64_t)v12, (uint64_t)v11);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v9)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined destroy of ScrollEnvironmentProperties((uint64_t)v12);
    uint64_t v10 = *(void *)(a2 + 8);
    swift_retain_n();
    if (v10)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    uint64_t v15 = v5;
    outlined init with copy of ScrollEnvironmentProperties((uint64_t)v12, (uint64_t)v11);
    swift_retain();
    PropertyList.subscript.setter();
    if (v10)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    return outlined destroy of ScrollEnvironmentProperties((uint64_t)v12);
  }
  return result;
}

uint64_t outlined destroy of ScrollEnvironmentProperties(uint64_t a1)
{
  return a1;
}

uint64_t destroy for _NavigationTransitionStyleOutputs(uint64_t result)
{
  if (*(void *)(result + 32)) {
    return __swift_destroy_boxed_opaque_existential_1(result + 8);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined init with copy of ScrollEnvironmentProperties(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for ScrollEnvironmentProperties(uint64_t a1, int *a2)
{
  int v5 = *a2;
  char v4 = a2 + 2;
  *(_DWORD *)a1 = v5;
  uint64_t v6 = a1 + 8;
  uint64_t v7 = *((void *)a2 + 4);
  if (v7)
  {
    uint64_t v8 = *((void *)a2 + 5);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v8;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(v6, (uint64_t)v4);
    *(_DWORD *)(a1 + 48) = a2[12];
    *(_WORD *)(a1 + 52) = *((_WORD *)a2 + 26);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 14);
    *(void *)(a1 + 72) = *((void *)a2 + 9);
  }
  else
  {
    long long v9 = *((_OWORD *)v4 + 3);
    *(_OWORD *)(v6 + 32) = *((_OWORD *)v4 + 2);
    *(_OWORD *)(v6 + 48) = v9;
    *(void *)(v6 + 64) = *((void *)v4 + 8);
    long long v10 = *((_OWORD *)v4 + 1);
    *(_OWORD *)uint64_t v6 = *(_OWORD *)v4;
    *(_OWORD *)(v6 + 16) = v10;
  }
  *(unsigned char *)(a1 + 80) = *((unsigned char *)a2 + 80);
  *(unsigned char *)(a1 + 81) = *((unsigned char *)a2 + 81);
  *(unsigned char *)(a1 + 82) = *((unsigned char *)a2 + 82);
  *(_DWORD *)(a1 + 84) = a2[21];
  *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 56);
  *(_WORD *)(a1 + 136) = *((_WORD *)a2 + 68);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 30);
  long long v11 = *((_OWORD *)a2 + 10);
  *(_OWORD *)(a1 + 144) = *((_OWORD *)a2 + 9);
  *(_OWORD *)(a1 + 160) = v11;
  long long v12 = *((_OWORD *)a2 + 12);
  *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
  *(_OWORD *)(a1 + 192) = v12;
  return a1;
}

BOOL specialized static ResolvedScrollBehavior.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a1 + 40);
  int v5 = *(_DWORD *)(a2 + 40);
  outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v29);
  outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v28);
  if (v4 != v5)
  {
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v28);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v29);
    goto LABEL_6;
  }
  int v6 = v29[44];
  char v7 = v29[45];
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v29);
  int v8 = v28[44];
  char v9 = v28[45];
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v28);
  if (v7)
  {
    if (v9)
    {
      outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v27);
      outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v26);
      goto LABEL_15;
    }
LABEL_6:
    outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v27);
    outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v26);
    goto LABEL_7;
  }
  if (v9) {
    goto LABEL_6;
  }
  outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v27);
  outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v26);
  if (v6 != v8) {
    goto LABEL_7;
  }
LABEL_15:
  int Attribute = AGWeakAttributeGetAttribute();
  int v13 = *MEMORY[0x1E4F4E7A0];
  int v14 = AGWeakAttributeGetAttribute();
  int v15 = v14;
  if (Attribute == v13)
  {
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v26);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v27);
    if (v15 == v13)
    {
      outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v25);
      outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v24);
      goto LABEL_20;
    }
LABEL_8:
    outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v25);
    outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v24);
    goto LABEL_9;
  }
  if (v14 == v13)
  {
LABEL_7:
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v26);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v27);
    goto LABEL_8;
  }
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v26);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v27);
  outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v25);
  outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v24);
  if (Attribute != v15) {
    goto LABEL_9;
  }
LABEL_20:
  int v16 = AGWeakAttributeGetAttribute();
  int v17 = AGWeakAttributeGetAttribute();
  int v18 = v17;
  if (v16 == v13)
  {
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v24);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v25);
    if (v18 == v13)
    {
      outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v23);
      outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v22);
      goto LABEL_25;
    }
    goto LABEL_10;
  }
  if (v17 == v13)
  {
LABEL_9:
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v24);
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v25);
LABEL_10:
    outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v23);
    outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v22);
LABEL_11:
    BOOL v10 = 0;
    goto LABEL_12;
  }
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v24);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v25);
  outlined init with copy of ResolvedScrollBehavior(a1, (uint64_t)v23);
  outlined init with copy of ResolvedScrollBehavior(a2, (uint64_t)v22);
  if (v16 != v18) {
    goto LABEL_11;
  }
LABEL_25:
  int v19 = AGWeakAttributeGetAttribute();
  int v20 = AGWeakAttributeGetAttribute();
  BOOL v10 = v20 == v13;
  if (v19 != v13) {
    BOOL v10 = v19 == v20 && v20 != v13;
  }
LABEL_12:
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v22);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v23);
  return v10;
}

uint64_t outlined destroy of AccessibilityRelationshipScope.Key(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of ResolvedScrollBehavior(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 24) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a2, a1);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 40);
  *(_WORD *)(a2 + 44) = *(_WORD *)(a1 + 44);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  return a2;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t objectdestroy_144Tm()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ScrollIndicatorsFlashModifier() - 8) + 80);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + ((v2 + 32) & ~v2), v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t PagingScrollView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v20 = *(void *)(a1 + 16);
  type metadata accessor for ModifiedContent();
  uint64_t v19 = *(void *)(a1 + 24);
  uint64_t v39 = v19;
  __int16 v40 = &protocol witness table for ScrollTargetModifier;
  uint64_t v21 = MEMORY[0x1E4F3FBC0];
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for SystemScrollViewContainer();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  char v7 = (char *)&v19 - v6;
  type metadata accessor for ScrollBehaviorModifier<PagingScrollViewBehavior>(255, &lazy cache variable for type metadata for ScrollBehaviorModifier<PagingScrollViewBehavior>, (uint64_t)&unk_1ED442C90, (uint64_t)&protocol witness table for PagingScrollViewBehavior, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ScrollBehaviorModifier);
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  long long v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  int v14 = (char *)&v19 - v13;
  char v28 = 1 << v2[1];
  char v29 = 1;
  long long v30 = 0u;
  long long v31 = 0u;
  char v32 = 2;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  swift_unknownObjectWeakInit();
  uint64_t v38 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v23 = v20;
  uint64_t v24 = v19;
  char v25 = v2;
  SystemScrollViewContainer.init(configuration:content:)((uint64_t)&v28, partial apply for closure #1 in PagingScrollView.body.getter, (uint64_t)v7);
  char v15 = *v2;
  char v28 = v2[1];
  char v29 = v15;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.scrollTargetBehavior<A>(_:)((uint64_t)&v28, v4, (uint64_t)&unk_1ED442C90, WitnessTable);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v26 = WitnessTable;
  __int16 v27 = &protocol witness table for ScrollBehaviorModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  int v17 = *(void (**)(char *, uint64_t))(v9 + 8);
  v17(v11, v8);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v17)(v14, v8);
}

uint64_t View.scrollTargetBehavior<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for ScrollBehaviorModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  char v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t static ScrollBehaviorModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t *a6@<X8>)
{
  void (*v39)(unint64_t *__return_ptr, uint64_t, unint64_t *);
  unint64_t *v40;
  unint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  long long v48;
  long long v49;
  long long v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  long long v56;
  long long v57;
  long long v58;
  uint64_t v59;
  int v60;
  uint64_t v61;

  uint64_t v38 = a4;
  uint64_t v39 = a3;
  __int16 v40 = a6;
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  int v7 = *a1;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  int v12 = *(_DWORD *)(a2 + 80);
  long long v53 = *(void *)a2;
  uint64_t v54 = v8;
  uint64_t v56 = *(_OWORD *)(a2 + 24);
  char v55 = v9;
  *(void *)&uint64_t v57 = v10;
  *((void *)&v57 + 1) = v11;
  uint64_t v58 = *(_OWORD *)(a2 + 56);
  uint64_t v59 = *(void *)(a2 + 72);
  uint64_t v60 = v12;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  LODWORD(v44) = v7;
  type metadata accessor for ScrollBehaviorModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(a5 - 8) + 64)) {
    closure #1 in static ScrollBehaviorModifier._makeView(modifier:inputs:body:)(1, a5);
  }
  uint64_t OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v14 = *MEMORY[0x1E4F4E7A0];
  uint64_t v44 = __PAIR64__(*MEMORY[0x1E4F4E7A0], OffsetAttribute2);
  uint64_t v45 = v14;
  uint64_t v46 = 0;
  MEMORY[0x1F4188790](OffsetAttribute2);
  uint64_t v34 = type metadata accessor for ScrollBehaviorModifier.ScrollBehaviorProvider();
  uint64_t WitnessTable = swift_getWitnessTable();
  char v15 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F4E740];
  type metadata accessor for Attribute<ResolvedScrollBehavior>(0, &lazy cache variable for type metadata for Attribute<ResolvedScrollBehavior>, (uint64_t)&type metadata for ResolvedScrollBehavior, MEMORY[0x1E4F4E740]);
  uint64_t v16 = MEMORY[0x1E4FBC248];
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v44, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_3, (uint64_t)v33, v34, MEMORY[0x1E4FBC248], v17, MEMORY[0x1E4FBC278], v18);
  unsigned int v19 = v41;
  uint64_t v44 = v53;
  uint64_t v45 = v54;
  uint64_t v47 = v55;
  uint64_t v48 = v56;
  uint64_t v49 = v57;
  uint64_t v50 = v58;
  uint64_t v51 = v59;
  long long v52 = v60;
  uint64_t v20 = _ViewInputs.environment.getter();
  uint64_t v44 = __PAIR64__(v19, v20);
  unsigned int v37 = v19;
  MEMORY[0x1F4188790](v20);
  uint64_t v36 = v21;
  uint64_t v22 = type metadata accessor for ScrollBehaviorModifier.ChildEnvironment();
  uint64_t v34 = v22;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<ResolvedScrollBehavior>(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<EnvironmentValues>, MEMORY[0x1E4F40140], v15);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v44, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v33, v22, v16, v23, MEMORY[0x1E4FBC278], v24);
  _ViewInputs.environment.setter();
  uint64_t v44 = v53;
  uint64_t v45 = v54;
  uint64_t v47 = v55;
  uint64_t v48 = v56;
  uint64_t v49 = v57;
  uint64_t v50 = v58;
  uint64_t v51 = v59;
  long long v52 = v60;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = swift_bridgeObjectRetain();
  v39(&v41, v25, &v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v26 = v41;
  int v27 = v42;
  int v28 = v43;
  uint64_t v44 = v41;
  uint64_t v45 = v42;
  uint64_t v46 = v43;
  uint64_t v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) == 0)
  {
    MEMORY[0x1F4188790](v29);
    v33[0] = a5;
    v33[1] = v36;
    LOBYTE(v34) = 0;
    HIDWORD(v34) = v30;
    LOBYTE(WitnessTable) = 1;
    HIDWORD(WitnessTable) = v30;
    MEMORY[0x1F4188790](v30);
    AGGraphMutateAttribute();
  }
  long long v31 = v40;
  *__int16 v40 = v26;
  *((_DWORD *)v31 + 2) = v27;
  *((_DWORD *)v31 + 3) = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t ViewAlignedScrollTargetBehavior._updateEnvironment(_:context:)(uint64_t a1)
{
  if (*v1 - 1 >= 2)
  {
    if (*v1)
    {
      uint64_t v2 = *(void *)(a1 + 8);
      type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
      lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      if (v2)
      {
        swift_retain_n();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        PropertyList.subscript.getter();
      }
      swift_release_n();
      char v3 = 4;
    }
    else
    {
      uint64_t v2 = *(void *)(a1 + 8);
      type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
      lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain_n();
      if (v2)
      {
        swift_retain_n();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        PropertyList.subscript.getter();
      }
      swift_release_n();
      char v3 = 1;
    }
    char v7 = v3;
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 8);
    type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v2)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    char v7 = 2;
  }
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)v6, (uint64_t)&v5);
  type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

uint64_t ScrollBehaviorModifier.ChildEnvironment.value.getter@<X0>(void *a1@<X8>)
{
  ScrollBehaviorModifier.ChildEnvironment.environment.getter(&v11);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of ResolvedScrollBehavior(Value, (uint64_t)&v8);
  uint64_t v3 = v9[3];
  __swift_project_boxed_opaque_existential_1(&v8, v9[2]);
  (*(void (**)(uint64_t *))(v3 + 24))(&v11);
  outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)&v8);
  uint64_t v4 = AGGraphGetValue();
  outlined init with copy of ResolvedScrollBehavior(v4, (uint64_t)v10);
  if (v12)
  {
    type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  outlined assign with take of ResolvedScrollBehavior?((uint64_t)v10, (uint64_t)v9);
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)&v8, (uint64_t)v7);
  type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  uint64_t v5 = v12;
  if (v12)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v5 = v12;
  }
  else
  {
    swift_release();
  }
  uint64_t result = outlined destroy of ScrollEnvironmentProperties((uint64_t)&v8);
  *a1 = v11;
  a1[1] = v5;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    }
  }
}

uint64_t ScrollBehaviorModifier.ChildEnvironment.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

uint64_t outlined assign with take of ResolvedScrollBehavior?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Attribute<ResolvedScrollBehavior>(0, &lazy cache variable for type metadata for ResolvedScrollBehavior?, (uint64_t)&type metadata for ResolvedScrollBehavior, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Attribute<ResolvedScrollBehavior>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t protocol witness for ScrollTargetBehavior._updateEnvironment(_:context:) in conformance PagingScrollViewBehavior(uint64_t a1, uint64_t a2)
{
  return PagingScrollViewBehavior._updateEnvironment(_:context:)(a1, a2, *v2 | (unsigned __int16)(v2[1] << 8));
}

uint64_t PagingScrollViewBehavior._updateEnvironment(_:context:)(uint64_t a1, uint64_t a2, __int16 a3)
{
  if (HIBYTE(a3))
  {
    if (HIBYTE(a3) == 1)
    {
      char v6 = 3;
      uint64_t v4 = &v6;
    }
    else
    {
      char v7 = 2;
      uint64_t v4 = &v7;
    }
  }
  else
  {
    char v8 = 4;
    uint64_t v4 = &v8;
  }
  return specialized PagingScrollViewBehavior.updateDeceleration(_:env:)(v4, a1);
}

uint64_t specialized PagingScrollViewBehavior.updateDeceleration(_:env:)(char *a1, uint64_t a2)
{
  char v2 = *a1;
  uint64_t v3 = *(void *)(a2 + 8);
  type metadata accessor for ScrollBehaviorModifier<PagingScrollViewBehavior>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  unsigned char v6[80] = v2;
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)v6, (uint64_t)&v5);
  type metadata accessor for ScrollBehaviorModifier<PagingScrollViewBehavior>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
}

void type metadata accessor for ScrollBehaviorModifier<PagingScrollViewBehavior>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t closure #1 in static ScrollBehaviorModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  v7[2] = type metadata accessor for ScrollBehaviorModifier();
  v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t type metadata accessor for ScrollBehaviorModifier.ChildEnvironment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SystemScrollViewContainer.init(configuration:content:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  return a2();
}

uint64_t partial apply for closure #1 in PagingScrollView.body.getter()
{
  return closure #1 in PagingScrollView.body.getter(v0[4], v0[2], v0[3]);
}

uint64_t closure #1 in PagingScrollView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v14 - v10;
  type metadata accessor for PagingScrollView();
  View.scrollTargetLayout(isEnabled:)(1, a2, a3);
  v14[0] = a3;
  v14[1] = &protocol witness table for ScrollTargetModifier;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, v5);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v12)(v11, v5);
}

uint64_t View.scrollTargetLayout(isEnabled:)(char a1, uint64_t a2, uint64_t a3)
{
  if (a1) {
    char v3 = 0;
  }
  else {
    char v3 = 2;
  }
  char v5 = v3;
  return MEMORY[0x18C113660](&v5, a2, &type metadata for ScrollTargetModifier, a3);
}

uint64_t *assignWithTake for LinearProgressViewStyle(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Color?>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = a1[2];
  uint64_t v10 = *((unsigned __int8 *)a1 + 24);
  a1[2] = a2[2];
  *((unsigned char *)a1 + 24) = v8;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  a1[4] = a2[4];
  swift_release();
  return a1;
}

uint64_t CustomHoverEffectModifier.body(content:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v53 = a3;
  uint64_t v45 = *((void *)a2 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v11);
  double v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = *(void *)(v14 + 24);
  uint64_t v15 = type metadata accessor for CustomHoverEffectPrimitiveViewModifier();
  uint64_t v50 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v40 - v16;
  swift_getWitnessTable();
  uint64_t v46 = type metadata accessor for _ViewModifier_Content();
  uint64_t v51 = v15;
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v49 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v22 = MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v40 - v23;
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  uint64_t v48 = v13;
  uint64_t v52 = v9;
  uint64_t v26 = v9;
  uint64_t v27 = v45;
  v25(v13, v4, v26, v22);
  uint64_t v44 = Namespace.wrappedValue.getter();
  uint64_t v28 = a2[13];
  int v43 = *(unsigned __int8 *)(v4 + a2[12]);
  uint64_t v42 = *(void *)(v4 + v28);
  LODWORD(v28) = *(unsigned __int8 *)(v4 + v28 + 8);
  uint64_t v29 = (uint64_t *)(v4 + a2[14]);
  uint64_t v30 = *v29;
  int v40 = *((unsigned __int8 *)v29 + 8);
  int v41 = v28;
  LODWORD(v10) = *(unsigned __int8 *)(v4 + a2[9]);
  (*(void (**)(char *, uint64_t, int *))(v27 + 16))(v7, v4, a2);
  if (v10 == 1) {
    char v31 = UIKitButtonStyleModifier.ResolvedBody.isEnabled.getter((uint64_t)a2);
  }
  else {
    char v31 = 0;
  }
  (*(void (**)(char *, int *))(v27 + 8))(v7, a2);
  char v32 = *(unsigned char *)(v4 + a2[15]);
  CustomHoverEffectModifier.hoverEffectState.getter((uint64_t)a2, &v56);
  char v33 = v56;
  uint64_t v56 = v44;
  char v57 = v43;
  uint64_t v58 = v42;
  char v59 = v41;
  uint64_t v60 = v30;
  char v61 = v40;
  char v62 = v31 & 1;
  char v63 = v32;
  char v64 = v33;
  CustomHoverEffectPrimitiveViewModifier.init(effect:options:)((uint64_t)v48, &v56, v52, (uint64_t)v17);
  uint64_t v34 = v46;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v36 = v34;
  uint64_t v37 = v51;
  MEMORY[0x18C113660](v17, v36, v51, WitnessTable);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v17, v37);
  uint64_t v54 = WitnessTable;
  char v55 = &protocol witness table for CustomHoverEffectPrimitiveViewModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v20);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v49 + 8);
  v38(v20, v18);
  static ViewBuilder.buildExpression<A>(_:)(v24);
  return ((uint64_t (*)(char *, uint64_t))v38)(v24, v18);
}

uint64_t destroy for LinearProgressViewStyle(uint64_t a1)
{
  outlined consume of Environment<Color?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));

  return swift_release();
}

uint64_t destroy for PlatformItemListButtonStyle(uint64_t a1)
{
  outlined consume of Environment<Color?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(unsigned char *)(a1 + 56);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t destroy for BorderlessButtonStyle(uint64_t a1)
{
  outlined consume of Environment<Color?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t destroy for CustomHoverEffectModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (*(void *)(v3 + 56) + a1) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
  uint64_t v5 = *(void *)(v4 + 24);
  char v6 = *(unsigned char *)(v4 + 32);

  return outlined consume of Environment<Bool>.Content(v5, v6);
}

uint64_t destroy for GradientBackground(uint64_t a1)
{
  return outlined consume of Environment<Color?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t InvalidatableLeafLayoutComputer.updateValue()(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = type metadata accessor for PlatformViewLayoutEngine();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  MEMORY[0x1F4188790](v4);
  v27[2] = v2;
  uint64_t v28 = (uint64_t)v27 - v5;
  v27[1] = v3;
  uint64_t v6 = type metadata accessor for ViewLeafView();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v27 - v11;
  ViewResponderFilter.view.getter((uint64_t)v27 - v11);
  double v13 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v14 = *(id *)&v12[*(int *)(v6 + 36)];
  v27[0] = v13;
  v13(v12, v6);
  uint64_t v15 = (uint64_t)v14 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v14) + 0xC0);
  swift_beginAccess();
  outlined init with copy of RemoteSheetContainerVCKey.Storage?(v15, (uint64_t)v33, (unint64_t *)&lazy cache variable for type metadata for PlatformViewLayoutInvalidator?, (uint64_t)&type metadata for PlatformViewLayoutInvalidator);

  LOBYTE(v14) = v33[16];
  outlined destroy of PlatformViewLayoutInvalidator?((uint64_t)v33, (unint64_t *)&lazy cache variable for type metadata for PlatformViewLayoutInvalidator?, (uint64_t)&type metadata for PlatformViewLayoutInvalidator);
  if (v14)
  {
    ViewResponderFilter.view.getter((uint64_t)v9);
    uint64_t v16 = *(id *)&v9[*(int *)(v6 + 36)];
    ((void (*)(char *, uint64_t))v27[0])(v9, v6);
    swift_weakLoadStrong();
    uint64_t result = AGGraphGetCurrentAttribute();
    int v18 = *MEMORY[0x1E4F4E7A0];
    if (result == *MEMORY[0x1E4F4E7A0]) {
      goto LABEL_8;
    }
    unint64_t v19 = AGCreateWeakAttribute();
    int v20 = v19;
    unint64_t v21 = HIDWORD(v19);
    swift_weakInit();
    swift_release();
    v31[2] = v20;
    v31[3] = v21;
    char v32 = 0;
    uint64_t v22 = (uint64_t)v16 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v16) + 0xC0);
    swift_beginAccess();
    outlined assign with take of PlatformViewLayoutInvalidator?((uint64_t)v31, v22);
    swift_endAccess();
  }
  else
  {
    int v18 = *MEMORY[0x1E4F4E7A0];
  }
  ViewResponderFilter.view.getter((uint64_t)v9);
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result != v18)
  {
    int v23 = result;
    int v24 = *(_DWORD *)(v1 + 4);
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    uint64_t v25 = v28;
    PlatformViewLayoutEngine.init(cache:view:environment:context:)((uint64_t)v31, (uint64_t)v9, v24, v23, v28);
    swift_getWitnessTable();
    uint64_t v26 = v30;
    swift_getWitnessTable();
    StatefulRule<>.update<A>(to:)();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v25, v26);
  }
  __break(1u);
LABEL_8:
  __break(1u);
  return result;
}

double PlatformViewLayoutEngine.sizeThatFits(_:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v20 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = type metadata accessor for ViewLeafView();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *a1;
  char v12 = *((unsigned char *)a1 + 8);
  uint64_t v13 = a1[2];
  LOBYTE(a1) = *((unsigned char *)a1 + 24);
  uint64_t v30 = v11;
  char v31 = v12;
  uint64_t v32 = v13;
  char v33 = (char)a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v19 - v9, v2 + *(int *)(a2 + 36), v6, v8);
  int v14 = *(_DWORD *)(v2 + *(int *)(a2 + 40));
  int v15 = *(_DWORD *)(v2 + *(int *)(a2 + 44));
  uint64_t v21 = v20;
  uint64_t v22 = v5;
  int v23 = v10;
  uint64_t v24 = v11;
  char v25 = v12;
  uint64_t v26 = v13;
  char v27 = (char)a1;
  int v28 = v14;
  int v29 = v15;
  ViewSizeCache.get(_:makeValue:)();
  double v17 = v16;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return v17;
}

uint64_t type metadata accessor for ViewLeafView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for ViewLeafView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  double v8 = (void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *v8;
  *uint64_t v7 = *v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  char v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = ((unint64_t)v7 + v13 + 8) & ~v13;
  uint64_t v15 = ((unint64_t)v8 + v13 + 8) & ~v13;
  id v16 = v9;
  v12(v14, v15, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithCopy for OptionalFormatInputToString(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

void *initializeWithCopy for ContentListItemNavigationLinkStyle(void *__dst, unsigned __int8 *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  if (((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 <= ((v7 + 17) & (unint64_t)~v7) + v8)
    unint64_t v9 = ((v7 + 17) & ~v7) + v8;
  else {
    unint64_t v9 = ((((((((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
  }
       + 24;
  unsigned int v10 = __src[v9];
  if (v10 > 1)
  {
    memcpy(__dst, __src, v9 + 1);
  }
  else if (v10 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(__dst, __src, v5);
    uint64_t v11 = (void *)(((unint64_t)__dst + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    char v12 = (void *)((unint64_t)&__src[v8 + 7] & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v11 = *v12;
    unint64_t v13 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v13 = *(void *)v14;
    *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
    unint64_t v15 = ((unint64_t)v11 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = ((unint64_t)v12 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = *(void *)(v16 + 8);
    swift_retain();
    if (v17 < 0xFFFFFFFF)
    {
      long long v22 = *(_OWORD *)v16;
      *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
      *(_OWORD *)unint64_t v15 = v22;
    }
    else
    {
      *(void *)unint64_t v15 = *(void *)v16;
      *(void *)(v15 + 8) = *(void *)(v16 + 8);
      *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
      swift_retain();
      swift_retain();
    }
    unint64_t v23 = ((unint64_t)v11 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = ((unint64_t)v12 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = *(void *)(v24 + 8);
    if (v25 >= 0xFFFFFFFF) {
      LODWORD(v25) = -1;
    }
    if ((int)v25 - 1 < 0)
    {
      swift_weakCopyInit();
      *(void *)(v23 + 8) = *(void *)(v24 + 8);
      *(void *)(v23 + 16) = *(void *)(v24 + 16);
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v26 = *(_OWORD *)v24;
      *(void *)(v23 + 16) = *(void *)(v24 + 16);
      *(_OWORD *)unint64_t v23 = v26;
    }
    char v27 = (_OWORD *)((v23 + 31) & 0xFFFFFFFFFFFFFFF8);
    int v28 = (long long *)((v24 + 31) & 0xFFFFFFFFFFFFFFF8);
    long long v29 = *v28;
    long long v30 = v28[2];
    v27[1] = v28[1];
    v27[2] = v30;
    *char v27 = v29;
    unint64_t v31 = ((unint64_t)v27 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v32 = ((unint64_t)v28 + 55) & 0xFFFFFFFFFFFFFFF8;
    long long v33 = *(_OWORD *)v32;
    *(void *)(v31 + 16) = *(void *)(v32 + 16);
    *(_OWORD *)unint64_t v31 = v33;
    *((unsigned char *)__dst + v9) = 1;
  }
  else
  {
    uint64_t v18 = *((void *)__src + 1);
    *__dst = *(void *)__src;
    __dst[1] = v18;
    *((unsigned char *)__dst + 16) = __src[16];
    unint64_t v19 = ((unint64_t)__dst + v7 + 17) & ~v7;
    unint64_t v20 = (unint64_t)&__src[v7 + 17] & ~v7;
    uint64_t v21 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v21(v19, v20, v5);
    *((unsigned char *)__dst + v9) = 0;
  }
  return __dst;
}

uint64_t initializeWithCopy for NavigationLinkButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(unsigned __int8 *)(a2 + 17);
  if (v6 >= 2) {
    unsigned int v6 = *(_DWORD *)a2 + 2;
  }
  if (v6 == 1)
  {
    uint64_t v7 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v7;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    swift_retain();
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
  }
  swift_retain();
  *(unsigned char *)(a1 + 17) = v8;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 | 7) + 18;
  unint64_t v13 = (void *)((v12 + a1) & ~(v11 | 7));
  unint64_t v14 = (void *)((v12 + a2) & ~(v11 | 7));
  uint64_t v15 = v11 + 17;
  uint64_t v16 = *(void *)(v10 + 64);
  unint64_t v17 = ((v11 + 17) & ~v11) + v16;
  uint64_t v18 = v16 + 7;
  unint64_t v19 = ((((((((v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
      + 24;
  if (v19 <= v17) {
    unint64_t v20 = v17;
  }
  else {
    unint64_t v20 = v19;
  }
  unsigned int v21 = *((unsigned __int8 *)v14 + v20);
  if (v21 > 1)
  {
    memcpy(v13, v14, v20 + 1);
  }
  else if (v21 == 1)
  {
    (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v13, v14, v9);
    long long v22 = (void *)(((unint64_t)v13 + v18) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v23 = (void *)(((unint64_t)v14 + v18) & 0xFFFFFFFFFFFFFFF8);
    *long long v22 = *v23;
    unint64_t v24 = ((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v24 = *(void *)v25;
    *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
    unint64_t v26 = ((unint64_t)v22 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = ((unint64_t)v23 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v28 = *(void *)(v27 + 8);
    swift_retain();
    if (v28 < 0xFFFFFFFF)
    {
      long long v31 = *(_OWORD *)v27;
      *(unsigned char *)(v26 + 16) = *(unsigned char *)(v27 + 16);
      *(_OWORD *)unint64_t v26 = v31;
    }
    else
    {
      *(void *)unint64_t v26 = *(void *)v27;
      *(void *)(v26 + 8) = *(void *)(v27 + 8);
      *(unsigned char *)(v26 + 16) = *(unsigned char *)(v27 + 16);
      swift_retain();
      swift_retain();
    }
    unint64_t v32 = ((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v33 = ((unint64_t)v23 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v34 = *(void *)(v33 + 8);
    if (v34 >= 0xFFFFFFFF) {
      LODWORD(v34) = -1;
    }
    if ((int)v34 - 1 < 0)
    {
      swift_weakCopyInit();
      *(void *)(v32 + 8) = *(void *)(v33 + 8);
      *(void *)(v32 + 16) = *(void *)(v33 + 16);
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v35 = *(_OWORD *)v33;
      *(void *)(v32 + 16) = *(void *)(v33 + 16);
      *(_OWORD *)unint64_t v32 = v35;
    }
    uint64_t v36 = (_OWORD *)((v32 + 31) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v37 = (long long *)((v33 + 31) & 0xFFFFFFFFFFFFFFF8);
    long long v38 = *v37;
    long long v39 = v37[2];
    v36[1] = v37[1];
    v36[2] = v39;
    *uint64_t v36 = v38;
    unint64_t v40 = ((unint64_t)v36 + 55) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = ((unint64_t)v37 + 55) & 0xFFFFFFFFFFFFFFF8;
    long long v42 = *(_OWORD *)v41;
    *(void *)(v40 + 16) = *(void *)(v41 + 16);
    *(_OWORD *)unint64_t v40 = v42;
    *((unsigned char *)v13 + v20) = 1;
  }
  else
  {
    *unint64_t v13 = *v14;
    *(void *)(((v12 + a1) & ~(v11 | 7)) + 8) = v14[1];
    *(unsigned char *)(((v12 + a1) & ~(v11 | 7)) + 0x10) = *((unsigned char *)v14 + 16);
    unint64_t v44 = ((unint64_t)v13 + v15) & ~v11;
    unint64_t v29 = ((unint64_t)v14 + v15) & ~v11;
    long long v30 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16);
    swift_retain();
    swift_retain();
    v30(v44, v29, v9);
    *((unsigned char *)v13 + v20) = 0;
  }
  *((unsigned char *)v13 + v20 + 1) = *((unsigned char *)v14 + v20 + 1);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for InsetListLabelStyle.StyleView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t initializeWithCopy for SettingsLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  LOBYTE(v5) = *(unsigned char *)(v8 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v8, v5);
  *(void *)unint64_t v7 = v9;
  *(unsigned char *)(v7 + 8) = v5;
  return a1;
}

uint64_t initializeWithCopy for PlatformItemListButtonStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = v2[2];
  char v7 = *((unsigned char *)v2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  uint64_t v8 = v2[4];
  char v9 = *((unsigned char *)v2 + 40);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  uint64_t v10 = v2[6];
  LOBYTE(v2) = *((unsigned char *)v2 + 56);
  outlined copy of Environment<Bool>.Content(v10, (char)v2);
  *(void *)(a1 + 48) = v10;
  *(unsigned char *)(a1 + 56) = (_BYTE)v2;
  return a1;
}

uint64_t initializeWithCopy for LinearProgressViewStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  char v7 = *((unsigned char *)a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = a2[4];
  swift_retain();
  return a1;
}

uint64_t ViewResponderFilter.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ViewLeafView();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t destroy for PlatformViewLayoutEngine(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  int v5 = *(_DWORD *)(v4 + 80) & 0xF8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v12 + 80);
  unint64_t v8 = (a1 + (v5 | v7 | 7) + 161) & ~(unint64_t)(v5 | v7 | 7);
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v8, v3);
  char v9 = (id *)((*(void *)(v4 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8);

  uint64_t v10 = *(uint64_t (**)(unint64_t, uint64_t))(v12 + 8);

  return v10(((unint64_t)v9 + v7 + 8) & ~v7, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for ToolbarButtonStyle(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 41))
  {
    if (*(unsigned char *)(a2 + 40) == 1)
    {
      long long v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 1;
    }
    else
    {
      long long v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
    }
    *(unsigned char *)(a1 + 41) = 1;
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 41) = 0;
    swift_retain();
  }
  uint64_t v6 = *(void *)(a2 + 48);
  char v7 = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  char v9 = *(unsigned char *)(a2 + 72);
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(void *)(a1 + 64) = v8;
  *(unsigned char *)(a1 + 72) = v9;
  return a1;
}

uint64_t type metadata accessor for PlatformViewLayoutEngine()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for CustomHoverEffectPrimitiveViewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  char v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v9 = *(_OWORD *)((char *)v8 + 28);
  long long v10 = v8[1];
  *char v7 = *v8;
  v7[1] = v10;
  *(_OWORD *)((char *)v7 + 28) = v9;
  return a1;
}

uint64_t initializeWithCopy for CustomHoverEffectModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  unint64_t v7 = v6 + a1;
  unint64_t v8 = v6 + a2;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + 8);
  LOBYTE(v5) = *(unsigned char *)((v8 & 0xFFFFFFFFFFFFFFF8) + 16);
  outlined copy of Environment<Bool>.Content(v11, v5);
  *(void *)(v9 + 8) = v11;
  *(unsigned char *)(v9 + 16) = v5;
  uint64_t v12 = *(void *)(v10 + 24);
  LOBYTE(v5) = *(unsigned char *)(v10 + 32);
  outlined copy of Environment<Bool>.Content(v12, v5);
  *(void *)(v9 + 24) = v12;
  *(unsigned char *)(v9 + 32) = v5;
  *(unsigned char *)(v9 + 33) = *(unsigned char *)(v10 + 33);
  unint64_t v13 = (v9 + 41) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v10 + 41) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(void *)unint64_t v13 = v15;
  unint64_t v16 = (v9 + 57) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v10 + 57) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = *(void *)v17;
  *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
  *(void *)unint64_t v16 = v18;
  *(unsigned char *)(v16 + 9) = *(unsigned char *)(v17 + 9);
  *(void *)((v16 + 17) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v17 + 17) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithCopy for BorderlessButtonStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<HoverEffect?>.Content(*a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = v2[2];
  LOBYTE(v2) = *((unsigned char *)v2 + 24);
  outlined copy of Environment<Bool>.Content(v6, (char)v2);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = (_BYTE)v2;
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for AutomaticHoverEffect(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unsigned __int8 v4 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<HoverEffect?>.Content(*a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t initializeWithCopy for Switch(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t ButtonStyleContainerModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v55 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v50 = *(void *)(a1 + 24);
  type metadata accessor for ButtonStyleAdaptorMenuStyle();
  swift_getWitnessTable();
  uint64_t v46 = type metadata accessor for CustomButtonMenuStyleWriter();
  uint64_t v54 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v53 = (char *)&v39 - v3;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v56 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for WrappedButtonStyle();
  swift_getWitnessTable();
  uint64_t v45 = type metadata accessor for ButtonStyleModifier();
  uint64_t v49 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  unint64_t v8 = (char *)&v39 - v7;
  swift_getWitnessTable();
  uint64_t v42 = type metadata accessor for _ViewModifier_Content();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v48 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v39 - v10;
  uint64_t v44 = type metadata accessor for ButtonStyleWriter();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v51 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = (char *)&v39 - v13;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v52 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  int v43 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v47 = (char *)&v39 - v19;
  unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16);
  uint64_t v41 = v4 + 16;
  uint64_t v21 = (uint64_t)v56;
  uint64_t v40 = v2;
  v20(v56, v57, v2, v18);
  uint64_t v22 = v50;
  ButtonStyleModifier.init<A>(style:)(v21, v2, (uint64_t)v8);
  uint64_t v23 = v42;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v25 = v23;
  uint64_t v26 = v45;
  MEMORY[0x18C113660](v8, v25, v45, WitnessTable);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v8, v26);
  uint64_t v62 = WitnessTable;
  char v63 = &protocol witness table for ButtonStyleModifier<A>;
  uint64_t v27 = swift_getWitnessTable();
  MEMORY[0x18C113660](v27, v9, v44, v27);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v11, v9);
  unint64_t v28 = v56;
  uint64_t v29 = v40;
  ((void (*)(char *, uint64_t, uint64_t))v20)(v56, v57, v40);
  long long v30 = v53;
  CustomButtonMenuStyleWriter.init<A>(style:)(v28, v29, v22);
  uint64_t v60 = v27;
  char v61 = &protocol witness table for ButtonStyleWriter<A>;
  uint64_t v31 = swift_getWitnessTable();
  unint64_t v32 = v43;
  unint64_t v33 = v30;
  unint64_t v34 = v30;
  uint64_t v35 = v46;
  MEMORY[0x18C113660](v33, v12, v46, v31);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v34, v35);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v14, v12);
  uint64_t v58 = v31;
  char v59 = &protocol witness table for CustomButtonMenuStyleWriter<A>;
  swift_getWitnessTable();
  uint64_t v36 = v47;
  static ViewBuilder.buildExpression<A>(_:)(v32);
  uint64_t v37 = *(void (**)(char *, uint64_t))(v52 + 8);
  v37(v32, v15);
  static ViewBuilder.buildExpression<A>(_:)(v36);
  return ((uint64_t (*)(char *, uint64_t))v37)(v36, v15);
}

uint64_t destroy for ViewLeafView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(uint64_t, void))v3)(a1, *(void *)(a2 + 16));
  uint64_t v4 = (id *)((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8);

  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
  uint64_t v8 = AssociatedTypeWitness;
  unint64_t v9 = ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v9, v8);
}

uint64_t destroy for OptionalFormatInputToString(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
}

uint64_t destroy for ButtonStyleAdaptorMenuStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 8);

  return outlined consume of Environment<Bool?>.Content(v5, v6);
}

uint64_t type metadata accessor for ButtonStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ButtonStyleWriter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ButtonStyleAdaptorMenuStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CustomButtonMenuStyleWriter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ButtonStyleModifier.init<A>(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for WrappedButtonStyle();
  double v7 = MEMORY[0x1F4188790](v6);
  unint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 32))((char *)&v11 - v8, a1, a2, v7);
  swift_getWitnessTable();
  return OptionalFormatInputToString.init(format:)((uint64_t)v9, v6, a3);
}

uint64_t type metadata accessor for WrappedButtonStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.buttonStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a4;
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for ButtonStyleContainerModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, a3, v14);
  OptionalFormatInputToString.init(format:)(v11, a3, a5);
  MEMORY[0x18C113660](v16, a2, v12, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t OptionalFormatInputToString.init(format:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t ButtonStyleAdaptorMenuStyle.init(style:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
  uint64_t v4 = a3 + *(int *)(type metadata accessor for ButtonStyleAdaptorMenuStyle() + 36);
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v4 = result;
  *(unsigned char *)(v4 + 8) = 0;
  return result;
}

uint64_t destroy for Switch()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t destroy for BorderedButtonStyle_Phone(uint64_t a1)
{
  swift_release();
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  outlined consume of Environment<CGFloat?>.Content(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned char *)(a1 + 41));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 72);

  return outlined consume of Environment<Color?>.Content(v2, v3);
}

uint64_t initializeBufferWithCopyOfBuffer for BaseModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t outlined consume of Environment<NavigationEventHandlers>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a1);
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
  }
  else
  {
    return swift_release();
  }
}

uint64_t initializeWithCopy for SearchCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a2 + 72);
  if (v6 == 255)
  {
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  else if (v6)
  {
    uint64_t v10 = *(void *)(a2 + 24);
    *(void *)(a1 + 24) = v10;
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
    long long v11 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 56) = v11;
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 32, a2 + 32);
    *(unsigned char *)(a1 + 72) = 1;
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v9;
    *(unsigned char *)(a1 + 72) = 0;
    swift_bridgeObjectRetain();
  }
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (void *)(a1 + v12);
  double v14 = (void *)(a2 + v12);
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
    {
      _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, MEMORY[0x1E4FBB718]);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v38 = v14[1];
      *uint64_t v13 = *v14;
      v13[1] = v38;
      uint64_t v19 = *(int *)(v16 + 32);
      uint64_t v39 = v17;
      unint64_t v20 = (char *)v13 + v19;
      uint64_t v21 = (char *)v14 + v19;
      *unint64_t v20 = *((unsigned char *)v14 + v19);
      v20[1] = *((unsigned char *)v14 + v19 + 1);
      *((_WORD *)v20 + 1) = *(_WORD *)((char *)v14 + v19 + 2);
      v20[8] = *((unsigned char *)v14 + v19 + 8);
      *((_DWORD *)v20 + 1) = *(_DWORD *)((char *)v14 + v19 + 4);
      uint64_t v22 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v23 = v22[9];
      uint64_t v36 = &v21[v23];
      uint64_t v37 = &v20[v23];
      uint64_t v24 = type metadata accessor for AttributedString();
      uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
      swift_retain();
      swift_retain();
      v35(v37, v36, v24);
      v20[v22[10]] = v21[v22[10]];
      uint64_t v25 = v22[11];
      uint64_t v26 = &v20[v25];
      uint64_t v27 = &v21[v25];
      v26[4] = v27[4];
      *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v13, 0, 1, v16);
    }
  }
  else
  {
    *uint64_t v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = *(int *)(a3 + 24);
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = *(void *)v30;
  uint64_t v32 = *(void *)(v30 + 8);
  char v33 = *(unsigned char *)(v30 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v30, v32, v33);
  *(void *)uint64_t v29 = v31;
  *(void *)(v29 + 8) = v32;
  *(unsigned char *)(v29 + 16) = v33;
  return a1;
}

uint64_t outlined copy of Environment<AppIntentExecutor?>.Content(uint64_t result, uint64_t a2, char a3)
{
  if (a3) {
    return outlined copy of AppIntentExecutor?(result);
  }
  else {
    return swift_retain();
  }
}

uint64_t destroy for SearchCompletionButtonStyle(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 72);
  if (v4 != 255)
  {
    if (v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E4F3F4D8]);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v7 = v6;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
    {
      swift_release();
      swift_release();
      uint64_t v8 = v5 + *(int *)(v7 + 32);
      uint64_t v9 = v8 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
      uint64_t v10 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    }
  }
  else
  {
    swift_release();
  }
  return _s7SwiftUI11EnvironmentV7ContentOyAA19TriggerSubmitActionVSg_GWOeTm_0(*(void *)(a1 + *(int *)(a2 + 24)), *(void *)(a1 + *(int *)(a2 + 24) + 8), *(unsigned char *)(a1 + *(int *)(a2 + 24) + 16), (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
}

void type metadata accessor for Environment<Binding<AttributedString>?>.Content(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI11EnvironmentV7ContentOyAA7BindingVy10Foundation16AttributedStringVGSg_GMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined consume of Environment<TriggerSubmitAction?>.Content(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  if (a3) {
    return a4();
  }
  else {
    return swift_release();
  }
}

uint64_t _s7SwiftUI11EnvironmentV7ContentOyAA19TriggerSubmitActionVSg_GWOeTm_0(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  if (a3) {
    return a4();
  }
  else {
    return swift_release();
  }
}

uint64_t initializeWithCopy for NavigationSplitRepresentable(uint64_t a1, uint64_t a2)
{
  int v4 = (char *)(a1 + 312);
  uint64_t v5 = (char *)(a2 + 312);
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(void **)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 80) = v9;
  uint64_t v10 = v9;
  long long v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
  id v12 = v7;
  swift_bridgeObjectRetain();
  v11(a1 + 56, a2 + 56, v10);
  uint64_t v13 = *(void **)(a2 + 96);
  uint64_t v14 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = v14;
  long long v15 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 136) = v15;
  uint64_t v16 = v15;
  uint64_t v17 = **(void (***)(uint64_t, uint64_t, uint64_t))(v15 - 8);
  id v18 = v13;
  swift_bridgeObjectRetain();
  v17(a1 + 112, a2 + 112, v16);
  uint64_t v19 = *(void **)(a2 + 152);
  uint64_t v20 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = v19;
  *(void *)(a1 + 160) = v20;
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(_WORD *)(a1 + 193) = *(_WORD *)(a2 + 193);
  uint64_t v21 = *(void *)(a2 + 200);
  uint64_t v22 = *(void *)(a2 + 208);
  *(_DWORD *)(a1 + 216) = *(_DWORD *)(a2 + 216);
  *(void *)(a1 + 200) = v21;
  *(void *)(a1 + 208) = v22;
  id v23 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_weakCopyInit();
  uint64_t v24 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v24;
  uint64_t v25 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v25;
  uint64_t v26 = *(void *)(a2 + 288);
  swift_retain();
  swift_retain();
  swift_retain();
  if (v26)
  {
    uint64_t v27 = *(void *)(a2 + 296);
    *(void *)(a1 + 288) = v26;
    *(void *)(a1 + 296) = v27;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v26 - 8))(a1 + 264, a2 + 264, v26);
  }
  else
  {
    long long v28 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v28;
    *(void *)(a1 + 296) = *(void *)(a2 + 296);
  }
  uint64_t v29 = *(void *)(a2 + 304);
  char v30 = *v5;
  outlined copy of Environment<Bool>.Content(v29, *v5);
  *(void *)(a1 + 304) = v29;
  *int v4 = v30;
  uint64_t v31 = *(void *)(a2 + 320);
  char v32 = v5[16];
  outlined copy of Environment<Bool>.Content(v31, v32);
  *(void *)(a1 + 320) = v31;
  v4[16] = v32;
  uint64_t v33 = *(void *)(a2 + 336);
  uint64_t v34 = *(void *)(a2 + 344);
  uint64_t v36 = *(void *)(a2 + 352);
  uint64_t v35 = *(void *)(a2 + 360);
  char v37 = v5[56];
  outlined copy of Environment<NavigationEventHandlers>.Content(v33, v34, v36, v35, v37);
  *(void *)(a1 + 336) = v33;
  *(void *)(a1 + 344) = v34;
  *(void *)(a1 + 352) = v36;
  *(void *)(a1 + 360) = v35;
  v4[56] = v37;
  return a1;
}

uint64_t outlined copy of Environment<NavigationEventHandlers>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    outlined copy of AppIntentExecutor?(a1);
    return outlined copy of AppIntentExecutor?(a3);
  }
  else
  {
    return swift_retain();
  }
}

uint64_t outlined destroy of PlatformViewLayoutInvalidator?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  type metadata accessor for [FocusableBounds](0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t destroy for NavigationSplitRepresentable(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 312);
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 56);

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 112);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_weakDestroy();
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(a1 + 288)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 264);
  }
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 304), *v2);
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 320), v2[16]);
  uint64_t v3 = *(void *)(a1 + 336);
  uint64_t v4 = *(void *)(a1 + 344);
  uint64_t v5 = *(void *)(a1 + 352);
  uint64_t v6 = *(void *)(a1 + 360);
  char v7 = v2[56];

  return outlined consume of Environment<NavigationEventHandlers>.Content(v3, v4, v5, v6, v7);
}

uint64_t outlined init with copy of RemoteSheetContainerVCKey.Storage?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for [FocusableBounds](0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t PlatformViewLayoutEngine.init(cache:view:environment:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X8>)
{
  long long v9 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a5 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a5 + 144) = v9;
  *(unsigned char *)(a5 + 160) = *(unsigned char *)(a1 + 160);
  long long v10 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a5 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a5 + 80) = v10;
  long long v11 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a5 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a5 + 112) = v11;
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a5 = *(_OWORD *)a1;
  *(_OWORD *)(a5 + 16) = v12;
  long long v13 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a5 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a5 + 48) = v13;
  uint64_t v14 = (int *)type metadata accessor for PlatformViewLayoutEngine();
  uint64_t v15 = a5 + v14[9];
  uint64_t v16 = type metadata accessor for ViewLeafView();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a2, v16);
  *(_DWORD *)(a5 + v14[10]) = a3;
  *(_DWORD *)(a5 + v14[11]) = a4;
  return result;
}

uint64_t View.contextMenu<A>(menuItems:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v23 = a7;
  uint64_t v19 = a6;
  uint64_t v20 = a1;
  uint64_t v21 = a5;
  uint64_t v22 = a2;
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  type metadata accessor for ModifiedContent();
  uint64_t v30 = a6;
  unint64_t v31 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  swift_getWitnessTable();
  uint64_t v10 = type metadata accessor for ZStack();
  MEMORY[0x1F4188790](v10);
  long long v12 = (char *)&v19 - v11;
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for ContextMenuModifier();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v19 - v15;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v17 = v21;
  uint64_t v26 = v21;
  uint64_t v27 = v19;
  uint64_t v28 = v20;
  uint64_t v29 = v22;
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  ContextMenuModifier.init(menuView:)((uint64_t)v12, v10, (uint64_t)v16);
  MEMORY[0x18C113660](v16, a3, v13, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t destroy for ContextMenuModifier(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<Bool>.Content(*(void *)((a1 + 11) & 0xFFFFFFFFFFFFFFF8), *(unsigned char *)(((a1 + 11) & 0xFFFFFFFFFFFFFFF8) + 8));
  unint64_t v4 = (a1 + 27) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(void *)v4, *(unsigned char *)(v4 + 8));
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v5 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

uint64_t destroy for CircularUIKitProgressView(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 64), *(unsigned char *)(a1 + 72));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 128), *(unsigned char *)(a1 + 136));

  return swift_release();
}

uint64_t outlined consume of Environment<Bool>.Content(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t ContextMenuModifier.init(menuView:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_DWORD *)a3 = 0;
  *(void *)(a3 + 8) = swift_getKeyPath();
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = swift_getKeyPath();
  *(unsigned char *)(a3 + 32) = 0;
  uint64_t v6 = a3 + *(int *)(type metadata accessor for ContextMenuModifier() + 44);
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v7(v6, a1, a2);
}

uint64_t assignWithCopy for ResolvedTextFieldStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  unint64_t v4 = (_OWORD *)(a1 + 40);
  uint64_t v5 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 64);
  if (*(void *)(a1 + 64))
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a2 + 40);
      uint64_t v8 = *(void *)(a2 + 48);
      char v9 = *(unsigned char *)(a2 + 56);
      outlined copy of Text.Storage(v7, v8, v9);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      char v12 = *(unsigned char *)(a1 + 56);
      *(void *)(a1 + 40) = v7;
      *(void *)(a1 + 48) = v8;
      *(unsigned char *)(a1 + 56) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(a1 + 40);
      long long v16 = *(_OWORD *)(a2 + 56);
      *unint64_t v4 = *v5;
      *(_OWORD *)(a1 + 56) = v16;
    }
  }
  else if (v6)
  {
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v14 = *(void *)(a2 + 48);
    char v15 = *(unsigned char *)(a2 + 56);
    outlined copy of Text.Storage(v13, v14, v15);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    *(unsigned char *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 56);
    *unint64_t v4 = *v5;
    *(_OWORD *)(a1 + 56) = v17;
  }
  uint64_t v18 = *(void *)(a2 + 72);
  uint64_t v19 = *(void *)(a2 + 80);
  uint64_t v20 = *(void *)(a2 + 88);
  uint64_t v21 = *(void *)(a2 + 96);
  uint64_t v22 = *(void *)(a2 + 104);
  uint64_t v23 = *(void *)(a2 + 112);
  uint64_t v24 = *(void *)(a2 + 120);
  uint64_t v25 = *(void *)(a2 + 128);
  uint64_t v73 = *(void *)(a2 + 136);
  uint64_t v74 = *(void *)(a2 + 144);
  uint64_t v75 = *(void *)(a2 + 152);
  uint64_t v76 = *(void *)(a2 + 160);
  uint64_t v77 = *(void *)(a2 + 168);
  int __dsta = *(_DWORD *)(a2 + 176);
  char v80 = *(unsigned char *)(a2 + 180);
  outlined copy of StateOrBinding<TextFieldState>(v18, v19, v20, v21, v22, v23, v24, v25, v73, v74, v75, v76, v77, __dsta, v80);
  uint64_t v26 = *(void *)(a1 + 72);
  uint64_t v27 = *(void *)(a1 + 80);
  uint64_t v28 = *(void *)(a1 + 88);
  uint64_t v29 = *(void *)(a1 + 96);
  uint64_t v30 = *(void *)(a1 + 104);
  uint64_t v31 = *(void *)(a1 + 112);
  uint64_t v32 = *(void *)(a1 + 120);
  uint64_t v33 = *(void *)(a1 + 128);
  long long v34 = *(_OWORD *)(a1 + 136);
  long long v35 = *(_OWORD *)(a1 + 152);
  uint64_t v36 = *(void *)(a1 + 168);
  int v37 = *(_DWORD *)(a1 + 176);
  char v38 = *(unsigned char *)(a1 + 180);
  *(void *)(a1 + 72) = v18;
  *(void *)(a1 + 80) = v19;
  *(void *)(a1 + 88) = v20;
  *(void *)(a1 + 96) = v21;
  *(void *)(a1 + 104) = v22;
  *(void *)(a1 + 112) = v23;
  *(void *)(a1 + 120) = v24;
  *(void *)(a1 + 128) = v25;
  *(void *)(a1 + 136) = v73;
  *(void *)(a1 + 144) = v74;
  *(void *)(a1 + 152) = v75;
  *(void *)(a1 + 160) = v76;
  *(void *)(a1 + 168) = v77;
  *(_DWORD *)(a1 + 176) = __dsta;
  *(unsigned char *)(a1 + 180) = v80;
  outlined consume of StateOrBinding<TextFieldState>(v26, v27, v28, v29, v30, v31, v32, v33, v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v36, v37, v38);
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v40 = *(int *)(v39 + 56);
  uint64_t v41 = (char *)(a1 + v40);
  uint64_t v42 = (char *)(a2 + v40);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v44 = v43;
  uint64_t v45 = *(void *)(v43 - 8);
  uint64_t v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  LODWORD(v21) = v46(v41, 1, v43);
  int v47 = v46(v42, 1, v44);
  if (v21)
  {
    if (!v47)
    {
      *(void *)uint64_t v41 = *(void *)v42;
      *((void *)v41 + 1) = *((void *)v42 + 1);
      uint64_t v48 = *(int *)(v44 + 32);
      __dst = &v41[v48];
      uint64_t v81 = &v42[v48];
      uint64_t v49 = type metadata accessor for TextSelection(0);
      uint64_t v50 = *(void *)(v49 - 8);
      uint64_t v51 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48);
      swift_retain();
      swift_retain();
      if (v51(v81, 1, v49))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(__dst, v81, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        uint64_t v67 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16))(__dst, v81, v68);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v81, *(void *)(*(void *)(v67 - 8) + 64));
        }
        __dst[*(int *)(v49 + 20)] = v81[*(int *)(v49 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(__dst, 0, 1, v49);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v41, 0, 1, v44);
      return a1;
    }
    goto LABEL_14;
  }
  if (v47)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_2((uint64_t)v41, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_14:
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    size_t v54 = *(void *)(*(void *)(v53 - 8) + 64);
    uint64_t v55 = v41;
    uint64_t v56 = v42;
LABEL_15:
    memcpy(v55, v56, v54);
    return a1;
  }
  *(void *)uint64_t v41 = *(void *)v42;
  swift_retain();
  swift_release();
  *((void *)v41 + 1) = *((void *)v42 + 1);
  swift_retain();
  swift_release();
  uint64_t v57 = *(int *)(v44 + 32);
  uint64_t v58 = &v41[v57];
  char v59 = &v42[v57];
  uint64_t v60 = type metadata accessor for TextSelection(0);
  uint64_t v61 = *(void *)(v60 - 8);
  uint64_t v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v61 + 48);
  int v63 = v62(v58, 1, v60);
  int v64 = v62(v59, 1, v60);
  if (v63)
  {
    if (!v64)
    {
      uint64_t v65 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v66 - 8) + 16))(v58, v59, v66);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v58, v59, *(void *)(*(void *)(v65 - 8) + 64));
      }
      v58[*(int *)(v60 + 20)] = v59[*(int *)(v60 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v58, 0, 1, v60);
      return a1;
    }
    goto LABEL_24;
  }
  if (v64)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_2((uint64_t)v58, type metadata accessor for TextSelection);
LABEL_24:
    type metadata accessor for TextSelection?(0);
    size_t v54 = *(void *)(*(void *)(v69 - 8) + 64);
    uint64_t v55 = v58;
    uint64_t v56 = v59;
    goto LABEL_15;
  }
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_2((uint64_t)v58, type metadata accessor for TextSelection.Indices);
    uint64_t v71 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v72 - 8) + 16))(v58, v59, v72);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v58, v59, *(void *)(*(void *)(v71 - 8) + 64));
    }
  }
  v58[*(int *)(v60 + 20)] = v59[*(int *)(v60 + 20)];
  return a1;
}

void type metadata accessor for TextField<_TextFieldStyleLabel>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI9TextFieldVyAA01_cD10StyleLabelVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t initializeWithCopy for ListRepresentable(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  id v4 = v3;
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for MenuSectionStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  unsigned __int8 v4 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return a1;
}

uint64_t initializeWithCopy for NavigationStackRepresentable(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 24, a2 + 24);
  uint64_t v5 = *(void **)(a2 + 64);
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = v6;
  id v7 = v5;
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 108) = *(void *)(a2 + 108);
  uint64_t v9 = *(void *)(a2 + 144);
  swift_retain();
  swift_retain();
  if (v9)
  {
    uint64_t v10 = *(void *)(a2 + 152);
    *(void *)(a1 + 144) = v9;
    *(void *)(a1 + 152) = v10;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8))(a1 + 120, a2 + 120, v9);
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v11;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
  }
  uint64_t v12 = *(void *)(a2 + 160);
  char v13 = *(unsigned char *)(a2 + 168);
  outlined copy of Environment<Bool>.Content(v12, v13);
  *(void *)(a1 + 160) = v12;
  *(unsigned char *)(a1 + 168) = v13;
  return a1;
}

uint64_t destroy for NavigationStackRepresentable(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);

  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_release();
  swift_release();
  if (*(void *)(a1 + 144)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 120);
  }
  uint64_t v2 = *(void *)(a1 + 160);
  char v3 = *(unsigned char *)(a1 + 168);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t CustomHoverEffectPrimitiveViewModifier.init(effect:options:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = *a2;
  char v6 = *((unsigned char *)a2 + 8);
  uint64_t v7 = a2[2];
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = a2[4];
  char v10 = *((unsigned char *)a2 + 40);
  char v11 = *((unsigned char *)a2 + 41);
  char v14 = *((unsigned char *)a2 + 43);
  char v15 = *((unsigned char *)a2 + 42);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t result = type metadata accessor for CustomHoverEffectPrimitiveViewModifier();
  uint64_t v13 = a4 + *(int *)(result + 36);
  *(void *)uint64_t v13 = v5;
  *(unsigned char *)(v13 + 8) = v6;
  *(void *)(v13 + 16) = v7;
  *(unsigned char *)(v13 + 24) = v8;
  *(void *)(v13 + 32) = v9;
  *(unsigned char *)(v13 + 40) = v10;
  *(unsigned char *)(v13 + 41) = v11;
  *(unsigned char *)(v13 + 42) = v15;
  *(unsigned char *)(v13 + 43) = v14;
  return result;
}

uint64_t type metadata accessor for CustomHoverEffectPrimitiveViewModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CustomHoverEffectModifier.hoverEffectState.getter@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 44);
  uint64_t v5 = *(void *)v4;
  char v6 = *(unsigned char *)(v4 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v4, v6);
  specialized Environment.wrappedValue.getter(v5, v6, a2);

  return outlined consume of Environment<Bool>.Content(v5, v6);
}

uint64_t UIKitButtonStyleModifier.ResolvedBody.isEnabled.getter(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 40);
  uint64_t v3 = *(void *)v2;
  char v4 = *(unsigned char *)(v2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v2, v4);
  char v5 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  return v5 & 1;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t result@<X0>, char a2@<W1>, unsigned char *a3@<X8>)
{
  uint64_t v3 = result;
  if (a2)
  {
    *a3 = result & 1;
  }
  else
  {
    outlined copy of Environment<Bool>.Content(result, 0);
    os_log_type_t v4 = static os_log_type_t.fault.getter();
    char v5 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6574617453, 0xE500000000000000, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v8, -1, -1);
      MEMORY[0x18C119C60](v7, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(v3, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

{
  uint64_t v3;
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v3 = result;
  if (a2)
  {
    *a3 = result;
  }
  else
  {
    outlined copy of Environment<Bool>.Content(result, 0);
    os_log_type_t v4 = static os_log_type_t.fault.getter();
    char v5 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v9 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x8000000188327E90, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v8, -1, -1);
      MEMORY[0x18C119C60](v7, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(v3, 0);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t assignWithCopy for ArchivableButtonAppIntentModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)a2, v5, v6);
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(void *)(a1 + 8);
  char v9 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  outlined consume of Environment<AppIntentExecutor?>.Content(v7, v8, v9);
  char v10 = *(void **)(a2 + 24);
  char v11 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v10;
  id v12 = v10;

  uint64_t v13 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v13;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t type metadata accessor for DismissSearchAccessoryAction(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DismissSearchAccessoryAction);
}

uint64_t (*ContainerValues.tabItemLabel_v0.modify(uint64_t a1))(void *a1, char a2)
{
  *(void *)(a1 + 16) = v1;
  ContainerValues.subscript.getter();
  return ContainerValues.tabItemLabel_v0.modify;
}

uint64_t initializeWithCopy for CheckmarkToggleStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v12 = *(unsigned char *)(a2 + 64);
  outlined copy of Environment<HoverEffectContext?>.Content(v8, v9, v10, v11, v12);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v12;
  uint64_t v13 = *(void *)(a2 + 72);
  LOBYTE(v9) = *(unsigned char *)(a2 + 80);
  outlined copy of Environment<Bool>.Content(v13, v9);
  *(void *)(a1 + 72) = v13;
  *(unsigned char *)(a1 + 80) = v9;
  uint64_t v14 = *(void *)(a2 + 88);
  LOBYTE(v9) = *(unsigned char *)(a2 + 96);
  outlined copy of Environment<Bool>.Content(v14, v9);
  *(void *)(a1 + 88) = v14;
  *(unsigned char *)(a1 + 96) = v9;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for ButtonToggleStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<Color?>.Content(*a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = a2[2];
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for TransformScrollIndicators()
{
  return &type metadata for TransformScrollIndicators;
}

uint64_t AccessibilityViewGraph.needsUpdate(graph:)(uint64_t a1)
{
  swift_beginAccess();
  if (*(unsigned char *)(a1 + 360) == 1 && *(unsigned char *)(v1 + 24) == 1)
  {
    uint64_t WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      if (*(void *)(v1 + 16) != *(void *)(WeakValue + 8)) {
        return 1;
      }
    }
  }
  if (*(void *)(v1 + 40)) {
    return 1;
  }
  else {
    return *(unsigned __int8 *)(v1 + 56);
  }
}

void static ButtonBorderShape.roundedRectangle(radius:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t partial apply for closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ()(a1, *(uint64_t (**)(void))(v1 + 24));
}

uint64_t _sSo11AGAttributea14AttributeGraphE10mutateBody2as12invalidating_yxm_SbyxzXEtlFySvXEfU_TA_0()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t destroy for SidebarListBody.TableViewRoot(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<CGFloat?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(unsigned char *)(a1 + 9));
  unint64_t v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(void *)v4, *(unsigned __int8 *)(v4 + 8), *(unsigned char *)(v4 + 9));
  unint64_t v5 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(void *)v5, *(unsigned char *)(v5 + 8));
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v5 + (v9 | 7) + 9) & ~(v9 | 7);
  uint64_t v11 = ~v9;
  char v12 = (uint64_t *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v9 + 8) & v11);
    uint64_t v8 = v16;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v13 = *v12;
  if ((unint64_t)*v12 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  uint64_t result = (v13 + 1);
  if (v13 == -1)
  {
LABEL_7:
    uint64_t v17 = v8;
    swift_release();
    swift_release();
    char v15 = *(uint64_t (**)(unint64_t, uint64_t))(v17 + 8);
    return v15(((unint64_t)v12 + v9 + 8) & v11, v6);
  }
  return result;
}

ValueMetadata *type metadata accessor for FinishLaunchTestAction()
{
  return &type metadata for FinishLaunchTestAction;
}

uint64_t partial apply for closure #1 in SizeFittingState.applyChildren(selectLast:to:)(void *a1)
{
  return closure #1 in SizeFittingState.applyChildren(selectLast:to:)(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(uint64_t (**)(long long *, BOOL))(v1 + 48));
}

__n128 __swift_memcpy32_4(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

ValueMetadata *type metadata accessor for EditMode()
{
  return &type metadata for EditMode;
}

uint64_t getEnumTagSinglePayload for ListContentStyling(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

void *initializeWithCopy for KeyboardShortcutBindingBehavior(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 16) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 16) & ~v7;
  swift_retain();
  v6(v8, v9, v5);
  return a1;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SearchKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance SearchContentKey(&one-time initialization token for defaultValue, (uint64_t)static SearchKey.defaultValue, a1);
}

double protocol witness for static PreferenceKey.defaultValue.getter in conformance ActionSheet.Presentation.Key@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 160) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t initializeWithCopy for AnyAccessibilityAction(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for OptionalFormatInputToString(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7
    && *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }
  else
  {
    uint64_t v8 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain();
  }
  return v3;
}

ValueMetadata *type metadata accessor for NavigationTitleKey()
{
  return &type metadata for NavigationTitleKey;
}

ValueMetadata *type metadata accessor for ToolbarKey()
{
  return &type metadata for ToolbarKey;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ActiveContextMenu(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2) {
    return (*(unsigned __int8 *)(a2 + 4) ^ *(unsigned __int8 *)(a1 + 4) ^ 1) & 1;
  }
  else {
    return 0;
  }
}

uint64_t partial apply for closure #1 in View.contextMenu<A>(menuItems:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in View.contextMenu<A>(menuItems:)(*(void (**)(double))(v1 + 48), *(void *)(v1 + 24), *(void *)(v1 + 40), a1);
}

uint64_t storeEnumTagSinglePayload for NavigationDestinationModifier.SeededResolver(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 12) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for ScrollTransitionConfiguration.Mode(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32) >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance SystemScrollViewContainer<A>.EnvironmentAxesModifier()
{
  return static SystemScrollViewContainer.EnvironmentAxesModifier.makeEnvironment(modifier:environment:)();
}

uint64_t OptionalViewAlias.StaticSourceBox.update(property:phase:)(unsigned char *a1)
{
  *a1 = *v1;
  return 0;
}

uint64_t getEnumTagSinglePayload for ActionDispatcherSubscriber(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1878A6410);
}

uint64_t destructiveInjectEnumTag for AccessibilityScrollableContext(uint64_t result, unsigned int a2)
{
  if (a2 > 2)
  {
    *(void *)(result + 62) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)double result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)double result = a2 - 3;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 70) = a2;
  return result;
}

BOOL IdentityLinkBox.update(property:phase:)(int *a1)
{
  int v2 = *v1;
  int v3 = *v1;
  if (!*v1)
  {
    int v3 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1) {
      int v4 = static ViewIdentity.nextSeed + 1;
    }
    else {
      int v4 = 1;
    }
    static ViewIdentity.nextSeed = v4;
  }
  *a1 = v3;
  BOOL result = v3 != v2;
  *uint64_t v1 = v3;
  return result;
}

uint64_t specialized implicit closure #1 in ListSectionInfo.sectionIDs.getter@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 120);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ScrollContentBackground(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)(a1, a2, *(void *)(v3 + 48), a3);
}

_UNKNOWN **base witness table accessor for ViewModifier in CustomButtonMenuStyleWriter<A>()
{
  return &protocol witness table for CustomButtonMenuStyleWriter<A>;
}

_OWORD *assignWithTake for SymmetricallyScaledTextLayout(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in ControlGroupStyleModifier<A>()
{
  return &protocol witness table for ControlGroupStyleModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in UIKitButtonStyleModifier<A>()
{
  return &protocol witness table for UIKitButtonStyleModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in SearchFieldStyleModifier<A>()
{
  return &protocol witness table for SearchFieldStyleModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in TokenFieldStyleModifier<A>()
{
  return &protocol witness table for TokenFieldStyleModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in TextFieldStyleModifier<A>()
{
  return &protocol witness table for TextFieldStyleModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in LazyPlatformItemWriter<A, B>()
{
  return &protocol witness table for LazyPlatformItemWriter<A, B>;
}

_UNKNOWN **base witness table accessor for ViewModifier in GroupBoxStyleModifier<A>()
{
  return &protocol witness table for GroupBoxStyleModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in _BackdropGroupEffect()
{
  return &protocol witness table for _BackdropGroupEffect;
}

_UNKNOWN **base witness table accessor for ViewModifier in StepperStyleModifier<A>()
{
  return &protocol witness table for StepperStyleModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in SliderStyleModifier<A>()
{
  return &protocol witness table for SliderStyleModifier<A>;
}

_UNKNOWN **base witness table accessor for View in CustomProgressView<A, B>()
{
  return &protocol witness table for CustomProgressView<A, B>;
}

uint64_t initializeWithTake for WheelPicker_Phone(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(void *)(v7 + 16) = v9;
  return a1;
}

_UNKNOWN **base witness table accessor for ViewModifier in MenuStyleModifier<A>()
{
  return &protocol witness table for MenuStyleModifier<A>;
}

uint64_t associated type witness table accessor for View.Body : View in SidebarListBody<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t getEnumTagSinglePayload for NavigationState.StackContent.PositionedView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ViewInputFlagModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for ViewInputFlagModifier<A>);
}

uint64_t BarAppearanceBridge.uiPreferredStatusBarStyle.getter()
{
  if (!BarAppearanceBridge.uiHasStatusBarOpinion.getter()) {
    return 0;
  }
  uint64_t v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastBarUpdates);
  swift_beginAccess();
  uint64_t v2 = *v1;
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  if (!*(void *)(v2 + 16))
  {
LABEL_8:
    outlined destroy of ToolbarPlacement.Role((uint64_t)v10);
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v10);
  if ((v4 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  int v5 = *(unsigned __int8 *)(*(void *)(v2 + 56) + 2 * v3 + 1);
  swift_bridgeObjectRelease();
  if (v5 == 2)
  {
    uint64_t v7 = 0;
  }
  else
  {
    unsigned __int8 v9 = v5 & 1;
    closure #1 in BarAppearanceBridge.uiPreferredStatusBarStyle.getter(&v9, &v8);
    uint64_t v7 = v8;
  }
  outlined destroy of ToolbarPlacement.Role((uint64_t)v10);
  return v7;
}

BOOL BarAppearanceBridge.uiHasStatusBarOpinion.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
  swift_beginAccess();
  uint64_t v3 = *v2;
  uint64_t v12 = 0;
  memset(v11, 0, sizeof(v11));
  if (!*(void *)(v3 + 16)) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
  if ((v5 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    outlined destroy of ToolbarPlacement.Role((uint64_t)v11);
    return 0;
  }
  uint64_t v6 = *(void *)(v3 + 56) + 80 * v4;
  int v7 = *(unsigned __int8 *)(v6 + 57);
  int v8 = *(unsigned __int8 *)(v6 + 58);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v11);
  if (v7 == 2)
  {
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    v11[0] = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment);
    EnvironmentValues.explicitPreferredColorScheme.getter();
    swift_release();
    swift_release();
    swift_release();
    if (v10 == 2) {
      return 1;
    }
  }
  return v8 != 0;
}

uint64_t specialized ToolbarBridge.adjustEntries(in:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t *, uint64_t))
{
  uint64_t v57 = a3;
  uint64_t v58 = a4;
  type metadata accessor for ToolbarStorage.Entry?(0);
  MEMORY[0x1F4188790](v6 - 8);
  int v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v59 = v9;
  uint64_t v60 = v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v62 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v65);
  uint64_t v12 = (uint64_t *)(a2 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  uint64_t v13 = *v12;
  if (*(void *)(*v12 + 16) && (uint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v65), (v15 & 1) != 0))
  {
    uint64_t v16 = (uint64_t *)(*(void *)(v13 + 56) + 24 * v14);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    uint64_t v19 = (void *)v16[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v17 = MEMORY[0x1E4FBC860];
    unint64_t v18 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    uint64_t v19 = (void *)specialized Dictionary.init(dictionaryLiteral:)(v17);
  }
  swift_endAccess();
  outlined destroy of Toolbar.BarLocation((uint64_t)&v65);
  uint64_t v20 = *(void *)(v17 + 16);
  if (!v20)
  {
LABEL_37:
    outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v65);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v63 = *v12;
    *uint64_t v12 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, v18, (uint64_t)v19, (uint64_t)&v65, isUniquelyReferenced_nonNull_native);
    *uint64_t v12 = v63;
    swift_bridgeObjectRelease();
    outlined destroy of Toolbar.BarLocation((uint64_t)&v65);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v53 = v12;
  uint64_t v54 = a1;
  uint64_t v21 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56);
  uint64_t v61 = (unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
  swift_bridgeObjectRetain();
  uint64_t v52 = v17;
  uint64_t v22 = (uint64_t *)(v17 + 40);
  uint64_t v23 = v59;
  uint64_t v55 = v21;
  unint64_t v56 = v18;
  while (!*(void *)(v18 + 16))
  {
    (*v21)(v8, 1, 1, v23);
LABEL_8:
    outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.Entry?);
LABEL_9:
    v22 += 2;
    if (!--v20)
    {
      uint64_t v17 = v52;
      swift_bridgeObjectRelease();
      uint64_t v12 = v53;
      a1 = v54;
      goto LABEL_37;
    }
  }
  uint64_t v24 = *(v22 - 1);
  uint64_t v25 = *v22;
  swift_bridgeObjectRetain_n();
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
  if (v27)
  {
    _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0(*(void *)(v18 + 56) + *(void *)(v60 + 72) * v26, (uint64_t)v8, type metadata accessor for ToolbarStorage.Entry);
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = 1;
  }
  (*v21)(v8, v28, 1, v23);
  swift_bridgeObjectRelease();
  if ((*v61)(v8, 1, v23) == 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v8, v62, type metadata accessor for ToolbarStorage.Entry);
  swift_bridgeObjectRetain();
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  int v64 = v19;
  swift_bridgeObjectRetain();
  unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
  uint64_t v32 = v19[2];
  BOOL v33 = (v30 & 1) == 0;
  uint64_t v34 = v32 + v33;
  if (!__OFADD__(v32, v33))
  {
    char v35 = v30;
    if (v19[3] >= v34)
    {
      if (v29)
      {
        if ((v30 & 1) == 0) {
          goto LABEL_25;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v35 & 1) == 0) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, v29);
      unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
      if ((v35 & 1) != (v37 & 1)) {
        goto LABEL_40;
      }
      unint64_t v31 = v36;
      if ((v35 & 1) == 0)
      {
LABEL_25:
        uint64_t v39 = 0;
        char v40 = -1;
LABEL_26:
        uint64_t v65 = v39;
        unsigned __int8 v66 = v40;
        v58(v62, &v65, v57);
        unsigned __int8 v41 = v66;
        if (v66 == 255)
        {
          if (v35)
          {
            uint64_t v19 = v64;
            swift_arrayDestroy();
            specialized _NativeDictionary._delete(at:)(v31, (uint64_t)v19);
LABEL_31:
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            uint64_t v19 = v64;
          }
        }
        else
        {
          uint64_t v42 = v65;
          uint64_t v19 = v64;
          if (v35)
          {
            uint64_t v43 = v64[7] + 16 * v31;
            *(void *)uint64_t v43 = v65;
            *(unsigned char *)(v43 + 8) = v41;
            goto LABEL_31;
          }
          v64[(v31 >> 6) + 8] |= 1 << v31;
          uint64_t v44 = (uint64_t *)(v19[6] + 16 * v31);
          *uint64_t v44 = v24;
          v44[1] = v25;
          uint64_t v45 = v19[7] + 16 * v31;
          *(void *)uint64_t v45 = v42;
          *(unsigned char *)(v45 + 8) = v41;
          uint64_t v46 = v19[2];
          BOOL v47 = __OFADD__(v46, 1);
          uint64_t v48 = v46 + 1;
          if (v47) {
            goto LABEL_39;
          }
          v19[2] = v48;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v62, type metadata accessor for ToolbarStorage.Entry);
        uint64_t v21 = v55;
        unint64_t v18 = v56;
        uint64_t v23 = v59;
        goto LABEL_9;
      }
    }
    uint64_t v38 = v64[7] + 16 * v31;
    uint64_t v39 = *(void *)v38;
    char v40 = *(unsigned char *)(v38 + 8);
    goto LABEL_26;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v12);
  uint64_t v7 = (void *)MEMORY[0x18C119DF0](&v14);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v12);
  if (v7)
  {
    id v15 = v7;
    char v16 = 2;
    uint64_t v11 = MEMORY[0x1E4FBC860];
    memset(v12, 0, sizeof(v12));
    long long v13 = xmmword_188382680;
    char v8 = specialized static Toolbar.BarLocation.== infix(_:_:)(a2, (uint64_t)v12);
    outlined destroy of Toolbar.BarLocation((uint64_t)v12);
    if (v8) {
      char v16 = 0;
    }
    uint64_t v9 = specialized ToolbarBridge.entryCount(in:)(a2);
    if (__OFSUB__(v9, 1))
    {
      __break(1u);
    }
    else
    {
      v12[0] = 0;
      double v10 = MEMORY[0x1F4188790](v9);
      specialized ToolbarBridge.adjustEntries(in:_:)(a2, a3, v10);
      *a4 = v11;
    }
  }
  else
  {
    *a4 = MEMORY[0x1E4FBC860];
  }
}

uint64_t specialized ToolbarBridge.adjustEntries(in:_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t *), uint64_t a3)
{
  uint64_t v57 = a2;
  uint64_t v58 = a3;
  _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, &lazy cache variable for type metadata for ToolbarStorage.Entry?, type metadata accessor for ToolbarStorage.Entry, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v51 - v6;
  uint64_t v8 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v59 = v8;
  uint64_t v60 = v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v62 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v65);
  uint64_t v11 = (uint64_t *)(v3 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  uint64_t v12 = *v11;
  if (*(void *)(*v11 + 16) && (uint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v65), (v14 & 1) != 0))
  {
    id v15 = (uint64_t *)(*(void *)(v12 + 56) + 24 * v13);
    uint64_t v16 = *v15;
    unint64_t v17 = v15[1];
    unint64_t v18 = (void *)v15[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v16 = MEMORY[0x1E4FBC860];
    unint64_t v17 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    unint64_t v18 = (void *)specialized Dictionary.init(dictionaryLiteral:)(v16);
  }
  swift_endAccess();
  outlined destroy of Toolbar.BarLocation((uint64_t)&v65);
  uint64_t v19 = *(void *)(v16 + 16);
  if (!v19)
  {
LABEL_37:
    outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v65);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v63 = *v11;
    *uint64_t v11 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, v17, (uint64_t)v18, (uint64_t)&v65, isUniquelyReferenced_nonNull_native);
    *uint64_t v11 = v63;
    swift_bridgeObjectRelease();
    outlined destroy of Toolbar.BarLocation((uint64_t)&v65);
    swift_endAccess();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v53 = v11;
  uint64_t v54 = a1;
  uint64_t v20 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v60 + 56);
  uint64_t v61 = (unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48);
  swift_bridgeObjectRetain();
  uint64_t v52 = v16;
  uint64_t v21 = (uint64_t *)(v16 + 40);
  uint64_t v22 = v20;
  uint64_t v23 = v59;
  uint64_t v55 = v22;
  unint64_t v56 = v17;
  while (!*(void *)(v17 + 16))
  {
    (*v22)(v7, 1, 1, v23);
LABEL_8:
    outlined destroy of ToolbarStorage.Entry?((uint64_t)v7, &lazy cache variable for type metadata for ToolbarStorage.Entry?, type metadata accessor for ToolbarStorage.Entry, MEMORY[0x1E4FBB718]);
LABEL_9:
    v21 += 2;
    if (!--v19)
    {
      uint64_t v16 = v52;
      swift_bridgeObjectRelease();
      uint64_t v11 = v53;
      a1 = v54;
      goto LABEL_37;
    }
  }
  uint64_t v24 = *(v21 - 1);
  uint64_t v25 = *v21;
  swift_bridgeObjectRetain_n();
  unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
  if (v27)
  {
    _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(*(void *)(v17 + 56) + *(void *)(v60 + 72) * v26, (uint64_t)v7, type metadata accessor for ToolbarStorage.Entry);
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = 1;
  }
  (*v22)(v7, v28, 1, v23);
  swift_bridgeObjectRelease();
  if ((*v61)(v7, 1, v23) == 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }
  outlined init with take of (ToolbarStorage.Entry, Int)((uint64_t)v7, v62, type metadata accessor for ToolbarStorage.Entry);
  swift_bridgeObjectRetain();
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  int v64 = v18;
  swift_bridgeObjectRetain();
  unint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
  uint64_t v32 = v18[2];
  BOOL v33 = (v30 & 1) == 0;
  uint64_t v34 = v32 + v33;
  if (!__OFADD__(v32, v33))
  {
    char v35 = v30;
    if (v18[3] >= v34)
    {
      if (v29)
      {
        if ((v30 & 1) == 0) {
          goto LABEL_25;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if ((v35 & 1) == 0) {
          goto LABEL_25;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v34, v29);
      unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v24, v25);
      if ((v35 & 1) != (v37 & 1)) {
        goto LABEL_40;
      }
      unint64_t v31 = v36;
      if ((v35 & 1) == 0)
      {
LABEL_25:
        uint64_t v39 = 0;
        char v40 = -1;
LABEL_26:
        uint64_t v65 = v39;
        unsigned __int8 v66 = v40;
        v57(v62, &v65);
        unsigned __int8 v41 = v66;
        if (v66 == 255)
        {
          if (v35)
          {
            unint64_t v18 = v64;
            swift_arrayDestroy();
            specialized _NativeDictionary._delete(at:)(v31, (uint64_t)v18);
LABEL_31:
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            unint64_t v18 = v64;
          }
        }
        else
        {
          uint64_t v42 = v65;
          unint64_t v18 = v64;
          if (v35)
          {
            uint64_t v43 = v64[7] + 16 * v31;
            *(void *)uint64_t v43 = v65;
            *(unsigned char *)(v43 + 8) = v41;
            goto LABEL_31;
          }
          v64[(v31 >> 6) + 8] |= 1 << v31;
          uint64_t v44 = (uint64_t *)(v18[6] + 16 * v31);
          *uint64_t v44 = v24;
          v44[1] = v25;
          uint64_t v45 = v18[7] + 16 * v31;
          *(void *)uint64_t v45 = v42;
          *(unsigned char *)(v45 + 8) = v41;
          uint64_t v46 = v18[2];
          BOOL v47 = __OFADD__(v46, 1);
          uint64_t v48 = v46 + 1;
          if (v47) {
            goto LABEL_39;
          }
          v18[2] = v48;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined destroy of ToolbarStorage.Entry(v62, type metadata accessor for ToolbarStorage.Entry);
        uint64_t v22 = v55;
        unint64_t v17 = v56;
        uint64_t v23 = v59;
        goto LABEL_9;
      }
    }
    uint64_t v38 = v64[7] + 16 * v31;
    uint64_t v39 = *(void *)v38;
    char v40 = *(unsigned char *)(v38 + 8);
    goto LABEL_26;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (uint64_t *)(v20[7] + 24 * v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v21 = a1;
      v21[1] = a2;
      v21[2] = a3;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of Toolbar.BarLocation(a4, (uint64_t)v25);
  return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v25, a1, a2, a3, v20);
}

{
  void *v5;
  void **v6;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  uint64_t *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t vars8;

  uint64_t v6 = (void **)v5;
  uint64_t v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a5 & 1) != 0)
  {
LABEL_7:
    uint64_t v20 = *v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (uint64_t *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *uint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  uint64_t v20 = *v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v14, a3, a4, a1, a2, v20);

  return swift_bridgeObjectRetain();
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(unsigned char *))Toolbar.BarLocation.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(unsigned char *))ToolbarPlacement.Role.hash(into:), (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

void type metadata accessor for [ToolbarStorage.Entry](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t specialized ToolbarBridge.entryCount(in:)(uint64_t a1)
{
  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)v9);
  uint64_t v2 = (uint64_t *)(v1 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  uint64_t v3 = *v2;
  if (*(void *)(*v2 + 16) && (uint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v9), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(*(void *)(v3 + 56) + 24 * v4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v6 = MEMORY[0x1E4FBC860];
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    specialized Dictionary.init(dictionaryLiteral:)(v6);
  }
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of Toolbar.BarLocation((uint64_t)v9);
  uint64_t v7 = *(void *)(v6 + 16);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t BarAppearanceBridge.update(environment:)(void *a1)
{
  uint64_t v2 = v1;
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage) == 1)
  {
    uint64_t v4 = a1[1];
    type metadata accessor for ModifiedContent<Divider, OpacityRendererEffect>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey);
    swift_retain_n();
    if (v4)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    uint64_t v5 = swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v5);
    swift_bridgeObjectRelease();
    type metadata accessor for ModifiedContent<Divider, OpacityRendererEffect>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>, (uint64_t)&type metadata for EnvironmentValues.HostingControllerManagedBarsKey, (uint64_t)&protocol witness table for EnvironmentValues.HostingControllerManagedBarsKey);
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.setter();
    if (v4)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
  swift_beginAccess();
  uint64_t v7 = *v6;
  if (*(void *)(v7 + 16) && (uint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v24), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(*(void *)(v7 + 56) + 80 * v8 + 8);
    swift_endAccess();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
    if (v10)
    {
      uint64_t v26 = 0;
      long long v24 = 0u;
      long long v25 = 0u;
      if (a1[1])
      {
        type metadata accessor for ModifiedContent<Divider, OpacityRendererEffect>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarForegroundStyleKey, MEMORY[0x1E4F40930]);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarForegroundStyleKey);
        swift_retain_n();
        swift_retain_n();
        swift_retain_n();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        type metadata accessor for ModifiedContent<Divider, OpacityRendererEffect>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarForegroundStyleKey, MEMORY[0x1E4F40930]);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarForegroundStyleKey);
        swift_retain_n();
        swift_retain_n();
        PropertyList.subscript.getter();
      }
      swift_release_n();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, (uint64_t)&v24, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
      type metadata accessor for ModifiedContent<Divider, OpacityRendererEffect>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarForegroundStyleKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarForegroundStyleKey);
      swift_bridgeObjectRetain();
      swift_retain();
      PropertyList.subscript.setter();
      if (a1[1])
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
        swift_release_n();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
      }
      else
      {
        swift_release();
        swift_release();
        swift_release_n();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_release();
      swift_release();
    }
    swift_release();
  }
  else
  {
    swift_endAccess();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
  }
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  uint64_t v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barBackgroundViewModels);
  swift_beginAccess();
  if (*(void *)(*v12 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v24), (v13 & 1) != 0))
  {
    swift_endAccess();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
  }
  else
  {
    swift_endAccess();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
    type metadata accessor for PrimaryBarViewModel(0);
    uint64_t v14 = swift_allocObject();
    LOBYTE(v24) = 0;
    Published.init(initialValue:)();
    LOBYTE(v24) = 2;
    type metadata accessor for Published<Visibility>(0, (unint64_t *)&lazy cache variable for type metadata for ColorScheme?, MEMORY[0x1E4F3F468], MEMORY[0x1E4FBB718]);
    Published.init(initialValue:)();
    uint64_t v26 = 0;
    long long v24 = 0u;
    long long v25 = 0u;
    swift_beginAccess();
    swift_retain();
    char v15 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = *v12;
    *uint64_t v12 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, (uint64_t)&v24, v15);
    *uint64_t v12 = v23;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
    swift_endAccess();
    swift_release();
  }
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  swift_beginAccess();
  uint64_t v16 = *v12;
  if (*(void *)(*v12 + 16) && (uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v24), (v18 & 1) != 0))
  {
    uint64_t v19 = *(__objc2_class ***)(*(void *)(v16 + 56) + 8 * v17);
    swift_endAccess();
    swift_retain();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
    if (*v19 == _TtC7SwiftUI19PrimaryBarViewModel) {
      goto LABEL_31;
    }
    swift_release();
  }
  else
  {
    swift_endAccess();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v24);
  }
  uint64_t v19 = 0;
LABEL_31:
  *(void *)&long long v24 = v19;
  type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>();
  _s10Foundation9IndexPathVACSQAAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>);
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (a1[1])
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  uint64_t v20 = a1[1];
  uint64_t v21 = (void *)(v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment);
  *uint64_t v21 = *a1;
  v21[1] = v20;
  swift_retain();
  swift_retain();
  swift_release();
  return swift_release();
}

void type metadata accessor for ModifiedContent<Divider, OpacityRendererEffect>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<Divider, OpacityRendererEffect>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void UINavigationItem.adoptNavigationItem(_:updates:forceUpdate:)(void *a1, uint64_t a2, int a3, char a4)
{
  uint64_t v5 = v4;
  char v7 = BYTE2(a3);
  memset(aBlock, 0, sizeof(aBlock));
  char v10 = specialized Set.contains(_:)((uint64_t)aBlock, a2);
  outlined destroy of Toolbar.BarLocation((uint64_t)aBlock);
  if (v10 & 1) != 0 || (a4) {
    UINavigationItem.updateTitleIfNeeded(_:)(a1);
  }
  memset(aBlock, 0, 24);
  *(_OWORD *)&aBlock[24] = xmmword_18834FC50;
  char v11 = specialized Set.contains(_:)((uint64_t)aBlock, a2);
  outlined destroy of Toolbar.BarLocation((uint64_t)aBlock);
  if (v11 & 1) != 0 || (a4)
  {
    id v12 = objc_msgSend(a1, sel_centerItemGroups);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
    uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)aBlock = v13;
    id v14 = objc_msgSend(v5, sel_centerItemGroups);
    unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v16 = specialized _ArrayProtocol.filter(_:)(v15);
    swift_bridgeObjectRelease();
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v16);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setCenterItemGroups_, isa);
  }
  memset(aBlock, 0, 24);
  *(_OWORD *)&aBlock[24] = xmmword_18835ED10;
  char v18 = specialized Set.contains(_:)((uint64_t)aBlock, a2);
  outlined destroy of Toolbar.BarLocation((uint64_t)aBlock);
  if (v18 & 1) != 0 || (a4)
  {
    id v19 = objc_msgSend(v5, sel__largeTitleAccessoryView);

    if (!v19
      || (id v20 = objc_msgSend(v5, sel__largeTitleAccessoryView)) != 0
      && (uint64_t v21 = v20,
          _s7SwiftUI16UIKitBarItemHostCyAA0dE4ViewVGMaTm_0(0, &lazy cache variable for type metadata for UIKitBarItemHost<BarItemView>, (uint64_t (*)(void))lazy protocol witness table accessor for type BarItemView and conformance BarItemView, (uint64_t)&type metadata for BarItemView, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitBarItemHost), uint64_t v22 = swift_dynamicCastClass(), v21, v22))
    {
      id v23 = objc_msgSend(a1, sel__largeTitleAccessoryView);
      objc_msgSend(v5, sel__setLargeTitleAccessoryView_alignToBaseline_, v23, 0);
    }
  }
  memset(aBlock, 0, 24);
  *(_OWORD *)&aBlock[24] = xmmword_18838AA10;
  char v24 = specialized Set.contains(_:)((uint64_t)aBlock, a2);
  outlined destroy of Toolbar.BarLocation((uint64_t)aBlock);
  if (v24 & 1) != 0 || (a4) {
    UINavigationItem.updateTrailingItemsIfNeeded(_:)(a1, (SEL *)&selRef_trailingItemGroups, (SEL *)&selRef_rightBarButtonItems, (SEL *)&selRef_setTrailingItemGroups_);
  }
  memset(aBlock, 0, 24);
  *(_OWORD *)&aBlock[24] = xmmword_188382680;
  char v25 = specialized Set.contains(_:)((uint64_t)aBlock, a2);
  outlined destroy of Toolbar.BarLocation((uint64_t)aBlock);
  if (v25 & 1) != 0 || (a4) {
    UINavigationItem.updateTrailingItemsIfNeeded(_:)(a1, (SEL *)&selRef_leadingItemGroups, (SEL *)&selRef_leftBarButtonItems, (SEL *)&selRef_setLeadingItemGroups_);
  }
  memset(aBlock, 0, 24);
  *(_OWORD *)&aBlock[24] = xmmword_18838AA20;
  specialized Set.contains(_:)((uint64_t)aBlock, a2);
  outlined destroy of Toolbar.BarLocation((uint64_t)aBlock);
  UINavigationItem.updateSearchControllerIfNeeded(_:)(a1);
  if (v7 & 2) != 0 || (a4)
  {
    id v26 = objc_msgSend(a1, sel_titleMenuProvider);
    if (v26)
    {
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = v26;
      *(void *)&aBlock[32] = partial apply for thunk for @escaping @callee_unowned @convention(block) (@unowned NSArray) -> (@autoreleased UIMenu?);
      uint64_t v36 = v27;
      *(void *)aBlock = MEMORY[0x1E4F143A8];
      *(void *)&aBlock[8] = 1107296256;
      *(void *)&aBlock[16] = thunk for @escaping @callee_guaranteed (@guaranteed [UIMenuElement]) -> (@owned UIMenu?);
      *(void *)&aBlock[24] = &block_descriptor_74;
      id v26 = _Block_copy(aBlock);
      swift_release();
    }
    objc_msgSend(v5, sel_setTitleMenuProvider_, v26);
    _Block_release(v26);
  }
  if (v7 & 1) != 0 || (a4)
  {
    id v28 = objc_msgSend(a1, sel_documentProperties);
    id v29 = objc_msgSend(v5, sel_documentProperties);
    if (!v29
      || (char v30 = v29,
          swift_getObjectType(),
          unsigned int v31 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI),
          v30,
          v31))
    {
      objc_msgSend(a1, sel_setDocumentProperties_, 0);
      objc_msgSend(v5, sel_setDocumentProperties_, v28);
    }
  }
  if (v7 & 4) != 0 || (a4)
  {
    uint64_t v32 = UINavigationItem.renameDelegate.getter();
    swift_unknownObjectRelease();
    if (v32
      || UINavigationItem.renameDelegate.getter()
      && (type metadata accessor for ToolbarPlatformDelegate(),
          uint64_t v34 = swift_dynamicCastClass(),
          swift_unknownObjectRelease(),
          v34))
    {
      UINavigationItem.renameDelegate.getter();
      UINavigationItem.renameDelegate.setter();
    }
  }
  id v33 = objc_msgSend(a1, sel_customizationIdentifier);
  objc_msgSend(v5, sel_setCustomizationIdentifier_, v33);
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  Toolbar.BarLocation.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = ~v5;
  while (2)
  {
    outlined init with copy of Toolbar.BarLocation(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v18);
    outlined init with copy of Toolbar.BarLocation((uint64_t)v18, (uint64_t)v13);
    outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v15);
    switch(v14)
    {
      case 0:
        if (*((void *)&v16 + 1)) {
          goto LABEL_36;
        }
        goto LABEL_42;
      case 1:
        if (*((void *)&v16 + 1) == 1) {
          goto LABEL_42;
        }
        goto LABEL_36;
      case 2:
        if (*((void *)&v16 + 1) == 2) {
          goto LABEL_42;
        }
        goto LABEL_36;
      case 3:
        if (*((void *)&v16 + 1) == 3) {
          goto LABEL_42;
        }
        goto LABEL_36;
      case 4:
        if (*((void *)&v16 + 1) == 4) {
          goto LABEL_42;
        }
        goto LABEL_36;
      case 5:
        if (*((void *)&v16 + 1) == 5) {
          goto LABEL_42;
        }
        goto LABEL_36;
      case 6:
        if (*((void *)&v16 + 1) == 6) {
          goto LABEL_42;
        }
        goto LABEL_36;
      case 7:
        if (*((void *)&v16 + 1) == 7) {
          goto LABEL_42;
        }
        goto LABEL_36;
      case 8:
        if (*((void *)&v16 + 1) == 8) {
          goto LABEL_42;
        }
        goto LABEL_36;
      case 9:
        if (*((void *)&v16 + 1) == 9) {
          goto LABEL_42;
        }
        goto LABEL_36;
      case 10:
        if (*((void *)&v16 + 1) == 10) {
          goto LABEL_42;
        }
        goto LABEL_36;
      case 11:
        if (*((void *)&v16 + 1) == 11) {
          goto LABEL_42;
        }
        goto LABEL_36;
      case 12:
        if (*((void *)&v16 + 1) == 12) {
          goto LABEL_42;
        }
        goto LABEL_36;
      case 13:
        if (*((void *)&v16 + 1) == 13) {
          goto LABEL_42;
        }
        goto LABEL_36;
      case 14:
        if (*((void *)&v16 + 1) != 14) {
          goto LABEL_36;
        }
        goto LABEL_42;
      default:
        outlined init with copy of Toolbar.BarLocation((uint64_t)v13, (uint64_t)v12);
        if (*((void *)&v16 + 1) < 0xFuLL)
        {
          outlined destroy of AnyHashable((uint64_t)v12);
LABEL_36:
          _sypSgWOhTm_3((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation), (uint64_t)&type metadata for Toolbar.BarLocation, (uint64_t)&type metadata for Toolbar.BarLocation, (uint64_t (*)(void))type metadata accessor for (Badge, Spacer));
          goto LABEL_37;
        }
        v10[0] = v15;
        v10[1] = v16;
        uint64_t v11 = v17;
        char v8 = MEMORY[0x18C1174E0](v12, v10);
        outlined destroy of AnyHashable((uint64_t)v10);
        outlined destroy of AnyHashable((uint64_t)v12);
        if ((v8 & 1) == 0)
        {
          outlined destroy of Toolbar.BarLocation((uint64_t)v13);
LABEL_37:
          outlined destroy of Toolbar.BarLocation((uint64_t)v18);
          unint64_t v6 = (v6 + 1) & v7;
          if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return 0;
          }
          continue;
        }
LABEL_42:
        outlined destroy of Toolbar.BarLocation((uint64_t)v13);
        outlined destroy of Toolbar.BarLocation((uint64_t)v18);
        return 1;
    }
  }
}

{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  _OWORD v10[2];
  uint64_t v11;
  unsigned char v12[40];
  unsigned char v13[24];
  uint64_t v14;
  long long v15;
  long long v16;
  uint64_t v17;
  unsigned char v18[48];

  if (!*(void *)(a2 + 16)) {
    return 0;
  }
  Hasher.init(_seed:)();
  ToolbarPlacement.Role.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    return 0;
  }
  uint64_t v7 = ~v5;
  while (2)
  {
    outlined init with copy of ToolbarPlacement.Role(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v18);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v18, (uint64_t)v13);
    outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v15);
    switch(v14)
    {
      case 0:
        if (*((void *)&v16 + 1)) {
          goto LABEL_20;
        }
        goto LABEL_26;
      case 1:
        if (*((void *)&v16 + 1) == 1) {
          goto LABEL_26;
        }
        goto LABEL_20;
      case 2:
        if (*((void *)&v16 + 1) == 2) {
          goto LABEL_26;
        }
        goto LABEL_20;
      case 3:
        if (*((void *)&v16 + 1) == 3) {
          goto LABEL_26;
        }
        goto LABEL_20;
      case 4:
        if (*((void *)&v16 + 1) == 4) {
          goto LABEL_26;
        }
        goto LABEL_20;
      case 5:
        if (*((void *)&v16 + 1) == 5) {
          goto LABEL_26;
        }
        goto LABEL_20;
      case 6:
        if (*((void *)&v16 + 1) != 6) {
          goto LABEL_20;
        }
        goto LABEL_26;
      default:
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v13, (uint64_t)v12);
        if (*((void *)&v16 + 1) < 7uLL)
        {
          outlined destroy of AnyHashable((uint64_t)v12);
LABEL_20:
          _sypSgWOhTm_3((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role), (uint64_t)&type metadata for ToolbarPlacement.Role, (uint64_t)&type metadata for ToolbarPlacement.Role, (uint64_t (*)(void))type metadata accessor for (Badge, Spacer));
          goto LABEL_21;
        }
        v10[0] = v15;
        v10[1] = v16;
        uint64_t v11 = v17;
        char v8 = MEMORY[0x18C1174E0](v12, v10);
        outlined destroy of AnyHashable((uint64_t)v10);
        outlined destroy of AnyHashable((uint64_t)v12);
        if ((v8 & 1) == 0)
        {
          outlined destroy of ToolbarPlacement.Role((uint64_t)v13);
LABEL_21:
          outlined destroy of ToolbarPlacement.Role((uint64_t)v18);
          unint64_t v6 = (v6 + 1) & v7;
          if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return 0;
          }
          continue;
        }
LABEL_26:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v13);
        outlined destroy of ToolbarPlacement.Role((uint64_t)v18);
        return 1;
    }
  }
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v14;

  uint64_t v3 = type metadata accessor for CommandGroupPlacementBox(0);
  Swift::Int v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3 - 8);
  unint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (Hasher.init(_seed:)(),
        type metadata accessor for CommandGroupPlacement(0),
        UUID.hash(into:)(),
        uint64_t v7 = Hasher._finalize()(),
        char v8 = -1 << *(unsigned char *)(a2 + 32),
        char v9 = v7 & ~v8,
        ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    char v10 = ~v8;
    uint64_t v11 = *(void *)(v4 + 72);
    do
    {
      outlined init with copy of CommandGroupPlacementBox(*(void *)(a2 + 48) + v11 * v9, (uint64_t)v6);
      id v12 = static UUID.== infix(_:_:)();
      outlined destroy of ArchivedViewCore.Metadata((uint64_t)v6, type metadata accessor for CommandGroupPlacementBox);
      if (v12) {
        break;
      }
      char v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    id v12 = 0;
  }
  return v12 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  uint64_t v13;
  void (**v14)(char *, uint64_t);
  char v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v3 = type metadata accessor for UTType();
  Swift::Int v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]), uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    char v18 = a2;
    uint64_t v11 = v4 + 16;
    id v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      lazy protocol witness table accessor for type IndexPath and conformance IndexPath((unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
      long long v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      char v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    long long v15 = 0;
  }
  return v15 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  uint64_t v13;
  void (**v14)(char *, uint64_t);
  char v15;
  uint64_t v17;
  uint64_t v18;

  uint64_t v3 = type metadata accessor for IndexPath();
  Swift::Int v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a2 + 16)
    && (lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]), uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(), v8 = -1 << *(unsigned char *)(a2 + 32), v9 = v7 & ~v8, v10 = a2 + 56, ((*(void *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    uint64_t v17 = ~v8;
    char v18 = a2;
    uint64_t v11 = v4 + 16;
    id v12 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
    uint64_t v13 = *(void *)(v11 + 56);
    uint64_t v14 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      v12(v6, *(void *)(v18 + 48) + v13 * v9, v3);
      lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
      long long v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v14)(v6, v3);
      if (v15) {
        break;
      }
      char v9 = (v9 + 1) & v17;
    }
    while (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    long long v15 = 0;
  }
  return v15 & 1;
}

{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char v8;
  unsigned char v10[40];

  if (*(void *)(a2 + 16)
    && (Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v5 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v6 = v4 & ~v5,
        ((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0))
  {
    uint64_t v7 = ~v5;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(a2 + 48) + 40 * v6, (uint64_t)v10);
      char v8 = MEMORY[0x18C1174E0](v10, a1);
      outlined destroy of AnyHashable((uint64_t)v10);
      if (v8) {
        break;
      }
      unint64_t v6 = (v6 + 1) & v7;
    }
    while (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, void (*a2)(unsigned char *), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a2(v8);
  Swift::Int v5 = Hasher._finalize()();

  return a3(a1, v5);
}

void ToolbarPlacement.Role.hash(into:)()
{
  outlined init with copy of ToolbarPlacement.Role(v0, (uint64_t)&v4);
  switch(*((void *)&v5 + 1))
  {
    case 0:
      Swift::UInt v1 = 0;
      goto LABEL_10;
    case 1:
      Swift::UInt v1 = 1;
      goto LABEL_10;
    case 2:
      Swift::UInt v1 = 2;
      goto LABEL_10;
    case 3:
      Swift::UInt v1 = 3;
      goto LABEL_10;
    case 4:
      Swift::UInt v1 = 4;
      goto LABEL_10;
    case 5:
      Swift::UInt v1 = 5;
      goto LABEL_10;
    case 6:
      Swift::UInt v1 = 7;
LABEL_10:
      Hasher._combine(_:)(v1);
      break;
    default:
      v2[0] = v4;
      v2[1] = v5;
      uint64_t v3 = v6;
      Hasher._combine(_:)(6uLL);
      AnyHashable.hash(into:)();
      outlined destroy of AnyHashable((uint64_t)v2);
      break;
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Toolbar.BarLocation()
{
  return Hasher._finalize()();
}

void Toolbar.BarLocation.hash(into:)()
{
  outlined init with copy of Toolbar.BarLocation(v0, (uint64_t)&v4);
  switch(*((void *)&v5 + 1))
  {
    case 0:
      Swift::UInt v1 = 0;
      goto LABEL_18;
    case 1:
      Swift::UInt v1 = 1;
      goto LABEL_18;
    case 2:
      Swift::UInt v1 = 2;
      goto LABEL_18;
    case 3:
      Swift::UInt v1 = 3;
      goto LABEL_18;
    case 4:
      Swift::UInt v1 = 4;
      goto LABEL_18;
    case 5:
      Swift::UInt v1 = 5;
      goto LABEL_18;
    case 6:
      Swift::UInt v1 = 6;
      goto LABEL_18;
    case 7:
      Swift::UInt v1 = 7;
      goto LABEL_18;
    case 8:
      Swift::UInt v1 = 8;
      goto LABEL_18;
    case 9:
      Swift::UInt v1 = 9;
      goto LABEL_18;
    case 0xALL:
      Swift::UInt v1 = 10;
      goto LABEL_18;
    case 0xBLL:
      Swift::UInt v1 = 11;
      goto LABEL_18;
    case 0xCLL:
      Swift::UInt v1 = 12;
      goto LABEL_18;
    case 0xDLL:
      Swift::UInt v1 = 13;
      goto LABEL_18;
    case 0xELL:
      Swift::UInt v1 = 15;
LABEL_18:
      Hasher._combine(_:)(v1);
      break;
    default:
      v2[0] = v4;
      v2[1] = v5;
      uint64_t v3 = v6;
      Hasher._combine(_:)(0xEuLL);
      AnyHashable.hash(into:)();
      outlined destroy of AnyHashable((uint64_t)v2);
      break;
  }
}

uint64_t outlined init with copy of ToolbarPlacement.Role(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of Toolbar.BarLocation(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for _PresentationTransitionOutputs.Content(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  else
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  return a1;
}

uint64_t outlined destroy of ToolbarPlacement.Role(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of Toolbar.BarLocation(uint64_t a1)
{
  return a1;
}

uint64_t destroy for _PresentationTransitionOutputs.Content(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t specialized static Toolbar.BarLocation.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)v8);
  outlined init with copy of Toolbar.BarLocation(a2, (uint64_t)&v10);
  switch(v9)
  {
    case 0:
      if (*((void *)&v11 + 1)) {
        goto LABEL_33;
      }
      goto LABEL_19;
    case 1:
      if (*((void *)&v11 + 1) == 1) {
        goto LABEL_19;
      }
      goto LABEL_33;
    case 2:
      if (*((void *)&v11 + 1) != 2) {
        goto LABEL_33;
      }
      goto LABEL_19;
    case 3:
      if (*((void *)&v11 + 1) != 3) {
        goto LABEL_33;
      }
      goto LABEL_19;
    case 4:
      if (*((void *)&v11 + 1) != 4) {
        goto LABEL_33;
      }
      goto LABEL_19;
    case 5:
      if (*((void *)&v11 + 1) != 5) {
        goto LABEL_33;
      }
      goto LABEL_19;
    case 6:
      if (*((void *)&v11 + 1) != 6) {
        goto LABEL_33;
      }
      goto LABEL_19;
    case 7:
      if (*((void *)&v11 + 1) != 7) {
        goto LABEL_33;
      }
      goto LABEL_19;
    case 8:
      if (*((void *)&v11 + 1) != 8) {
        goto LABEL_33;
      }
      goto LABEL_19;
    case 9:
      if (*((void *)&v11 + 1) != 9) {
        goto LABEL_33;
      }
      goto LABEL_19;
    case 10:
      if (*((void *)&v11 + 1) != 10) {
        goto LABEL_33;
      }
      goto LABEL_19;
    case 11:
      if (*((void *)&v11 + 1) != 11) {
        goto LABEL_33;
      }
      goto LABEL_19;
    case 12:
      if (*((void *)&v11 + 1) != 12) {
        goto LABEL_33;
      }
      goto LABEL_19;
    case 13:
      if (*((void *)&v11 + 1) != 13) {
        goto LABEL_33;
      }
      goto LABEL_19;
    case 14:
      if (*((void *)&v11 + 1) != 14) {
        goto LABEL_33;
      }
LABEL_19:
      outlined destroy of Toolbar.BarLocation((uint64_t)v8);
      char v3 = 1;
      break;
    default:
      outlined init with copy of Toolbar.BarLocation((uint64_t)v8, (uint64_t)v7);
      if (*((void *)&v11 + 1) >= 0xFuLL)
      {
        v5[0] = v10;
        v5[1] = v11;
        uint64_t v6 = v12;
        char v3 = MEMORY[0x18C1174E0](v7, v5);
        outlined destroy of AnyHashable((uint64_t)v5);
        outlined destroy of AnyHashable((uint64_t)v7);
        outlined destroy of Toolbar.BarLocation((uint64_t)v8);
      }
      else
      {
        outlined destroy of AnyHashable((uint64_t)v7);
LABEL_33:
        _s7SwiftUI7ToolbarO11BarLocationO_AEtWOhTm_0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for (Toolbar.BarLocation, Toolbar.BarLocation));
        char v3 = 0;
      }
      break;
  }
  return v3 & 1;
}

uint64_t outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)(uint64_t a1, unint64_t *a2)
{
  type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role)(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI7ToolbarO11BarLocationO_AEtWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void type metadata accessor for (Toolbar.BarLocation, Toolbar.BarLocation)()
{
  if (!lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
    }
  }
}

void UINavigationItem.updateSearchControllerIfNeeded(_:)(void *a1)
{
  id v3 = objc_msgSend(v1, sel_searchController);
  if (v3)
  {
    uint64_t v4 = v3;
    swift_getObjectType();
    unsigned __int8 v5 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI);

    if ((v5 & 1) == 0) {
      return;
    }
  }
  id v6 = objc_msgSend(v1, sel_searchController);
  id v7 = objc_msgSend(a1, sel_searchController);
  id v8 = v7;
  if (v6)
  {

    if (v8)
    {

      if (v6 == v8) {
        goto LABEL_10;
      }
    }
    goto LABEL_9;
  }
  if (v7)
  {

LABEL_9:
    id v9 = objc_msgSend(a1, sel_searchController);
    objc_msgSend(v1, sel_setSearchController_, v9);
  }
LABEL_10:
  id v10 = objc_msgSend(v1, sel_preferredSearchBarPlacement);
  if (v10 != objc_msgSend(a1, sel_preferredSearchBarPlacement)) {
    objc_msgSend(v1, sel_setPreferredSearchBarPlacement_, objc_msgSend(a1, sel_preferredSearchBarPlacement));
  }
  unsigned int v11 = objc_msgSend(v1, sel_hidesSearchBarWhenScrolling);
  if (v11 != objc_msgSend(a1, sel_hidesSearchBarWhenScrolling))
  {
    id v12 = objc_msgSend(a1, sel_hidesSearchBarWhenScrolling);
    objc_msgSend(v1, sel_setHidesSearchBarWhenScrolling_, v12);
  }
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v2 + 48) + 40 * v10, (uint64_t)v16);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v16, (uint64_t)v15);
    specialized Set._Variant.remove(_:)((uint64_t)v15, (uint64_t)v14);
    outlined destroy of ToolbarPlacement.Role?((uint64_t)v14, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    uint64_t result = outlined destroy of ToolbarPlacement.Role((uint64_t)v15);
  }
  int64_t v13 = v11 + 4;
  if (v13 >= v7) {
    return swift_release();
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    int64_t v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v8 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v8 >= v7) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v3 + 8 * v8);
    ++v13;
    if (v12) {
      goto LABEL_23;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>)
  {
    type metadata accessor for EnvironmentObjectKey<PrimaryBarViewModel>(255, &lazy cache variable for type metadata for EnvironmentObjectKey<PrimaryBarViewModel>, type metadata accessor for PrimaryBarViewModel, MEMORY[0x1E4F40640]);
    lazy protocol witness table accessor for type EnvironmentObjectKey<PrimaryBarViewModel> and conformance EnvironmentObjectKey<A>();
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>);
    }
  }
}

uint64_t specialized Set._Variant.remove(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  ToolbarPlacement.Role.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_24:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(_OWORD *)(a2 + 24) = xmmword_188382690;
    return result;
  }
  uint64_t v9 = ~v7;
  while (2)
  {
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v5 + 48) + 40 * v8, (uint64_t)v21);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v21, (uint64_t)v17);
    outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v18);
    switch(v17[3])
    {
      case 0:
        if (*((void *)&v19 + 1)) {
          goto LABEL_19;
        }
        goto LABEL_25;
      case 1:
        if (*((void *)&v19 + 1) == 1) {
          goto LABEL_25;
        }
        goto LABEL_19;
      case 2:
        if (*((void *)&v19 + 1) == 2) {
          goto LABEL_25;
        }
        goto LABEL_19;
      case 3:
        if (*((void *)&v19 + 1) == 3) {
          goto LABEL_25;
        }
        goto LABEL_19;
      case 4:
        if (*((void *)&v19 + 1) == 4) {
          goto LABEL_25;
        }
        goto LABEL_19;
      case 5:
        if (*((void *)&v19 + 1) == 5) {
          goto LABEL_25;
        }
        goto LABEL_19;
      case 6:
        if (*((void *)&v19 + 1) != 6) {
          goto LABEL_19;
        }
        goto LABEL_25;
      default:
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v17, (uint64_t)v16);
        if (*((void *)&v19 + 1) < 7uLL)
        {
          outlined destroy of AnyHashable((uint64_t)v16);
LABEL_19:
          outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v17);
          goto LABEL_20;
        }
        v14[0] = v18;
        v14[1] = v19;
        uint64_t v15 = v20;
        char v10 = MEMORY[0x18C1174E0](v16, v14);
        outlined destroy of AnyHashable((uint64_t)v14);
        outlined destroy of AnyHashable((uint64_t)v16);
        if ((v10 & 1) == 0)
        {
          outlined destroy of ToolbarPlacement.Role((uint64_t)v17);
LABEL_20:
          outlined destroy of ToolbarPlacement.Role((uint64_t)v21);
          unint64_t v8 = (v8 + 1) & v9;
          if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
            goto LABEL_24;
          }
          continue;
        }
LABEL_25:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v17);
        outlined destroy of ToolbarPlacement.Role((uint64_t)v21);
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v13 = *v2;
        v17[0] = *v2;
        *uint64_t v2 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeSet.copy()();
          uint64_t v13 = v17[0];
        }
        outlined init with take of ToolbarPlacement.Role(*(void *)(v13 + 48) + 40 * v8, a2);
        specialized _NativeSet._delete(at:)(v8);
        *uint64_t v2 = v17[0];
        return swift_bridgeObjectRelease();
    }
  }
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v5 = type metadata accessor for IndexPath();
  Swift::Int v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  _s10Foundation9IndexPathVACSQAAWlTm_0(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
  swift_bridgeObjectRetain();
  unsigned int v31 = a1;
  char v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  int64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  char v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    id v26 = v2;
    uint64_t v27 = v6;
    id v28 = a2;
    id v29 = ~v11;
    long long v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      long long v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      _s10Foundation9IndexPathVACSQAAWlTm_0(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
      long long v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        Swift::Int v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v23 = *v21;
    uint64_t v32 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      id v23 = v32;
    }
    Swift::Int v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    specialized _NativeSet._delete(at:)(v12, MEMORY[0x1E4F27DE8], &lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8], MEMORY[0x1E4F27DF0]);
    *uint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v23;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v5 = type metadata accessor for DateComponents();
  Swift::Int v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  _s10Foundation9IndexPathVACSQAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x1E4F26F90]);
  swift_bridgeObjectRetain();
  unsigned int v31 = a1;
  char v10 = dispatch thunk of Hashable._rawHashValue(seed:)();
  int64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  uint64_t v13 = v9;
  char v30 = v9 + 56;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    id v26 = v2;
    uint64_t v27 = v6;
    id v28 = a2;
    id v29 = ~v11;
    long long v16 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v14 = v16;
    uint64_t v17 = *(void *)(v15 + 56);
    while (1)
    {
      long long v18 = v13;
      v14(v8, *(void *)(v13 + 48) + v17 * v12, v5);
      _s10Foundation9IndexPathVACSQAAWlTm_0(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x1E4F26F90]);
      long long v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 - 8))(v8, v5);
      if (v19) {
        break;
      }
      unint64_t v12 = (v12 + 1) & v29;
      uint64_t v13 = v18;
      if (((*(void *)(v30 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v20 = 1;
        Swift::Int v6 = v27;
        a2 = v28;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v21 = v26;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v23 = *v21;
    uint64_t v32 = *v21;
    *uint64_t v21 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeSet.copy()();
      id v23 = v32;
    }
    Swift::Int v6 = v27;
    a2 = v28;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v27 + 32))(v28, *(void *)(v23 + 48) + v17 * v12, v5);
    specialized _NativeSet._delete(at:)(v12, MEMORY[0x1E4F26F90], (unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x1E4F26F90], MEMORY[0x1E4F26FA0]);
    *uint64_t v21 = v32;
    swift_bridgeObjectRelease();
    uint64_t v20 = 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = 1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(a2, v20, 1, v5);
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  uint64_t v2 = v1;
  int64_t v3 = result;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1 + 56;
  uint64_t v6 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(v5 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v8 = ~v6;
    swift_retain();
    uint64_t v9 = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v10 = (v9 + 1) & v8;
      do
      {
        outlined init with copy of ToolbarPlacement.Role(*(void *)(v4 + 48) + 40 * v7, (uint64_t)v28);
        Hasher.init(_seed:)();
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v28, (uint64_t)&v25);
        switch(*((void *)&v26 + 1))
        {
          case 0:
            Swift::UInt v13 = 0;
            goto LABEL_15;
          case 1:
            Swift::UInt v13 = 1;
            goto LABEL_15;
          case 2:
            Swift::UInt v13 = 2;
            goto LABEL_15;
          case 3:
            Swift::UInt v13 = 3;
            goto LABEL_15;
          case 4:
            Swift::UInt v13 = 4;
            goto LABEL_15;
          case 5:
            Swift::UInt v13 = 5;
            goto LABEL_15;
          case 6:
            Swift::UInt v13 = 7;
LABEL_15:
            Hasher._combine(_:)(v13);
            break;
          default:
            v23[0] = v25;
            v23[1] = v26;
            uint64_t v24 = v27;
            Hasher._combine(_:)(6uLL);
            AnyHashable.hash(into:)();
            outlined destroy of AnyHashable((uint64_t)v23);
            break;
        }
        Swift::Int v14 = Hasher._finalize()();
        outlined destroy of ToolbarPlacement.Role((uint64_t)v28);
        unint64_t v15 = v14 & v8;
        if (v3 >= (uint64_t)v10)
        {
          if (v15 < v10) {
            goto LABEL_5;
          }
        }
        else if (v15 >= v10)
        {
          goto LABEL_21;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_21:
          uint64_t v16 = *(void *)(v4 + 48);
          unint64_t v17 = v16 + 40 * v3;
          long long v18 = (long long *)(v16 + 40 * v7);
          if (v3 != v7 || (int64_t v3 = v7, v17 >= (unint64_t)v18 + 40))
          {
            long long v11 = *v18;
            long long v12 = v18[1];
            *(void *)(v17 + 32) = *((void *)v18 + 4);
            *(_OWORD *)unint64_t v17 = v11;
            *(_OWORD *)(v17 + 16) = v12;
            int64_t v3 = v7;
          }
        }
LABEL_5:
        unint64_t v7 = (v7 + 1) & v8;
      }
      while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    *(void *)(v5 + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v3) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *v2;
  uint64_t v20 = *(void *)(*v2 + 16);
  BOOL v21 = __OFSUB__(v20, 1);
  uint64_t v22 = v20 - 1;
  if (v21)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v19 + 16) = v22;
    ++*(_DWORD *)(v19 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t *v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  long long v11;
  long long v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  long long *v16;
  long long *v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned char v22[40];
  Swift::UInt v23;

  uint64_t v2 = v1;
  int64_t v3 = result;
  uint64_t v4 = *v1;
  uint64_t v5 = *v1 + 56;
  uint64_t v6 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v7 = (result + 1) & ~v6;
  if (((1 << v7) & *(void *)(v5 + 8 * (v7 >> 6))) != 0)
  {
    uint64_t v8 = ~v6;
    swift_retain();
    uint64_t v9 = _HashTable.previousHole(before:)();
    if ((*(void *)(v5 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
    {
      unint64_t v10 = (v9 + 1) & v8;
      do
      {
        outlined init with copy of AccessibilityRelationshipScope.Key(*(void *)(v4 + 48) + 48 * v7, (uint64_t)v22);
        Hasher.init(_seed:)();
        AnyHashable.hash(into:)();
        Hasher._combine(_:)(v23);
        Swift::UInt v13 = Hasher._finalize()();
        outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v22);
        Swift::Int v14 = v13 & v8;
        if (v3 >= (uint64_t)v10)
        {
          if (v14 < v10) {
            goto LABEL_5;
          }
        }
        else if (v14 >= v10)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v14)
        {
LABEL_11:
          unint64_t v15 = *(void *)(v4 + 48);
          uint64_t v16 = (long long *)(v15 + 48 * v3);
          unint64_t v17 = (long long *)(v15 + 48 * v7);
          if (v3 != v7 || (int64_t v3 = v7, v16 >= v17 + 3))
          {
            long long v11 = *v17;
            long long v12 = v17[2];
            v16[1] = v17[1];
            v16[2] = v12;
            *uint64_t v16 = v11;
            int64_t v3 = v7;
          }
        }
LABEL_5:
        unint64_t v7 = (v7 + 1) & v8;
      }
      while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
    }
    *(void *)(v5 + (((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v3) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  long long v18 = *v2;
  uint64_t v19 = *(void *)(*v2 + 16);
  uint64_t v20 = __OFSUB__(v19, 1);
  BOOL v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
    JUMPOUT(0x187B5CA3CLL);
  }
  *(void *)(v18 + 16) = v21;
  ++*(_DWORD *)(v18 + 36);
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  uint64_t v2 = result;
  int64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  uint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    unint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      uint64_t v9 = (v8 + 1) & v7;
      do
      {
        unint64_t v10 = *(void *)(v3 + 40);
        long long v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        long long v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::UInt v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            unint64_t v17 = (void *)(v16 + 8 * v2);
            long long v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (uint64_t v2 = v6, v17 >= v18 + 1))
            {
              *unint64_t v17 = *v18;
              uint64_t v2 = v6;
            }
          }
        }
        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }
        uint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v19 = *(void *)(v3 + 16);
  uint64_t v20 = __OFSUB__(v19, 1);
  BOOL v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  uint64_t v2 = result;
  int64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  uint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    unint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      uint64_t v9 = (v8 + 1) & v7;
      do
      {
        unint64_t v10 = *(void *)(*(void *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v10);
        long long v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9) {
            goto LABEL_5;
          }
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          long long v12 = *(void *)(v3 + 48);
          Swift::UInt v13 = (void *)(v12 + 8 * v2);
          Swift::Int v14 = (void *)(v12 + 8 * v6);
          if (v2 != v6 || (uint64_t v2 = v6, v13 >= v14 + 1))
          {
            *Swift::UInt v13 = *v14;
            uint64_t v2 = v6;
          }
        }
LABEL_5:
        uint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  unint64_t v15 = *(void *)(v3 + 16);
  uint64_t v16 = __OFSUB__(v15, 1);
  unint64_t v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

{
  uint64_t *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt *v10;
  Swift::UInt v11;
  Swift::UInt v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  uint64_t v2 = result;
  int64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  uint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    unint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      uint64_t v9 = (v8 + 1) & v7;
      do
      {
        unint64_t v10 = (Swift::UInt *)(*(void *)(v3 + 48) + 16 * v6);
        long long v11 = *v10;
        long long v12 = v10[1];
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v11);
        Hasher._combine(_:)(v12);
        Swift::UInt v13 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 < v9) {
            goto LABEL_5;
          }
        }
        else if (v13 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v13)
        {
LABEL_11:
          Swift::Int v14 = *(void *)(v3 + 48);
          unint64_t v15 = (_OWORD *)(v14 + 16 * v2);
          uint64_t v16 = (_OWORD *)(v14 + 16 * v6);
          if (v2 != v6 || (uint64_t v2 = v6, v15 >= v16 + 1))
          {
            *unint64_t v15 = *v16;
            uint64_t v2 = v6;
          }
        }
LABEL_5:
        uint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  unint64_t v17 = *(void *)(v3 + 16);
  long long v18 = __OFSUB__(v17, 1);
  uint64_t v19 = v17 - 1;
  if (v18)
  {
    __break(1u);
    JUMPOUT(0x187B5D258);
  }
  *(void *)(v3 + 16) = v19;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

uint64_t lazy protocol witness table accessor for type IndexPath and conformance IndexPath(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation9IndexPathVACSQAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ToolbarStorage.Entry?(uint64_t a1)
{
}

uint64_t type metadata accessor for PrimaryBarViewModel(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for PrimaryBarViewModel);
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<ToolbarPlacement.Role>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v20);
    uint64_t result = (void *)outlined init with take of ToolbarPlacement.Role((uint64_t)v20, *(void *)(v4 + 48) + v16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v13) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<AGAttribute>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
  }
  unint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<ObjectIdentifier>(0, &lazy cache variable for type metadata for _SetStorage<ObjectIdentifier>, MEMORY[0x1E4FBB058], MEMORY[0x1E4FBB060], MEMORY[0x1E4FBB9A8]);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_29:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v16 >= v13) {
      goto LABEL_29;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_29;
      }
      int64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_29;
        }
        int64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17)
        {
          int64_t v9 = v16 + 3;
          if (v16 + 3 >= v13) {
            goto LABEL_29;
          }
          int64_t v17 = *(void *)(v6 + 8 * v9);
          if (!v17)
          {
            int64_t v9 = v16 + 4;
            if (v16 + 4 >= v13) {
              goto LABEL_29;
            }
            int64_t v17 = *(void *)(v6 + 8 * v9);
            unint64_t v18 = v16 + 4;
            if (!v17) {
              break;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_29;
    }
    int64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_28;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  type metadata accessor for ModifiedContent<AnyView, _SafeAreaInsetsModifier>(0, &lazy cache variable for type metadata for _SetStorage<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4FBC4D0], MEMORY[0x1E4FBB9A8]);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_29:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v16 >= v13) {
      goto LABEL_29;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_29;
      }
      int64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_29;
        }
        int64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17)
        {
          int64_t v9 = v16 + 3;
          if (v16 + 3 >= v13) {
            goto LABEL_29;
          }
          int64_t v17 = *(void *)(v6 + 8 * v9);
          if (!v17)
          {
            int64_t v9 = v16 + 4;
            if (v16 + 4 >= v13) {
              goto LABEL_29;
            }
            int64_t v17 = *(void *)(v6 + 8 * v9);
            unint64_t v18 = v16 + 4;
            if (!v17) {
              break;
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v15) = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_29;
    }
    int64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_28;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  long long v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[3];

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<AccessibilityRelationshipScope.Key>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    BOOL v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      BOOL v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        BOOL v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 48 * v15;
    uint64_t result = (void *)outlined init with copy of AccessibilityRelationshipScope.Key(*(void *)(v2 + 48) + 48 * v15, (uint64_t)v23);
    int64_t v17 = (_OWORD *)(*(void *)(v4 + 48) + v16);
    unint64_t v18 = v23[0];
    int64_t v19 = v23[2];
    v17[1] = v23[1];
    v17[2] = v19;
    *int64_t v17 = v18;
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  BOOL v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    BOOL v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(&lazy cache variable for type metadata for _SetStorage<UniqueID>, (void (*)(void))lazy protocol witness table accessor for type UniqueID and conformance UniqueID);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<EventID>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    BOOL v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v13) {
      goto LABEL_28;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_28;
      }
      uint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_28;
        }
        uint64_t v22 = *(void *)(v6 + 8 * v9);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    int64_t v19 = *v17;
    unint64_t v18 = v17[1];
    uint64_t v20 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v20 = v19;
    v20[1] = v18;
  }
  id v23 = v21 + 3;
  if (v23 >= v13) {
    goto LABEL_28;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unsigned char v20[40];

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<Toolbar.BarLocation>, (void (*)(void))lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    outlined init with copy of Toolbar.BarLocation(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v20);
    uint64_t result = (void *)outlined init with take of Toolbar.BarLocation((uint64_t)v20, *(void *)(v4 + 48) + v16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v13) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CommandGroupPlacementBox(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _SetStorage<CommandGroupPlacementBox>();
  uint64_t v6 = *v0;
  unint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = v6 + 56;
  uint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v11) {
    uint64_t result = memmove(result, (const void *)(v6 + 56), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v14 = 1 << *(unsigned char *)(v6 + 32);
  unint64_t v15 = -1;
  if (v14 < 64) {
    unint64_t v15 = ~(-1 << v14);
  }
  uint64_t v16 = v15 & *(void *)(v6 + 56);
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      unint64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    BOOL v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v21 >= v17) {
      goto LABEL_28;
    }
    uint64_t v22 = *(void *)(v10 + 8 * v21);
    ++v13;
    if (!v22)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v17) {
        goto LABEL_28;
      }
      uint64_t v22 = *(void *)(v10 + 8 * v13);
      if (!v22)
      {
        int64_t v13 = v21 + 2;
        if (v21 + 2 >= v17) {
          goto LABEL_28;
        }
        uint64_t v22 = *(void *)(v10 + 8 * v13);
        if (!v22) {
          break;
        }
      }
    }
LABEL_27:
    uint64_t v16 = (v22 - 1) & v22;
    int64_t v19 = __clz(__rbit64(v22)) + (v13 << 6);
LABEL_12:
    uint64_t v20 = *(void *)(v3 + 72) * v19;
    outlined init with copy of CommandGroupPlacementBox(*(void *)(v6 + 48) + v20, (uint64_t)v5);
    uint64_t result = (void *)outlined init with take of CommandGroupPlacementBox((uint64_t)v5, *(void *)(v8 + 48) + v20);
  }
  id v23 = v21 + 3;
  if (v23 >= v17) {
    goto LABEL_28;
  }
  uint64_t v22 = *(void *)(v10 + 8 * v23);
  if (v22)
  {
    int64_t v13 = v23;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_28;
    }
    uint64_t v22 = *(void *)(v10 + 8 * v13);
    ++v23;
    if (v22) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<String>(0, &lazy cache variable for type metadata for _SetStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB1B0], MEMORY[0x1E4FBB9A8]);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    BOOL v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      BOOL v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        BOOL v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = v17[1];
    int64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  BOOL v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    BOOL v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unsigned char v21[16];

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<HashableWeakBox<Swift.AnyObject>>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  unint64_t v14 = MEMORY[0x1E4FBC838] + 8;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      uint64_t v16 = v15 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    int64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    uint64_t v16 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    int64_t v17 = 16 * v16;
    outlined init with copy of HashableWeakBox<Swift.AnyObject>(*(void *)(v2 + 48) + 16 * v16, (uint64_t)v21, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, v14, MEMORY[0x1E4F3FB58]);
    uint64_t result = (void *)outlined init with take of HashableWeakBox<Swift.AnyObject>((uint64_t)v21, *(void *)(v4 + 48) + v17);
  }
  uint64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  int64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<String>(0, &lazy cache variable for type metadata for _SetStorage<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB560], MEMORY[0x1E4FBB9A8]);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  unint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(MEMORY[0x1E4F27DE8], (void (*)(void, double))type metadata accessor for _SetStorage<IndexPath>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(void *)(*(void *)(v4 + 48) + 8 * v15) = *(void *)(*(void *)(v2 + 48) + 8 * v15);
  }
  unint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ArchivedViewState.ID>, (void (*)(void))lazy protocol witness table accessor for type ArchivedViewState.ID and conformance ArchivedViewState.ID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    BOOL v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      BOOL v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        BOOL v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    int64_t v17 = *(void *)(v2 + 48) + v16;
    unint64_t v18 = *(void *)(v4 + 48) + v16;
    int64_t v19 = *(void *)(v17 + 16);
    *(_OWORD *)unint64_t v18 = *(_OWORD *)v17;
    *(void *)(v18 + 16) = v19;
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  BOOL v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    BOOL v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unsigned char v20[48];

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ToolbarItemPlacement.Role>, (void (*)(void))lazy protocol witness table accessor for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v13) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 48 * v15;
    outlined init with copy of ToolbarItemPlacement.Role(*(void *)(v2 + 48) + 48 * v15, (uint64_t)v20);
    uint64_t result = (void *)outlined init with take of ToolbarItemPlacement.Role((uint64_t)v20, *(void *)(v4 + 48) + v16);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v13) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeSet.copy()(MEMORY[0x1E4F26F90], (void (*)(void, double))type metadata accessor for _SetStorage<DateComponents>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ToolbarDefaultItemKind.Kind>, (void (*)(void))lazy protocol witness table accessor for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v16 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      int64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        int64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v9 << 6);
LABEL_12:
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
  }
  unint64_t v18 = v16 + 3;
  if (v18 >= v13) {
    goto LABEL_28;
  }
  int64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v9 = v18;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    int64_t v17 = *(void *)(v6 + 8 * v9);
    ++v18;
    if (v17) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<String>(0, &lazy cache variable for type metadata for _SetStorage<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], MEMORY[0x1E4FBB9A8]);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    BOOL v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      BOOL v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        BOOL v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t result = (void *)outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    int64_t v17 = *(void *)(v4 + 48) + v16;
    unint64_t v18 = v23[0];
    int64_t v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)int64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  BOOL v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    BOOL v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<_ViewList_ID.Canonical>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    BOOL v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      BOOL v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        BOOL v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    unint64_t v18 = v17[1];
    int64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_retain();
  }
  uint64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  BOOL v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    BOOL v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t result;
  unint64_t v18;
  char v19;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14) {
      return outlined assign with take of WeakBox<Swift.AnyObject>(a1, v16[7] + 8 * v10, (uint64_t (*)(void))type metadata accessor for WeakBox<Swift.AnyObject>);
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v18;
  uint64_t v16 = *v4;
  if (v14) {
    return outlined assign with take of WeakBox<Swift.AnyObject>(a1, v16[7] + 8 * v10, (uint64_t (*)(void))type metadata accessor for WeakBox<Swift.AnyObject>);
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = *(void *)(v16 + 56);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t vars8;

  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(*(void *)(v16 + 56) + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  void *v16;
  char v17;
  unsigned char v18[40];

  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(v16[7] + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of AnyHashable(a2, (uint64_t)v18);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v18, a1, v16);
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t vars8;

  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(void *)(*(void *)(v16 + 56) + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  unsigned char v21[40];

  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];
      uint64_t result = swift_release();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v21);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = *(void *)(v16 + 56);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = *(void *)(v8 + 24);
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = *(void *)(v16 + 56);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v17 + 8 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v20 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v19;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    uint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 96 * v10;
    return outlined assign with take of NavigationDestinationPresentation(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t result;
  unint64_t v18;
  char v19;
  _OWORD v20[8];

  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14) {
      return outlined assign with take of WeakBox<Swift.AnyObject>(a1, v16[7] + 8 * v10, (uint64_t (*)(void))type metadata accessor for WeakBox<PlatformDocument>);
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = v18;
  uint64_t v16 = *v4;
  if (v14) {
    return outlined assign with take of WeakBox<Swift.AnyObject>(a1, v16[7] + 8 * v10, (uint64_t (*)(void))type metadata accessor for WeakBox<PlatformDocument>);
  }
LABEL_11:
  outlined init with copy of IdentifiedDocumentGroupConfiguration(a2, (uint64_t)v20);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, v20, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  long long v18;
  char v19;
  unsigned char v20[40];

  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    uint64_t v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7] + 40 * v10;
      unint64_t v18 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)uint64_t v17 = *(_OWORD *)a1;
      *(_OWORD *)(v17 + 16) = v18;
      *(void *)(v17 + 32) = *(void *)(a1 + 32);
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  uint64_t v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of AnyHashable(a2, (uint64_t)v20);
  return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v20, a1, v16);
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t result = outlined init with take of ToolbarPlacement.Role(a2, a4[6] + 40 * a1);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_3(a3, a4[7] + 8 * a1, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4F41720]);
  uint64_t v6 = a4[2];
  unint64_t v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  unint64_t v7 = a4[7];
  uint64_t v8 = type metadata accessor for CommandOperation();
  uint64_t result = outlined init with take of (key: String, value: Any)?(a3, v7 + *(void *)(*(void *)(v8 - 8) + 72) * a1, (uint64_t (*)(void))type metadata accessor for CommandOperation);
  uint64_t v10 = a4[2];
  uint64_t v11 = __OFADD__(v10, 1);
  BOOL v12 = v10 + 1;
  if (v11) {
    __break(1u);
  }
  else {
    a4[2] = v12;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of NavigationDestinationPresentation(a3, a4[7] + 96 * a1);
  uint64_t v6 = a4[2];
  unint64_t v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void))closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:));
}

uint64_t partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6]);
}

void type metadata accessor for (ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>();
    type metadata accessor for ModifiedContent<Divider, _PaddingLayout>?();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<_ViewList_View, _PreferenceTransformModifier<AccessibilityLargeContentViewTree.Key>>, BarItemModifier>, ModifiedContent<Divider, _PaddingLayout>?));
    }
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.Entry(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187DD5590);
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187DD54C8);
}

uint64_t outlined init with take of (ToolbarStorage.Entry, Int)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

__n128 __swift_memcpy208_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityActionKind()
{
  return &type metadata for AccessibilityActionKind;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance EnableUnifiedLayoutFeature()
{
  return static EnableUnifiedLayoutFeature.cachedValue;
}

void *type metadata accessor for AnySource()
{
  return &unk_1ED4686B0;
}

uint64_t destroy for LazyHGrid(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  long long v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void _CALayerView.init(type:onUpdate:)(uint64_t a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
}

ValueMetadata *type metadata accessor for SheetPreference.Key()
{
  return &type metadata for SheetPreference.Key;
}

uint64_t getEnumTagSinglePayload for ToolbarAppearanceModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t initializeWithCopy for ContainerRelativeFrameModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  }
  return a1;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SheetPreference.Key@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance SheetPreference.Key(&one-time initialization token for defaultValue, (uint64_t)&static SheetPreference.Key.defaultValue, a1);
}

double protocol witness for static View._makeView(view:inputs:) in conformance ViewLeafView<A>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, double *a4@<X8>)
{
  return static ViewLeafView._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t static AccessibilityChildBehavior.combine.getter@<X0>(void *a1@<X8>)
{
  return static HoverEffect.automatic.getter(&one-time initialization token for combine, &static AccessibilityChildBehavior.combine, a1);
}

void (*protocol witness for Collection.subscript.read in conformance FetchedResults<A>(uint64_t **a1, uint64_t *a2))(void *a1)
{
  uint64_t v4 = (uint64_t *)malloc(0x30uLL);
  *a1 = v4;
  long long v5 = FetchedResults.subscript.read(v4, *a2);
  v4[4] = v6;
  v4[5] = (uint64_t)v5;
  return protocol witness for Collection.subscript.read in conformance FetchedResults<A>;
}

uint64_t (*FetchedResults.subscript.read(uint64_t *a1, uint64_t a2))()
{
  *a1 = FetchedResults.subscript.getter(a2);
  return Array.subscript.readspecialized ;
}

uint64_t FetchedResults.subscript.getter(uint64_t a1)
{
  id v2 = objc_msgSend(*v1, sel_objectAtIndex_, a1);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  swift_dynamicCast();
  return v4;
}

uint64_t SwiftUIGlue.maxVelocity(_:)()
{
  return swift_release();
}

uint64_t View.hoverEffect<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v24 = a5;
  int v22 = a2;
  uint64_t v8 = a1;
  uint64_t v23 = a6;
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = type metadata accessor for CustomHoverEffectModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = &v21[-v15];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v9 + 16))(v11, v8, a4, v14);
  LOBYTE(v8) = a3 == MEMORY[0x1E4F41558];
  uint64_t v17 = default argument 2 of CustomHoverEffectModifier.init(effect:isEnabled:isEnabledInEnvironment:hoverEffectState:isModifyingImageView:namespace:accessibilityID:background:)();
  char v19 = v18 & 1;
  default argument 3 of CustomHoverEffectModifier.init(effect:isEnabled:isEnabledInEnvironment:hoverEffectState:isModifyingImageView:namespace:accessibilityID:background:)((uint64_t)&v27);
  uint64_t v25 = v27;
  char v26 = v28;
  CustomHoverEffectModifier.init(effect:isEnabled:isEnabledInEnvironment:hoverEffectState:isModifyingImageView:namespace:accessibilityID:background:)((uint64_t)v11, v22, v17, v19, &v25, v8, 0, 1, (uint64_t)v16, 0, 1, 2, a4);
  MEMORY[0x18C113660](v16, a3, v12, v24);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t default argument 3 of CustomHoverEffectModifier.init(effect:isEnabled:isEnabledInEnvironment:hoverEffectState:isModifyingImageView:namespace:accessibilityID:background:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t default argument 2 of CustomHoverEffectModifier.init(effect:isEnabled:isEnabledInEnvironment:hoverEffectState:isModifyingImageView:namespace:accessibilityID:background:)()
{
  return swift_getKeyPath();
}

int *CustomHoverEffectModifier.init(effect:isEnabled:isEnabledInEnvironment:hoverEffectState:isModifyingImageView:namespace:accessibilityID:background:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t *a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, char a11, char a12, uint64_t a13)
{
  uint64_t v18 = *a5;
  char v19 = *((unsigned char *)a5 + 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32))(a9, a1, a13);
  uint64_t result = (int *)type metadata accessor for CustomHoverEffectModifier();
  *(unsigned char *)(a9 + result[9]) = a2;
  uint64_t v21 = a9 + result[10];
  *(void *)uint64_t v21 = a3;
  *(unsigned char *)(v21 + 8) = a4 & 1;
  uint64_t v22 = a9 + result[11];
  *(void *)uint64_t v22 = v18;
  *(unsigned char *)(v22 + 8) = v19;
  *(unsigned char *)(a9 + result[12]) = a6;
  uint64_t v23 = a9 + result[13];
  *(void *)uint64_t v23 = a7;
  *(unsigned char *)(v23 + 8) = a8 & 1;
  uint64_t v24 = a9 + result[14];
  *(void *)uint64_t v24 = a10;
  *(unsigned char *)(v24 + 8) = a11 & 1;
  *(unsigned char *)(a9 + result[15]) = a12;
  *(void *)(a9 + result[16]) = 0;
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

ValueMetadata *type metadata accessor for KeyboardShortcut()
{
  return &type metadata for KeyboardShortcut;
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance _UIHostingView<A>.EnableVFDFeature(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 36);
  if ((v1 & 0x400) == 0) {
    *(_DWORD *)(result + 36) = v1 | 0x400;
  }
  return result;
}

void *type metadata accessor for NavigationDestinationScopeModifier()
{
  return &unk_1ED4604E8;
}

uint64_t getEnumTagSinglePayload for SearchFocusContext(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t objectdestroy_49Tm()
{
  swift_release();
  swift_release();
  swift_release();
  if (*(void *)(v0 + 96)) {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

_UNKNOWN **base witness table accessor for ViewModifier in DraggingPreviewModifier<A>()
{
  return &protocol witness table for DraggingPreviewModifier<A>;
}

unint64_t *initializeBufferWithCopyOfBuffer for AsyncImage.Inner(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4 = *a2;
  outlined copy of AsyncImagePhase(*a2);
  unint64_t v6 = a2[1];
  unint64_t v5 = a2[2];
  *a1 = v4;
  a1[1] = v6;
  a1[2] = v5;
  swift_retain();
  return a1;
}

double partial apply for closure #1 in ScrollViewLayoutComputer.Engine.sizeThatFits(_:)()
{
  return closure #1 in ScrollViewLayoutComputer.Engine.sizeThatFits(_:)(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 80), *(void *)(v0 + 88), *(unsigned char *)(v0 + 96));
}

uint64_t @objc _UIHostingView._layoutHeightDependsOnWidth.getter(void *a1)
{
  id v1 = a1;
  _UIHostingView._layoutHeightDependsOnWidth.getter();

  return 1;
}

uint64_t _UIHostingView._layoutHeightDependsOnWidth.getter()
{
  return 1;
}

uint64_t closure #2 in View.navigationTitlePreferenceTransform(adding:)(uint64_t result)
{
  *(unsigned char *)(result + 48) = 0;
  return result;
}

uint64_t destroy for AsyncImage.Inner(unint64_t *a1)
{
  outlined consume of AsyncImagePhase(*a1);

  return swift_release();
}

__n128 __swift_memcpy42_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 26) = *(_OWORD *)(a2 + 26);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Alert.Presentation.Key()
{
  return &type metadata for Alert.Presentation.Key;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance EnableLazyLayoutReuseLogging()
{
  return static EnableLazyLayoutReuseLogging.cachedValue;
}

uint64_t protocol witness for GraphDelegate.updateGraph<A>(body:) in conformance _UIHostingView<A1>()
{
  swift_getWitnessTable();

  return ViewGraphDelegate.updateGraph<A>(body:)();
}

ValueMetadata *type metadata accessor for ScrollEnvironmentProperties()
{
  return &type metadata for ScrollEnvironmentProperties;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ShouldUseNavigationLinkV4Modifier<A>(uint64_t a1, uint64_t a2)
{
  return static ShouldUseNavigationLinkV4Modifier.evaluate(inputs:)(a1, *(void *)(a2 + 16));
}

uint64_t partial apply for implicit closure #1 in static AccessibilityAttachmentModifier.makeAccessibilityViewModifier(modifier:inputs:body:)()
{
  return implicit closure #1 in static AccessibilityPlatformViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance OnChangeOfSuggestionsModifier(long long *a1, uint64_t (*a2)(long long *))
{
  int v2 = *((_DWORD *)a1 + 4);
  uint64_t v3 = *((void *)a1 + 3);
  long long v5 = *a1;
  int v6 = v2;
  uint64_t v7 = v3;
  return a2(&v5);
}

__n128 __swift_memcpy25_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for GridItem()
{
  return &type metadata for GridItem;
}

uint64_t UIViewRepresentable.sizeThatFits(_:uiView:context:)()
{
  return 0;
}

uint64_t protocol witness for LayoutEngine.explicitAlignment(_:at:) in conformance PlatformViewLayoutEngine<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PlatformViewLayoutEngine.explicitAlignment(_:at:)(a1, a2, a3);
}

uint64_t PlatformViewLayoutEngine.explicitAlignment(_:at:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (static VerticalAlignment.firstTextBaseline.getter() == a1)
  {
    uint64_t v6 = v3 + *(int *)(a3 + 36);
    uint64_t v7 = type metadata accessor for ViewLeafView();
    uint64_t v8 = *(void **)(v6 + *(int *)(v7 + 36));
    MEMORY[0x18C114450](v7, v9, v10, v11);
    objc_msgSend(v8, sel__baselineOffsetsAtSize_);
    if ((v12 & 0xFFFFFFFFFFFFFLL) != 0 && (~v12 & 0x7FF0000000000000) == 0) {
      return 0;
    }
    else {
      return v12;
    }
  }
  else if (static VerticalAlignment.lastTextBaseline.getter() == a1)
  {
    uint64_t v15 = v3 + *(int *)(a3 + 36);
    uint64_t v16 = type metadata accessor for ViewLeafView();
    uint64_t v17 = *(void **)(v15 + *(int *)(v16 + 36));
    MEMORY[0x18C114450](v16, v18, v19, v20);
    objc_msgSend(v17, sel__baselineOffsetsAtSize_);
    double v22 = v21;
    if ((~*(void *)&v21 & 0x7FF0000000000000) != 0 || (*(void *)&v21 & 0xFFFFFFFFFFFFFLL) == 0)
    {
      ViewSize.height.getter();
      double v25 = v24 - v22;
    }
    else
    {
      ViewSize.height.getter();
    }
    return *(void *)&v25;
  }
  else
  {
    return 0;
  }
}

__n128 __swift_memcpy49_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t protocol witness for Subscriber.receive(subscription:) in conformance ActionDispatcherSubscriber<A>(void *a1)
{
  return specialized ActionDispatcherSubscriber.receive(subscription:)(a1);
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance StyleApplicator<A>()
{
  return MEMORY[0x1F40FF800]();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance StyleApplicator<A>()
{
  return MEMORY[0x1F40FD018]();
}

ValueMetadata *type metadata accessor for CoordinateSpaceNameModifier()
{
  return &type metadata for CoordinateSpaceNameModifier;
}

double partial apply for closure #1 in SharingActivityPickerModifier.Child.value.getter(char **a1, uint64_t a2)
{
  return closure #1 in SharingActivityPickerModifier.Child.value.getter(a1, a2, *(unsigned char *)(v2 + 16), (void *)(v2 + 24), *(void *)(v2 + 160));
}

id protocol witness for PlatformGroupFactory.makePlatformGroup() in conformance PortalGroupRendererEffect()
{
  return PortalGroupRendererEffect.makePlatformGroup()(*(void *)v0, *(_DWORD *)(v0 + 8));
}

uint64_t partial apply for closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()()
{
  return closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v0[4], v0[5], v0[6], v0[2], v0[3]);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance PlatformItemList.Key@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static PlatformItemList.Key.defaultValue;

  return swift_bridgeObjectRetain();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EffectiveLabelStyleKey(void *a1, void *a2)
{
  if (*a1) {
    BOOL v2 = *a2 == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return (*a1 | *a2) == 0;
  }
  else {
    return *a1 == *a2;
  }
}

uint64_t (*partial apply for closure #1 in closure #1 in Attribute.init<A>(_:)())()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  long long v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v3;
  *(void *)(v2 + 40) = v3;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

ValueMetadata *type metadata accessor for AutomaticHoverEffect()
{
  return &type metadata for AutomaticHoverEffect;
}

uint64_t base witness table accessor for _AttributeBody in LazyPreference<A>()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in ToolbarModifier<A, B>()
{
  return &protocol witness table for ToolbarModifier<A, B>;
}

uint64_t base witness table accessor for _AttributeBody in ToolbarModifier<A, B>.InvalidateBridge()
{
  return swift_getWitnessTable();
}

uint64_t specialized static SwiftUIOpacityAccessibilityProvider.makeOpacity(effect:inputs:outputs:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a3 + 48);
  v12[2] = *(_OWORD *)(a3 + 32);
  void v12[3] = v6;
  v12[4] = *(_OWORD *)(a3 + 64);
  int v13 = *(_DWORD *)(a3 + 80);
  long long v7 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v7;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    a1();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type AccessibilityOpacityAttachment and conformance AccessibilityOpacityAttachment();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v9 = *a4;
    unint64_t v10 = a4[1];
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)()) {
      specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, v12, v9, v10, 0);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityOpacityAttachment and conformance AccessibilityOpacityAttachment()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityOpacityAttachment and conformance AccessibilityOpacityAttachment;
  if (!lazy protocol witness table cache variable for type AccessibilityOpacityAttachment and conformance AccessibilityOpacityAttachment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityOpacityAttachment and conformance AccessibilityOpacityAttachment);
  }
  return result;
}

uint64_t specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(int a1, long long *a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  unsigned int v5 = a4;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = HIDWORD(a4);
  *(void *)&long long v42 = *((void *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  unint64_t v37 = HIDWORD(a4);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    *(void *)&long long v42 = a3;
    *((void *)&v42 + 1) = __PAIR64__(v9, v5);
    uint64_t v10 = _ViewOutputs.subscript.getter();
    int v11 = *MEMORY[0x1E4F4E7A0];
    if ((v10 & 0x100000000) != 0) {
      int v12 = *MEMORY[0x1E4F4E7A0];
    }
    else {
      int v12 = v10;
    }
    int v38 = v12;
  }
  else
  {
    int v11 = *MEMORY[0x1E4F4E7A0];
    int v38 = *MEMORY[0x1E4F4E7A0];
  }
  LODWORD(v42) = a1;
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityContainerModifier>, (uint64_t)&type metadata for AccessibilityContainerModifier, MEMORY[0x1E4F3F590]);
  unsigned int v36 = _GraphValue.value.getter();
  long long v13 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v14 = a2[1];
  long long v42 = *a2;
  long long v43 = v14;
  unsigned int v15 = _ViewInputs.position.getter();
  long long v16 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v17 = a2[1];
  long long v42 = *a2;
  long long v43 = v17;
  unsigned int v18 = _ViewInputs.size.getter();
  long long v19 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v20 = a2[1];
  long long v42 = *a2;
  long long v43 = v20;
  unsigned int v21 = _ViewInputs.transform.getter();
  long long v22 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v23 = a2[1];
  long long v42 = *a2;
  long long v43 = v23;
  unsigned int v24 = _ViewInputs.environment.getter();
  long long v25 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v26 = a2[1];
  long long v42 = *a2;
  long long v43 = v26;
  unsigned int v27 = _ViewInputs.viewPhase.getter();
  long long v28 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(void *)&long long v42 = a3;
  *((void *)&v42 + 1) = __PAIR64__(v37, v5);
  uint64_t v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0) {
    int v30 = v11;
  }
  else {
    int v30 = v29;
  }
  long long v31 = a2[1];
  long long v42 = *a2;
  long long v43 = v31;
  int v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(void *)&long long v42 = __PAIR64__(v15, v36);
  *((void *)&v42 + 1) = __PAIR64__(v21, v18);
  *(void *)&long long v43 = __PAIR64__(v27, v24);
  *((void *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)uint64_t v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(void *)&long long v45 = 0;
  swift_unknownObjectWeakInit();
  int v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, (unint64_t *)&lazy cache variable for type metadata for PropertiesTransform<AccessibilityContainerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier, (uint64_t)&type metadata for AccessibilityContainerModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<AccessibilityContainerModifier> and conformance PropertiesTransform<A>();
  uint64_t v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v42, (unint64_t *)&lazy cache variable for type metadata for PropertiesTransform<AccessibilityContainerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier, (uint64_t)&type metadata for AccessibilityContainerModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

{
  unsigned int v5;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  long long v23;
  unsigned int v24;
  long long v25;
  long long v26;
  unsigned int v27;
  long long v28;
  uint64_t v29;
  int v30;
  long long v31;
  int v32;
  uint64_t v33;
  unsigned int v36;
  unint64_t v37;
  int v38;
  long long v40;
  unsigned int v41;
  long long v42;
  long long v43;
  unsigned char v44[32];
  long long v45;
  int v46;
  uint64_t v47;

  unsigned int v5 = a4;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = HIDWORD(a4);
  *(void *)&long long v42 = *((void *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  unint64_t v37 = HIDWORD(a4);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    *(void *)&long long v42 = a3;
    *((void *)&v42 + 1) = __PAIR64__(v9, v5);
    uint64_t v10 = _ViewOutputs.subscript.getter();
    int v11 = *MEMORY[0x1E4F4E7A0];
    if ((v10 & 0x100000000) != 0) {
      int v12 = *MEMORY[0x1E4F4E7A0];
    }
    else {
      int v12 = v10;
    }
    int v38 = v12;
  }
  else
  {
    int v11 = *MEMORY[0x1E4F4E7A0];
    int v38 = *MEMORY[0x1E4F4E7A0];
  }
  LODWORD(v42) = a1;
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityGestureModifier>, (uint64_t)&type metadata for AccessibilityGestureModifier, MEMORY[0x1E4F3F590]);
  unsigned int v36 = _GraphValue.value.getter();
  long long v13 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v14 = a2[1];
  long long v42 = *a2;
  long long v43 = v14;
  unsigned int v15 = _ViewInputs.position.getter();
  long long v16 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v17 = a2[1];
  long long v42 = *a2;
  long long v43 = v17;
  unsigned int v18 = _ViewInputs.size.getter();
  long long v19 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v20 = a2[1];
  long long v42 = *a2;
  long long v43 = v20;
  unsigned int v21 = _ViewInputs.transform.getter();
  long long v22 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v23 = a2[1];
  long long v42 = *a2;
  long long v43 = v23;
  unsigned int v24 = _ViewInputs.environment.getter();
  long long v25 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v26 = a2[1];
  long long v42 = *a2;
  long long v43 = v26;
  unsigned int v27 = _ViewInputs.viewPhase.getter();
  long long v28 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(void *)&long long v42 = a3;
  *((void *)&v42 + 1) = __PAIR64__(v37, v5);
  uint64_t v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0) {
    int v30 = v11;
  }
  else {
    int v30 = v29;
  }
  long long v31 = a2[1];
  long long v42 = *a2;
  long long v43 = v31;
  int v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(void *)&long long v42 = __PAIR64__(v15, v36);
  *((void *)&v42 + 1) = __PAIR64__(v21, v18);
  *(void *)&long long v43 = __PAIR64__(v27, v24);
  *((void *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)uint64_t v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(void *)&long long v45 = 0;
  swift_unknownObjectWeakInit();
  int v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityGestureModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier, (uint64_t)&type metadata for AccessibilityGestureModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<AccessibilityGestureModifier> and conformance PropertiesTransform<A>();
  uint64_t v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v42, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityGestureModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier, (uint64_t)&type metadata for AccessibilityGestureModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

{
  unsigned int v5;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  long long v23;
  unsigned int v24;
  long long v25;
  long long v26;
  unsigned int v27;
  long long v28;
  uint64_t v29;
  int v30;
  long long v31;
  int v32;
  uint64_t v33;
  unsigned int v36;
  unint64_t v37;
  int v38;
  long long v40;
  unsigned int v41;
  long long v42;
  long long v43;
  unsigned char v44[32];
  long long v45;
  int v46;
  uint64_t v47;

  unsigned int v5 = a4;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = HIDWORD(a4);
  *(void *)&long long v42 = *((void *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  unint64_t v37 = HIDWORD(a4);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    *(void *)&long long v42 = a3;
    *((void *)&v42 + 1) = __PAIR64__(v9, v5);
    uint64_t v10 = _ViewOutputs.subscript.getter();
    int v11 = *MEMORY[0x1E4F4E7A0];
    if ((v10 & 0x100000000) != 0) {
      int v12 = *MEMORY[0x1E4F4E7A0];
    }
    else {
      int v12 = v10;
    }
    int v38 = v12;
  }
  else
  {
    int v11 = *MEMORY[0x1E4F4E7A0];
    int v38 = *MEMORY[0x1E4F4E7A0];
  }
  LODWORD(v42) = a1;
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityOpacityModifier>, (uint64_t)&type metadata for AccessibilityOpacityModifier, MEMORY[0x1E4F3F590]);
  unsigned int v36 = _GraphValue.value.getter();
  long long v13 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v14 = a2[1];
  long long v42 = *a2;
  long long v43 = v14;
  unsigned int v15 = _ViewInputs.position.getter();
  long long v16 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v17 = a2[1];
  long long v42 = *a2;
  long long v43 = v17;
  unsigned int v18 = _ViewInputs.size.getter();
  long long v19 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v20 = a2[1];
  long long v42 = *a2;
  long long v43 = v20;
  unsigned int v21 = _ViewInputs.transform.getter();
  long long v22 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v23 = a2[1];
  long long v42 = *a2;
  long long v43 = v23;
  unsigned int v24 = _ViewInputs.environment.getter();
  long long v25 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v26 = a2[1];
  long long v42 = *a2;
  long long v43 = v26;
  unsigned int v27 = _ViewInputs.viewPhase.getter();
  long long v28 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(void *)&long long v42 = a3;
  *((void *)&v42 + 1) = __PAIR64__(v37, v5);
  uint64_t v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0) {
    int v30 = v11;
  }
  else {
    int v30 = v29;
  }
  long long v31 = a2[1];
  long long v42 = *a2;
  long long v43 = v31;
  int v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(void *)&long long v42 = __PAIR64__(v15, v36);
  *((void *)&v42 + 1) = __PAIR64__(v21, v18);
  *(void *)&long long v43 = __PAIR64__(v27, v24);
  *((void *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)uint64_t v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(void *)&long long v45 = 0;
  swift_unknownObjectWeakInit();
  int v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier, (uint64_t)&type metadata for AccessibilityOpacityModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<AccessibilityOpacityModifier> and conformance PropertiesTransform<A>();
  uint64_t v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v42, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier, (uint64_t)&type metadata for AccessibilityOpacityModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

{
  unsigned int v5;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  long long v23;
  unsigned int v24;
  long long v25;
  long long v26;
  unsigned int v27;
  long long v28;
  uint64_t v29;
  int v30;
  long long v31;
  int v32;
  uint64_t v33;
  unsigned int v36;
  unint64_t v37;
  int v38;
  long long v40;
  unsigned int v41;
  long long v42;
  long long v43;
  unsigned char v44[32];
  long long v45;
  int v46;
  uint64_t v47;

  unsigned int v5 = a4;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = HIDWORD(a4);
  *(void *)&long long v42 = *((void *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  unint64_t v37 = HIDWORD(a4);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    *(void *)&long long v42 = a3;
    *((void *)&v42 + 1) = __PAIR64__(v9, v5);
    uint64_t v10 = _ViewOutputs.subscript.getter();
    int v11 = *MEMORY[0x1E4F4E7A0];
    if ((v10 & 0x100000000) != 0) {
      int v12 = *MEMORY[0x1E4F4E7A0];
    }
    else {
      int v12 = v10;
    }
    int v38 = v12;
  }
  else
  {
    int v11 = *MEMORY[0x1E4F4E7A0];
    int v38 = *MEMORY[0x1E4F4E7A0];
  }
  LODWORD(v42) = a1;
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3F590]);
  unsigned int v36 = _GraphValue.value.getter();
  long long v13 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v14 = a2[1];
  long long v42 = *a2;
  long long v43 = v14;
  unsigned int v15 = _ViewInputs.position.getter();
  long long v16 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v17 = a2[1];
  long long v42 = *a2;
  long long v43 = v17;
  unsigned int v18 = _ViewInputs.size.getter();
  long long v19 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v20 = a2[1];
  long long v42 = *a2;
  long long v43 = v20;
  unsigned int v21 = _ViewInputs.transform.getter();
  long long v22 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v23 = a2[1];
  long long v42 = *a2;
  long long v43 = v23;
  unsigned int v24 = _ViewInputs.environment.getter();
  long long v25 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v26 = a2[1];
  long long v42 = *a2;
  long long v43 = v26;
  unsigned int v27 = _ViewInputs.viewPhase.getter();
  long long v28 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(void *)&long long v42 = a3;
  *((void *)&v42 + 1) = __PAIR64__(v37, v5);
  uint64_t v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0) {
    int v30 = v11;
  }
  else {
    int v30 = v29;
  }
  long long v31 = a2[1];
  long long v42 = *a2;
  long long v43 = v31;
  int v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(void *)&long long v42 = __PAIR64__(v15, v36);
  *((void *)&v42 + 1) = __PAIR64__(v21, v18);
  *(void *)&long long v43 = __PAIR64__(v27, v24);
  *((void *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)uint64_t v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(void *)&long long v45 = 0;
  swift_unknownObjectWeakInit();
  int v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<AccessibilityAttachmentModifier> and conformance PropertiesTransform<A>();
  uint64_t v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v42, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

{
  unsigned int v5;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  long long v23;
  unsigned int v24;
  long long v25;
  long long v26;
  unsigned int v27;
  long long v28;
  uint64_t v29;
  int v30;
  long long v31;
  int v32;
  uint64_t v33;
  unsigned int v36;
  unint64_t v37;
  int v38;
  long long v40;
  unsigned int v41;
  long long v42;
  long long v43;
  unsigned char v44[32];
  long long v45;
  int v46;
  uint64_t v47;

  unsigned int v5 = a4;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = HIDWORD(a4);
  *(void *)&long long v42 = *((void *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  unint64_t v37 = HIDWORD(a4);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    *(void *)&long long v42 = a3;
    *((void *)&v42 + 1) = __PAIR64__(v9, v5);
    uint64_t v10 = _ViewOutputs.subscript.getter();
    int v11 = *MEMORY[0x1E4F4E7A0];
    if ((v10 & 0x100000000) != 0) {
      int v12 = *MEMORY[0x1E4F4E7A0];
    }
    else {
      int v12 = v10;
    }
    int v38 = v12;
  }
  else
  {
    int v11 = *MEMORY[0x1E4F4E7A0];
    int v38 = *MEMORY[0x1E4F4E7A0];
  }
  LODWORD(v42) = a1;
  type metadata accessor for External<AccessibilityScrollableModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<AccessibilityPlatformViewModifier>, (uint64_t)&type metadata for AccessibilityPlatformViewModifier, MEMORY[0x1E4F3F590]);
  unsigned int v36 = _GraphValue.value.getter();
  long long v13 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v14 = a2[1];
  long long v42 = *a2;
  long long v43 = v14;
  unsigned int v15 = _ViewInputs.position.getter();
  long long v16 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v17 = a2[1];
  long long v42 = *a2;
  long long v43 = v17;
  unsigned int v18 = _ViewInputs.size.getter();
  long long v19 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v20 = a2[1];
  long long v42 = *a2;
  long long v43 = v20;
  unsigned int v21 = _ViewInputs.transform.getter();
  long long v22 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v23 = a2[1];
  long long v42 = *a2;
  long long v43 = v23;
  unsigned int v24 = _ViewInputs.environment.getter();
  long long v25 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v26 = a2[1];
  long long v42 = *a2;
  long long v43 = v26;
  unsigned int v27 = _ViewInputs.viewPhase.getter();
  long long v28 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(void *)&long long v42 = a3;
  *((void *)&v42 + 1) = __PAIR64__(v37, v5);
  uint64_t v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0) {
    int v30 = v11;
  }
  else {
    int v30 = v29;
  }
  long long v31 = a2[1];
  long long v42 = *a2;
  long long v43 = v31;
  int v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(void *)&long long v42 = __PAIR64__(v15, v36);
  *((void *)&v42 + 1) = __PAIR64__(v21, v18);
  *(void *)&long long v43 = __PAIR64__(v27, v24);
  *((void *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)uint64_t v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(void *)&long long v45 = 0;
  swift_unknownObjectWeakInit();
  int v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityPlatformViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier, (uint64_t)&type metadata for AccessibilityPlatformViewModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<AccessibilityPlatformViewModifier> and conformance PropertiesTransform<A>();
  uint64_t v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v42, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityPlatformViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier, (uint64_t)&type metadata for AccessibilityPlatformViewModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

{
  unsigned int v5;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  long long v23;
  unsigned int v24;
  long long v25;
  long long v26;
  unsigned int v27;
  long long v28;
  uint64_t v29;
  int v30;
  long long v31;
  int v32;
  uint64_t v33;
  unsigned int v36;
  unint64_t v37;
  int v38;
  long long v40;
  unsigned int v41;
  long long v42;
  long long v43;
  unsigned char v44[32];
  long long v45;
  int v46;
  uint64_t v47;

  unsigned int v5 = a4;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = HIDWORD(a4);
  *(void *)&long long v42 = *((void *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  unint64_t v37 = HIDWORD(a4);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    *(void *)&long long v42 = a3;
    *((void *)&v42 + 1) = __PAIR64__(v9, v5);
    uint64_t v10 = _ViewOutputs.subscript.getter();
    int v11 = *MEMORY[0x1E4F4E7A0];
    if ((v10 & 0x100000000) != 0) {
      int v12 = *MEMORY[0x1E4F4E7A0];
    }
    else {
      int v12 = v10;
    }
    int v38 = v12;
  }
  else
  {
    int v11 = *MEMORY[0x1E4F4E7A0];
    int v38 = *MEMORY[0x1E4F4E7A0];
  }
  LODWORD(v42) = a1;
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityScrollableContextModifier>, (uint64_t)&type metadata for AccessibilityScrollableContextModifier, MEMORY[0x1E4F3F590]);
  unsigned int v36 = _GraphValue.value.getter();
  long long v13 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v14 = a2[1];
  long long v42 = *a2;
  long long v43 = v14;
  unsigned int v15 = _ViewInputs.position.getter();
  long long v16 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v17 = a2[1];
  long long v42 = *a2;
  long long v43 = v17;
  unsigned int v18 = _ViewInputs.size.getter();
  long long v19 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v20 = a2[1];
  long long v42 = *a2;
  long long v43 = v20;
  unsigned int v21 = _ViewInputs.transform.getter();
  long long v22 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v23 = a2[1];
  long long v42 = *a2;
  long long v43 = v23;
  unsigned int v24 = _ViewInputs.environment.getter();
  long long v25 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v26 = a2[1];
  long long v42 = *a2;
  long long v43 = v26;
  unsigned int v27 = _ViewInputs.viewPhase.getter();
  long long v28 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(void *)&long long v42 = a3;
  *((void *)&v42 + 1) = __PAIR64__(v37, v5);
  uint64_t v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0) {
    int v30 = v11;
  }
  else {
    int v30 = v29;
  }
  long long v31 = a2[1];
  long long v42 = *a2;
  long long v43 = v31;
  int v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(void *)&long long v42 = __PAIR64__(v15, v36);
  *((void *)&v42 + 1) = __PAIR64__(v21, v18);
  *(void *)&long long v43 = __PAIR64__(v27, v24);
  *((void *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)uint64_t v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(void *)&long long v45 = 0;
  swift_unknownObjectWeakInit();
  int v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityScrollableContextModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier, (uint64_t)&type metadata for AccessibilityScrollableContextModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<AccessibilityScrollableContextModifier> and conformance PropertiesTransform<A>();
  uint64_t v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v42, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityScrollableContextModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier, (uint64_t)&type metadata for AccessibilityScrollableContextModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

{
  unsigned int v5;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  long long v23;
  unsigned int v24;
  long long v25;
  long long v26;
  unsigned int v27;
  long long v28;
  uint64_t v29;
  int v30;
  long long v31;
  int v32;
  uint64_t v33;
  unsigned int v36;
  unint64_t v37;
  int v38;
  long long v40;
  unsigned int v41;
  long long v42;
  long long v43;
  unsigned char v44[32];
  long long v45;
  int v46;
  uint64_t v47;

  unsigned int v5 = a4;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = HIDWORD(a4);
  *(void *)&long long v42 = *((void *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  unint64_t v37 = HIDWORD(a4);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    *(void *)&long long v42 = a3;
    *((void *)&v42 + 1) = __PAIR64__(v9, v5);
    uint64_t v10 = _ViewOutputs.subscript.getter();
    int v11 = *MEMORY[0x1E4F4E7A0];
    if ((v10 & 0x100000000) != 0) {
      int v12 = *MEMORY[0x1E4F4E7A0];
    }
    else {
      int v12 = v10;
    }
    int v38 = v12;
  }
  else
  {
    int v11 = *MEMORY[0x1E4F4E7A0];
    int v38 = *MEMORY[0x1E4F4E7A0];
  }
  LODWORD(v42) = a1;
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, MEMORY[0x1E4F3F590]);
  unsigned int v36 = _GraphValue.value.getter();
  long long v13 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v14 = a2[1];
  long long v42 = *a2;
  long long v43 = v14;
  unsigned int v15 = _ViewInputs.position.getter();
  long long v16 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v17 = a2[1];
  long long v42 = *a2;
  long long v43 = v17;
  unsigned int v18 = _ViewInputs.size.getter();
  long long v19 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v20 = a2[1];
  long long v42 = *a2;
  long long v43 = v20;
  unsigned int v21 = _ViewInputs.transform.getter();
  long long v22 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v23 = a2[1];
  long long v42 = *a2;
  long long v43 = v23;
  unsigned int v24 = _ViewInputs.environment.getter();
  long long v25 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v26 = a2[1];
  long long v42 = *a2;
  long long v43 = v26;
  unsigned int v27 = _ViewInputs.viewPhase.getter();
  long long v28 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(void *)&long long v42 = a3;
  *((void *)&v42 + 1) = __PAIR64__(v37, v5);
  uint64_t v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0) {
    int v30 = v11;
  }
  else {
    int v30 = v29;
  }
  long long v31 = a2[1];
  long long v42 = *a2;
  long long v43 = v31;
  int v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(void *)&long long v42 = __PAIR64__(v15, v36);
  *((void *)&v42 + 1) = __PAIR64__(v21, v18);
  *(void *)&long long v43 = __PAIR64__(v27, v24);
  *((void *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)uint64_t v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(void *)&long long v45 = 0;
  swift_unknownObjectWeakInit();
  int v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityScrollableModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<AccessibilityScrollableModifier> and conformance PropertiesTransform<A>();
  uint64_t v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v42, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityScrollableModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

{
  unsigned int v5;
  unint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  long long v13;
  long long v14;
  unsigned int v15;
  long long v16;
  long long v17;
  unsigned int v18;
  long long v19;
  long long v20;
  unsigned int v21;
  long long v22;
  long long v23;
  unsigned int v24;
  long long v25;
  long long v26;
  unsigned int v27;
  long long v28;
  uint64_t v29;
  int v30;
  long long v31;
  int v32;
  uint64_t v33;
  unsigned int v36;
  unint64_t v37;
  int v38;
  long long v40;
  unsigned int v41;
  long long v42;
  long long v43;
  unsigned char v44[32];
  long long v45;
  int v46;
  uint64_t v47;

  unsigned int v5 = a4;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  unint64_t v9 = HIDWORD(a4);
  *(void *)&long long v42 = *((void *)a2 + 6);
  DWORD2(v42) = *((_DWORD *)a2 + 14);
  unint64_t v37 = HIDWORD(a4);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    *(void *)&long long v42 = a3;
    *((void *)&v42 + 1) = __PAIR64__(v9, v5);
    uint64_t v10 = _ViewOutputs.subscript.getter();
    int v11 = *MEMORY[0x1E4F4E7A0];
    if ((v10 & 0x100000000) != 0) {
      int v12 = *MEMORY[0x1E4F4E7A0];
    }
    else {
      int v12 = v10;
    }
    int v38 = v12;
  }
  else
  {
    int v11 = *MEMORY[0x1E4F4E7A0];
    int v38 = *MEMORY[0x1E4F4E7A0];
  }
  LODWORD(v42) = a1;
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for _GraphValue<ArchivedAttachmentModifier>, (uint64_t)&type metadata for ArchivedAttachmentModifier, MEMORY[0x1E4F3F590]);
  unsigned int v36 = _GraphValue.value.getter();
  long long v13 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v13;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v14 = a2[1];
  long long v42 = *a2;
  long long v43 = v14;
  unsigned int v15 = _ViewInputs.position.getter();
  long long v16 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v16;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v17 = a2[1];
  long long v42 = *a2;
  long long v43 = v17;
  unsigned int v18 = _ViewInputs.size.getter();
  long long v19 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v19;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v20 = a2[1];
  long long v42 = *a2;
  long long v43 = v20;
  unsigned int v21 = _ViewInputs.transform.getter();
  long long v22 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v22;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v23 = a2[1];
  long long v42 = *a2;
  long long v43 = v23;
  unsigned int v24 = _ViewInputs.environment.getter();
  long long v25 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v25;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v26 = a2[1];
  long long v42 = *a2;
  long long v43 = v26;
  unsigned int v27 = _ViewInputs.viewPhase.getter();
  long long v28 = a2[3];
  *(_OWORD *)uint64_t v44 = a2[2];
  *(_OWORD *)&v44[16] = v28;
  long long v45 = a2[4];
  int v46 = *((_DWORD *)a2 + 20);
  long long v43 = a2[1];
  _ViewInputs.scrapeableParentID.getter();
  *(void *)&long long v42 = a3;
  *((void *)&v42 + 1) = __PAIR64__(v37, v5);
  uint64_t v29 = _ViewOutputs.subscript.getter();
  if ((v29 & 0x100000000) != 0) {
    int v30 = v11;
  }
  else {
    int v30 = v29;
  }
  long long v31 = a2[1];
  long long v42 = *a2;
  long long v43 = v31;
  int v32 = *((_DWORD *)a2 + 9);
  _GraphInputs.interfaceIdiom.getter();
  *(void *)&long long v42 = __PAIR64__(v15, v36);
  *((void *)&v42 + 1) = __PAIR64__(v21, v18);
  *(void *)&long long v43 = __PAIR64__(v27, v24);
  *((void *)&v43 + 1) = __PAIR64__(v41, a5);
  *(_DWORD *)uint64_t v44 = v38;
  *(_DWORD *)&v44[4] = v30;
  *(_OWORD *)&v44[8] = v40;
  v44[24] = (v32 & 0x20) == 0;
  *(void *)&long long v45 = 0;
  swift_unknownObjectWeakInit();
  int v46 = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for PropertiesTransform<ArchivedAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier, (uint64_t)&type metadata for ArchivedAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  lazy protocol witness table accessor for type PropertiesTransform<ArchivedAttachmentModifier> and conformance PropertiesTransform<A>();
  uint64_t v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v42, &lazy cache variable for type metadata for PropertiesTransform<ArchivedAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier, (uint64_t)&type metadata for ArchivedAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
  static AGAttributeFlags.removable.getter();
  AGGraphSetFlags();
  if (a5)
  {
    static AGAttributeFlags.scrapeable.getter();
    AGGraphGetFlags();
    AGGraphSetFlags();
  }
  return v33;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityAttachmentModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  _OWORD v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  uint64_t v79 = *(void *)(a2 + 48);
  int v80 = *(_DWORD *)(a2 + 56);
  *(void *)&long long v85 = *(void *)(a2 + 48);
  DWORD2(v85) = *(_DWORD *)(a2 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v6 = *(void *)a2;
    *(_OWORD *)uint64_t v81 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)((char *)&v81[1] + 4) = *(_OWORD *)(a2 + 20);
    int v7 = *(_DWORD *)(a2 + 36);
    uint64_t v69 = *(void *)(a2 + 40);
    uint64_t v71 = v6;
    long long v8 = *(_OWORD *)(a2 + 48);
    long long v9 = *(_OWORD *)(a2 + 64);
    v86[1] = *(_OWORD *)(a2 + 32);
    v87[0] = v8;
    v87[1] = v9;
    int v88 = *(_DWORD *)(a2 + 80);
    long long v10 = *(_OWORD *)(a2 + 16);
    long long v85 = *(_OWORD *)a2;
    v86[0] = v10;
    if ((v7 & 0x20) != 0)
    {
      *(void *)&v82[0] = v79;
      DWORD2(v82[0]) = v80;
      outlined retain of _ViewInputs(a2);
      if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
      {
        char v33 = v7;
        if ((v7 & 0x40) != 0)
        {
          char v33 = v7 & 0xBF;
          DWORD1(v86[1]) = v7 & 0xFFFFFFBF;
        }
        if (v33 < 0) {
          PreferenceKeys.add(_:)();
        }
      }
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    if ((v7 & 0x10) != 0)
    {
      long long v34 = *(_OWORD *)(a2 + 48);
      v82[2] = *(_OWORD *)(a2 + 32);
      v83[0] = v34;
      v83[1] = *(_OWORD *)(a2 + 64);
      int v84 = *(_DWORD *)(a2 + 80);
      long long v35 = *(_OWORD *)(a2 + 16);
      v82[0] = *(_OWORD *)a2;
      v82[1] = v35;
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    long long v36 = *(_OWORD *)(a2 + 48);
    v82[2] = *(_OWORD *)(a2 + 32);
    v83[0] = v36;
    v83[1] = *(_OWORD *)(a2 + 64);
    int v84 = *(_DWORD *)(a2 + 80);
    long long v37 = *(_OWORD *)(a2 + 16);
    v82[0] = *(_OWORD *)a2;
    v82[1] = v37;
    if (_ViewInputs.isScrapeable.getter())
    {
      ScrapeableID.init()();
      unsigned int v72 = v82[0];
      _ViewInputs.scrapeableParentID.setter();
    }
    else
    {
      unsigned int v72 = 0;
    }
    v76[0] = a1;
    *(void *)&v82[0] = v85;
    DWORD2(v82[0]) = DWORD2(v85);
    *(void *)&v82[1] = *(void *)&v86[0];
    *(_OWORD *)((char *)&v82[1] + 8) = *(_OWORD *)((char *)v86 + 8);
    *((void *)&v82[2] + 1) = *((void *)&v86[1] + 1);
    *(void *)&v83[0] = *(void *)&v87[0];
    *(_OWORD *)((char *)v83 + 8) = *(_OWORD *)((char *)v87 + 8);
    *((void *)&v83[1] + 1) = *((void *)&v87[1] + 1);
    int v84 = v88;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static AccessibilityAttachmentModifier.makeAccessibilityViewModifier(modifier:inputs:body:)(v76, (uint64_t *)v82, a3, (double *)&v78);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v7 & 0x10) != 0)
    {
      *(void *)&v82[0] = v79;
      DWORD2(v82[0]) = v80;
      if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
      {
        v82[0] = v78;
        uint64_t v38 = _ViewOutputs.subscript.getter();
        unsigned int v39 = *MEMORY[0x1E4F4E7A0];
        unsigned int v68 = *MEMORY[0x1E4F4E7A0];
        if ((v38 & 0x100000000) == 0) {
          unsigned int v39 = v38;
        }
        unsigned int v67 = v39;
      }
      else
      {
        unsigned int v67 = *MEMORY[0x1E4F4E7A0];
        unsigned int v68 = *MEMORY[0x1E4F4E7A0];
      }
      _DisplayList_Identity.init()();
      int v66 = v82[0];
      long long v40 = *(_OWORD *)(a2 + 48);
      v82[2] = *(_OWORD *)(a2 + 32);
      v83[0] = v40;
      v83[1] = *(_OWORD *)(a2 + 64);
      int v84 = *(_DWORD *)(a2 + 80);
      long long v41 = *(_OWORD *)(a2 + 16);
      v82[0] = *(_OWORD *)a2;
      v82[1] = v41;
      v76[0] = v66;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      char v42 = v77;
      *(void *)&v82[0] = v71;
      *(_OWORD *)((char *)v82 + 8) = *(_OWORD *)v81;
      *(_OWORD *)((char *)&v82[1] + 4) = *(_OWORD *)((char *)&v81[1] + 4);
      DWORD1(v82[2]) = v7;
      *((void *)&v82[2] + 1) = v69;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v82[0]) = a1;
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3F590]);
      char v70 = v42 & 1;
      long long v65 = *(_OWORD *)v76;
      int v64 = _GraphValue.value.getter();
      long long v43 = *(_OWORD *)(a2 + 48);
      v82[2] = *(_OWORD *)(a2 + 32);
      v83[0] = v43;
      v83[1] = *(_OWORD *)(a2 + 64);
      int v84 = *(_DWORD *)(a2 + 80);
      long long v44 = *(_OWORD *)(a2 + 16);
      v82[0] = *(_OWORD *)a2;
      v82[1] = v44;
      unsigned int v63 = _ViewInputs.animatedSize()();
      long long v45 = *(_OWORD *)(a2 + 48);
      v82[2] = *(_OWORD *)(a2 + 32);
      v83[0] = v45;
      v83[1] = *(_OWORD *)(a2 + 64);
      int v84 = *(_DWORD *)(a2 + 80);
      long long v46 = *(_OWORD *)(a2 + 16);
      v82[0] = *(_OWORD *)a2;
      v82[1] = v46;
      unsigned int v62 = _ViewInputs.animatedPosition()();
      long long v47 = *(_OWORD *)(a2 + 48);
      v82[2] = *(_OWORD *)(a2 + 32);
      v83[0] = v47;
      v83[1] = *(_OWORD *)(a2 + 64);
      int v84 = *(_DWORD *)(a2 + 80);
      long long v48 = *(_OWORD *)(a2 + 16);
      v82[0] = *(_OWORD *)a2;
      v82[1] = v48;
      unsigned int v49 = _ViewInputs.containerPosition.getter();
      long long v50 = *(_OWORD *)(a2 + 48);
      v82[2] = *(_OWORD *)(a2 + 32);
      v83[0] = v50;
      v83[1] = *(_OWORD *)(a2 + 64);
      int v84 = *(_DWORD *)(a2 + 80);
      long long v51 = *(_OWORD *)(a2 + 16);
      v82[0] = *(_OWORD *)a2;
      v82[1] = v51;
      unsigned int v52 = _ViewInputs.environment.getter();
      uint64_t v53 = v78;
      unsigned int v54 = DWORD2(v78);
      unsigned int v55 = HIDWORD(v78);
      v82[0] = v78;
      uint64_t v56 = _ViewOutputs.subscript.getter();
      *(void *)&v82[0] = v53;
      if ((v56 & 0x100000000) != 0) {
        unsigned int v57 = v68;
      }
      else {
        unsigned int v57 = v56;
      }
      *((void *)&v82[0] + 1) = __PAIR64__(v55, v54);
      uint64_t v58 = _ViewOutputs.subscript.getter();
      LODWORD(v82[0]) = v66;
      if ((v58 & 0x100000000) != 0) {
        unsigned int v59 = v68;
      }
      else {
        unsigned int v59 = v58;
      }
      BYTE4(v82[0]) = v70;
      *(_OWORD *)((char *)v82 + 8) = v65;
      BYTE8(v82[1]) = v75;
      HIDWORD(v82[1]) = v64;
      *(void *)&v82[2] = __PAIR64__(v62, v63);
      *((void *)&v82[2] + 1) = __PAIR64__(v52, v49);
      *(void *)&v83[0] = __PAIR64__(v67, v57);
      DWORD2(v83[0]) = v59;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, (unint64_t *)&lazy cache variable for type metadata for DisplayListTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<AccessibilityAttachmentModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v82[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    unsigned int v60 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (long long *)a2, v78, *((unint64_t *)&v78 + 1), v72);
    LOBYTE(v82[0]) = 0;
    uint64_t v61 = v60;
    _ViewOutputs.subscript.setter();
    LOBYTE(v82[0]) = 1;
    specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v61, 0x100000000, a2);
    LOBYTE(v82[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    long long v31 = a4;
    *(void *)a4 = v78;
    double v32 = *((double *)&v78 + 1);
    goto LABEL_43;
  }
  *(void *)&long long v85 = v79;
  DWORD2(v85) = v80;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0
    || (*(void *)&long long v85 = v79, DWORD2(v85) = v80, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0))
  {
    long long v15 = *(_OWORD *)(a2 + 48);
    v86[1] = *(_OWORD *)(a2 + 32);
    v87[0] = v15;
    v87[1] = *(_OWORD *)(a2 + 64);
    int v88 = *(_DWORD *)(a2 + 80);
    long long v16 = *(_OWORD *)(a2 + 16);
    long long v85 = *(_OWORD *)a2;
    v86[0] = v16;
    goto LABEL_9;
  }
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  char v11 = v85;
  long long v12 = *(_OWORD *)(a2 + 48);
  v86[1] = *(_OWORD *)(a2 + 32);
  v87[0] = v12;
  v87[1] = *(_OWORD *)(a2 + 64);
  int v88 = *(_DWORD *)(a2 + 80);
  long long v13 = *(_OWORD *)(a2 + 16);
  long long v85 = *(_OWORD *)a2;
  v86[0] = v13;
  if ((v11 & 0x10) == 0)
  {
LABEL_9:
    outlined retain of _ViewInputs(a2);
    int v14 = 0;
    goto LABEL_10;
  }
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  LODWORD(v82[0]) &= ~0x10u;
  PropertyList.subscript.setter();
  int v14 = 1;
LABEL_10:
  LODWORD(v78) = a1;
  long long v17 = *(_OWORD *)(a2 + 48);
  v82[2] = *(_OWORD *)(a2 + 32);
  v83[0] = v17;
  v83[1] = *(_OWORD *)(a2 + 64);
  int v84 = *(_DWORD *)(a2 + 80);
  long long v18 = *(_OWORD *)(a2 + 16);
  v82[0] = *(_OWORD *)a2;
  v82[1] = v18;
  static AccessibilityAttachmentModifier.makeAccessibilityViewModifier(modifier:inputs:body:)((int *)&v78, (uint64_t *)v82, a3, v81);
  if (v14)
  {
    v82[0] = *(_OWORD *)v81;
    _ViewOutputs.subscript.getter();
    long long v19 = *(_OWORD *)(a2 + 48);
    v82[2] = *(_OWORD *)(a2 + 32);
    v83[0] = v19;
    v83[1] = *(_OWORD *)(a2 + 64);
    int v84 = *(_DWORD *)(a2 + 80);
    long long v20 = *(_OWORD *)(a2 + 16);
    v82[0] = *(_OWORD *)a2;
    v82[1] = v20;
    uint64_t v21 = _ViewInputs.environment.getter();
    MEMORY[0x1F4188790](v21);
    *(void *)&v82[0] = v79;
    DWORD2(v82[0]) = v80;
    MEMORY[0x1F4188790](v22);
    outlined retain of [Text.Modifier]((uint64_t)&v79);
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  *(void *)&v82[0] = v79;
  DWORD2(v82[0]) = v80;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    if ((v82[0] & 0x80) != 0)
    {
      v82[0] = *(_OWORD *)v81;
      uint64_t v23 = _ViewOutputs.subscript.getter();
      if ((v23 & 0x100000000) != 0) {
        unsigned int v24 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        unsigned int v24 = v23;
      }
      long long v25 = *(_OWORD *)(a2 + 48);
      v82[2] = *(_OWORD *)(a2 + 32);
      v83[0] = v25;
      v83[1] = *(_OWORD *)(a2 + 64);
      int v84 = *(_DWORD *)(a2 + 80);
      long long v26 = *(_OWORD *)(a2 + 16);
      v82[0] = *(_OWORD *)a2;
      v82[1] = v26;
      int v27 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      uint64_t v28 = PropertyList.Tracker.__allocating_init()();
      LODWORD(v82[0]) = v27;
      *((void *)&v82[0] + 1) = v28;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      unsigned int v29 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(void *)&v82[0] = __PAIR64__(v29, v24);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, MEMORY[0x1E4FBB718]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      LODWORD(v82[0]) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v81, a2);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  long long v31 = a4;
  *a4 = v81[0];
  double v32 = v81[1];
LABEL_43:
  v31[1] = v32;
  return result;
}

{
  uint64_t v6;
  int v7;
  long long v8;
  long long v9;
  long long v10;
  char v11;
  long long v12;
  long long v13;
  int v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  long long v25;
  long long v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t result;
  double *v31;
  double v32;
  char v33;
  long long v34;
  long long v35;
  uint64_t v36;
  unsigned int v37;
  long long v38;
  long long v39;
  char v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  unsigned int v47;
  long long v48;
  long long v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  uint64_t v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  long long v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  char v71;
  int v72[7];
  char v73;
  long long v74;
  uint64_t v75;
  int v76;
  double v77[4];
  _OWORD v78[3];
  _OWORD v79[2];
  int v80;
  long long v81;
  _OWORD v82[2];
  _OWORD v83[2];
  int v84;
  uint64_t v85;

  long long v85 = *MEMORY[0x1E4F143B8];
  char v75 = *(void *)(a2 + 48);
  uint64_t v76 = *(_DWORD *)(a2 + 56);
  *(void *)&uint64_t v81 = *(void *)(a2 + 48);
  DWORD2(v81) = *(_DWORD *)(a2 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v6 = *(void *)a2;
    *(_OWORD *)char v77 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)((char *)&v77[1] + 4) = *(_OWORD *)(a2 + 20);
    int v7 = *(_DWORD *)(a2 + 36);
    unsigned int v67 = *(void *)(a2 + 40);
    unsigned int v68 = v6;
    long long v8 = *(_OWORD *)(a2 + 48);
    long long v9 = *(_OWORD *)(a2 + 64);
    v82[1] = *(_OWORD *)(a2 + 32);
    v83[0] = v8;
    v83[1] = v9;
    int v84 = *(_DWORD *)(a2 + 80);
    long long v10 = *(_OWORD *)(a2 + 16);
    uint64_t v81 = *(_OWORD *)a2;
    v82[0] = v10;
    if ((v7 & 0x20) != 0)
    {
      *(void *)&v78[0] = v75;
      DWORD2(v78[0]) = v76;
      outlined retain of _ViewInputs(a2);
      if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
      {
        char v33 = v7;
        if ((v7 & 0x40) != 0)
        {
          char v33 = v7 & 0xBF;
          DWORD1(v82[1]) = v7 & 0xFFFFFFBF;
        }
        if (v33 < 0) {
          PreferenceKeys.add(_:)();
        }
      }
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    if ((v7 & 0x10) != 0)
    {
      long long v34 = *(_OWORD *)(a2 + 48);
      v78[2] = *(_OWORD *)(a2 + 32);
      v79[0] = v34;
      v79[1] = *(_OWORD *)(a2 + 64);
      int v80 = *(_DWORD *)(a2 + 80);
      long long v35 = *(_OWORD *)(a2 + 16);
      v78[0] = *(_OWORD *)a2;
      v78[1] = v35;
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    v72[0] = a1;
    *(void *)&v78[0] = v81;
    DWORD2(v78[0]) = DWORD2(v81);
    *(void *)&v78[1] = *(void *)&v82[0];
    *(_OWORD *)((char *)&v78[1] + 8) = *(_OWORD *)((char *)v82 + 8);
    *((void *)&v78[2] + 1) = *((void *)&v82[1] + 1);
    *(void *)&v79[0] = *(void *)&v83[0];
    *(_OWORD *)((char *)v79 + 8) = *(_OWORD *)((char *)v83 + 8);
    *((void *)&v79[1] + 1) = *((void *)&v83[1] + 1);
    int v80 = v84;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static AccessibilityPlatformViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:)(v72, (uint64_t)v78, a3, (double *)&v74);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v7 & 0x10) != 0)
    {
      *(void *)&v78[0] = v75;
      DWORD2(v78[0]) = v76;
      if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
      {
        v78[0] = v74;
        long long v36 = _ViewOutputs.subscript.getter();
        long long v37 = *MEMORY[0x1E4F4E7A0];
        long long v65 = *MEMORY[0x1E4F4E7A0];
        if ((v36 & 0x100000000) == 0) {
          long long v37 = v36;
        }
      }
      else
      {
        long long v37 = *MEMORY[0x1E4F4E7A0];
        long long v65 = *MEMORY[0x1E4F4E7A0];
      }
      int v66 = v37;
      _DisplayList_Identity.init()();
      int v64 = v78[0];
      uint64_t v38 = *(_OWORD *)(a2 + 48);
      v78[2] = *(_OWORD *)(a2 + 32);
      v79[0] = v38;
      v79[1] = *(_OWORD *)(a2 + 64);
      int v80 = *(_DWORD *)(a2 + 80);
      unsigned int v39 = *(_OWORD *)(a2 + 16);
      v78[0] = *(_OWORD *)a2;
      v78[1] = v39;
      v72[0] = v64;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      long long v40 = v73;
      *(void *)&v78[0] = v68;
      *(_OWORD *)((char *)v78 + 8) = *(_OWORD *)v77;
      *(_OWORD *)((char *)&v78[1] + 4) = *(_OWORD *)((char *)&v77[1] + 4);
      DWORD1(v78[2]) = v7;
      *((void *)&v78[2] + 1) = v67;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v78[0]) = a1;
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<AccessibilityPlatformViewModifier>, (uint64_t)&type metadata for AccessibilityPlatformViewModifier, MEMORY[0x1E4F3F590]);
      unsigned int v63 = *(_OWORD *)v72;
      unsigned int v62 = _GraphValue.value.getter();
      long long v41 = *(_OWORD *)(a2 + 48);
      v78[2] = *(_OWORD *)(a2 + 32);
      v79[0] = v41;
      v79[1] = *(_OWORD *)(a2 + 64);
      int v80 = *(_DWORD *)(a2 + 80);
      char v42 = *(_OWORD *)(a2 + 16);
      v78[0] = *(_OWORD *)a2;
      v78[1] = v42;
      uint64_t v61 = _ViewInputs.animatedSize()();
      long long v43 = *(_OWORD *)(a2 + 48);
      v78[2] = *(_OWORD *)(a2 + 32);
      v79[0] = v43;
      v79[1] = *(_OWORD *)(a2 + 64);
      int v80 = *(_DWORD *)(a2 + 80);
      long long v44 = *(_OWORD *)(a2 + 16);
      v78[0] = *(_OWORD *)a2;
      v78[1] = v44;
      unsigned int v60 = _ViewInputs.animatedPosition()();
      long long v45 = *(_OWORD *)(a2 + 48);
      v78[2] = *(_OWORD *)(a2 + 32);
      v79[0] = v45;
      v79[1] = *(_OWORD *)(a2 + 64);
      int v80 = *(_DWORD *)(a2 + 80);
      long long v46 = *(_OWORD *)(a2 + 16);
      v78[0] = *(_OWORD *)a2;
      v78[1] = v46;
      long long v47 = _ViewInputs.containerPosition.getter();
      long long v48 = *(_OWORD *)(a2 + 48);
      v78[2] = *(_OWORD *)(a2 + 32);
      v79[0] = v48;
      v79[1] = *(_OWORD *)(a2 + 64);
      int v80 = *(_DWORD *)(a2 + 80);
      unsigned int v49 = *(_OWORD *)(a2 + 16);
      v78[0] = *(_OWORD *)a2;
      v78[1] = v49;
      long long v50 = _ViewInputs.environment.getter();
      long long v51 = v74;
      unsigned int v52 = DWORD2(v74);
      uint64_t v53 = HIDWORD(v74);
      v78[0] = v74;
      unsigned int v54 = _ViewOutputs.subscript.getter();
      *(void *)&v78[0] = v51;
      if ((v54 & 0x100000000) != 0) {
        unsigned int v55 = v65;
      }
      else {
        unsigned int v55 = v54;
      }
      *((void *)&v78[0] + 1) = __PAIR64__(v53, v52);
      uint64_t v56 = _ViewOutputs.subscript.getter();
      LODWORD(v78[0]) = v64;
      if ((v56 & 0x100000000) != 0) {
        unsigned int v57 = v65;
      }
      else {
        unsigned int v57 = v56;
      }
      BYTE4(v78[0]) = v40 & 1;
      *(_OWORD *)((char *)v78 + 8) = v63;
      BYTE8(v78[1]) = v71;
      HIDWORD(v78[1]) = v62;
      *(void *)&v78[2] = __PAIR64__(v60, v61);
      *((void *)&v78[2] + 1) = __PAIR64__(v50, v47);
      *(void *)&v79[0] = __PAIR64__(v66, v55);
      DWORD2(v79[0]) = v57;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityPlatformViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier, (uint64_t)&type metadata for AccessibilityPlatformViewModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<AccessibilityPlatformViewModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v78[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    uint64_t v58 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (long long *)a2, v74, *((unint64_t *)&v74 + 1), 0);
    LOBYTE(v78[0]) = 0;
    unsigned int v59 = v58;
    _ViewOutputs.subscript.setter();
    LOBYTE(v78[0]) = 1;
    specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v59, 0x100000000, a2);
    LOBYTE(v78[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    long long v31 = a4;
    *(void *)a4 = v74;
    double v32 = *((double *)&v74 + 1);
    goto LABEL_40;
  }
  *(void *)&uint64_t v81 = v75;
  DWORD2(v81) = v76;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0
    || (*(void *)&uint64_t v81 = v75, DWORD2(v81) = v76, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0))
  {
    long long v15 = *(_OWORD *)(a2 + 48);
    v82[1] = *(_OWORD *)(a2 + 32);
    v83[0] = v15;
    v83[1] = *(_OWORD *)(a2 + 64);
    int v84 = *(_DWORD *)(a2 + 80);
    long long v16 = *(_OWORD *)(a2 + 16);
    uint64_t v81 = *(_OWORD *)a2;
    v82[0] = v16;
    goto LABEL_9;
  }
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
  PropertyList.subscript.getter();
  outlined release of _ViewInputs(a2);
  char v11 = v81;
  long long v12 = *(_OWORD *)(a2 + 48);
  v82[1] = *(_OWORD *)(a2 + 32);
  v83[0] = v12;
  v83[1] = *(_OWORD *)(a2 + 64);
  int v84 = *(_DWORD *)(a2 + 80);
  long long v13 = *(_OWORD *)(a2 + 16);
  uint64_t v81 = *(_OWORD *)a2;
  v82[0] = v13;
  if ((v11 & 0x10) == 0)
  {
LABEL_9:
    outlined retain of _ViewInputs(a2);
    int v14 = 0;
    goto LABEL_10;
  }
  outlined retain of _ViewInputs(a2);
  PropertyList.subscript.getter();
  LODWORD(v78[0]) &= ~0x10u;
  PropertyList.subscript.setter();
  int v14 = 1;
LABEL_10:
  LODWORD(v74) = a1;
  long long v17 = *(_OWORD *)(a2 + 48);
  v78[2] = *(_OWORD *)(a2 + 32);
  v79[0] = v17;
  v79[1] = *(_OWORD *)(a2 + 64);
  int v80 = *(_DWORD *)(a2 + 80);
  long long v18 = *(_OWORD *)(a2 + 16);
  v78[0] = *(_OWORD *)a2;
  v78[1] = v18;
  static AccessibilityPlatformViewModifier.makeAccessibilityViewModifier(modifier:inputs:body:)((int *)&v74, (uint64_t)v78, a3, v77);
  if (v14)
  {
    v78[0] = *(_OWORD *)v77;
    _ViewOutputs.subscript.getter();
    long long v19 = *(_OWORD *)(a2 + 48);
    v78[2] = *(_OWORD *)(a2 + 32);
    v79[0] = v19;
    v79[1] = *(_OWORD *)(a2 + 64);
    int v80 = *(_DWORD *)(a2 + 80);
    long long v20 = *(_OWORD *)(a2 + 16);
    v78[0] = *(_OWORD *)a2;
    v78[1] = v20;
    uint64_t v21 = _ViewInputs.environment.getter();
    MEMORY[0x1F4188790](v21);
    *(void *)&v78[0] = v75;
    DWORD2(v78[0]) = v76;
    MEMORY[0x1F4188790](v22);
    outlined retain of [Text.Modifier]((uint64_t)&v75);
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  *(void *)&v78[0] = v75;
  DWORD2(v78[0]) = v76;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    if ((v78[0] & 0x80) != 0)
    {
      v78[0] = *(_OWORD *)v77;
      uint64_t v23 = _ViewOutputs.subscript.getter();
      if ((v23 & 0x100000000) != 0) {
        unsigned int v24 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        unsigned int v24 = v23;
      }
      long long v25 = *(_OWORD *)(a2 + 48);
      v78[2] = *(_OWORD *)(a2 + 32);
      v79[0] = v25;
      v79[1] = *(_OWORD *)(a2 + 64);
      int v80 = *(_DWORD *)(a2 + 80);
      long long v26 = *(_OWORD *)(a2 + 16);
      v78[0] = *(_OWORD *)a2;
      v78[1] = v26;
      int v27 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      uint64_t v28 = PropertyList.Tracker.__allocating_init()();
      LODWORD(v78[0]) = v27;
      *((void *)&v78[0] + 1) = v28;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      unsigned int v29 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(void *)&v78[0] = __PAIR64__(v29, v24);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, MEMORY[0x1E4FBB718]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      LODWORD(v78[0]) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v77, a2);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  long long v31 = a4;
  *a4 = v77[0];
  double v32 = v77[1];
LABEL_40:
  v31[1] = v32;
  return result;
}

uint64_t outlined retain of _ViewInputs(uint64_t a1)
{
  return a1;
}

double static AccessibilityAttachmentModifier.makeAccessibilityViewModifier(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  int v10 = *((_DWORD *)a2 + 20);
  uint64_t v19 = *a2;
  LODWORD(v20) = v6;
  uint64_t v21 = v7;
  long long v22 = *(_OWORD *)(a2 + 3);
  uint64_t v23 = v8;
  uint64_t v24 = v9;
  long long v25 = *(_OWORD *)(a2 + 7);
  int v16 = v25;
  uint64_t v26 = a2[9];
  int v27 = v10;
  a3(&v17);
  uint64_t v19 = v9;
  LODWORD(v20) = v16;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
  {
    uint64_t v19 = v9;
    LODWORD(v20) = v16;
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LODWORD(v19) = v5;
      type metadata accessor for _GraphValue<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3F590]);
      _GraphValue.value.getter();
      int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      uint64_t KeyPath = swift_getKeyPath();
      dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
      if (v13)
      {
        LODWORD(v19) = OffsetAttribute2;
        uint64_t v20 = KeyPath;
        protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
        type metadata accessor for Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment>();
        lazy protocol witness table accessor for type Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment> and conformance Focus<A, B>();
        Attribute.init<A>(body:value:flags:update:)();
      }
      else
      {
        AGGraphCreateOffsetAttribute2();
      }
      uint64_t v14 = swift_release();
      uint64_t v19 = v9;
      LODWORD(v20) = v16;
      MEMORY[0x1F4188790](v14);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
    }
  }
  *(void *)a4 = v17;
  double result = v18;
  a4[1] = v18;
  return result;
}

void type metadata accessor for External<AccessibilityScrollableModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t destroy for PropertiesTransform(uint64_t a1)
{
  return swift_unknownObjectWeakDestroy();
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<AccessibilityAttachmentModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityAttachmentModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityAttachmentModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityAttachmentModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

uint64_t static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, ValueMetadata **)@<X2>, long long *a4@<X3>, uint64_t a5@<X4>, ValueMetadata *a6@<X5>, void *a7@<X8>)
{
  void (*v62)(void *__return_ptr, uint64_t, ValueMetadata **);
  void *v63;
  uint64_t v64;
  uint64_t v65;
  ValueMetadata *v66;
  unint64_t v67;
  _UNKNOWN **v68;
  unsigned int v69;
  unsigned int v70;
  int v71;
  ValueMetadata *v72;
  _UNKNOWN **v73;
  int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  ValueMetadata *v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  void v84[2];
  ValueMetadata *v85;
  uint64_t v86;
  _UNKNOWN **v87;
  unint64_t v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  ValueMetadata *v92;
  unsigned int v93;
  unsigned int v94;
  unsigned int v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  int v99;
  ValueMetadata *v100;
  int v101;
  _UNKNOWN **v102;
  unsigned int v103;
  int v104;
  unint64_t v105;
  uint64_t v106;
  ValueMetadata *v107;
  unint64_t v108;
  unint64_t v109;
  long long v110;
  uint64_t v111;
  int v112;
  unsigned __int8 v113;
  int v114;
  uint64_t v115;

  uint64_t v61 = a4;
  unsigned int v62 = (void (*)(void *__return_ptr, uint64_t, ValueMetadata **))a3;
  unsigned int v63 = a7;
  v115 = *MEMORY[0x1E4F143B8];
  int v9 = *a1;
  unint64_t v10 = *(ValueMetadata **)a2;
  int v11 = *(_DWORD *)(a2 + 8);
  long long v12 = *(_UNKNOWN ***)(a2 + 16);
  unsigned int v13 = *(_DWORD *)(a2 + 24);
  uint64_t v82 = *(_DWORD *)(a2 + 28);
  uint64_t v81 = *(_DWORD *)(a2 + 32);
  int v80 = *(_DWORD *)(a2 + 36);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v79 = *(ValueMetadata **)(a2 + 48);
  unsigned int v15 = *(_DWORD *)(a2 + 56);
  long long v78 = *(_DWORD *)(a2 + 60);
  char v77 = *(_DWORD *)(a2 + 64);
  uint64_t v76 = *(_DWORD *)(a2 + 68);
  char v75 = *(_DWORD *)(a2 + 72);
  uint64_t v83 = *(_DWORD *)(a2 + 76);
  uint64_t v71 = *(_DWORD *)(a2 + 80);
  int v59 = v9;
  LODWORD(v100) = v9;
  type metadata accessor for AccessibilityLargeContentViewModifier();
  uint64_t v57 = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  uint64_t v16 = *(void *)(*(void *)(a5 - 8) + 64);
  int v66 = a6;
  long long v65 = a5;
  if (v16) {
    closure #1 in static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)(1, a5);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  long long v85 = v10;
  LODWORD(v86) = v11;
  uint64_t v87 = v12;
  int v88 = __PAIR64__(v82, v13);
  uint64_t v69 = v13;
  uint64_t v89 = v81;
  uint64_t v90 = v80;
  int v64 = v14;
  uint64_t v91 = v14;
  uint64_t v92 = v79;
  v93 = v15;
  uint64_t v94 = v78;
  uint64_t v95 = v77;
  uint64_t v96 = v76;
  v97 = v75;
  uint64_t v98 = v83;
  uint64_t v99 = v71;
  PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v85, 1, (uint64_t)&v100);
  long long v51 = v100;
  double v18 = v10;
  uint64_t v74 = v11;
  int v53 = v101;
  unsigned int v68 = v102;
  uint64_t v19 = v12;
  unsigned int v52 = v103;
  unint64_t v20 = v105;
  unint64_t v21 = v108;
  unsigned int v67 = v109;
  int v56 = v112;
  int v55 = v113;
  char v70 = v15;
  int v54 = v114;
  uint64_t v22 = v106;
  uint64_t v23 = v107;
  long long v50 = v110;
  uint64_t v24 = v111;
  uint64_t v100 = v18;
  unsigned int v72 = v18;
  uint64_t v101 = v11;
  v102 = v19;
  uint64_t v73 = v19;
  uint64_t v103 = v13;
  uint64_t v104 = v82;
  v105 = __PAIR64__(v80, v81);
  uint64_t v25 = v14;
  v106 = v14;
  v107 = v79;
  v108 = __PAIR64__(v78, v15);
  v109 = __PAIR64__(v76, v77);
  *(void *)&v110 = __PAIR64__(v83, v75);
  DWORD2(v110) = v71;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v26 = swift_bridgeObjectRetain();
  v62(v84, v26, &v100);
  LODWORD(v100) = v59;
  _GraphValue.value.getter();
  uint64_t v27 = v65;
  unint64_t v28 = (unint64_t)v66;
  closure #2 in static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)(1);
  uint64_t v29 = AGGraphCreateOffsetAttribute2();
  LODWORD(v62) = v29;
  uint64_t v61 = &v50;
  uint64_t v101 = v53;
  int v30 = v51;
  uint64_t v100 = v51;
  v102 = v68;
  uint64_t v103 = v52;
  unint64_t v60 = v20;
  v105 = v20;
  v106 = v22;
  v107 = v23;
  unint64_t v58 = v21;
  v108 = v21;
  v109 = v67;
  v110 = v50;
  v111 = v24;
  v112 = v56;
  v113 = v55;
  v114 = v54;
  MEMORY[0x1F4188790](v29);
  long long v85 = &type metadata for LabelPlatformItemListFlags;
  uint64_t v86 = v27;
  uint64_t v87 = &protocol witness table for LabelPlatformItemListFlags;
  int v88 = v28;
  uint64_t v48 = type metadata accessor for PlatformItemListGenerator();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Image.Resolved?(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
  uint64_t v32 = v31;
  int v66 = v30;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v100, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v47, v48, MEMORY[0x1E4FBC248], v32, MEMORY[0x1E4FBC278], v33);
  long long v34 = v100;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  LODWORD(v65) = v85;
  uint64_t v100 = v72;
  uint64_t v101 = v74;
  v102 = v73;
  unsigned int v35 = v69;
  LODWORD(v20) = v82;
  uint64_t v103 = v69;
  uint64_t v104 = v82;
  LODWORD(v32) = v81;
  unsigned int v36 = v80;
  v105 = __PAIR64__(v80, v81);
  v106 = v25;
  long long v37 = v79;
  v107 = v79;
  LODWORD(v21) = v78;
  v108 = __PAIR64__(v78, v70);
  LODWORD(v34) = v77;
  LODWORD(v28) = v76;
  v109 = __PAIR64__(v76, v77);
  *(void *)&v110 = __PAIR64__(v83, v75);
  LODWORD(v30) = v71;
  DWORD2(v110) = v71;
  LODWORD(v61) = _ViewInputs.size.getter();
  uint64_t v100 = v72;
  uint64_t v101 = v74;
  v102 = v73;
  uint64_t v103 = v35;
  uint64_t v104 = v20;
  v105 = __PAIR64__(v36, v32);
  uint64_t v38 = v64;
  v106 = v64;
  v107 = v37;
  unsigned int v39 = v37;
  LODWORD(v37) = v70;
  v108 = __PAIR64__(v21, v70);
  v109 = __PAIR64__(v28, v34);
  unsigned int v40 = v75;
  LODWORD(v20) = v83;
  *(void *)&v110 = __PAIR64__(v83, v75);
  DWORD2(v110) = v30;
  int v59 = _ViewInputs.position.getter();
  uint64_t v100 = v72;
  uint64_t v101 = v74;
  v102 = v73;
  uint64_t v103 = v69;
  uint64_t v104 = v82;
  v105 = __PAIR64__(v80, v81);
  v106 = v38;
  v107 = v39;
  v108 = __PAIR64__(v21, v37);
  v109 = __PAIR64__(v28, v34);
  *(void *)&v110 = __PAIR64__(v20, v40);
  DWORD2(v110) = v30;
  uint64_t v41 = _ViewInputs.transform.getter();
  uint64_t v100 = v39;
  uint64_t v101 = (int)v37;
  MEMORY[0x1F4188790](v41);
  int v42 = v65;
  *(_DWORD *)&v47[-32] = v62;
  *(_DWORD *)&v47[-28] = v42;
  int v43 = v59;
  *(_DWORD *)&v47[-24] = v61;
  *(_DWORD *)&v47[-20] = v43;
  *(_DWORD *)&v47[-16] = v44;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  uint64_t result = swift_bridgeObjectRelease();
  long long v46 = v63;
  *unsigned int v63 = v84[0];
  v46[1] = v84[1];
  return result;
}

uint64_t _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790]();
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v15(v12, v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

uint64_t partial apply for closure #1 in Attribute.init<A>(_:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_0@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_1@<X0>(_DWORD *a1@<X8>)
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_3@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_4@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_5@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_6@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_8(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for TableColumnList, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_9@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_10(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryTextImagePreference?, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_11(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_0(a1, a2, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_12@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t closure #1 in Attribute.init<A>(_:)partial apply@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_16(a1);
}

{
  type metadata accessor for TableColumnList();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_4((void (*)(void))type metadata accessor for (_:), a1);
}

{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_22(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_18(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)partial apply(a1);
}

{
  type metadata accessor for [ScrollableCollection](0);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  uint64_t result;

  type metadata accessor for ((_:))?(0, &lazy cache variable for type metadata for ((_:))?, &lazy cache variable for type metadata for (_:), MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBB718]);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_3((void (*)(void))type metadata accessor for (_:), a1);
}

{
  return closure #1 in Attribute.init<A>(_:)partial apply((unint64_t *)&lazy cache variable for type metadata for (_:), type metadata accessor for ToolbarStorage.SearchItem?, a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_5((void (*)(void))type metadata accessor for (_:), a1);
}

{
  uint64_t result;

  type metadata accessor for (_:)(0, &lazy cache variable for type metadata for (_:));
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

{
  type metadata accessor for Attribute<UInt32>(0, &lazy cache variable for type metadata for [ContentScrollViewBox], (uint64_t)&type metadata for ContentScrollViewBox, MEMORY[0x1E4FBB320]);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  type metadata accessor for [Selectable](0);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2(a1);
}

{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_15(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_13(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_22(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_1((void (*)(void))type metadata accessor for (_:), a1);
}

{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration](0, (unint64_t *)&lazy cache variable for type metadata for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration], (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return closure #1 in Attribute.init<A>(_:)partial apply((unint64_t *)&lazy cache variable for type metadata for (_:), type metadata accessor for ToolbarStorage.NavigationProperties?, a1);
}

{
  type metadata accessor for (_:)();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  type metadata accessor for AccessibilityQuickActionProxy();
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_32(a1);
}

{
  _s14AttributeGraph0A0Vy7SwiftUI14LayoutComputerVGMaTm_0(0, &lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, MEMORY[0x1E4FBB320]);
  return closure #1 in Attribute.init<A>(_:)(a1);
}

{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_5((void (*)(void))type metadata accessor for (_:), a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_13@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_14@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_15@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_16@<X0>(_DWORD *a1@<X8>)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_0(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_17(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_1(a1, a2, (uint64_t (*)(void))type metadata accessor for DragReorderableLayoutCoordinator, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_18@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_19(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_2(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_20@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_21@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_22@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_23@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_24(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_2(a1, a2, (uint64_t (*)(void))type metadata accessor for (_:), (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_25(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_3(a1, a2, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryTextImagePreference?, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_26@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_27@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_28@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_29@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t closure #1 in Attribute.init<A>(_:)@<X0>(_DWORD *a1@<X8>)
{
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

{
  uint64_t result;

  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0x100000000) != 0)
  {
    uint64_t v5 = _ViewOutputs.subscript.getter();
    if ((v5 & 0x100000000) != 0)
    {
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for External<AccessibilityNodeList>, (uint64_t)&type metadata for AccessibilityNodeList, MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<AccessibilityNodeList> and conformance External<A>();
      swift_bridgeObjectRetain();
      uint64_t v5 = Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
    }
  }
  int v6 = *(_DWORD *)(a3 + 36);
  if ((v6 & 0x20) != 0)
  {
    if ((v6 & 0x80) != 0)
    {
      swift_getKeyPath();
      _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      _ViewOutputs.subscript.getter();
      if ((a1 & 0x100000000) == 0) {
        AccessibilityAttachmentToken.init<A>(_:)();
      }
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type ViewResponderTransform and conformance ViewResponderTransform();
      uint64_t v5 = Attribute.init<A>(body:value:flags:update:)();
      static AGAttributeFlags.removable.getter();
      AGGraphSetFlags();
    }
    if ((v6 & 0x40) != 0)
    {
      swift_getKeyPath();
      _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      _ViewInputs.size.getter();
      _ViewInputs.position.getter();
      _ViewInputs.transform.getter();
      if ((a1 & 0x100000000) == 0) {
        AccessibilityAttachmentToken.init<A>(_:)();
      }
      UniqueID.init()();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type GeometryTransform and conformance GeometryTransform();
      uint64_t v5 = Attribute.init<A>(body:value:flags:update:)();
      static AGAttributeFlags.removable.getter();
      AGGraphSetFlags();
    }
  }
  return v5;
}

{
  uint64_t vars8;

  return specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(a1, a2, a3);
}

uint64_t protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type ViewResponderTransform and conformance ViewResponderTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type ViewResponderTransform and conformance ViewResponderTransform;
  if (!lazy protocol witness table cache variable for type ViewResponderTransform and conformance ViewResponderTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ViewResponderTransform and conformance ViewResponderTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GeometryTransform and conformance GeometryTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type GeometryTransform and conformance GeometryTransform;
  if (!lazy protocol witness table cache variable for type GeometryTransform and conformance GeometryTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GeometryTransform and conformance GeometryTransform);
  }
  return result;
}

void type metadata accessor for Image.Resolved?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI5ImageVAAE8ResolvedVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for [ViewResponder]()
{
  if (!lazy cache variable for type metadata for [ViewResponder])
  {
    type metadata accessor for ViewResponder();
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder]);
    }
  }
}

uint64_t type metadata accessor for PlatformItemListGenerator()
{
  return swift_getGenericMetadata();
}

id PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)@<X0>(int a1@<W1>, uint64_t *a2@<X2>, char a3@<W3>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  long long v15 = *(_OWORD *)(a2 + 5);
  long long v16 = *(_OWORD *)(a2 + 3);
  long long v14 = *(_OWORD *)(a2 + 7);
  uint64_t v10 = a2[9];
  int v11 = *((_DWORD *)a2 + 20);
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    int v13 = *MEMORY[0x1E4F4E7A0];
    *(void *)a4 = result;
    *(_DWORD *)(a4 + 8) = a1;
    *(void *)(a4 + 16) = v7;
    *(_DWORD *)(a4 + 24) = v8;
    *(void *)(a4 + 32) = v9;
    *(_OWORD *)(a4 + 40) = v16;
    *(_OWORD *)(a4 + 56) = v15;
    *(_OWORD *)(a4 + 72) = v14;
    *(void *)(a4 + 88) = v10;
    *(_DWORD *)(a4 + 96) = v11;
    *(unsigned char *)(a4 + 100) = a3 & 1;
    *(_DWORD *)(a4 + 104) = v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #2 in static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  _OWORD v5[2] = type metadata accessor for AccessibilityLargeContentViewModifier();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)partial apply for closure #1 in static PointerOffset.of(_:), (uint64_t)v5, (uint64_t)&type metadata for AccessibilityLargeContentViewBehavior, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v5[5];
}

uint64_t type metadata accessor for AccessibilityLargeContentViewModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessibilityLargeContentViewModifier();
  uint64_t v5 = a1 + *(int *)(v4 + 36);
  v9[2] = v4;
  v9[3] = a2;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v5, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, a2, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v9[5];
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<AccessibilityOpacityModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityOpacityModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityOpacityModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier, (uint64_t)&type metadata for AccessibilityOpacityModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityOpacityModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in StatefulRule.value.setter()
{
  return closure #1 in StatefulRule.value.setter();
}

uint64_t _s14AttributeGraph12StatefulRulePAAE5value5ValueQzvsySPyAFGXEfU_TA_0()
{
  return AGGraphSetOutputValue();
}

uint64_t closure #1 in StatefulRule.value.setter()
{
  return AGGraphSetOutputValue();
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<AccessibilityGestureModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityGestureModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityGestureModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityGestureModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier, (uint64_t)&type metadata for AccessibilityGestureModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityGestureModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_0@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_1@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_2@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for (_:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_3@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_5@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_6@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_7@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_8@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_9(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for NSAttributedString, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_10(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_11(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_0(a1, a2, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_12@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_13@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_14@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_15@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_16@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_17@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_18@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_19@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_20@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_21@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_22@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_23@<X0>(_DWORD *a1@<X8>)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_1((void (*)(void))type metadata accessor for (_:), a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_24(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_2(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_25@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_26@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_27@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_28@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_29(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_2(a1, a2, MEMORY[0x1E4F3FD08], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_30@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_31(uint64_t a1, uint64_t a2)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_3(a1, a2, (uint64_t (*)(void))type metadata accessor for WidgetAuxiliaryViewMetadata?, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))closure #1 in Attribute.init<A>(_:));
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_32@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_33@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_34@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_35@<X0>(_DWORD *a1@<X8>)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_3(type metadata accessor for (())?, a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_36@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_37@<X0>(_DWORD *a1@<X8>)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_4((void (*)(void))type metadata accessor for NavigationDestinationResolverBase, a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_38@<X0>(_DWORD *a1@<X8>)
{
  return _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_5(type metadata accessor for ToolbarStorage.NavigationProperties?, a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_39@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<AccessibilityContainerModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityContainerModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityContainerModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, (unint64_t *)&lazy cache variable for type metadata for PropertiesTransform<AccessibilityContainerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier, (uint64_t)&type metadata for AccessibilityContainerModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityContainerModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

void static PropertiesTransform.willRemove(attribute:)()
{
  AGGraphGetAttributeInfo();
  uint64_t v1 = v0;
  type metadata accessor for PropertiesTransform();
  swift_unknownObjectWeakAssign();

  *(void *)(v1 + 64) = 0;
}

void static PropertiesTransform.didReinsert(attribute:)()
{
}

uint64_t type metadata accessor for PropertiesTransform()
{
  return __swift_instantiateGenericMetadata();
}

void PropertiesTransform.insert()()
{
  uint64_t v1 = MEMORY[0x18C119DF0](v0 + 72);

  *(void *)(v0 + 64) = v1;
  if (v1) {
    *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty) = 1;
  }
}

void type metadata accessor for Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment>()
{
  if (!lazy cache variable for type metadata for Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment>)
  {
    type metadata accessor for _GraphValue<AccessibilityAttachmentModifier>(255, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
    unint64_t v0 = type metadata accessor for Focus();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment> and conformance Focus<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment> and conformance Focus<A, B>;
  if (!lazy protocol witness table cache variable for type Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment> and conformance Focus<A, B>)
  {
    type metadata accessor for Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Focus<MutableBox<AccessibilityAttachment>, AccessibilityAttachment> and conformance Focus<A, B>);
  }
  return result;
}

uint64_t partial apply for closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v4 + 24);
  uint64_t v10 = a3(0);
  return a4(a1, v10, v9, v8, a2);
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v4 + 24);
  uint64_t v10 = a3(0);
  return a4(a1, v10, v9, v8, a2);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_0@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a1);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v4 + 24);
  uint64_t v10 = a3(0);
  return a4(a1, v10, v9, v8, a2);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v7 = *(void *)(v3 + 24);
  uint64_t v9 = type metadata accessor for (_:)(0, &lazy cache variable for type metadata for (_:));
  return a3(a1, v9, v8, v7, a2);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TATm_3(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v4 + 24);
  uint64_t v10 = a3(0);
  return a4(a1, v10, v9, v8, a2);
}

unint64_t type metadata accessor for (_:)()
{
  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for [NavigationLinkSelectionIdentifier : UpdateViewDestinationRequest]();
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for [ViewIdentity : AlertStorage]();
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for [ViewIdentity : ConfirmationDialog]();
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]();
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for [ScrollStateRequest](255, &lazy cache variable for type metadata for [ScrollStateRequest], &lazy cache variable for type metadata for ScrollStateRequest, MEMORY[0x1E4F402D8], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for [NavigationDestinationResolverBase](255, &lazy cache variable for type metadata for [NavigationDestinationResolverBase], (uint64_t (*)(uint64_t))type metadata accessor for NavigationDestinationResolverBase, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for [ToolbarPlacement.Role : ToolbarAppearanceConfiguration]();
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(255, &lazy cache variable for type metadata for NavigationTitleStorage?, (uint64_t)&type metadata for NavigationTitleStorage, MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for TextSelection?(255, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    _sypSgMaTm_1(255, (unint64_t *)&lazy cache variable for type metadata for ()?, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for NSObject(255, &lazy cache variable for type metadata for NSUserActivity);
    unint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for TextSelection(255);
    unint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for EventFilter<()>(255, &lazy cache variable for type metadata for EditMenuPresentation?, (uint64_t)&type metadata for EditMenuPresentation, MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    _sSay10Foundation3URLVGSgMaTm_0(255, &lazy cache variable for type metadata for [URL]?, (uint64_t (*)(uint64_t))type metadata accessor for [URL], MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    type metadata accessor for ToolbarStorage.NavigationProperties?(255, &lazy cache variable for type metadata for ToolbarStorage.NavigationProperties?, type metadata accessor for ToolbarStorage.NavigationProperties, MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for (_:);
  if (!lazy cache variable for type metadata for (_:))
  {
    _s10Foundation4DateVSgMaTm_1(255, &lazy cache variable for type metadata for [DateSequenceTimeline], (uint64_t (*)(uint64_t))type metadata accessor for DateSequenceTimeline, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getFunctionTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for (_:));
  }
  return result;
}

uint64_t destroy for LazyScrollable()
{
  return swift_weakDestroy();
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  type metadata accessor for _GraphValue<Namespace.ID>(0, a3, a4, MEMORY[0x1E4FBB718]);
  return a5(a1, v11, v10, v9, a2);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_1@<X0>(void (*a1)(void)@<X2>, _DWORD *a2@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a2);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(v4 + 16);
  uint64_t v8 = *(void *)(v4 + 24);
  uint64_t v10 = a3(0);
  return a4(a1, v10, v9, v8, a2);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_3@<X0>(void (*a1)(void)@<X2>, _DWORD *a2@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a2);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_4@<X0>(void (*a1)(void)@<X2>, _DWORD *a2@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a2);
}

uint64_t _s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TATm_5@<X0>(void (*a1)(void)@<X2>, _DWORD *a2@<X8>)
{
  return closure #1 in Attribute.init<A>(_:)(a2);
}

void type metadata accessor for [ScrollableCollection](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for [ScrollableCollection](uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for NavigationDestinationModifier.SeededResolver(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t partial apply for closure #1 in compareValues<A>(_:_:options:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(v8 + 24);
  int v10 = *(_DWORD *)(v8 + 32);
  uint64_t v13 = *(void *)(v8 + 16);
  uint64_t v14 = a1;
  int v15 = v10;
  return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)partial apply for closure #1 in closure #1 in compareValues<A>(_:_:options:), (uint64_t)&v12, v13, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], a8);
}

uint64_t _s14AttributeGraph13compareValues__7optionsSbx_xSo19AGComparisonOptionsVtlFSbSPyxGXEfU_TA_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return closure #1 in compareValues<A>(_:_:options:)(a1, *(void *)(v8 + 24), *(_DWORD *)(v8 + 32), *(void *)(v8 + 16), a2, a6, a7, a8);
}

uint64_t partial apply for closure #1 in closure #1 in compareValues<A>(_:_:options:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = AGCompareValues();
  *a1 = result;
  return result;
}

uint64_t closure #1 in compareValues<A>(_:_:options:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v9[2] = a4;
  v9[3] = a1;
  int v10 = a3;
  return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a2, (uint64_t)partial apply for closure #1 in closure #1 in compareValues<A>(_:_:options:), (uint64_t)v9, a4, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], a8);
}

unint64_t lazy protocol witness table accessor for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityAttachmentModifier and conformance AccessibilityAttachmentModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier);
  }
  return result;
}

uint64_t type metadata accessor for LazySubviewPlacements()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _LazyLayoutViewCache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LazyLayoutComputer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LazyScrollable()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LazySubviewPrefetcher()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier);
  }
  return result;
}

uint64_t partial apply for closure #1 in Attribute.init(value:)(uint64_t a1)
{
  return closure #1 in Attribute.init(value:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in Attribute.init(value:)@<X0>(_DWORD *a1@<X8>)
{
  return closure #1 in closure #1 in Attribute.init(value:)(a1);
}

uint64_t closure #1 in closure #1 in Attribute.init(value:)@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for External();
  swift_getWitnessTable();
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t closure #1 in Attribute.init(value:)(uint64_t a1, uint64_t a2)
{
  v6[5] = *MEMORY[0x1E4F143B8];
  v6[2] = a2;
  v6[3] = a1;
  uint64_t v2 = type metadata accessor for External();
  uint64_t v3 = type metadata accessor for Attribute();
  return _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)partial apply for closure #1 in closure #1 in Attribute.init(value:), (uint64_t)v6, v2, MEMORY[0x1E4FBC248], v3, MEMORY[0x1E4FBC278], v4);
}

unint64_t type metadata accessor for ScrollableCollection()
{
  unint64_t result = lazy cache variable for type metadata for ScrollableCollection;
  if (!lazy cache variable for type metadata for ScrollableCollection)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier;
  if (!lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier;
  if (!lazy protocol witness table cache variable for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier;
  if (!lazy protocol witness table cache variable for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier);
  }
  return result;
}

__n128 __swift_memcpy66_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t @objc static _UIHostingView.layerClass.getter()
{
  static _UIHostingView.layerClass.getter();

  return swift_getObjCClassFromMetadata();
}

uint64_t type metadata accessor for UIHostingViewDebugLayer()
{
  return self;
}

uint64_t static _UIHostingView.layerClass.getter()
{
  return type metadata accessor for UIHostingViewDebugLayer();
}

uint64_t PPTTestCase.SubTestName.rawValue.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t getEnumTagSinglePayload for ToolbarPlacement.Role(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFF9 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483641);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 6;
  if (v4 >= 8) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance ShadowSectionCollection<A>()
{
  swift_getWitnessTable();

  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t getEnumTagSinglePayload for AccessibilityLargeContentViewTree(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 233)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 195);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t partial apply for implicit closure #2 in makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #2 in makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)();
}

uint64_t (*protocol witness for Collection.subscript.read in conformance ShadowSectionCollection<A>(uint64_t **a1, char *a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)ShadowSectionCollection.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*ShadowSectionCollection.subscript.read(uint64_t *a1, char *a2, uint64_t a3))()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  a1[1] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  ShadowSectionCollection.subscript.getter(a2, a3, (uint64_t)v8);
  return ShadowRowCollection.subscript.read;
}

uint64_t ShadowSectionCollection.subscript.getter@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v21 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&AssociatedTypeWitness - v7;
  uint64_t v9 = swift_checkMetadataState();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&AssociatedTypeWitness - v12;
  (*(void (**)(uint64_t, uint64_t, double))(v4 + 56))(v5, v4, v11);
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();
  ShadowListUpdateRecorder.initialIndex(_:)(a1, updated, v8);
  int v15 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v17 = v16;
  uint64_t v18 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16))(v21, v17, v18);
  v15(v22, 0);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t ShadowSectionCollection.endIndex.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  double v5 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v9 - v6;
  (*(void (**)(uint64_t, uint64_t, double))(v1 + 56))(v2, v1, v5);
  swift_getAssociatedConformanceWitness();
  Collection.index(atOffset:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
}

uint64_t ShadowSectionCollection.startIndex.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v1 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  double v5 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v9 - v6;
  (*(void (**)(uint64_t, uint64_t, double))(v1 + 56))(v2, v1, v5);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Collection.startIndex.getter();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, AssociatedTypeWitness);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance ShadowRowCollection<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, double))
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  double v11 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v15 - v12;
  a6(a1, a2, v11);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a1, v13, AssociatedTypeWitness);
}

uint64_t ShadowRowCollection.index(after:)()
{
  return dispatch thunk of Collection.index(after:)();
}

uint64_t ShadowSectionCollection.index(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  double v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(v2 + 56))(v3, v2, v6);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of Collection.index(after:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, AssociatedTypeWitness);
}

uint64_t protocol witness for ListDiffable.sectionIDs.getter in conformance CollectionViewListDataSource<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CollectionViewListDataSource.sectionIDs.getter();
  *a1 = result;
  a1[1] = (uint64_t)specialized implicit closure #1 in ListSectionInfo.sectionIDs.getter;
  a1[2] = 0;
  return result;
}

uint64_t CollectionViewListDataSource.sectionIDs.getter()
{
  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for _HoverRegionModifier()
{
  return &type metadata for _HoverRegionModifier;
}

uint64_t type metadata completion function for UIKitButtonContentHost()
{
  return swift_initClassMetadata2();
}

ValueMetadata *type metadata accessor for ToolbarPlacement.Role()
{
  return &type metadata for ToolbarPlacement.Role;
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = static AccessibilityProperties.ActionsKey.defaultValue;
  swift_bridgeObjectRetain();
  char v3 = specialized static Array<A>.== infix(_:_:)(a1, v2);
  swift_bridgeObjectRelease();
  if (v3)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey, (uint64_t)v6);
    swift_bridgeObjectRelease();
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>();
    v6[3] = v5;
    v6[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AnyAccessibilityAction]> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>);
    v6[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
  }
}

{
  uint64_t v2;
  char v3;
  uint64_t v5;
  void v6[5];

  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = static AccessibilityProperties.ImagesKey.defaultValue;
  swift_bridgeObjectRetain();
  char v3 = specialized static Array<A>.== infix(_:_:)(a1, v2);
  swift_bridgeObjectRelease();
  if (v3)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.ImagesKey, (uint64_t)v6);
    swift_bridgeObjectRelease();
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<[Image]>();
    v6[3] = v5;
    v6[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[Image]> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<[Image]>);
    v6[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v6, (uint64_t)&type metadata for AccessibilityProperties.ImagesKey);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void v5[6];

  _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_1(a1, (uint64_t)v5, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
  if (v5[5])
  {
    uint64_t v2 = MEMORY[0x1E4F40E80];
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3((uint64_t)v5, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityValueStorage?>();
    v5[3] = v3;
    v5[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityValueStorage?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityValueStorage?>);
    v5[0] = swift_allocObject();
    _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_1(a1, v5[0] + 16, &lazy cache variable for type metadata for AccessibilityValueStorage?, v2);
    specialized Dictionary.subscript.setter((uint64_t)v5, MEMORY[0x1E4F40B98]);
    return _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3(a1, &lazy cache variable for type metadata for AccessibilityValueStorage?, v2);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E4F40B98], (uint64_t)v5);
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3(a1, &lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80]);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void v11[5];
  void v12[5];
  unsigned char v13[24];
  uint64_t v14;

  uint64_t v2 = MEMORY[0x1E4F412D8];
  outlined init with take of AccessibilityDataSeriesConfiguration?(a1, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?, MEMORY[0x1E4F412D8]);
  char v3 = v12[0];
  uint64_t v4 = v12[1];
  uint64_t v5 = v12[2];
  double v6 = v12[3];
  uint64_t v7 = v12[4];
  outlined init with take of AccessibilityDataSeriesConfiguration?(a1, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?, v2);
  if (v14)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>();
    v11[3] = v8;
    v11[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>);
    uint64_t v9 = (void *)swift_allocObject();
    v11[0] = v9;
    v9[2] = v3;
    v9[3] = v4;
    void v9[4] = v5;
    v9[5] = v6;
    void v9[6] = v7;
    return specialized Dictionary.subscript.setter((uint64_t)v11, MEMORY[0x1E4F40AF0]);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E4F40AF0], (uint64_t)v11);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
}

{
  uint64_t v2;
  void v4[5];

  if (a1)
  {
    type metadata accessor for AccessibilityPropertiesEntry<(NSObject & UIInteraction)?>(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?>, &lazy cache variable for type metadata for (NSObject & PlatformAccessibilityElementProtocol)?, (uint64_t)&lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol, (uint64_t)&protocolRef__TtP7SwiftUI36PlatformAccessibilityElementProtocol_);
    v4[3] = v2;
    v4[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<(NSObject & PlatformAccessibilityElementProtocol)?> and conformance AccessibilityPropertiesEntry<A>();
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey, (uint64_t)v4);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
}

{
  uint64_t v3;
  uint64_t v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  void v9[5];
  _OWORD v10[9];
  char v11;
  unsigned char v12[152];
  unsigned char v13[152];
  unsigned char v14[160];

  outlined init with take of AccessibilityDataSeriesConfiguration?(a1, (uint64_t)v12, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
  outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)v12, (uint64_t)v14, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
  outlined init with take of AccessibilityDataSeriesConfiguration?(a1, (uint64_t)v13, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
  if (_s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOg((uint64_t)v13) == 1)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey, (uint64_t)v10);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?>();
    v9[3] = v3;
    void v9[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?>);
    uint64_t v4 = swift_allocObject();
    v9[0] = v4;
    outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)v14, (uint64_t)v10, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
    uint64_t v5 = v10[7];
    *(_OWORD *)(v4 + 112) = v10[6];
    *(_OWORD *)(v4 + 128) = v5;
    *(_OWORD *)(v4 + 144) = v10[8];
    *(unsigned char *)(v4 + 160) = v11;
    double v6 = v10[3];
    *(_OWORD *)(v4 + 48) = v10[2];
    *(_OWORD *)(v4 + 64) = v6;
    uint64_t v7 = v10[5];
    *(_OWORD *)(v4 + 80) = v10[4];
    *(_OWORD *)(v4 + 96) = v7;
    uint64_t v8 = v10[1];
    *(_OWORD *)(v4 + 16) = v10[0];
    *(_OWORD *)(v4 + 32) = v8;
    return specialized Dictionary.subscript.setter((uint64_t)v9, (uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  void v9[3];
  uint64_t v10;
  unint64_t v11;

  outlined init with copy of ScrollableCollection?(a1, (uint64_t)v9);
  if (v10)
  {
    uint64_t v2 = MEMORY[0x1E4F40678];
    _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E4F40678]);
    type metadata accessor for ScrollableCollection??(0, &lazy cache variable for type metadata for AccessibilityPropertiesEntry<ScrollableCollection?>, MEMORY[0x1E4F41090]);
    uint64_t v10 = v3;
    double v11 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<ScrollableCollection?> and conformance AccessibilityPropertiesEntry<A>();
    v9[0] = swift_allocObject();
    outlined init with copy of ScrollableCollection?(a1, v9[0] + 16);
    specialized Dictionary.subscript.setter((uint64_t)v9, (uint64_t)&type metadata for AccessibilityProperties.ScrollableCollectionKey);
    uint64_t v4 = (void *)a1;
    uint64_t v5 = &lazy cache variable for type metadata for ScrollableCollection?;
    double v6 = &lazy cache variable for type metadata for ScrollableCollection;
    uint64_t v7 = v2;
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableCollectionKey, (uint64_t)v9);
    _s7SwiftUI20ScrollableCollection_pSgWOhTm_1(a1, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E4F40678]);
    uint64_t v5 = &lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?;
    double v6 = &lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry;
    uint64_t v7 = MEMORY[0x1E4F41218];
    uint64_t v4 = v9;
  }
  return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v4, (unint64_t *)v5, (uint64_t)v6, v7);
}

{
  uint64_t v3;
  void v4[8];
  unsigned __int8 v5;

  _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_1(a1, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  if (v5 == 255)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey, (uint64_t)v4);
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3(a1, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>();
    v4[3] = v3;
    v4[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityScrollableContext?>);
    v4[0] = swift_allocObject();
    _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_1(a1, v4[0] + 16, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
    specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey);
    return _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3(a1, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  }
}

{
  uint64_t v2;
  void v4[5];

  if (a1)
  {
    type metadata accessor for AccessibilityPropertiesEntry<(NSObject & UIInteraction)?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<(NSObject & UIInteraction)?>, &lazy cache variable for type metadata for (NSObject & UIInteraction)?, (uint64_t)&lazy cache variable for type metadata for NSObject & UIInteraction, (uint64_t)&protocolRef_UIInteraction);
    v4[3] = v2;
    v4[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<(NSObject & UIInteraction)?> and conformance AccessibilityPropertiesEntry<A>();
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.UIKitBridgedInteractionKey);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.UIKitBridgedInteractionKey, (uint64_t)v4);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
}

{
  uint64_t v2;
  void v4[5];

  if (*(void *)(a1 + 16))
  {
    type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>();
    v4[3] = v2;
    v4[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[AccessibilityRotorInfo]> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<[AccessibilityRotorInfo]>);
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.RotorInfoKey);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.RotorInfoKey, (uint64_t)v4);
    swift_bridgeObjectRelease();
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
}

{
  uint64_t v2;
  void v4[5];
  unsigned __int8 v5;

  _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_1(a1, (uint64_t)v4, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  if (v5 == 255)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.TableContextKey, (uint64_t)v4);
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3(a1, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3((uint64_t)v4, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTableContext?>();
    v4[3] = v2;
    v4[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTableContext?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTableContext?>);
    v4[0] = swift_allocObject();
    _s7SwiftUI25AccessibilityValueStorageVSgWOcTm_1(a1, v4[0] + 16, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    specialized Dictionary.subscript.setter((uint64_t)v4, (uint64_t)&type metadata for AccessibilityProperties.TableContextKey);
    return _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_3(a1, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  }
}

{
  return specialized AccessibilityProperties.subscript.setter(a1, MEMORY[0x1E4F40AB8], &lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Text]?>, (uint64_t (*)(uint64_t))type metadata accessor for [Text]?, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<[Text]?> and conformance AccessibilityPropertiesEntry<A>);
}

{
  uint64_t v2;
  void v4[5];

  if (a1)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityCustomAttributes?>();
    v4[3] = v2;
    v4[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityCustomAttributes?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityCustomAttributes?>);
    v4[0] = a1;
    return specialized Dictionary.subscript.setter((uint64_t)v4, MEMORY[0x1E4F40B38]);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E4F40B38], (uint64_t)v4);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
}

{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void v7[5];
  unsigned char __src[312];
  unsigned char v9[312];
  unsigned char v10[312];
  unsigned char v11[320];

  uint64_t v2 = MEMORY[0x1E4F412F0];
  outlined init with take of AccessibilityDataSeriesConfiguration?(a1, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0]);
  outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)v9, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v2);
  outlined init with take of AccessibilityDataSeriesConfiguration?(a1, (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v2);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v10) == 1)
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E4F40B68], (uint64_t)__src);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)__src, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityDataSeriesConfiguration?>();
    v7[3] = v4;
    v7[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityDataSeriesConfiguration?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityDataSeriesConfiguration?>);
    uint64_t v5 = swift_allocObject();
    double v6 = (void *)(v5 + 16);
    v7[0] = v5;
    outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)v11, (uint64_t)__src, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0]);
    memcpy(v6, __src, 0x138uLL);
    return specialized Dictionary.subscript.setter((uint64_t)v7, MEMORY[0x1E4F40B68]);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10[5];

  type metadata accessor for LinkDestination.Configuration?(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v10[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AccessibilityCustomAttributes.Value(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
  uint64_t v5 = type metadata accessor for LinkDestination.Configuration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5) == 1)
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E4F40B08], (uint64_t)v10);
    outlined destroy of AccessibilityValueStorage??(a1, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    outlined destroy of AccessibilityValueStorage??((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
    type metadata accessor for Locale?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<LinkDestination.Configuration?>, (uint64_t (*)(uint64_t))type metadata accessor for LinkDestination.Configuration?, MEMORY[0x1E4F41090]);
    unsigned char v10[3] = v7;
    v10[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_0(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<LinkDestination.Configuration?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<LinkDestination.Configuration?>, (uint64_t (*)(uint64_t))type metadata accessor for LinkDestination.Configuration?);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v10);
    outlined init with copy of AccessibilityCustomAttributes.Value(a1, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
    specialized Dictionary.subscript.setter((uint64_t)v10, MEMORY[0x1E4F40B08]);
    return outlined destroy of AccessibilityValueStorage??(a1, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
  }
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      char v8 = 1;
    }
    else
    {
      uint64_t v3 = a1 + 32;
      uint64_t v4 = a2 + 32;
      uint64_t v5 = v2 - 1;
      do
      {
        outlined init with copy of AnyAccessibilityAction(v3, (uint64_t)v13);
        outlined init with copy of AnyAccessibilityAction(v4, (uint64_t)v12);
        uint64_t v6 = v14;
        uint64_t v7 = v15;
        __swift_project_boxed_opaque_existential_1(v13, v14);
        char v8 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v7 + 88))(v12, v6, v7);
        outlined destroy of AnyAccessibilityAction((uint64_t)v12);
        outlined destroy of AnyAccessibilityAction((uint64_t)v13);
        BOOL v10 = v5-- != 0;
        if ((v8 & 1) == 0) {
          break;
        }
        v4 += 48;
        v3 += 48;
      }
      while (v10);
    }
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

{
  uint64_t v2;
  char v5;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v12;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    goto LABEL_7;
  }
  if (!v2 || a1 == a2) {
    goto LABEL_6;
  }
  swift_retain();
  swift_retain();
  uint64_t v5 = static Image.== infix(_:_:)();
  swift_release();
  swift_release();
  if ((v5 & 1) == 0)
  {
LABEL_7:
    uint64_t v6 = 0;
    return v6 & 1;
  }
  if (v2 == 1)
  {
LABEL_6:
    uint64_t v6 = 1;
    return v6 & 1;
  }
  char v8 = v2 - 2;
  uint64_t v9 = a1 + 40;
  BOOL v10 = a2 + 40;
  do
  {
    v9 += 8;
    v10 += 8;
    swift_retain();
    swift_retain();
    uint64_t v6 = static Image.== infix(_:_:)();
    swift_release();
    swift_release();
    uint64_t v12 = v8-- != 0;
  }
  while ((v6 & 1) != 0 && v12);
  return v6 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  _OWORD v7[2];
  uint64_t v8;
  unsigned char v9[40];
  unsigned char v10[24];
  uint64_t v11;
  long long v12;
  long long v13;
  uint64_t v14;
  unsigned char v15[40];
  unsigned char v16[40];

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = a1 + 32;
  uint64_t v4 = a2 + 32;
  while (2)
  {
    outlined init with copy of Toolbar.BarLocation(v3, (uint64_t)v16);
    outlined init with copy of Toolbar.BarLocation(v4, (uint64_t)v15);
    outlined init with copy of Toolbar.BarLocation((uint64_t)v16, (uint64_t)v10);
    outlined init with copy of Toolbar.BarLocation((uint64_t)v15, (uint64_t)&v12);
    switch(v11)
    {
      case 0:
        if (!*((void *)&v13 + 1)) {
          goto LABEL_6;
        }
        goto LABEL_41;
      case 1:
        if (*((void *)&v13 + 1) != 1) {
          goto LABEL_41;
        }
        goto LABEL_6;
      case 2:
        if (*((void *)&v13 + 1) != 2) {
          goto LABEL_41;
        }
        goto LABEL_6;
      case 3:
        if (*((void *)&v13 + 1) != 3) {
          goto LABEL_41;
        }
        goto LABEL_6;
      case 4:
        if (*((void *)&v13 + 1) != 4) {
          goto LABEL_41;
        }
        goto LABEL_6;
      case 5:
        if (*((void *)&v13 + 1) != 5) {
          goto LABEL_41;
        }
        goto LABEL_6;
      case 6:
        if (*((void *)&v13 + 1) != 6) {
          goto LABEL_41;
        }
        goto LABEL_6;
      case 7:
        if (*((void *)&v13 + 1) != 7) {
          goto LABEL_41;
        }
        goto LABEL_6;
      case 8:
        if (*((void *)&v13 + 1) != 8) {
          goto LABEL_41;
        }
        goto LABEL_6;
      case 9:
        if (*((void *)&v13 + 1) != 9) {
          goto LABEL_41;
        }
        goto LABEL_6;
      case 10:
        if (*((void *)&v13 + 1) != 10) {
          goto LABEL_41;
        }
        goto LABEL_6;
      case 11:
        if (*((void *)&v13 + 1) != 11) {
          goto LABEL_41;
        }
        goto LABEL_6;
      case 12:
        if (*((void *)&v13 + 1) != 12) {
          goto LABEL_41;
        }
        goto LABEL_6;
      case 13:
        if (*((void *)&v13 + 1) != 13) {
          goto LABEL_41;
        }
        goto LABEL_6;
      case 14:
        if (*((void *)&v13 + 1) == 14) {
          goto LABEL_6;
        }
        goto LABEL_41;
      default:
        outlined init with copy of Toolbar.BarLocation((uint64_t)v10, (uint64_t)v9);
        if (*((void *)&v13 + 1) >= 0xFuLL)
        {
          v7[0] = v12;
          v7[1] = v13;
          char v8 = v14;
          uint64_t v5 = MEMORY[0x18C1174E0](v9, v7);
          outlined destroy of AnyHashable((uint64_t)v7);
          outlined destroy of AnyHashable((uint64_t)v9);
          if ((v5 & 1) == 0)
          {
            outlined destroy of Toolbar.BarLocation((uint64_t)v10);
            goto LABEL_42;
          }
LABEL_6:
          outlined destroy of Toolbar.BarLocation((uint64_t)v10);
          outlined destroy of Toolbar.BarLocation((uint64_t)v15);
          outlined destroy of Toolbar.BarLocation((uint64_t)v16);
          v3 += 40;
          v4 += 40;
          if (!--v2) {
            return 1;
          }
          continue;
        }
        outlined destroy of AnyHashable((uint64_t)v9);
LABEL_41:
        outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
LABEL_42:
        outlined destroy of Toolbar.BarLocation((uint64_t)v15);
        outlined destroy of Toolbar.BarLocation((uint64_t)v16);
        return 0;
    }
  }
}

{
  uint64_t v2;
  BOOL v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t i;
  int32x2_t v10;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1;
    }
    uint64_t v5 = *(double *)(a1 + 32) == *(double *)(a2 + 32) && *(double *)(a1 + 40) == *(double *)(a2 + 40);
    if (v5 && (static UnitPoint.== infix(_:_:)() & 1) != 0)
    {
      uint64_t v6 = v2 - 1;
      if (!v6) {
        return 1;
      }
      char v8 = a2 + 88;
      for (int64_t i = a1 + 88; ; i += 32)
      {
        BOOL v10 = vmovn_s64(vceqq_f64(*(float64x2_t *)(i - 24), *(float64x2_t *)(v8 - 24)));
        if ((v10.i32[0] & v10.i32[1] & 1) == 0 || (static UnitPoint.== infix(_:_:)() & 1) == 0) {
          break;
        }
        v8 += 32;
        uint64_t result = 1;
        if (!--v6) {
          return result;
        }
      }
    }
  }
  return 0;
}

{
  uint64_t v2;
  void *v3;
  void *i;
  char v5;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (void *)(a1 + 32);
    for (int64_t i = (void *)(a2 + 32); ; ++i)
    {
      if (*v3 != *i)
      {
        swift_retain();
        swift_retain();
        uint64_t v5 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
        swift_release();
        swift_release();
        if ((v5 & 1) == 0) {
          break;
        }
      }
      ++v3;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  long long *v3;
  long long *v4;
  uint64_t v5;
  uint64_t v6;
  int Enum;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  int v16;
  int v17;
  uint64_t v19;
  _OWORD v20[10];
  unsigned char v21[19];
  _OWORD v22[10];
  unsigned char v23[19];
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  _OWORD v34[2];
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  unsigned char v45[19];
  _OWORD v46[11];
  uint64_t v47;
  unsigned char v48[184];
  _OWORD v49[15];
  long long v50[15];
  long long v51[15];
  _OWORD v52[15];
  _OWORD v53[15];
  _OWORD v54[16];

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = (long long *)(a1 + 32);
  uint64_t v4 = (long long *)(a2 + 32);
  uint64_t v5 = v2 - 1;
  uint64_t v6 = MEMORY[0x1E4F41550];
  while (1)
  {
    outlined init with take of AccessibilityLargeContentViewTree(v3, v50);
    outlined init with take of AccessibilityLargeContentViewTree(v4, v51);
    outlined init with take of AccessibilityLargeContentViewTree(v50, v52);
    outlined init with take of AccessibilityLargeContentViewTree(v51, v53);
    outlined init with take of AccessibilityLargeContentViewTree(v50, v54);
    Enum = getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v54);
    if (Enum)
    {
      if (Enum == 1)
      {
        char v8 = *(void *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v54);
        outlined init with take of AccessibilityLargeContentViewTree(v51, v46);
        if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v46) != 1) {
          goto LABEL_30;
        }
        uint64_t v9 = *(void *)destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v46);
        outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
        outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
        outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
        outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
        LOBYTE(v9) = specialized static Array<A>.== infix(_:_:)(v8, v9);
        outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v52);
        outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
        outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
        if ((v9 & 1) == 0) {
          return 0;
        }
      }
      else
      {
        outlined init with take of AccessibilityLargeContentViewTree(v51, v46);
        if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v46) != 2) {
          goto LABEL_30;
        }
        outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v52);
      }
      goto LABEL_27;
    }
    BOOL v10 = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v54);
    outlined init with take of AccessibilityLargeContentViewTree(v51, v49);
    if (getEnumTag for AccessibilityLargeContentViewTree((uint64_t)v49)) {
      goto LABEL_30;
    }
    double v11 = destructiveProjectEnumData for AccessibilityLargeContentViewTree((uint64_t)v49);
    uint64_t v12 = *(void *)(v10 + 8);
    uint64_t v13 = *(void *)(v11 + 8);
    if (v12)
    {
      if (!v13
        || (*(void *)v10 != *(void *)v11 || v12 != v13) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
LABEL_30:
        outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
        outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
        outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v52);
        return 0;
      }
    }
    else if (v13)
    {
      goto LABEL_30;
    }
    _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_1(v10 + 16, (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v6);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v48) == 1)
    {
      _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_1(v11 + 16, (uint64_t)v46, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v6);
      uint64_t v14 = _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v46);
      outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
      outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
      if (v14 != 1) {
        goto LABEL_34;
      }
      goto LABEL_25;
    }
    _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_1(v10 + 16, (uint64_t)&v35, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v6);
    _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_1(v11 + 16, (uint64_t)v46, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v6);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v46) == 1) {
      break;
    }
    _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_1(v11 + 16, (uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v6);
    v20[8] = v22[8];
    v20[9] = v22[9];
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v23;
    *(_DWORD *)&v21[15] = *(_DWORD *)&v23[15];
    void v20[4] = v22[4];
    v20[5] = v22[5];
    v20[6] = v22[6];
    v20[7] = v22[7];
    v20[0] = v22[0];
    v20[1] = v22[1];
    v20[2] = v22[2];
    v20[3] = v22[3];
    outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined retain of Image.Resolved?(v10 + 16, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
    outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
    outlined retain of Image.Resolved?(v10 + 16, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
    uint64_t v15 = specialized static Image.Resolved.== infix(_:_:)((uint64_t)&v35, (uint64_t)v20);
    uint64_t v32 = v43;
    uint64_t v33 = v44;
    v34[0] = *(_OWORD *)v45;
    *(_DWORD *)((char *)v34 + 15) = *(_DWORD *)&v45[15];
    unint64_t v28 = v39;
    uint64_t v29 = v40;
    int v30 = v41;
    uint64_t v31 = v42;
    uint64_t v24 = v35;
    uint64_t v25 = v36;
    uint64_t v26 = v37;
    uint64_t v27 = v38;
    outlined release of Image.Resolved((uint64_t)&v24);
    outlined retain of Image.Resolved?(v10 + 16, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
    if ((v15 & 1) == 0) {
      goto LABEL_35;
    }
LABEL_25:
    if (!CGRectEqualToRect(*(CGRect *)(v10 + 200), *(CGRect *)(v11 + 200))) {
      goto LABEL_35;
    }
    uint64_t v16 = *(unsigned __int8 *)(v10 + 232);
    uint64_t v17 = *(unsigned __int8 *)(v11 + 232);
    outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v52);
    outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
    outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
    outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
    outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
    uint64_t v6 = MEMORY[0x1E4F41550];
    if (v16 != v17) {
      return 0;
    }
LABEL_27:
    if (!v5) {
      return 1;
    }
    v4 += 15;
    v3 += 15;
    --v5;
  }
  uint64_t v32 = v43;
  uint64_t v33 = v44;
  v34[0] = *(_OWORD *)v45;
  *(_DWORD *)((char *)v34 + 15) = *(_DWORD *)&v45[15];
  unint64_t v28 = v39;
  uint64_t v29 = v40;
  int v30 = v41;
  uint64_t v31 = v42;
  uint64_t v24 = v35;
  uint64_t v25 = v36;
  uint64_t v26 = v37;
  uint64_t v27 = v38;
  outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
  outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
  outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
  outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
  outlined retain of Image.Resolved?(v10 + 16, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
  outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
  outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of AccessibilityLargeContentViewTree);
  outlined retain of Image.Resolved?(v10 + 16, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
  outlined release of Image.Resolved((uint64_t)&v24);
LABEL_34:
  uint64_t v19 = MEMORY[0x1E4F41550];
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_1(v10 + 16, (uint64_t)v46, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_1(v11 + 16, (uint64_t)&v47, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v19);
  outlined retain of Image.Resolved?(v11 + 16, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
  outlined release of (Image.Resolved?, Image.Resolved?)((uint64_t)v46);
LABEL_35:
  outlined release of (AccessibilityLargeContentViewTree, AccessibilityLargeContentViewTree)((uint64_t)v52);
  outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
  outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
  outlined retain of AccessibilityLargeContentViewTree((uint64_t)v51, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
  outlined retain of AccessibilityLargeContentViewTree((uint64_t)v50, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of AccessibilityLargeContentViewTree);
  return 0;
}

{
  uint64_t v2;
  unsigned char *v3;
  unsigned char *i;
  BOOL v5;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned char *)(a2 + 48);
    for (int64_t i = (unsigned char *)(a1 + 48); ; i += 24)
    {
      if (*i)
      {
        if ((*v3 & 1) == 0) {
          return 0;
        }
      }
      else if (*v3)
      {
        return 0;
      }
      uint64_t v5 = *((void *)i - 2) == *((void *)v3 - 2) && *((void *)i - 1) == *((void *)v3 - 1);
      if (!v5 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        break;
      }
      v3 += 24;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t i;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  for (int64_t i = 0; ; i += 32)
  {
    uint64_t result = 0;
    uint64_t v7 = a1 + i;
    char v8 = a2 + i;
    if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*(int32x4_t *)(a1 + i + 32), *(int32x4_t *)(a2 + i + 32))), 0xFuLL))) & 1) == 0|| *(_DWORD *)(a1 + i + 48) != *(_DWORD *)(a2 + i + 48)|| *(_DWORD *)(v7 + 52) != *(_DWORD *)(v8 + 52))
    {
      break;
    }
    uint64_t v9 = *(void *)(v8 + 56);
    if (*(void *)(v7 + 56))
    {
      if (!v9) {
        return 0;
      }
      swift_retain();
      swift_retain();
      BOOL v10 = static Animation.== infix(_:_:)();
      swift_release();
      swift_release();
      if ((v10 & 1) == 0) {
        return 0;
      }
    }
    else if (v9)
    {
      return 0;
    }
    if (!--v2) {
      return 1;
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t i;
  char v6;
  char v7;
  float v8;
  char v9;
  float v10;
  float v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  float v16;
  float v17;
  int v18;
  float v19;
  int v20;
  char v21;
  uint64_t result;
  char v23;
  long long v24;
  uint64_t v25;
  __int16 v26;
  long long v27;
  uint64_t v28;
  __int16 v29;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  for (int64_t i = 0; ; i += 48)
  {
    uint64_t v7 = *(unsigned char *)(a1 + i + 68);
    char v8 = *(float *)(a1 + i + 72);
    uint64_t v9 = *(unsigned char *)(a1 + i + 76);
    double v11 = *(float *)(a1 + i + 60);
    BOOL v10 = *(float *)(a1 + i + 64);
    uint64_t v12 = *(_WORD *)(a1 + i + 56);
    uint64_t v13 = *(void *)(a1 + i + 48);
    uint64_t v14 = *(void *)(a2 + i + 48);
    uint64_t v15 = *(_WORD *)(a2 + i + 56);
    uint64_t v17 = *(float *)(a2 + i + 60);
    uint64_t v16 = *(float *)(a2 + i + 64);
    uint64_t v18 = *(unsigned __int8 *)(a2 + i + 68);
    uint64_t v19 = *(float *)(a2 + i + 72);
    unint64_t v20 = *(unsigned __int8 *)(a2 + i + 76);
    uint64_t v27 = *(_OWORD *)(a1 + i + 32);
    unint64_t v28 = v13;
    uint64_t v29 = v12;
    uint64_t v24 = *(_OWORD *)(a2 + i + 32);
    uint64_t v25 = v14;
    uint64_t v26 = v15;
    uint64_t v21 = MEMORY[0x18C10E3F0](&v27, &v24);
    uint64_t result = 0;
    if ((v21 & 1) == 0 || v11 != v17) {
      break;
    }
    if (v7)
    {
      if (!v18) {
        return 0;
      }
    }
    else
    {
      if (v10 == v16) {
        uint64_t v23 = v18;
      }
      else {
        uint64_t v23 = 1;
      }
      if (v23) {
        return 0;
      }
    }
    if (v9)
    {
      if (!v20) {
        return 0;
      }
    }
    else
    {
      if (v8 == v19) {
        uint64_t v6 = v20;
      }
      else {
        uint64_t v6 = 1;
      }
      if (v6) {
        return 0;
      }
    }
    if (!--v2) {
      return 1;
    }
  }
  return result;
}

{
  uint64_t v2;
  unsigned char *v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned char *)(a2 + 64);
    uint64_t v4 = (unsigned char *)(a1 + 64);
    do
    {
      uint64_t v5 = *((void *)v4 - 4);
      uint64_t v6 = *((void *)v4 - 3);
      uint64_t v7 = *((void *)v3 - 4);
      char v8 = *((void *)v3 - 3);
      if (*v4)
      {
        if ((*v3 & 1) == 0) {
          return 0;
        }
        uint64_t v9 = *((void *)v4 - 2);
        BOOL v10 = *((void *)v4 - 1);
        double v11 = *((void *)v3 - 2);
        uint64_t v12 = *((void *)v3 - 1);
        uint64_t v13 = v5 == v7 && v6 == v8;
        if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return 0;
        }
        if (v9 != v11 || v10 != v12)
        {
LABEL_5:
          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
            return 0;
          }
        }
      }
      else
      {
        if (*v3) {
          return 0;
        }
        if (v5 != v7 || v6 != v8) {
          goto LABEL_5;
        }
      }
      v3 += 40;
      v4 += 40;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (void *)(a1 + 40);
    uint64_t v4 = (uint64_t *)(a2 + 40);
    do
    {
      uint64_t v5 = *v4;
      if (*v3)
      {
        if (!v5) {
          return 0;
        }
        uint64_t v6 = *(v3 - 1) == *(v4 - 1) && *v3 == v5;
        if (!v6 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          return 0;
        }
      }
      else if (v5)
      {
        return 0;
      }
      v3 += 2;
      v4 += 2;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v2;
  unsigned char *v3;
  char *v4;
  void *v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  char v12;
  int v13;
  void v15[2];
  void v16[2];

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned char *)(a2 + 48);
    uint64_t v4 = (char *)(a1 + 48);
    do
    {
      uint64_t v7 = *((void *)v4 - 2);
      uint64_t v6 = (void *)*((void *)v4 - 1);
      char v8 = *v4;
      BOOL v10 = *((void *)v3 - 2);
      uint64_t v9 = *((void *)v3 - 1);
      double v11 = *v3;
      if (*v4)
      {
        if (v8 == 1)
        {
          if (v11 != 1) {
            goto LABEL_21;
          }
          outlined copy of AccessibilityAttachment.Tree(*((void *)v4 - 2), *((void **)v4 - 1), 1);
          outlined copy of AccessibilityAttachment.Tree(v10, (void *)v9, 1);
          outlined copy of AccessibilityAttachment.Tree(v7, v6, 1);
          outlined copy of AccessibilityAttachment.Tree(v10, (void *)v9, 1);
          uint64_t v12 = specialized static Array<A>.== infix(_:_:)(v7, v10);
          outlined consume of AccessibilityAttachment.Tree(v7, v6, 1);
          outlined consume of AccessibilityAttachment.Tree(v10, (void *)v9, 1);
          outlined consume of AccessibilityAttachment.Tree(v10, (void *)v9, 1);
          outlined consume of AccessibilityAttachment.Tree(v7, v6, 1);
          if ((v12 & 1) == 0) {
            return 0;
          }
        }
        else
        {
          if (v11 != 2 || (v9 | v10) != 0)
          {
LABEL_21:
            outlined copy of AccessibilityAttachment.Tree(*((void *)v4 - 2), *((void **)v4 - 1), *v4);
            outlined copy of AccessibilityAttachment.Tree(v10, (void *)v9, v11);
            outlined consume of AccessibilityAttachment.Tree(v7, v6, v8);
            outlined consume of AccessibilityAttachment.Tree(v10, (void *)v9, v11);
            return 0;
          }
          outlined consume of AccessibilityAttachment.Tree(*((void *)v4 - 2), *((void **)v4 - 1), 2);
          outlined consume of AccessibilityAttachment.Tree(0, 0, 2);
        }
      }
      else
      {
        if (*v3) {
          goto LABEL_21;
        }
        v16[0] = *((void *)v4 - 2);
        v16[1] = v6;
        v15[0] = v10;
        v15[1] = v9;
        outlined copy of AccessibilityAttachment.Tree(v10, (void *)v9, 0);
        outlined copy of AccessibilityAttachment.Tree(v7, v6, 0);
        outlined copy of AccessibilityAttachment.Tree(v7, v6, 0);
        outlined copy of AccessibilityAttachment.Tree(v10, (void *)v9, 0);
        outlined copy of AccessibilityAttachment.Tree(v7, v6, 0);
        outlined copy of AccessibilityAttachment.Tree(v10, (void *)v9, 0);
        uint64_t v13 = MEMORY[0x18C111CD0](v16, v15);
        outlined consume of AccessibilityAttachment.Tree(v7, v6, 0);
        outlined consume of AccessibilityAttachment.Tree(v10, (void *)v9, 0);
        outlined consume of AccessibilityAttachment.Tree(v10, (void *)v9, 0);
        outlined consume of AccessibilityAttachment.Tree(v7, v6, 0);
        outlined consume of AccessibilityAttachment.Tree(v10, (void *)v9, 0);
        outlined consume of AccessibilityAttachment.Tree(v7, v6, 0);
        if ((v13 & 1) == 0) {
          return 0;
        }
      }
      v3 += 24;
      v4 += 24;
      --v2;
    }
    while (v2);
  }
  return 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  char v17;
  _OWORD v19[11];
  uint64_t v20;
  _OWORD v21[11];
  uint64_t v22;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      uint64_t v17 = 1;
    }
    else
    {
      uint64_t v3 = a1 + 32;
      uint64_t v4 = a2 + 32;
      uint64_t v5 = v2 - 1;
      do
      {
        uint64_t v6 = v5;
        uint64_t v7 = *(_OWORD *)(v3 + 144);
        v21[8] = *(_OWORD *)(v3 + 128);
        v21[9] = v7;
        v21[10] = *(_OWORD *)(v3 + 160);
        uint64_t v22 = *(void *)(v3 + 176);
        char v8 = *(_OWORD *)(v3 + 80);
        unsigned char v21[4] = *(_OWORD *)(v3 + 64);
        v21[5] = v8;
        uint64_t v9 = *(_OWORD *)(v3 + 112);
        v21[6] = *(_OWORD *)(v3 + 96);
        v21[7] = v9;
        BOOL v10 = *(_OWORD *)(v3 + 16);
        v21[0] = *(_OWORD *)v3;
        v21[1] = v10;
        double v11 = *(_OWORD *)(v3 + 48);
        v21[2] = *(_OWORD *)(v3 + 32);
        v21[3] = v11;
        uint64_t v12 = *(_OWORD *)(v4 + 144);
        v19[8] = *(_OWORD *)(v4 + 128);
        v19[9] = v12;
        v19[10] = *(_OWORD *)(v4 + 160);
        unint64_t v20 = *(void *)(v4 + 176);
        uint64_t v13 = *(_OWORD *)(v4 + 80);
        void v19[4] = *(_OWORD *)(v4 + 64);
        v19[5] = v13;
        uint64_t v14 = *(_OWORD *)(v4 + 112);
        v19[6] = *(_OWORD *)(v4 + 96);
        v19[7] = v14;
        uint64_t v15 = *(_OWORD *)(v4 + 16);
        v19[0] = *(_OWORD *)v4;
        v19[1] = v15;
        uint64_t v16 = *(_OWORD *)(v4 + 48);
        v19[2] = *(_OWORD *)(v4 + 32);
        v19[3] = v16;
        uint64_t v17 = static AccessibilityNodeProxy.== infix(_:_:)(v21, v19);
        if ((v17 & 1) == 0) {
          break;
        }
        uint64_t v5 = v6 - 1;
        v4 += 184;
        v3 += 184;
      }
      while (v6);
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  return v17 & 1;
}

{
  unint64_t v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  id v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t i;
  id v17;
  void *v18;
  char v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  unint64_t v23;

  uint64_t v5 = (void *)((unint64_t)a1 >> 62);
  if ((unint64_t)a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if ((unint64_t)a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6 == v22) {
      goto LABEL_5;
    }
    return 0;
  }
  if (v6 != *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    return 0;
  }
LABEL_5:
  if (!v6) {
    return 1;
  }
  uint64_t v7 = a1 & 0xFFFFFFFFFFFFFF8;
  char v8 = (a1 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a1 < 0) {
    uint64_t v7 = a1;
  }
  if (v5) {
    char v8 = v7;
  }
  uint64_t v9 = a2 & 0xFFFFFFFFFFFFFF8;
  BOOL v10 = (a2 & 0xFFFFFFFFFFFFFF8) + 32;
  if (a2 < 0) {
    uint64_t v9 = a2;
  }
  if ((unint64_t)a2 >> 62) {
    BOOL v10 = v9;
  }
  if (v8 == v10) {
    return 1;
  }
  if (v6 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  uint64_t v23 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
LABEL_42:
    uint64_t result = MEMORY[0x18C117680](0, a1);
    goto LABEL_19;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t result = (uint64_t)*(id *)(a1 + 32);
LABEL_19:
  uint64_t v5 = (void *)result;
  uint64_t v2 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_44:
    uint64_t v12 = (id)MEMORY[0x18C117680](0, a2);
LABEL_22:
    uint64_t v13 = v12;
    type metadata accessor for AccessibilityNode();
    uint64_t v14 = static NSObject.== infix(_:_:)();

    if (v14)
    {
      uint64_t v15 = 1 - v6;
      for (int64_t i = 5; ; ++i)
      {
        uint64_t v6 = v15 + i == 5;
        if (v15 + i == 5) {
          return v6;
        }
        unint64_t v20 = i - 4;
        if (v23)
        {
          uint64_t v21 = (id)MEMORY[0x18C117680](i - 4, a1);
          if (v2) {
            goto LABEL_24;
          }
        }
        else
        {
          if (v20 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
          uint64_t v21 = *(id *)(a1 + 8 * i);
          if (v2)
          {
LABEL_24:
            uint64_t v17 = (id)MEMORY[0x18C117680](i - 4, a2);
            goto LABEL_25;
          }
        }
        if (v20 >= *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_40;
        }
        uint64_t v17 = *(id *)(a2 + 8 * i);
LABEL_25:
        uint64_t v18 = v17;
        uint64_t v19 = static NSObject.== infix(_:_:)();

        if ((v19 & 1) == 0) {
          return v6;
        }
      }
    }
    return 0;
  }
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v12 = *(id *)(a2 + 32);
    goto LABEL_22;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  char v5;
  char v6;
  id v7;
  id v8;
  id v9;
  id v10;
  char v11;
  id v12;
  id v14;
  void v15[9];
  void v16[9];
  unsigned char v17[16];
  id v18;
  unsigned char v19[16];
  id v20;
  unsigned char v21[24];
  uint64_t v22;
  unsigned char v23[24];
  uint64_t v24;

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (!v2 || a1 == a2) {
    return 1;
  }
  uint64_t v3 = a1 + 32;
  for (int64_t i = a2 + 32; ; i += 72)
  {
    outlined init with copy of UIKitSearchBarCoordinator.SearchToken(v3, (uint64_t)v23);
    outlined init with copy of UIKitSearchBarCoordinator.SearchToken(i, (uint64_t)v21);
    uint64_t v6 = MEMORY[0x18C1174E0](&v24, &v22);
    outlined init with copy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v23, (uint64_t)v19);
    outlined init with copy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v21, (uint64_t)v17);
    if ((v6 & 1) == 0)
    {
      outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v17);
      outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v19);
      goto LABEL_21;
    }
    uint64_t v7 = v20;
    char v8 = v18;
    if (!v20) {
      break;
    }
    if (!v18)
    {
      uint64_t v14 = v20;
      outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v17);
      outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v19);

      goto LABEL_21;
    }
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
    uint64_t v9 = v8;
    BOOL v10 = v7;
    double v11 = static NSObject.== infix(_:_:)();
    outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v17);
    outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v19);

    outlined init with copy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v23, (uint64_t)v16);
    outlined init with copy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v21, (uint64_t)v15);
    if ((v11 & 1) == 0) {
      goto LABEL_22;
    }
LABEL_14:
    if (v16[0] == v15[0] && v16[1] == v15[1])
    {
      outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v16);
      outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v15);
      outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v21);
      outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v23);
    }
    else
    {
      uint64_t v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v16);
      outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v15);
      outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v21);
      outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v23);
      if ((v5 & 1) == 0) {
        return 0;
      }
    }
    v3 += 72;
    if (!--v2) {
      return 1;
    }
  }
  uint64_t v12 = v18;
  outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v17);
  outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v19);
  if (!v8)
  {
    outlined init with copy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v23, (uint64_t)v16);
    outlined init with copy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v21, (uint64_t)v15);
    goto LABEL_14;
  }

LABEL_21:
  outlined init with copy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v23, (uint64_t)v16);
  outlined init with copy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v21, (uint64_t)v15);
LABEL_22:
  outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v16);
  outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v15);
  outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v21);
  outlined destroy of UIKitSearchBarCoordinator.SearchToken((uint64_t)v23);
  return 0;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  BOOL v27;
  uint64_t v29;
  uint64_t v30;
  void (**v31)(char *, uint64_t);
  char *v32;
  void (*v33)(char *, uint64_t, uint64_t);
  uint64_t v34;

  uint64_t v4 = type metadata accessor for UTType();
  MEMORY[0x1F4188790](v4);
  v8.n128_f64[0] = MEMORY[0x1F4188790](v5);
  BOOL v10 = (char *)&v29 - v9;
  double v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      uint64_t v24 = 1;
    }
    else
    {
      uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
      uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
      uint64_t v13 = v6 + 16;
      uint64_t v32 = v7;
      uint64_t v33 = v14;
      uint64_t v15 = (v12 + 32) & ~v12;
      uint64_t v16 = *(void *)(v13 + 56);
      long long v34 = v13;
      int v30 = v16;
      uint64_t v31 = (void (**)(char *, uint64_t))(v13 - 8);
      uint64_t v17 = v11 - 1;
      uint64_t v18 = v7;
      do
      {
        uint64_t v19 = a1;
        unint64_t v20 = v10;
        uint64_t v21 = v10;
        uint64_t v22 = v33;
        ((void (*)(char *, uint64_t, uint64_t, __n128))v33)(v20, a1 + v15, v4, v8);
        uint64_t v23 = a2;
        v22(v18, a2 + v15, v4);
        BOOL v10 = v21;
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
        uint64_t v24 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v25 = *v31;
        (*v31)(v18, v4);
        v25(v21, v4);
        uint64_t v27 = v17-- != 0;
        if ((v24 & 1) == 0) {
          break;
        }
        v15 += v30;
        a2 = v23;
        a1 = v19;
      }
      while (v27);
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  return v24 & 1;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  BOOL v8;
  unsigned char v10[40];
  unsigned char v11[40];

  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v3 = a1 + 32;
      uint64_t v4 = a2 + 32;
      uint64_t v5 = v2 - 1;
      do
      {
        outlined init with copy of AnyHashable(v3, (uint64_t)v11);
        outlined init with copy of AnyHashable(v4, (uint64_t)v10);
        uint64_t v6 = MEMORY[0x18C1174E0](v11, v10);
        outlined destroy of AnyHashable((uint64_t)v10);
        outlined destroy of AnyHashable((uint64_t)v11);
        char v8 = v5-- != 0;
        if ((v6 & 1) == 0) {
          break;
        }
        v3 += 40;
        v4 += 40;
      }
      while (v8);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  return v6 & 1;
}

void type metadata accessor for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<[AnyAccessibilityAction]>);
    }
  }
}

uint64_t specialized AccessibilityProperties.subscript.getter(uint64_t a1)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v2, (uint64_t)v8);
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v11, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBB320]);
  if (swift_dynamicCast()) {
    return v8[0];
  }
  v8[0] = 0;
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v6 = static AccessibilityProperties.ActionsKey.defaultValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v6;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void v8[3];
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];

  if (*(void *)(a1 + 16)
    && (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ImagesKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v2, (uint64_t)v8);
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v11, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, &lazy cache variable for type metadata for [Image], MEMORY[0x1E4F41558], MEMORY[0x1E4FBB320]);
  if (swift_dynamicCast()) {
    return v8[0];
  }
  v8[0] = 0;
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v6 = static AccessibilityProperties.ImagesKey.defaultValue;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v6;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void, uint64_t);
  int v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];

  if (*(void *)(a1 + 16) && (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40B18]), (v3 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v2, (uint64_t)&v9);
    uint64_t v4 = v10;
    uint64_t v5 = v11;
    __swift_project_boxed_opaque_existential_1(&v9, v10);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v12, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v9);
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  uint64_t v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, &lazy cache variable for type metadata for Text?, MEMORY[0x1E4F41420], v6);
  uint64_t v7 = swift_dynamicCast();
  uint64_t result = 0;
  if (v7) {
    return v9;
  }
  return result;
}

{
  return specialized AccessibilityProperties.subscript.getter(a1, (uint64_t)&type metadata for AccessibilityProperties.BridgedElementKey, &lazy cache variable for type metadata for (NSObject & PlatformAccessibilityElementProtocol)?, (uint64_t)&lazy cache variable for type metadata for NSObject & PlatformAccessibilityElementProtocol, (uint64_t)&protocolRef__TtP7SwiftUI36PlatformAccessibilityElementProtocol_);
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];

  if (*(void *)(a1 + 16)
    && (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v2, (uint64_t)&v8);
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    __swift_project_boxed_opaque_existential_1(&v8, v9);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v11, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v8);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  uint64_t v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, v6);
  if (swift_dynamicCast()) {
    return v8;
  }
  else {
    return 0;
  }
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  void v7[3];
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];

  if (*(void *)(a1 + 16)
    && (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.RotorInfoKey),
        (v3 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v2, (uint64_t)v7);
    uint64_t v4 = v8;
    uint64_t v5 = v9;
    __swift_project_boxed_opaque_existential_1(v7, v8);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v10, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, &lazy cache variable for type metadata for [AccessibilityRotorInfo], (uint64_t)&type metadata for AccessibilityRotorInfo, MEMORY[0x1E4FBB320]);
  if (swift_dynamicCast()) {
    return v7[0];
  }
  else {
    return MEMORY[0x1E4FBC860];
  }
}

{
  return specialized AccessibilityProperties.subscript.getter(a1, MEMORY[0x1E4F40AB8], (void (*)(void))type metadata accessor for [Text]?);
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void, uint64_t);
  int v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];

  if (*(void *)(a1 + 16) && (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40AC8]), (v3 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v2, (uint64_t)&v10);
    uint64_t v4 = v11;
    uint64_t v5 = v12;
    __swift_project_boxed_opaque_existential_1(&v10, v11);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v13, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  }
  else
  {
    memset(v13, 0, sizeof(v13));
  }
  uint64_t v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, &lazy cache variable for type metadata for Double?, MEMORY[0x1E4FBB3D0], v6);
  uint64_t v7 = swift_dynamicCast();
  char v8 = v10;
  if (!v7) {
    return 0;
  }
  return v8;
}

{
  unint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void, uint64_t);
  void v8[3];
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[2];

  if (*(void *)(a1 + 16) && (unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40B48]), (v3 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v2, (uint64_t)v8);
    uint64_t v4 = v9;
    uint64_t v5 = v10;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v5 + 8))(v11, v4, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  uint64_t v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, &lazy cache variable for type metadata for AccessibilityHeadingLevel?, MEMORY[0x1E4F40E30], v6);
  if (swift_dynamicCast()) {
    return LOBYTE(v8[0]);
  }
  else {
    return 7;
  }
}

{
  return specialized AccessibilityProperties.subscript.getter(a1, MEMORY[0x1E4F40AF8], type metadata accessor for AccessibilityChartDescriptorStorage?);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result, uint64_t (*a2)(void))
{
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v7 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 + v3 <= *(void *)(v4 + 24) >> 1)
  {
    if (*(void *)(v7 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  uint64_t result = a2();
  uint64_t v4 = result;
  if (!*(void *)(v7 + 16))
  {
LABEL_10:
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
LABEL_5:
  if ((*(void *)(v4 + 24) >> 1) - *(void *)(v4 + 16) < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v2 = v4;
    return result;
  }
  uint64_t v8 = *(void *)(v4 + 16);
  BOOL v9 = __OFADD__(v8, v3);
  uint64_t v10 = v8 + v3;
  if (!v9)
  {
    *(void *)(v4 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v7 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 + v3 <= *(void *)(v4 + 24) >> 1)
  {
    if (*(void *)(v7 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  uint64_t result = a2();
  uint64_t v4 = result;
  if (!*(void *)(v7 + 16))
  {
LABEL_10:
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
LABEL_5:
  if ((*(void *)(v4 + 24) >> 1) - *(void *)(v4 + 16) < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v2 = v4;
    return result;
  }
  uint64_t v8 = *(void *)(v4 + 16);
  BOOL v9 = __OFADD__(v8, v3);
  uint64_t v10 = v8 + v3;
  if (!v9)
  {
    *(void *)(v4 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v7 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 + v3 <= *(void *)(v4 + 24) >> 1)
  {
    if (*(void *)(v7 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
  uint64_t result = a2();
  uint64_t v4 = result;
  if (!*(void *)(v7 + 16))
  {
LABEL_10:
    if (!v3) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
LABEL_5:
  if ((*(void *)(v4 + 24) >> 1) - *(void *)(v4 + 16) < v3)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v3)
  {
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v2 = v4;
    return result;
  }
  uint64_t v8 = *(void *)(v4 + 16);
  BOOL v9 = __OFADD__(v8, v3);
  uint64_t v10 = v8 + v3;
  if (!v9)
  {
    *(void *)(v4 + 16) = v10;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
  return result;
}

double specialized AccessibilityImageModifier.body(content:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  char v16 = *((unsigned char *)v1 + 8);
  unint64_t v4 = v1[4];
  uint64_t v14 = v1[3];
  uint64_t v15 = v1[2];
  uint64_t v13 = v1[5];
  uint64_t v48 = 32;
  v49[0] = v3;
  specialized View.accessibility<A>(_:_:isEnabled:)(dword_1ED44A098 | ((unint64_t)dword_1ED44A098 << 32), 1, (uint64_t)v30);
  type metadata accessor for External<AccessibilityContainerModifier>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Image>, MEMORY[0x1E4F41558], MEMORY[0x1E4FBBE00]);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_18834BB80;
  *(void *)(v5 + 32) = v3;
  *(void *)&long long v34 = v5;
  specialized Array._endMutation()();
  long long v42 = v30[8];
  long long v43 = v30[9];
  long long v44 = v30[10];
  uint64_t v6 = v32;
  uint64_t v45 = v31;
  long long v38 = v30[4];
  long long v39 = v30[5];
  long long v40 = v30[6];
  long long v41 = v30[7];
  long long v34 = v30[0];
  long long v35 = v30[1];
  long long v36 = v30[2];
  long long v37 = v30[3];
  uint64_t v7 = v33;
  swift_beginAccess();
  uint64_t v8 = *(void *)(v6 + 16);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v49);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized AccessibilityProperties.subscript.getter(v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(v9);
  uint64_t v17 = specialized AccessibilityProperties.subscript.getter(*(void *)(v6 + 16));
  uint64_t v10 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v10);
  specialized AccessibilityProperties.subscript.setter(v17);
  swift_bridgeObjectRelease();
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_beginAccess();
  if (v16) {
    uint64_t v11 = 0x400000004;
  }
  else {
    uint64_t v11 = 0;
  }
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v6 + 16, v11);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v46 = v6;
  uint64_t v47 = v7;
  if (v4 >> 1 != 0xFFFFFFFF)
  {
    outlined copy of AccessibilityImageLabel(v15, v14, v4);
    specialized closure #1 in AccessibilityImageModifier.body(content:)(v15, v14, v4, v13, &v34, &v48);
    outlined consume of AccessibilityImageLabel?(v15, v14, v4);
    uint64_t v6 = v46;
    uint64_t v7 = v47;
  }
  long long v27 = v43;
  long long v28 = v44;
  long long v23 = v39;
  long long v24 = v40;
  uint64_t v29 = v45;
  long long v25 = v41;
  long long v26 = v42;
  long long v18 = v34;
  long long v19 = v35;
  long long v20 = v36;
  long long v21 = v37;
  long long v22 = v38;
  AccessibilityNullableOptionSet<>.init(adding:)();
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v6 + 16);
  swift_endAccess();
  swift_release();
  swift_release();
  *(_OWORD *)(a1 + 128) = v26;
  *(_OWORD *)(a1 + 144) = v27;
  *(_OWORD *)(a1 + 160) = v28;
  *(_OWORD *)(a1 + 64) = v22;
  *(_OWORD *)(a1 + 80) = v23;
  *(_OWORD *)(a1 + 96) = v24;
  *(_OWORD *)(a1 + 112) = v25;
  *(_OWORD *)a1 = v18;
  *(_OWORD *)(a1 + 16) = v19;
  double result = *(double *)&v20;
  *(_OWORD *)(a1 + 32) = v20;
  *(_OWORD *)(a1 + 48) = v21;
  *(void *)(a1 + 176) = v29;
  *(void *)(a1 + 184) = v6;
  *(void *)(a1 + 192) = v7;
  return result;
}

uint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_0(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_0(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_1(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_2(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_3(255, a2, a3, a4, MEMORY[0x1E4F41090]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for AccessibilityPropertiesEntry<[Image]>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Image]>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, &lazy cache variable for type metadata for [Image], MEMORY[0x1E4F41558], MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<[Image]>);
    }
  }
}

uint64_t static SwiftUITextAccessibilityProvider.makeView(content:text:resolved:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v30 = *(void *)(a1 + 8);
  uint64_t v31 = *(void *)a1;
  char v13 = *(unsigned char *)(a1 + 16);
  swift_beginAccess();
  long long v14 = *(_OWORD *)(a6 + 128);
  long long v53 = *(_OWORD *)(a6 + 112);
  long long v54 = v14;
  long long v55 = *(_OWORD *)(a6 + 144);
  char v56 = *(unsigned char *)(a6 + 160);
  long long v15 = *(_OWORD *)(a6 + 64);
  long long v49 = *(_OWORD *)(a6 + 48);
  long long v50 = v15;
  long long v16 = *(_OWORD *)(a6 + 96);
  long long v51 = *(_OWORD *)(a6 + 80);
  long long v52 = v16;
  long long v17 = *(_OWORD *)(a6 + 32);
  long long v47 = *(_OWORD *)(a6 + 16);
  long long v48 = v17;
  char v18 = a4 & 1;
  outlined copy of Text.Storage(a2, a3, a4 & 1);
  swift_bridgeObjectRetain();
  swift_retain();
  outlined retain of TextLayoutProperties((uint64_t)&v47);
  char v19 = ResolvedStyledText.isDynamic.getter();
  char v20 = ResolvedStyledText.isEmpty.getter();
  swift_release();
  *(void *)&long long v57 = a2;
  *((void *)&v57 + 1) = a3;
  LOBYTE(v58) = v18;
  *((void *)&v58 + 1) = a5;
  long long v65 = v53;
  long long v66 = v54;
  *(_OWORD *)unsigned int v67 = v55;
  v67[16] = v56;
  long long v61 = v49;
  long long v62 = v50;
  long long v63 = v51;
  long long v64 = v52;
  long long v59 = v47;
  long long v60 = v48;
  v67[17] = v19 & 1;
  v67[18] = v20 & 1;
  long long v44 = v53;
  long long v45 = v54;
  v46[0] = v55;
  long long v40 = v49;
  long long v41 = v50;
  long long v42 = v51;
  long long v43 = v52;
  long long v36 = v57;
  long long v37 = v58;
  long long v38 = v47;
  long long v39 = v48;
  *(_DWORD *)((char *)v46 + 15) = *(_DWORD *)&v67[15];
  specialized AccessibilityStaticTextModifier.body(content:)(v31, v30, v13, (uint64_t)v32);
  outlined release of AccessibilityStaticTextModifier<StyledTextContentView>.Configuration((uint64_t)&v57);
  uint64_t v21 = v32[0];
  uint64_t v22 = v32[1];
  char v23 = v33;
  uint64_t v24 = v34;
  uint64_t v25 = v35;
  uint64_t result = ResolvedStyledText.accessibilityText.getter();
  *(void *)a7 = v21;
  *(void *)(a7 + 8) = v22;
  *(unsigned char *)(a7 + 16) = v23;
  *(void *)(a7 + 24) = v24;
  *(void *)(a7 + 32) = v25;
  *(unsigned char *)(a7 + 40) = 1;
  *(void *)(a7 + 48) = result;
  *(void *)(a7 + 56) = v27;
  *(unsigned char *)(a7 + 64) = v28 & 1;
  *(void *)(a7 + 72) = v29;
  return result;
}

uint64_t specialized AccessibilityStaticTextModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v9 = *(void *)v4;
  uint64_t v10 = *(void *)(v4 + 8);
  char v11 = *(unsigned char *)(v4 + 16);
  uint64_t v12 = *(void *)(v5 + 24);
  char v44 = *(unsigned char *)(v5 + 177);
  if (*(unsigned char *)(v5 + 178)) {
    unint64_t v13 = 0x800000008;
  }
  else {
    unint64_t v13 = 0x100000001;
  }
  specialized View.accessibility<A>(_:_:isEnabled:)(v13, 1, a1, a2, a3, (uint64_t)v64);
  specialized ModifiedContent<>.accessibilityLabel(_:)(v9, v10, v11 & 1, v12, (uint64_t)v60);
  outlined release of ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>((uint64_t)v64);
  long long v14 = *(_OWORD *)(v5 + 144);
  long long v15 = *(_OWORD *)(v5 + 112);
  long long v51 = *(_OWORD *)(v5 + 128);
  long long v52 = v14;
  long long v16 = *(_OWORD *)(v5 + 144);
  long long v53 = *(_OWORD *)(v5 + 160);
  long long v17 = *(_OWORD *)(v5 + 80);
  long long v18 = *(_OWORD *)(v5 + 48);
  long long v47 = *(_OWORD *)(v5 + 64);
  long long v48 = v17;
  long long v19 = *(_OWORD *)(v5 + 80);
  long long v20 = *(_OWORD *)(v5 + 112);
  long long v49 = *(_OWORD *)(v5 + 96);
  long long v50 = v20;
  long long v21 = *(_OWORD *)(v5 + 48);
  v46[0] = *(_OWORD *)(v5 + 32);
  v46[1] = v21;
  v55[6] = v51;
  v55[7] = v16;
  v55[8] = *(_OWORD *)(v5 + 160);
  v55[2] = v47;
  v55[3] = v19;
  v55[4] = v49;
  v55[5] = v15;
  char v54 = *(unsigned char *)(v5 + 176);
  char v56 = *(unsigned char *)(v5 + 176);
  v55[0] = v46[0];
  v55[1] = v18;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v55, v22, v23, v24);
  uint64_t v25 = v60[0];
  uint64_t v26 = v60[1];
  char v27 = v61;
  uint64_t v28 = v62;
  uint64_t v29 = v63;
  outlined init with take of AccessibilityTextLayoutProperties((uint64_t)v55, (uint64_t)v57);
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v57, v30, v31, v32);
  swift_beginAccess();
  _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?>, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
  v45[3] = v33;
  v45[4] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTextLayoutProperties?>, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
  uint64_t v34 = swift_allocObject();
  v45[0] = v34;
  outlined init with take of AccessibilityTextLayoutProperties?((uint64_t)v57, (uint64_t)v58);
  long long v35 = v58[7];
  *(_OWORD *)(v34 + 112) = v58[6];
  *(_OWORD *)(v34 + 128) = v35;
  *(_OWORD *)(v34 + 144) = v58[8];
  *(unsigned char *)(v34 + 160) = v59;
  long long v36 = v58[3];
  *(_OWORD *)(v34 + 48) = v58[2];
  *(_OWORD *)(v34 + 64) = v36;
  long long v37 = v58[5];
  *(_OWORD *)(v34 + 80) = v58[4];
  *(_OWORD *)(v34 + 96) = v37;
  long long v38 = v58[1];
  *(_OWORD *)(v34 + 16) = v58[0];
  *(_OWORD *)(v34 + 32) = v38;
  outlined retain of TextLayoutProperties((uint64_t)v46);
  outlined retain of TextLayoutProperties((uint64_t)v46);
  swift_retain();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)v45, (uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey);
  swift_endAccess();
  swift_release();
  swift_release();
  outlined release of TextLayoutProperties((uint64_t)v46);
  if (v44)
  {
    uint64_t v40 = unk_1ED45ACA8;
    if ((unk_1ED45ACA8 & ~qword_1ED45ACA0) == 0) {
      uint64_t v40 = 0;
    }
    uint64_t v39 = v40 | qword_1ED45ACA0;
  }
  else
  {
    uint64_t v39 = 256;
  }
  v45[0] = v39;
  AccessibilityNullableOptionSet<>.init(adding:)();
  uint64_t v41 = v45[5];
  uint64_t v42 = v45[6];
  swift_beginAccess();
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v28 + 16, v41, v42);
  swift_endAccess();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a4 = v25;
  *(void *)(a4 + 8) = v26;
  *(unsigned char *)(a4 + 16) = v27;
  *(void *)(a4 + 24) = v28;
  *(void *)(a4 + 32) = v29;
  return result;
}

uint64_t outlined retain of TextLayoutProperties(uint64_t a1)
{
  return a1;
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for Color?(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for External<AccessibilityContainerModifier>(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_1(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for AccessibilityUIKitTraits?(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_2(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    _sypSgMaTm_9(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_3(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t specialized ModifiedContent<>.accessibilityLabel(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  type metadata accessor for External<AccessibilityContainerModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18834BB80;
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  *(unsigned char *)(v12 + 48) = a3 & 1;
  *(void *)(v12 + 56) = a4;
  long long v21 = *(_OWORD *)(v6 + 24);
  swift_beginAccess();
  uint64_t v13 = MEMORY[0x1E4F40E40];
  _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40]);
  uint64_t v19 = v14;
  uint64_t v20 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, v13);
  uint64_t v17 = v12;
  char v18 = 2;
  swift_bridgeObjectRetain_n();
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  outlined retain of AccessibilityAttachmentModifier((uint64_t)&v21);
  specialized Dictionary.subscript.setter((uint64_t)&v17, MEMORY[0x1E4F40B88]);
  swift_endAccess();
  outlined release of AccessibilityAttachmentModifier((uint64_t)&v21);
  long long v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)a5 = *(_OWORD *)v6;
  *(_OWORD *)(a5 + 16) = v15;
  *(void *)(a5 + 32) = *(void *)(v6 + 32);
  outlined retain of ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>(v6);
  return swift_bridgeObjectRelease_n();
}

uint64_t outlined copy of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_retain();
  }
  else {
    return swift_bridgeObjectRetain();
  }
}

uint64_t outlined init with take of AccessibilityTextLayoutProperties(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 48);
  long long v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  long long v6 = *(_OWORD *)(a1 + 96);
  long long v7 = *(_OWORD *)(a1 + 112);
  long long v8 = *(_OWORD *)(a1 + 128);
  *(unsigned char *)(a2 + 144) = *(unsigned char *)(a1 + 144);
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 128) = v8;
  *(_OWORD *)(a2 + 96) = v6;
  return a2;
}

uint64_t outlined init with take of AccessibilityTextLayoutProperties?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for External<AccessibilityContainerModifier>(0, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for External<AccessibilityContainerModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined release of AccessibilityStaticTextModifier<StyledTextContentView>.Configuration(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of Text.Storage(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_release();
  }
  else {
    return swift_bridgeObjectRelease();
  }
}

uint64_t outlined release of AccessibilityAttachmentModifier(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of AccessibilityAttachmentModifier(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of TextLayoutProperties(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of Image.Resolved(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  unint64_t v5 = *(void **)(a1 + 168);
  outlined copy of GraphicsImage.Contents?(*(id *)a1, *(unsigned char *)(a1 + 8));
  outlined copy of AccessibilityImageLabel?(v2, v3, v4);
  id v6 = v5;
  swift_unknownObjectRetain();
  swift_retain();
  return a1;
}

uint64_t outlined retain of ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  unint64_t v5 = *(void **)(a1 + 168);
  outlined copy of GraphicsImage.Contents?(*(id *)a1, *(unsigned char *)(a1 + 8));
  outlined copy of AccessibilityImageLabel?(v2, v3, v4);
  swift_retain();
  swift_unknownObjectRetain();
  swift_retain();
  id v6 = v5;
  swift_retain();
  return a1;
}

uint64_t outlined copy of AccessibilityImageLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0) {
    outlined copy of Text.Storage(a1, a2, a3 & 1);
  }

  return swift_bridgeObjectRetain();
}

uint64_t outlined copy of AccessibilityImageLabel?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a3 >> 1 != 0xFFFFFFFF) {
    return outlined copy of AccessibilityImageLabel(a1, a2, a3);
  }
  return a1;
}

id outlined copy of GraphicsImage.Contents(id result, char a2)
{
  switch(a2)
  {
    case 0:
    case 1:
      uint64_t result = result;
      break;
    case 2:
    case 3:
    case 4:
    case 5:
      uint64_t result = (id)swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

id outlined copy of GraphicsImage.Contents?(id result, char a2)
{
  if (a2 != -1) {
    return outlined copy of GraphicsImage.Contents(result, a2);
  }
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t result)
{
  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v7 = result;
  *uint64_t v1 = v3;
  if (result)
  {
    uint64_t v8 = *(void *)(v3 + 24) >> 1;
    if (v8 >= v5)
    {
      if (*(void *)(v6 + 16)) {
        goto LABEL_5;
      }
      goto LABEL_12;
    }
  }
  if (v4 <= v5) {
    v4 += v2;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = MEMORY[0x18C117690](v7, v4, 1, v3);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = v3;
  uint64_t v8 = *(void *)(v3 + 24) >> 1;
  if (!*(void *)(v6 + 16))
  {
LABEL_12:
    if (!v2) {
      goto LABEL_13;
    }
    goto LABEL_17;
  }
LABEL_5:
  if (v8 - *(void *)(v3 + 16) < v2)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (v2)
  {
    uint64_t v9 = *(void *)(*v1 + 16);
    BOOL v10 = __OFADD__(v9, v2);
    uint64_t v11 = v9 + v2;
    if (!v10)
    {
      *(void *)(*v1 + 16) = v11;
      goto LABEL_13;
    }
LABEL_19:
    __break(1u);
    return result;
  }
LABEL_13:
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    uint64_t v11 = v4 + v2;
  }
  else {
    uint64_t v11 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 32 * v7 + 32), (const void *)(v6 + 32), 32 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = __OFADD__(v8, v2);
  BOOL v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    uint64_t v11 = v4 + v2;
  }
  else {
    uint64_t v11 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = __OFADD__(v8, v2);
  BOOL v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    uint64_t v11 = v4 + v2;
  }
  else {
    uint64_t v11 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 8 * v7 + 32), (const void *)(v6 + 32), 8 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = __OFADD__(v8, v2);
  BOOL v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    uint64_t v11 = v4 + v2;
  }
  else {
    uint64_t v11 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 4 * v7 + 32), (const void *)(v6 + 32), 4 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = __OFADD__(v8, v2);
  BOOL v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    uint64_t v11 = v4 + v2;
  }
  else {
    uint64_t v11 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 40 * v7 + 32), (const void *)(v6 + 32), 40 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = __OFADD__(v8, v2);
  BOOL v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    uint64_t v11 = v4 + v2;
  }
  else {
    uint64_t v11 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 112 * v7 + 32), (const void *)(v6 + 32), 112 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = __OFADD__(v8, v2);
  BOOL v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    BOOL v10 = v4 + v2;
  }
  else {
    BOOL v10 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v10, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((*(void *)(v3 + 24) >> 1) - *(void *)(v3 + 16) < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    *(void *)(v3 + 16) = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    uint64_t v11 = v4 + v2;
  }
  else {
    uint64_t v11 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 96 * v7 + 32), (const void *)(v6 + 32), 96 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = __OFADD__(v8, v2);
  BOOL v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  int64_t v11;

  uint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= *(void *)(v3 + 24) >> 1)
  {
    if (*(void *)(v6 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    uint64_t v11 = v4 + v2;
  }
  else {
    uint64_t v11 = v4;
  }
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v11, 1, (char *)v3);
  uint64_t v3 = result;
  if (!*(void *)(v6 + 16))
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  uint64_t v7 = *(void *)(v3 + 16);
  if ((*(void *)(v3 + 24) >> 1) - v7 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = (uint64_t)memcpy((void *)(v3 + 24 * v7 + 32), (const void *)(v6 + 32), 24 * v2);
  if (!v2)
  {
LABEL_14:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v1 = v3;
    return result;
  }
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = __OFADD__(v8, v2);
  BOOL v10 = v8 + v2;
  if (!v9)
  {
    *(void *)(v3 + 16) = v10;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t specialized View.accessibility<A>(_:_:isEnabled:)@<X0>(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  if (a2)
  {
    unsigned int v6 = a1;
    unint64_t v7 = HIDWORD(a1);
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v20 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
    v19[3] = v8;
    void v19[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>);
    v19[0] = __PAIR64__(v7, v6);
    specialized Dictionary.subscript.setter((uint64_t)v19, MEMORY[0x1E4F40AA8]);
    uint64_t v9 = v20;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v9 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v20 = v9;
  AccessibilityAttachment.init(properties:)();
  uint64_t v10 = v19[0];
  uint64_t v11 = v19[1];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  long long v13 = *(_OWORD *)(v4 + 144);
  *(_OWORD *)(a3 + 128) = *(_OWORD *)(v4 + 128);
  *(_OWORD *)(a3 + 144) = v13;
  *(_OWORD *)(a3 + 160) = *(_OWORD *)(v4 + 160);
  *(_DWORD *)(a3 + 175) = *(_DWORD *)(v4 + 175);
  long long v14 = *(_OWORD *)(v4 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v4 + 64);
  *(_OWORD *)(a3 + 80) = v14;
  long long v15 = *(_OWORD *)(v4 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(v4 + 96);
  *(_OWORD *)(a3 + 112) = v15;
  long long v16 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v4;
  *(_OWORD *)(a3 + 16) = v16;
  long long v17 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(a3 + 48) = v17;
  *(void *)(a3 + 184) = v12;
  *(void *)(a3 + 192) = 0;

  return outlined retain of Image.Resolved(v4);
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  void v18[5];
  uint64_t v19;
  uint64_t vars8;

  uint64_t v4 = v3;
  if (a2)
  {
    unsigned int v6 = a1;
    unint64_t v7 = HIDWORD(a1);
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v19 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
    v18[3] = v8;
    v18[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>);
    v18[0] = __PAIR64__(v7, v6);
    specialized Dictionary.subscript.setter((uint64_t)v18, MEMORY[0x1E4F40AA8]);
    uint64_t v9 = v19;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v9 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v19 = v9;
  AccessibilityAttachment.init(properties:)();
  uint64_t v10 = v18[0];
  uint64_t v11 = v18[1];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  long long v13 = *(_OWORD *)(v4 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(v4 + 96);
  *(_OWORD *)(a3 + 112) = v13;
  *(unsigned char *)(a3 + 128) = *(unsigned char *)(v4 + 128);
  long long v14 = *(_OWORD *)(v4 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(v4 + 32);
  *(_OWORD *)(a3 + 48) = v14;
  long long v15 = *(_OWORD *)(v4 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(v4 + 64);
  *(_OWORD *)(a3 + 80) = v15;
  long long v16 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)a3 = *(_OWORD *)v4;
  *(_OWORD *)(a3 + 16) = v16;
  *(void *)(a3 + 136) = v12;
  *(void *)(a3 + 144) = 0;

  return outlined retain of HStack<TupleView<(Spacer, VStack<TupleView<(Badge, Spacer)>>)>>(v4);
}

{
  uint64_t v3;
  uint64_t v4;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  void v14[5];
  uint64_t v15;

  uint64_t v4 = v3;
  if (a2)
  {
    unsigned int v6 = a1;
    unint64_t v7 = HIDWORD(a1);
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    long long v15 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
    v14[3] = v8;
    v14[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>);
    v14[0] = __PAIR64__(v7, v6);
    specialized Dictionary.subscript.setter((uint64_t)v14, MEMORY[0x1E4F40AA8]);
    uint64_t v9 = v15;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v9 = Dictionary.init(minimumCapacity:)();
  }
  long long v15 = v9;
  AccessibilityAttachment.init(properties:)();
  uint64_t v10 = v14[0];
  uint64_t v11 = v14[1];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(void *)(v12 + 24) = v11;
  uint64_t result = outlined init with copy of ResolvedTableStyle(v4, a3);
  *(void *)(a3 + 120) = v12;
  *(void *)(a3 + 128) = 0;
  return result;
}

uint64_t specialized View.accessibility<A>(_:_:isEnabled:)@<X0>(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  if (a2)
  {
    unsigned int v10 = a1;
    unint64_t v11 = HIDWORD(a1);
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v19 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4F41090]);
    v18[3] = v12;
    v18[4] = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>);
    v18[0] = __PAIR64__(v11, v10);
    specialized Dictionary.subscript.setter((uint64_t)v18, MEMORY[0x1E4F40AA8]);
    uint64_t v13 = v19;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v13 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v19 = v13;
  AccessibilityAttachment.init(properties:)();
  uint64_t v14 = v18[0];
  uint64_t v15 = v18[1];
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v14;
  *(void *)(v16 + 24) = v15;
  *(void *)a6 = a3;
  *(void *)(a6 + 8) = a4;
  *(unsigned char *)(a6 + 16) = a5 & 1;
  *(void *)(a6 + 24) = v16;
  *(void *)(a6 + 32) = 0;
  swift_retain();

  return swift_retain();
}

unint64_t type metadata accessor for AnyAccessibilityPropertiesEntry()
{
  unint64_t result = lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry;
  if (!lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<Text>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4F41420]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for AnyAccessibilityPropertiesEntry?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t specialized static ButtonStyleWriter._makeInputs(modifier:inputs:)(uint64_t a1, ValueMetadata *a2)
{
  lazy protocol witness table accessor for type ButtonStyleInput and conformance ButtonStyleInput();
  PropertyList.subscript.setter();
  uint64_t result = AnyButtonStyleType.isTopLevelStyle.getter(a2);
  if (result)
  {
    lazy protocol witness table accessor for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput();
    return PropertyList.subscript.setter();
  }
  return result;
}

void type metadata accessor for ButtonStyleModifier<DefaultButtonStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ButtonStyleInput and conformance ButtonStyleInput()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStyleInput and conformance ButtonStyleInput;
  if (!lazy protocol witness table cache variable for type ButtonStyleInput and conformance ButtonStyleInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleInput and conformance ButtonStyleInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ButtonStyleInput and conformance ButtonStyleInput;
  if (!lazy protocol witness table cache variable for type ButtonStyleInput and conformance ButtonStyleInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleInput and conformance ButtonStyleInput);
  }
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for ToolbarStorage.Entry);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E4F27DE8]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  char **v1;
  char **v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t (*v26)(char *);
  uint64_t v27;
  char *v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t (*v36)(char *);
  uint64_t v37;
  uint64_t v38;
  unsigned char v39[40];
  unsigned __int8 v40;
  unsigned char v41[40];
  unsigned __int8 v42;
  long long v43;
  long long v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char *v48;
  uint64_t vars8;

  uint64_t v2 = v1;
  uint64_t v3 = a1;
  unint64_t v4 = *(uint64_t (**)(void))(*(void *)a1 + 88);
  unint64_t v5 = *(void *)a1 + 88;
  uint64_t v6 = (char *)v4();
  uint64_t v7 = *(uint64_t (**)(void))(*(void *)v3 + 96);
  unint64_t v8 = v7();
  uint64_t v9 = v4();
  unint64_t v10 = v7();
  if ((uint64_t)v6 < v9 || v10 < (uint64_t)v6)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v12 = ((uint64_t (*)(uint64_t))v4)(v10);
  unint64_t v10 = v7();
  if (v8 < v12 || v10 < v8) {
    goto LABEL_26;
  }
  uint64_t v14 = v8 - (void)v6;
  if (__OFSUB__(v8, v6))
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v6 = *v2;
  uint64_t v15 = *((void *)*v2 + 2);
  uint64_t v16 = v15 + v14;
  if (__OFADD__(v15, v14))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v6;
  if (!isUniquelyReferenced_nonNull_native || (char v18 = *((void *)v6 + 3) >> 1, v18 < v16))
  {
    if (v15 <= v16) {
      uint64_t v19 = v15 + v14;
    }
    else {
      uint64_t v19 = v15;
    }
    uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v19, 1, v6);
    *uint64_t v2 = v6;
    char v18 = *((void *)v6 + 3) >> 1;
  }
  uint64_t v20 = *((void *)v6 + 2);
  long long v21 = v18 - v20;
  unint64_t v10 = specialized Sequence._copySequenceContents(initializing:)(&v47, (uint64_t)&v6[48 * v20 + 32], v18 - v20);
  if (v10 < v14) {
    goto LABEL_29;
  }
  if (v10 >= 1)
  {
    uint64_t v22 = *((void *)v6 + 2);
    uint64_t v23 = __OFADD__(v22, v10);
    uint64_t v24 = v22 + v10;
    if (v23)
    {
      __break(1u);
      goto LABEL_33;
    }
    *((void *)v6 + 2) = v24;
  }
  if (v10 == v21)
  {
LABEL_30:
    unint64_t v5 = *((void *)v6 + 2);
    uint64_t v3 = v47;
    uint64_t v6 = v48;
    if (v6 == (char *)(*(uint64_t (**)(uint64_t))(*(void *)v47 + 96))(v10))
    {
      long long v45 = 0;
      long long v43 = 0u;
      char v44 = 0u;
      uint64_t v46 = -1;
      goto LABEL_34;
    }
LABEL_33:
    (*(void (**)(long long *__return_ptr, char *))(*(void *)v3 + 104))(&v43, v6);
    uint64_t v26 = *(uint64_t (**)(char *))(*(void *)v3 + 120);
    swift_retain();
    char v27 = v26(v6);
    swift_release();
    long long v48 = (char *)v27;
LABEL_34:
    outlined init with copy of TableRowID?((uint64_t)&v43, (uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [Any]);
    if (v42 == 255)
    {
LABEL_52:
      long long v38 = MEMORY[0x1E4FBB718];
      outlined destroy of TableRowID?((uint64_t)&v43, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [Any]);
      swift_release();
      return outlined destroy of TableRowID?((uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, v38, (uint64_t (*)(void))type metadata accessor for [Any]);
    }
    while (1)
    {
      outlined destroy of TableRowID?((uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [Any]);
      uint64_t v28 = *v2;
      uint64_t v29 = *((void *)*v2 + 3);
      uint64_t v30 = v29 >> 1;
      if ((uint64_t)(v29 >> 1) < v5 + 1)
      {
        uint64_t v28 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v5 + 1, 1, *v2);
        *uint64_t v2 = v28;
        uint64_t v30 = *((void *)v28 + 3) >> 1;
      }
      outlined init with copy of TableRowID?((uint64_t)&v43, (uint64_t)v39, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [Any]);
      if (v40 != 255)
      {
        outlined init with take of TableRowID((uint64_t)v39, (uint64_t)v41);
        if (v5 <= v30) {
          uint64_t v31 = v30;
        }
        else {
          uint64_t v31 = v5;
        }
        if (v5 >= v30)
        {
LABEL_51:
          outlined destroy of TableRowID((uint64_t)v41);
          unint64_t v5 = v31;
          goto LABEL_37;
        }
        uint64_t v32 = (uint64_t)&v28[48 * v5 + 32];
        while (1)
        {
          outlined destroy of TableRowID?((uint64_t)&v43, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [Any]);
          uint64_t v33 = outlined init with take of TableRowID((uint64_t)v41, v32);
          uint64_t v34 = v47;
          long long v35 = v48;
          if (v35 == (char *)(*(uint64_t (**)(uint64_t))(*(void *)v47 + 96))(v33))
          {
            long long v45 = 0;
            long long v43 = 0u;
            char v44 = 0u;
            uint64_t v46 = -1;
          }
          else
          {
            (*(void (**)(long long *__return_ptr, char *))(*(void *)v34 + 104))(&v43, v35);
            long long v36 = *(uint64_t (**)(char *))(*(void *)v34 + 120);
            swift_retain();
            long long v37 = v36(v35);
            swift_release();
            long long v48 = (char *)v37;
          }
          outlined init with copy of TableRowID?((uint64_t)&v43, (uint64_t)v39, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [Any]);
          ++v5;
          if (v40 == 255) {
            break;
          }
          outlined init with take of TableRowID((uint64_t)v39, (uint64_t)v41);
          v32 += 48;
          if (v31 == v5) {
            goto LABEL_51;
          }
        }
      }
      outlined destroy of TableRowID?((uint64_t)v39, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [Any]);
LABEL_37:
      *((void *)*v2 + 2) = v5;
      outlined init with copy of TableRowID?((uint64_t)&v43, (uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for TableRowID?, (uint64_t)&type metadata for TableRowID, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [Any]);
      if (v42 == 255) {
        goto LABEL_52;
      }
    }
  }

  return swift_release();
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(void))type metadata accessor for (String?, String));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (void (*)(void))type metadata accessor for (key: String?, value: String));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E4FB0BB0]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E4FBCEA8]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (unint64_t *)&lazy cache variable for type metadata for Selectable);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for CommandsList.Item);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (unint64_t *)&lazy cache variable for type metadata for TableColumnList);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), &lazy cache variable for type metadata for CodingKey);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for DisplayList.HostedViewState.Key);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:));
}

{
  char **v1;
  char **v2;
  void *v4;
  char *v5;
  int64_t v6;
  char *v7;
  void *v8;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  unsigned int i;
  unint64_t v23;
  int64_t v24;
  unsigned int v25;
  char *v26;
  uint64_t v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  _OWORD v32[5];
  uint64_t v33;
  unsigned __int16 v34;
  char v35[328];

  uint64_t v2 = v1;
  unint64_t v4 = specialized BidirectionalCollection._distance(from:to:)(*(void **)(a1 + 240), *(void *)(a1 + 248), *(unsigned char *)(a1 + 256), *(void **)(a1 + 264), *(void *)(a1 + 272), *(unsigned char *)(a1 + 280));
  unint64_t v5 = *v1;
  uint64_t v6 = *((void *)*v2 + 2);
  uint64_t v7 = (char *)v4 + v6;
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v8 = v4;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v5;
  if (!isUniquelyReferenced_nonNull_native || (unint64_t v10 = *((void *)v5 + 3) >> 1, v10 < (uint64_t)v7))
  {
    if (v6 <= (uint64_t)v7) {
      uint64_t v11 = (int64_t)v7;
    }
    else {
      uint64_t v11 = v6;
    }
    unint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v11, 1, v5);
    *uint64_t v2 = v5;
    unint64_t v10 = *((void *)v5 + 3) >> 1;
  }
  uint64_t v12 = *((void *)v5 + 2);
  uint64_t v13 = v10 - v12;
  uint64_t v14 = (uint64_t)&v5[96 * v12 + 32];
  outlined init with copy of LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(a1, (uint64_t)v32);
  uint64_t v15 = specialized Sequence._copySequenceContents(initializing:)(v35, v14, v13);
  unint64_t result = outlined destroy of LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>(a1, &lazy cache variable for type metadata for LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>, MEMORY[0x1E4FBBBC0]);
  if (v15 < (uint64_t)v8) {
    goto LABEL_15;
  }
  if (v15 < 1) {
    goto LABEL_12;
  }
  long long v17 = *((void *)*v2 + 2);
  char v18 = __OFADD__(v17, v15);
  uint64_t v19 = v17 + v15;
  if (!v18)
  {
    *((void *)*v2 + 2) = v19;
LABEL_12:
    if (v15 != v13) {
      return outlined destroy of LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>((uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>.Iterator, MEMORY[0x1E4FBBBB8]);
    }
LABEL_16:
    uint64_t v20 = *v2;
    long long v21 = *((void *)*v2 + 2);
    specialized LazyMapSequence.Iterator.next()((uint64_t)v32);
    for (int64_t i = v34; HIBYTE(v34) <= 0xFEu; int64_t i = v34)
    {
      uint64_t v23 = *((void *)v20 + 3);
      uint64_t v24 = v23 >> 1;
      if ((uint64_t)(v23 >> 1) < v21 + 1)
      {
        uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v21 + 1, 1, v20);
        *uint64_t v2 = v20;
        int64_t i = v34;
        uint64_t v24 = *((void *)v20 + 3) >> 1;
      }
      if (i >> 8 <= 0xFE && v21 < v24)
      {
        LOBYTE(v25) = BYTE1(i);
        uint64_t v26 = &v20[96 * v21 + 121];
        do
        {
          char v27 = v33;
          uint64_t v28 = v32[1];
          uint64_t v29 = v32[2];
          uint64_t v30 = v32[3];
          uint64_t v31 = v32[4];
          *(_OWORD *)(v26 - 89) = v32[0];
          *(_OWORD *)(v26 - 73) = v28;
          *(_OWORD *)(v26 - 57) = v29;
          *(_OWORD *)(v26 - 41) = v30;
          *(_OWORD *)(v26 - 25) = v31;
          *(void *)(v26 - 9) = v27;
          *(v26 - 1) = i;
          ++v21;
          *uint64_t v26 = v25;
          specialized LazyMapSequence.Iterator.next()((uint64_t)v32);
          LOBYTE(i) = v34;
          uint64_t v25 = HIBYTE(v34);
          if (v25 > 0xFE) {
            break;
          }
          v26 += 96;
        }
        while (v21 < v24);
      }
      *((void *)v20 + 2) = v21;
    }
    return outlined destroy of LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>((uint64_t)v35, (unint64_t *)&lazy cache variable for type metadata for LazyMapSequence<DefaultIndices<CountingIndexCollection<ShadowRowCollection<TableDataSourceAdaptor>>>, ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>.Iterator, MEMORY[0x1E4FBBBB8]);
  }
  __break(1u);
  return result;
}

{
  char **v1;
  char **v2;
  uint64_t v3;
  char *v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int64_t v17;
  unsigned int v18;
  char v19;
  unint64_t v20;
  int64_t v21;
  char *v22;
  uint64_t v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  char *v28;
  char v29;
  char *v30;
  _OWORD v31[5];
  uint64_t v32;
  unsigned __int16 v33;
  uint64_t v34;
  char v35;

  uint64_t v2 = v1;
  uint64_t v3 = specialized BidirectionalCollection._distance(from:to:)(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned char *)(a1 + 48) & 1, *(void *)(a1 + 56), *(void *)(a1 + 64), *(unsigned char *)(a1 + 72) & 1, *(void *)a1, *(unsigned char *)(a1 + 8) & 1, *(void *)(a1 + 16), *(void *)(a1 + 24));
  unint64_t v4 = *v1;
  unint64_t v5 = *((void *)*v1 + 2);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    long long v17 = *((void *)v4 + 2);
    specialized LazyMapSequence.Iterator.next()((uint64_t)v31);
    char v18 = HIBYTE(v33);
    if (v18 > 0xFE) {
      goto LABEL_13;
    }
    uint64_t v19 = v33;
    while (1)
    {
      uint64_t v20 = *((void *)v4 + 3);
      long long v21 = v20 >> 1;
      if ((uint64_t)(v20 >> 1) < v17 + 1)
      {
        uint64_t v28 = v4;
        uint64_t v29 = v19;
        uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v17 + 1, 1, v28);
        uint64_t v19 = v29;
        unint64_t v4 = v30;
        long long v21 = *((void *)v30 + 3) >> 1;
        if (v17 < v21)
        {
LABEL_21:
          uint64_t v22 = &v4[96 * v17 + 121];
          do
          {
            uint64_t v23 = v32;
            uint64_t v24 = v31[1];
            uint64_t v25 = v31[2];
            uint64_t v26 = v31[3];
            char v27 = v31[4];
            *(_OWORD *)(v22 - 89) = v31[0];
            *(_OWORD *)(v22 - 73) = v24;
            *(_OWORD *)(v22 - 57) = v25;
            *(_OWORD *)(v22 - 41) = v26;
            *(_OWORD *)(v22 - 25) = v27;
            *(void *)(v22 - 9) = v23;
            *(v22 - 1) = v19;
            ++v17;
            *uint64_t v22 = v18;
            specialized LazyMapSequence.Iterator.next()((uint64_t)v31);
            uint64_t v19 = v33;
            char v18 = HIBYTE(v33);
            if (v18 > 0xFE) {
              break;
            }
            v22 += 96;
          }
          while (v17 < v21);
        }
      }
      else if (v17 < v21)
      {
        goto LABEL_21;
      }
      *((void *)v4 + 2) = v17;
      uint64_t v19 = v33;
      char v18 = HIBYTE(v33);
      if (v18 > 0xFE) {
        goto LABEL_13;
      }
    }
  }
  uint64_t v7 = v3;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v9 = *((void *)v4 + 3) >> 1, v9 < v6))
  {
    if (v5 <= v6) {
      unint64_t v10 = v6;
    }
    else {
      unint64_t v10 = v5;
    }
    unint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    uint64_t v9 = *((void *)v4 + 3) >> 1;
  }
  uint64_t v11 = *((void *)v4 + 2);
  uint64_t v12 = v9 - v11;
  unint64_t result = (uint64_t)specialized Sequence._copySequenceContents(initializing:)(&v34, (uint64_t)&v4[96 * v11 + 32], v9 - v11);
  if (result < v7) {
    goto LABEL_15;
  }
  if (result < 1) {
    goto LABEL_12;
  }
  uint64_t v14 = *((void *)v4 + 2);
  uint64_t v15 = __OFADD__(v14, result);
  uint64_t v16 = v14 + result;
  if (!v15)
  {
    *((void *)v4 + 2) = v16;
LABEL_12:
    if (result != v12)
    {
LABEL_13:
      outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v34, v35);
      unint64_t result = swift_release();
      *uint64_t v2 = v4;
      return result;
    }
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3, char *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UINavigationItemAdaptorStorage.Adaptor>, (uint64_t)&type metadata for UINavigationItemAdaptorStorage.Adaptor);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UITraitBridgedEnvironmentKey.Type>, &lazy cache variable for type metadata for UITraitBridgedEnvironmentKey.Type, &lazy cache variable for type metadata for UITraitBridgedEnvironmentKey);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<PopoverPresentation>, (uint64_t)&type metadata for PopoverPresentation);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Toolbar.BarLocation>, (uint64_t)&type metadata for Toolbar.BarLocation);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<VersionSeedSetTracker.Value>, (uint64_t)&type metadata for VersionSeedSetTracker.Value);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Int>, MEMORY[0x1E4FBB550]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<Range<Int>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<CollectionChanges<Int, Int>.Element>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarItemPlacement.Role>, (uint64_t)&type metadata for ToolbarItemPlacement.Role);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_CommandsOutputs>, (uint64_t)&type metadata for _CommandsOutputs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ObjectIdentifier>, MEMORY[0x1E4FBB058]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridMetadata>, (uint64_t)&type metadata for GridMetadata);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_TableColumnOutputs>, (uint64_t)&type metadata for _TableColumnOutputs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityRotorInfo>, (uint64_t)&type metadata for AccessibilityRotorInfo);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityCustomContentEntry>, MEMORY[0x1E4F41210]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_TableRowOutputs>, (uint64_t)&type metadata for _TableRowOutputs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<TableRowID>, (uint64_t)&type metadata for TableRowID);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_SceneOutputs>, (uint64_t)&type metadata for _SceneOutputs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachmentStorage>, (uint64_t)&type metadata for AccessibilityAttachmentStorage);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Path>, MEMORY[0x1E4F413B0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationDestinationOutputs>, (uint64_t)&type metadata for NavigationDestinationOutputs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<(seed: Int, removeIndex: Int)>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<TabCustomizationID>, (uint64_t)&type metadata for TabCustomizationID);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<Namespace.ID>, MEMORY[0x1E4F41808], MEMORY[0x1E4FBBE00], (void (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<(Int, Int)>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuBuilderInstruction>, (uint64_t)&type metadata for MenuBuilderInstruction);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_SymbolEffect.Identified>, MEMORY[0x1E4F3F870]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachment.Tree>, (uint64_t)&type metadata for AccessibilityAttachment.Tree);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UISceneConnectionOptionDefinition.Type>, (unint64_t *)&lazy cache variable for type metadata for UISceneConnectionOptionDefinition.Type, (unint64_t *)&lazy cache variable for type metadata for UISceneConnectionOptionDefinition);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AdaptableTabBarPlacement>, (uint64_t)&type metadata for AdaptableTabBarPlacement);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_WidgetOutputs>, (uint64_t)&type metadata for _WidgetOutputs);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityListRotorEntry>, (uint64_t)&type metadata for AccessibilityListRotorEntry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<AXSwiftUITraits>, (uint64_t)type metadata accessor for AXSwiftUITraits, MEMORY[0x1E4FBBE00], (void (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<_SymbolEffect>, MEMORY[0x1E4F3F8A8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<ListUpdate<Int, Int>>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>, (unint64_t *)&lazy cache variable for type metadata for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>, (uint64_t (*)(uint64_t, void *))type metadata accessor for ListUpdate);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<CollectionChanges<CountingIndex<Int>, CountingIndex<Int>>.Element>, &lazy cache variable for type metadata for CollectionChanges<CountingIndex<Int>, CountingIndex<Int>>.Element, (uint64_t (*)(uint64_t, void *))type metadata accessor for CollectionChanges.Element);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<JindoTripleVStack.MajorAxisGroup.Group>, (uint64_t)&type metadata for JindoTripleVStack.MajorAxisGroup.Group);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityRole>, (uint64_t)&type metadata for AccessibilityRole);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ViewTransform.Item>, MEMORY[0x1E4F3F7F8]);
}

uint64_t outlined copy of ToggleStyleConfiguration.Effect(uint64_t result, uint64_t a2, char a3, void *a4)
{
  if (a4)
  {
    outlined copy of Environment<AppIntentExecutor?>.Content(result, a2, a3 & 1);
    id v5 = a4;
    return swift_retain();
  }
  return result;
}

void *outlined release of AccessibilityButtonModifier<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, ShowsNavigationIndicatorDisclosureIndicatorModifier>, PlatformItemListTransformModifier<LayoutPlatformItemListFlags>>>(void *a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  id v5 = (void *)a1[5];
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v2, v3, v4, v5);
  return a1;
}

void outlined consume of ToggleStyleConfiguration.Effect(uint64_t a1, uint64_t a2, char a3, void *a4)
{
  if (a4)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(a1, a2, a3 & 1);
    swift_release();
  }
}

void type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI28StyleContextAcceptsPredicateVyAA026AccessibilityRepresentablecD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>()
{
  if (!lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>)
  {
    type metadata accessor for MenuStyleModifier<DefaultMenuStyle>(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActionStorage<AccessibilityVoidAction>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction, (uint64_t)&type metadata for AccessibilityVoidAction, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AccessibilityActionStorage);
    lazy protocol witness table accessor for type AccessibilityActionStorage<AccessibilityVoidAction> and conformance AccessibilityActionStorage<A>();
    unint64_t v0 = type metadata accessor for AnyAccessibilityAction.ConcreteBase();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>);
    }
  }
}

uint64_t specialized closure #1 in AccessibilityImageModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, void *a6)
{
  long long v11 = a5[11];
  long long v66 = a5[10];
  long long v67 = v11;
  uint64_t v68 = *((void *)a5 + 24);
  long long v12 = a5[7];
  long long v62 = a5[6];
  long long v63 = v12;
  long long v13 = a5[9];
  long long v64 = a5[8];
  long long v65 = v13;
  long long v14 = a5[3];
  long long v58 = a5[2];
  long long v59 = v14;
  long long v15 = a5[5];
  long long v60 = a5[4];
  long long v61 = v15;
  long long v16 = a5[1];
  long long v56 = *a5;
  long long v57 = v16;
  type metadata accessor for External<AccessibilityContainerModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_18834BB80;
  *(void *)&long long v69 = a1;
  *((void *)&v69 + 1) = a2;
  *(void *)&long long v70 = a3;
  *((void *)&v70 + 1) = a4;
  outlined retain of ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier>((uint64_t)&v56);
  *(void *)(v17 + 32) = AccessibilityImageLabel.text.getter();
  *(void *)(v17 + 40) = v18;
  *(unsigned char *)(v17 + 48) = v19 & 1;
  *(void *)(v17 + 56) = v20;
  uint64_t v21 = *((void *)&v67 + 1) + 16;
  swift_beginAccess();
  uint64_t v22 = MEMORY[0x1E4F40E40];
  _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40]);
  *((void *)&v70 + 1) = v23;
  *(void *)&long long v71 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityLabelStorage?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityLabelStorage?>, &lazy cache variable for type metadata for AccessibilityLabelStorage?, v22);
  *(void *)&long long v69 = v17;
  BYTE8(v69) = 3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Dictionary.subscript.setter((uint64_t)&v69, MEMORY[0x1E4F40B88]);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  long long v24 = a5[11];
  long long v79 = a5[10];
  long long v80 = v24;
  uint64_t v81 = *((void *)a5 + 24);
  long long v25 = a5[7];
  long long v75 = a5[6];
  long long v76 = v25;
  long long v26 = a5[9];
  long long v77 = a5[8];
  long long v78 = v26;
  long long v27 = a5[3];
  long long v71 = a5[2];
  long long v72 = v27;
  long long v28 = a5[5];
  long long v73 = a5[4];
  long long v74 = v28;
  long long v29 = a5[1];
  long long v69 = *a5;
  long long v70 = v29;
  uint64_t result = outlined release of ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier>((uint64_t)&v69);
  long long v31 = v67;
  a5[10] = v66;
  a5[11] = v31;
  *((void *)a5 + 24) = v68;
  long long v32 = v63;
  a5[6] = v62;
  a5[7] = v32;
  long long v33 = v65;
  a5[8] = v64;
  a5[9] = v33;
  long long v34 = v59;
  a5[2] = v58;
  a5[3] = v34;
  long long v35 = v61;
  a5[4] = v60;
  a5[5] = v35;
  long long v36 = v57;
  *a5 = v56;
  a5[1] = v36;
  if (a3 < 0)
  {
    swift_beginAccess();
    outlined retain of ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier>((uint64_t)&v56);
    swift_retain();
    swift_retain();
    specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v21, a1, a2, 1);
    swift_endAccess();
    swift_release();
    swift_release();
    long long v37 = a5[10];
    long long v38 = a5[11];
    long long v39 = a5[8];
    v54[9] = a5[9];
    v54[10] = v37;
    v54[11] = v38;
    long long v41 = a5[6];
    long long v40 = a5[7];
    uint64_t v55 = *((void *)a5 + 24);
    v54[7] = v40;
    v54[8] = v39;
    long long v42 = a5[3];
    v54[2] = a5[2];
    v54[3] = v42;
    long long v43 = a5[4];
    v54[5] = a5[5];
    v54[6] = v41;
    v54[4] = v43;
    long long v44 = a5[1];
    v54[0] = *a5;
    v54[1] = v44;
    outlined release of ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier>((uint64_t)v54);
    long long v45 = v67;
    a5[10] = v66;
    a5[11] = v45;
    *((void *)a5 + 24) = v68;
    long long v46 = v63;
    a5[6] = v62;
    a5[7] = v46;
    long long v47 = v65;
    a5[8] = v64;
    a5[9] = v47;
    long long v48 = v59;
    a5[2] = v58;
    a5[3] = v48;
    long long v49 = v61;
    a5[4] = v60;
    a5[5] = v49;
    long long v50 = v57;
    *a5 = v56;
    a5[1] = v50;
    v51._countAndFlagsBits = 0x72616D6B63656863;
    v51._object = (void *)0xE90000000000006BLL;
    uint64_t result = String.hasPrefix(_:)(v51);
    if (result) {
      *a6 |= 4uLL;
    }
  }
  return result;
}

uint64_t outlined release of ModifiedContent<Image.Resolved, AccessibilityAttachmentModifier>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 104);
  uint64_t v3 = *(void *)(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 120);
  unint64_t v5 = *(void **)(a1 + 168);
  outlined consume of GraphicsImage.Contents?(*(void **)a1, *(unsigned char *)(a1 + 8));
  outlined consume of AccessibilityImageLabel?(v2, v3, v4);
  swift_release();
  swift_unknownObjectRelease();
  swift_release();

  swift_release();
  return a1;
}

uint64_t outlined consume of AccessibilityImageLabel(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x8000000000000000) == 0) {
    outlined consume of Text.Storage(a1, a2, a3 & 1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of AccessibilityImageLabel?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)a3 >> 1 != 0xFFFFFFFF) {
    return outlined consume of AccessibilityImageLabel(a1, a2, a3);
  }
  return a1;
}

void outlined consume of GraphicsImage.Contents(void *a1, char a2)
{
  switch(a2)
  {
    case 0:
    case 1:

      break;
    case 2:
    case 3:
    case 4:
    case 5:
      swift_release();
      break;
    default:
      return;
  }
}

void outlined consume of GraphicsImage.Contents?(void *a1, char a2)
{
  if (a2 != -1) {
    outlined consume of GraphicsImage.Contents(a1, a2);
  }
}

unint64_t lazy protocol witness table accessor for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput()
{
  unint64_t result = lazy protocol witness table cache variable for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput;
  if (!lazy protocol witness table cache variable for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput;
  if (!lazy protocol witness table cache variable for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EffectiveButtonStyleInput and conformance EffectiveButtonStyleInput);
  }
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ContentScrollViewBox>, (uint64_t)&type metadata for ContentScrollViewBox, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    _OWORD v10[2] = v8;
    unsigned char v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 < a4 || v10 + 4 >= &a4[6 * v8 + 4])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NSNotificationName>, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    long long v12 = v11 - 32;
    if (v11 < 32) {
      long long v12 = v11 - 25;
    }
    _OWORD v10[2] = v8;
    unsigned char v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for NSNotificationName(0);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UIHostingKeyboardTrackingElement.Element>, (uint64_t)&type metadata for UIHostingKeyboardTrackingElement.Element, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    long long v12 = v11 - 32;
    if (v11 < 32) {
      long long v12 = v11 - 17;
    }
    _OWORD v10[2] = v8;
    unsigned char v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 < a4 || v10 + 4 >= &a4[2 * v8 + 4])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<FocusStoreList.Item>, (uint64_t)&type metadata for FocusStoreList.Item, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    _OWORD v10[2] = v8;
    unsigned char v10[3] = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 < a4 || v10 + 4 >= &a4[9 * v8 + 4])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v10 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<_RowVisitationContext<TableDataSourceAdaptor>>();
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    _OWORD v10[2] = v8;
    unsigned char v10[3] = 2 * ((uint64_t)(v11 - 32) / 208);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[26 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 208 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for ClosedRange<CGFloat>(0, (unint64_t *)&lazy cache variable for type metadata for _RowVisitationContext<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _RowVisitationContext);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>();
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    _OWORD v10[2] = v8;
    unsigned char v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[3 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 24 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    _sypSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_Benchmark, [Double])>, (uint64_t (*)(uint64_t))type metadata accessor for (_Benchmark, [Double]), MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    _OWORD v10[2] = v8;
    unsigned char v10[3] = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[6 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 48 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (_Benchmark, [Double])();
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<PresentationOptionsPreference?>();
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    _OWORD v10[2] = v8;
    unsigned char v10[3] = 2 * ((uint64_t)(v11 - 32) / 144);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[18 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 144 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    _sypSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for PresentationOptionsPreference?, (uint64_t)&type metadata for PresentationOptionsPreference, MEMORY[0x1E4FBB718]);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>, (uint64_t (*)(uint64_t))type metadata accessor for (index: Int, element: TabCustomizationID, id: TabCustomizationID), MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    _OWORD v10[2] = v8;
    unsigned char v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[7 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 56 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (index: Int, element: TabCustomizationID, id: TabCustomizationID)();
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int64_t v11;
  uint64_t v12;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<[_LazyLayout_Subview]>();
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    long long v12 = v11 - 32;
    if (v11 < 32) {
      long long v12 = v11 - 25;
    }
    _OWORD v10[2] = v8;
    unsigned char v10[3] = 2 * (v12 >> 3);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 8 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    _sypSgMaTm_1(0, &lazy cache variable for type metadata for [_LazyLayout_Subview], (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB320]);
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  size_t v11;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(StrongHash, DisplayList)>();
    unint64_t v10 = (void *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size_0(v10);
    _OWORD v10[2] = v8;
    unsigned char v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    unint64_t v10 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5)
  {
    if (v10 != a4 || v10 + 4 >= &a4[5 * v8 + 4]) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for (Badge, Spacer)(0, (unint64_t *)&lazy cache variable for type metadata for (StrongHash, DisplayList));
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v10;
}

unint64_t lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultButtonStyle and conformance DefaultButtonStyle;
  if (!lazy protocol witness table cache variable for type DefaultButtonStyle and conformance DefaultButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultButtonStyle and conformance DefaultButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle;
  if (!lazy protocol witness table cache variable for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderedProminentButtonStyle and conformance BorderedProminentButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle;
  if (!lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainButtonStyle and conformance PlainButtonStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic;
  if (!lazy protocol witness table cache variable for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonMenuStyle.Automatic and conformance ButtonMenuStyle.Automatic);
  }
  return result;
}

double protocol witness for static PreferenceKey.defaultValue.getter in conformance Alert.Presentation.Key@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 272) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void protocol witness for CodingKey.init(intValue:) in conformance HandGestureShortcutInteractiveControl.BorderShape.CodingKeys(unsigned char *a1@<X8>)
{
  *a1 = 5;
}

double partial apply for closure #3 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t *a1@<X0>, double *a2@<X8>)
{
  return closure #3 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(a1, *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(a1);
}

uint64_t getEnumTagSinglePayload for AnyShareConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 104)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 64);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t closure #1 in static PointerOffset.of(_:)partial apply@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)partial apply(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  uint64_t result;

  double result = type metadata accessor for ProgressViewValue(0);
  *a2 = a1 - 1;
  return result;
}

{
  type metadata accessor for External<PreferenceKeys>(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0(a1, a2);
}

{
  type metadata accessor for TokenFieldConfiguration(0);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for NavigationStackViewPosition?(0, &lazy cache variable for type metadata for NavigationStackViewPosition?, (uint64_t)&type metadata for NavigationStackViewPosition, MEMORY[0x1E4FBB718]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  _sSSSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41638]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  _sSay7SwiftUI0A19UIAnySortComparatorVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for CGFloat?, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBB718]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for Binding<Bool>?();
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_8(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for NavigationState.ListKey?(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, MEMORY[0x1E4FBB718]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)partial apply(a1, a2);
}

{
  type metadata accessor for EventFilter<()>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for AnyHashable?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_16(a1, a2);
}

{
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_17(a1, a2);
}

{
  type metadata accessor for Binding<[SwiftUIAnySortComparator]>?(0);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  type metadata accessor for Binding<SelectionManagerBox<AnyHashable>>?();
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  _s7SwiftUI7BindingVySbGMaTm_11(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

double static CustomProgressView._makeView(view:inputs:)@<D0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, double *a7@<X8>)
{
  int v11 = *a1;
  long long v12 = a2[3];
  long long v30 = a2[2];
  long long v31 = v12;
  long long v32 = a2[4];
  int v33 = *((_DWORD *)a2 + 20);
  long long v13 = a2[1];
  long long v28 = *a2;
  long long v29 = v13;
  LODWORD(v26) = v11;
  uint64_t v19 = a3;
  unint64_t v20 = a4;
  *(void *)&long long v21 = a5;
  *((void *)&v21 + 1) = a6;
  type metadata accessor for CustomProgressView();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(type metadata accessor for ProgressViewValue(0) - 8) + 64)) {
    closure #1 in static CustomProgressView._makeView(view:inputs:)(1, a3, a4, a5, a6);
  }
  unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  LODWORD(v19) = v11;
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64)) {
    closure #2 in static CustomProgressView._makeView(view:inputs:)(1, a3, a4, a5, a6);
  }
  unsigned int v15 = AGGraphCreateOffsetAttribute2();
  LODWORD(v19) = v11;
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64)) {
    closure #3 in static CustomProgressView._makeView(view:inputs:)(1, a3, a4, a5, a6);
  }
  unint64_t v26 = __PAIR64__(v15, OffsetAttribute2);
  LODWORD(v27) = AGGraphCreateOffsetAttribute2();
  type metadata accessor for ResolvedProgressView(255);
  lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel();
  type metadata accessor for OptionalSourceWriter();
  type metadata accessor for ModifiedContent();
  lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label();
  type metadata accessor for OptionalSourceWriter();
  type metadata accessor for ModifiedContent();
  type metadata accessor for CustomProgressView.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  long long v22 = v30;
  long long v23 = v31;
  long long v24 = v32;
  int v25 = v33;
  long long v21 = v29;
  _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type ResolvedProgressView and conformance ResolvedProgressView, (void (*)(uint64_t))type metadata accessor for ResolvedProgressView);
  swift_getWitnessTable();
  static ModifiedContent<>._makeView(view:inputs:)();
  uint64_t v19 = v31;
  unint64_t v20 = __PAIR64__(HIDWORD(v28), DWORD2(v31));
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v16 = PreferencesOutputs.subscript.setter();
    MEMORY[0x1F4188790](v16);
    outlined retain of [Text.Modifier]((uint64_t)&v19);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
  }
  *(void *)a7 = v26;
  double result = v27;
  a7[1] = v27;
  return result;
}

unint64_t lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel()
{
  unint64_t result = lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel;
  if (!lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel;
  if (!lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel);
  }
  return result;
}

uint64_t type metadata accessor for CustomProgressView.Child()
{
  return swift_getGenericMetadata();
}

uint64_t CustomProgressView.Child.value.getter@<X0>(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v29 = a2;
  int v11 = a1;
  uint64_t v28 = a7;
  unint64_t v12 = HIDWORD(a1);
  unint64_t v25 = HIDWORD(a1);
  uint64_t v13 = type metadata accessor for ResolvedProgressView(0);
  MEMORY[0x1F4188790](v13);
  unsigned int v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v26 = lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel();
  long long v48 = &type metadata for ProgressViewStyleConfiguration.CurrentValueLabel;
  uint64_t v49 = a4;
  unint64_t v50 = v26;
  uint64_t v51 = a6;
  type metadata accessor for OptionalSourceWriter();
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v27 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v24 - v17;
  type metadata accessor for ProgressViewValue(0);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of ProgressViewStyleConfiguration(Value, (uint64_t)v15, type metadata accessor for ProgressViewValue);
  v15[*(int *)(v13 + 20)] = 0;
  v15[*(int *)(v13 + 24)] = 0;
  uint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  int v43 = v11;
  int v44 = v12;
  int v45 = v29;
  uint64_t v20 = _s10Foundation4DateVACSLAAWlTm_1(&lazy protocol witness table cache variable for type ResolvedProgressView and conformance ResolvedProgressView, (void (*)(uint64_t))type metadata accessor for ResolvedProgressView);
  View.optionalViewAlias<A, B>(_:_:)((uint64_t)&type metadata for ProgressViewStyleConfiguration.CurrentValueLabel, (void (*)(double))partial apply for closure #1 in CustomProgressView.Child.value.getter, (uint64_t)v38, v13, (uint64_t)&type metadata for ProgressViewStyleConfiguration.CurrentValueLabel, a4, v20, v26, a6);
  outlined destroy of ProgressViewStyleConfiguration((uint64_t)v15, type metadata accessor for ResolvedProgressView);
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  int v35 = v11;
  int v36 = v25;
  int v37 = v29;
  uint64_t v46 = v20;
  long long v47 = &protocol witness table for OptionalSourceWriter<A, B>;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v22 = lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label();
  View.optionalViewAlias<A, B>(_:_:)((uint64_t)&type metadata for ProgressViewStyleConfiguration.Label, (void (*)(double))partial apply for closure #2 in CustomProgressView.Child.value.getter, (uint64_t)v30, v16, (uint64_t)&type metadata for ProgressViewStyleConfiguration.Label, a3, WitnessTable, v22, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v18, v16);
}

uint64_t View.optionalViewAlias<A, B>(_:_:)(uint64_t a1, void (*a2)(double), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v25 = a7;
  uint64_t v24 = a4;
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v28 = a8;
  uint64_t v29 = a9;
  uint64_t v17 = type metadata accessor for OptionalSourceWriter();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x1F4188790](v17);
  long long v21 = (char *)&v23 - v20;
  a2(v19);
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v21, v16, v13);
  MEMORY[0x18C113660](v21, v24, v17, v25);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v17);
}

uint64_t ContentShapeKindResponderFilter.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for _ContentShapeKindModifier();
  uint64_t v22 = *(void *)(v2 - 8);
  uint64_t v3 = v22;
  MEMORY[0x1F4188790](v2);
  char v5 = (char *)v21 - v4;
  uint64_t Value = AGGraphGetValue();
  char v8 = v7;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v23(v5, Value, v2);
  v21[3] = v8 & 1;
  uint64_t v9 = (long long *)AGGraphGetValue();
  long long v10 = v9[1];
  long long v25 = *v9;
  long long v26 = v10;
  long long v24 = *(_OWORD *)AGGraphGetValue();
  uint64_t v11 = AGGraphGetValue();
  uint64_t v27 = *(void *)v11;
  long long v12 = *(_OWORD *)(v11 + 24);
  long long v28 = *(_OWORD *)(v11 + 8);
  long long v29 = v12;
  swift_beginAccess();
  swift_retain();
  swift_getWitnessTable();
  type metadata accessor for ContentResponderHelper();
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v22 + 8);
  v13(v5, v2);
  uint64_t v14 = *(void *)(v1 + 24);
  uint64_t v15 = AGGraphGetValue();
  v23(v5, v15, v2);
  uint64_t v16 = *(void *)&v5[*(int *)(v2 + 40)];
  v13(v5, v2);
  *(void *)(v14 + 216) = v16;
  uint64_t v17 = *(void *)(v1 + 24);
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v18)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _GraphValue<PointerHoverEffectModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_188351940;
    *(void *)(v20 + 32) = v17;
    uint64_t v27 = v20;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

double static _ContentShapeKindModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  uint64_t v61 = a5;
  uint64_t v67 = a4;
  uint64_t v89 = *MEMORY[0x1E4F143B8];
  int v51 = *a1;
  int v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  unsigned int v12 = *(_DWORD *)(a2 + 24);
  unsigned int v11 = *(_DWORD *)(a2 + 28);
  int v13 = *(_DWORD *)(a2 + 32);
  int v14 = *(_DWORD *)(a2 + 36);
  uint64_t v15 = *(void *)(a2 + 40);
  unint64_t v16 = *(void *)(a2 + 48);
  int v18 = *(_DWORD *)(a2 + 56);
  int v17 = *(_DWORD *)(a2 + 60);
  int v19 = *(_DWORD *)(a2 + 64);
  int v20 = *(_DWORD *)(a2 + 68);
  int v21 = *(_DWORD *)(a2 + 72);
  int v22 = *(_DWORD *)(a2 + 76);
  int v23 = *(_DWORD *)(a2 + 80);
  unint64_t v74 = *(void *)a2;
  unint64_t v8 = v74;
  int v24 = v9;
  LODWORD(v75) = v9;
  uint64_t v76 = v10;
  unsigned int v60 = v12;
  unint64_t v77 = __PAIR64__(v11, v12);
  unsigned int v59 = v11;
  int v58 = v13;
  int v78 = v13;
  int v79 = v14;
  int v57 = v14;
  uint64_t v80 = v15;
  unint64_t v81 = v16;
  int v82 = v18;
  int v83 = v17;
  int v56 = v19;
  int v84 = v19;
  int v85 = v20;
  int v55 = v20;
  int v54 = v21;
  int v86 = v21;
  int v87 = v22;
  int v53 = v22;
  int v52 = v23;
  int v88 = v23;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v25 = swift_bridgeObjectRetain();
  a3(&v72, v25, &v74);
  unint64_t v74 = v16;
  LODWORD(v75) = v18;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    unint64_t v50 = a6;
    LODWORD(v74) = v51;
    uint64_t v43 = type metadata accessor for _ContentShapeKindModifier();
    uint64_t v42 = type metadata accessor for _GraphValue();
    unsigned int v49 = _GraphValue.value.getter();
    unint64_t v74 = v8;
    LODWORD(v75) = v24;
    uint64_t v76 = v10;
    unint64_t v77 = __PAIR64__(v59, v60);
    int v78 = v58;
    int v68 = v17;
    unint64_t v66 = v16;
    uint64_t v64 = v15;
    int v65 = v18;
    uint64_t v62 = v10;
    unint64_t v63 = v8;
    int v79 = v57;
    uint64_t v80 = v15;
    unint64_t v81 = v16;
    int v82 = v18;
    int v83 = v17;
    int v84 = v56;
    int v85 = v55;
    int v86 = v54;
    int v87 = v53;
    int v88 = v52;
    unsigned int v48 = _ViewInputs.animatedPosition()();
    unint64_t v74 = v8;
    LODWORD(v75) = v24;
    uint64_t v76 = v10;
    unint64_t v77 = __PAIR64__(v59, v60);
    int v78 = v58;
    int v79 = v57;
    uint64_t v80 = v15;
    unint64_t v81 = v16;
    int v82 = v18;
    int v83 = v17;
    int v84 = v56;
    int v85 = v55;
    int v86 = v54;
    int v87 = v53;
    int v88 = v52;
    unsigned int v47 = _ViewInputs.animatedSize()();
    unint64_t v74 = v8;
    LODWORD(v75) = v24;
    uint64_t v76 = v10;
    unint64_t v77 = __PAIR64__(v59, v60);
    int v78 = v58;
    int v79 = v57;
    uint64_t v80 = v15;
    unint64_t v81 = v16;
    int v82 = v18;
    int v83 = v17;
    int v84 = v56;
    int v85 = v55;
    int v86 = v54;
    int v87 = v53;
    int v88 = v52;
    unsigned int v46 = _ViewInputs.transform.getter();
    unint64_t v74 = v72;
    unint64_t v75 = *(void *)&v73;
    int v45 = _ViewOutputs.viewResponders()();
    type metadata accessor for ContentShapeKindResponder();
    unint64_t v74 = v8;
    int v44 = v24;
    LODWORD(v75) = v24;
    uint64_t v76 = v10;
    unint64_t v77 = __PAIR64__(v59, v60);
    int v78 = v58;
    int v79 = v57;
    int v26 = v18;
    unint64_t v27 = v16;
    uint64_t v80 = v15;
    unint64_t v81 = v16;
    int v82 = v18;
    int v83 = v17;
    int v84 = v56;
    int v85 = v55;
    int v86 = v54;
    int v87 = v53;
    uint64_t v28 = v62;
    int v88 = v52;
    swift_allocObject();
    unint64_t v29 = v63;
    swift_retain();
    swift_retain();
    uint64_t v30 = v64;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v31 = ContentShapeKindResponder.init(inputs:)();
    unint64_t v74 = __PAIR64__(v48, v49);
    unint64_t v75 = __PAIR64__(v46, v47);
    LODWORD(v76) = v45;
    unint64_t v77 = v31;
    MEMORY[0x1F4188790](v31);
    uint64_t v32 = v61;
    uint64_t v40 = type metadata accessor for ContentShapeKindResponderFilter();
    uint64_t WitnessTable = swift_getWitnessTable();
    _sSay7SwiftUI13ViewResponderCGMaTm_1(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v74, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)&v39, v40, MEMORY[0x1E4FBC248], v33, MEMORY[0x1E4FBC278], v34);
    swift_release();
    LOBYTE(v74) = 0;
    _ViewOutputs.subscript.setter();
    unint64_t v74 = v27;
    LODWORD(v75) = v26;
    uint64_t v35 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (v35)
    {
      MEMORY[0x1F4188790](v35);
      uint64_t v40 = v67;
      uint64_t WitnessTable = v32;
      LODWORD(v74) = v51;
      uint64_t v36 = MEMORY[0x1E4F3FF00];
      _GraphValue.subscript.getter();
      type metadata accessor for _GraphValue<PointerHoverEffectModifier>(0, &lazy cache variable for type metadata for _GraphValue<ContentShapeKinds>, v36, MEMORY[0x1E4F3F590]);
      unsigned int v37 = _GraphValue.value.getter();
      unint64_t v74 = v29;
      LODWORD(v75) = v44;
      uint64_t v76 = v28;
      unint64_t v77 = __PAIR64__(v59, v60);
      int v78 = v58;
      int v79 = v57;
      uint64_t v80 = v30;
      unint64_t v81 = v27;
      int v82 = v26;
      int v83 = v68;
      int v84 = v56;
      int v85 = v55;
      int v86 = v54;
      int v87 = v53;
      int v88 = v52;
      unint64_t v70 = v72;
      char v69 = 0;
      double v71 = v73;
      static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(0x100000000, v37, (uint64_t)&v74);
      LOBYTE(v74) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    a6 = v50;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  *(void *)a6 = v72;
  double result = v73;
  a6[1] = v73;
  return result;
}

void type metadata accessor for _GraphValue<PointerHoverEffectModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(a3 + 36);
  uint64_t v5 = a1;
  if ((a1 & 0x100000000) != 0)
  {
    uint64_t v5 = _ViewOutputs.subscript.getter();
    if ((v5 & 0x100000000) != 0)
    {
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
      type metadata accessor for ViewTransform?(0, &lazy cache variable for type metadata for External<AccessibilityNodeList>, (uint64_t)&type metadata for AccessibilityNodeList, MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<AccessibilityNodeList> and conformance External<A>();
      swift_bridgeObjectRetain();
      uint64_t v5 = Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
    }
  }
  if ((v4 & 0x20) != 0)
  {
    if ((v4 & 0x80) != 0)
    {
      swift_getKeyPath();
      _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      _ViewOutputs.subscript.getter();
      if ((a1 & 0x100000000) == 0) {
        AccessibilityAttachmentToken.init<A>(_:)();
      }
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type ViewResponderTransform and conformance ViewResponderTransform();
      uint64_t v5 = Attribute.init<A>(body:value:flags:update:)();
      static AGAttributeFlags.removable.getter();
      AGGraphSetFlags();
    }
    if ((v4 & 0x40) != 0)
    {
      swift_getKeyPath();
      _ViewInputs.mapEnvironment<A>(_:)();
      swift_release();
      _ViewInputs.size.getter();
      _ViewInputs.position.getter();
      _ViewInputs.transform.getter();
      if ((a1 & 0x100000000) == 0) {
        AccessibilityAttachmentToken.init<A>(_:)();
      }
      UniqueID.init()();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type GeometryTransform and conformance GeometryTransform();
      uint64_t v5 = Attribute.init<A>(body:value:flags:update:)();
      static AGAttributeFlags.removable.getter();
      AGGraphSetFlags();
    }
  }
  return v5;
}

uint64_t type metadata accessor for ContentShapeKindResponderFilter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in static _ContentShapeKindModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _ContentShapeKindModifier();
  uint64_t v3 = a1 + *(int *)(v2 + 40);
  _OWORD v8[2] = v2;
  uint64_t v4 = MEMORY[0x1E4F3FF00];
  uint64_t v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_7, (uint64_t)v8, v4, MEMORY[0x1E4FBC248], v5, MEMORY[0x1E4FBC278], v6);
  return v8[5];
}

uint64_t View.contentShape<A>(_:_:eoFill:)(uint64_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v22 = a6;
  uint64_t v21 = a4;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for _ContentShapeKindModifier();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  int v17 = (char *)&v20 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, a2, a5, v15);
  uint64_t v18 = *a1;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v17, v12, a5);
  v17[*(int *)(v13 + 36)] = a3;
  *(void *)&v17[*(int *)(v13 + 40)] = v18;
  MEMORY[0x18C113660](v17, v21, v13, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
}

uint64_t type metadata accessor for _ContentShapeKindModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ContentShapeKindResponder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ContentShapeKindResponder.init(inputs:)()
{
  *(void *)(v0 + 216) = 1;
  type metadata accessor for _ContentShapeKindModifier();
  swift_getWitnessTable();
  ContentResponderHelper.init()();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t static OptionalSourceWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  type metadata accessor for OptionalSourceWriter();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  if (*(void *)(*(void *)(type metadata accessor for Optional() - 8) + 64)) {
    closure #1 in static OptionalSourceWriter._makeInputs(modifier:inputs:)(1, a3, a4, a5, a6);
  }
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  AnySource.init<A>(_:)(OffsetAttribute2, a4, a6);
  type metadata accessor for SourceInput();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type AnySource and conformance AnySource();
  return _GraphInputs.append<A, B>(_:to:)();
}

uint64_t static StaticSourceWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(void *)(*(void *)(a4 - 8) + 64)) {
    closure #1 in static StaticSourceWriter._makeInputs(modifier:inputs:)(1, a3, a4, a5, a6);
  }
  AGGraphCreateOffsetAttribute2();
  AnySource.init<A>(_:)();
  type metadata accessor for SourceInput();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type AnySource and conformance AnySource();
  return _GraphInputs.append<A, B>(_:to:)();
}

uint64_t type metadata accessor for SourceInput()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type AnySource and conformance AnySource()
{
  unint64_t result = lazy protocol witness table cache variable for type AnySource and conformance AnySource;
  if (!lazy protocol witness table cache variable for type AnySource and conformance AnySource)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnySource and conformance AnySource);
  }
  return result;
}

uint64_t AnySource.init<A>(_:)()
{
  uint64_t v0 = type metadata accessor for SourceFormula();
  AGCreateWeakAttribute();
  return v0;
}

uint64_t type metadata accessor for SourceFormula()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in static StaticSourceWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  _OWORD v10[2] = type metadata accessor for StaticSourceWriter();
  unsigned char v10[3] = a3;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a3, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v11;
}

uint64_t implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = &v20[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = *(void *)(v12 - 8);
  double v15 = MEMORY[0x1F4188790](v14);
  int v17 = &v20[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, double))(v9 + 16))(v11, v15);
  dispatch thunk of Rule.value.getter();
  (*(void (**)(unsigned char *, uint64_t))(v9 + 8))(v11, a5);
  uint64_t v22 = a5;
  uint64_t v23 = a6;
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)partial apply for closure #1 in static Rule._update(_:attribute:), (uint64_t)v21, a4, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v18);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v17, a4);
}

uint64_t destroy for AlertTransformModifier()
{
  return swift_release();
}

uint64_t _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790]();
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = v15(v12, v14);
  if (v8) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  }
  return result;
}

void *__swift_memcpy8_4(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t partial apply for closure #1 in static Rule._update(_:attribute:)()
{
  return AGGraphSetOutputValue();
}

uint64_t partial apply for closure #1 in static PointerOffset.of(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_1@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_2@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_3@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_5@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t closure #1 in static PointerOffset.of(_:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result - 1;
  return result;
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_6@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_7@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_9@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_10@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_11@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_12@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_13@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_14@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_15@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_16@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_17@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_18@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_19@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_20@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_21@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_22@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_23@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_24@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t _s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_25@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in static PointerOffset.of(_:)(a1, a2);
}

uint64_t initializeBufferWithCopyOfBuffer for FocusEventProxyResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  return a1;
}

__n128 __swift_memcpy20_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t __swift_memcpy12_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance LazyPreference<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LazyPreference.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t LazyPreference.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v36 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v29 - v11;
  int v42 = (*(uint64_t (**)(uint64_t, uint64_t, double))(a2 + 32))(a1, a2, v10);
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_0(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  uint64_t Value = AGGraphGetValue();
  uint64_t v14 = *(void *)Value;
  uint64_t v15 = *(void *)(*(void *)Value + 16);
  if (v15)
  {
    uint64_t v41 = v12;
    uint64_t v38 = a3;
    uint64_t v39 = AssociatedTypeWitness;
    type metadata accessor for AGGraphRef(0);
    uint64_t v32 = (void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v33 = a2 + 24;
    uint64_t v31 = (void (**)(char *, uint64_t))(v7 + 8);
    uint64_t v35 = (uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v17 = 0;
    uint64_t v34 = v15 - 1;
    int v37 = 1;
    uint64_t v40 = 32;
LABEL_3:
    uint64_t v18 = v40 + 72 * v17;
    while (v17 < *(void *)(v14 + 16))
    {
      uint64_t v19 = *(void *)(v14 + v18);
      swift_retain();
      if (static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()())
      {
        swift_release();
        swift_bridgeObjectRelease();
        a3 = v38;
        uint64_t AssociatedTypeWitness = v39;
        uint64_t v12 = v41;
        uint64_t v28 = (uint64_t (**)(uint64_t, char *, uint64_t))v35;
        return (*v28)(a3, v12, AssociatedTypeWitness);
      }
      uint64_t v43 = *(void *)(v19 + 32);
      uint64_t v44 = *(void *)(v19 + 40);
      uint64_t v20 = _ViewOutputs.subscript.getter();
      if ((v20 & 0x100000000) == 0)
      {
        int v21 = v20;
        if ((v42 & 1) != 0 || (uint64_t v20 = AGGraphGetValue(), (*(unsigned char *)(v20 + 6) & 1) == 0))
        {
          unint64_t v30 = v17 + 1;
          if (v37)
          {
            uint64_t v22 = v39;
            uint64_t v23 = AGGraphGetValue();
            uint64_t v24 = v36;
            (*v32)(v36, v23, v22);
            swift_release();
            uint64_t v25 = v41;
            (*v31)(v41, v22);
            uint64_t result = (*v35)(v25, v24, v22);
          }
          else
          {
            double v26 = MEMORY[0x1F4188790](v20);
            *(&v29 - 4) = a1;
            *(&v29 - 3) = a2;
            *((_DWORD *)&v29 - 4) = v21;
            (*(void (**)(char *, uint64_t (*)@<X0>(uint64_t@<X8>), double))(a2 + 24))(v41, partial apply for closure #1 in LazyPreference.value.getter, v26);
            uint64_t result = swift_release();
          }
          int v37 = 0;
          BOOL v27 = v34 == v17;
          unint64_t v17 = v30;
          if (v27)
          {
LABEL_15:
            swift_bridgeObjectRelease();
            a3 = v38;
            uint64_t AssociatedTypeWitness = v39;
            uint64_t v12 = v41;
            goto LABEL_16;
          }
          goto LABEL_3;
        }
      }
      ++v17;
      uint64_t result = swift_release();
      v18 += 72;
      if (v15 == v17) {
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    uint64_t v28 = (uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32);
    return (*v28)(a3, v12, AssociatedTypeWitness);
  }
  return result;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ContainerBackgroundKeys.NavigationKey@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_188354B20;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t result = EnvironmentValues.init()();
  *(void *)(a1 + 40) = 0;
  return result;
}

char *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance HasContextMenuKey(char *result, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t v2 = result;
  if (*result)
  {
    char v3 = 1;
  }
  else
  {
    uint64_t result = (char *)a2(&v4);
    char v3 = v4;
  }
  *uint64_t v2 = v3;
  return result;
}

uint64_t assignWithCopy for ContainerBackgroundValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of ContainerBackgroundValue.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  outlined consume of ContainerBackgroundValue.Content(v6, v7);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ContainerBackgroundKeys.NavigationKey(uint64_t a1, void (*a2)(void *__return_ptr))
{
  return ContainerBackgroundValue.merge(nextValue:)(a2);
}

uint64_t ContainerBackgroundValue.merge(nextValue:)(void (*a1)(void *__return_ptr))
{
  uint64_t v2 = v1;
  a1(v11);
  uint64_t v4 = v11[0];
  unint64_t v3 = v11[1];
  char v5 = v12;
  uint64_t v6 = v13;
  unint64_t v7 = *(void *)(v2 + 8);
  if (v7 >> 62 == 2 && v7 == 0x8000000000000000 && *(void *)v2 == 0)
  {
    *(void *)uint64_t v2 = v11[0];
    *(void *)(v2 + 8) = v3;
    outlined copy of ContainerBackgroundValue.Content(v4, v3);
  }
  *(unsigned char *)(v2 + 16) = (*(unsigned char *)(v2 + 16) | v5) & 1;
  uint64_t v9 = *(void *)(v2 + 40);
  if (v9)
  {
    outlined consume of ContainerBackgroundValue.Content(v4, v3);
    uint64_t v6 = v9;
  }
  else
  {
    swift_retain();
    outlined consume of ContainerBackgroundValue.Content(v4, v3);
  }
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *(void *)(v2 + 40) = v6;
  return result;
}

uint64_t destroy for ContainerBackgroundValue(uint64_t a1)
{
  outlined consume of ContainerBackgroundValue.Content(*(void *)a1, *(void *)(a1 + 8));
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t outlined consume of ContainerBackgroundValue.Content(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    if (a2 >> 62 != 1) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t initializeWithCopy for ContainerBackgroundValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  outlined copy of ContainerBackgroundValue.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t outlined copy of ContainerBackgroundValue.Content(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
  {
    if (a2 >> 62 != 1) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

uint64_t partial apply for closure #1 in LazyPreference.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in LazyPreference.value.getter(a1);
}

uint64_t closure #1 in LazyPreference.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, Value, AssociatedTypeWitness);
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  swift_retain();
  swift_retain();
  LazyViewGeometry.value.getter(v1, v2, v3, v4);
  swift_release();
  swift_release();
  AGGraphSetOutputValue();
  return swift_release();
}

{
  uint64_t Value;
  char v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6[18];

  v6[17] = *MEMORY[0x1E4F143B8];
  unint64_t v5 = *a1;
  uint64_t Value = AGGraphGetValue();
  outlined init with take of SharingPickerSource(Value, (uint64_t)v6);
  outlined retain of SharingPickerSource(v6);
  uint64_t v2 = SharingPickerSource.isPresented.getter();
  if (v2)
  {
    AGGraphGetValue();
    swift_retain();
  }
  type metadata accessor for CGRect(0);
  Anchor.Source.init<A>(_:)();
  uint64_t v3 = swift_allocObject();
  *(unsigned char *)(v3 + 16) = v2 & 1;
  outlined init with take of SharingPickerSource((uint64_t)v6, v3 + 24);
  *(void *)(v3 + 160) = v5;
  type metadata accessor for _AnchorTransformModifier<CGRect?, SharingActivityPickerPresentation.Key>();
  AGGraphSetOutputValue();
  swift_release();
  return swift_release();
}

{
  uint64_t vars8;

  MainThreadRequiringScrollPhase.value.getter(*a1);

  return AGGraphSetOutputValue();
}

{
  uint64_t v1;
  uint64_t v2;

  uint64_t v1 = *a1;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = partial apply for closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter;
  *(void *)(v2 + 24) = v1;
  type metadata accessor for (_:)(0, (unint64_t *)&lazy cache variable for type metadata for (_:));
  swift_retain();
  AGGraphSetOutputValue();
  return swift_release();
}

uint64_t LazyViewGeometry.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_0(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    LazyLayoutViewCache.placement(of:in:)(a4, *Value, (uint64_t)&v36);
    if (v42)
    {
      uint64_t v6 = (long long *)AGGraphGetValue();
      long long v7 = v6[1];
      long long v43 = *v6;
      long long v44 = v7;
      ViewSize.proposal.getter();
      uint64_t v8 = &v43;
      _Placement.init(proposedSize:at:)();
      char v9 = BYTE8(v43);
      uint64_t v10 = v44;
      char v11 = BYTE8(v44);
      uint64_t v13 = v45;
      uint64_t v12 = v46;
      uint64_t v15 = v47;
      uint64_t v14 = v48;
    }
    else
    {
      uint64_t v15 = v40;
      uint64_t v14 = v41;
      uint64_t v13 = v38;
      uint64_t v12 = v39;
      uint64_t v10 = v37;
      char v9 = BYTE8(v36) & 1;
      char v11 = BYTE8(v37) & 1;
      uint64_t v8 = &v36;
    }
    uint64_t v16 = *(void *)v8;
    long long v36 = *(_OWORD *)(a4 + 32);
    if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
    {
      static LayoutComputer.defaultValue.getter();
      uint64_t v18 = *((void *)&v36 + 1);
      uint64_t v19 = v36;
    }
    else
    {
      unint64_t v17 = (uint64_t *)AGGraphGetValue();
      uint64_t v19 = *v17;
      uint64_t v18 = v17[1];
      *(void *)&long long v36 = *v17;
      swift_retain();
    }
    *(void *)&long long v43 = v19;
    *((void *)&v43 + 1) = v18;
    *(void *)&long long v36 = v16;
    BYTE8(v36) = v9;
    *(void *)&long long v37 = v10;
    BYTE8(v37) = v11;
    swift_retain();
    LayoutComputer.sizeThatFits(_:)();
    *(void *)&long long v43 = v16;
    BYTE8(v43) = v9;
    *(void *)&long long v44 = v10;
    BYTE8(v44) = v11;
    uint64_t v20 = ViewDimensions.init(guideComputer:size:proposal:)();
    long long v21 = v36;
    long long v22 = v37;
    uint64_t v23 = v38;
    uint64_t v24 = v39;
    *(void *)&long long v36 = v16;
    BYTE8(v36) = v9;
    *(void *)&long long v37 = v10;
    BYTE8(v37) = v11;
    uint64_t v38 = v13;
    uint64_t v39 = v12;
    uint64_t v40 = v15;
    uint64_t v41 = v14;
    long long v43 = v22;
    *(void *)&long long v44 = v23;
    *((void *)&v44 + 1) = v24;
    *(double *)&unint64_t v25 = MEMORY[0x18C114450](v20);
    _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v26, v25));
    long long v36 = v21;
    long long v37 = v22;
    uint64_t v38 = v23;
    uint64_t v39 = v24;
    swift_retain();
    ViewGeometry.init(origin:dimensions:)();
    LOBYTE(v43) = *(unsigned char *)AGGraphGetValue();
    BOOL v27 = (long long *)AGGraphGetValue();
    long long v28 = v27[1];
    long long v36 = *v27;
    long long v37 = v28;
    MEMORY[0x18C114450]();
    ViewGeometry.finalizeLayoutDirection(_:parentSize:)();
    long long v36 = *(_OWORD *)AGGraphGetValue();
    double v29 = MEMORY[0x18C10C240]();
    double v31 = v30;
    uint64_t v32 = (void (*)(long long *, void))ViewOrigin.value.modify();
    double v34 = v31 + v33[1];
    *uint64_t v33 = v29 + *v33;
    v33[1] = v34;
    v32(&v36, 0);
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

void type metadata accessor for [Any](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for [_LazyLayout_PlacedSubview](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t LazyLayoutViewCache.placement(of:in:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned char *)(result + 208))
  {
LABEL_9:
    uint64_t v6 = (unsigned __int8 *)(result + 216);
    uint64_t v7 = *(void *)(result + 224);
    uint64_t v8 = (uint64_t *)(result + 232);
    uint64_t v9 = *(void *)(result + 240);
    uint64_t v10 = (uint64_t *)(result + 248);
    char v11 = (uint64_t *)(result + 256);
    uint64_t v12 = (uint64_t *)(result + 264);
    uint64_t v13 = (uint64_t *)(result + 272);
    char v14 = *(unsigned char *)(result + 280);
LABEL_10:
    uint64_t v15 = *v13;
    uint64_t v16 = *v12;
    uint64_t v17 = *v11;
    uint64_t v18 = *v10;
    uint64_t v19 = *v8;
    *(void *)a3 = *(void *)v6;
    *(void *)(a3 + 8) = v7;
    *(void *)(a3 + 16) = v19;
    *(void *)(a3 + 24) = v9;
    *(void *)(a3 + 32) = v18;
    *(void *)(a3 + 40) = v17;
    *(void *)(a3 + 48) = v16;
    *(void *)(a3 + 56) = v15;
    *(unsigned char *)(a3 + 64) = v14;
    return result;
  }
  uint64_t v3 = *(void *)(result + 200);
  uint64_t v4 = *(void *)(a2 + 16);
  if (v3 >= v4)
  {
LABEL_5:
    if (v4)
    {
      unint64_t v5 = (unsigned __int8 *)(a2 + 48);
      while (*((void *)v5 - 2) != result)
      {
        v5 += 72;
        if (!--v4) {
          goto LABEL_9;
        }
      }
      char v14 = 0;
      uint64_t v6 = v5 - 8;
      uint64_t v7 = *v5;
      uint64_t v8 = (uint64_t *)(v5 + 8);
      uint64_t v9 = v5[16];
      uint64_t v10 = (uint64_t *)(v5 + 24);
      char v11 = (uint64_t *)(v5 + 32);
      uint64_t v12 = (uint64_t *)(v5 + 40);
      uint64_t v13 = (uint64_t *)(v5 + 48);
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if ((v3 & 0x8000000000000000) == 0)
  {
    if (*(void *)(a2 + 32 + 72 * v3) == result)
    {
      char v14 = 0;
      uint64_t v20 = a2 + 32 + 72 * v3;
      uint64_t v13 = (uint64_t *)(v20 + 64);
      uint64_t v12 = (uint64_t *)(v20 + 56);
      uint64_t v6 = (unsigned __int8 *)(v20 + 8);
      char v11 = (uint64_t *)(v20 + 48);
      uint64_t v10 = (uint64_t *)(v20 + 40);
      uint64_t v8 = (uint64_t *)(v20 + 24);
      uint64_t v9 = *(unsigned __int8 *)(v20 + 32);
      uint64_t v7 = *(unsigned __int8 *)(v20 + 16);
      goto LABEL_10;
    }
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListTransformModifier<A>.Transform@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PlatformItemListTransformModifier.Transform.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t PlatformItemListTransformModifier.Transform.value.getter(uint64_t a1)
{
  uint64_t v1 = MergePlatformItemsView.Transform.list.getter(a1);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1) {
    uint64_t v2 = v1;
  }
  uint64_t v5 = v2;
  type metadata accessor for PlatformItemListTransformModifier();
  uint64_t v3 = *(void (**)(uint64_t *))AGGraphGetValue();
  swift_retain();
  v3(&v5);
  swift_release();
  return v5;
}

uint64_t type metadata accessor for PlatformItemListTransformModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t MergePlatformItemsView.Transform.list.getter(uint64_t a1)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1)) {
    return 0;
  }
  AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

__n128 __swift_memcpy16_4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t __swift_memcpy9_4(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t AnySource.init<A>(_:)(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  type metadata accessor for Optional();
  uint64_t v13 = a3;
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for SourceFormula();
  AGCreateWeakAttribute();
  int v9 = a1;
  uint64_t IsNil = type metadata accessor for AnySource.IsNil();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Stack<AnySource>(0, &lazy cache variable for type metadata for Attribute<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v9, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v10, IsNil, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v5;
}

void type metadata accessor for Stack<AnySource>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t type metadata accessor for AnySource.IsNil()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in static OptionalSourceWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  v9[2] = type metadata accessor for OptionalSourceWriter();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, v10, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v11;
}

uint64_t type metadata accessor for OptionalSourceWriter()
{
  return swift_getGenericMetadata();
}

BOOL protocol witness for Rule.value.getter in conformance AnySource.IsNil<A>@<W0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  BOOL result = AnySource.IsNil.value.getter(*v2, *(void *)(a1 + 16));
  *a2 = result;
  return result;
}

BOOL AnySource.IsNil.value.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v9 - v5;
  Optional<A>.ChildTableColumn.content.getter((uint64_t)&v9 - v5);
  BOOL v7 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 48))(v6, 1, a2) == 1;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v7;
}

uint64_t Optional<A>.ChildTableColumn.content.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

void partial apply for closure #1 in View.transformPlatformItemSelectionBehavior(_:)(uint64_t a1)
{
  closure #1 in View.transformPlatformItemSelectionBehavior(_:)(a1, *(void (**)(__int16 *))(v1 + 16));
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedProgressViewStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = _s10Foundation4DateVACSLAAWlTm_3(&lazy protocol witness table cache variable for type ResolvedProgressViewStyle and conformance ResolvedProgressViewStyle, (void (*)(uint64_t))type metadata accessor for ResolvedProgressViewStyle);

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t lazy protocol witness table accessor for type Date and conformance Date(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4DateVACSLAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4DateVACSLAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4DateVACSLAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4DateVACSLAAWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4DateVACSLAAWlTm_4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4DateVACSLAAWlTm_5(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation4DateVACSLAAWlTm_6(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *initializeWithCopy for RemoteSheetContainerVCWriter(void *a1, void *a2)
{
  *a1 = *a2;
  swift_weakCopyInit();
  return a1;
}

uint64_t outlined destroy of ProgressViewStyleConfiguration(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for ResolvedProgressView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedProgressView);
}

uint64_t partial apply for closure #2 in CustomProgressView.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t partial apply for closure #1 in CustomProgressView.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t closure #1 in static CustomProgressView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  _OWORD v10[2] = type metadata accessor for CustomProgressView();
  uint64_t v6 = type metadata accessor for ProgressViewValue(0);
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, v6, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v11;
}

uint64_t type metadata accessor for CustomProgressView()
{
  return swift_getGenericMetadata();
}

uint64_t closure #2 in static CustomProgressView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v6 = type metadata accessor for CustomProgressView();
  uint64_t v7 = a1 + *(int *)(v6 + 52);
  void v11[2] = v6;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v11, v12, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
  return v13;
}

uint64_t closure #3 in static CustomProgressView._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v6 = type metadata accessor for CustomProgressView();
  uint64_t v7 = a1 + *(int *)(v6 + 56);
  void v11[2] = v6;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, (uint64_t)closure #1 in static PointerOffset.of(_:), (uint64_t)v11, v12, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
  return v13;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance LazySearchScopesKey(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = -1;
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollBehaviorModifier<A>.ChildEnvironment@<X0>(void *a1@<X8>)
{
  return ScrollBehaviorModifier.ChildEnvironment.value.getter(a1);
}

uint64_t protocol witness for Rule.value.getter in conformance MergePlatformItemsView<A>.Transform@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MergePlatformItemsView.Transform.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in OnPlatformContainerSelectionModifier.body(content:)(uint64_t *a1)
{
  return closure #1 in OnPlatformContainerSelectionModifier.body(content:)(a1, v1 + 16);
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarModifier<A, B>.TransformSearch@<X0>(void *a1@<X0>, uint64_t (*a2)(void, void, void, void)@<X2>, uint64_t a3@<X4>, void *a4@<X8>)
{
  uint64_t v7 = a2(*v4, a1[2], a1[3], a1[4]);
  uint64_t v9 = v8;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v7;
  *(void *)(result + 24) = v9;
  *a4 = a3;
  a4[1] = result;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarModifier<A, B>.TransformSearch@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return protocol witness for Rule.value.getter in conformance ToolbarModifier<A, B>.TransformSearch(a1, (uint64_t (*)(void, void, void, void))ToolbarModifier.TransformSearch.value.getter, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> (), a2);
}

uint64_t protocol witness for Rule.value.getter in conformance ScrollEventStateReader<A>.MakeView()
{
  return ScrollEventStateReader.MakeView.value.getter();
}

uint64_t protocol witness for Rule.value.getter in conformance CoordinateSpaceTransform<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return CoordinateSpaceTransform.value.getter(*(void *)(a1 + 16), a2);
}

uint64_t initializeBufferWithCopyOfBuffer for ForEach<>.PreferenceTransform.Item(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  id v4 = v3;
  return a1;
}

void *partial apply for closure #1 in View.platformItemButtonRole(_:)(void *a1)
{
  return closure #1 in View.platformItemButtonRole(_:)(a1, *(unsigned __int8 *)(v1 + 16) | (unsigned __int16)(*(unsigned __int8 *)(v1 + 17) << 8));
}

void *closure #1 in View.platformItemButtonRole(_:)(void *result, unsigned __int16 a2)
{
  uint64_t v2 = (void *)*result;
  uint64_t v3 = *(void *)(*result + 16);
  if (v3)
  {
    id v4 = result;
    unsigned int v5 = a2;
    char v6 = a2;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_9:
    }
      uint64_t v2 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    unint64_t v7 = 0;
    unsigned int v5 = (v5 >> 8) & 1;
    do
    {
      if (v7 >= v2[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      uint64_t v8 = type metadata accessor for PlatformItemList.Item();
      uint64_t v9 = *(void *)(v8 - 8);
      uint64_t result = (void *)(v8 - 8);
      unint64_t v10 = (unint64_t)v2
          + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
          + *(void *)(v9 + 72) * v7;
      *(unsigned char *)(v10 + 520) = v6;
      *(unsigned char *)(v10 + 521) = v5;
      ++v7;
    }
    while (v3 != v7);
    *id v4 = v2;
  }
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in PlatformItemTintModifier.body(content:)(uint64_t a1)
{
  return implicit closure #2 in implicit closure #1 in PlatformItemTintModifier.body(content:)(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t implicit closure #2 in implicit closure #1 in PlatformItemTintModifier.body(content:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void **)result;
  uint64_t v4 = *(void *)(*(void *)result + 16);
  if (v4)
  {
    uint64_t v17 = (void *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_14:
    }
      uint64_t v3 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    unint64_t v7 = 0;
    uint64_t v18 = v4;
    uint64_t v19 = v3;
    do
    {
      if (v7 >= v3[2])
      {
        __break(1u);
        goto LABEL_14;
      }
      uint64_t v8 = type metadata accessor for PlatformItemList.Item();
      uint64_t v9 = *(unsigned __int8 *)(*(void *)(v8 - 8) + 80);
      uint64_t v10 = *(void *)(*(void *)(v8 - 8) + 72);
      if (a3)
      {
        uint64_t v21 = a2;
        outlined copy of Environment<Color?>.Content(a2, 1);
      }
      else
      {
        outlined copy of Environment<Color?>.Content(a2, 0);
        swift_retain();
        os_log_type_t v11 = static os_log_type_t.fault.getter();
        uint64_t v12 = static Log.runtimeIssuesLog.getter();
        if (os_log_type_enabled(v12, v11))
        {
          uint64_t v13 = swift_slowAlloc();
          uint64_t v14 = a3;
          uint64_t v15 = swift_slowAlloc();
          uint64_t v20 = v15;
          *(_DWORD *)uint64_t v13 = 136315138;
          *(void *)(v13 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6C616E6F6974704FLL, 0xEF3E726F6C6F433CLL, &v20);
          _os_log_impl(&dword_1872C6000, v12, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", (uint8_t *)v13, 0xCu);
          swift_arrayDestroy();
          uint64_t v16 = v15;
          a3 = v14;
          uint64_t v4 = v18;
          MEMORY[0x18C119C60](v16, -1, -1);
          MEMORY[0x18C119C60](v13, -1, -1);
        }

        EnvironmentValues.init()();
        swift_getAtKeyPath();
        outlined consume of Environment<Color?>.Content(a2, 0);
        swift_release();
        swift_release();
        outlined consume of Environment<Color?>.Content(a2, 0);
        uint64_t v3 = v19;
      }
      *(void *)((char *)v3 + ((v9 + 32) & ~v9) + v10 * v7 + *(int *)(v8 + 132)) = v21;
      uint64_t result = swift_release();
      ++v7;
    }
    while (v4 != v7);
    *uint64_t v17 = v3;
  }
  return result;
}

double protocol witness for Rule.value.getter in conformance ContainerBackgroundRendererModifier<A>.ChildEnvironment@<D0>(_OWORD *a1@<X8>)
{
  return ContainerBackgroundRendererModifier.ChildEnvironment.value.getter(*(_DWORD *)(v1 + 8), a1);
}

BOOL protocol witness for Rule.value.getter in conformance NavigableListModifier<A>.IsEditing@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = NavigableListModifier.IsEditing.value.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for ResolvedProgressViewStyle(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedProgressViewStyle);
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationDestinationModifier<A, B>.PreferenceTransform@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v4 = NavigationDestinationModifier.PreferenceTransform.value.getter(*v2, a1[2], a1[3], a1[4], a1[5]);
  uint64_t v6 = v5;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ();
  a2[1] = (uint64_t (*)())result;
  return result;
}

uint64_t (*NavigationDestinationModifier.PreferenceTransform.value.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  uint64_t v9 = NavigationDestinationModifier.PreferenceTransform.seededResolver.getter();
  int v11 = v10;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  *(void *)(v12 + 32) = a4;
  *(void *)(v12 + 40) = a5;
  *(void *)(v12 + 48) = v9;
  *(_DWORD *)(v12 + 56) = v11;
  return partial apply for closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter;
}

uint64_t protocol witness for Rule.value.getter in conformance BarEdgeReader<A>.MakeView()
{
  return BarEdgeReader.MakeView.value.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

unint64_t protocol witness for Rule.value.getter in conformance NavigationStackStyledCore<A>.NavigationStateStructureSeed@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = NavigationStackStyledCore.NavigationStateStructureSeed.value.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

unint64_t NavigationStackStyledCore.NavigationStateStructureSeed.value.getter()
{
  uint64_t WeakValue = (unsigned int *)AGGraphGetWeakValue();
  if (WeakValue) {
    uint64_t v1 = *WeakValue;
  }
  else {
    uint64_t v1 = 0;
  }
  return v1 | ((unint64_t)(WeakValue == 0) << 32);
}

uint64_t protocol witness for Rule.value.getter in conformance FocusStateBindingModifier<A>.ListTransform@<X0>(uint64_t (**a1)()@<X8>)
{
  uint64_t v2 = FocusStateBindingModifier.ListTransform.value.getter();
  uint64_t v4 = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v2;
  *(void *)(result + 24) = v4;
  *a1 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ();
  a1[1] = (uint64_t (*)())result;
  return result;
}

uint64_t (*FocusStateBindingModifier.ListTransform.value.getter())(uint64_t a1)
{
  uint64_t v0 = *(void *)AGGraphGetValue();
  *(void *)(swift_allocObject() + 16) = v0;
  swift_bridgeObjectRetain();
  return partial apply for closure #1 in FocusStateBindingModifier.ListTransform.value.getter;
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarModifier<A, B>.InvalidateBridge@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*v2, a1[2], a1[3], a1[4]);

  return swift_retain();
}

uint64_t protocol witness for Rule.value.getter in conformance ToString<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = ToString.value.getter(*v2, *(void *)(a1 + 16));
  *a2 = result;
  a2[1] = v5;
  return result;
}

uint64_t ToString.value.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, Value, a2);
  if (swift_dynamicCast()) {
    return v8;
  }
  else {
    return 0;
  }
}

uint64_t destroy for SearchPrimitiveModifier.ForwardedEnvironment(uint64_t result)
{
  if (*(void *)(result + 8)) {
    return swift_release();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SearchPrimitiveModifier.ForwardedEnvironment(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = v3;
    *(void *)(a1 + 16) = v4;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  }
  return a1;
}

uint64_t protocol witness for Rule.value.getter in conformance SearchPrimitiveModifier<A>.MakeForwardEnv@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = SearchPrimitiveModifier.MakeForwardEnv.value.getter();
  *(unsigned char *)a1 = result & 1;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v4;
  return result;
}

uint64_t SearchPrimitiveModifier.MakeForwardEnv.value.getter()
{
  uint64_t v0 = *(unsigned __int8 *)AGGraphGetValue();
  _s7SwiftUI5StateVySbGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for TriggerSubmitAction?, (uint64_t)&type metadata for TriggerSubmitAction, MEMORY[0x1E4FBB718]);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  outlined copy of AppIntentExecutor?(*Value);
  return v0;
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationStackReader<A, B>.StackKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = NavigationStackReader.StackKey.value.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t NavigationStackReader.StackKey.value.getter()
{
  uint64_t v0 = NavigationStackReader.StackKey.inheritedStackKey.getter();
  if ((v1 & 0xFE) != 6) {
    return v0;
  }
  uint64_t v2 = *(void *)AGGraphGetValue();
  AGGraphGetValue();
  AGGraphGetValue();
  return v2;
}

uint64_t NavigationStackReader.StackKey.inheritedStackKey.getter()
{
  _s7SwiftUI11_GraphValueVyAA9NamespaceV2IDVGMaTm_1(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, MEMORY[0x1E4FBB718]);
  uint64_t result = AGGraphGetWeakValue();
  if (result) {
    return *(void *)result;
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance NavigableListModifier<A>.ListKey@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  NavigableListModifier.ListKey.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), v5);
  return _s7SwiftUI19NavigationAuthorityVSgWObTm_0((uint64_t)v5, a2, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey);
}

uint64_t protocol witness for Rule.value.getter in conformance ButtonActionModifier<A>.PlatformSelectionBehavior@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t a1)@<X8>)
{
  uint64_t v4 = ButtonActionModifier.PlatformSelectionBehavior.value.getter(*(void *)v2, *(unsigned int *)(v2 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v6 = v5;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = v4;
  *(void *)(result + 24) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  a2[1] = (uint64_t (*)(uint64_t))result;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance MakeRepresentable<A, B>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = 0x100000000;
  if (!*((unsigned char *)v2 + 4)) {
    uint64_t v3 = 0;
  }
  return MakeRepresentable.value.getter(v3 | *v2, *((void *)v2 + 1), v2[4], a1[2], a1[3], a1[4], a1[5], a2);
}

uint64_t MakeRepresentable.value.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  int v37 = a3;
  uint64_t v36 = a2;
  uint64_t v14 = type metadata accessor for Binding();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  double v31 = (char *)&v31 - v16;
  uint64_t v32 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v33 = a4;
  uint64_t v34 = a6;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  unint64_t v20 = a1;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  uint64_t v35 = a7;
  type metadata accessor for UICollectionViewListCoordinator();
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v22 = *Value + *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)*Value) + 0x100);
  swift_beginAccess();
  uint64_t v23 = 1;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v22, 1, v14))
  {
    uint64_t v24 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v31, v22, v14);
    MEMORY[0x18C113DA0](v14);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v14);
    uint64_t v23 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 56))(v19, v23, 1, a5);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v32);
  uint64_t v25 = HIDWORD(v20) & 1;
  uint64_t v38 = v33;
  uint64_t v39 = a5;
  uint64_t v40 = v34;
  uint64_t v41 = v35;
  type metadata accessor for UICollectionViewListCoordinator();
  id v26 = *(id *)AGGraphGetValue();
  uint64_t v27 = AGCreateWeakAttribute();
  uint64_t v28 = AGCreateWeakAttribute();
  uint64_t v29 = AGCreateWeakAttribute();
  uint64_t result = AGCreateWeakAttribute();
  *(void *)a8 = v26;
  *(unsigned char *)(a8 + 8) = v25;
  *(_WORD *)(a8 + 9) = v38;
  *(unsigned char *)(a8 + 11) = BYTE2(v38);
  *(void *)(a8 + 12) = v27;
  *(void *)(a8 + 20) = v28;
  *(void *)(a8 + 28) = v29;
  *(void *)(a8 + 36) = result;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ToolbarModifier<A, B>.HostKeys@<X0>(void *a1@<X8>)
{
  return ToolbarModifier.HostKeys.value.getter(a1);
}

uint64_t ToolbarModifier.HostKeys.value.getter@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  PreferenceKeys.remove(_:)();
  PreferenceKeys.remove(_:)();
  PreferenceKeys.remove(_:)();
  PreferenceKeys.remove(_:)();
  PreferenceKeys.remove(_:)();
  return PreferenceKeys.remove(_:)();
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationStackReader<A, B>.ExtractedRoot@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return NavigationStackReader.ExtractedRoot.value.getter(*v2, v2[1], *(void *)(a1 + 24), *(void *)(a1 + 40), a2);
}

uint64_t protocol witness for Rule.value.getter in conformance TimelineView<A, B><>.AlwaysOnTimelinePreferenceWriter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t (**a3)()@<X8>)
{
  TimelineView<>.AlwaysOnTimelinePreferenceWriter.value.getter(*(void **)v3, *(unsigned int *)(v3 + 8), *(void *)(a1 + 16), a2, *(void *)(a1 + 32));
  uint64_t v6 = v5;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in TimelineView<>.AlwaysOnTimelinePreferenceWriter.value.getter;
  *(void *)(result + 24) = v6;
  *a3 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ();
  a3[1] = (uint64_t (*)())result;
  return result;
}

ValueMetadata *type metadata accessor for TitleOnlyLabelStyle()
{
  return &type metadata for TitleOnlyLabelStyle;
}

uint64_t storeEnumTagSinglePayload for SheetPreference.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 90) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 106) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 106) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 105) = -(char)a2;
    }
  }
  return result;
}

void *partial apply for closure #2 in MakeAlertStorage.updateValue()(uint64_t a1)
{
  *(void *)&v3[16] = *(void *)(v1 + 104);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)(v1 + 88);
  return closure #2 in MakeAlertStorage.updateValue()(a1, *(_DWORD *)(v1 + 16), *(unsigned char *)(v1 + 20), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40), *(void *)(v1 + 44), *(void *)(v1 + 52), *(_OWORD *)(v1 + 64), *(_WORD *)(v1 + 80), *(void *)(v1 + 88), *(long long *)&v3[8], *(_WORD *)(v1 + 112), v1 + 120, v1 + 176);
}

uint64_t MakeAlertStorage.updateValue()(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v208 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = a1[2];
  unint64_t v4 = a1[3];
  unint64_t v5 = a1[4];
  unint64_t v6 = a1[5];
  v179 = a1;
  unint64_t v158 = v4;
  unint64_t v159 = v3;
  unint64_t v189 = v3;
  unint64_t v190 = v4;
  unint64_t v156 = v6;
  unint64_t v157 = v5;
  unint64_t v191 = v5;
  unint64_t v192 = v6;
  uint64_t v7 = type metadata accessor for AlertModifier();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  v171 = (char *)&v138 - v9;
  unint64_t v155 = type metadata accessor for (_:)();
  uint64_t OutputValue = AGGraphGetOutputValue();
  uint64_t v168 = v7;
  uint64_t v163 = v8;
  if (!OutputValue)
  {
    uint64_t v145 = 0;
    unint64_t v146 = 0;
    unint64_t v148 = 0;
    unint64_t v149 = 0;
    uint64_t v151 = 0;
    unint64_t v160 = 0;
    uint64_t v161 = 0;
    LODWORD(v150) = 0;
    unint64_t v165 = 0;
    uint64_t v169 = 0;
    uint64_t Alert = 0;
    uint64_t v22 = 0;
    uint64_t v147 = 1;
    goto LABEL_36;
  }
  int v11 = *(_DWORD *)v1;
  LODWORD(v149) = *(_DWORD *)(v1 + 4);
  int v177 = *(_DWORD *)(v1 + 8);
  unsigned int v176 = *(_DWORD *)(v1 + 12);
  unsigned int v175 = *(_DWORD *)(v1 + 16);
  LODWORD(v173) = *(_DWORD *)(v1 + 20);
  LODWORD(v172) = *(_DWORD *)(v1 + 24);
  LODWORD(v170) = *(_DWORD *)(v1 + 28);
  int v167 = *(_DWORD *)(v1 + 32);
  uint64_t v13 = *(void *)(v1 + 40);
  uint64_t v12 = *(void *)(v1 + 48);
  uint64_t v180 = *(void *)(v1 + 56);
  unsigned int v181 = *(unsigned __int8 *)(v1 + 64);
  unint64_t v154 = *(void *)(v1 + 72);
  uint64_t v14 = *(void *)(v1 + 80);
  uint64_t v15 = *(void *)(v1 + 88);
  uint64_t v152 = v12;
  uint64_t v153 = v14;
  int v16 = *(unsigned __int8 *)(v2 + 96);
  int v17 = *(unsigned __int8 *)(v2 + 97);
  unint64_t v148 = *(void *)(v2 + 104);
  uint64_t v178 = *(void *)(v2 + 112);
  uint64_t v18 = *(void *)(v2 + 120);
  uint64_t v150 = *(void *)(v2 + 128);
  uint64_t v151 = v18;
  uint64_t v19 = *(void *)(v2 + 144);
  uint64_t v166 = *(void *)(v2 + 136);
  LODWORD(v161) = *(unsigned __int8 *)(v2 + 152);
  LODWORD(v189) = v11;
  char v20 = AGGraphAnyInputsChanged();
  unsigned int v21 = v189;
  *(_DWORD *)uint64_t v2 = v189;
  if ((v20 & 1) == 0)
  {
    int v140 = v16;
    int v23 = v16 & 1;
    unsigned __int8 v184 = v23;
    unint64_t v189 = __PAIR64__(v149, v21);
    unint64_t v190 = __PAIR64__(v176, v177);
    unint64_t v191 = __PAIR64__(v173, v175);
    unint64_t v192 = __PAIR64__(v170, v172);
    LODWORD(v193) = v167;
    *((void *)&v193 + 1) = v13;
    uint64_t v194 = v152;
    uint64_t v195 = v180;
    LOBYTE(v196) = v181;
    *((void *)&v196 + 1) = v154;
    *(void *)&long long v197 = v153;
    *((void *)&v197 + 1) = v15;
    LOBYTE(v198) = v23;
    BYTE1(v198) = v17;
    *((void *)&v198 + 1) = v148;
    *(void *)&long long v199 = v178;
    *((void *)&v199 + 1) = v151;
    *(void *)&v200[0] = v150;
    *((void *)&v200[0] + 1) = v166;
    *(void *)&v200[1] = v19;
    BYTE8(v200[1]) = v161;
    LODWORD(v146) = v21;
    uint64_t v143 = v19;
    uint64_t v144 = v15;
    int v142 = v17;
    uint64_t v24 = (uint64_t)v179;
    MakeConfirmationDialog.environment.getter(&v201);
    swift_release();
    char v25 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
    uint64_t result = swift_release();
    if ((v25 & 1) == 0) {
      return result;
    }
    unsigned int v27 = v146;
    unint64_t v189 = __PAIR64__(v149, v146);
    unsigned int v28 = v149;
    unint64_t v190 = __PAIR64__(v176, v177);
    unint64_t v191 = __PAIR64__(v173, v175);
    unint64_t v192 = __PAIR64__(v170, v172);
    LODWORD(v193) = v167;
    uint64_t v29 = v24;
    uint64_t v30 = v152;
    *((void *)&v193 + 1) = v13;
    uint64_t v194 = v152;
    char v31 = v23;
    LODWORD(v169) = v23;
    uint64_t v32 = v180;
    uint64_t v195 = v180;
    LOBYTE(v196) = v181;
    *((void *)&v196 + 1) = v154;
    *(void *)&long long v197 = v153;
    *((void *)&v197 + 1) = v144;
    LOBYTE(v198) = v31;
    BYTE1(v198) = v142;
    uint64_t v33 = v148;
    *((void *)&v198 + 1) = v148;
    *(void *)&long long v199 = v178;
    *((void *)&v199 + 1) = v151;
    *(void *)&v200[0] = v150;
    *((void *)&v200[0] + 1) = v166;
    *(void *)&v200[1] = v143;
    BYTE8(v200[1]) = v161;
    uint64_t Alert = MakeAlertStorage.resolveTitle()(v29);
    uint64_t v162 = v34;
    unint64_t v189 = __PAIR64__(v28, v27);
    unint64_t v190 = __PAIR64__(v176, v177);
    unint64_t v191 = __PAIR64__(v173, v175);
    unint64_t v192 = __PAIR64__(v170, v172);
    LODWORD(v193) = v167;
    uint64_t v145 = v13;
    *((void *)&v193 + 1) = v13;
    uint64_t v194 = v30;
    uint64_t v195 = v32;
    LOBYTE(v196) = v181;
    uint64_t v35 = v153;
    *((void *)&v196 + 1) = v154;
    *(void *)&long long v197 = v153;
    *((void *)&v197 + 1) = v144;
    LOBYTE(v198) = v169;
    BYTE1(v198) = v142;
    *((void *)&v198 + 1) = v33;
    *(void *)&long long v199 = v178;
    *((void *)&v199 + 1) = v151;
    *(void *)&v200[0] = v150;
    *((void *)&v200[0] + 1) = v166;
    *(void *)&v200[1] = v143;
    BYTE8(v200[1]) = v161;
    MakeConfirmationDialog.environment.getter(&v201);
    if (*((void *)&v201 + 1))
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
      uint64_t v36 = v153;
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      uint64_t v36 = v35;
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    uint64_t v37 = v143;
    uint64_t v38 = v144;
    uint64_t v39 = v145;
    if (v182 == 2)
    {
      unsigned int v40 = v146;
      unint64_t v189 = __PAIR64__(v149, v146);
      unint64_t v190 = __PAIR64__(v176, v177);
      unint64_t v191 = __PAIR64__(v173, v175);
      unint64_t v192 = __PAIR64__(v170, v172);
      LODWORD(v193) = v167;
      *((void *)&v193 + 1) = v145;
      uint64_t v194 = v152;
      uint64_t v195 = v180;
      LOBYTE(v196) = v181;
      *(_DWORD *)((char *)&v196 + 1) = v187;
      DWORD1(v196) = *(_DWORD *)((char *)&v187 + 3);
      *((void *)&v196 + 1) = v154;
      *(void *)&long long v197 = v36;
      *((void *)&v197 + 1) = v144;
      LODWORD(v169) = v184;
      LOBYTE(v198) = v184;
      BYTE1(v198) = v142;
      WORD3(v198) = WORD2(v185);
      *(_DWORD *)((char *)&v198 + 2) = v185;
      *((void *)&v198 + 1) = v148;
      *(void *)&long long v199 = v178;
      *((void *)&v199 + 1) = v151;
      *(void *)&v200[0] = v150;
      uint64_t v41 = v166;
      *((void *)&v200[0] + 1) = v166;
      *(void *)&v200[1] = v143;
      char v42 = v161;
      BYTE8(v200[1]) = v161;
      MakeConfirmationDialog.environment.getter(&v206);
      unint64_t v189 = v206;
      unint64_t v190 = v207;
      EnvironmentValues.explicitPreferredColorScheme.getter();
      uint64_t v38 = v144;
      char v43 = v181;
      swift_release();
      uint64_t v39 = v145;
      swift_release();
      char v44 = v142;
      uint64_t v45 = v148;
      uint64_t v46 = v41;
      uint64_t v47 = v178;
      uint64_t v48 = v150;
      uint64_t v49 = v151;
      uint64_t v50 = v152;
      uint64_t v51 = v153;
      unint64_t v52 = v154;
      unsigned __int8 v53 = v169;
      int v54 = v167;
      unsigned int v55 = v170;
      unsigned int v56 = v172;
      unsigned int v57 = v173;
      unsigned int v58 = v175;
      unsigned int v59 = v176;
      int v60 = v177;
      unsigned int v61 = v149;
      uint64_t v62 = v180;
      int v139 = v183;
      uint64_t v37 = v143;
    }
    else
    {
      int v139 = v182;
      unsigned __int8 v53 = v184;
      uint64_t v62 = v180;
      uint64_t v51 = v36;
      char v44 = v142;
      unint64_t v52 = v154;
      char v43 = v181;
      uint64_t v49 = v151;
      uint64_t v50 = v152;
      uint64_t v45 = v148;
      uint64_t v47 = v178;
      uint64_t v48 = v150;
      uint64_t v46 = v166;
      char v42 = v161;
      unsigned int v61 = v149;
      int v60 = v177;
      unsigned int v59 = v176;
      unsigned int v58 = v175;
      unsigned int v57 = v173;
      unsigned int v56 = v172;
      unsigned int v55 = v170;
      int v54 = v167;
      unsigned int v40 = v146;
    }
    unint64_t v189 = __PAIR64__(v61, v40);
    unint64_t v190 = __PAIR64__(v59, v60);
    unint64_t v191 = __PAIR64__(v57, v58);
    unint64_t v192 = __PAIR64__(v55, v56);
    LODWORD(v193) = v54;
    *((void *)&v193 + 1) = v39;
    uint64_t v194 = v50;
    uint64_t v195 = v62;
    LOBYTE(v196) = v43;
    *(_DWORD *)((char *)&v196 + 1) = v187;
    DWORD1(v196) = *(_DWORD *)((char *)&v187 + 3);
    *((void *)&v196 + 1) = v52;
    *(void *)&long long v197 = v51;
    *((void *)&v197 + 1) = v38;
    LOBYTE(v198) = v53;
    BYTE1(v198) = v44;
    WORD3(v198) = WORD2(v185);
    *(_DWORD *)((char *)&v198 + 2) = v185;
    *((void *)&v198 + 1) = v45;
    *(void *)&long long v199 = v47;
    *((void *)&v199 + 1) = v49;
    *(void *)&v200[0] = v48;
    *((void *)&v200[0] + 1) = v46;
    *(void *)&v200[1] = v37;
    BYTE8(v200[1]) = v42;
    MakeConfirmationDialog.environment.getter(&v201);
    if (*((void *)&v201 + 1))
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    unint64_t v63 = v189;
    unint64_t v189 = __PAIR64__(v149, v146);
    unint64_t v190 = __PAIR64__(v176, v177);
    unint64_t v191 = __PAIR64__(v173, v175);
    unint64_t v192 = __PAIR64__(v170, v172);
    LODWORD(v193) = v167;
    uint64_t v64 = v153;
    *((void *)&v193 + 1) = v145;
    uint64_t v194 = v152;
    uint64_t v195 = v180;
    LOBYTE(v196) = v181;
    *(_DWORD *)((char *)&v196 + 1) = v187;
    DWORD1(v196) = *(_DWORD *)((char *)&v187 + 3);
    unint64_t v65 = v154;
    *((void *)&v196 + 1) = v154;
    *(void *)&long long v197 = v153;
    *((void *)&v197 + 1) = v144;
    LODWORD(v147) = v184;
    LOBYTE(v198) = v184;
    char v66 = v142;
    BYTE1(v198) = v142;
    *(_DWORD *)((char *)&v198 + 2) = v185;
    WORD3(v198) = WORD2(v185);
    uint64_t v67 = v148;
    *((void *)&v198 + 1) = v148;
    *(void *)&long long v199 = v178;
    uint64_t v69 = v150;
    uint64_t v68 = v151;
    *((void *)&v199 + 1) = v151;
    *(void *)&v200[0] = v150;
    *((void *)&v200[0] + 1) = v166;
    *(void *)&v200[1] = v143;
    BYTE8(v200[1]) = v161;
    unint64_t v160 = v63;
    swift_retain();
    unint64_t v165 = MakeAlertStorage.resolveTintColor()();
    uint64_t v169 = v70;
    int v141 = v71;
    unint64_t v189 = __PAIR64__(v149, v146);
    unint64_t v190 = __PAIR64__(v176, v177);
    unint64_t v191 = __PAIR64__(v173, v175);
    unint64_t v192 = __PAIR64__(v170, v172);
    LODWORD(v193) = v167;
    *((void *)&v193 + 1) = v145;
    uint64_t v194 = v152;
    uint64_t v195 = v180;
    LOBYTE(v196) = v181;
    *(_DWORD *)((char *)&v196 + 1) = v187;
    DWORD1(v196) = *(_DWORD *)((char *)&v187 + 3);
    *((void *)&v196 + 1) = v65;
    *(void *)&long long v197 = v64;
    *((void *)&v197 + 1) = v144;
    LOBYTE(v198) = v147;
    BYTE1(v198) = v66;
    WORD3(v198) = WORD2(v185);
    *(_DWORD *)((char *)&v198 + 2) = v185;
    *((void *)&v198 + 1) = v67;
    *(void *)&long long v199 = v178;
    *((void *)&v199 + 1) = v68;
    *(void *)&v200[0] = v69;
    *((void *)&v200[0] + 1) = v166;
    *(void *)&v200[1] = v143;
    BYTE8(v200[1]) = v161;
    MakeConfirmationDialog.environment.getter(&v201);
    if (*((void *)&v201 + 1))
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
      uint64_t v72 = v153;
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
      uint64_t v72 = v153;
    }
    uint64_t v147 = v141 & 1;
    swift_release_n();
    HIDWORD(v138) = v189;
    unint64_t v189 = __PAIR64__(v149, v146);
    unint64_t v190 = __PAIR64__(v176, v177);
    unint64_t v191 = __PAIR64__(v173, v175);
    unint64_t v192 = __PAIR64__(v170, v172);
    LODWORD(v193) = v167;
    uint64_t v73 = v152;
    *((void *)&v193 + 1) = v145;
    uint64_t v194 = v152;
    uint64_t v195 = v180;
    LOBYTE(v196) = v181;
    *(_DWORD *)((char *)&v196 + 1) = v187;
    DWORD1(v196) = *(_DWORD *)((char *)&v187 + 3);
    *((void *)&v196 + 1) = v154;
    *(void *)&long long v197 = v72;
    *((void *)&v197 + 1) = v144;
    LOBYTE(v198) = v184;
    BYTE1(v198) = v142;
    *(_DWORD *)((char *)&v198 + 2) = v185;
    WORD3(v198) = WORD2(v185);
    *((void *)&v198 + 1) = v67;
    *(void *)&long long v199 = v178;
    *((void *)&v199 + 1) = v151;
    *(void *)&v200[0] = v150;
    *((void *)&v200[0] + 1) = v166;
    *(void *)&v200[1] = v143;
    BYTE8(v200[1]) = v161;
    MakeConfirmationDialog.environment.getter(&v201);
    if (*((void *)&v201 + 1))
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    uint64_t v75 = v189;
    uint64_t v74 = v190;
    unint64_t v148 = v192;
    unint64_t v149 = v191;
    uint64_t v161 = *((void *)&v193 + 1);
    uint64_t v151 = v193;
    LODWORD(v150) = v194;
    uint64_t v22 = v162;
    uint64_t v76 = v144;
    uint64_t v145 = v190;
    unint64_t v146 = v189;
    if (!v180 || (Alert != v73 || v180 != v162) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_34;
    }
    if (v139 == 2)
    {
      uint64_t v77 = v153;
      if (v181 != 2) {
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v77 = v153;
      if (v181 == 2 || ((v139 ^ v181) & 1) != 0) {
        goto LABEL_34;
      }
    }
    if (v160)
    {
      if (!v154)
      {
LABEL_34:
        swift_release();
        goto LABEL_35;
      }
      swift_retain();
      uint64_t v79 = v148;
      char v78 = v149;
      outlined copy of DialogSuppressionConfiguration?(v75, v74, v149, v148, v151, v161);
      swift_retain();
      unsigned int v181 = static Image.== infix(_:_:)();
      swift_release_n();
      swift_release();
      char v80 = v78;
      uint64_t v76 = v144;
      uint64_t v77 = v153;
      outlined consume of DialogSuppressionConfiguration?(v75, v74, v80, v79, v151, v161);
      if ((v181 & 1) == 0)
      {
LABEL_35:
        uint64_t v7 = v168;
        uint64_t v8 = v163;
        goto LABEL_36;
      }
    }
    else if (v154)
    {
      unint64_t v160 = 0;
      goto LABEL_35;
    }
    if (v141)
    {
      if ((v140 & 1) == 0)
      {
        uint64_t v147 = 1;
        goto LABEL_35;
      }
    }
    else if ((v140 & 1) != 0 {
           || *(float *)&v165 != *(float *)&v77
    }
           || *((float *)&v165 + 1) != *((float *)&v77 + 1)
           || *(float *)&v169 != *(float *)&v76
           || *((float *)&v169 + 1) != *((float *)&v76 + 1))
    {
      uint64_t v147 = 0;
      goto LABEL_35;
    }
    if (HIDWORD(v138) == v142)
    {
      uint64_t v7 = v168;
      uint64_t v8 = v163;
      if (!v161)
      {
        if (!v143)
        {
          swift_bridgeObjectRelease();
          return swift_release();
        }
        uint64_t v161 = 0;
      }
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  unint64_t v146 = 0;
  uint64_t v147 = 1;
  uint64_t v145 = 0;
  unint64_t v148 = 0;
  unint64_t v149 = 0;
  uint64_t v151 = 0;
  unint64_t v160 = 0;
  uint64_t v161 = 0;
  LODWORD(v150) = 0;
  unint64_t v165 = 0;
  uint64_t v169 = 0;
  uint64_t Alert = 0;
  uint64_t v22 = 0;
LABEL_36:
  unint64_t v81 = *(void *)v2;
  unsigned int v82 = *(_DWORD *)(v2 + 8);
  unsigned int v181 = *(_DWORD *)(v2 + 12);
  unsigned int v176 = *(_DWORD *)(v2 + 16);
  LODWORD(v178) = *(_DWORD *)(v2 + 20);
  LODWORD(v180) = *(_DWORD *)(v2 + 24);
  int v83 = *(_DWORD *)(v2 + 32);
  int v177 = *(_DWORD *)(v2 + 28);
  uint64_t v185 = *(void *)(v2 + 36);
  int v186 = *(_DWORD *)(v2 + 44);
  uint64_t v84 = *(void *)(v2 + 48);
  uint64_t v85 = *(void *)(v2 + 56);
  unint64_t v172 = v81;
  uint64_t v173 = v84;
  long long v86 = *(_OWORD *)(v2 + 80);
  long long v201 = *(_OWORD *)(v2 + 64);
  long long v202 = v86;
  long long v87 = *(_OWORD *)(v2 + 96);
  long long v88 = *(_OWORD *)(v2 + 112);
  long long v89 = *(_OWORD *)(v2 + 128);
  *(_OWORD *)((char *)v205 + 9) = *(_OWORD *)(v2 + 137);
  long long v204 = v88;
  v205[0] = v89;
  long long v203 = v87;
  uint64_t Value = AGGraphGetValue();
  char v92 = v91;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v171, Value, v7);
  uint64_t v170 = v85;
  uint64_t v164 = v2;
  if (v22)
  {
    uint64_t v162 = v22;
    int v93 = v83;
    unsigned int v94 = v180;
    uint64_t v96 = v173;
    uint64_t v95 = Alert;
  }
  else if (!v85 || (v92 & 1) != 0)
  {
    uint64_t v96 = v173;
    unint64_t v189 = v172;
    unint64_t v190 = __PAIR64__(v181, v82);
    unint64_t v191 = __PAIR64__(v178, v176);
    unsigned int v94 = v180;
    unint64_t v192 = __PAIR64__(v177, v180);
    int v93 = v83;
    LODWORD(v193) = v83;
    *(void *)((char *)&v193 + 4) = v185;
    HIDWORD(v193) = v186;
    uint64_t v85 = v170;
    uint64_t v194 = v173;
    uint64_t v195 = v170;
    long long v196 = v201;
    long long v197 = v202;
    *(_OWORD *)((char *)v200 + 9) = *(_OWORD *)((char *)v205 + 9);
    long long v199 = v204;
    v200[0] = v205[0];
    long long v198 = v203;
    uint64_t v95 = MakeAlertStorage.resolveTitle()((uint64_t)v179);
    uint64_t v162 = v97;
  }
  else
  {
    uint64_t v85 = v170;
    swift_bridgeObjectRetain();
    uint64_t v96 = v173;
    uint64_t v95 = v173;
    uint64_t v162 = v85;
    int v93 = v83;
    unsigned int v94 = v180;
  }
  uint64_t Alert = v95;
  unint64_t v98 = v172;
  unint64_t v189 = v172;
  unsigned int v175 = v82;
  unint64_t v190 = __PAIR64__(v181, v82);
  unint64_t v191 = __PAIR64__(v178, v176);
  unint64_t v192 = __PAIR64__(v177, v94);
  LODWORD(v193) = v93;
  *(void *)((char *)&v193 + 4) = v185;
  HIDWORD(v193) = v186;
  uint64_t v194 = v96;
  uint64_t v195 = v85;
  long long v196 = v201;
  long long v197 = v202;
  *(_OWORD *)((char *)v200 + 9) = *(_OWORD *)((char *)v205 + 9);
  long long v199 = v204;
  v200[0] = v205[0];
  long long v198 = v203;
  MakeConfirmationDialog.environment.getter(&v206);
  if (v207)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    swift_retain_n();
    swift_retain_n();
    uint64_t v96 = v173;
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogColorSchemeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  int v99 = v183;
  unsigned int v100 = v175;
  unsigned int v101 = v176;
  unsigned int v102 = v178;
  if (v183 == 2)
  {
    unint64_t v189 = v98;
    unint64_t v190 = __PAIR64__(v181, v175);
    unint64_t v191 = __PAIR64__(v178, v176);
    unint64_t v192 = __PAIR64__(v177, v180);
    LODWORD(v193) = v93;
    *(void *)((char *)&v193 + 4) = v185;
    HIDWORD(v193) = v186;
    uint64_t v194 = v96;
    uint64_t v195 = v170;
    long long v196 = v201;
    long long v197 = v202;
    *(_OWORD *)((char *)v200 + 9) = *(_OWORD *)((char *)v205 + 9);
    long long v199 = v204;
    v200[0] = v205[0];
    long long v198 = v203;
    MakeConfirmationDialog.environment.getter(&v187);
    unint64_t v189 = (unint64_t)v187;
    unint64_t v190 = v188;
    EnvironmentValues.explicitPreferredColorScheme.getter();
    swift_release();
    unsigned int v102 = v178;
    swift_release();
    int v99 = v184;
  }
  unint64_t v189 = v98;
  unint64_t v190 = __PAIR64__(v181, v100);
  unint64_t v191 = __PAIR64__(v102, v101);
  unint64_t v192 = __PAIR64__(v177, v180);
  LODWORD(v193) = v93;
  *(void *)((char *)&v193 + 4) = v185;
  HIDWORD(v193) = v186;
  uint64_t v194 = v96;
  uint64_t v195 = v170;
  long long v196 = v201;
  long long v197 = v202;
  *(_OWORD *)((char *)v200 + 9) = *(_OWORD *)((char *)v205 + 9);
  long long v199 = v204;
  v200[0] = v205[0];
  long long v198 = v203;
  MakeConfirmationDialog.environment.getter(&v206);
  unint64_t v103 = v207;
  int v167 = v99;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>);
  swift_retain_n();
  if (v103)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  int v104 = v93;
  swift_release_n();
  unsigned int v105 = v175;
  unsigned int v106 = v176;
  unsigned int v107 = v178;
  int v108 = v177;
  unint64_t v154 = v189;
  if (v147)
  {
    unint64_t v110 = v172;
    uint64_t v109 = v173;
    unint64_t v189 = v172;
    unint64_t v190 = __PAIR64__(v181, v175);
    unint64_t v191 = __PAIR64__(v178, v176);
    unint64_t v192 = __PAIR64__(v177, v180);
    LODWORD(v153) = v104;
    LODWORD(v193) = v104;
    *(void *)((char *)&v193 + 4) = v185;
    HIDWORD(v193) = v186;
    uint64_t v111 = v170;
    uint64_t v194 = v173;
    uint64_t v195 = v170;
    long long v196 = v201;
    long long v197 = v202;
    *(_OWORD *)((char *)v200 + 9) = *(_OWORD *)((char *)v205 + 9);
    long long v199 = v204;
    v200[0] = v205[0];
    long long v198 = v203;
    unsigned int v112 = v178;
    unint64_t v113 = MakeAlertStorage.resolveTintColor()();
    unsigned int v114 = v180;
    unsigned int v107 = v112;
    int v104 = v153;
    unsigned int v105 = v175;
    unint64_t v165 = v113;
    uint64_t v169 = v115;
    LODWORD(v166) = v116 & 1;
  }
  else
  {
    LODWORD(v166) = 0;
    unsigned int v114 = v180;
    unint64_t v110 = v172;
    uint64_t v109 = v173;
    uint64_t v111 = v170;
  }
  unint64_t v189 = v110;
  unint64_t v190 = __PAIR64__(v181, v105);
  unint64_t v191 = __PAIR64__(v107, v106);
  unint64_t v192 = __PAIR64__(v108, v114);
  LODWORD(v193) = v104;
  *(void *)((char *)&v193 + 4) = v185;
  HIDWORD(v193) = v186;
  uint64_t v194 = v109;
  uint64_t v195 = v111;
  long long v196 = v201;
  long long v197 = v202;
  *(_OWORD *)((char *)v200 + 9) = *(_OWORD *)((char *)v205 + 9);
  long long v199 = v204;
  v200[0] = v205[0];
  long long v198 = v203;
  MakeConfirmationDialog.environment.getter(&v206);
  if (v207)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
    uint64_t v109 = v173;
    unsigned int v117 = v181;
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DialogSeverityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
    unsigned int v117 = v181;
  }
  swift_release_n();
  LODWORD(v173) = v189;
  unint64_t v189 = v172;
  unint64_t v190 = __PAIR64__(v117, v175);
  unint64_t v191 = __PAIR64__(v178, v176);
  unint64_t v192 = __PAIR64__(v177, v180);
  int v118 = v177;
  LODWORD(v193) = v104;
  *(void *)((char *)&v193 + 4) = v185;
  HIDWORD(v193) = v186;
  uint64_t v194 = v109;
  uint64_t v195 = v111;
  long long v196 = v201;
  long long v197 = v202;
  *(_OWORD *)((char *)v200 + 9) = *(_OWORD *)((char *)v205 + 9);
  long long v199 = v204;
  v200[0] = v205[0];
  long long v198 = v203;
  MakeConfirmationDialog.environment.getter(&v187);
  if (v188)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
    swift_retain_n();
    swift_retain_n();
    int v118 = v177;
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogSuppressionConfiguration.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DialogSuppressionConfiguration.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v119 = MEMORY[0x1E4FBB718];
  outlined init with take of DialogSuppressionConfiguration?((uint64_t)&v189, (uint64_t)&v206, (uint64_t)&lazy cache variable for type metadata for DialogSuppressionConfiguration?, (uint64_t)&type metadata for DialogSuppressionConfiguration, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_1);
  uint64_t v120 = v168;
  v121 = v171;
  outlined init with take of DialogSuppressionConfiguration?((uint64_t)&v171[*(int *)(v168 + 68)], (uint64_t)&v189, (uint64_t)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView, v119, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_1);
  int v122 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v122 != v104 || !v118)
  {
    int v118 = static ViewIdentity.nextSeed;
    if ((static ViewIdentity.nextSeed + 1) > 1) {
      int v123 = static ViewIdentity.nextSeed + 1;
    }
    else {
      int v123 = 1;
    }
    static ViewIdentity.nextSeed = v123;
    uint64_t v124 = v164;
    *(_DWORD *)(v164 + 28) = v118;
    *(_DWORD *)(v124 + 32) = v122;
  }
  char v125 = *v121;
  uint64_t v127 = *((void *)v121 + 1);
  uint64_t v126 = *((void *)v121 + 2);
  char v128 = v121[24];
  char v129 = v121[*(int *)(v120 + 72)];
  uint64_t v130 = swift_allocObject();
  *(_DWORD *)(v130 + 16) = v118;
  *(unsigned char *)(v130 + 20) = v125;
  *(void *)(v130 + 24) = v127;
  *(void *)(v130 + 32) = v126;
  *(unsigned char *)(v130 + 40) = v128;
  unsigned int v131 = v181;
  *(_DWORD *)(v130 + 44) = v175;
  *(_DWORD *)(v130 + 48) = v131;
  int v132 = v178;
  *(_DWORD *)(v130 + 52) = v176;
  *(_DWORD *)(v130 + 56) = v132;
  uint64_t v133 = v162;
  *(void *)(v130 + 64) = Alert;
  *(void *)(v130 + 72) = v133;
  *(unsigned char *)(v130 + 80) = v129;
  *(unsigned char *)(v130 + 81) = v167;
  uint64_t v134 = v154;
  uint64_t v135 = v165;
  *(void *)(v130 + 88) = v154;
  *(void *)(v130 + 96) = v135;
  *(void *)(v130 + 104) = v169;
  *(unsigned char *)(v130 + 112) = v166;
  char v136 = v173;
  *(unsigned char *)(v130 + 113) = v173;
  uint64_t v137 = MEMORY[0x1E4FBB718];
  outlined init with take of DialogSuppressionConfiguration?((uint64_t)&v206, v130 + 120, (uint64_t)&lazy cache variable for type metadata for DialogSuppressionConfiguration?, (uint64_t)&type metadata for DialogSuppressionConfiguration, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_1);
  outlined init with take of DialogSuppressionConfiguration?((uint64_t)&v189, v130 + 176, (uint64_t)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView, v137, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_1);
  v187 = partial apply for closure #2 in MakeAlertStorage.updateValue();
  unint64_t v188 = v130;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of DialogSuppressionConfiguration?((uint64_t)&v206, (void (*)(void, void, void, void, void, void, void))outlined copy of DialogSuppressionConfiguration?);
  outlined retain of BoundInputsView?((uint64_t)&v189);
  AGGraphSetOutputValue();
  swift_release();
  $defer #1 <A, B>() in MakeAlertStorage.updateValue()(v164, Alert, v133, v167, v134, v135, v169, v166, v136);
  outlined consume of DialogSuppressionConfiguration?(v146, v145, v149, v148, v151, v161);
  swift_release();
  swift_release();
  outlined retain of DialogSuppressionConfiguration?((uint64_t)&v206, (void (*)(void, void, void, void, void, void, void))outlined consume of DialogSuppressionConfiguration?);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v163 + 8))(v171, v168);
}

uint64_t MakeConfirmationDialog.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

uint64_t type metadata accessor for AlertModifier()
{
  return swift_getGenericMetadata();
}

void *closure #2 in MakeAlertStorage.updateValue()(uint64_t a1, Swift::UInt32 a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, long long a9, __int16 a10, uint64_t a11, long long a12, __int16 a13, uint64_t a14, uint64_t a15)
{
  uint64_t v20 = MEMORY[0x1E4FBB718];
  outlined init with take of DialogSuppressionConfiguration?(a15, (uint64_t)v71, (uint64_t)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_1);
  uint64_t v41 = v71[1];
  uint64_t v42 = v71[0];
  uint64_t v39 = v71[3];
  uint64_t v40 = v71[2];
  uint64_t v37 = v71[5];
  uint64_t v38 = v71[4];
  uint64_t v35 = v71[7];
  uint64_t v36 = v71[6];
  uint64_t v33 = v71[9];
  uint64_t v34 = v71[8];
  uint64_t v44 = v71[10];
  outlined init with take of DialogSuppressionConfiguration?(a14, (uint64_t)v69, (uint64_t)&lazy cache variable for type metadata for DialogSuppressionConfiguration?, (uint64_t)&type metadata for DialogSuppressionConfiguration, v20, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_1);
  uint64_t v31 = v69[1];
  uint64_t v32 = v69[0];
  uint64_t v29 = v69[3];
  uint64_t v30 = v69[2];
  uint64_t v27 = v69[5];
  uint64_t v28 = v69[4];
  char v26 = v70;
  if (*(void *)(*(void *)a1 + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if (v21) {
      MEMORY[0x18C112B90](0xD00000000000007DLL, 0x80000001883398A0);
    }
  }
  LOBYTE(v46) = a3 & 1;
  *((void *)&v46 + 1) = a4;
  *(void *)uint64_t v47 = a5;
  v47[8] = a6 & 1;
  *(void *)&v47[12] = a7;
  *(void *)&v47[20] = a8;
  LOWORD(v48) = a10 & 0xFF01;
  *((void *)&v48 + 1) = a11;
  LOWORD(v49[0]) = a13 & 0xFF01;
  uint64_t v22 = MEMORY[0x1E4FBB718];
  outlined init with take of DialogSuppressionConfiguration?(a14, (uint64_t)v49 + 8, (uint64_t)&lazy cache variable for type metadata for DialogSuppressionConfiguration?, (uint64_t)&type metadata for DialogSuppressionConfiguration, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_1);
  outlined init with take of DialogSuppressionConfiguration?(a15, (uint64_t)v50, (uint64_t)&lazy cache variable for type metadata for BoundInputsView?, (uint64_t)&type metadata for BoundInputsView, v22, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_1);
  LOBYTE(v52) = a3 & 1;
  *((void *)&v52 + 1) = a4;
  *(void *)unsigned __int8 v53 = a5;
  v53[8] = a6 & 1;
  *(void *)&v53[12] = a7;
  *(void *)&v53[20] = a8;
  long long v54 = a9;
  LOWORD(v55) = a10 & 0xFF01;
  *((void *)&v55 + 1) = a11;
  long long v56 = a12;
  LOWORD(v57) = a13 & 0xFF01;
  *((void *)&v57 + 1) = v32;
  *(void *)&long long v58 = v31;
  *((void *)&v58 + 1) = v30;
  *(void *)&long long v59 = v29;
  *((void *)&v59 + 1) = v28;
  *(void *)&long long v60 = v27;
  BYTE8(v60) = v26;
  *(void *)&long long v61 = v42;
  *((void *)&v61 + 1) = v41;
  *(void *)&long long v62 = v40;
  *((void *)&v62 + 1) = v39;
  *(void *)&long long v63 = v38;
  *((void *)&v63 + 1) = v37;
  *(void *)&long long v64 = v36;
  *((void *)&v64 + 1) = v35;
  *(void *)&long long v65 = v34;
  *((void *)&v65 + 1) = v33;
  uint64_t v66 = v44;
  v72[3] = a9;
  v72[2] = *(_OWORD *)&v53[16];
  v72[1] = *(_OWORD *)v53;
  v72[0] = v52;
  v72[7] = v58;
  v72[6] = v57;
  v72[5] = a12;
  v72[4] = v55;
  v72[11] = v62;
  v72[10] = v61;
  v72[9] = v60;
  v72[8] = v59;
  uint64_t v73 = v44;
  v72[14] = v65;
  v72[13] = v64;
  v72[12] = v63;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined retain of DialogSuppressionConfiguration?(a14, (void (*)(void, void, void, void, void, void, void))outlined copy of DialogSuppressionConfiguration?);
  outlined retain of BoundInputsView?(a15);
  outlined retain of AlertStorage(&v52);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v67[0] = *(void *)a1;
  *(void *)a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v72, a2, isUniquelyReferenced_nonNull_native);
  *(void *)a1 = *(void *)&v67[0];
  swift_bridgeObjectRelease();
  v67[12] = v50[2];
  v67[13] = v50[3];
  v67[14] = v50[4];
  uint64_t v68 = v51;
  v67[8] = v49[2];
  v67[9] = v49[3];
  v67[10] = v50[0];
  v67[11] = v50[1];
  v67[4] = v48;
  v67[5] = a12;
  v67[6] = v49[0];
  v67[7] = v49[1];
  v67[0] = v46;
  v67[1] = *(_OWORD *)v47;
  v67[2] = *(_OWORD *)&v47[16];
  v67[3] = a9;
  return outlined release of AlertStorage(v67);
}

uint64_t outlined init with take of DialogSuppressionConfiguration?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

void type metadata accessor for Attribute<PlatformItemList>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t outlined retain of DialogSuppressionConfiguration?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

void *outlined retain of AlertStorage(void *a1)
{
  uint64_t v2 = a1[15];
  uint64_t v7 = a1[14];
  uint64_t v8 = a1[13];
  uint64_t v3 = a1[16];
  uint64_t v4 = a1[17];
  uint64_t v5 = a1[18];
  uint64_t v12 = a1[21];
  uint64_t v13 = (void *)a1[20];
  uint64_t v10 = a1[23];
  uint64_t v11 = a1[22];
  uint64_t v9 = (void *)a1[24];
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of DialogSuppressionConfiguration?(v8, v7, v2, v3, v4, v5);
  outlined copy of BoundInputsView?(v13, v12, v11, v10, v9);
  return a1;
}

uint64_t outlined copy of DialogSuppressionConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    outlined copy of Text?(result, a2, a3, a4);
    swift_retain();
    return swift_retain();
  }
  return result;
}

unint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, Swift::UInt32 a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      int v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  int v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 248 * v10;
    return outlined assign with take of AlertStorage(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  unint64_t result;
  unint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      int v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  int v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = v16[7] + 120 * v10;
    return outlined assign with take of InspectorStorage(a1, v17);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(int a1, unsigned int a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= result && (a3 & 1) != 0)
  {
LABEL_7:
    int v16 = *v4;
    if (v14)
    {
LABEL_8:
      *(_DWORD *)(v16[7] + 4 * v10) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v15 >= result && (a3 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v17 & 1))
  {
LABEL_15:
    type metadata accessor for AGAttribute(0);
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  int v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  return specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

uint64_t AnySource.makeReusable(indirectMap:)()
{
  uint64_t v1 = v0;
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x1E4F4E7A0])
  {
    unsigned int v3 = result;
    if (*(void *)(IndirectAttributeMap.map.getter() + 16)
      && (specialized __RawDictionaryStorage.find<A>(_:)(v3), (v4 & 1) != 0))
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v5 = (void *)IndirectAttributeMap.subgraph.getter();
      AGGraphClearUpdate();
      id v6 = (id)AGSubgraphGetCurrent();
      AGSubgraphSetCurrent();
      Indirectint Attribute = AGGraphCreateIndirectAttribute();
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
      uint64_t v8 = (void (*)(unsigned char *, void))IndirectAttributeMap.map.modify();
      unint64_t v10 = v9;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v12 = *v10;
      *unint64_t v10 = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(IndirectAttribute, v3, isUniquelyReferenced_nonNull_native);
      *unint64_t v10 = v12;
      swift_bridgeObjectRelease();
      v8(v13, 0);
    }
    uint64_t result = AGCreateWeakAttribute();
    *(void *)(v1 + 16) = result;
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(int a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned int a1)
{
  uint64_t v3 = MEMORY[0x18C118330](*(void *)(v1 + 40), a1, 4);

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, int a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 4 * result;
  *(_DWORD *)(a4[6] + v4) = a2;
  *(_DWORD *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<AGAttribute, AGAttribute>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<AGAttribute, AGAttribute>)
  {
    type metadata accessor for AGAttribute(255);
    lazy protocol witness table accessor for type TabViewCustomization and conformance TabViewCustomization((unint64_t *)&lazy protocol witness table cache variable for type AGAttribute and conformance AGAttribute, type metadata accessor for AGAttribute);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AGAttribute, AGAttribute>);
    }
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(Swift::UInt32 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, int a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  uint64_t v4 = a4[7] + 248 * result;
  long long v5 = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(v4 + 192) = *(_OWORD *)(a3 + 192);
  *(_OWORD *)(v4 + 208) = v5;
  *(_OWORD *)(v4 + 224) = *(_OWORD *)(a3 + 224);
  *(void *)(v4 + 240) = *(void *)(a3 + 240);
  long long v6 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v4 + 128) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(v4 + 144) = v6;
  long long v7 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(v4 + 160) = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(v4 + 176) = v7;
  long long v8 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v4 + 80) = v8;
  long long v9 = *(_OWORD *)(a3 + 112);
  *(_OWORD *)(v4 + 96) = *(_OWORD *)(a3 + 96);
  *(_OWORD *)(v4 + 112) = v9;
  long long v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v10;
  long long v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 48) = v11;
  uint64_t v12 = a4[2];
  BOOL v13 = __OFADD__(v12, 1);
  uint64_t v14 = v12 + 1;
  if (v13) {
    __break(1u);
  }
  else {
    a4[2] = v14;
  }
  return result;
}

{
  uint64_t v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  a4[(result >> 6) + 8] |= 1 << result;
  *(_DWORD *)(a4[6] + 4 * result) = a2;
  uint64_t v4 = a4[7] + 120 * result;
  long long v5 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v5;
  long long v6 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 48) = v6;
  *(void *)(v4 + 112) = *(void *)(a3 + 112);
  long long v7 = *(_OWORD *)(a3 + 96);
  long long v8 = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(v4 + 80) = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(v4 + 96) = v7;
  *(_OWORD *)(v4 + 64) = v8;
  long long v9 = a4[2];
  long long v10 = __OFADD__(v9, 1);
  long long v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a4[2] = v11;
  }
  return result;
}

void *outlined release of AlertStorage(void *a1)
{
  uint64_t v2 = a1[15];
  uint64_t v7 = a1[14];
  uint64_t v8 = a1[13];
  uint64_t v3 = a1[16];
  uint64_t v4 = a1[17];
  uint64_t v5 = a1[18];
  uint64_t v12 = a1[21];
  uint64_t v13 = a1[20];
  uint64_t v10 = a1[23];
  uint64_t v11 = a1[22];
  long long v9 = (void *)a1[24];
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of DialogSuppressionConfiguration?(v8, v7, v2, v3, v4, v5);
  outlined consume of BoundInputsView?(v13, v12, v11, v10, v9);
  return a1;
}

uint64_t outlined consume of BoundInputsView?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (result)
  {

    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of DialogSuppressionConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a6)
  {
    outlined consume of Text?(result, a2, a3, a4);
    swift_release();
    return swift_release();
  }
  return result;
}

unint64_t initializeWithCopy for AlertModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v5 + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)(v5 + 16) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(unsigned char *)(v5 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v7 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  uint64_t v8 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
  char v9 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v7, v8, v9);
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v8;
  *(unsigned char *)(v5 + 48) = v9;
  *(void *)(v5 + 56) = *(void *)(v6 + 56);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  uint64_t v12 = *(void *)(v10 - 8) + 16;
  uint64_t v13 = *(unsigned __int8 *)(*(void *)(v10 - 8) + 80);
  uint64_t v14 = (v13 + 64 + v5) & ~v13;
  uint64_t v15 = (v13 + 64 + v6) & ~v13;
  swift_bridgeObjectRetain();
  v11(v14, v15, v10);
  uint64_t v16 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v17 = v16 + 16;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = *(void *)(v12 + 48) + v18;
  uint64_t v20 = (v19 + v14) & ~v18;
  uint64_t v21 = (v19 + v15) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 16))(v20, v21);
  uint64_t v22 = *(void *)(v17 + 48) + 7;
  unint64_t v23 = (v22 + v20) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v22 + v21) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v24 < 0xFFFFFFFFuLL)
  {
    long long v28 = *(_OWORD *)(v24 + 16);
    *(_OWORD *)unint64_t v23 = *(_OWORD *)v24;
    *(_OWORD *)(v23 + 16) = v28;
    long long v29 = *(_OWORD *)(v24 + 32);
    long long v30 = *(_OWORD *)(v24 + 48);
    long long v31 = *(_OWORD *)(v24 + 64);
    *(void *)(v23 + 80) = *(void *)(v24 + 80);
    *(_OWORD *)(v23 + 48) = v30;
    *(_OWORD *)(v23 + 64) = v31;
    *(_OWORD *)(v23 + 32) = v29;
  }
  else
  {
    uint64_t v25 = *(void *)(v24 + 8);
    *(void *)unint64_t v23 = *(void *)v24;
    *(void *)(v23 + 8) = v25;
    *(_DWORD *)(v23 + 16) = *(_DWORD *)(v24 + 16);
    *(void *)(v23 + 24) = *(void *)(v24 + 24);
    char v26 = *(void **)(v24 + 32);
    *(void *)(v23 + 32) = v26;
    *(void *)(v23 + 40) = *(void *)(v24 + 40);
    *(_DWORD *)(v23 + 48) = *(_DWORD *)(v24 + 48);
    *(void *)(v23 + 56) = *(void *)(v24 + 56);
    *(_DWORD *)(v23 + 64) = *(_DWORD *)(v24 + 64);
    *(_DWORD *)(v23 + 68) = *(_DWORD *)(v24 + 68);
    *(_DWORD *)(v23 + 72) = *(_DWORD *)(v24 + 72);
    *(_DWORD *)(v23 + 76) = *(_DWORD *)(v24 + 76);
    *(void *)(v23 + 80) = *(void *)(v24 + 80);
    id v27 = v26;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  *(unsigned char *)(v23 + 88) = *(unsigned char *)(v24 + 88);
  return a1;
}

uint64_t MakeAlertStorage.resolveTitle()(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 32);
  long long v33 = *(_OWORD *)(a1 + 16);
  long long v34 = v2;
  uint64_t v22 = type metadata accessor for AlertModifier();
  uint64_t v3 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  unint64_t v5 = (char *)&v22 - v4;
  uint64_t v6 = *((void *)v1 + 5);
  uint64_t v25 = *((void *)v1 + 4);
  long long v7 = v1[1];
  long long v23 = *v1;
  long long v24 = v7;
  long long v8 = v1[7];
  v32[0] = v1[8];
  *(_OWORD *)((char *)v32 + 9) = *(long long *)((char *)v1 + 137);
  long long v9 = v1[4];
  long long v27 = v1[3];
  long long v28 = v9;
  long long v10 = v1[5];
  long long v30 = v1[6];
  long long v31 = v8;
  long long v29 = v10;
  PropertyList.Tracker.reset()();
  long long v11 = v1[1];
  long long v33 = *v1;
  long long v34 = v11;
  long long v12 = v1[7];
  long long v13 = v1[8];
  long long v14 = v1[5];
  long long v40 = v1[6];
  long long v41 = v12;
  v42[0] = v13;
  *(_OWORD *)((char *)v42 + 9) = *(long long *)((char *)v1 + 137);
  long long v15 = v1[4];
  long long v37 = v1[3];
  long long v38 = v15;
  uint64_t v35 = *((void *)v1 + 4);
  uint64_t v36 = v6;
  long long v39 = v14;
  MakeConfirmationDialog.environment.getter(&v43);
  swift_release();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  long long v16 = v33;
  uint64_t v26 = v6;
  MakeAlertStorage.modifier.getter((uint64_t)v5);
  uint64_t v17 = *((void *)v5 + 4);
  uint64_t v18 = *((void *)v5 + 5);
  LOBYTE(v6) = v5[48];
  outlined copy of Text.Storage(v17, v18, v6);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  swift_bridgeObjectRetain();
  v19(v5, v22);
  long long v33 = v16;
  long long v23 = 0uLL;
  uint64_t v43 = 0;
  uint64_t v20 = Text.resolveString(in:with:idiom:)();
  outlined consume of Text.Storage(v17, v18, v6);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v20;
}

uint64_t destroy for AlertModifier(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = a1 & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  outlined consume of Text.Storage(*(void *)(v3 + 32), *(void *)(v3 + 40), *(unsigned char *)(v3 + 48));
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v4 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v8 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v9 = v8 + 8;
  unint64_t v10 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t))(v8 + 8))(v10);
  unint64_t v12 = (*(void *)(v9 + 56) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v12 >= 0xFFFFFFFFuLL)
  {

    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t MakeAlertStorage.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AlertModifier();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t $defer #1 <A, B>() in MakeAlertStorage.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, char a9)
{
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = a4;
  *(void *)(a1 + 72) = a5;
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a1 + 80) = a6;
  *(void *)(a1 + 88) = a7;
  *(unsigned char *)(a1 + 96) = a8 & 1;
  *(unsigned char *)(a1 + 97) = a9;
  return result;
}

__n128 __swift_memcpy144_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

unsigned char *partial apply for closure #2 in CollectionViewCellModifier.resolvedBody(content:isInSidebar:)(unsigned char *result)
{
  if (*(unsigned char *)(v1 + 16) == 1) {
    *__n128 result = 2;
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.pixelLength : EnvironmentValues@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.pixelLength.getter();
  *a1 = v3;
  return result;
}

ValueMetadata *type metadata accessor for PlainButtonStyle()
{
  return &type metadata for PlainButtonStyle;
}

uint64_t objectdestroy_10Tm()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t objectdestroy_10Tm_0()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_10Tm_1()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v2 = (int *)(type metadata accessor for WrappedButtonStyleBody() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v3, v1);
  uint64_t v4 = v2[11];
  unint64_t v5 = v0 + v3 + v4 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v5, *(void *)(v5 + 8), *(unsigned char *)(v5 + 16));

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(_WORD *)(v5 + 32), *(unsigned char *)(v5 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 56), *(void *)(v5 + 64), *(_WORD *)(v5 + 72), *(unsigned char *)(v5 + 74));
  unint64_t v7 = v5 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v8 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
LABEL_8:

  return swift_deallocObject();
}

uint64_t objectdestroy_10Tm_2()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

double protocol witness for static View._makeView(view:inputs:) in conformance CustomProgressView<A, B>@<D0>(int *a1@<X0>, long long *a2@<X1>, uint64_t *a3@<X2>, double *a4@<X8>)
{
  return static CustomProgressView._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t ShadowRowCollection.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t partial apply for implicit closure #1 in static ViewModifier._makeAccessibilityHitTestingModifier(modifier:inputs:outputs:)()
{
  return implicit closure #1 in static ViewModifier._makeAccessibilityHitTestingModifier(modifier:inputs:outputs:)();
}

ValueMetadata *type metadata accessor for WithCurrentHostingControllerAction()
{
  return &type metadata for WithCurrentHostingControllerAction;
}

uint64_t initializeWithCopy for LazyHGrid(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  uint64_t v5 = *(void *)(a3 + 16);
  long long v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = (v7 + 32 + a1) & ~v7;
  uint64_t v9 = (v7 + 32 + a2) & ~v7;
  swift_bridgeObjectRetain();
  v6(v8, v9, v5);
  return a1;
}

void partial apply for closure #1 in UIScrollView.updateRefreshControl(_:)()
{
  closure #1 in UIScrollView.updateRefreshControl(_:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t objectdestroy_19Tm()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void *destructiveProjectEnumData for SensoryFeedback.FeedbackType(void *result)
{
  *result &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in SceneBridge()
{
  return MEMORY[0x1E4F1ABE8];
}

ValueMetadata *type metadata accessor for ViewIdentity()
{
  return &type metadata for ViewIdentity;
}

uint64_t getEnumTagSinglePayload for UpdateViewDestinationRequest(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 160)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *(void *)(a1 + 128) >> 1;
  int v4 = -2 - v3;
  if (-2 - (int)v3 < 0) {
    int v4 = -1;
  }
  if (v3 <= 0x80000000) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

void *protocol witness for BidirectionalCollection.formIndex(before:) in conformance FetchedResults<A>(void *a1, uint64_t a2, uint64_t a3, void *(*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t, void))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t result = a4(&v9, a1, a2, WitnessTable, MEMORY[0x1E4FBB590]);
  *a1 = v9;
  return result;
}

uint64_t initializeWithCopy for ListSeparatorConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t destroy for MenuSectionStyle(uint64_t a1)
{
  return outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

void UIHostingViewBase.updateRenderContext(_:)()
{
  uint64_t v1 = (void *)MEMORY[0x18C119DF0](v0 + 16);
  if (v1)
  {
    id v5 = v1;
    id v2 = objc_msgSend(v1, sel_window);
    if (v2)
    {
      uint64_t v3 = v2;
      id v4 = objc_msgSend(v2, sel_screen);

      objc_msgSend(v4, sel_scale);
    }
    ViewGraphRenderContext.contentsScale.setter();
  }
}

ValueMetadata *type metadata accessor for AccessibilityTechnologies()
{
  return &type metadata for AccessibilityTechnologies;
}

uint64_t OptionalViewAlias.OptionalSourceBox.update(property:phase:)(BOOL *a1)
{
  char v2 = *(unsigned char *)AGGraphGetValue();
  uint64_t result = v3 & 1;
  *a1 = (v2 & 1) == 0;
  return result;
}

uint64_t storeEnumTagSinglePayload for ArchivableAppIntentToggle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

double protocol witness for static PreferenceKey.defaultValue.getter in conformance AnyShareConfiguration.Key@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 64) = 1;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  return result;
}

uint64_t protocol witness for static EnvironmentalModifier._requiresMainThread.getter in conformance CoreSheetPresentationModifier<A>()
{
  return MEMORY[0x1F40FFCB0]();
}

void partial apply for closure #1 in closure #1 in closure #1 in _UIHostingView.beginTransaction()()
{
  closure #1 in closure #1 in closure #1 in _UIHostingView.beginTransaction()(*(void *)(v0 + 32));
}

void closure #1 in closure #1 in closure #1 in _UIHostingView.beginTransaction()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    char v3 = (void *)v2;
    type metadata accessor for _UIHostingView();
    swift_getWitnessTable();
    ViewGraphDelegate.updateGraph<A>(body:)();
  }
}

__n128 __swift_memcpy90_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NavigationStackViewSource(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void @objc _UIHostingView.swiftui_insertRenderedSubview(_:at:)(void *a1, uint64_t a2, void *a3, Swift::Int a4)
{
  long long v6 = a3;
  id v7 = a1;
  _UIHostingView.swiftui_insertRenderedSubview(_:at:)(v6, a4);
}

Swift::Void __swiftcall _UIHostingView.swiftui_insertRenderedSubview(_:at:)(UIView *_, Swift::Int at)
{
  unsigned int v3 = (void *)MEMORY[0x1E4FBC8C8];
  *((unsigned char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x1D8)) = 1;
  objc_msgSend(v2, sel_insertSubview_atIndex_, _, at);
  *((unsigned char *)v2 + *(void *)((*v3 & *v2) + 0x1D8)) = 0;
}

ValueMetadata *type metadata accessor for SelectionShapeStyle()
{
  return &type metadata for SelectionShapeStyle;
}

uint64_t partial apply for closure #1 in SizeFittingLayoutComputer.Engine.explicitAlignment(_:at:)()
{
  return closure #1 in SizeFittingLayoutComputer.Engine.explicitAlignment(_:at:)();
}

uint64_t LabelStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v8 = MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v13 - v9;
  (*(void (**)(double))(v2 + 24))(v8);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v6);
  long long v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v11)(v10, AssociatedTypeWitness);
}

uint64_t destroy for ListLabelStyle.Implementation(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  outlined consume of Environment<CGFloat?>.Content(*(void *)(a1 + 64), *(unsigned __int8 *)(a1 + 72), *(unsigned char *)(a1 + 73));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 80), *(unsigned char *)(a1 + 88));
  uint64_t v2 = *(void *)(a1 + 96);
  char v3 = *(unsigned char *)(a1 + 105);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 104);

  return outlined consume of Environment<ListItemTint?>.Content(v2, v4, v3);
}

uint64_t protocol witness for LabelStyle.makeBody(configuration:) in conformance DefaultLabelStyle@<X0>(uint64_t a1@<X8>)
{
  return DefaultLabelStyle.makeBody(configuration:)(a1);
}

uint64_t DefaultLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = KeyPath;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = result;
  *(unsigned char *)(a1 + 56) = 0;
  return result;
}

uint64_t assignWithCopy for AccessibilityScrollableContextModifier(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1);
    int v4 = *(unsigned __int8 *)(a2 + 70);
    if (v4 == 2)
    {
      uint64_t v5 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v5;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
    }
    else if (v4 == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
    }
    else
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      int v7 = *(_DWORD *)(a2 + 64);
      *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
      *(_DWORD *)(a1 + 64) = v7;
    }
    *(unsigned char *)(a1 + 70) = v4;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithTake for CollectionViewCellModifier(uint64_t a1, uint64_t *a2)
{
  int v4 = a2 + 33;
  uint64_t v5 = *a2;
  char v6 = *((unsigned char *)a2 + 8);
  uint64_t v7 = *(void *)a1;
  char v8 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v6;
  outlined consume of Environment<Bool>.Content(v7, v8);
  char v9 = *((unsigned char *)a2 + 24);
  uint64_t v10 = *(void *)(a1 + 16);
  char v11 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v9;
  outlined consume of Environment<Bool>.Content(v10, v11);
  char v12 = *((unsigned char *)a2 + 40);
  char v13 = *((unsigned char *)a2 + 41);
  uint64_t v14 = *(void *)(a1 + 32);
  char v15 = *(unsigned char *)(a1 + 41);
  *(void *)(a1 + 32) = a2[4];
  uint64_t v16 = *(unsigned __int8 *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v12;
  *(unsigned char *)(a1 + 41) = v13;
  outlined consume of Environment<ListItemTint?>.Content(v14, v16, v15);
  char v17 = *((unsigned char *)a2 + 80);
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v21 = *(void *)(a1 + 72);
  char v22 = *(unsigned char *)(a1 + 80);
  long long v23 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 64) = v23;
  *(unsigned char *)(a1 + 80) = v17;
  outlined consume of Environment<HoverEffectContext?>.Content(v18, v19, v20, v21, v22);
  char v24 = *((unsigned char *)a2 + 168);
  char v25 = *((unsigned char *)a2 + 169);
  uint64_t v26 = *(void *)(a1 + 88);
  uint64_t v27 = *(void *)(a1 + 96);
  uint64_t v28 = *(void *)(a1 + 104);
  uint64_t v29 = *(void *)(a1 + 112);
  uint64_t v30 = *(void *)(a1 + 120);
  uint64_t v31 = *(void *)(a1 + 128);
  uint64_t v32 = *(void *)(a1 + 136);
  uint64_t v33 = *(void *)(a1 + 144);
  uint64_t v34 = *(void *)(a1 + 152);
  uint64_t v35 = *(void *)(a1 + 160);
  char v36 = *(unsigned char *)(a1 + 168);
  char v37 = *(unsigned char *)(a1 + 169);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 19);
  *(unsigned char *)(a1 + 168) = v24;
  *(unsigned char *)(a1 + 169) = v25;
  outlined consume of Environment<ListContentStyling>.Content(v26, v27, v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
  char v38 = *((unsigned char *)a2 + 192);
  uint64_t v39 = *(void *)(a1 + 176);
  uint64_t v40 = *(void *)(a1 + 184);
  char v41 = *(unsigned char *)(a1 + 192);
  *(_OWORD *)(a1 + 176) = *((_OWORD *)a2 + 11);
  *(unsigned char *)(a1 + 192) = v38;
  outlined consume of Environment<CGFloat?>.Content(v39, v40, v41);
  *(unsigned char *)(a1 + 193) = *((unsigned char *)a2 + 193);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  *(unsigned char *)(a1 + 232) = *((unsigned char *)a2 + 232);
  *(void *)(a1 + 240) = a2[30];
  *(unsigned char *)(a1 + 248) = *((unsigned char *)a2 + 248);
  if (*(void *)(a1 + 256) == 1) {
    goto LABEL_4;
  }
  uint64_t v42 = a2[32];
  if (v42 == 1)
  {
    outlined destroy of ListItemTint(a1 + 256);
LABEL_4:
    *(void *)(a1 + 256) = a2[32];
    *(unsigned char *)(a1 + 264) = *((unsigned char *)a2 + 264);
    goto LABEL_6;
  }
  *(void *)(a1 + 256) = v42;
  swift_release();
  *(unsigned char *)(a1 + 264) = *v4;
LABEL_6:
  *(unsigned char *)(a1 + 265) = v4[1];
  *(void *)(a1 + 272) = a2[34];
  if ((uint64_t *)a1 != a2)
  {
    outlined destroy of AccessibilityScrollableContext(a1 + 280);
    long long v43 = *(_OWORD *)(a2 + 41);
    *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 39);
    *(_OWORD *)(a1 + 328) = v43;
    *(void *)(a1 + 343) = *(uint64_t *)((char *)a2 + 343);
    long long v44 = *(_OWORD *)(a2 + 37);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
    *(_OWORD *)(a1 + 296) = v44;
  }
  *(unsigned char *)(a1 + 351) = *((unsigned char *)a2 + 351);
  return a1;
}

uint64_t outlined destroy of AccessibilityScrollableContext(uint64_t a1)
{
  return a1;
}

uint64_t destroy for AccessibilityScrollableContext(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 70);
  if (v1 >= 3) {
    unsigned int v1 = *(_DWORD *)a1 + 3;
  }
  if (v1 != 1) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }

  return swift_release();
}

uint64_t CollectionViewCellModifier.resolvedBody(content:isInSidebar:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v2 = v1;
  char v4 = v3;
  uint64_t v79 = v5;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnvironment>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnvironment>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, (void (*)(uint64_t))type metadata accessor for ContentConfigurationBasedRootEnvironment);
  uint64_t v77 = v6;
  MEMORY[0x1F4188790](v6);
  char v78 = (char *)&v72 - v7;
  int v8 = *(unsigned __int8 *)(v2 + 193);
  outlined init with copy of CollectionViewCellModifier(v2, (uint64_t)v109);
  if (v8 != 1)
  {
    outlined destroy of CollectionViewCellModifier((uint64_t)v109);
    uint64_t v10 = (double *)(v2 + 200);
    char v11 = (double *)(v2 + 208);
    char v12 = (double *)(v2 + 216);
    char v13 = (double *)(v2 + 224);
    if ((*(unsigned char *)(v2 + 232) & 1) == 0)
    {
      int v14 = 0;
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  int v9 = BYTE1(v109[33]);
  outlined init with copy of CollectionViewCellModifier((uint64_t)v109, (uint64_t)v107);
  if (v9 == 1)
  {
    outlined destroy of CollectionViewCellModifier((uint64_t)v107);
    outlined destroy of CollectionViewCellModifier((uint64_t)v109);
    if ((v4 & 1) == 0)
    {
      uint64_t v10 = (double *)(v2 + 200);
      char v11 = (double *)(v2 + 208);
      char v12 = (double *)(v2 + 216);
      char v13 = (double *)(v2 + 224);
      if ((*(unsigned char *)(v2 + 232) & 1) == 0)
      {
        int v14 = 1;
LABEL_14:
        double v20 = *v13;
        double v19 = *v12;
        double v18 = *v11;
        double v17 = *v10;
        goto LABEL_16;
      }
LABEL_13:
      v127[2] = *(_OWORD *)(v2 + 120);
      v127[3] = *(_OWORD *)(v2 + 136);
      v127[4] = *(_OWORD *)(v2 + 152);
      __int16 v128 = *(_WORD *)(v2 + 168);
      v127[0] = *(_OWORD *)(v2 + 88);
      v127[1] = *(_OWORD *)(v2 + 104);
      outlined retain of Environment<ListContentStyling>((uint64_t)v127, (void (*)(void, void, void, void, void, void, void, void, void, void, _WORD))outlined copy of Environment<ListContentStyling>.Content);
      specialized Environment.wrappedValue.getter((uint64_t)v109);
      outlined retain of Environment<ListContentStyling>((uint64_t)v127, (void (*)(void, void, void, void, void, void, void, void, void, void, _WORD))outlined consume of Environment<ListContentStyling>.Content);
      double v17 = *(double *)v109;
      double v18 = *(double *)&v109[1];
      double v19 = *(double *)&v109[2];
      double v20 = *(double *)&v109[3];
      uint64_t v21 = v109[9];
      swift_release();
      swift_release();
      outlined consume of Transaction?(v21);
      int v14 = 1;
      goto LABEL_16;
    }
    goto LABEL_10;
  }
  uint64_t v15 = v107[0];
  char v16 = v107[1];
  outlined copy of Environment<Bool>.Content(v107[0], v107[1]);
  specialized Environment.wrappedValue.getter(v15, v16, v104);
  outlined consume of Environment<Bool>.Content(v15, v16);
  int v14 = v104[0];
  outlined destroy of CollectionViewCellModifier((uint64_t)v107);
  outlined destroy of CollectionViewCellModifier((uint64_t)v109);
  if (v14 == 1 && (v4 & 1) != 0) {
LABEL_10:
  }
    int v14 = static SemanticFeature.isEnabled.getter() ^ 1;
  uint64_t v10 = (double *)(v2 + 200);
  char v11 = (double *)(v2 + 208);
  char v12 = (double *)(v2 + 216);
  char v13 = (double *)(v2 + 224);
  if ((*(unsigned char *)(v2 + 232) & 1) == 0) {
    goto LABEL_14;
  }
  if (v14) {
    goto LABEL_13;
  }
LABEL_15:
  long long v22 = *(_OWORD *)(v2 + 64);
  v129[0] = *(_OWORD *)(v2 + 48);
  v129[1] = v22;
  char v130 = *(unsigned char *)(v2 + 80);
  outlined init with take of Environment<EdgeInsets>.Content((uint64_t)v129, (uint64_t)v127, (uint64_t)&lazy cache variable for type metadata for Environment<EdgeInsets>.Content, MEMORY[0x1E4F3F360], MEMORY[0x1E4F3F4D8], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for StyleContextAcceptsPredicate<SidebarStyleContext>);
  outlined retain of Environment<EdgeInsets>.Content((uint64_t)v127, (void (*)(void, void, void, void, void))outlined copy of Environment<HoverEffectContext?>.Content);
  double v17 = specialized Environment.wrappedValue.getter();
  double v18 = v23;
  double v19 = v24;
  double v20 = v25;
  outlined retain of Environment<EdgeInsets>.Content((uint64_t)v129, (void (*)(void, void, void, void, void))outlined consume of Environment<HoverEffectContext?>.Content);
  int v14 = 0;
LABEL_16:
  double v26 = v18 + *(double *)(v2 + 240);
  *(void *)&long long v76 = static VerticalAlignment.firstTextBaseline.getter();
  closure #1 in CollectionViewCellModifier.resolvedBody(content:isInSidebar:)(v2, (uint64_t)v110, v17, v26, v19, v20);
  uint64_t KeyPath = swift_getKeyPath();
  char v27 = *(unsigned char *)(v2 + 232);
  LODWORD(v80) = v14;
  if (v27)
  {
    if (v14)
    {
      v123[2] = *(_OWORD *)(v2 + 120);
      v123[3] = *(_OWORD *)(v2 + 136);
      v123[4] = *(_OWORD *)(v2 + 152);
      __int16 v124 = *(_WORD *)(v2 + 168);
      v123[0] = *(_OWORD *)(v2 + 88);
      v123[1] = *(_OWORD *)(v2 + 104);
      outlined retain of Environment<ListContentStyling>((uint64_t)v123, (void (*)(void, void, void, void, void, void, void, void, void, void, _WORD))outlined copy of Environment<ListContentStyling>.Content);
      specialized Environment.wrappedValue.getter((uint64_t)v109);
      outlined retain of Environment<ListContentStyling>((uint64_t)v123, (void (*)(void, void, void, void, void, void, void, void, void, void, _WORD))outlined consume of Environment<ListContentStyling>.Content);
      double v28 = *(double *)v109;
      double v29 = *(double *)&v109[1];
      double v30 = *(double *)&v109[2];
      double v31 = *(double *)&v109[3];
      uint64_t v32 = v109[9];
      swift_release();
      swift_release();
      outlined consume of Transaction?(v32);
    }
    else
    {
      long long v33 = *(_OWORD *)(v2 + 64);
      v125[0] = *(_OWORD *)(v2 + 48);
      v125[1] = v33;
      char v126 = *(unsigned char *)(v2 + 80);
      outlined init with take of Environment<EdgeInsets>.Content((uint64_t)v125, (uint64_t)v123, (uint64_t)&lazy cache variable for type metadata for Environment<EdgeInsets>.Content, MEMORY[0x1E4F3F360], MEMORY[0x1E4F3F4D8], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for StyleContextAcceptsPredicate<SidebarStyleContext>);
      outlined retain of Environment<EdgeInsets>.Content((uint64_t)v123, (void (*)(void, void, void, void, void))outlined copy of Environment<HoverEffectContext?>.Content);
      double v28 = specialized Environment.wrappedValue.getter();
      double v29 = v34;
      double v30 = v35;
      double v31 = v36;
      outlined retain of Environment<EdgeInsets>.Content((uint64_t)v125, (void (*)(void, void, void, void, void))outlined consume of Environment<HoverEffectContext?>.Content);
    }
  }
  else
  {
    double v31 = *v13;
    double v30 = *v12;
    double v29 = *v11;
    double v28 = *v10;
  }
  *(_OWORD *)&v92[167] = v110[10];
  *(_OWORD *)&v92[183] = v110[11];
  *(_OWORD *)&v92[199] = v110[12];
  *(_OWORD *)&v92[103] = v110[6];
  *(_OWORD *)&v92[119] = v110[7];
  *(_OWORD *)&v92[135] = v110[8];
  *(_OWORD *)&v92[151] = v110[9];
  *(_OWORD *)&v92[39] = v110[2];
  *(_OWORD *)&v92[55] = v110[3];
  *(_OWORD *)&v92[71] = v110[4];
  *(_OWORD *)&v92[87] = v110[5];
  *(_OWORD *)&v92[7] = v110[0];
  char v93 = 0;
  v92[215] = v111;
  *(_OWORD *)&v92[23] = v110[1];
  char v37 = 0;
  uint64_t v38 = swift_getKeyPath();
  uint64_t v39 = *(void *)(v2 + 256);
  char v40 = *(unsigned char *)(v2 + 264);
  if (v39 == 1)
  {
    int v73 = 0;
    uint64_t v74 = v38;
    if (v80)
    {
      v121[2] = *(_OWORD *)(v2 + 120);
      v121[3] = *(_OWORD *)(v2 + 136);
      v121[4] = *(_OWORD *)(v2 + 152);
      __int16 v122 = *(_WORD *)(v2 + 168);
      v121[0] = *(_OWORD *)(v2 + 88);
      v121[1] = *(_OWORD *)(v2 + 104);
      outlined retain of Environment<ListContentStyling>((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, _WORD))outlined copy of Environment<ListContentStyling>.Content);
      specialized Environment.wrappedValue.getter((uint64_t)v109);
      outlined retain of Environment<ListContentStyling>((uint64_t)v121, (void (*)(void, void, void, void, void, void, void, void, void, void, _WORD))outlined consume of Environment<ListContentStyling>.Content);
      uint64_t v41 = v109[9];
      char v42 = v109[10];
      outlined copy of Transaction?(v109[9]);
      swift_release();
      swift_release();
      outlined consume of Transaction?(v41);
      uint64_t v90 = v41;
      char v91 = v42;
    }
    else
    {
      uint64_t v43 = *(void *)(v2 + 32);
      uint64_t v44 = *(unsigned __int8 *)(v2 + 40);
      int v45 = *(unsigned __int8 *)(v2 + 41);
      outlined copy of Environment<ListItemTint?>.Content(v43, v44, *(unsigned char *)(v2 + 41));
      specialized Environment.wrappedValue.getter(v43, v44 | (v45 << 8), (uint64_t)&v90);
      outlined consume of Environment<ListItemTint?>.Content(v43, v44, v45);
      uint64_t v41 = v90;
      char v42 = v91;
    }
    uint64_t v38 = v74;
    char v37 = v73;
  }
  else
  {
    uint64_t v90 = *(void *)(v2 + 256);
    char v91 = v40;
    char v42 = v40;
    uint64_t v41 = v39;
  }
  *(_OWORD *)((char *)&v89[22] + 1) = *(_OWORD *)&v92[160];
  *(_OWORD *)((char *)&v89[24] + 1) = *(_OWORD *)&v92[176];
  *(_OWORD *)((char *)&v89[26] + 1) = *(_OWORD *)&v92[192];
  *(_OWORD *)((char *)&v89[14] + 1) = *(_OWORD *)&v92[96];
  *(_OWORD *)((char *)&v89[16] + 1) = *(_OWORD *)&v92[112];
  *(_OWORD *)((char *)&v89[18] + 1) = *(_OWORD *)&v92[128];
  *(_OWORD *)((char *)&v89[20] + 1) = *(_OWORD *)&v92[144];
  *(_OWORD *)((char *)&v89[6] + 1) = *(_OWORD *)&v92[32];
  *(_OWORD *)((char *)&v89[8] + 1) = *(_OWORD *)&v92[48];
  *(_OWORD *)((char *)&v89[10] + 1) = *(_OWORD *)&v92[64];
  *(_OWORD *)((char *)&v89[12] + 1) = *(_OWORD *)&v92[80];
  *(_OWORD *)((char *)&v89[2] + 1) = *(_OWORD *)v92;
  v89[0] = v76;
  v89[1] = 0;
  LOBYTE(v89[2]) = v37;
  *(void *)((char *)&v89[28] + 1) = *(void *)&v92[208];
  *(_OWORD *)((char *)&v89[4] + 1) = *(_OWORD *)&v92[16];
  v89[30] = KeyPath;
  *(double *)&v89[31] = v28;
  *(double *)&v89[32] = v29;
  *(double *)&v89[33] = v30;
  *(double *)&v89[34] = v31;
  v89[35] = v38;
  v89[36] = v41;
  LOBYTE(v89[37]) = v42;
  unint64_t v46 = *(void *)(v2 + 16);
  char v47 = *(unsigned char *)(v2 + 24);
  outlined copy of Transaction?(v39);
  outlined copy of Environment<Bool>.Content(v46, v47);
  char v48 = (unsigned __int16)specialized Environment.wrappedValue.getter(v46, v47) >> 8;
  outlined consume of Environment<Bool>.Content(v46, v47);
  outlined init with copy of AccessibilityScrollableContext(v2 + 280, (uint64_t)v105);
  v104[0] = v48 & 1;
  outlined init with copy of AccessibilityScrollableContext((uint64_t)v105, (uint64_t)v109);
  outlined init with copy of AccessibilityScrollableContextModifier((uint64_t)v109, (uint64_t)v108);
  memcpy(v107, v89, 0x129uLL);
  outlined retain of ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>((uint64_t)v89);
  outlined destroy of AccessibilityScrollableContextModifier((uint64_t)v109);
  uint64_t v49 = 4;
  if (!v104[0]) {
    uint64_t v49 = 0;
  }
  v109[0] = v49;
  AccessibilityNullableOptionSet<>.init(adding:)();
  specialized View.accessibility<A>(_:_:isEnabled:)(v102[0], v102[1], 1, (uint64_t)v109);
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>((uint64_t)v107, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>);
  memcpy(v94, v109, sizeof(v94));
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>((uint64_t)v104, (uint64_t (*)(void))type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>>);
  outlined release of ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>((uint64_t)v89);
  static Alignment.center.getter();
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>((uint64_t)v94, (uint64_t)v95, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>);
  long long v99 = v116;
  long long v100 = v117;
  long long v101 = v118;
  *(_OWORD *)&v95[392] = v112;
  long long v96 = v113;
  long long v97 = v114;
  long long v98 = v115;
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>((uint64_t)v94, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>);
  uint64_t v50 = swift_getKeyPath();
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>((uint64_t)v95, (uint64_t)v102, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>);
  v102[63] = v50;
  char v103 = 1;
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>((uint64_t)v95, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>);
  uint64_t v51 = swift_getKeyPath();
  unint64_t v52 = *(void *)(v2 + 16);
  char v53 = *(unsigned char *)(v2 + 24);
  outlined copy of Environment<Bool>.Content(v52, v53);
  char v54 = (unsigned __int16)specialized Environment.wrappedValue.getter(v52, v53) >> 8;
  outlined consume of Environment<Bool>.Content(v52, v53);
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>((uint64_t)v102, (uint64_t)v104, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>);
  v105[64] = v51;
  char v106 = v54 & 1;
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>((uint64_t)v102, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>);
  uint64_t v55 = swift_getKeyPath();
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>((uint64_t)v104, (uint64_t)v107, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>);
  v108[29] = v55;
  *(double *)&v108[30] = v17;
  *(double *)&v108[31] = v26;
  *(double *)&v108[32] = v19;
  *(double *)&v108[33] = v20;
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>((uint64_t)v104, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>);
  uint64_t v56 = swift_getKeyPath();
  uint64_t v57 = swift_allocObject();
  char v58 = v80 & 1;
  *(unsigned char *)(v57 + 16) = v80 & 1;
  outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>((uint64_t)v107, (uint64_t)v109, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>);
  v109[72] = v56;
  v109[73] = partial apply for closure #2 in CollectionViewCellModifier.resolvedBody(content:isInSidebar:);
  v109[74] = v57;
  outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>((uint64_t)v107, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>);
  v119[2] = *(_OWORD *)(v2 + 120);
  v119[3] = *(_OWORD *)(v2 + 136);
  v119[4] = *(_OWORD *)(v2 + 152);
  __int16 v120 = *(_WORD *)(v2 + 168);
  v119[0] = *(_OWORD *)(v2 + 88);
  v119[1] = *(_OWORD *)(v2 + 104);
  outlined retain of Environment<ListContentStyling>((uint64_t)v119, (void (*)(void, void, void, void, void, void, void, void, void, void, _WORD))outlined copy of Environment<ListContentStyling>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)v81);
  outlined retain of Environment<ListContentStyling>((uint64_t)v119, (void (*)(void, void, void, void, void, void, void, void, void, void, _WORD))outlined consume of Environment<ListContentStyling>.Content);
  long long v80 = v81[0];
  long long v76 = v81[1];
  uint64_t v59 = v82;
  uint64_t v60 = v83;
  uint64_t v61 = v84;
  char v62 = v85;
  uint64_t v63 = v86;
  uint64_t v64 = v87;
  char v65 = v88;
  uint64_t v66 = v78;
  uint64_t v67 = &v78[*(int *)(v77 + 36)];
  uint64_t v68 = &v67[*(int *)(type metadata accessor for ContentConfigurationBasedRootEnvironment() + 24)];
  uint64_t v69 = type metadata accessor for UICellConfigurationState();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v68, 1, 1, v69);
  long long v70 = v76;
  *(_OWORD *)uint64_t v67 = v80;
  *((_OWORD *)v67 + 1) = v70;
  *((void *)v67 + 4) = v59;
  *((void *)v67 + 5) = v60;
  *((void *)v67 + 6) = v61;
  v67[56] = v62;
  *((void *)v67 + 8) = v63;
  *((void *)v67 + 9) = v64;
  v67[80] = v65;
  v67[81] = v58;
  memcpy(v66, v109, 0x258uLL);
  return outlined init with take of Environment<EdgeInsets>.Content((uint64_t)v66, v79, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnvironment>, (uint64_t)type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, (uint64_t)type metadata accessor for ContentConfigurationBasedRootEnvironment, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnvironment>);
}

uint64_t outlined retain of Environment<EdgeInsets>.Content(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for AccessibilityScrollableContextModifier(uint64_t result)
{
  int v1 = *(unsigned __int8 *)(result + 70);
  if (v1 == 2)
  {
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1(result);
    goto LABEL_6;
  }
  if (v1 != 1)
  {
    if (*(unsigned char *)(result + 70)) {
      return result;
    }
    goto LABEL_4;
  }
LABEL_6:

  return swift_release();
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  if (!*a2)
  {
    a3(255);
    type metadata accessor for StyleContextAcceptsPredicate<SidebarStyleContext>(255, a4, a5, MEMORY[0x1E4F411E8]);
    unint64_t v8 = type metadata accessor for ModifiedContent();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

double specialized Environment.wrappedValue.getter()
{
  if (v0[32] == 1) {
    return *(double *)v0;
  }
  swift_retain();
  os_log_type_t v2 = static os_log_type_t.fault.getter();
  uint64_t v3 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v4 = v2;
  if (os_log_type_enabled(v3, v2))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    double v7 = *(double *)&v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x65736E4965676445, 0xEA00000000007374, (uint64_t *)&v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1872C6000, v3, v4, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v6, -1, -1);
    MEMORY[0x18C119C60](v5, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  outlined release of Environment<NavigationEventHandlers>((uint64_t)v0, (void (*)(void, void, void, void, void))outlined consume of Environment<HoverEffectContext?>.Content);
  swift_release();
  swift_release();
  return v7;
}

uint64_t outlined init with take of Environment<EdgeInsets>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t outlined retain of Environment<ListContentStyling>(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, _WORD))
{
  return a1;
}

uint64_t specialized Environment.wrappedValue.getter(unint64_t a1, char a2)
{
  if (a2)
  {
    int v8 = a1 & 1;
    uint64_t v9 = (a1 >> 8) & 1;
    uint64_t v10 = (a1 >> 16) & 1;
  }
  else
  {
    swift_retain();
    os_log_type_t v3 = static os_log_type_t.fault.getter();
    os_log_type_t v4 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v5 = v3;
    if (os_log_type_enabled(v4, v3))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v15 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6C654374694B4955, 0xEE0065746174536CLL, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v7, -1, -1);
      MEMORY[0x18C119C60](v6, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(a1, 0);
    swift_release();
    swift_release();
    int v8 = v14;
    LODWORD(v9) = BYTE1(v14);
    LODWORD(v10) = BYTE2(v14);
  }
  if (v10) {
    int v11 = 0x10000;
  }
  else {
    int v11 = 0;
  }
  if (v9) {
    int v12 = 256;
  }
  else {
    int v12 = 0;
  }
  return v12 | v8 | v11;
}

{
  uint64_t v2;
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  os_log_type_t v2 = a1;
  if (a2)
  {
    int v8 = HIDWORD(a1) & 1;
  }
  else
  {
    swift_retain();
    os_log_type_t v3 = static os_log_type_t.fault.getter();
    os_log_type_t v4 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v5 = v3;
    if (os_log_type_enabled(v4, v3))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      char v13 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      int v12 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x8000000188327FC0, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v7, -1, -1);
      MEMORY[0x18C119C60](v6, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(v2, 0);
    swift_release();
    swift_release();
    LODWORD(v2) = v12;
    LODWORD(v8) = BYTE4(v12);
  }
  uint64_t v9 = v8 == 0;
  uint64_t v10 = 0x100000000;
  if (v9) {
    uint64_t v10 = 0;
  }
  return v10 | v2;
}

uint64_t ListContentStyling.init(configuration:traitCollection:insets:minHeight:)@<X0>(char *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, void *a6@<X8>)
{
  int v84 = a5;
  uint64_t v68 = a4;
  int v73 = a6;
  uint64_t v76 = a3;
  outlined init with take of EdgeInsets?(a3, (uint64_t)v90);
  uint64_t v8 = v90[0];
  uint64_t v9 = v90[1];
  uint64_t v10 = v90[2];
  uint64_t v11 = v90[3];
  uint64_t v79 = type metadata accessor for UIListContentConfiguration.ImageProperties();
  uint64_t v78 = *(void *)(v79 - 8);
  MEMORY[0x1F4188790](v79);
  uint64_t v77 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UIListContentConfiguration();
  uint64_t v87 = *(void *)(v13 - 8);
  uint64_t v88 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v83 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  char v85 = (char *)&v67 - v16;
  uint64_t v74 = type metadata accessor for UIListContentConfiguration.TextProperties.TextTransform();
  uint64_t v17 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  double v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  long long v22 = (char *)&v67 - v21;
  uint64_t v23 = type metadata accessor for UIListContentConfiguration.TextProperties();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  double v26 = (char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  double v29 = (char *)&v67 - v28;
  UIListContentConfiguration.textProperties.getter();
  uint64_t v86 = v29;
  double v30 = (void *)UIListContentConfiguration.TextProperties.font.getter();
  id v31 = objc_msgSend(v30, sel__fontAdjustedForContentSizeCategoryCompatibleWithTraitCollection_, a2);

  long long v80 = a1;
  UIListContentConfiguration.textProperties.getter();
  uint64_t v32 = (void *)UIListContentConfiguration.TextProperties.color.getter();
  long long v33 = *(void (**)(char *, uint64_t))(v24 + 8);
  uint64_t v82 = v23;
  uint64_t v81 = v24 + 8;
  uint64_t v75 = v33;
  v33(v26, v23);
  id v72 = a2;
  id v34 = objc_msgSend(v32, sel_resolvedColorWithTraitCollection_, a2);

  v91[0] = v34;
  unint64_t v35 = type metadata accessor for UIColor();
  lazy protocol witness table accessor for type ContentConfigurationBasedRootEnvironment and conformance ContentConfigurationBasedRootEnvironment((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (void (*)(uint64_t))type metadata accessor for UIColor);
  unint64_t v69 = v35;
  uint64_t v36 = Color.init<A>(provider:)();
  swift_retain();
  id v71 = v31;
  if (v31)
  {
    id v37 = v31;
    uint64_t v38 = Font.init(_:)();
  }
  else
  {
    uint64_t v38 = 0;
  }
  UIListContentConfiguration.TextProperties.transform.getter();
  uint64_t v39 = v74;
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E4FB0F68], v74);
  int v70 = MEMORY[0x18C10B8D0](v22, v19);
  char v40 = *(void (**)(char *, uint64_t))(v17 + 8);
  v40(v19, v39);
  v40(v22, v39);
  uint64_t v41 = v80;
  UIListContentConfiguration.imageToTextPadding.getter();
  uint64_t v43 = v42;
  uint64_t v45 = v87;
  uint64_t v44 = v88;
  unint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
  char v47 = v85;
  v46(v85, (uint64_t)v41, v88);
  outlined init with take of EdgeInsets?(v76, (uint64_t)v91);
  if (v92 == 1)
  {
    UIListContentConfiguration.directionalLayoutMargins.getter();
    char v47 = v85;
    uint64_t v8 = v48;
    uint64_t v9 = v49;
    uint64_t v10 = v50;
    uint64_t v11 = v51;
  }
  unint64_t v52 = *(void (**)(char *, uint64_t))(v45 + 8);
  uint64_t v87 = v45 + 8;
  v52(v47, v44);
  char v53 = v77;
  UIListContentConfiguration.imageProperties.getter();
  uint64_t v54 = UIListContentConfiguration.ImageProperties.tintColor.getter();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v53, v79);
  if (v54)
  {
    uint64_t v89 = v54;
    uint64_t v55 = Color.init<A>(provider:)();
    char v56 = 1;
  }
  else
  {
    char v56 = 0;
    uint64_t v55 = 1;
  }
  outlined copy of Transaction?(v55);
  outlined consume of Transaction?(1);
  uint64_t v57 = v83;
  v46(v83, (uint64_t)v41, v88);
  if (v84)
  {
    id v60 = v72;
    uint64_t v59 = v57;
    UIListContentConfiguration._minimumHeight(for:)();
    uint64_t v58 = v61;
  }
  else
  {

    uint64_t v58 = v68;
    uint64_t v59 = v57;
  }
  char v62 = v70 & 1;
  uint64_t v63 = v41;
  uint64_t v64 = v88;
  v52(v63, v88);
  v52(v59, v64);
  v75(v86, v82);
  swift_retain_n();
  swift_retain();
  outlined copy of Transaction?(v55);
  outlined consume of Transaction?(v55);
  swift_release();
  swift_release();
  char v65 = v73;
  *int v73 = v8;
  v65[1] = v9;
  v65[2] = v10;
  v65[3] = v11;
  v65[4] = v58;
  v65[5] = v38;
  v65[6] = v36;
  *((unsigned char *)v65 + 56) = v62;
  v65[8] = v43;
  v65[9] = v55;
  *((unsigned char *)v65 + 80) = v56;
  swift_release();
  swift_release();
  return outlined consume of Transaction?(v55);
}

double @objc _UIHostingView.safeAreaInsets.getter(void *a1)
{
  id v1 = a1;
  double v2 = _UIHostingView.safeAreaInsets.getter();

  return v2;
}

double _UIHostingView.safeAreaInsets.getter()
{
  id v1 = (char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90);
  char v2 = v1[32];
  long long v3 = *((_OWORD *)v1 + 1);
  v9[0] = *(_OWORD *)v1;
  v9[1] = v3;
  char v10 = v2;
  uint64_t v4 = outlined init with take of EdgeInsets?((uint64_t)v9, (uint64_t)&v11);
  if (v12)
  {
    v8.receiver = v0;
    v8.super_class = (Class)type metadata accessor for _UIHostingView();
    objc_msgSendSuper2(&v8, sel_safeAreaInsets);
    return v5;
  }
  else
  {
    double v6 = v11;
    MEMORY[0x1F4188790](v4);
    static Update.ensure<A>(_:)();
  }
  return v6;
}

uint64_t outlined init with take of EdgeInsets?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for EdgeInsets?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for EdgeInsets?()
{
  if (!lazy cache variable for type metadata for EdgeInsets?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EdgeInsets?);
    }
  }
}

uint64_t destroy for OutsetByRowInsetsIfNecessary(uint64_t a1)
{
  outlined consume of Environment<HoverEffectContext?>.Content(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  uint64_t v2 = *(void *)(a1 + 72);
  char v3 = *(unsigned char *)(a1 + 80);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t destroy for PopoverPresentationModifier.PopoverModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = v2 + 8;
  unint64_t v4 = (a1 + *(unsigned __int8 *)(v2 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  (*(void (**)(unint64_t))(v2 + 8))(v4);
  unint64_t v5 = (*(void *)(v3 + 56) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(void *)v5, *(void *)(v5 + 8), *(unsigned char *)(v5 + 16));
  swift_release();

  return swift_release();
}

uint64_t destroy for CollectionViewCellModifier(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
  outlined consume of Environment<ListItemTint?>.Content(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned char *)(a1 + 41));
  outlined consume of Environment<HoverEffectContext?>.Content(*(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(unsigned char *)(a1 + 80));
  outlined consume of Environment<ListContentStyling>.Content(*(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144), *(void *)(a1 + 152), *(void *)(a1 + 160), *(unsigned char *)(a1 + 168), *(unsigned char *)(a1 + 169));
  outlined consume of Environment<CGFloat?>.Content(*(void *)(a1 + 176), *(void *)(a1 + 184), *(unsigned char *)(a1 + 192));
  if (*(void *)(a1 + 256) != 1) {
    swift_release();
  }
  uint64_t result = a1 + 280;
  int v3 = *(unsigned __int8 *)(a1 + 350);
  if (v3 == 2)
  {
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1(result);
    goto LABEL_8;
  }
  if (v3 != 1)
  {
    if (*(unsigned char *)(a1 + 350)) {
      return result;
    }
    goto LABEL_6;
  }
LABEL_8:

  return swift_release();
}

uint64_t outlined consume of Environment<CGFloat?>.Content(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of Transaction?(uint64_t result)
{
  if (result != 1) {
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of Environment<HoverEffectContext?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t outlined consume of Environment<ListItemTint?>.Content(uint64_t result, uint64_t a2, char a3)
{
  if (a3) {
    return outlined consume of Transaction?(result);
  }
  else {
    return swift_release();
  }
}

uint64_t outlined consume of Environment<ListContentStyling>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, char a12)
{
  if (a12)
  {
    swift_release();
    swift_release();
    return outlined consume of Transaction?(a10);
  }
  else
  {
    return swift_release();
  }
}

uint64_t destroy for PopoverPresentationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)(v4 + 8);
  char v7 = *(unsigned char *)(v4 + 16);

  return outlined consume of Environment<CGFloat?>.Content(v5, v6, v7);
}

uint64_t destroy for PopoverConditionalStateProvider(uint64_t a1)
{
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 64))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  }
  return result;
}

uint64_t destroy for ItemBoundNavigationDestinationModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + 15;
  swift_release();
  unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  }

  return swift_release();
}

uint64_t Color.init(uiColor:)()
{
  return Color.init<A>(provider:)();
}

unint64_t type metadata accessor for UIColor()
{
  unint64_t result = lazy cache variable for type metadata for UIColor;
  if (!lazy cache variable for type metadata for UIColor)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIColor);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type UIColor and conformance UIColor(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for NSObject(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_1(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UIColor();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ContentConfigurationBasedRootEnvironment and conformance ContentConfigurationBasedRootEnvironment(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for StyleContextAcceptsPredicate<SidebarStyleContext>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnvironment>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1)
{
}