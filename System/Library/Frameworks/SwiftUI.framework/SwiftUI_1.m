void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>(a1, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390]);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

uint64_t outlined init with copy of AccessibilityScrollableContext(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for AccessibilityScrollableContext(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 70);
  if (v4 >= 3) {
    unsigned int v4 = *(_DWORD *)a2 + 3;
  }
  if (v4 == 2)
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    LOBYTE(v4) = 2;
  }
  else if (v4 == 1)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
    LOBYTE(v4) = 0;
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
  }
  *(unsigned char *)(a1 + 70) = v4;
  swift_retain();
  return a1;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((a2 & 0x100) != 0)
  {
    *(void *)a3 = a1;
    *(unsigned char *)(a3 + 8) = a2;
    return outlined copy of Environment<ListItemTint?>.Content(a1, a2, 1);
  }
  else
  {
    outlined copy of Environment<ListItemTint?>.Content(a1, a2, 0);
    os_log_type_t v5 = static os_log_type_t.fault.getter();
    long long v6 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      uint64_t v11 = v9;
      *(_DWORD *)v8 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000016, 0x8000000188328160, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v6, v7, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v9, -1, -1);
      MEMORY[0x18C119C60](v8, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<ListItemTint?>.Content(a1, a2, 0);
    swift_release();
    return swift_release();
  }
}

uint64_t specialized View.accessibility<A>(_:_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  if (a3)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v19 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>, MEMORY[0x1E4F41090]);
    uint64_t v17 = v9;
    uint64_t v18 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>);
    uint64_t v15 = a1;
    uint64_t v16 = a2;
    specialized Dictionary.subscript.setter((uint64_t)&v15, MEMORY[0x1E4F40BA8]);
    uint64_t v10 = v19;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v10 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v19 = v10;
  AccessibilityAttachment.init(properties:)();
  uint64_t v11 = v15;
  uint64_t v12 = v16;
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v12;
  uint64_t result = outlined init with copy of Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>(v5, a4, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>);
  *(void *)(a4 + 376) = v13;
  *(void *)(a4 + 384) = 0;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t vars8;

  uint64_t v5 = v4;
  if (a3)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    v20 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>, MEMORY[0x1E4F41090]);
    uint64_t v18 = v9;
    uint64_t v19 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>);
    uint64_t v16 = a1;
    uint64_t v17 = a2;
    specialized Dictionary.subscript.setter((uint64_t)&v16, MEMORY[0x1E4F40BA8]);
    uint64_t v10 = v20;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v10 = Dictionary.init(minimumCapacity:)();
  }
  v20 = v10;
  AccessibilityAttachment.init(properties:)();
  uint64_t v11 = v16;
  uint64_t v12 = v17;
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v12;
  v14 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)a4 = *(_OWORD *)v5;
  *(_OWORD *)(a4 + 16) = v14;
  *(_OWORD *)(a4 + 32) = *(_OWORD *)(v5 + 32);
  *(_DWORD *)(a4 + 48) = *(_DWORD *)(v5 + 48);
  *(void *)(a4 + 56) = v13;
  *(void *)(a4 + 64) = 0;

  return outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>(v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v5 = v4;
  if (a3)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v19 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>, MEMORY[0x1E4F41090]);
    uint64_t v17 = v9;
    uint64_t v18 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>);
    uint64_t v15 = a1;
    uint64_t v16 = a2;
    specialized Dictionary.subscript.setter((uint64_t)&v15, MEMORY[0x1E4F40BA8]);
    uint64_t v10 = v19;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v10 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v19 = v10;
  AccessibilityAttachment.init(properties:)();
  uint64_t v11 = v15;
  uint64_t v12 = v16;
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v12;
  uint64_t result = outlined init with copy of Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>(v5, a4, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<LegacyModifier>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _FlexFrameLayout>, AccessibilityScrollableContextModifier>);
  *(void *)(a4 + 280) = v13;
  *(void *)(a4 + 288) = 0;
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  uint64_t v5 = v4;
  if (a3)
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v19 = Dictionary.init(minimumCapacity:)();
    _s7SwiftUI31AnyAccessibilityPropertiesEntry_pSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>, MEMORY[0x1E4F41090]);
    uint64_t v17 = v9;
    uint64_t v18 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>);
    uint64_t v15 = a1;
    uint64_t v16 = a2;
    specialized Dictionary.subscript.setter((uint64_t)&v15, MEMORY[0x1E4F40BA8]);
    uint64_t v10 = v19;
  }
  else
  {
    type metadata accessor for AnyAccessibilityPropertiesEntry();
    uint64_t v10 = Dictionary.init(minimumCapacity:)();
  }
  uint64_t v19 = v10;
  AccessibilityAttachment.init(properties:)();
  uint64_t v11 = v15;
  uint64_t v12 = v16;
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = v12;
  uint64_t result = outlined init with copy of Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>(v5, a4, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<IOSMultiColumnModifier>, _EnvironmentKeyWritingModifier<CGFloat?>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _AlignmentLayout>, _PaddingLayout>, _PaddingLayout>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>);
  *(void *)(a4 + 376) = v13;
  *(void *)(a4 + 384) = 0;
  return result;
}

uint64_t outlined init with copy of Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of AccessibilityScrollableContextModifier(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of AccessibilityScrollableContextModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for AccessibilityScrollableContextModifier(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 70);
  if (v4 == 2)
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
  }
  else if (v4 == 1)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
  }
  *(unsigned char *)(a1 + 70) = v4;
  swift_retain();
  return a1;
}

void type metadata accessor for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>>()
{
  if (!lazy cache variable for type metadata for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListItemTint?> and conformance _EnvironmentKeyWritingModifier<A>);
    unint64_t v0 = type metadata accessor for AccessibilityListCoreCellModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityListCoreCellModifier<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>>);
    }
  }
}

uint64_t destroy for AccessibilityListCoreCellModifier(uint64_t a1)
{
  uint64_t result = a1 + 8;
  int v3 = *(unsigned __int8 *)(a1 + 78);
  if (v3 == 2)
  {
LABEL_4:
    __swift_destroy_boxed_opaque_existential_1(result);
    goto LABEL_6;
  }
  if (v3 != 1)
  {
    if (*(unsigned char *)(a1 + 78)) {
      return result;
    }
    goto LABEL_4;
  }
LABEL_6:

  return swift_release();
}

uint64_t closure #1 in CollectionViewCellModifier.resolvedBody(content:isInSidebar:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>)
{
  char v12 = *(unsigned char *)(a1 + 248);
  outlined init with copy of CollectionViewCellModifier(a1, (uint64_t)v68);
  if (v12)
  {
    outlined destroy of CollectionViewCellModifier((uint64_t)v68);
LABEL_3:
    unint64_t v32 = 0;
    char v31 = 1;
    goto LABEL_8;
  }
  int v13 = v68[351];
  outlined init with copy of CollectionViewCellModifier((uint64_t)v68, (uint64_t)v66);
  if (v13 == 2)
  {
    outlined destroy of CollectionViewCellModifier((uint64_t)v66);
    outlined destroy of CollectionViewCellModifier((uint64_t)v68);
  }
  else
  {
    int v14 = v67;
    outlined destroy of CollectionViewCellModifier((uint64_t)v66);
    outlined destroy of CollectionViewCellModifier((uint64_t)v68);
    if (v14 != 1) {
      goto LABEL_3;
    }
  }
  char v31 = 0;
  unint64_t v32 = 0xBFF0000000000000;
LABEL_8:
  int v30 = *(unsigned __int8 *)(a1 + 193);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v15 = swift_getKeyPath();
  char v16 = static Edge.Set.all.getter();
  char v65 = 0;
  char v64 = 0;
  char v63 = 0;
  unint64_t v17 = *(void *)(a1 + 16);
  char v18 = *(unsigned char *)(a1 + 24);
  outlined copy of Environment<Bool>.Content(v17, v18);
  char v19 = specialized Environment.wrappedValue.getter(v17, v18);
  outlined consume of Environment<Bool>.Content(v17, v18);
  char v20 = *(unsigned char *)(a1 + 248);
  outlined init with copy of CollectionViewCellModifier(a1, (uint64_t)v66);
  if ((v20 & 1) == 0)
  {
    int v21 = v67;
    outlined init with copy of CollectionViewCellModifier((uint64_t)v66, (uint64_t)v61);
    if (v21)
    {
      int v22 = v62;
      outlined destroy of CollectionViewCellModifier((uint64_t)v61);
      outlined destroy of CollectionViewCellModifier((uint64_t)v66);
      if (v22 != 1) {
        goto LABEL_12;
      }
    }
    else
    {
      outlined destroy of CollectionViewCellModifier((uint64_t)v61);
      outlined destroy of CollectionViewCellModifier((uint64_t)v66);
    }
    char v24 = 0;
    unint64_t v23 = 0xBFF0000000000000;
    goto LABEL_15;
  }
  outlined destroy of CollectionViewCellModifier((uint64_t)v66);
LABEL_12:
  unint64_t v23 = 0;
  char v24 = 1;
LABEL_15:
  v34[0] = xmmword_188364060;
  v34[1] = xmmword_188364060;
  v34[2] = (unint64_t)KeyPath;
  v34[3] = 0uLL;
  LOBYTE(v35) = 0;
  *((void *)&v35 + 1) = v15;
  LOBYTE(v36) = 0;
  BYTE1(v36) = v30 == 0;
  BYTE8(v36) = v16;
  *(double *)&long long v37 = a3;
  *((double *)&v37 + 1) = a4;
  *(double *)&long long v38 = a5;
  *((double *)&v38 + 1) = a6;
  LOBYTE(v39) = 0;
  uint64_t v40 = 0;
  char v41 = v19 & 1;
  char v43 = v31;
  v61[151] = v19 & 1;
  *(_OWORD *)&v61[103] = v37;
  *(_OWORD *)&v61[119] = v38;
  *(_OWORD *)&v61[135] = v39;
  *(_OWORD *)&v61[7] = xmmword_188364060;
  *(_OWORD *)&v61[23] = xmmword_188364060;
  *(_OWORD *)&v61[87] = v36;
  *(_OWORD *)&v61[71] = v35;
  *(_OWORD *)&v61[55] = 0uLL;
  *(_OWORD *)&v61[39] = (unint64_t)KeyPath;
  char v42 = v24;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = v32;
  *(unsigned char *)(a2 + 24) = v31;
  long long v25 = *(_OWORD *)&v61[112];
  *(_OWORD *)(a2 + 121) = *(_OWORD *)&v61[96];
  *(_OWORD *)(a2 + 137) = v25;
  *(_OWORD *)(a2 + 153) = *(_OWORD *)&v61[128];
  *(void *)(a2 + 169) = *(void *)&v61[144];
  long long v26 = *(_OWORD *)&v61[48];
  *(_OWORD *)(a2 + 57) = *(_OWORD *)&v61[32];
  *(_OWORD *)(a2 + 73) = v26;
  long long v27 = *(_OWORD *)&v61[80];
  *(_OWORD *)(a2 + 89) = *(_OWORD *)&v61[64];
  *(_OWORD *)(a2 + 105) = v27;
  long long v28 = *(_OWORD *)&v61[16];
  *(_OWORD *)(a2 + 25) = *(_OWORD *)v61;
  *(_OWORD *)(a2 + 41) = v28;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = v23;
  *(unsigned char *)(a2 + 208) = v24;
  v44[0] = xmmword_188364060;
  v44[1] = xmmword_188364060;
  uint64_t v45 = KeyPath;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v48 = 0;
  char v49 = 0;
  uint64_t v50 = v15;
  char v51 = 0;
  BOOL v52 = v30 == 0;
  char v53 = v16;
  double v54 = a3;
  double v55 = a4;
  double v56 = a5;
  double v57 = a6;
  char v58 = 0;
  uint64_t v59 = 0;
  char v60 = v19 & 1;
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>((uint64_t)v34);
  return outlined release of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>((uint64_t)v44);
}

uint64_t outlined destroy of CollectionViewCellModifier(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of CollectionViewCellModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  char v3 = *(unsigned char *)(a1 + 80);
  outlined consume of Environment<HoverEffectContext?>.Content(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  outlined consume of Environment<Bool>.Content(v2, v3);
  swift_release();
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  char v3 = *(unsigned char *)(a1 + 80);
  outlined copy of Environment<HoverEffectContext?>.Content(*(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  outlined copy of Environment<Bool>.Content(v2, v3);
  swift_retain();
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  char v3 = *(unsigned char *)(a1 + 136);
  uint64_t v4 = *(void *)(a1 + 288);
  outlined consume of Environment<HoverEffectContext?>.Content(*(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
  outlined consume of Environment<Bool>.Content(v2, v3);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Transaction?(v4);
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 128);
  char v3 = *(unsigned char *)(a1 + 136);
  uint64_t v4 = *(void *)(a1 + 288);
  outlined copy of Environment<HoverEffectContext?>.Content(*(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
  outlined copy of Environment<Bool>.Content(v2, v3);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Transaction?(v4);
  return a1;
}

uint64_t specialized Environment.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(unsigned char *)(v1 + 81) == 1)
  {
    char v3 = *(unsigned char *)(v1 + 80);
    uint64_t v4 = *(void *)(v1 + 72);
    uint64_t v5 = *(void *)(v1 + 64);
    char v6 = *(unsigned char *)(v1 + 56);
    *(void *)a1 = *(void *)v1;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
    *(unsigned char *)(a1 + 56) = v6 & 1;
    *(void *)(a1 + 64) = v5;
    *(void *)(a1 + 72) = v4;
    *(unsigned char *)(a1 + 80) = v3;
    return outlined retain of Environment<ListContentStyling>(v1, (void (*)(void, void, void, void, void, void, void, void, void, void, _WORD))outlined copy of Environment<ListContentStyling>.Content);
  }
  else
  {
    outlined retain of Environment<ListContentStyling>(v1, (void (*)(void, void, void, void, void, void, void, void, void, void, _WORD))outlined copy of Environment<ListContentStyling>.Content);
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    uint64_t v9 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v13 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x8000000188328140, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v12, -1, -1);
      MEMORY[0x18C119C60](v11, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined retain of Environment<ListContentStyling>(v1, (void (*)(void, void, void, void, void, void, void, void, void, void, _WORD))outlined consume of Environment<ListContentStyling>.Content);
    swift_release();
    return swift_release();
  }
}

{
  uint64_t v1;
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  void v10[5];
  char v11;

  outlined init with copy of Environment<ToolbarItemPlacement.Role>.Content(v1, (uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Environment<ToolbarItemPlacement.Role>.Content, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4F3F4D8], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>);
  if (v11 == 1) {
    return outlined init with take of ToolbarItemPlacement.Role((uint64_t)v10, a1);
  }
  uint64_t v4 = static os_log_type_t.fault.getter();
  uint64_t v5 = static Log.runtimeIssuesLog.getter();
  char v6 = v4;
  if (os_log_type_enabled(v5, v4))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v8 = swift_slowAlloc();
    uint64_t v9 = v8;
    *(_DWORD *)os_log_type_t v7 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(1701605202, 0xE400000000000000, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1872C6000, v5, v6, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v8, -1, -1);
    MEMORY[0x18C119C60](v7, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void v14[2];
  uint64_t v15;

  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x1E4F3F4D8];
  type metadata accessor for Binding<TabViewCustomization>(0, &lazy cache variable for type metadata for Environment<URL?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for URL?, MEMORY[0x1E4F3F4D8]);
  MEMORY[0x1F4188790](v5);
  os_log_type_t v7 = (char *)v14 - v6;
  outlined init with copy of Environment<ToolbarItemPlacement.Role>.Content(v2, (uint64_t)v14 - v6, (uint64_t)&lazy cache variable for type metadata for Environment<URL?>.Content, (uint64_t)type metadata accessor for URL?, v4, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<TabViewCustomization>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return outlined init with take of Binding<TabViewCustomization>?((uint64_t)v7, a1, (uint64_t (*)(void))type metadata accessor for URL?);
  }
  uint64_t v9 = static os_log_type_t.fault.getter();
  os_log_type_t v10 = static Log.runtimeIssuesLog.getter();
  uint64_t v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v15 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    v14[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6C616E6F6974704FLL, 0xED00003E4C52553CLL, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1872C6000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v13, -1, -1);
    MEMORY[0x18C119C60](v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void v14[2];
  uint64_t v15;

  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x1E4F3F4D8];
  type metadata accessor for Binding<TabViewCustomization>(0, &lazy cache variable for type metadata for Environment<Predicate<Pack{URL}>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>?, MEMORY[0x1E4F3F4D8]);
  MEMORY[0x1F4188790](v5);
  os_log_type_t v7 = (char *)v14 - v6;
  outlined init with copy of Environment<ToolbarItemPlacement.Role>.Content(v2, (uint64_t)v14 - v6, (uint64_t)&lazy cache variable for type metadata for Environment<Predicate<Pack{URL}>?>.Content, (uint64_t)type metadata accessor for Predicate<Pack{URL}>?, v4, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<TabViewCustomization>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return outlined init with take of Binding<TabViewCustomization>?((uint64_t)v7, a1, (uint64_t (*)(void))type metadata accessor for Predicate<Pack{URL}>?);
  }
  uint64_t v9 = static os_log_type_t.fault.getter();
  os_log_type_t v10 = static Log.runtimeIssuesLog.getter();
  uint64_t v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v15 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    v14[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ELL, 0x8000000188327F70, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1872C6000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v13, -1, -1);
    MEMORY[0x18C119C60](v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  void v16[2];
  uint64_t v17;

  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x1E4F27A78];
  uint64_t v5 = MEMORY[0x1E4F3F4D8];
  type metadata accessor for Binding<TabViewCustomization>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78], MEMORY[0x1E4F3F4D8]);
  MEMORY[0x1F4188790](v6);
  os_log_type_t v8 = (char *)v16 - v7;
  outlined init with copy of Environment<ToolbarItemPlacement.Role>.Content(v2, (uint64_t)v16 - v7, (uint64_t)&lazy cache variable for type metadata for Environment<Locale>.Content, v4, v5, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<TabViewCustomization>);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for Locale();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, v8, v9);
  }
  else
  {
    uint64_t v11 = static os_log_type_t.fault.getter();
    uint64_t v12 = static Log.runtimeIssuesLog.getter();
    uint64_t v13 = v11;
    if (os_log_type_enabled(v12, v11))
    {
      int v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      unint64_t v17 = v15;
      *(_DWORD *)int v14 = 136315138;
      v16[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x656C61636F4CLL, 0xE600000000000000, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v12, v13, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v15, -1, -1);
      MEMORY[0x18C119C60](v14, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    swift_release();
    return swift_release();
  }
}

{
  return specialized Environment.wrappedValue.getter((unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0], MEMORY[0x1E4F27CA0], 0x7261646E656C6143, a1);
}

{
  return specialized Environment.wrappedValue.getter((unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68], MEMORY[0x1E4F27D68], 0x656E6F5A656D6954, a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void v14[2];
  uint64_t v15;

  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x1E4F3F4D8];
  type metadata accessor for Binding<TabViewCustomization>(0, &lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<AttributedString>?, MEMORY[0x1E4F3F4D8]);
  MEMORY[0x1F4188790](v5);
  os_log_type_t v7 = (char *)v14 - v6;
  outlined init with copy of Environment<ToolbarItemPlacement.Role>.Content(v2, (uint64_t)v14 - v6, (uint64_t)&lazy cache variable for type metadata for Environment<Binding<AttributedString>?>.Content, (uint64_t)type metadata accessor for Binding<AttributedString>?, v4, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<TabViewCustomization>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return outlined init with take of Binding<TabViewCustomization>?((uint64_t)v7, a1, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>?);
  }
  uint64_t v9 = static os_log_type_t.fault.getter();
  os_log_type_t v10 = static Log.runtimeIssuesLog.getter();
  uint64_t v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v15 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    v14[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000023, 0x8000000188327E60, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1872C6000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v13, -1, -1);
    MEMORY[0x18C119C60](v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void v14[2];
  uint64_t v15;

  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x1E4F3F4D8];
  type metadata accessor for Binding<TabViewCustomization>(0, (unint64_t *)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E4F3F4D8]);
  MEMORY[0x1F4188790](v5);
  os_log_type_t v7 = (char *)v14 - v6;
  outlined init with copy of Environment<ToolbarItemPlacement.Role>.Content(v2, (uint64_t)v14 - v6, (uint64_t)&lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>.Content, (uint64_t)type metadata accessor for DismissSearchAccessoryAction, v4, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<TabViewCustomization>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return outlined init with take of Binding<TabViewCustomization>?((uint64_t)v7, a1, type metadata accessor for DismissSearchAccessoryAction);
  }
  uint64_t v9 = static os_log_type_t.fault.getter();
  os_log_type_t v10 = static Log.runtimeIssuesLog.getter();
  uint64_t v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v15 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    v14[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001CLL, 0x8000000188327DA0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1872C6000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v13, -1, -1);
    MEMORY[0x18C119C60](v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void v14[2];
  uint64_t v15;

  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x1E4F3F4D8];
  type metadata accessor for Binding<TabViewCustomization>(0, &lazy cache variable for type metadata for Environment<Binding<TabViewCustomization>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TabViewCustomization>?, MEMORY[0x1E4F3F4D8]);
  MEMORY[0x1F4188790](v5);
  os_log_type_t v7 = (char *)v14 - v6;
  outlined init with copy of Environment<ToolbarItemPlacement.Role>.Content(v2, (uint64_t)v14 - v6, (uint64_t)&lazy cache variable for type metadata for Environment<Binding<TabViewCustomization>?>.Content, (uint64_t)type metadata accessor for Binding<TabViewCustomization>?, v4, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<TabViewCustomization>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return outlined init with take of Binding<TabViewCustomization>?((uint64_t)v7, a1, (uint64_t (*)(void))type metadata accessor for Binding<TabViewCustomization>?);
  }
  uint64_t v9 = static os_log_type_t.fault.getter();
  os_log_type_t v10 = static Log.runtimeIssuesLog.getter();
  uint64_t v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v15 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    v14[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000027, 0x80000001883284C0, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1872C6000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v13, -1, -1);
    MEMORY[0x18C119C60](v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void v14[2];
  uint64_t v15;

  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x1E4F3F4D8];
  type metadata accessor for Binding<TabViewCustomization>(0, &lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t (*)(uint64_t))type metadata accessor for CellConfiguration, MEMORY[0x1E4F3F4D8]);
  MEMORY[0x1F4188790](v5);
  os_log_type_t v7 = (char *)v14 - v6;
  outlined init with copy of Environment<ToolbarItemPlacement.Role>.Content(v2, (uint64_t)v14 - v6, (uint64_t)&lazy cache variable for type metadata for Environment<CellConfiguration>.Content, (uint64_t)type metadata accessor for CellConfiguration, v4, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<TabViewCustomization>);
  if (swift_getEnumCaseMultiPayload() == 1) {
    return outlined init with take of Binding<TabViewCustomization>?((uint64_t)v7, a1, (uint64_t (*)(void))type metadata accessor for CellConfiguration);
  }
  uint64_t v9 = static os_log_type_t.fault.getter();
  os_log_type_t v10 = static Log.runtimeIssuesLog.getter();
  uint64_t v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v15 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    v14[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000011, 0x8000000188328440, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1872C6000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v13, -1, -1);
    MEMORY[0x18C119C60](v12, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  return swift_release();
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[19];
  unsigned char v17[152];
  unsigned char v18[160];

  outlined init with take of Environment<PresentSharingPickerAction?>.Content(v1, (uint64_t)v17);
  outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v17, (uint64_t)v18);
  if (_s7SwiftUI11EnvironmentV7ContentOyAA26PresentSharingPickerActionVSg_GWOg((uint64_t)v18) == 1)
  {
    outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v17, (uint64_t)v16);
    char v6 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v16, v3, v4, v5);
    outlined init with take of PresentSharingPickerAction?(v6, a1);
    return outlined retain of Environment<PresentSharingPickerAction?>(v1, outlined copy of Environment<PresentSharingPickerAction?>.Content);
  }
  else
  {
    outlined retain of Environment<PresentSharingPickerAction?>(v1, outlined copy of Environment<PresentSharingPickerAction?>.Content);
    os_log_type_t v8 = static os_log_type_t.fault.getter();
    uint64_t v9 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      v16[0] = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x8000000188328230, v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v12, -1, -1);
      MEMORY[0x18C119C60](v11, -1, -1);
    }

    outlined init with take of Environment<PresentSharingPickerAction?>.Content((uint64_t)v17, (uint64_t)v16);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v16, v13, v14, v15);
    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined retain of Environment<PresentSharingPickerAction?>(v1, outlined consume of Environment<PresentSharingPickerAction?>.Content);
    swift_release();
    return swift_release();
  }
}

{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;

  char v3 = *(void *)v1;
  if (*(unsigned char *)(v1 + 72) == 1)
  {
    uint64_t v4 = *(_DWORD *)(v1 + 16);
    uint64_t v5 = *(void *)(v1 + 8);
    *(unsigned char *)a1 = v3 & 1;
    *(unsigned char *)(a1 + 1) = BYTE1(v3);
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = v4 & 1;
    *(unsigned char *)(a1 + 17) = BYTE1(v4) & 1;
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v1 + 40);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v1 + 56);
    return outlined retain of Environment<HeaderFooterConfiguration>(v1, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
  }
  else
  {
    outlined retain of Environment<HeaderFooterConfiguration>(v1, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined copy of Environment<HeaderFooterConfiguration>.Content);
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    os_log_type_t v8 = static Log.runtimeIssuesLog.getter();
    uint64_t v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v12 = v11;
      *(_DWORD *)os_log_type_t v10 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000019, 0x8000000188328510, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v8, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v11, -1, -1);
      MEMORY[0x18C119C60](v10, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined retain of Environment<HeaderFooterConfiguration>(v1, (void (*)(void, void, void, void, void, void, void, void, void, char))outlined consume of Environment<HeaderFooterConfiguration>.Content);
    swift_release();
    return swift_release();
  }
}

uint64_t ListLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X8>)
{
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v10;
  *(unsigned char *)(a1 + 40) = v11;
  *(void *)(a1 + 48) = KeyPath;
  *(unsigned char *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v3;
  *(_WORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = v4;
  *(unsigned char *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = result;
  *(_WORD *)(a1 + 104) = 0;
  return result;
}

void type metadata accessor for StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>)
  {
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>);
    }
  }
}

uint64_t type metadata accessor for AccessibilityListCoreCellModifier()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for _ViewModifier_Content<CollectionViewCellModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<CollectionViewCellModifier>)
  {
    lazy protocol witness table accessor for type CollectionViewCellModifier and conformance CollectionViewCellModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<CollectionViewCellModifier>);
    }
  }
}

uint64_t initializeWithCopy for PlatformItemListGenerator(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  id v5 = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t NavigationStack.init<>(root:)@<X0>(void (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for NavigationStack();
  *(void *)(a2 + v4[11]) = 0;
  uint64_t v5 = a2 + v4[13];
  *(void *)uint64_t v5 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(v5 + 8) = 0;
  *(unsigned char *)(v5 + 16) = 0;
  a1();
  type metadata accessor for AnyNavigationPath.HeterogeneousBoxBase();
  uint64_t result = swift_allocObject();
  uint64_t v7 = MEMORY[0x1E4FBC860];
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = v7;
  *(unsigned char *)(result + 40) = 0;
  *(void *)(result + 48) = v7;
  *(void *)(result + 56) = 0;
  uint64_t v8 = a2 + v4[12];
  *(void *)(v8 + 8) = 0;
  *(void *)(v8 + 16) = 0;
  *(void *)uint64_t v8 = result;
  *(unsigned char *)(v8 + 24) = 0;
  return result;
}

uint64_t AnyNavigationPath.HeterogeneousBoxBase.__deallocating_deinit()
{
  outlined consume of NavigationPath.Representation(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t ObjectFallbackDelegateBox.addDelegate(to:)()
{
  swift_getObjectType();
  uint64_t v0 = swift_unknownObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_unknownObjectRelease();
}

void ObservableFallbackDelegateBox.addDelegate(to:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  specialized EnvironmentValues.subscript.setter((uint64_t)v1);
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1)
{
  uint64_t v2 = a1;
  type metadata accessor for EnvironmentObjectKey();
  swift_getWitnessTable();
  return EnvironmentValues._set<A>(_:for:)((uint64_t)&v2);
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>);
  outlined copy of Transaction?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListItemTintKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListItemTintKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>);
  outlined copy of AppIntentExecutor?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerSubmissionKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>);
  outlined copy of AppIntentExecutor?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<RefreshAction.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<RefreshAction.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues.subscript.setter(a1);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey>, (uint64_t)&type metadata for GridBadgeInfoEnvironmentKey, (uint64_t)&protocol witness table for GridBadgeInfoEnvironmentKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogIconKey>, (uint64_t)&type metadata for DialogIconKey, (uint64_t)&protocol witness table for DialogIconKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogIconKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>, (uint64_t)&type metadata for DialogTintColorKey, (uint64_t)&protocol witness table for DialogTintColorKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>);
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ArchivableMutationHandler.Key>);
  outlined copy of AppIntentExecutor?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ArchivableMutationHandler.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ArchivableMutationHandler.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues.subscript.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>, (uint64_t)&type metadata for FocusScopesKey, (uint64_t)&protocol witness table for FocusScopesKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollViewKey>, (uint64_t)&type metadata for ScrollViewKey, (uint64_t)&protocol witness table for ScrollViewKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollViewKey> and conformance EnvironmentPropertyKey<A>);
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderFooterConfigurationKey>);
  outlined retain of HeaderFooterConfiguration(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<HeaderFooterConfigurationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<HeaderFooterConfigurationKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ProminentHeaderStylingKey>);
  outlined retain of ListContentStyling(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ProminentHeaderStylingKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ProminentHeaderStylingKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityRequestFocusKey>);
  outlined copy of AppIntentExecutor?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityRequestFocusKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AppIntentExecutor.Key>);
  outlined copy of AppIntentExecutor?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AppIntentExecutor.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AppIntentExecutor.Key>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey>, (uint64_t)&type metadata for GaugeIndicatorDotTintEnvironmentKey, (uint64_t)&protocol witness table for GaugeIndicatorDotTintEnvironmentKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<GaugeIndicatorDotTintEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey>);
  outlined copy of AppIntentExecutor?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.TriggerDeleteBackwardKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction>);
  outlined copy of AppIntentExecutor?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues.subscript.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey>, (uint64_t)&type metadata for EnvironmentValues.DefaultHoverEffectKey, (uint64_t)&protocol witness table for EnvironmentValues.DefaultHoverEffectKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultHoverEffectKey> and conformance EnvironmentPropertyKey<A>);
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey>);
  outlined copy of AppIntentExecutor?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollToTopGestureActionKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues.subscript.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>, (uint64_t)&type metadata for EnvironmentValues.KeyPressHandlersKey, (uint64_t)&protocol witness table for EnvironmentValues.KeyPressHandlersKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey> and conformance EnvironmentPropertyKey<A>);
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<GaugeTintOverrideKey>);
  outlined copy of (Color, Color)?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<GaugeTintOverrideKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<GaugeTintOverrideKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

{
  return specialized EnvironmentValues.subscript.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey>, (uint64_t)&type metadata for EnvironmentValues.SceneKeyboardShortcutsKey, (uint64_t)&protocol witness table for EnvironmentValues.SceneKeyboardShortcutsKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SceneKeyboardShortcutsKey> and conformance EnvironmentPropertyKey<A>);
}

{
  uint64_t v1;

  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameActionKey>);
  outlined copy of AppIntentExecutor?(a1);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.RenameActionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.RenameActionKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t static UITraitBridgedEnvironmentResolver.write<A, B>(bridgedKey:to:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v14 = (char *)&v20 - v13;
  double v16 = MEMORY[0x1F4188790](v15);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a3, a5, v16);
  swift_dynamicCast();
  EnvironmentValues.setBridgedValue<A>(value:for:)((uint64_t)v14, a1, a4, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t EnvironmentValues.subscript.setter(uint64_t a1)
{
  specialized EnvironmentValues.subscript.setter();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t EnvironmentValues.setBridgedValue<A>(value:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(v4 + 8);
  type metadata accessor for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v8)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v9 = (char *)v17;
  uint64_t v10 = *(void *)(v17 + 16);
  if (v10)
  {
    uint64_t v11 = 32;
    uint64_t v12 = *(void *)(v17 + 16);
    while (*(void *)(v17 + v11) != a2)
    {
      v11 += 16;
      if (!--v12) {
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_8:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10 + 1, 1, (char *)v17);
    }
    unint64_t v14 = *((void *)v9 + 2);
    unint64_t v13 = *((void *)v9 + 3);
    if (v14 >= v13 >> 1) {
      char v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v14 + 1;
    uint64_t v15 = &v9[16 * v14];
    *((void *)v15 + 4) = a2;
    *((void *)v15 + 5) = a4;
    type metadata accessor for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.setter();
    if (v8)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    swift_release();
  }
  return EnvironmentValues._set<A>(_:for:)(a1);
}

void type metadata accessor for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t EnvironmentValues._set<A>(_:for:)(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v4 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, double))(v6 + 16))((char *)&v8 - v5, a1, v4);
  type metadata accessor for EnvironmentPropertyKey();
  swift_retain();
  swift_getWitnessTable();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4, unint64_t *a5, unint64_t *a6, unint64_t *a7)
{
  char v8 = (char)result;
  if (a3)
  {
    unint64_t v9 = *((void *)a4 + 3);
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = *((void *)a4 + 2);
  if (v10 <= v11) {
    uint64_t v12 = *((void *)a4 + 2);
  }
  else {
    uint64_t v12 = v10;
  }
  if (v12)
  {
    type metadata accessor for _ContiguousArrayStorage<UISceneConnectionOptionDefinition.Type>(0, a5, a6, a7);
    unint64_t v13 = (char *)swift_allocObject();
    int64_t v14 = _swift_stdlib_malloc_size_0(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 17;
    }
    *((void *)v13 + 2) = v11;
    *((void *)v13 + 3) = 2 * (v15 >> 4);
  }
  else
  {
    unint64_t v13 = (char *)MEMORY[0x1E4FBC860];
  }
  double v16 = v13 + 32;
  uint64_t v17 = a4 + 32;
  if (v8)
  {
    if (v13 != a4 || v16 >= &v17[16 * v11]) {
      memmove(v16, v17, 16 * v11);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v16, v17, 16 * v11);
  }
  swift_bridgeObjectRelease();
  return v13;
}

void type metadata accessor for _ContiguousArrayStorage<UISceneConnectionOptionDefinition.Type>(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  if (!*a2)
  {
    type metadata accessor for UISceneConnectionOptionDefinition.Type(255, a3, a4);
    unint64_t v5 = type metadata accessor for _ContiguousArrayStorage();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCy5UIKit33UISceneConnectionOptionDefinition_pXpGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = a4(a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t type metadata accessor for UISceneConnectionOptionDefinition.Type(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    type metadata accessor for ContainerBackgroundHost(255, a3);
    uint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t NavigationStack.init<>(path:root:)@<X0>(uint64_t *a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  char v8 = *((unsigned char *)a1 + 40);
  uint64_t v9 = a1[6];
  uint64_t v16 = a1[7];
  uint64_t v17 = *a1;
  uint64_t v10 = (int *)type metadata accessor for NavigationStack();
  *(void *)(a3 + v10[11]) = 0;
  uint64_t v11 = a3 + v10[13];
  *(void *)uint64_t v11 = implicit closure #2 in implicit closure #1 in variable initialization expression of NavigationSplitReader._stateHost;
  *(void *)(v11 + 8) = 0;
  *(unsigned char *)(v11 + 16) = 0;
  a2();
  type metadata accessor for AnyNavigationPath.HeterogeneousBoxBase();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v5;
  *(void *)(v12 + 24) = v6;
  *(void *)(v12 + 32) = v7;
  *(unsigned char *)(v12 + 40) = v8;
  *(void *)(v12 + 48) = v9;
  *(void *)(v12 + 56) = v16;
  outlined copy of NavigationPath.Representation(v5, v6, v7, v8);
  lazy protocol witness table accessor for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous();
  swift_bridgeObjectRetain();
  uint64_t v13 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  swift_release();
  outlined consume of NavigationPath.Representation(v5, v6, v7, v8);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v15 = a3 + v10[12];
  *(void *)uint64_t v15 = v17;
  *(void *)(v15 + 8) = v13;
  *(void *)(v15 + 16) = v12;
  *(unsigned char *)(v15 + 24) = 1;
  return result;
}

uint64_t protocol witness for Projection.get(base:) in conformance AnyNavigationPath.ToHeterogeneous@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  char v6 = *(unsigned char *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  type metadata accessor for AnyNavigationPath.HeterogeneousBoxBase();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v3;
  *(void *)(v9 + 24) = v4;
  *(void *)(v9 + 32) = v5;
  *(unsigned char *)(v9 + 40) = v6;
  *(void *)(v9 + 48) = v7;
  *(void *)(v9 + 56) = v8;
  *a2 = v9;
  outlined copy of NavigationPath.Representation(v3, v4, v5, v6);

  return swift_bridgeObjectRetain();
}

uint64_t type metadata accessor for AnyNavigationPath.HeterogeneousBoxBase()
{
  return self;
}

uint64_t specialized static NavigationPath.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  unint64_t v5 = *(unsigned __int8 *)(a1 + 24);
  unint64_t v6 = *(void *)(a1 + 32);
  unint64_t v8 = *(void *)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  unint64_t v9 = *(void *)(a2 + 16);
  char v41 = *(unsigned char *)(a2 + 24);
  unint64_t v10 = *(void *)(a2 + 32);
  unint64_t v43 = *(void *)a1;
  uint64_t v44 = v2;
  unint64_t v45 = v4;
  unint64_t v11 = v5;
  char v46 = v5;
  unint64_t v39 = v6 >> 62;
  unint64_t v40 = v10;
  uint64_t v12 = v10 >> 62;
  if (!NavigationPath.Representation.isEmpty.getter()) {
    goto LABEL_7;
  }
  if (v6 >> 62) {
    goto LABEL_44;
  }
  if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_7:
    while (1)
    {
      uint64_t v38 = v12;
      uint64_t v12 = v11;
      if (v11) {
        break;
      }
      if (!(v3 >> 62))
      {
        uint64_t v17 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
        outlined copy of NavigationPath.Representation(v3, v2, v4, 0);
        swift_bridgeObjectRetain();
        if (!v39) {
          goto LABEL_18;
        }
        goto LABEL_51;
      }
LABEL_50:
      outlined copy of NavigationPath.Representation(v3, v2, v4, 0);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v3, v2, v4, 0);
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      outlined consume of NavigationPath.Representation(v3, v2, v4, 0);
      if (!v39)
      {
LABEL_18:
        uint64_t v18 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_19;
      }
LABEL_51:
      swift_bridgeObjectRetain();
      uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_19:
      outlined consume of NavigationPath.Representation(v3, v2, v4, v12);
      swift_bridgeObjectRelease();
      BOOL v16 = __OFADD__(v17, v18);
      uint64_t v19 = v17 + v18;
      if (v16)
      {
        __break(1u);
        goto LABEL_42;
      }
      uint64_t v36 = v4;
      uint64_t v37 = v2;
      if (v41)
      {
        if (v8 >> 62)
        {
          outlined copy of NavigationPath.Representation(v8, v7, v9, 1);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v8, v7, v9, 1);
          swift_bridgeObjectRetain();
          uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v20 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
          outlined copy of NavigationPath.Representation(v8, v7, v9, 1);
          swift_bridgeObjectRetain();
          outlined copy of NavigationPath.Representation(v8, v7, v9, 1);
        }
        unint64_t v6 = v7;
        uint64_t v21 = *(void *)(v7 + 16);
        uint64_t v7 = v20 + v21;
        if (__OFADD__(v20, v21))
        {
          __break(1u);
        }
        else if (!(v9 >> 62))
        {
          uint64_t v22 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_26:
          outlined consume of NavigationPath.Representation(v8, v6, v9, 1);
          BOOL v16 = __OFADD__(v7, v22);
          uint64_t v17 = v7 + v22;
          if (!v16)
          {
            unint64_t v4 = v8;
            uint64_t v2 = v12;
            uint64_t v7 = v6;
            unint64_t v6 = v40;
            goto LABEL_30;
          }
          __break(1u);
          goto LABEL_56;
        }
        swift_bridgeObjectRetain();
        uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
      unint64_t v6 = v40;
      uint64_t v2 = v12;
      if (!(v8 >> 62))
      {
        uint64_t v17 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
        unint64_t v4 = v8;
        outlined copy of NavigationPath.Representation(v8, v7, v9, 0);
        swift_bridgeObjectRetain();
        goto LABEL_30;
      }
LABEL_56:
      outlined copy of NavigationPath.Representation(v8, v7, v9, 0);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v8, v7, v9, 0);
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      unint64_t v4 = v8;
      outlined consume of NavigationPath.Representation(v8, v7, v9, 0);
LABEL_30:
      uint64_t v12 = v19;
      if (!v38)
      {
        unint64_t v11 = v6;
        unint64_t v6 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        goto LABEL_32;
      }
LABEL_42:
      unint64_t v11 = v6;
      swift_bridgeObjectRetain();
      unint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
LABEL_32:
      outlined consume of NavigationPath.Representation(v4, v7, v9, v41);
      swift_bridgeObjectRelease();
      if (!__OFADD__(v17, v6))
      {
        if (v12 != v17 + v6)
        {
          char v26 = 0;
          return v26 & 1;
        }
        char v23 = v2;
        if (v2)
        {
          char v24 = v41;
          uint64_t v25 = v37;
          if (v41)
          {
            unint64_t v43 = v3;
            uint64_t v44 = v37;
            unint64_t v45 = v36;
            v42[0] = v4;
            v42[1] = v7;
            v42[2] = v9;
            outlined copy of NavigationPath.Representation(v3, v37, v36, 1);
            outlined copy of NavigationPath.Representation(v4, v7, v9, 1);
            outlined copy of NavigationPath.Representation(v3, v37, v36, 1);
            outlined copy of NavigationPath.Representation(v4, v7, v9, 1);
            char v26 = specialized static NavigationPath.CodableRepresentation.== infix(_:_:)(&v43, v42);
            outlined consume of NavigationPath.Representation(v3, v37, v36, 1);
            outlined consume of NavigationPath.Representation(v4, v7, v9, 1);
            outlined consume of NavigationPath.Representation(v4, v7, v9, 1);
            outlined consume of NavigationPath.Representation(v3, v37, v36, 1);
            return v26 & 1;
          }
        }
        else
        {
          char v24 = v41;
          uint64_t v25 = v37;
          if ((v41 & 1) == 0)
          {
            outlined copy of NavigationPath.Representation(v3, v37, v36, 0);
            outlined copy of NavigationPath.Representation(v4, v7, v9, 0);
            outlined copy of NavigationPath.Representation(v3, v37, v36, 0);
            outlined copy of NavigationPath.Representation(v4, v7, v9, 0);
            char v26 = specialized static Array<A>.== infix(_:_:)(v3, v4);
            outlined consume of NavigationPath.Representation(v4, v7, v9, 0);
            outlined consume of NavigationPath.Representation(v3, v37, v36, 0);
            outlined consume of NavigationPath.Representation(v3, v37, v36, 0);
            outlined consume of NavigationPath.Representation(v4, v7, v9, 0);
            return v26 & 1;
          }
        }
        outlined copy of NavigationPath.Representation(v3, v25, v36, v23);
        outlined copy of NavigationPath.Representation(v4, v7, v9, v24);
        outlined consume of NavigationPath.Representation(v3, v25, v36, v23);
        outlined consume of NavigationPath.Representation(v4, v7, v9, v24);
        char v26 = 0;
        return v26 & 1;
      }
      __break(1u);
LABEL_44:
      swift_bridgeObjectRetain();
      uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v27) {
        goto LABEL_4;
      }
    }
    uint64_t v35 = v7;
    if (v3 >> 62)
    {
      outlined copy of NavigationPath.Representation(v3, v2, v4, 1);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v3, v2, v4, 1);
      swift_bridgeObjectRetain();
      uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v13 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      outlined copy of NavigationPath.Representation(v3, v2, v4, 1);
      swift_bridgeObjectRetain();
      outlined copy of NavigationPath.Representation(v3, v2, v4, 1);
    }
    uint64_t v14 = *(void *)(v2 + 16);
    uint64_t v7 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
    }
    else if (!(v4 >> 62))
    {
      uint64_t v15 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_13:
      outlined consume of NavigationPath.Representation(v3, v2, v4, 1);
      BOOL v16 = __OFADD__(v7, v15);
      uint64_t v17 = v7 + v15;
      if (!v16)
      {
        uint64_t v7 = v35;
        if (!v39) {
          goto LABEL_18;
        }
        goto LABEL_51;
      }
      __break(1u);
      goto LABEL_50;
    }
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
LABEL_4:
  unint64_t v43 = v8;
  uint64_t v44 = v7;
  unint64_t v45 = v9;
  char v46 = v41;
  if (!NavigationPath.Representation.isEmpty.getter()) {
    goto LABEL_7;
  }
  if (v12)
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v28) {
      goto LABEL_7;
    }
  }
  else if (*(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_7;
  }
  unint64_t v43 = v3;
  uint64_t v44 = v2;
  unint64_t v45 = v4;
  char v46 = v11;
  if (NavigationPath.Representation.isEmpty.getter())
  {
    if (v39)
    {
      swift_bridgeObjectRetain();
      uint64_t v29 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v29 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    char v31 = v41;
    BOOL v30 = v29 == 0;
  }
  else
  {
    BOOL v30 = 0;
    char v31 = v41;
  }
  unint64_t v43 = v8;
  uint64_t v44 = v7;
  unint64_t v45 = v9;
  char v46 = v31;
  if (NavigationPath.Representation.isEmpty.getter())
  {
    if (v12)
    {
      swift_bridgeObjectRetain();
      uint64_t v32 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v32 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    BOOL v33 = v32 == 0;
  }
  else
  {
    BOOL v33 = 0;
  }
  char v26 = v30 ^ v33 ^ 1;
  return v26 & 1;
}

BOOL AnyNavigationPath.HeterogeneousBoxBase.isEmpty.getter()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 32);
  char v4 = *(unsigned char *)(v0 + 40);
  unint64_t v5 = *(void *)(v0 + 48);
  outlined copy of NavigationPath.Representation(v1, v2, v3, v4);
  swift_bridgeObjectRetain();
  if (NavigationPath.Representation.isEmpty.getter())
  {
    if (v5 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    outlined consume of NavigationPath.Representation(v1, v2, v3, v4);
    swift_bridgeObjectRelease();
    return v6 == 0;
  }
  else
  {
    outlined consume of NavigationPath.Representation(v1, v2, v3, v4);
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t initializeWithCopy for NavigationPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of NavigationPath.Representation(*(void *)a2, v5, v6, v7);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined copy of NavigationPath.Representation(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v4 = vars8;
  }
  return swift_bridgeObjectRetain();
}

uint64_t copyValueToMutableTraits #1 <A>(for:) in closure #1 in UITraitCollection.resolvedTraitCollection(with:wrapper:forImageAssetsOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)v16 - v13;
  v16[0] = a3;
  v16[1] = a4;
  EnvironmentValues.subscript.getter();
  (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(a6 + 24))(a2, v14, a5, a6);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, AssociatedTypeWitness);
}

uint64_t destroy for NavigationPath(uint64_t a1)
{
  outlined consume of NavigationPath.Representation(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));

  return swift_bridgeObjectRelease();
}

uint64_t outlined consume of NavigationPath.Representation(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t EnvironmentValues.subscript.getter()
{
  return EnvironmentValues.getBridgedValue<A>(for:)();
}

{
  return MEMORY[0x1F40FF1B8]();
}

{
  return MEMORY[0x1F40FF350]();
}

uint64_t static UITraitBridgedEnvironmentResolver.read<A>(for:from:)(uint64_t a1, uint64_t *a2)
{
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t v6 = a2;
    uint64_t v4 = *a2;
    uint64_t v5 = v6[1];
    v7[3] = swift_getAssociatedTypeWitness();
    __swift_allocate_boxed_opaque_existential_1(v7);
    v7[4] = v4;
    v7[5] = v5;
    EnvironmentValues.getBridgedValue<A>(for:)();
    swift_getAssociatedTypeWitness();
    return swift_dynamicCast();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t EnvironmentValues.getBridgedValue<A>(for:)()
{
  return EnvironmentValues.valueWithSecondaryLookup<A>(_:)();
}

uint64_t type metadata accessor for UITraitBridgedEnvironmentPropertyKeyLookup()
{
  return __swift_instantiateGenericMetadata();
}

BOOL NavigationPath.Representation.isEmpty.getter()
{
  unint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  unint64_t v3 = *(void *)(v0 + 16);
  if (*(unsigned char *)(v0 + 24))
  {
    if (v1 >> 62)
    {
      outlined copy of NavigationPath.Representation(v1, v2, v3, 1);
      swift_bridgeObjectRetain();
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_5;
      }
    }
    else
    {
      uint64_t v4 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v4)
      {
LABEL_5:
        outlined consume of NavigationPath.Representation(v1, v2, v3, 1);
        return 0;
      }
    }
    if (*(void *)(v2 + 16)) {
      goto LABEL_5;
    }
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v6 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    outlined consume of NavigationPath.Representation(v1, v2, v3, 1);
  }
  else if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    outlined consume of NavigationPath.Representation(v1, v2, v3, 0);
  }
  else
  {
    uint64_t v6 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  return v6 == 0;
}

unint64_t lazy protocol witness table accessor for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous;
  if (!lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous;
  if (!lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous;
  if (!lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyNavigationPath.ToHeterogeneous and conformance AnyNavigationPath.ToHeterogeneous);
  }
  return result;
}

uint64_t destroy for SheetPresentationModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v4 + 24) >= 0xFFFFFFFFuLL) {
    swift_release();
  }
  swift_release();
  uint64_t v5 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v6 = *(uint64_t (**)(unint64_t))(v5 + 8);
  unint64_t v7 = (((v4 + 47) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v5 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);

  return v6(v7);
}

__n128 __swift_memcpy249_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[14];
  *(_OWORD *)(a1 + 233) = *(long long *)((char *)a2 + 233);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ContextMenuModifierCore<A>@<D0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(uint64_t, long long *)@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  return static ContextMenuModifierCore._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance ListStyleInput()
{
  return MEMORY[0x1F40FD528]();
}

void *__swift_memcpy13_4(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(void *)((char *)result + 5) = *(uint64_t *)((char *)a2 + 5);
  *__n128 result = v2;
  return result;
}

__n128 __swift_memcpy65_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MergePlatformItemsView<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t *a4@<X8>)
{
  return static MergePlatformItemsView._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t (*protocol witness for ViewRendererHost.externalUpdateCount.modify in conformance _UIHostingView<A>(void *a1))()
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = _UIHostingView.externalUpdateCount.modify(v2);
  return protocol witness for ViewRendererHost.currentTimestamp.modify in conformance _UIHostingView<A>;
}

uint64_t (*_UIHostingView.externalUpdateCount.modify(void *a1))(uint64_t *a1)
{
  a1[1] = v1;
  uint64_t v3 = _UIHostingView.base.getter()[13];
  swift_release();
  *a1 = v3;
  return _UIHostingView.externalUpdateCount.modify;
}

uint64_t specialized EnvironmentValues.feedbackCache.setter()
{
  swift_weakInit();
  swift_weakAssign();
  outlined init with take of WeakBox<AnyUIKitSensoryFeedbackCache>((uint64_t)&v2, (uint64_t)v3);
  outlined init with copy of WeakBox<AnyUIKitSensoryFeedbackCache>((uint64_t)v3, (uint64_t)&v2);
  type metadata accessor for EnvironmentPropertyKey<FeedbackCacheKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<FeedbackCacheKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of WeakBox<AnyUIKitSensoryFeedbackCache>((uint64_t)v3);
}

void type metadata accessor for EnvironmentPropertyKey<FeedbackCacheKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<FeedbackCacheKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FeedbackCacheKey>);
    }
  }
}

uint64_t outlined destroy of WeakBox<AnyUIKitSensoryFeedbackCache>(uint64_t a1)
{
  type metadata accessor for WeakBox<AnyUIKitSensoryFeedbackCache>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of WeakBox<AnyUIKitSensoryFeedbackCache>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<AnyUIKitSensoryFeedbackCache>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for WeakBox<AnyUIKitSensoryFeedbackCache>()
{
  if (!lazy cache variable for type metadata for WeakBox<AnyUIKitSensoryFeedbackCache>)
  {
    type metadata accessor for AnyUIKitSensoryFeedbackCache();
    unint64_t v0 = type metadata accessor for WeakBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<AnyUIKitSensoryFeedbackCache>);
    }
  }
}

uint64_t outlined init with take of WeakBox<AnyUIKitSensoryFeedbackCache>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<AnyUIKitSensoryFeedbackCache>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FeedbackCacheKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FeedbackCacheKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FeedbackCacheKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<FeedbackCacheKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FeedbackCacheKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t type metadata accessor for AnyUIKitSensoryFeedbackCache()
{
  return self;
}

void *destructiveInjectEnumTag for ScrollTransitionConfiguration.Mode(void *result, uint64_t a2)
{
  if (a2 < 2)
  {
    result[4] = result[4] & 1 | (a2 << 62);
  }
  else
  {
    *unint64_t result = (a2 - 2);
    result[1] = 0;
    result[2] = 0;
    result[3] = 0;
    *((_OWORD *)result + 2) = xmmword_18834C6D0;
  }
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SheetPreference.Key@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }

  return outlined init with copy of SheetPreference.Value(a2, a3);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SearchContentKey@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = MEMORY[0x1E4FBB718];
  _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718]);
  uint64_t v7 = __swift_project_value_buffer(v6, a2);
  return outlined init with copy of ToolbarItemPlacement.Role?(v7, a3, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, v5, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI16CommandOperationVSgMaTm_2);
}

uint64_t outlined init with copy of ToolbarItemPlacement.Role?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t FileImportExportBridge.PresentationState.update(preferences:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v94 = a2;
  type metadata accessor for (FileImportExportBridge.Presentation?, FileImportExportBridge.Presentation?)();
  uint64_t v92 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v93 = (uint64_t)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileExportOperation?(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v88 = (uint64_t)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for FileExportOperation(0);
  uint64_t v86 = *(void *)(v7 - 8);
  uint64_t v87 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v83 = (uint64_t)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PreferenceValues.Value<FileExportOperation?>(0);
  uint64_t v96 = v9;
  MEMORY[0x1F4188790](v9);
  v97 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileImportOperation?(0);
  MEMORY[0x1F4188790](v11 - 8);
  long long v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = type metadata accessor for FileImportOperation(0);
  uint64_t v14 = *(void *)(v90 - 8);
  MEMORY[0x1F4188790](v90);
  uint64_t v85 = (uint64_t)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PreferenceValues.Value<FileImportOperation?>(0);
  uint64_t v17 = v16 - 8;
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileImportExportBridge.Presentation?(0);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v84 = (uint64_t)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v80 = (uint64_t)&v78 - v23;
  MEMORY[0x1F4188790](v24);
  uint64_t v82 = (uint64_t)&v78 - v25;
  MEMORY[0x1F4188790](v26);
  uint64_t v79 = (uint64_t)&v78 - v27;
  MEMORY[0x1F4188790](v28);
  uint64_t v81 = (uint64_t)&v78 - v29;
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v78 - v31;
  uint64_t v33 = *a1;
  uint64_t v34 = type metadata accessor for FileImportExportBridge.Presentation(0);
  uint64_t v91 = *(void *)(v34 - 8);
  uint64_t v35 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v91 + 56);
  uint64_t v98 = (uint64_t)v32;
  v89 = v35;
  v35((uint64_t)v32, 1, 1, v34);
  uint64_t v100 = v33;
  PreferenceValues.subscript.getter();
  uint64_t v36 = type metadata accessor for FileImportExportBridge.PresentationState(0);
  uint64_t v37 = *(int *)(v36 + 20);
  uint64_t v38 = v95;
  int v39 = *(_DWORD *)(v95 + v37);
  uint64_t v40 = *(int *)(v17 + 36);
  v99 = v19;
  int v41 = *(_DWORD *)&v19[v40];
  if (v39 == -1 || v41 == -1 || v39 != v41)
  {
    *(_DWORD *)(v95 + v37) = v41;
    outlined init with copy of FileImportExportBridge.PresentationState((uint64_t)v99, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for FileImportOperation?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v90) == 1)
    {
      outlined destroy of FileImportExportBridge.Presentation((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for FileImportOperation?);
    }
    else
    {
      uint64_t v43 = v98;
      outlined destroy of FileImportExportBridge.Presentation(v98, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
      uint64_t v44 = (uint64_t)v13;
      uint64_t v45 = v85;
      outlined init with take of FileImportExportBridge.Presentation?(v44, v85, type metadata accessor for FileImportOperation);
      outlined init with take of FileImportExportBridge.Presentation?(v45, v43, type metadata accessor for FileImportOperation);
      swift_storeEnumTagMultiPayload();
      v89(v43, 0, 1, v34);
    }
    char v42 = 0;
  }
  else
  {
    char v42 = 1;
  }
  uint64_t v100 = v33;
  uint64_t v46 = v96;
  uint64_t v47 = (uint64_t)v97;
  PreferenceValues.subscript.getter();
  uint64_t v48 = *(int *)(v36 + 24);
  int v49 = *(_DWORD *)(v38 + v48);
  int v50 = *(_DWORD *)(v47 + *(int *)(v46 + 28));
  BOOL v52 = v49 != -1 && v50 != -1 && v49 == v50;
  int v53 = v52;
  if (v52)
  {
    uint64_t v54 = v98;
    if (v42)
    {
      outlined destroy of FileImportExportBridge.Presentation(v47, (uint64_t (*)(void))type metadata accessor for PreferenceValues.Value<FileExportOperation?>);
      outlined destroy of FileImportExportBridge.Presentation((uint64_t)v99, (uint64_t (*)(void))type metadata accessor for PreferenceValues.Value<FileImportOperation?>);
      outlined destroy of FileImportExportBridge.Presentation(v54, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
      uint64_t updated = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 56))(v94, 1, 1, updated);
    }
  }
  else
  {
    *(_DWORD *)(v38 + v48) = v50;
    uint64_t v57 = v88;
    outlined init with copy of FileImportExportBridge.PresentationState(v47, v88, (uint64_t (*)(void))type metadata accessor for FileExportOperation?);
    int v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v86 + 48))(v57, 1, v87);
    uint64_t v54 = v98;
    if (v58 == 1)
    {
      outlined destroy of FileImportExportBridge.Presentation(v57, (uint64_t (*)(void))type metadata accessor for FileExportOperation?);
    }
    else
    {
      outlined destroy of FileImportExportBridge.Presentation(v98, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
      uint64_t v59 = v57;
      uint64_t v60 = v83;
      outlined init with take of FileImportExportBridge.Presentation?(v59, v83, type metadata accessor for FileExportOperation);
      outlined init with take of FileImportExportBridge.Presentation?(v60, v54, type metadata accessor for FileExportOperation);
      swift_storeEnumTagMultiPayload();
      v89(v54, 0, 1, v34);
    }
  }
  uint64_t v61 = v93;
  uint64_t v62 = v93 + *(int *)(v92 + 48);
  outlined init with copy of FileImportExportBridge.PresentationState(v38, v93, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
  outlined init with copy of FileImportExportBridge.PresentationState(v54, v62, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
  char v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
  if (v63(v62, 1, v34) == 1)
  {
    if (v63(v61, 1, v34) == 1)
    {
      uint64_t v64 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 56))(v94, 1, 1, v64);
LABEL_45:
      outlined assign with copy of FileImportExportBridge.Presentation?(v54, v38);
      outlined destroy of FileImportExportBridge.Presentation(v47, (uint64_t (*)(void))type metadata accessor for PreferenceValues.Value<FileExportOperation?>);
      outlined destroy of FileImportExportBridge.Presentation((uint64_t)v99, (uint64_t (*)(void))type metadata accessor for PreferenceValues.Value<FileImportOperation?>);
      return outlined destroy of FileImportExportBridge.Presentation(v54, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
    }
LABEL_34:
    outlined destroy of FileImportExportBridge.Presentation(v61, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
    uint64_t v69 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
    uint64_t v70 = v94;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v70, 0, 1, v69);
    goto LABEL_45;
  }
  LODWORD(v98) = v53;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  unsigned int v66 = v63(v61, 1, v34);
  if (EnumCaseMultiPayload == 1)
  {
    if (v66 != 1)
    {
      uint64_t v67 = v81;
      outlined init with copy of FileImportExportBridge.PresentationState(v61, v81, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        if ((v98 & 1) == 0)
        {
          uint64_t v68 = v79;
          outlined init with copy of FileImportExportBridge.PresentationState(v54, v79, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
          if (v63(v68, 1, v34) == 1)
          {
            __break(1u);
            goto LABEL_34;
          }
          goto LABEL_43;
        }
LABEL_41:
        uint64_t v74 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56))(v94, 1, 1, v74);
LABEL_44:
        outlined destroy of FileImportExportBridge.Presentation(v67, type metadata accessor for FileImportExportBridge.Presentation);
        outlined destroy of FileImportExportBridge.Presentation(v62, type metadata accessor for FileImportExportBridge.Presentation);
        outlined destroy of FileImportExportBridge.Presentation(v61, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
        goto LABEL_45;
      }
      goto LABEL_37;
    }
LABEL_38:
    outlined destroy of FileImportExportBridge.Presentation(v62, type metadata accessor for FileImportExportBridge.Presentation);
    outlined destroy of FileImportExportBridge.Presentation(v61, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
    uint64_t v71 = v84;
    outlined init with copy of FileImportExportBridge.PresentationState(v54, v84, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v63)(v71, 1, v34);
    if (result != 1)
    {
      uint64_t v72 = v94;
      outlined init with take of FileImportExportBridge.Presentation?(v71, v94, type metadata accessor for FileImportExportBridge.Presentation);
      uint64_t v73 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v72, 0, 1, v73);
      goto LABEL_45;
    }
    __break(1u);
    goto LABEL_47;
  }
  if (v66 == 1) {
    goto LABEL_38;
  }
  uint64_t v67 = v82;
  outlined init with copy of FileImportExportBridge.PresentationState(v61, v82, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
LABEL_37:
    outlined destroy of FileImportExportBridge.Presentation(v67, type metadata accessor for FileImportExportBridge.Presentation);
    goto LABEL_38;
  }
  if (v42) {
    goto LABEL_41;
  }
  uint64_t v68 = v80;
  outlined init with copy of FileImportExportBridge.PresentationState(v54, v80, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v63)(v68, 1, v34);
  if (result != 1)
  {
LABEL_43:
    uint64_t v75 = v68;
    uint64_t v76 = v94;
    outlined init with take of FileImportExportBridge.Presentation?(v75, v94, type metadata accessor for FileImportExportBridge.Presentation);
    uint64_t v77 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56))(v76, 0, 1, v77);
    goto LABEL_44;
  }
LABEL_47:
  __break(1u);
  return result;
}

uint64_t outlined destroy of FileImportExportBridge.Presentation(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for AsyncImage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  swift_release();
  swift_release();
  uint64_t v7 = a1 + *(int *)(a2 + 48);
  swift_release();
  uint64_t v8 = type metadata accessor for LoadingState(0);
  uint64_t v9 = v7 + *(int *)(v8 + 20);
  if (!v6(v9, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v9, v4);
  }
  outlined consume of AsyncImagePhase(*(void *)(v7 + *(int *)(v8 + 24)));
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);

  return swift_release();
}

void outlined consume of AsyncImagePhase(unint64_t a1)
{
  if (a1 >> 62 == 1)
  {
  }
  else if (!(a1 >> 62))
  {
    swift_release();
  }
}

uint64_t destroy for PlatformItemList.Item(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = *(void *)(a1 + 184);
  unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
  {
    int v6 = *(unsigned __int8 *)(a1 + 72);
    if (v6 != 255)
    {
      outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v6);
      uint64_t v4 = *(void *)(a1 + 184);
      unint64_t v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    }
    if (v5 != 0x1FFFFFFFELL) {
      outlined consume of AccessibilityImageLabel(*(void *)(a1 + 168), *(void *)(a1 + 176), v4);
    }
    swift_unknownObjectRelease();
    swift_release();
  }
  if (*(void *)(a1 + 256))
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void **)(a1 + 264);
    if ((unint64_t)v7 >= 2) {

    }
    swift_release();
    swift_release();
  }
  unint64_t v8 = *(void *)(a1 + 328);
  if (v8 >> 2 != 0xFFFFFFFF) {
    outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(void *)(a1 + 304), *(void *)(a1 + 312), *(void *)(a1 + 320), v8, *(void *)(a1 + 336), *(void *)(a1 + 344), *(void *)(a1 + 352), *(void *)(a1 + 360), *(void *)(a1 + 368), *(void *)(a1 + 376), *(void *)(a1 + 384), *(void *)(a1 + 392));
  }
  uint64_t v9 = *(void *)(a1 + 408);
  if (v9)
  {
    if (v9 == 1) {
      goto LABEL_20;
    }
    swift_release();
  }
  if (*(void *)(a1 + 424)) {
    swift_release();
  }
  if (*(void *)(a1 + 440)) {
    swift_release();
  }
LABEL_20:
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 504)) {
    swift_release();
  }
  if (*(void *)(a1 + 528))
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  if (*(void *)(a1 + 552) != 1)
  {
    swift_release();
    if (*(void *)(a1 + 560)) {
      swift_release();
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + *(int *)(a2 + 112);
  uint64_t v11 = type metadata accessor for CommandOperation();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11))
  {
    uint64_t v12 = v10 + *(int *)(v11 + 20);
    outlined consume of Text.Storage(*(void *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));
    swift_bridgeObjectRelease();
    uint64_t v13 = v12 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v14 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
    if (*(void *)(v10 + *(int *)(v11 + 24))) {
      swift_release();
    }
  }

  return swift_release();
}

uint64_t initializeWithCopy for PlatformItemList.Item(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v5 = *(void **)a2;
  int v6 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v9 = a1 + 64;
  uint64_t v10 = a2 + 64;
  unint64_t v11 = *(void *)(a2 + 184);
  id v12 = v5;
  id v13 = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v11 >> 1 != 4294967294)
  {
    int v23 = *(unsigned __int8 *)(a2 + 72);
    if (v23 == 255)
    {
      *(void *)uint64_t v9 = *(void *)v10;
      *(unsigned char *)(v9 + 8) = *(unsigned char *)(v10 + 8);
    }
    else
    {
      uint64_t v24 = *(void **)(a2 + 64);
      outlined copy of GraphicsImage.Contents(v24, *(unsigned char *)(a2 + 72));
      *(void *)(a1 + 64) = v24;
      *(unsigned char *)(a1 + 72) = v23;
      unint64_t v11 = *(void *)(a2 + 184);
    }
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
    *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
    long long v25 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v25;
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
    *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
    if (v11 >> 1 == 0xFFFFFFFF)
    {
      long long v26 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v26;
    }
    else
    {
      uint64_t v27 = *(void *)(a2 + 168);
      uint64_t v28 = *(void *)(a2 + 176);
      uint64_t v29 = *(void *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v27, v28, v11);
      *(void *)(a1 + 168) = v27;
      *(void *)(a1 + 176) = v28;
      *(void *)(a1 + 184) = v11;
      *(void *)(a1 + 192) = v29;
    }
    uint64_t v30 = *(void *)(a2 + 208);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = v30;
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
    uint64_t v31 = *(void **)(a2 + 232);
    *(void *)(a1 + 232) = v31;
    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v32 = v31;
    uint64_t v19 = *(void *)(a2 + 256);
    if (v19) {
      goto LABEL_3;
    }
LABEL_13:
    long long v33 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v33;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_14;
  }
  long long v14 = *(_OWORD *)(v10 + 144);
  *(_OWORD *)(v9 + 128) = *(_OWORD *)(v10 + 128);
  *(_OWORD *)(v9 + 144) = v14;
  *(_OWORD *)(v9 + 160) = *(_OWORD *)(v10 + 160);
  *(_DWORD *)(v9 + 175) = *(_DWORD *)(v10 + 175);
  long long v15 = *(_OWORD *)(v10 + 80);
  *(_OWORD *)(v9 + 64) = *(_OWORD *)(v10 + 64);
  *(_OWORD *)(v9 + 80) = v15;
  long long v16 = *(_OWORD *)(v10 + 112);
  *(_OWORD *)(v9 + 96) = *(_OWORD *)(v10 + 96);
  *(_OWORD *)(v9 + 112) = v16;
  long long v17 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + 16) = v17;
  long long v18 = *(_OWORD *)(v10 + 48);
  *(_OWORD *)(v9 + 32) = *(_OWORD *)(v10 + 32);
  *(_OWORD *)(v9 + 48) = v18;
  uint64_t v19 = *(void *)(a2 + 256);
  if (!v19) {
    goto LABEL_13;
  }
LABEL_3:
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v19;
  uint64_t v20 = *(void **)(a2 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v20 >= 2) {
    id v21 = v20;
  }
  *(void *)(a1 + 264) = v20;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)(a2 + 277);
  uint64_t v22 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v22;
  swift_retain();
  swift_retain();
LABEL_14:
  unint64_t v34 = *(void *)(a2 + 328);
  if (v34 >> 2 == 0xFFFFFFFF)
  {
    long long v35 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v35;
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    long long v36 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v36;
    long long v37 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v37;
  }
  else
  {
    uint64_t v38 = *(void **)(a2 + 296);
    uint64_t v39 = *(void *)(a2 + 304);
    uint64_t v40 = *(void *)(a2 + 312);
    uint64_t v41 = *(void *)(a2 + 320);
    uint64_t v42 = *(void *)(a2 + 336);
    uint64_t v43 = *(void *)(a2 + 344);
    uint64_t v44 = *(void *)(a2 + 352);
    uint64_t v87 = *(void *)(a2 + 360);
    uint64_t v88 = *(void *)(a2 + 368);
    uint64_t v89 = *(void *)(a2 + 376);
    uint64_t v91 = *(void *)(a2 + 384);
    __dsta = *(void **)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v38, v39, v40, v41, v34, v42, v43, v44, v87, v88, v89, v91, (uint64_t)__dsta);
    *(void *)(a1 + 296) = v38;
    *(void *)(a1 + 304) = v39;
    *(void *)(a1 + 312) = v40;
    *(void *)(a1 + 320) = v41;
    *(void *)(a1 + 328) = v34;
    *(void *)(a1 + 336) = v42;
    *(void *)(a1 + 344) = v43;
    *(void *)(a1 + 352) = v44;
    *(void *)(a1 + 360) = v87;
    *(void *)(a1 + 368) = v88;
    *(void *)(a1 + 376) = v89;
    *(void *)(a1 + 384) = v91;
    *(void *)(a1 + 392) = __dsta;
  }
  uint64_t v45 = *(void *)(a2 + 408);
  if (v45 == 1)
  {
    long long v46 = *(_OWORD *)(a2 + 448);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
    *(_OWORD *)(a1 + 448) = v46;
    *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
    long long v47 = *(_OWORD *)(a2 + 416);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
    *(_OWORD *)(a1 + 416) = v47;
    goto LABEL_27;
  }
  *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
  *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
  if (v45)
  {
    uint64_t v48 = *(void *)(a2 + 416);
    *(void *)(a1 + 408) = v45;
    *(void *)(a1 + 416) = v48;
    swift_retain();
    uint64_t v49 = *(void *)(a2 + 424);
    if (v49) {
      goto LABEL_21;
    }
LABEL_24:
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    uint64_t v51 = *(void *)(a2 + 440);
    if (v51) {
      goto LABEL_22;
    }
LABEL_25:
    *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
    goto LABEL_26;
  }
  *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
  uint64_t v49 = *(void *)(a2 + 424);
  if (!v49) {
    goto LABEL_24;
  }
LABEL_21:
  uint64_t v50 = *(void *)(a2 + 432);
  *(void *)(a1 + 424) = v49;
  *(void *)(a1 + 432) = v50;
  swift_retain();
  uint64_t v51 = *(void *)(a2 + 440);
  if (!v51) {
    goto LABEL_25;
  }
LABEL_22:
  uint64_t v52 = *(void *)(a2 + 448);
  *(void *)(a1 + 440) = v51;
  *(void *)(a1 + 448) = v52;
  swift_retain();
LABEL_26:
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
LABEL_27:
  uint64_t v53 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v53;
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v54 = *(void *)(a2 + 504);
  swift_bridgeObjectRetain();
  if (v54)
  {
    uint64_t v55 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v54;
    *(void *)(a1 + 512) = v55;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  uint64_t v56 = *(void *)(a2 + 528);
  if (v56)
  {
    *(void *)(a1 + 528) = v56;
    *(void *)(a1 + 536) = *(void *)(a2 + 536);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
  }
  uint64_t v57 = *(void *)(a2 + 552);
  if (v57 == 1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
  }
  else
  {
    *(void *)(a1 + 552) = v57;
    uint64_t v58 = *(void *)(a2 + 560);
    swift_retain();
    if (v58)
    {
      uint64_t v59 = *(void *)(a2 + 568);
      *(void *)(a1 + 560) = v58;
      *(void *)(a1 + 568) = v59;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    }
  }
  uint64_t v60 = *(void **)(a2 + 576);
  *(void *)(a1 + 576) = v60;
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  uint64_t v61 = *(void *)(a2 + 624);
  *(_WORD *)(a1 + 632) = *(_WORD *)(a2 + 632);
  *(unsigned char *)(a1 + 634) = *(unsigned char *)(a2 + 634);
  uint64_t v62 = a3[28];
  __dst = (unsigned char *)(a1 + v62);
  char v63 = (unsigned char *)(a2 + v62);
  *(void *)(a1 + 624) = v61;
  uint64_t v64 = type metadata accessor for CommandOperation();
  uint64_t v90 = *(void *)(v64 - 8);
  uint64_t v92 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v90 + 48);
  id v65 = v60;
  unsigned int v66 = v63;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v92(v63, 1, v64))
  {
    type metadata accessor for CommandOperation?(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(__dst, v63, *(void *)(*(void *)(v67 - 8) + 64));
  }
  else
  {
    unsigned char *__dst = *v63;
    uint64_t v68 = *(int *)(v64 + 20);
    uint64_t v69 = v64;
    uint64_t v70 = &__dst[v68];
    uint64_t v71 = &v66[v68];
    uint64_t v93 = v66;
    uint64_t v72 = *(void *)&v66[v68];
    uint64_t v73 = *((void *)v71 + 1);
    char v74 = v71[16];
    outlined copy of Text.Storage(v72, v73, v74);
    *(void *)uint64_t v70 = v72;
    *((void *)v70 + 1) = v73;
    v70[16] = v74;
    *((void *)v70 + 3) = *((void *)v71 + 3);
    uint64_t v75 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v76 = &v70[v75];
    uint64_t v77 = &v71[v75];
    uint64_t v78 = type metadata accessor for UUID();
    uint64_t v79 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v78 - 8) + 16);
    swift_bridgeObjectRetain();
    v79(v76, v77, v78);
    uint64_t v80 = *(int *)(v69 + 24);
    uint64_t v81 = &__dst[v80];
    uint64_t v82 = &v93[v80];
    if (*v82)
    {
      uint64_t v83 = v82[1];
      *uint64_t v81 = *v82;
      v81[1] = v83;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v90 + 56))(__dst, 0, 1, v69);
  }
  uint64_t v84 = a3[30];
  *(unsigned char *)(a1 + a3[29]) = *(unsigned char *)(a2 + a3[29]);
  *(unsigned char *)(a1 + v84) = *(unsigned char *)(a2 + v84);
  uint64_t v85 = a3[32];
  *(unsigned char *)(a1 + a3[31]) = *(unsigned char *)(a2 + a3[31]);
  *(unsigned char *)(a1 + v85) = *(unsigned char *)(a2 + v85);
  *(void *)(a1 + a3[33]) = *(void *)(a2 + a3[33]);
  swift_retain();
  return a1;
}

void type metadata accessor for CommandOperation?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI16CommandOperationVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s7SwiftUI16CommandOperationVSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI16CommandOperationVSgMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for PrimitiveButtonStyleContainerModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for CommandGroupPlacement(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for CommandGroupPlacement);
}

uint64_t type metadata accessor for CommandOperation()
{
  uint64_t result = type metadata singleton initialization cache for CommandOperation;
  if (!type metadata singleton initialization cache for CommandOperation) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CommandGroupPlacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_188190AE4);
}

uint64_t getEnumTagSinglePayload for CommandOperation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187D73A4C);
}

uint64_t type metadata accessor for CustomHoverEffectModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ButtonStyleContainerModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FileExportOperation.Mode(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileExportOperation.Mode);
}

uint64_t type metadata accessor for ContextMenuModifier()
{
  return __swift_instantiateGenericMetadata();
}

char *initializeWithCopy for AsyncImage(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v26 = v7;
  if (v27(a2, 1, v6))
  {
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[v9] = *(void *)&a2[v9];
  uint64_t v10 = a3[11];
  uint64_t v11 = a3[12];
  id v12 = &a1[v10];
  id v13 = &a2[v10];
  uint64_t v14 = *((void *)v13 + 1);
  *(void *)id v12 = *(void *)v13;
  *((void *)v12 + 1) = v14;
  long long v15 = &a1[v11];
  long long v16 = &a2[v11];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  uint64_t v17 = type metadata accessor for LoadingState(0);
  uint64_t v18 = *(int *)(v17 + 20);
  uint64_t v19 = &v15[v18];
  uint64_t v20 = &v16[v18];
  swift_retain();
  swift_retain();
  swift_retain();
  if (v27(v20, 1, v6))
  {
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v19, v20, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v19, 0, 1, v6);
  }
  uint64_t v22 = *(int *)(v17 + 24);
  unint64_t v23 = *(void *)&v16[v22];
  outlined copy of AsyncImagePhase(v23);
  *(void *)&v15[v22] = v23;
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
  *(void *)&v15[*(int *)(v24 + 28)] = *(void *)&v16[*(int *)(v24 + 28)];
  swift_retain();
  return a1;
}

void type metadata accessor for URL?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s10Foundation3URLVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation3URLVSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation3URLVSgMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation3URLVSgMaTm_3(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation3URLVSgMaTm_4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation3URLVSgMaTm_5(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation3URLVSgMaTm_6(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation3URLVSgMaTm_7(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s10Foundation3URLVSgMaTm_8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s10Foundation3URLVSgMaTm_9(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for LoadingState(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for LoadingState);
}

void *initializeWithCopy for LoadingState(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  if (v11(v8, 1, v9))
  {
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(a3 + 24);
  unint64_t v14 = *(void *)((char *)a2 + v13);
  outlined copy of AsyncImagePhase(v14);
  *(void *)((char *)a1 + v13) = v14;
  return a1;
}

unint64_t outlined copy of AsyncImagePhase(unint64_t result)
{
  if (result >> 62 == 1) {
    return (unint64_t)(id)(result & 0x3FFFFFFFFFFFFFFFLL);
  }
  if (!(result >> 62)) {
    return swift_retain();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for Button<Text>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F3FCE8], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

void type metadata accessor for StyleContextWriter<MenuStyleContext>()
{
  if (!lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>)
  {
    unint64_t v0 = type metadata accessor for StyleContextWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>);
    }
  }
}

uint64_t type metadata accessor for DraggingPreviewModifier()
{
  return __swift_instantiateGenericMetadata();
}

void closure #1 in UISplitViewController.hideIfNeeded(_:isAnimated:)(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = (void *)MEMORY[0x18C119DF0](v5);
  if (v6)
  {
    uint64_t v7 = v6;
    if (a2)
    {
      objc_msgSend(v6, sel_hideColumn_, a3);
    }
    else
    {
      unint64_t v8 = self;
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = v7;
      *(void *)(v9 + 24) = a3;
      uint64_t v10 = swift_allocObject();
      *(void *)(v10 + 16) = partial apply for closure #1 in closure #1 in UISplitViewController.hideIfNeeded(_:isAnimated:);
      *(void *)(v10 + 24) = v9;
      aBlock[4] = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
      aBlock[5] = v10;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_15;
      uint64_t v11 = _Block_copy(aBlock);
      id v12 = v7;
      swift_retain();
      swift_release();
      objc_msgSend(v8, sel_performWithoutAnimation_, v11);

      _Block_release(v11);
      LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if (v12) {
        __break(1u);
      }
    }
  }
}

uint64_t type metadata accessor for PopoverConditionalStateProvider()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static UIViewPlatformViewDefinition.setPath(_:shapeView:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path;
  uint64_t v3 = *(void *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path);
  uint64_t v4 = *(void *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path + 8);
  uint64_t v5 = *(void *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path + 16);
  uint64_t v6 = *(void *)(a2 + OBJC_IVAR____TtC7SwiftUIP33_A34643117F00277B93DEBAB70EC0697122_UIShapeHitTestingView_path + 24);
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 16) = v7;
  unsigned __int8 v8 = *(unsigned char *)(v2 + 32);
  *(unsigned char *)(v2 + 32) = *(unsigned char *)(a1 + 32);
  outlined init with take of Path.Storage(a1, (uint64_t)v10);
  outlined retain of Path.Storage((uint64_t)v10, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  return outlined consume of Path.Storage(v3, v4, v5, v6, v8);
}

uint64_t outlined consume of Path.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3) {
    return swift_release();
  }
  return result;
}

uint64_t outlined retain of Path.Storage(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t _s7SwiftUI4PathV7StorageOWOrTm_0(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t outlined copy of Path.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 - 2 <= 3) {
    return swift_retain();
  }
  return result;
}

uint64_t outlined init with take of Path.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type MatchedTransitionSourceModifier and conformance MatchedTransitionSourceModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type MatchedTransitionSourceModifier and conformance MatchedTransitionSourceModifier;
  if (!lazy protocol witness table cache variable for type MatchedTransitionSourceModifier and conformance MatchedTransitionSourceModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MatchedTransitionSourceModifier and conformance MatchedTransitionSourceModifier);
  }
  return result;
}

uint64_t EnvironmentValues.allowsGaugeResizing.setter()
{
  type metadata accessor for EnvironmentPropertyKey<AllowsGaugeResizingKey>();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_0(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AllowsGaugeResizingKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<AllowsGaugeResizingKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<AllowsGaugeResizingKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsGaugeResizingKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AllowsGaugeResizingKey>);
    }
  }
}

uint64_t type metadata accessor for SheetPresentationModifier()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for BaseModifier.Transform()
{
  return __swift_instantiateGenericMetadata();
}

{
  return swift_getGenericMetadata();
}

{
  return __swift_instantiateGenericMetadata();
}

uint64_t EnvironmentValues.listRowInsets.setter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  type metadata accessor for _TraitWritingModifier<ListRowInsetsTraitKey>(0, a1, a2, a3, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveListRowInsetsKey> and conformance EnvironmentPropertyKey<A>(a4, a1, a2, a3);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v4 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void key path getter for EnvironmentValues.listRowInsets : EnvironmentValues(uint64_t a1@<X8>)
{
  *(double *)a1 = EnvironmentValues.listRowInsets.getter();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
}

double EnvironmentValues.listRowInsets.getter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (*(void *)(v4 + 8))
  {
    type metadata accessor for _TraitWritingModifier<ListRowInsetsTraitKey>(0, a1, a2, a3, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveListRowInsetsKey> and conformance EnvironmentPropertyKey<A>(a4, a1, a2, a3);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for _TraitWritingModifier<ListRowInsetsTraitKey>(0, a1, a2, a3, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveListRowInsetsKey> and conformance EnvironmentPropertyKey<A>(a4, a1, a2, a3);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v10;
}

void type metadata accessor for _TraitWritingModifier<ListRowInsetsTraitKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveListRowInsetsKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _TraitWritingModifier<ListRowInsetsTraitKey>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double EnvironmentValues.listRowInsets.getter()
{
  return EnvironmentValues.listRowInsets.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowInsetsKey>, (uint64_t)&type metadata for ListRowInsetsKey, (uint64_t)&protocol witness table for ListRowInsetsKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowInsetsKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues._buttonBorderShape.setter()
{
  type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path getter for EnvironmentValues._buttonBorderShape : EnvironmentValues, serialized(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<ButtonBorderShapeKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonBorderShapeKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ButtonBorderShapeKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ButtonBorderShapeKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t EnvironmentValues.isPresentingContextMenu.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.isPresentingContextMenu.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PresentingContextMenuKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for FileImportExportBridge.Presentation?(uint64_t a1)
{
}

uint64_t type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileImportExportBridge.PresentationState.UpdateEffect);
}

uint64_t type metadata accessor for NavigationDestinationModifier()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect?(uint64_t a1)
{
}

void type metadata accessor for PreferenceValues.Value<FileImportOperation?>(uint64_t a1)
{
}

void type metadata accessor for PreferenceValues.Value<FileExportOperation?>(uint64_t a1)
{
}

uint64_t type metadata accessor for FileImportExportBridge.Presentation(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileImportExportBridge.Presentation);
}

uint64_t type metadata accessor for FileImportExportBridge.PresentationState(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileImportExportBridge.PresentationState);
}

uint64_t type metadata accessor for _TabViewStyleWriter()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for NullSheetAnchor<SheetPreference.Key>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for ScrollBehaviorModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t EnvironmentValues.labelIconToTitleSpacing.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<LabelIconToTitleSpacingKey>();
    _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_1(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelIconToTitleSpacingKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelIconToTitleSpacingKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<LabelIconToTitleSpacingKey>();
    _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_1(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<LabelIconToTitleSpacingKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<LabelIconToTitleSpacingKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<LabelIconToTitleSpacingKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<LabelIconToTitleSpacingKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<LabelIconToTitleSpacingKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BadgeModifier and conformance BadgeModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type BadgeModifier and conformance BadgeModifier;
  if (!lazy protocol witness table cache variable for type BadgeModifier and conformance BadgeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgeModifier and conformance BadgeModifier);
  }
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance FileImportOperation.Key@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FileImportOperation(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t type metadata accessor for FileImportOperation(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileImportOperation);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance FileExportOperation.Key@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for FileExportOperation(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t type metadata accessor for FileExportOperation(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileExportOperation);
}

uint64_t type metadata accessor for ToolbarModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t EnvironmentValues.effectiveListRowInsets.setter()
{
  return EnvironmentValues.listRowInsets.setter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveListRowInsetsKey>, (uint64_t)&unk_1ED446760, (uint64_t)&protocol witness table for EffectiveListRowInsetsKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EffectiveListRowInsetsKey> and conformance EnvironmentPropertyKey<A>);
}

double EnvironmentValues.effectiveListRowInsets.getter()
{
  return EnvironmentValues.listRowInsets.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveListRowInsetsKey>, (uint64_t)&unk_1ED446760, (uint64_t)&protocol witness table for EffectiveListRowInsetsKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EffectiveListRowInsetsKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.uiKitCellState.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<UIKitCellStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UIKitCellStateKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<UIKitCellStateKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<UIKitCellStateKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UIKitCellStateKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<UIKitCellStateKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v6) {
    int v1 = 0x10000;
  }
  else {
    int v1 = 0;
  }
  if (v5) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  return v2 | v4 | v1;
}

uint64_t View.popover<A>(isPresented:attachmentAnchor:content:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(void *)a4;
  uint64_t v10 = *(void *)(a4 + 8);
  char v11 = *(unsigned char *)(a4 + 16);
  v18[0] = a1;
  v18[1] = a2;
  char v19 = a3;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v24 = 0;
  v16[0] = v9;
  v16[1] = v10;
  char v17 = v11;
  uint64_t v12 = type metadata accessor for PopoverConditionalStateProvider();
  swift_getWitnessTable();
  PopoverPresentationModifier.init(provider:attachmentAnchor:arrowEdges:isDetachable:keyType:attachmentBehavior:)((uint64_t)v18, v16, 256, 0, 1, 0, v12, (uint64_t)v25);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v9, v10, v11);
  uint64_t v13 = type metadata accessor for PopoverPresentationModifier();
  MEMORY[0x18C113660](v25, a7, v13, a9);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(*(void *)(v13 - 8) + 8))(v25, v13);
}

uint64_t type metadata accessor for PopoverPresentationModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for NullSheetAnchor()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for _PreferenceWritingModifier<ToolbarItemViewHiddenKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for FileExportOperation?(uint64_t a1)
{
}

void type metadata accessor for FileImportOperation?(uint64_t a1)
{
}

void type metadata accessor for (FileImportExportBridge.Presentation?, FileImportExportBridge.Presentation?)()
{
  if (!lazy cache variable for type metadata for (FileImportExportBridge.Presentation?, FileImportExportBridge.Presentation?))
  {
    type metadata accessor for FileImportExportBridge.Presentation?(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (FileImportExportBridge.Presentation?, FileImportExportBridge.Presentation?));
    }
  }
}

uint64_t type metadata accessor for NavigationLinkButtonStyle.Payload()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for NavigationLinkButtonStyle()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined consume of StateOrBinding<Bool>(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result = swift_release();
  if (a4)
  {
    return swift_release();
  }
  return result;
}

uint64_t EnvironmentValues.isScrollViewTransformClippingEnabled.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<FocusGroupIDKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    char v1 = v8;
    outlined destroy of ScrollEnvironmentProperties((uint64_t)&v7);
    if ((v1 & 1) == 0)
    {
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
LABEL_7:
      swift_release_n();
      char v4 = v6[2];
      outlined destroy of ScrollEnvironmentProperties((uint64_t)v6);
      char v3 = v4 ^ 1;
      return v3 & 1;
    }
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<FocusGroupIDKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>, (uint64_t)&type metadata for ScrollEnvironmentPropertiesKey, (uint64_t)&protocol witness table for ScrollEnvironmentPropertiesKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
    swift_release_n();
    char v2 = v8;
    outlined destroy of ScrollEnvironmentProperties((uint64_t)&v7);
    if ((v2 & 1) == 0)
    {
      swift_retain_n();
      PropertyList.subscript.getter();
      goto LABEL_7;
    }
  }
  char v3 = 1;
  return v3 & 1;
}

void type metadata accessor for EnvironmentPropertyKey<FocusGroupIDKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for ScrollTargetVisibilityChangeModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SceneBridgeReader()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for TextField<Text>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t EnvironmentValues.scrollProperties.setter(uint64_t a1)
{
  outlined init with copy of ScrollEnvironmentProperties(a1, (uint64_t)&v4);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of ScrollEnvironmentProperties(a1);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for [HandGestureShortcutPaginationDirection](255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties>, (uint64_t)&type metadata for ScrollEnvironmentProperties, MEMORY[0x1E4F41280]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollEnvironmentProperties> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

void *type metadata accessor for LazyTransaction()
{
  return &unk_1ED47E4D8;
}

uint64_t type metadata accessor for WrappedButtonStyleBody.ArchiveBody()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t EnvironmentValues.isNavigationSplitViewTransparent.getter()
{
  return EnvironmentValues.isSelectable.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentNavigationSplitViewKey>, (uint64_t)&unk_1ED43E3A8, (uint64_t)&protocol witness table for ContainerBackgroundKeys.TransparentNavigationSplitViewKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentNavigationSplitViewKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t destroy for FileImportExportBridge.PresentationState(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FileImportExportBridge.Presentation(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
  if (!result)
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for FileExportOperation.Mode(0);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          uint64_t v4 = type metadata accessor for URL();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
          type metadata accessor for FileExportOperation.Move(0);
          swift_release();
          goto LABEL_22;
        case 1u:
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_22;
        case 2u:
          outlined consume of FileExportOperation.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_22;
        case 3u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
LABEL_22:
          swift_release();
          break;
        default:
          break;
      }
      long long v16 = (int *)type metadata accessor for FileExportOperation(0);
      swift_bridgeObjectRelease();
      uint64_t v17 = a1 + v16[6];
      uint64_t v18 = type metadata accessor for URL();
      uint64_t v19 = *(void *)(v18 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18)) {
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
      }
      uint64_t v20 = a1 + v16[7];
      if (*(void *)(v20 + 24))
      {
        outlined consume of Text.Storage(*(void *)v20, *(void *)(v20 + 8), *(unsigned char *)(v20 + 16));
        swift_bridgeObjectRelease();
      }
      uint64_t v21 = a1 + v16[8];
      if (*(void *)(v21 + 24))
      {
        outlined consume of Text.Storage(*(void *)v21, *(void *)(v21 + 8), *(unsigned char *)(v21 + 16));
        swift_bridgeObjectRelease();
      }
      uint64_t v22 = a1 + v16[9];
      if (*(void *)(v22 + 24))
      {
        outlined consume of Text.Storage(*(void *)v22, *(void *)(v22 + 8), *(unsigned char *)(v22 + 16));
        swift_bridgeObjectRelease();
      }
      uint64_t v23 = a1 + v16[10];
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v25 = v24;
      uint64_t v27 = *(void *)(v24 - 8);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v23, 1, v24);
      if (!result)
      {
        uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t))(v27 + 8);
        return v26(v23, v25);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      char v5 = (int *)type metadata accessor for FileImportOperation(0);
      uint64_t v6 = a1 + v5[5];
      uint64_t v7 = type metadata accessor for URL();
      uint64_t v8 = *(void *)(v7 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7)) {
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
      }
      uint64_t v9 = a1 + v5[6];
      if (*(void *)(v9 + 24))
      {
        outlined consume of Text.Storage(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
        swift_bridgeObjectRelease();
      }
      uint64_t v10 = a1 + v5[7];
      if (*(void *)(v10 + 24))
      {
        outlined consume of Text.Storage(*(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));
        swift_bridgeObjectRelease();
      }
      uint64_t v11 = a1 + v5[8];
      if (*(void *)(v11 + 24))
      {
        outlined consume of Text.Storage(*(void *)v11, *(void *)(v11 + 8), *(unsigned char *)(v11 + 16));
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      uint64_t v12 = a1 + v5[11];
      type metadata accessor for Predicate<Pack{URL}>();
      uint64_t v14 = v13;
      uint64_t v15 = *(void *)(v13 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v12, 1, v13)) {
        (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v12, v14);
      }
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t EnvironmentValues.toolbarCustomizationVisibility.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.sceneSession.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneSessionKey>, (uint64_t)&unk_1ED41B530, (uint64_t)&protocol witness table for SceneSessionKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneSessionKey>, (uint64_t)&unk_1ED41B530, (uint64_t)&protocol witness table for SceneSessionKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SceneSessionKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneSessionKey>, (uint64_t)&unk_1ED41B530, (uint64_t)&protocol witness table for SceneSessionKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SceneSessionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneSessionKey>, (uint64_t)&unk_1ED41B530, (uint64_t)&protocol witness table for SceneSessionKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (v3[8])
  {
    outlined destroy of WeakBox<UISceneSession>?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WeakBox<UISceneSession>?);
    return 0;
  }
  else
  {
    uint64_t v1 = MEMORY[0x18C119DF0](v3);
    outlined destroy of WeakBox<UISceneSession>((uint64_t)v3);
  }
  return v1;
}

uint64_t outlined destroy of WeakBox<UISceneSession>(uint64_t a1)
{
  type metadata accessor for FallbackDelegateBox<NSObject>(0, &lazy cache variable for type metadata for WeakBox<UISceneSession>, (unint64_t *)&lazy cache variable for type metadata for UISceneSession, 0x1E4FB1BA0, MEMORY[0x1E4F41720]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t EnvironmentValues.isNavigationSplitViewTransparent.setter(uint64_t a1)
{
  return EnvironmentValues.isSelectable.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentNavigationSplitViewKey>, (uint64_t)&unk_1ED43E3A8, (uint64_t)&protocol witness table for ContainerBackgroundKeys.TransparentNavigationSplitViewKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentNavigationSplitViewKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI18StyleContextWriterVyAA04MenucD0VGACyxGAA12ViewModifierAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t EnvironmentValues.menuIndicatorProminenceReduced.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedMenuIndicatorProminence>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ReducedMenuIndicatorProminence> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedMenuIndicatorProminence>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.menuIndicatorProminenceReduced.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedMenuIndicatorProminence>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ReducedMenuIndicatorProminence> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedMenuIndicatorProminence>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedMenuIndicatorProminence>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ReducedMenuIndicatorProminence> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ReducedMenuIndicatorProminence>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t type metadata accessor for DialogActionContext.CancelType(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for DialogActionContext.CancelType);
}

void type metadata accessor for Predicate<Pack{URL}>()
{
  if (!lazy cache variable for type metadata for Predicate<Pack{URL}>)
  {
    type metadata accessor for URL();
    unint64_t v0 = type metadata accessor for Predicate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Predicate<Pack{URL}>);
    }
  }
}

uint64_t EnvironmentValues.focusBridge.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for FocusStateBindingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for FocusStateBindingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of WeakBox<FocusBridge>((uint64_t)v3);
  return Strong;
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for LayoutRadioGroupStyle<_HStackLayout>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>, (uint64_t)&type metadata for KeyboardShortcutPickerOptionTraitKey, (uint64_t)&protocol witness table for KeyboardShortcutPickerOptionTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t EnvironmentValues.alwaysOnFrameSpecifier.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnFrameSpecifier>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnFrameSpecifier> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnFrameSpecifier>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnFrameSpecifier>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnFrameSpecifier> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnFrameSpecifier>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.supportsSystemDrag.setter()
{
  type metadata accessor for _PreferenceWritingModifier<DragItemTimings.Key>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SupportsSystemDragKey>, (uint64_t)&unk_1ED421DF8, (uint64_t)&protocol witness table for EnvironmentValues.SupportsSystemDragKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.PrefersFullSizeDragPreviewsKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SupportsSystemDragKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SupportsSystemDragKey>, (uint64_t)&unk_1ED421DF8, (uint64_t)&protocol witness table for EnvironmentValues.SupportsSystemDragKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.scenePhase.setter()
{
  type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues.subscript.setter(void *a1)
{
  return specialized EnvironmentValues.subscript.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey>, (uint64_t)&type metadata for NSManagedObjectContextEnvironmentKey, (uint64_t)&protocol witness table for NSManagedObjectContextEnvironmentKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NSManagedObjectContextEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UndoManagerKey>, (uint64_t)&type metadata for UndoManagerKey, (uint64_t)&protocol witness table for UndoManagerKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnFrameSpecifier>, (uint64_t)&type metadata for AlwaysOnFrameSpecifier, (uint64_t)&protocol witness table for AlwaysOnFrameSpecifier, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnFrameSpecifier> and conformance EnvironmentPropertyKey<A>);
}

{
  return specialized EnvironmentValues.subscript.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultAppStorageDefaultsKey>, (uint64_t)&type metadata for DefaultAppStorageDefaultsKey, (uint64_t)&protocol witness table for DefaultAppStorageDefaultsKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DefaultAppStorageDefaultsKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t specialized EnvironmentValues.subscript.setter(void *a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a5, a2);
  id v9 = a1;
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.sceneAllowsSecureDrawing.setter()
{
  type metadata accessor for _PreferenceWritingModifier<ToolbarItemViewHiddenKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.sceneAllowsSecureDrawing.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for _PreferenceWritingModifier<ToolbarItemViewHiddenKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for _PreferenceWritingModifier<ToolbarItemViewHiddenKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<SceneAllowsSecureDrawingKey>, (uint64_t)&type metadata for SceneAllowsSecureDrawingKey, (uint64_t)&protocol witness table for SceneAllowsSecureDrawingKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SceneAllowsSecureDrawingKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t type metadata accessor for _PagingView()
{
  return swift_getGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>> and conformance <> ModifiedContent<A(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for MainMenuItem.Content()
{
  uint64_t result = type metadata singleton initialization cache for MainMenuItem.Content;
  if (!type metadata singleton initialization cache for MainMenuItem.Content) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata accessor for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>()
{
  if (!lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<PresentationOptionsPreferenceKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<AllowsSecureDrawingKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<AllowsSecureDrawingKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<AllowsSecureDrawingKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<ToolbarItemViewHiddenKey>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<AllowsSecureDrawingKey>, (uint64_t)&type metadata for AllowsSecureDrawingKey, (uint64_t)&protocol witness table for AllowsSecureDrawingKey, MEMORY[0x1E4F40F90]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<AllowsSecureDrawingKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>);
    }
  }
}

void type metadata accessor for LayoutRadioGroupStyle<_HStackLayout>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>);
    _s7SwiftUI19ToggleStyleModifierVyAA06ButtoncD0VGMaTm_0(255, &lazy cache variable for type metadata for ToggleStyleModifier<PlatformFallbackToggleStyle>, (void (*)(void))lazy protocol witness table accessor for type PlatformFallbackToggleStyle and conformance PlatformFallbackToggleStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, ToggleStyleModifier<PlatformFallbackToggleStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, ToggleStyleModifier<AccessibilityToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToggleStyleModifier<ToolbarToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, ToggleStyleModifier<CheckmarkToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Toggle<ToggleStyleConfiguration.Label>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ToggleStyleModifier<ButtonToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, ToggleStyleModifier<DefaultListToggleStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LazyTransaction(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 18) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 18) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t @objc UIHostingController.prefersStatusBarHidden.getter(void *a1)
{
  id v1 = a1;
  char v2 = UIHostingController.prefersStatusBarHidden.getter();

  return v2 & 1;
}

uint64_t UIHostingController._prefersStatusBarHidden.getter()
{
  return _UIHostingView.prefersStatusBarHidden.getter() & 1;
}

uint64_t partial apply for closure #1 in ScrollViewReader.body.getter(uint64_t a1)
{
  return closure #1 in ScrollViewReader.body.getter(a1, *(uint64_t (**)(uint64_t *))(v1 + 32));
}

uint64_t destroy for ToolbarAppearanceConfiguration(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  swift_release();
  swift_release();
  uint64_t v4 = *(void *)(a1 + 64);

  return a3(v4);
}

uint64_t getEnumTagSinglePayload for HandGestureShortcutInteractiveControl.BorderShape(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t initializeWithTake for PickerBuilder.Content(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

ValueMetadata *type metadata accessor for BorderlessButtonStyle()
{
  return &type metadata for BorderlessButtonStyle;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance PresentSharingPickerKey@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI26PresentSharingPickerActionVSgWOi0_(v3);
  return outlined init with take of SharingPickerHostModifier.Model?((uint64_t)v3, a1, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
}

double _s7SwiftUI26PresentSharingPickerActionVSgWOi0_(_OWORD *a1)
{
  double result = 0.0;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t key path getter for EnvironmentValues.presentSharingPicker : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  EnvironmentValues.presentSharingPicker.getter((uint64_t)v3);
  return _s7SwiftUI25SharingPickerHostModifier33_16FA549D504C127F429806EC47FAADE4LLV5ModelVSgWObTm_0((uint64_t)v3, a1, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
}

uint64_t EnvironmentValues.presentSharingPicker.getter@<X0>(uint64_t a1@<X8>)
{
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PresentSharingPickerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PresentSharingPickerKey>, (uint64_t)&type metadata for PresentSharingPickerKey, (uint64_t)&protocol witness table for PresentSharingPickerKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentSharingPickerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PresentSharingPickerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<PresentSharingPickerKey>, (uint64_t)&type metadata for PresentSharingPickerKey, (uint64_t)&protocol witness table for PresentSharingPickerKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentSharingPickerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  outlined init with take of SharingPickerHostModifier.Model?((uint64_t)v5, (uint64_t)v4, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
  return outlined init with take of SharingPickerHostModifier.Model?((uint64_t)v4, a1, &lazy cache variable for type metadata for PresentSharingPickerAction?, (uint64_t)&type metadata for PresentSharingPickerAction);
}

uint64_t outlined init with take of SharingPickerHostModifier.Model?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for _ContiguousArrayStorage<Any>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI25SharingPickerHostModifier33_16FA549D504C127F429806EC47FAADE4LLV5ModelVSgWObTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for CollectionOfOne<String>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<Any>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for CollectionOfOne<String>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<PresentSharingPickerKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentSharingPickerKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentSharingPickerKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentSharingPickerKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<PresentSharingPickerKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<PresentSharingPickerKey>, (uint64_t)&type metadata for PresentSharingPickerKey, (uint64_t)&protocol witness table for PresentSharingPickerKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentSharingPickerKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t initializeWithCopy for _JSONKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

double static AccessibilityActionKind.default.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t storeEnumTagSinglePayload for PresentationOptionsPreference(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 136) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 137) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 137) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance NavigationCommonTransformEnvironment(uint64_t a1, uint64_t a2)
{
  return specialized static NavigationCommonTransformEnvironment.makeEnvironment(environment:)(a2);
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance UpdateEnvironmentToAllowedBehaviors(uint64_t a1, uint64_t a2)
{
  return specialized static UpdateEnvironmentToAllowedBehaviors.makeEnvironment(environment:)(a2);
}

__n128 __swift_memcpy34_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance MakeBody<A>(uint64_t a1)
{
  return MakeBody.value.getter(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

void partial apply for closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)()
{
  closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(unsigned char *)(v0 + 40));
}

ValueMetadata *type metadata accessor for ScrollViewConfiguration()
{
  return &type metadata for ScrollViewConfiguration;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance NavigationPropertiesKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance NavigationPropertiesKey(&one-time initialization token for defaultValue, (uint64_t)static NavigationPropertiesKey.defaultValue, a1);
}

uint64_t initializeWithCopy for ListContentStyling(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v7 = a2 + 72;
  uint64_t v6 = *(void *)(a2 + 72);
  swift_retain();
  swift_retain();
  if (v6 == 1)
  {
    *(void *)(a1 + 72) = *(void *)v7;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(v7 + 8);
  }
  else
  {
    *(void *)(a1 + 72) = v6;
    *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
    swift_retain();
  }
  return a1;
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance ShadowRowCollection<A>()
{
  swift_getWitnessTable();

  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t _UIHostingView.externalUpdateCount.getter()
{
  uint64_t v0 = _UIHostingView.base.getter()[13];
  swift_release();
  return v0;
}

uint64_t storeEnumTagSinglePayload for ListContentStyling(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 81) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

uint64_t base witness table accessor for PropertyKey in SourceInput<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for implicit closure #1 in static TransactionalPreferenceTransformModifier._makeView(modifier:inputs:body:)()
{
  return *(unsigned int *)(v0 + 32);
}

void SwiftUIGlue2.systemDefaultDynamicTypeSize.getter(char *a1@<X8>)
{
  id v2 = (id)_UIApplicationDefaultContentSizeCategory();
  DynamicTypeSize.init(uiSizeCategory:)(v2, &v4);
  char v3 = v4;
  if (v4 == 12) {
    char v3 = 3;
  }
  *a1 = v3;
}

uint64_t _UIApplicationDefaultContentSizeCategory()
{
  return [MEMORY[0x1E4FB1438] _defaultContentSizeCategory];
}

uint64_t one-time initialization function for configuredForPlatform()
{
  static EnvironmentValues.configuredForPlatform = 0;
  unk_1EB3084E0 = 0;
  return EnvironmentValues._configureForPlatform(traitCollection:)(0);
}

uint64_t key path setter for EnvironmentValues.listItemTint : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  outlined copy of Transaction?(*a1);
  specialized EnvironmentValues.subscript.setter(v1);

  return outlined consume of Transaction?(v1);
}

void DynamicTypeSize.init(_:)(void *a1@<X0>, unsigned char *a2@<X8>)
{
  DynamicTypeSize.init(uiSizeCategory:)(a1, &v3);
  *a2 = v3;
}

uint64_t specialized static SearchAdjustmentModifier.updateEnvironment(searchAdjustment:environment:)(char a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
  swift_retain_n();
  if (v3)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    char v4 = v6;
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
    swift_release_n();
    char v4 = v6;
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationKind.Key> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationKind.Key>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  if (a1 == 1 && (v4 & 0xFE) != 6)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
    swift_retain();
    PropertyList.subscript.setter();
    if (v3)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t key path setter for EnvironmentValues.isSelectable : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.isSelectable.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey>, (uint64_t)&type metadata for EnvironmentValues.IsSelectableKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSelectableKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path setter for EnvironmentValues.isSelected : EnvironmentValues(unsigned __int8 *a1)
{
  return EnvironmentValues.isSelectable.setter(*a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey>, (uint64_t)&type metadata for EnvironmentValues.IsSelectedKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSelectedKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.searchScopeActivation.setter(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, a2, a3, a4, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>(a5, a2, a3, a4);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized static ResetContentMarginModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = AGGraphGetValue();
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(void *)(*(void *)result + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = 0;
    while (2)
    {
      uint64_t v7 = *(unsigned __int8 *)(v4 + v6++ + 32);
      switch(v7)
      {
        case 1:
          OptionalEdgeInsets.init()();
          uint64_t v8 = &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey>;
          type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey>);
          id v9 = (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollContentContentMarginKey> and conformance EnvironmentPropertyKey<A>;
          goto LABEL_9;
        case 2:
          OptionalEdgeInsets.init()();
          type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollIndicatorContentMarginKey>);
          id v9 = (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ScrollIndicatorContentMarginKey> and conformance EnvironmentPropertyKey<A>;
          uint64_t v10 = &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ScrollIndicatorContentMarginKey>;
          goto LABEL_10;
        case 3:
          OptionalEdgeInsets.init()();
          uint64_t v8 = &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarMarginKey>;
          type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarMarginKey>);
          id v9 = (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarMarginKey> and conformance EnvironmentPropertyKey<A>;
          goto LABEL_9;
        default:
          OptionalEdgeInsets.init()();
          uint64_t v8 = &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AutomaticContentMarginKey>;
          type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.AutomaticContentMarginKey>);
          id v9 = (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.AutomaticContentMarginKey> and conformance EnvironmentPropertyKey<A>;
LABEL_9:
          uint64_t v10 = v8;
LABEL_10:
          lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(v9, v10);
          swift_retain();
          PropertyList.subscript.setter();
          if (*(void *)(a2 + 8))
          {
            swift_retain();
            swift_retain();
            PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
            swift_release();
            swift_release();
          }
          swift_release();
          if (v5 != v6) {
            continue;
          }
          uint64_t result = swift_bridgeObjectRelease();
          break;
      }
      break;
    }
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.presentationWantsTransparentBackground : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.presentationWantsTransparentBackground.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path getter for EnvironmentValues.searchScopeActivation : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.searchScopeActivation.getter();
  *a1 = result;
  return result;
}

uint64_t key path getter for EnvironmentValues.searchFieldPlacement : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.searchFieldPlacement.getter();
  *a1 = result;
  return result;
}

uint64_t key path getter for EnvironmentValues.isSelected : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isSelected.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path getter for EnvironmentValues.isSelectable : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isSelectable.getter();
  *a1 = result & 1;
  return result;
}

uint64_t EnvironmentValues.searchFieldPlacement.getter(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (*(void *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, a1, a2, a3, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>(a4, a1, a2, a3);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>(0, a1, a2, a3, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>(a4, a1, a2, a3);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v10;
}

uint64_t EnvironmentValues.isSelectable.getter()
{
  return EnvironmentValues.isSelectable.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey>, (uint64_t)&type metadata for EnvironmentValues.IsSelectableKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSelectableKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectableKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.isSelected.getter()
{
  return EnvironmentValues.isSelectable.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey>, (uint64_t)&type metadata for EnvironmentValues.IsSelectedKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSelectedKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSelectedKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.searchFieldPlacement.getter()
{
  return EnvironmentValues.searchFieldPlacement.getter((unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.searchScopeActivation.getter()
{
  return EnvironmentValues.searchFieldPlacement.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey>, (uint64_t)&type metadata for EnvironmentValues.SearchScopeActivationKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchScopeActivationKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.presentationWantsTransparentBackground.getter()
{
  return EnvironmentValues.isSelectable.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation>, (uint64_t)&type metadata for ContainerBackgroundKeys.TransparentPresentation, (uint64_t)&protocol witness table for ContainerBackgroundKeys.TransparentPresentation, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ContainerBackgroundKeys.TransparentPresentation> and conformance EnvironmentPropertyKey<A>);
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance NavigationColumnEnvironmentTransform(uint64_t a1, uint64_t a2)
{
  specialized static UpdateEnvironmentToAllowedBehaviors.makeEnvironment(environment:)(a2);
  char v3 = *(unsigned char *)AGGraphGetValue();

  return specialized static SearchAdjustmentModifier.updateEnvironment(searchAdjustment:environment:)(v3, a2);
}

uint64_t specialized static UpdateEnvironmentToAllowedBehaviors.makeEnvironment(environment:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
  swift_retain_n();
  if (v1)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
    swift_release_n();
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
    swift_release_n();
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HostingControllerManagedBarsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>);
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.setter();
  if (v1)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v1)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

id @objc UIHostingController.undoManager.getter(void *a1)
{
  id v1 = a1;
  id v2 = UIHostingController.undoManager.getter();

  return v2;
}

void UIHostingViewBase.startUpdateEnvironment()(_OWORD *a1@<X8>)
{
  char v3 = (void *)MEMORY[0x18C119DF0](v1 + 2);
  if (v3)
  {
    uint64_t v4 = (void *)v1[21];
    id v16 = v3;
    if (v4)
    {
      id v5 = (id)v1[21];
    }
    else
    {
      id v5 = objc_msgSend(v3, sel_traitCollection);
      uint64_t v4 = 0;
    }
    id v6 = v4;
    id v7 = objc_msgSend(v5, sel__environmentWrapper);
    if (v7)
    {

      uint64_t v8 = v1[17];
      uint64_t v9 = v8;
      if (v8 == 1)
      {
        UITraitCollection.baseEnvironment.getter(v17);
        uint64_t v9 = v17[0];
      }
    }
    else
    {
      uint64_t v8 = v1[17];
      uint64_t v9 = v8;
      if (v8 == 1)
      {
        uint64_t v10 = v1[15];
        uint64_t v9 = v10;
        if (v10 == 1)
        {
          UITraitCollection.baseEnvironment.getter(v17);
          uint64_t v9 = v17[0];
        }
        outlined copy of EnvironmentValues?(v10);
      }
    }
    outlined copy of EnvironmentValues?(v8);
    swift_release();
    uint64_t v18 = v9;
    uint64_t v11 = v1[19];
    if (v11 != 1)
    {
      outlined copy of EnvironmentValues?(v11);
      swift_retain();
      PropertyList.override(with:)();
      swift_release();
      outlined consume of EnvironmentValues?(v11);
      uint64_t v9 = v18;
    }
    v17[0] = v9;
    v17[1] = 0;
    swift_retain();
    UITraitCollection.resolvedEnvironment(base:)(v17, a1);
    swift_release();
    uint64_t v12 = *(void *)a1;
    uint64_t v13 = one-time initialization token for configuredForPlatform;
    id v14 = v5;
    swift_retain();
    if (v13 != -1) {
      swift_once();
    }
    uint64_t v15 = static EnvironmentValues.configuredForPlatform;
    if (v12)
    {
      swift_release();
      if (!v15 || v12 != v15)
      {
LABEL_23:
        EnvironmentValues._configureForPlatform(traitCollection:)(v5);
        swift_release();

        return;
      }
    }
    else if (static EnvironmentValues.configuredForPlatform)
    {
      goto LABEL_23;
    }
    EnvironmentValues.plist.setter();
    goto LABEL_23;
  }

  EnvironmentValues.init()();
}

uint64_t EnvironmentValues._configureForPlatform(traitCollection:)(void *a1)
{
  lazy protocol witness table accessor for type SwiftUIDefaultAccentColorProvider and conformance SwiftUIDefaultAccentColorProvider();
  EnvironmentValues.defaultAccentColorProvider.setter();
  lazy protocol witness table accessor for type KitCoreUINamedColorProvider and conformance KitCoreUINamedColorProvider();
  EnvironmentValues.cuiNamedColorProvider.setter();
  lazy protocol witness table accessor for type SwiftUIAccessibilityTextResolver and conformance SwiftUIAccessibilityTextResolver();
  EnvironmentValues.accessibilityTextAttributeResolver.setter();
  lazy protocol witness table accessor for type SwiftUIResolvedTextProvider and conformance SwiftUIResolvedTextProvider();
  EnvironmentValues.resolvedTextProvider.setter();
  EnvironmentValues.hasSystemOpenURLAction.setter();
  lazy protocol witness table accessor for type UITraitBridgedEnvironmentResolver and conformance UITraitBridgedEnvironmentResolver();
  EnvironmentValues.bridgedEnvironmentResolver.setter();
  if (a1)
  {
    id v2 = objc_msgSend(a1, sel_userInterfaceIdiom);
  }
  else
  {
    id v3 = objc_msgSend(self, sel_currentDevice);
    id v2 = objc_msgSend(v3, sel_userInterfaceIdiom);
  }
  _CUIIdiomForIdiom((unint64_t)v2);
  EnvironmentValues.cuiAssetIdiom.setter();
  _CUISubtypeForIdiom((uint64_t)v2);
  EnvironmentValues.cuiAssetSubtype.setter();
  _CUIIdiomForIdiom((unint64_t)v2);
  uint64_t v4 = static CatalogAssetMatchType.defaultValue(idiom:)();

  return MEMORY[0x1F40FF290](v4);
}

uint64_t _CUIIdiomForIdiom(unint64_t a1)
{
  if (a1 > 6) {
    return 0;
  }
  else {
    return qword_188349008[a1];
  }
}

uint64_t _CUISubtypeForIdiom(uint64_t a1)
{
  uint64_t v1 = 320;
  switch(a1)
  {
    case 0:
      id v2 = [MEMORY[0x1E4FB1BA8] mainScreen];
      [v2 _referenceBounds];
      double Height = CGRectGetHeight(v12);

      if (Height <= 667.0)
      {
        if (Height <= 568.0)
        {
          if (Height <= 480.0) {
            uint64_t v1 = 0;
          }
          else {
            uint64_t v1 = 568;
          }
        }
        else
        {
          uint64_t v1 = 569;
        }
      }
      else
      {
        uint64_t v1 = 570;
      }
      break;
    case 1:
      uint64_t v4 = [MEMORY[0x1E4FB1BA8] mainScreen];
      [v4 _pointsPerInch];
      if (v5 == 163.0) {
        uint64_t v1 = 163;
      }
      else {
        uint64_t v1 = 0;
      }

      break;
    case 2:
      id v6 = [MEMORY[0x1E4FB1BA8] mainScreen];
      [v6 _referenceBounds];
      double v7 = CGRectGetHeight(v13);
      uint64_t v8 = [MEMORY[0x1E4FB1BA8] mainScreen];
      [v8 scale];
      double v10 = v7 * v9;

      if (v10 >= 1080.0) {
        uint64_t v1 = 0;
      }
      else {
        uint64_t v1 = 720;
      }
      break;
    case 4:
      return v1;
    case 6:
      uint64_t v1 = 3648;
      break;
    default:
      uint64_t v1 = 0;
      break;
  }
  return v1;
}

unint64_t lazy protocol witness table accessor for type UITraitBridgedEnvironmentResolver and conformance UITraitBridgedEnvironmentResolver()
{
  unint64_t result = lazy protocol witness table cache variable for type UITraitBridgedEnvironmentResolver and conformance UITraitBridgedEnvironmentResolver;
  if (!lazy protocol witness table cache variable for type UITraitBridgedEnvironmentResolver and conformance UITraitBridgedEnvironmentResolver)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UITraitBridgedEnvironmentResolver and conformance UITraitBridgedEnvironmentResolver);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type KitCoreUINamedColorProvider and conformance KitCoreUINamedColorProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type KitCoreUINamedColorProvider and conformance KitCoreUINamedColorProvider;
  if (!lazy protocol witness table cache variable for type KitCoreUINamedColorProvider and conformance KitCoreUINamedColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KitCoreUINamedColorProvider and conformance KitCoreUINamedColorProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUIDefaultAccentColorProvider and conformance SwiftUIDefaultAccentColorProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type SwiftUIDefaultAccentColorProvider and conformance SwiftUIDefaultAccentColorProvider;
  if (!lazy protocol witness table cache variable for type SwiftUIDefaultAccentColorProvider and conformance SwiftUIDefaultAccentColorProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIDefaultAccentColorProvider and conformance SwiftUIDefaultAccentColorProvider);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUIAccessibilityTextResolver and conformance SwiftUIAccessibilityTextResolver()
{
  unint64_t result = lazy protocol witness table cache variable for type SwiftUIAccessibilityTextResolver and conformance SwiftUIAccessibilityTextResolver;
  if (!lazy protocol witness table cache variable for type SwiftUIAccessibilityTextResolver and conformance SwiftUIAccessibilityTextResolver)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIAccessibilityTextResolver and conformance SwiftUIAccessibilityTextResolver);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUIResolvedTextProvider and conformance SwiftUIResolvedTextProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type SwiftUIResolvedTextProvider and conformance SwiftUIResolvedTextProvider;
  if (!lazy protocol witness table cache variable for type SwiftUIResolvedTextProvider and conformance SwiftUIResolvedTextProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIResolvedTextProvider and conformance SwiftUIResolvedTextProvider);
  }
  return result;
}

id UIHostingController.undoManager.getter()
{
  _UIHostingView.inheritedEnvironment.getter(v5);
  uint64_t v1 = v5[0];
  if (v5[0] == 1) {
    goto LABEL_6;
  }
  if (v5[1])
  {
    type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UndoManagerKey>, (uint64_t)&type metadata for UndoManagerKey, (uint64_t)&protocol witness table for UndoManagerKey, MEMORY[0x1E4F40930]);
    outlined copy of EnvironmentValues?(v1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UndoManagerKey>, (uint64_t)&type metadata for UndoManagerKey, (uint64_t)&protocol witness table for UndoManagerKey, MEMORY[0x1E4F40930]);
    outlined copy of EnvironmentValues?(v1);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.getter();
  }
  swift_release();
  outlined consume of EnvironmentValues?(v1);
  outlined consume of EnvironmentValues?(v1);
  id result = v4;
  if (!v4)
  {
LABEL_6:
    v3.receiver = v0;
    v3.super_class = (Class)type metadata accessor for UIHostingController();
    return objc_msgSendSuper2(&v3, sel_undoManager);
  }
  return result;
}

uint64_t outlined copy of EnvironmentValues?(uint64_t result)
{
  if (result != 1)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for UIHostingController()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined consume of EnvironmentValues?(uint64_t result)
{
  if (result != 1)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t _UIHostingView.inheritedEnvironment.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68));
  uint64_t v3 = *(void *)(v2 + 136);
  uint64_t v4 = *(void *)(v2 + 144);
  *a1 = v3;
  a1[1] = v4;
  return outlined copy of EnvironmentValues?(v3);
}

double UITraitCollection.resolvedEnvironment(base:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = a1[1];
  *(void *)&long long v33 = *a1;
  *((void *)&v33 + 1) = v5;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>);
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release();
  uint64_t v6 = v30[2];
  swift_bridgeObjectRelease();
  if (v6)
  {
    uint64_t v30 = (void *)MEMORY[0x1E4FBC860];
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BridgedEnvironmentKeysKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<BridgedEnvironmentKeysKey>);
    swift_retain();
    PropertyList.subscript.setter();
    if (*((void *)&v33 + 1))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  uint64_t v30 = objc_msgSend(v3, sel__traitCollectionByRemovingEnvironmentWrapper);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<InheritedTraitCollectionKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InheritedTraitCollectionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<InheritedTraitCollectionKey>);
  double v7 = v30;
  swift_retain();
  PropertyList.subscript.setter();
  if (*((void *)&v33 + 1))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  id v8 = objc_msgSend(v3, sel_layoutDirection);
  if (v8 == (id)1)
  {
    char v9 = 1;
  }
  else
  {
    if (v8) {
      goto LABEL_15;
    }
    char v9 = 0;
  }
  LOBYTE(v30) = v9;
  EnvironmentValues.layoutDirection.setter();
LABEL_15:
  DynamicTypeSize.init(uiSizeCategory:)(objc_msgSend(v3, sel_preferredContentSizeCategory), (char *)&v30);
  if (v30 != 12) {
    EnvironmentValues.dynamicTypeSize.setter();
  }
  id v10 = objc_msgSend(v3, sel_legibilityWeight);
  if (v10 == (id)1)
  {
    char v11 = 1;
  }
  else
  {
    if (v10) {
      goto LABEL_22;
    }
    char v11 = 0;
  }
  LOBYTE(v30) = v11;
  EnvironmentValues.legibilityWeight.setter();
LABEL_22:
  id v12 = objc_msgSend(v3, sel_displayGamut);
  if (v12)
  {
    if (v12 != (id)1) {
      goto LABEL_27;
    }
    char v13 = 1;
  }
  else
  {
    char v13 = 0;
  }
  LOBYTE(v30) = v13;
  EnvironmentValues.displayGamut.setter();
LABEL_27:
  id v14 = objc_msgSend(v3, sel__backlightLuminance);
  EnvironmentValues.isLuminanceReduced.setter();
  if (v14 == (id)1)
  {
    uint64_t v15 = (void (*)(void **, void))EnvironmentValues.redactionReasons.modify();
    *v16 |= 2uLL;
    v15(&v30, 0);
  }
  uint64_t v30 = objc_msgSend(v3, sel__updateFidelity);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UpdateFidelityKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UpdateFidelityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UpdateFidelityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*((void *)&v33 + 1))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  id v17 = objc_msgSend(v3, sel_accessibilityContrast);
  if (v17 == (id)1)
  {
    char v18 = 1;
  }
  else
  {
    if (v17) {
      goto LABEL_36;
    }
    char v18 = 0;
  }
  LOBYTE(v30) = v18;
  EnvironmentValues._colorSchemeContrast.setter();
LABEL_36:
  LOBYTE(v30) = objc_msgSend(v3, sel_userInterfaceStyle) == (id)2;
  EnvironmentValues.colorScheme.setter();
  objc_msgSend(v3, sel_displayScale);
  EnvironmentValues.displayScale.setter();
  id v19 = objc_msgSend(v3, sel_horizontalSizeClass);
  char v20 = 2 * (v19 != (id)1);
  if (v19 == (id)2) {
    char v20 = 1;
  }
  LOBYTE(v30) = v20;
  EnvironmentValues.horizontalSizeClass.setter();
  id v21 = objc_msgSend(v3, sel_verticalSizeClass);
  char v22 = 2 * (v21 != (id)1);
  if (v21 == (id)2) {
    char v22 = 1;
  }
  LOBYTE(v30) = v22;
  EnvironmentValues.verticalSizeClass.setter();
  id v23 = objc_msgSend(v3, sel_userInterfaceLevel);
  uint64_t v24 = (void (*)(void **, void))EnvironmentValues.backgroundInfo.modify();
  *uint64_t v25 = v23;
  v24(&v30, 0);
  objc_msgSend(v3, sel_displayCornerRadius);
  EnvironmentValues.displayCornerRadius.setter();
  if (objc_msgSend(v3, sel__userInterfaceRenderingMode) == (id)2)
  {
    static Material.thick.getter();
    uint64_t v28 = v30;
    unint64_t v29 = v31 | ((unint64_t)v32 << 32);
    EnvironmentValues.backgroundMaterial.setter();
    EnvironmentValues.vibrantColorStyle.setter();
  }
  if (objc_msgSend(v3, sel__vibrancy, v28, v29) == (id)1 && (static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    EnvironmentValues.backgroundMaterial.getter();
    char v26 = ~v31;
    outlined consume of Material?((uint64_t)v30, v31);
    if (!v26)
    {
      static Material.thick.getter();
      EnvironmentValues.backgroundMaterial.setter();
    }
  }
  specialized static AccessibilityCore.UserSettings.resolve(into:)((uint64_t)&v33);

  double result = *(double *)&v33;
  *a2 = v33;
  return result;
}

void DynamicTypeSize.init(uiSizeCategory:)(void *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;
  if (v4 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v6 == v7)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_15;
  }
  char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v9)
  {
LABEL_15:

    char v20 = 0;
    goto LABEL_16;
  }
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;
  if (v10 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v12 == v13)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  char v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15)
  {
LABEL_18:

    char v20 = 1;
    goto LABEL_16;
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;
  if (v16 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v18 == v19)
  {
    swift_bridgeObjectRelease_n();
LABEL_20:

    char v20 = 2;
    goto LABEL_16;
  }
  char v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v21) {
    goto LABEL_20;
  }
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v24 = v23;
  if (v22 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v24 == v25)
  {
    swift_bridgeObjectRelease_n();
LABEL_25:

    char v20 = 3;
    goto LABEL_16;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v26) {
    goto LABEL_25;
  }
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v29 = v28;
  if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v29 == v30)
  {
    swift_bridgeObjectRelease_n();
LABEL_30:

    char v20 = 4;
    goto LABEL_16;
  }
  char v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v31) {
    goto LABEL_30;
  }
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;
  if (v32 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v34 == v35)
  {
    swift_bridgeObjectRelease_n();
LABEL_35:

    char v20 = 5;
    goto LABEL_16;
  }
  char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v36) {
    goto LABEL_35;
  }
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;
  if (v37 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v39 == v40)
  {
    swift_bridgeObjectRelease_n();
LABEL_40:

    char v20 = 6;
    goto LABEL_16;
  }
  char v41 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v41) {
    goto LABEL_40;
  }
  uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v44 = v43;
  if (v42 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v44 == v45)
  {
    swift_bridgeObjectRelease_n();
LABEL_45:

    char v20 = 7;
    goto LABEL_16;
  }
  char v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v46) {
    goto LABEL_45;
  }
  uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v49 = v48;
  if (v47 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v49 == v50)
  {
    swift_bridgeObjectRelease_n();
LABEL_50:

    char v20 = 8;
    goto LABEL_16;
  }
  char v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v51) {
    goto LABEL_50;
  }
  uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v54 = v53;
  if (v52 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v54 == v55)
  {
    swift_bridgeObjectRelease_n();
LABEL_55:

    char v20 = 9;
    goto LABEL_16;
  }
  char v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v56) {
    goto LABEL_55;
  }
  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v59 = v58;
  if (v57 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v59 == v60)
  {
    swift_bridgeObjectRelease_n();
LABEL_60:

    char v20 = 10;
    goto LABEL_16;
  }
  char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v61) {
    goto LABEL_60;
  }
  uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v64 = v63;
  if (v62 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v64 == v65)
  {
    id v66 = a1;

    swift_bridgeObjectRelease_n();
    char v20 = 11;
  }
  else
  {
    char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
    id v68 = a1;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v67) {
      char v20 = 11;
    }
    else {
      char v20 = 12;
    }
  }
LABEL_16:
  *a2 = v20;
}

uint64_t specialized static AccessibilityCore.UserSettings.resolve(into:)(uint64_t a1)
{
  UIAccessibilityShouldDifferentiateWithoutColor();
  EnvironmentValues.accessibilityDifferentiateWithoutColor.setter();
  UIAccessibilityIsReduceTransparencyEnabled();
  EnvironmentValues.accessibilityReduceTransparency.setter();
  UIAccessibilityIsReduceMotionEnabled();
  EnvironmentValues.accessibilityReduceMotion.setter();
  UIAccessibilityIsInvertColorsEnabled();
  EnvironmentValues.accessibilityInvertColors.setter();
  UIAccessibilityPrefersCrossFadeTransitions();
  EnvironmentValues.accessibilityPrefersCrossFadeTransitions.setter();
  UIAccessibilityButtonShapesEnabled();
  EnvironmentValues.accessibilityShowButtonShapes.setter();
  _AXSPhotosensitiveMitigationEnabled();
  EnvironmentValues.accessibilityDimFlashingLights.setter();
  static AccessibilitySettings.animatedImagesEnabled.getter();
  EnvironmentValues.accessibilityPlayAnimatedImages.setter();
  uint64_t v2 = specialized _ArrayProtocol.filter(_:)((uint64_t)&outlined read-only object #0 of static AccessibilityTechnologies.enabledTechnologies.getter);
  AccessibilityTechnologies.init(list:)(v2, v5);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledTechnologiesKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnabledTechnologiesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnabledTechnologiesKey>);
  swift_retain();
  PropertyList.subscript.setter();
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  objc_msgSend(self, sel_isEnabled);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityLargeContentViewerKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityLargeContentViewerKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityQuickActionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityQuickActionsKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  _AXSIncreaseButtonLegibility();
  return EnvironmentValues.accessibilityPrefersOnOffLabels.setter();
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = result + 32;
    uint64_t v4 = MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v5 = 0;
      uint64_t v6 = v2 <= v1 ? v1 : v2;
      unint64_t v7 = v2 - v6;
      unint64_t v8 = v1;
      uint64_t v9 = v3;
LABEL_9:
      if (!(v7 + v5)) {
        break;
      }
      char v10 = *(unsigned char *)(v9 + v2);
      switch(v10)
      {
        case 1:
          double result = UIAccessibilityIsSwitchControlRunning();
          if ((result & 1) == 0) {
            goto LABEL_8;
          }
          goto LABEL_20;
        case 2:
          double result = _AXSFullKeyboardAccessEnabled();
          if (result) {
            goto LABEL_20;
          }
          goto LABEL_8;
        case 3:
          double result = _AXSCommandAndControlEnabled();
          if (result) {
            goto LABEL_20;
          }
          goto LABEL_8;
        case 4:
          double result = _AXSHoverTextEnabled();
          if (result) {
            goto LABEL_20;
          }
          goto LABEL_8;
        case 5:
          double result = AXAssistiveAccessEnabled();
          if (result) {
            goto LABEL_20;
          }
          goto LABEL_8;
        default:
          double result = UIAccessibilityIsVoiceOverRunning();
          if ((result & 1) == 0)
          {
LABEL_8:
            ++v5;
            ++v9;
            if (v2 == --v8) {
              return v4;
            }
            goto LABEL_9;
          }
LABEL_20:
          double result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0) {
            double result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1);
          }
          unint64_t v12 = *(void *)(v4 + 16);
          unint64_t v11 = *(void *)(v4 + 24);
          if (v12 >= v11 >> 1) {
            double result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
          }
          unint64_t v13 = v2 + 1;
          v2 += 1 + v5;
          *(void *)(v4 + 16) = v12 + 1;
          *(unsigned char *)(v4 + v12 + 32) = v10;
          if (v13 == v8) {
            return v4;
          }
          break;
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;

  unint64_t v1 = 0;
  unint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = result + 32;
  uint64_t v4 = MEMORY[0x1E4FBC860];
LABEL_2:
  if (v1 <= v2) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v1;
  }
  while (1)
  {
    if (v2 == v1) {
      return v4;
    }
    if (v5 == v1) {
      break;
    }
    uint64_t v6 = *(unsigned __int8 *)(v3 + v1++);
    if (v6 <= 1)
    {
      double result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        double result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1);
      }
      unint64_t v8 = *(void *)(v4 + 16);
      unint64_t v7 = *(void *)(v4 + 24);
      if (v8 >= v7 >> 1) {
        double result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v8 + 1, 1);
      }
      *(void *)(v4 + 16) = v8 + 1;
      *(unsigned char *)(v4 + v8 + 32) = v6;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  unsigned char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  unint64_t v1 = 0;
  unint64_t v2 = *(void *)(result + 16);
  uint64_t v3 = result + 48;
  uint64_t v4 = MEMORY[0x1E4FBC860];
LABEL_2:
  if (v1 <= v2) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v1;
  }
  uint64_t v6 = v5 + 1;
  unint64_t v7 = (char *)(v3 + 24 * v1);
  while (1)
  {
    if (v2 == v1) {
      return v4;
    }
    if (v6 == ++v1) {
      break;
    }
    unint64_t v8 = v7 + 24;
    uint64_t v9 = *v7;
    v7 += 24;
    if ((v9 & 1) == 0)
    {
      unint64_t v11 = *((void *)v8 - 5);
      char v10 = *((void *)v8 - 4);
      swift_bridgeObjectRetain();
      double result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0) {
        double result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v4 + 16) + 1, 1);
      }
      unint64_t v13 = *(void *)(v4 + 16);
      unint64_t v12 = *(void *)(v4 + 24);
      if (v13 >= v12 >> 1) {
        double result = (uint64_t)specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
      }
      *(void *)(v4 + 16) = v13 + 1;
      id v14 = v4 + 24 * v13;
      *(void *)(v14 + 32) = v11;
      *(void *)(v14 + 40) = v10;
      *(unsigned char *)(v14 + 48) = 0;
      goto LABEL_2;
    }
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityTechnologies.init(list:)@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    LOWORD(v4) = 0;
    uint64_t v5 = (unsigned __int8 *)(result + 32);
    while (1)
    {
      unsigned int v6 = *v5++;
      int v7 = 1 << (v6 & 0xF);
      int v8 = v6 >= 0x10 ? 0 : v7;
      int v4 = v8 + (unsigned __int16)v4;
      if ((v4 & 0x10000) != 0) {
        break;
      }
      if (!--v3) {
        goto LABEL_10;
      }
    }
    __break(1u);
  }
  else
  {
    LOWORD(v4) = 0;
LABEL_10:
    double result = swift_bridgeObjectRelease();
    *a2 = v4;
  }
  return result;
}

uint64_t FocusBridge.updateEnvironment(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t result = FocusBridge.host.getter();
  if (result)
  {
    uint64_t v5 = (void *)result;
    if (a1[1])
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    swift_weakLoadStrong();
    outlined destroy of WeakBox<FocusBridge>((uint64_t)v26, &lazy cache variable for type metadata for WeakBox<FocusBridge>, v6, (uint64_t (*)(uint64_t))type metadata accessor for FocusBridge, MEMORY[0x1E4F41720]);
    swift_weakAssign();
    swift_release();
    swift_retain();
    specialized EnvironmentValues.focusBridge.setter();
    swift_release();
    uint64_t v7 = a1[1];
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
    swift_retain_n();
    if (v7)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if ((v26[0] & 1) == 0)
    {
      LOBYTE(v26[0]) = FocusBridge.isHostContainedInFocusedItem.getter() & 1;
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsFocusedKey>);
      swift_retain();
      PropertyList.subscript.setter();
      if (v7)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
    id v8 = objc_msgSend(v5, sel_window);
    if (v8)
    {
      uint64_t v9 = v8;
      type metadata accessor for UIFocusSystem();
      id v10 = v9;
      unint64_t v11 = (void *)static UIFocusSystem.focusSystem(for:)();

      LOBYTE(v26[0]) = v11 != 0;
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsPlatformFocusSystemEnabled>);
      swift_retain();
      PropertyList.subscript.setter();
      if (v7)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

        swift_release();
        swift_release();
      }
      else
      {
      }
      swift_release();
    }
    swift_weakInit();
    outlined init with copy of _ResetFocusAction((uint64_t)v26, (uint64_t)&v25);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ResetFocusKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ResetFocusKey>);
    swift_retain();
    PropertyList.subscript.setter();
    if (a1[1])
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    outlined destroy of _ResetFocusAction((uint64_t)v26);
    swift_beginAccess();
    long long v25 = *(_OWORD *)(v2 + 72);
    uint64_t v12 = EnvironmentValues.preferenceBridge.getter();
    swift_endAccess();
    if (v12) {
      swift_release();
    }
    uint64_t v14 = *a1;
    uint64_t v13 = a1[1];
    v26[0] = v14;
    v26[1] = v13;
    if (EnvironmentValues.preferenceBridge.getter())
    {
      swift_release();
      if (v12) {
        goto LABEL_29;
      }
      uint64_t v15 = FocusBridge.host.getter();
      if (!v15) {
        goto LABEL_29;
      }
      uint64_t v17 = (void *)v15;
      uint64_t v18 = v16;
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v18 + 8) + 16))(ObjectType);

      GraphHost.removePreference<A>(_:)();
      GraphHost.removePreference<A>(_:)();
      GraphHost.removePreference<A>(_:)();
    }
    else
    {
      if (!v12) {
        goto LABEL_29;
      }
      uint64_t v20 = FocusBridge.host.getter();
      if (!v20) {
        goto LABEL_29;
      }
      uint64_t v22 = (void *)v20;
      uint64_t v23 = v21;
      uint64_t v24 = swift_getObjectType();
      (*(void (**)(uint64_t))(*(void *)(v23 + 8) + 16))(v24);

      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();
    }
    swift_release();
LABEL_29:
    swift_beginAccess();
    *(void *)(v2 + 72) = v14;
    *(void *)(v2 + 80) = v13;
    swift_retain();
    swift_retain();

    swift_release();
    return swift_release();
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for EnvironmentPropertyKey();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t FocusBridge.host.getter()
{
  uint64_t v1 = v0;
  type metadata accessor for WeakBox<UIFocusItem>(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, 255, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v18 - v3;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = (void *)MEMORY[0x18C119DF0](v1 + 24, v7);

  if (!v10)
  {
    static Log.focus.getter();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      outlined destroy of WeakBox<FocusBridge>((uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for Logger?, 255, MEMORY[0x1E4FBD360], MEMORY[0x1E4FBB718]);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
      unint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        uint64_t v19 = swift_slowAlloc();
        uint64_t v20 = v1;
        uint64_t v21 = v19;
        *(_DWORD *)uint64_t v13 = 136315138;
        uint64_t v18 = v13 + 4;
        uint64_t v14 = String.init<A>(describing:)();
        uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1872C6000, v11, v12, "Focus bridge %s has no host.", v13, 0xCu);
        uint64_t v16 = v19;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v16, -1, -1);
        MEMORY[0x18C119C60](v13, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
  }
  return MEMORY[0x18C119DF0](v1 + 24);
}

void type metadata accessor for WeakBox<UIFocusItem>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v8 = a4(a3);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void _s7SwiftUI7WeakBoxVySo11UIFocusItem_pGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    a5(255, a3, a4);
    unint64_t v6 = type metadata accessor for WeakBox();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined destroy of WeakBox<FocusBridge>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  type metadata accessor for WeakBox<UIFocusItem>(0, a2, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t outlined destroy of _ResetFocusAction(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of _ResetFocusAction(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t specialized EnvironmentValues.focusBridge.setter()
{
  swift_weakInit();
  swift_weakAssign();
  outlined init with take of FocusItem?((uint64_t)&v2, (uint64_t)v3, (uint64_t)&lazy cache variable for type metadata for WeakBox<FocusBridge>, (uint64_t)type metadata accessor for FocusBridge, MEMORY[0x1E4F41720], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sSay7SwiftUI13ViewResponderCGMaTm_4);
  outlined init with copy of WeakBox<FocusBridge>((uint64_t)v3, (uint64_t)&v2);
  type metadata accessor for FocusStateBindingModifier<Bool>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of WeakBox<FocusBridge>((uint64_t)v3);
}

uint64_t outlined init with take of FocusItem?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t outlined destroy of WeakBox<FocusBridge>(uint64_t a1)
{
  _sSay7SwiftUI13ViewResponderCGMaTm_4(0, &lazy cache variable for type metadata for WeakBox<FocusBridge>, (uint64_t (*)(uint64_t))type metadata accessor for FocusBridge, MEMORY[0x1E4F41720]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for [ViewResponder](uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSay7SwiftUI13ViewResponderCGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSay7SwiftUI13ViewResponderCGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSay7SwiftUI13ViewResponderCGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSay7SwiftUI13ViewResponderCGMaTm_3(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSay7SwiftUI13ViewResponderCGMaTm_4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _sSay7SwiftUI13ViewResponderCGMaTm_5(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for FocusStateBindingModifier<Bool>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI25FocusStateBindingModifier33_274D264A38B51DC68ACC48A91353B7D0LLVySbGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for FocusStateBindingModifier<Bool>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusBridgeKey>, (uint64_t)&type metadata for FocusBridgeKey, (uint64_t)&protocol witness table for FocusBridgeKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusBridgeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t outlined init with copy of WeakBox<FocusBridge>(uint64_t a1, uint64_t a2)
{
  _sSay7SwiftUI13ViewResponderCGMaTm_4(0, &lazy cache variable for type metadata for WeakBox<FocusBridge>, (uint64_t (*)(uint64_t))type metadata accessor for FocusBridge, MEMORY[0x1E4F41720]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t FocusBridge.isHostContainedInFocusedItem.getter()
{
  uint64_t v0 = FocusBridge.host.getter();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
    id v2 = v1;
    uint64_t v3 = static UIFocusSystem.focusSystem(for:)();

    if (v3)
    {
      id v4 = objc_msgSend((id)v3, sel_focusedItem);

      if (v4)
      {
        swift_getObjectType();
        id v5 = v2;
        LOBYTE(v3) = UIFocusEnvironment.contains(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        LOBYTE(v3) = 0;
      }
    }
  }
  else
  {
    LOBYTE(v3) = 0;
  }
  return v3 & 1;
}

unint64_t type metadata accessor for UIFocusSystem()
{
  unint64_t result = lazy cache variable for type metadata for UIFocusSystem;
  if (!lazy cache variable for type metadata for UIFocusSystem)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
  }
  return result;
}

void UITraitCollection.baseEnvironment.getter(void *a1@<X8>)
{
  id v2 = v1;
  id v4 = objc_msgSend(v1, sel__environmentWrapper);
  if (!v4)
  {
LABEL_5:
    EnvironmentValues.init()();
    EnvironmentValues.configureForRoot()();
    uint64_t v9 = one-time initialization token for configuredForPlatform;
    swift_retain();
    if (v9 != -1) {
      swift_once();
    }
    uint64_t v10 = static EnvironmentValues.configuredForPlatform;
    if (v11)
    {
      swift_release();
      if (!v10 || v11 != v10) {
        goto LABEL_11;
      }
    }
    else if (static EnvironmentValues.configuredForPlatform)
    {
      goto LABEL_11;
    }
    EnvironmentValues.plist.setter();
LABEL_11:
    EnvironmentValues._configureForPlatform(traitCollection:)(v2);
    uint64_t v8 = v12;
    uint64_t v7 = v11;
    goto LABEL_12;
  }
  id v5 = v4;
  type metadata accessor for EnvironmentWrapper();
  uint64_t v6 = swift_dynamicCastClass();
  if (!v6)
  {

    goto LABEL_5;
  }
  uint64_t v7 = *(void *)(v6 + OBJC_IVAR___SwiftUIEnvironmentWrapper_environment);
  uint64_t v8 = *(void *)(v6 + OBJC_IVAR___SwiftUIEnvironmentWrapper_environment + 8);
  swift_retain();
  swift_retain();

LABEL_12:
  *a1 = v7;
  a1[1] = v8;
}

void type metadata accessor for EnvironmentPropertyKey<UndoManagerKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t initializeWithCopy for PresentSharingPickerAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  id v5 = (_OWORD *)(a1 + 16);
  unint64_t v6 = (_OWORD *)(a2 + 16);
  uint64_t v7 = (_OWORD *)(a2 + 128);
  uint64_t v8 = *(void *)(a2 + 128);
  swift_retain();
  swift_retain();
  if (v8 != 1)
  {
    uint64_t v13 = *(void *)(a2 + 88);
    if (v13 == 1)
    {
      long long v14 = v6[5];
      *(_OWORD *)(a1 + 80) = v6[4];
      *(_OWORD *)(a1 + 96) = v14;
      *(_OWORD *)(a1 + 112) = v6[6];
      long long v15 = v6[1];
      *id v5 = *v6;
      *(_OWORD *)(a1 + 32) = v15;
      long long v16 = v6[3];
      *(_OWORD *)(a1 + 48) = v6[2];
      *(_OWORD *)(a1 + 64) = v16;
      if (!v8) {
        goto LABEL_12;
      }
LABEL_9:
      uint64_t v29 = *(void *)(a2 + 136);
      *(void *)(a1 + 128) = v8;
      *(void *)(a1 + 136) = v29;
      swift_retain();
      return a1;
    }
    uint64_t v17 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v18 = *(void *)(a2 + 32);
    uint64_t v19 = *(void *)(a2 + 40);
    uint64_t v20 = *(void *)(a2 + 48);
    char v21 = *(unsigned char *)(a2 + 56);
    outlined copy of AnyShareConfiguration.Storage(v17, v18, v19, v20, v21);
    *(void *)(a1 + 24) = v17;
    *(void *)(a1 + 32) = v18;
    *(void *)(a1 + 40) = v19;
    *(void *)(a1 + 48) = v20;
    *(unsigned char *)(a1 + 56) = v21;
    if (v13)
    {
      uint64_t v22 = *(void *)(a2 + 64);
      uint64_t v23 = *(void *)(a2 + 72);
      char v24 = *(unsigned char *)(a2 + 80);
      outlined copy of Text.Storage(v22, v23, v24);
      *(void *)(a1 + 64) = v22;
      *(void *)(a1 + 72) = v23;
      *(unsigned char *)(a1 + 80) = v24;
      *(void *)(a1 + 88) = v13;
      swift_bridgeObjectRetain();
      uint64_t v25 = *(void *)(a2 + 120);
      if (v25) {
        goto LABEL_8;
      }
    }
    else
    {
      long long v30 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v30;
      uint64_t v25 = *(void *)(a2 + 120);
      if (v25)
      {
LABEL_8:
        uint64_t v26 = *(void *)(a2 + 96);
        uint64_t v27 = *(void *)(a2 + 104);
        char v28 = *(unsigned char *)(a2 + 112);
        outlined copy of Text.Storage(v26, v27, v28);
        *(void *)(a1 + 96) = v26;
        *(void *)(a1 + 104) = v27;
        *(unsigned char *)(a1 + 112) = v28;
        *(void *)(a1 + 120) = v25;
        swift_bridgeObjectRetain();
        if (v8) {
          goto LABEL_9;
        }
LABEL_12:
        *(_OWORD *)(a1 + 128) = *v7;
        return a1;
      }
    }
    long long v31 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v31;
    if (v8) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  long long v9 = v6[5];
  *(_OWORD *)(a1 + 80) = v6[4];
  *(_OWORD *)(a1 + 96) = v9;
  long long v10 = v6[7];
  *(_OWORD *)(a1 + 112) = v6[6];
  *(_OWORD *)(a1 + 128) = v10;
  long long v11 = v6[1];
  *id v5 = *v6;
  *(_OWORD *)(a1 + 32) = v11;
  long long v12 = v6[3];
  *(_OWORD *)(a1 + 48) = v6[2];
  *(_OWORD *)(a1 + 64) = v12;
  return a1;
}

uint64_t destroy for AccessibilityAdaptiveStack(uint64_t a1)
{
  swift_release();
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  uint64_t v2 = *(void *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 72);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t partial apply for implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)()
{
  return implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(*(void *)(v0 + 32));
}

uint64_t partial apply for closure #1 in PopoverPresentationModifier.PopoverModifier.body(content:)(char **a1, uint64_t a2)
{
  return partial apply for closure #3 in PopoverPresentationModifier.PopoverModifier.body(content:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, uint64_t))implicit closure #1 in closure #1 in PopoverPresentationModifier.PopoverModifier.body(content:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SelectionManagerBox<A>(uint64_t a1, char *a2, uint64_t a3)
{
  return static SelectionManagerBox.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _CALayerView<A>()
{
  return static _CALayerView._makeView(view:inputs:)();
}

uint64_t storeEnumTagSinglePayload for CGSize(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance CustomHoverEffectPrimitiveViewModifier<A>@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, double *a6@<X8>)
{
  return static CustomHoverEffectPrimitiveViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

double protocol witness for static CustomHoverEffect._makeCustomHoverEffect(effect:inputs:body:) in conformance _CustomViewModifierHoverEffect<A>@<D0>(long long *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, double *a5@<X8>)
{
  return static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

double partial apply for closure #2 in static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)@<D0>(uint64_t *a1@<X1>, double *a2@<X8>)
{
  return closure #2 in static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(a1, v2 + 16, *(void (**)(uint64_t *__return_ptr, uint64_t *))(v2 + 104), a2);
}

uint64_t implicit closure #1 in static ViewModifier._makeAccessibilityHitTestingModifier(modifier:inputs:outputs:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t implicit closure #1 in static AccessibilityLargeContentViewModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

unint64_t lazy protocol witness table accessor for type AccessibilityLargeContentViewTransform and conformance AccessibilityLargeContentViewTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityLargeContentViewTransform and conformance AccessibilityLargeContentViewTransform;
  if (!lazy protocol witness table cache variable for type AccessibilityLargeContentViewTransform and conformance AccessibilityLargeContentViewTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLargeContentViewTransform and conformance AccessibilityLargeContentViewTransform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityLargeContentViewHitTestingTransform and conformance AccessibilityLargeContentViewHitTestingTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityLargeContentViewHitTestingTransform and conformance AccessibilityLargeContentViewHitTestingTransform;
  if (!lazy protocol witness table cache variable for type AccessibilityLargeContentViewHitTestingTransform and conformance AccessibilityLargeContentViewHitTestingTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityLargeContentViewHitTestingTransform and conformance AccessibilityLargeContentViewHitTestingTransform);
  }
  return result;
}

uint64_t protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance FetchedResults<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x1E4FBB010], MEMORY[0x1E4FBAFD8]);
}

{
  return specialized Collection._failEarlyRangeCheck(_:bounds:)(a1, a2, a3, a4, MEMORY[0x1E4FBB6A0], MEMORY[0x1E4FBAFC8]);
}

uint64_t specialized Collection._failEarlyRangeCheck(_:bounds:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t), uint64_t (*a6)(char *, char *, uint64_t, uint64_t))
{
  uint64_t v23 = a6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = a5(0, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  long long v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v22 - v17;
  char v19 = dispatch thunk of static Comparable.<= infix(_:_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2, v11);
  if ((v19 & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
    goto LABEL_5;
  }
  char v20 = v23(v18, &v14[*(int *)(v11 + 36)], AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  if ((v20 & 1) == 0) {
LABEL_5:
  }
    __break(1u);
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for OpacityButtonHighlightModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  char v4 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<Bool>.Content(v3, v4);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return a1;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance PresentationOptionsPreferenceKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of PresentationOptionsPreference((uint64_t)&static PresentationOptionsPreferenceKey.defaultValue, a1);
}

uint64_t protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout(uint64_t a1, char a2, uint64_t a3, char a4, int *a5, uint64_t a6)
{
  return LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a5, *(double *)v6, a6, *(unsigned char *)(v6 + 16));
}

__n128 __swift_memcpy105_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(long long *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance ScrollContentBackgroundKey(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 0;
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance DragItemTimings.Key(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 1;
  *(void *)(a1 + 80) = 0;
  *(_WORD *)(a1 + 88) = 513;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityScrollableContextModifier()
{
  return &protocol witness table for AccessibilityScrollableContextModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationStackStyleModifier<A>()
{
  return &protocol witness table for NavigationStackStyleModifier<A>;
}

uint64_t protocol witness for Shape.layoutDirectionBehavior.getter in conformance CircularPercentageGaugeRing.RingArc()
{
  return MEMORY[0x1F4100E68]();
}

_UNKNOWN **base witness table accessor for ViewModifier in LabelGroupStyleModifier<A>()
{
  return &protocol witness table for LabelGroupStyleModifier<A>;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DraggingPreviewModifier<A>@<X0>(long long *a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X4>, _OWORD *a4@<X8>)
{
  return static DraggingPreviewModifier._makeView(modifier:inputs:body:)(a1, a2, *(void *)(a3 + 24), a4);
}

void *destructiveInjectEnumTag for BorderedButtonColorSpec.LabelStyle(void *result, int a2)
{
  if (a2 < 0)
  {
    unsigned int v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2) {
      return result;
    }
    unsigned int v2 = a2 - 1;
  }
  *__n128 result = v2;
  return result;
}

uint64_t storeEnumTagSinglePayload for TransferableDropAction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for DictionaryDecoder.KeyDecodingStrategy(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationState.StackContent.PositionedView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t ShadowListDataSource.configureCell(_:transaction:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = a1;
  uint64_t v44 = a2;
  uint64_t v5 = *(void *)(a4 + 16);
  uint64_t v38 = a4;
  uint64_t v41 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v40 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v37 = (char *)&v33 - v10;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v35 = *(void *)(v11 - 8);
  uint64_t v36 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v34 = (char *)&v33 - v12;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v14 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = TupleTypeMetadata2 - 8;
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v18 = (char *)&v33 - v17;
  uint64_t v33 = type metadata accessor for _RowVisitationContext();
  uint64_t v19 = *(void *)(v33 - 8);
  double v20 = MEMORY[0x1F4188790](v33);
  uint64_t v22 = (char *)&v33 - v21;
  uint64_t v23 = *(int *)(v16 + 56);
  uint64_t v24 = (uint64_t)&v18[v23];
  uint64_t v25 = a3 + v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(v13 - 8) + 16))(v18, a3, v13, v20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v24, v25, v14);
  swift_getWitnessTable();
  uint64_t v26 = type metadata accessor for _RowVisitationContext();
  uint64_t v27 = (uint64_t)v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, a3 + *(int *)(v26 + 36), v36);
  uint64_t v47 = *(void *)(a3 + *(int *)(v26 + 40));
  uint64_t v28 = (uint64_t)v37;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v37, 1, 1);
  protocol witness for static EnvironmentKey.defaultValue.getter in conformance AccessibilityLargeContentViewerKey(&v46);
  default argument 6 of _RowVisitationContext.init(index:view:traits:explicitSelectionValue:hasMultipleSelection:deleteControlVisibility:reorderControlVisibility:)(&v45, v5, v8);
  _RowVisitationContext.init(index:view:traits:explicitSelectionValue:hasMultipleSelection:deleteControlVisibility:reorderControlVisibility:)((uint64_t)v18, v24, v27, &v47, v28, 0, &v46, &v45, (uint64_t)v22);
  long long v30 = v40;
  uint64_t v29 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v40, v42, v5);
  long long v31 = *(void (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t))(v8 + 112);
  swift_bridgeObjectRetain();
  v31(v43, v44, v22, v5, v8);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v33);
}

uint64_t closure #1 in ShadowListDataSource.contextForItem(index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v31 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v29 = (char *)&v25 - v4;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v27 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v28 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v26 = (char *)&v25 - v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  double v10 = MEMORY[0x1F4188790](TupleTypeMetadata2 - 8);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v14 = *(int *)(v13 + 56);
  uint64_t v15 = (uint64_t)&v12[v14];
  uint64_t v16 = a1 + v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(v7 - 8) + 16))(v12, a1, v7, v10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v15, v16, v8);
  uint64_t v17 = (int *)type metadata accessor for _RowVisitationContext();
  uint64_t v18 = (uint64_t)v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v26, a1 + v17[9], v28);
  uint64_t v19 = v17[11];
  uint64_t v34 = *(void *)(a1 + v17[10]);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (uint64_t)v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v29, v20, v31);
  uint64_t v22 = type metadata accessor for ShadowListDataSource();
  uint64_t WitnessTable = swift_getWitnessTable();
  protocol witness for static EnvironmentKey.defaultValue.getter in conformance AccessibilityLargeContentViewerKey((unsigned char *)&v33 + 1);
  default argument 6 of _RowVisitationContext.init(index:view:traits:explicitSelectionValue:hasMultipleSelection:deleteControlVisibility:reorderControlVisibility:)(&v33, v22, WitnessTable);
  _RowVisitationContext.init(index:view:traits:explicitSelectionValue:hasMultipleSelection:deleteControlVisibility:reorderControlVisibility:)((uint64_t)v12, v15, v18, &v34, v21, 0, (char *)&v33 + 1, (char *)&v33, v32);
  return swift_bridgeObjectRetain();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance AccessibilityLargeContentViewerKey(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t type metadata accessor for ShadowListDataSource()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ListCoreDataSource.visitRowAt<A>(_:visitor:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(uint64_t, char *, uint64_t, void))
{
  uint64_t v55 = a8;
  uint64_t v51 = a6;
  uint64_t v52 = a4;
  uint64_t v50 = a3;
  uint64_t v44 = a2;
  uint64_t v53 = a9;
  uint64_t v54 = a10;
  uint64_t v43 = a5;
  uint64_t v46 = a7;
  type metadata accessor for _RowVisitationContext();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v48 = v11;
  uint64_t v49 = v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v47 = (char *)&v37 - v13;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v15 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v45 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20.n128_f64[0] = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v37 - v21;
  uint64_t v24 = *(int *)(v23 + 48);
  uint64_t v42 = v23;
  uint64_t v25 = (char *)&v37 + v24 - v21;
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v26 + 16);
  uint64_t v41 = (char *)&v37 - v21;
  uint64_t v40 = AssociatedTypeWitness;
  v39((char *)&v37 - v21, a1, AssociatedTypeWitness, v20);
  uint64_t v27 = v15;
  uint64_t v38 = v15;
  uint64_t v28 = *(void *)(v15 - 8);
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 16);
  v29(v25, v44, v27);
  uint64_t v30 = &v18[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v39)(v18, v22, AssociatedTypeWitness);
  uint64_t v31 = v38;
  v29(v30, (uint64_t)v25, v38);
  uint64_t v32 = v47;
  uint64_t v33 = v43;
  uint64_t v34 = v46;
  (*(void (**)(char *, char *, uint64_t))(v46 + 208))(v18, v30, v43);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v31);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v40);
  uint64_t v57 = v33;
  uint64_t v58 = v51;
  uint64_t v59 = v34;
  uint64_t v60 = v50;
  uint64_t v61 = v52;
  uint64_t v35 = v48;
  v54(v55, v56, v48, MEMORY[0x1E4FBC248]);
  (*(void (**)(char *, uint64_t))(v49 + 8))(v32, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v41, v42);
}

uint64_t _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v30 = a1;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v27 = a5;
  uint64_t v28 = v10;
  uint64_t v11 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(v14 + 16);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x1F4188790](v11);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v22 + 16))(v21, v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v21, 1, v15) == 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(a6, 1, 1, a4);
  }
  uint64_t v25 = v28;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v21, v15);
  v30(v19, v13);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  if (v6) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v27, v13, a3);
  }
  return result;
}

uint64_t ShadowListDataSource.contextForItem(index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v57 = a1;
  uint64_t v58 = a2;
  uint64_t v59 = a3;
  uint64_t v60 = a4;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) + 8);
  uint64_t v51 = *(void *)(a3 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v52 = v5;
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v65 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v55 = (uint64_t)&v44 - v7;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v46 = *(void *)(v8 - 8);
  uint64_t v9 = v46;
  MEMORY[0x1F4188790](v8);
  uint64_t v50 = (uint64_t)&v44 - v10;
  uint64_t v47 = v4;
  uint64_t v62 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v61 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _RowVisitationContext();
  uint64_t v54 = type metadata accessor for Optional();
  uint64_t v56 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  uint64_t v63 = (char *)&v44 - v13;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v53 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v44 - v19;
  uint64_t v22 = *(int *)(v21 + 48);
  uint64_t v49 = v21;
  uint64_t v23 = (char *)&v44 + v22 - v19;
  uint64_t v44 = v23;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16);
  uint64_t v48 = (char *)&v44 - v19;
  uint64_t v45 = v8;
  v24((char *)&v44 - v19, v57, v8, v18);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v65 + 16);
  v25(v23, v58, AssociatedTypeWitness);
  uint64_t v26 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v61, v64, v47);
  uint64_t v27 = (uint64_t)&v16[*(int *)(TupleTypeMetadata2 + 48)];
  ((void (*)(char *, char *, uint64_t))v24)(v16, v20, v8);
  v25((char *)v27, (uint64_t)v44, AssociatedTypeWitness);
  uint64_t v28 = v26;
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();
  uint64_t v30 = v50;
  uint64_t v31 = v55;
  ShadowListUpdateRecorder.initialIndex(_:)(v50, v55, (uint64_t)v16, v27, updated);
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
  v65 += 8;
  v32(v27, AssociatedTypeWitness);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v46 + 8);
  uint64_t v34 = v45;
  v33(v16, v45);
  uint64_t v35 = v31;
  uint64_t v36 = v31;
  uint64_t v37 = v61;
  uint64_t v38 = v51;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 208))(v30, v36, v28);
  v32(v35, AssociatedTypeWitness);
  v33((char *)v30, v34);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v37, v28);
  uint64_t v67 = v28;
  uint64_t v68 = v38;
  swift_getWitnessTable();
  uint64_t v39 = type metadata accessor for _RowVisitationContext();
  uint64_t v40 = v54;
  uint64_t v41 = v63;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ShadowListDataSource.contextForItem(index:), (uint64_t)v66, MEMORY[0x1E4FBC248], v39, v42, v60);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v41, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v48, v49);
}

uint64_t static UITraitBridgedEnvironmentPropertyKeyLookup.lookup(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v8[7] = a1;
  v8[2] = a2;
  v8[3] = a3;
  v8[4] = a2;
  type metadata accessor for UITraitCollection?();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in static UITraitBridgedEnvironmentPropertyKeyLookup.lookup(in:), (uint64_t)v8, MEMORY[0x1E4FBC248], AssociatedTypeWitness, v6, a4);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v25 = a5;
  uint64_t v26 = a2;
  uint64_t v28 = a4;
  uint64_t v27 = a1;
  uint64_t v24 = *(void *)(a3 - 8);
  uint64_t v10 = MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x1F4188790](v10);
  double v18 = (char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v6);
  uint64_t v22 = 1;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
    v27(v18, v12);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if (v7) {
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v24 + 32))(v25, v12, a3);
    }
    uint64_t v22 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a6, v22, 1);
}

void type metadata accessor for UITraitCollection?()
{
  if (!lazy cache variable for type metadata for UITraitCollection?)
  {
    type metadata accessor for UITraitCollection();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UITraitCollection?);
    }
  }
}

uint64_t partial apply for implicit closure #1 in static UITraitBridgedEnvironmentPropertyKeyLookup.lookup(in:)(void *a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(v1 + 24) + 16))(*a1, *(void *)(v1 + 16));
}

uint64_t static TypesettingConfigurationKey.read(from:)()
{
  uint64_t v0 = type metadata accessor for TypesettingLanguage();
  MEMORY[0x1F4188790](v0 - 8);
  type metadata accessor for Locale.Language?();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Locale.Language();
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x18C116890](v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    outlined destroy of Locale.Language?((uint64_t)v3);
    uint64_t v9 = static TypesettingLanguage.automatic.getter();
    MEMORY[0x18C112120](&v14, v9);
    uint64_t v12 = v14;
    char v13 = v15;
    return TypesettingConfiguration.init(language:languageAwareLineHeightRatio:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    uint64_t v11 = static TypesettingLanguage.explicit(_:)();
    MEMORY[0x18C112120](&v14, v11);
    uint64_t v12 = v14;
    char v13 = v15;
    TypesettingConfiguration.init(language:languageAwareLineHeightRatio:)();
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

void type metadata accessor for Locale.Language?()
{
  if (!lazy cache variable for type metadata for Locale.Language?)
  {
    type metadata accessor for Locale.Language();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Locale.Language?);
    }
  }
}

uint64_t outlined destroy of Locale.Language?(uint64_t a1)
{
  type metadata accessor for Locale.Language?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for _RowVisitationContext(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v3)(a1, AssociatedTypeWitness);
  uint64_t v4 = *(void *)(v3 + 56);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6 + 8;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))((v4 + v8 + a1) & ~v8, v5);
  uint64_t v9 = (v4 + v8) & ~v8;
  uint64_t v10 = *(void *)(v7 + 56);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12 + 8;
  unint64_t v14 = (v10 + a1 + *(unsigned __int8 *)(v12 + 80) + v9) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  (*(void (**)(unint64_t, uint64_t))(v12 + 8))(v14, v11);
  unint64_t v15 = (*(void *)(v13 + 56) + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  unint64_t v18 = (v15 + *(unsigned __int8 *)(v17 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v21 = v17;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v17 + 48))(v18, 1, v16);
  if (!result)
  {
    uint64_t v20 = *(uint64_t (**)(unint64_t, uint64_t))(v21 + 8);
    return v20(v18, v16);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for _RowVisitationContext(unsigned __int16 *a1, unsigned int a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v40 = AssociatedTypeWitness;
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v39 = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(v39 - 8);
  unsigned int v42 = *(_DWORD *)(v5 + 84);
  unsigned int v43 = v4;
  if (v42 <= v4) {
    unsigned int v6 = v4;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v38 = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(v38 - 8);
  unsigned int v44 = v6;
  unsigned int v41 = *(_DWORD *)(v7 + 84);
  if (v41 > v6) {
    unsigned int v6 = *(_DWORD *)(v7 + 84);
  }
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v9 = v8;
  unsigned int v10 = *(_DWORD *)(v8 + 84);
  unsigned int v11 = v10 - 1;
  if (!v10) {
    unsigned int v11 = 0;
  }
  if (v6 <= v11) {
    unsigned int v12 = v11;
  }
  else {
    unsigned int v12 = v6;
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  uint64_t v14 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v15 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = *(void *)(v8 + 64);
  uint64_t result = a2;
  if (v10) {
    uint64_t v19 = 3;
  }
  else {
    uint64_t v19 = 4;
  }
  if (!a2) {
    return result;
  }
  uint64_t v20 = *(void *)(v3 + 64) + v14;
  uint64_t v21 = (v20 & ~v14) + *(void *)(v5 + 64) + v15;
  uint64_t v22 = *(void *)(v7 + 64) + 7;
  uint64_t v23 = v16 + 8;
  uint64_t v24 = a1;
  if (a2 > v13)
  {
    unint64_t v25 = v19 + v17 + ((v23 + ((v22 + (v21 & ~v15)) & 0xFFFFFFFFFFFFFFF8)) & ~v16);
    char v26 = 8 * v25;
    if (v25 > 3) {
      goto LABEL_20;
    }
    unsigned int v28 = ((a2 - v13 + ~(-1 << v26)) >> v26) + 1;
    if (HIWORD(v28))
    {
      int v27 = *(_DWORD *)((char *)a1 + v25);
      if (v27) {
        goto LABEL_27;
      }
    }
    else
    {
      if (v28 <= 0xFF)
      {
        if (v28 < 2) {
          goto LABEL_37;
        }
LABEL_20:
        int v27 = *((unsigned __int8 *)a1 + v25);
        if (!*((unsigned char *)a1 + v25)) {
          goto LABEL_37;
        }
LABEL_27:
        int v29 = (v27 - 1) << v26;
        if (v25 > 3) {
          int v29 = 0;
        }
        if (v25)
        {
          if (v25 <= 3) {
            int v30 = v25;
          }
          else {
            int v30 = 4;
          }
          switch(v30)
          {
            case 2:
              int v31 = *a1;
              break;
            case 3:
              int v31 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v31 = *(_DWORD *)a1;
              break;
            default:
              int v31 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v31 = 0;
        }
        return v13 + (v31 | v29) + 1;
      }
      int v27 = *(unsigned __int16 *)((char *)a1 + v25);
      if (*(unsigned __int16 *)((char *)a1 + v25)) {
        goto LABEL_27;
      }
    }
  }
LABEL_37:
  if (v44 == v13)
  {
    uint64_t v32 = v43;
    if (v43 < v42)
    {
      uint64_t v24 = (unsigned __int16 *)(((unint64_t)a1 + v20) & ~v14);
      uint64_t v33 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48);
      uint64_t v32 = v42;
      uint64_t v34 = v39;
      return v33(v24, v32, v34);
    }
    uint64_t v34 = v40;
    uint64_t v33 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v3 + 48);
LABEL_45:
    return v33(v24, v32, v34);
  }
  uint64_t v24 = (unsigned __int16 *)(((unint64_t)a1 + v21) & ~v15);
  if (v41 == v13)
  {
    uint64_t v33 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v7 + 48);
    uint64_t v32 = v41;
    uint64_t v34 = v38;
    goto LABEL_45;
  }
  uint64_t v35 = (uint64_t *)(((unint64_t)v24 + v22) & 0xFFFFFFFFFFFFFFF8);
  if ((v12 & 0x80000000) != 0)
  {
    if (v10 >= 2)
    {
      unsigned int v37 = (*(uint64_t (**)(unint64_t))(v9 + 48))(((unint64_t)v35 + v23) & ~v16);
      if (v37 >= 2) {
        return v37 - 1;
      }
      else {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    uint64_t v36 = *v35;
    if ((unint64_t)*v35 >= 0xFFFFFFFF) {
      LODWORD(v36) = -1;
    }
    return (v36 + 1);
  }
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance InheritedTraitCollectionKey(void **a1, void **a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  BOOL result = ((unint64_t)*a1 | (unint64_t)*a2) == 0;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    type metadata accessor for UITraitCollection();
    id v6 = v2;
    id v7 = v3;
    char v8 = static NSObject.== infix(_:_:)();

    return v8 & 1;
  }
  return result;
}

unint64_t type metadata accessor for UITraitCollection()
{
  unint64_t result = lazy cache variable for type metadata for UITraitCollection;
  if (!lazy cache variable for type metadata for UITraitCollection)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UITraitCollection);
  }
  return result;
}

uint64_t ShadowListUpdateRecorder.initialIndex(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v63 = a3;
  uint64_t v64 = a4;
  uint64_t v65 = (void (**)(char *, uint64_t))a1;
  uint64_t v66 = a2;
  uint64_t v8 = *(void *)(a5 + 16);
  uint64_t v7 = *(void *)(a5 + 24);
  swift_getAssociatedTypeWitness();
  uint64_t v55 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v53 = v7;
  uint64_t v52 = v8;
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v54 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v61 = (void (**)(char *, uint64_t))((char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14.n128_f64[0] = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)v49 + *(int *)(v16 + 48) - v15;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v59 = v16;
  uint64_t v60 = v18;
  uint64_t v19 = *(void (**)(void (**)(char *, uint64_t), char *, uint64_t))(v18 + 16);
  uint64_t v57 = (char *)v49 - v15;
  uint64_t v51 = v18 + 16;
  uint64_t v50 = v19;
  ((void (*)(char *, uint64_t, uint64_t, __n128))v19)((char *)v49 - v15, v63, AssociatedTypeWitness, v14);
  uint64_t v58 = *(void *)(v10 - 8);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v58 + 16);
  uint64_t v56 = v17;
  v49[1] = v58 + 16;
  v49[0] = v20;
  v20(v17, v64, v10);
  uint64_t v62 = a5;
  uint64_t v63 = v5;
  ShadowListUpdateRecorder.updates.getter();
  long long v70 = v71;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v22 = swift_getAssociatedConformanceWitness();
  uint64_t v64 = AssociatedTypeWitness;
  *(void *)&long long v67 = AssociatedTypeWitness;
  *((void *)&v67 + 1) = v10;
  uint64_t v68 = AssociatedConformanceWitness;
  uint64_t v69 = v22;
  uint64_t v23 = type metadata accessor for ListUpdate();
  uint64_t v24 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v67 = v24;
  *((void *)&v67 + 1) = v24;
  uint64_t v68 = WitnessTable;
  uint64_t v69 = WitnessTable;
  uint64_t v26 = type metadata accessor for ConcatenatedCollection();
  uint64_t v27 = swift_getWitnessTable();
  char v28 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v28)
  {
    int v29 = v61;
    int v30 = (char *)v61 + *(int *)(v59 + 48);
    int v31 = *(void (**)(void (**)(char *, uint64_t), char *, uint64_t))(v60 + 32);
    uint64_t v32 = v64;
    v31(v61, v57, v64);
    uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
    v33(v30, v56, v10);
    v31(v65, (char *)v29, v32);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v33)(v66, v30, v10);
  }
  else
  {
    uint64_t updated = ShadowListUpdateRecorder.updates.getter();
    long long v71 = v67;
    MEMORY[0x1F4188790](updated);
    uint64_t v36 = v52;
    uint64_t v37 = v53;
    v49[-2] = v52;
    v49[-1] = v37;
    uint64_t KeyPath = swift_getKeyPath();
    MEMORY[0x1F4188790](KeyPath);
    v49[-4] = v36;
    v49[-3] = v37;
    v49[-2] = v39;
    uint64_t v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #3 in implicit closure #1 in UIKitWheelPicker.updateUIView(_:context:), (uint64_t)&v49[-6], v26, v23, MEMORY[0x1E4FBC248], v27, MEMORY[0x1E4FBC278], v40);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&long long v71 = v41;
    swift_getWitnessTable();
    BidirectionalCollection.reversed()();
    *(void *)&long long v71 = v67;
    uint64_t v42 = v59;
    unsigned int v43 = v61;
    unsigned int v44 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)v61 + *(int *)(v59 + 48));
    uint64_t v45 = v57;
    uint64_t v46 = v64;
    v50(v61, v57, v64);
    ((void (*)(unsigned int (*)(char *, uint64_t, uint64_t), char *, uint64_t))v49[0])(v44, v56, v10);
    uint64_t v47 = (void (**)(char *, char *, uint64_t))type metadata accessor for ReversedCollection();
    uint64_t v48 = (char *)swift_getWitnessTable();
    ShadowListUpdateRecorder.applyUpdates<A>(_:to:)((uint64_t)v65, v66, (uint64_t)&v71, v43, v44, v62, v47, v48);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v45, v42);
    (*(void (**)(unsigned int (*)(char *, uint64_t, uint64_t), uint64_t))(v58 + 8))(v44, v10);
    return (*(uint64_t (**)(void, uint64_t))(v60 + 8))(v43, v46);
  }
}

uint64_t protocol witness for ListCoreDataSource.contextForItem(index:) in conformance CollectionViewListDataSource<A>@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return CollectionViewListDataSource.contextForItem(index:)(*a1, *a2, a3, a4);
}

uint64_t CollectionViewListDataSource.contextForItem(index:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for ListContentVisitor();
  MEMORY[0x1F4188790](v9);
  unsigned int v11 = (char *)&v14 - v10;
  uint64_t v14 = a2;
  unint64_t v15 = a1;
  ListContentVisitor.init(index:)((uint64_t)&v15, (uint64_t)&v14, a3, WitnessTable, (uint64_t)&v14 - v10);
  swift_getWitnessTable();
  ListSectionInfo.visitRow<A>(index:visitor:)(a1, a2);
  type metadata accessor for _RowVisitationContext();
  uint64_t v12 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a4, v11, v12);
}

uint64_t partial apply for closure #1 in ShadowListDataSource.contextForItem(index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in ShadowListDataSource.contextForItem(index:)(a1, a2);
}

uint64_t ListContentVisitor.visit(view:traits:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v22 = a2;
  uint64_t v25 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v23 = (char *)&v21 - v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = TupleTypeMetadata2 - 8;
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v21 - v11;
  uint64_t v13 = *v22;
  uint64_t v14 = type metadata accessor for _RowVisitationContext();
  uint64_t v15 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v3, v15);
  uint64_t v16 = *(int *)(v10 + 56);
  uint64_t v17 = v3 + *(int *)(a3 + 36) + v16;
  uint64_t v18 = (uint64_t)&v12[v16];
  (*(void (**)(char *))(*(void *)(v7 - 8) + 16))(v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v18, v17, v8);
  outlined init with copy of _ViewList_View(v25, (uint64_t)v28);
  uint64_t v27 = v13;
  uint64_t v19 = (uint64_t)v23;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v23, 1, 1);
  __int16 v26 = 0;
  _RowVisitationContext.init(index:view:traits:explicitSelectionValue:hasMultipleSelection:deleteControlVisibility:reorderControlVisibility:)((uint64_t)v12, v18, (uint64_t)v28, &v27, v19, 0, (char *)&v26 + 1, (char *)&v26, v3);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v3, 0, 1, v14);
  swift_bridgeObjectRetain();
  return 0;
}

void storeEnumTagSinglePayload for _RowVisitationContext(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v39 = *(_DWORD *)(v5 + 84);
  unsigned int v40 = v4;
  if (v39 <= v4) {
    unsigned int v6 = v4;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v5 + 84);
  }
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v41 = v6;
  unsigned int v38 = *(_DWORD *)(v7 + 84);
  if (v38 > v6) {
    unsigned int v6 = *(_DWORD *)(v7 + 84);
  }
  int v8 = 0;
  uint64_t v9 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  unsigned int v12 = v11 - 1;
  if (!v11) {
    unsigned int v12 = 0;
  }
  uint64_t v13 = *(void *)(v3 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v15 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v16 = *(void *)(v7 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v18 = *(void *)(v9 + 64);
  if (v6 <= v12) {
    unsigned int v19 = v12;
  }
  else {
    unsigned int v19 = v6;
  }
  if (v19 <= 0x7FFFFFFF) {
    unsigned int v20 = 0x7FFFFFFF;
  }
  else {
    unsigned int v20 = v19;
  }
  uint64_t v21 = v13 + v14;
  uint64_t v22 = ((v13 + v14) & ~v14) + *(void *)(v5 + 64) + v15;
  uint64_t v23 = v17 + 8;
  uint64_t v24 = 3;
  if (!v11) {
    uint64_t v24 = 4;
  }
  size_t v25 = v24 + v18 + ((v17 + 8 + ((v16 + 7 + (v22 & ~v15)) & 0xFFFFFFFFFFFFFFF8)) & ~v17);
  if (a3 > v20)
  {
    if (v25 <= 3)
    {
      unsigned int v26 = ((a3 - v20 + ~(-1 << (8 * v25))) >> (8 * v25)) + 1;
      if (HIWORD(v26))
      {
        int v8 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v8 = 2;
      }
      else
      {
        int v8 = v26 > 1;
      }
    }
    else
    {
      int v8 = 1;
    }
  }
  if (v20 < a2)
  {
    unsigned int v27 = ~v20 + a2;
    if (v25 < 4)
    {
      int v28 = (v27 >> (8 * v25)) + 1;
      if (v25)
      {
        int v33 = v27 & ~(-1 << (8 * v25));
        bzero(a1, v25);
        if (v25 == 3)
        {
          *(_WORD *)a1 = v33;
          a1[2] = BYTE2(v33);
        }
        else if (v25 == 2)
        {
          *(_WORD *)a1 = v33;
        }
        else
        {
          *a1 = v33;
        }
      }
    }
    else
    {
      bzero(a1, v25);
      *(_DWORD *)a1 = v27;
      int v28 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v25] = v28;
        break;
      case 2:
        *(_WORD *)&a1[v25] = v28;
        break;
      case 3:
        goto LABEL_66;
      case 4:
        *(_DWORD *)&a1[v25] = v28;
        break;
      default:
        return;
    }
    return;
  }
  uint64_t v29 = ~v14;
  uint64_t v30 = ~v15;
  uint64_t v31 = ~v17;
  uint64_t v32 = a1;
  switch(v8)
  {
    case 1:
      a1[v25] = 0;
      if (a2) {
        goto LABEL_36;
      }
      return;
    case 2:
      *(_WORD *)&a1[v25] = 0;
      if (a2) {
        goto LABEL_36;
      }
      return;
    case 3:
LABEL_66:
      __break(1u);
      return;
    case 4:
      *(_DWORD *)&a1[v25] = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (!a2) {
        return;
      }
LABEL_36:
      if (v41 == v20)
      {
        if (v40 >= v39)
        {
          uint64_t v34 = *(void (**)(unsigned char *))(v3 + 56);
        }
        else
        {
          uint64_t v32 = (unsigned char *)((unint64_t)&a1[v21] & v29);
          uint64_t v34 = *(void (**)(unsigned char *))(v5 + 56);
        }
LABEL_49:
        v34(v32);
        return;
      }
      uint64_t v32 = (unsigned char *)((unint64_t)&a1[v22] & v30);
      if (v38 == v20)
      {
        uint64_t v34 = *(void (**)(unsigned char *))(v7 + 56);
        goto LABEL_49;
      }
      uint64_t v35 = (void *)((unint64_t)&v32[v16 + 7] & 0xFFFFFFFFFFFFFFF8);
      if ((v19 & 0x80000000) != 0)
      {
        if (v11 >= 2)
        {
          uint64_t v37 = *(void (**)(unint64_t, void))(v10 + 56);
          v37(((unint64_t)v35 + v23) & v31, a2 + 1);
        }
      }
      else
      {
        if ((a2 & 0x80000000) != 0) {
          uint64_t v36 = a2 ^ 0x80000000;
        }
        else {
          uint64_t v36 = a2 - 1;
        }
        *uint64_t v35 = v36;
      }
      return;
  }
}

uint64_t _RowVisitationContext.init(index:view:traits:explicitSelectionValue:hasMultipleSelection:deleteControlVisibility:reorderControlVisibility:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, char *a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v21 = *a4;
  char v23 = *a7;
  char v24 = *a8;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = a9 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a9, a1, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v13, a2, v12);
  uint64_t v14 = (int *)type metadata accessor for _RowVisitationContext();
  uint64_t v15 = a9 + v14[9];
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v16 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32))(v15, a3, v16);
  *(void *)(a9 + v14[10]) = v21;
  uint64_t v17 = a9 + v14[11];
  swift_getAssociatedTypeWitness();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a5, v18);
  *(unsigned char *)(a9 + v14[12]) = a6;
  *(unsigned char *)(a9 + v14[13]) = v23;
  *(unsigned char *)(a9 + v14[14]) = v24;
  return result;
}

uint64_t type metadata accessor for _RowVisitationContext()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with copy of _ViewList_View(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ListContentVisitor.init(index:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v37 = a4;
  uint64_t v38 = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v33 = a3;
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = TupleTypeMetadata2 - 8;
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = (char *)&v29 + *(int *)(v10 + 56) - v15;
  uint64_t v35 = AssociatedTypeWitness;
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(AssociatedTypeWitness - 8) + 32);
  v34((char *)&v29 - v15, a1, AssociatedTypeWitness, v14);
  uint64_t v18 = *(void *)(v8 - 8);
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 32);
  uint64_t v32 = v18 + 32;
  v31(v17, v36, v8);
  uint64_t v19 = type metadata accessor for _RowVisitationContext();
  uint64_t v20 = v38;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v38, 1, 1, v19);
  uint64_t v21 = *(int *)(v10 + 56);
  uint64_t v30 = v12;
  uint64_t v22 = &v12[v21];
  char v23 = v16;
  char v24 = (void (*)(uint64_t, char *, uint64_t))v34;
  uint64_t v25 = v35;
  ((void (*)(char *, char *, uint64_t))v34)(v12, v23, v35);
  unsigned int v26 = (uint64_t (*)(uint64_t, char *, uint64_t))v31;
  v31(v22, (uint64_t)v17, v8);
  uint64_t v27 = v20 + *(int *)(type metadata accessor for ListContentVisitor() + 36);
  v24(v27, v30, v25);
  return v26(v27 + *(int *)(v10 + 56), v22, v8);
}

uint64_t type metadata accessor for ListContentVisitor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:)()
{
  return partial apply for closure #1 in ListCoreDataSource.visitRowAt<A>(_:visitor:)();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t storeEnumTagSinglePayload for ResolvedRadioGroupPicker(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 8) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ListCoreDataSource.selectionValue(forRowAt:respectSelectionDisabled:)(*(unsigned __int8 *)(v1 + 32), a1);
}

void partial apply for closure #1 in UICollectionViewListCoordinatorBase.updateListContents(_:)(uint64_t a1)
{
  closure #1 in UICollectionViewListCoordinatorBase.updateListContents(_:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

void closure #1 in UICollectionViewListCoordinatorBase.updateListContents(_:)(uint64_t a1, void *a2, void *a3)
{
  unsigned int v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = *MEMORY[0x1E4FBC8C8] & *a2;
  uint64_t v8 = type metadata accessor for ShadowListDataSource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v16 - v10;
  uint64_t v12 = (char *)a2 + *(void *)(v7 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v12, v8);
  if (*((unsigned char *)a2 + *(void *)((*v6 & *a2) + 0xE8)) == 1)
  {
    uint64_t v13 = 1;
  }
  else
  {
    double v14 = (void *)((char *)a2 + *(void *)((*v6 & *a2) + 0xA0));
    swift_beginAccess();
    uint64_t v13 = *v14;
    outlined copy of Transaction?(v13);
  }
  ShadowListDataSource.configureCell(_:transaction:context:)((uint64_t)a3, v13, a1, v8);
  outlined consume of Transaction?(v13);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  id v15 = objc_msgSend(a3, sel_layer);
  swift_getWitnessTable();
  v16[1] = *(void *)(a1 + *(int *)(type metadata accessor for _RowVisitationContext() + 40));
  ViewTraitCollection.zIndex.getter();
  objc_msgSend(v15, sel_setZPosition_);
}

uint64_t partial apply for closure #1 in ScrollActionDispatcher.updateValue()(uint64_t a1)
{
  return closure #1 in ScrollActionDispatcher.updateValue()(a1, v1[4], v1[5], v1[2], v1[3]);
}

uint64_t partial apply for closure #1 in NavigationLink<>.init<A>(value:label:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in NavigationLink<>.init<A>(value:label:)(a1, a2);
}

{
  return closure #1 in NavigationLink<>.init<A>(value:label:)(a1, a2);
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:cellForItemAt:)(a1, *(void **)(v2 + 16), *(UICollectionView **)(v2 + 24), a2);
}

uint64_t partial apply for closure #1 in View.appIntentIntelligenceProvider<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 24);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 40) = v5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v6 + 16));
  uint64_t result = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(boxed_opaque_existential_1, a1, v5);
  *a2 = v6 | 0x6000000000000000;
  return result;
}

uint64_t getEnumTagSinglePayload for NavigationDestinationModifier.SeededResolver(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 12)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t partial apply for closure #1 in List.init(selection:content:)(uint64_t a1)
{
  return closure #1 in List.init(selection:content:)(a1, v1[2], v1[3], v1[4]);
}

{
  uint64_t *v1;

  return closure #1 in List.init(selection:content:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t closure #1 in List.init(selection:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Binding.projecting<A>(_:)();
}

{
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a4, a3, a4);
  type metadata accessor for Set();
  type metadata accessor for Binding();
  type metadata accessor for SetSelectionManagerProjection();
  swift_getWitnessTable();
  return Binding.projecting<A>(_:)();
}

uint64_t type metadata accessor for OptionalSelectionManagerProjection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter(uint64_t a1)
{
  return closure #1 in closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter(a1, *(void **)(v1 + 48));
}

uint64_t closure #1 in closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter(uint64_t a1, void *a2)
{
  uint64_t v3 = swift_retain();
  MEMORY[0x18C115B40](v3);
  if (*(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*a2 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

uint64_t partial apply for closure #1 in SearchFieldConfigurationReader.MakeContent.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in SearchFieldConfigurationReader.MakeContent.value.getter(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t closure #1 in SearchFieldConfigurationReader.MakeContent.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v13 = a6;
  uint64_t v14 = a1;
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v6 = type metadata accessor for SearchFieldConfigurationReader();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13 - v8;
  SearchFieldConfigurationReader.MakeContent.reader.getter((uint64_t)&v13 - v8);
  uint64_t v10 = *(void (**)(uint64_t))&v9[*(int *)(v6 + 56)];
  uint64_t v11 = *(void (**)(char *, uint64_t))(v7 + 8);
  swift_retain();
  v11(v9, v6);
  v10(v14);
  return swift_release();
}

uint64_t partial apply for closure #1 in SearchField.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for SearchField() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return closure #1 in SearchField.body.getter(a1, v8, v5, v6, a2);
}

uint64_t EditMenuBridge.update(environent:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + direct field offset for EditMenuBridge.presentedMenu + 8);
  uint64_t v4 = *(void *)(v1 + direct field offset for EditMenuBridge.presentedMenu + 16);
  uint64_t v5 = *(void *)(v1 + direct field offset for EditMenuBridge.presentedMenu + 24);
  uint64_t v6 = *(void *)(v1 + direct field offset for EditMenuBridge.presentedMenu + 32);
  uint64_t v7 = *(void **)(v1 + direct field offset for EditMenuBridge.presentedMenu + 40);
  uint64_t v9 = *(void *)(v1 + direct field offset for EditMenuBridge.presentedMenu);
  type metadata accessor for EnvironmentPropertyKey<ActiveEditMenuKey>();
  outlined copy of ActiveEditMenu?(v9, v3, v4, v5, v6, v7);
  outlined copy of ActiveEditMenu?(v9, v3, v4, v5, v6, v7);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ActiveEditMenuKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined consume of ActiveEditMenu?(v9, v3, v4, v5, v6, v7);
}

void outlined copy of ActiveEditMenu?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a6 != (void *)1)
  {
    swift_retain();
    id v7 = a6;
  }
}

uint64_t outlined consume of ActiveEditMenu?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a6 != (void *)1)
  {

    return swift_release();
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<ActiveEditMenuKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ActiveEditMenuKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ActiveEditMenuKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ActiveEditMenuKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ActiveEditMenuKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ActiveEditMenuKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ActiveEditMenuKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ActiveEditMenuKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SubscriptionView<A, B>(int *a1, uint64_t a2, uint64_t *a3)
{
  return static SubscriptionView._makeViewList(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5]);
}

ValueMetadata *type metadata accessor for NavigationAuthority()
{
  return &type metadata for NavigationAuthority;
}

ValueMetadata *type metadata accessor for _HiddenModifier()
{
  return &type metadata for _HiddenModifier;
}

uint64_t key path getter for EnvironmentValues.effectiveLabelStyle : EnvironmentValues@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for _PreferenceTransformModifier<ValidTestCasesPreferenceKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveLabelStyleKey>, (uint64_t)&type metadata for EffectiveLabelStyleKey, (uint64_t)&protocol witness table for EffectiveLabelStyleKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for _PreferenceTransformModifier<ValidTestCasesPreferenceKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveLabelStyleKey>, (uint64_t)&type metadata for EffectiveLabelStyleKey, (uint64_t)&protocol witness table for EffectiveLabelStyleKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path setter for EnvironmentValues.effectiveLabelStyle : EnvironmentValues()
{
  return EnvironmentValues.effectiveLabelStyle.setter();
}

uint64_t EnvironmentValues.effectiveLabelStyle.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EffectiveLabelStyleKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<EffectiveLabelStyleKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveLabelStyleKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EffectiveLabelStyleKey>);
    }
  }
}

uint64_t protocol witness for Sequence.makeIterator() in conformance PlatformViewHost<A>.UnarySubtreeSequence@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  PlatformViewHost.UnarySubtreeSequence.makeIterator()(a2);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 8);

  return v4(v2, a1);
}

uint64_t PlatformViewHost.UnarySubtreeSequence.makeIterator()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = (void *)MEMORY[0x18C119DF0](v1);
  swift_unknownObjectWeakInit();

  type metadata accessor for _IteratorBox<_ClosureBasedIterator<UIView>>();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in PlatformViewHost.UnarySubtreeSequence.makeIterator();
  *(void *)(result + 24) = v3;
  *a1 = result;
  return result;
}

void type metadata accessor for _IteratorBox<_ClosureBasedIterator<UIView>>()
{
  if (!lazy cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<UIView>>)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBBD98];
    type metadata accessor for _ClosureBasedIterator<UIView>(255, &lazy cache variable for type metadata for _ClosureBasedIterator<UIView>, MEMORY[0x1E4FBBD98]);
    lazy protocol witness table accessor for type _ClosureBasedIterator<UIView> and conformance _ClosureBasedIterator<A>(&lazy protocol witness table cache variable for type _ClosureBasedIterator<UIView> and conformance _ClosureBasedIterator<A>, &lazy cache variable for type metadata for _ClosureBasedIterator<UIView>, v0);
    unint64_t v1 = type metadata accessor for _IteratorBox();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for _IteratorBox<_ClosureBasedIterator<UIView>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _ClosureBasedIterator<UIView> and conformance _ClosureBasedIterator<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ClosureBasedIterator<UIView>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _ClosureBasedIterator<UIView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void @objc UIHostingContentView._containerViewIsHidden(forReuse:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = a1;
  UIHostingContentView._containerViewIsHidden(forReuse:)(a3);
}

void partial apply for closure #1 in UIKitToolbarStrategy.updateNavigationBarLeading()(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  closure #1 in UIKitToolbarStrategy.updateNavigationBarLeading()(a1, (void (*)(void *__return_ptr))partial apply for closure #1 in UIKitToolbarStrategy.barButtonGroups(in:), (SEL *)&selRef_setLeadingItemGroups_, a2, (__n128)xmmword_188382680);
}

void partial apply for closure #1 in UIKitToolbarStrategy.updateNavigationBarTrailing()(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  closure #1 in UIKitToolbarStrategy.updateNavigationBarLeading()(a1, (void (*)(void *__return_ptr))closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)partial apply, (SEL *)&selRef_setTrailingItemGroups_, a2, (__n128)xmmword_18838AA10);
}

void closure #1 in UIKitToolbarStrategy.updateNavigationBarLeading()(uint64_t a1@<X0>, void (*a2)(void *__return_ptr)@<X3>, SEL *a3@<X4>, unsigned char *a4@<X8>, __n128 a5@<Q0>)
{
  memset(v11, 0, sizeof(v11));
  __n128 v12 = a5;
  specialized ToolbarStrategy.withUpdate<A>(_:)(a2);
  outlined destroy of Toolbar.BarLocation((uint64_t)v11);
  uint64_t v8 = *(void **)(a1 + direct field offset for ToolbarBridge.platformVended + 8);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
  id v9 = v8;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v9, *a3, isa);

  *a4 = 1;
}

void @objc PlatformViewHost.willMove(toSuperview:)(void *a1, uint64_t a2, UIView_optional *a3)
{
  uint64_t v5 = a3;
  id v6 = a1;
  PlatformViewHost.willMove(toSuperview:)(a3);
}

Swift::Void __swiftcall PlatformViewHost.willMove(toSuperview:)(UIView_optional *toSuperview)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v5 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v6 = *MEMORY[0x1E4FBC8C8] & *(void *)v1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  if (!toSuperview) {
    goto LABEL_9;
  }
  (*(void (**)(unsigned char *, char *, uint64_t, double))(v9 + 16))(&v40[-v8], &v2[*(void *)(v6 + 120)], AssociatedTypeWitness, v10);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_9;
  }
  id v11 = v47;
  id v12 = objc_msgSend(v47, sel_view);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = &v2[*(void *)((*v5 & *(void *)v2) + 0x80)];
    if (MEMORY[0x18C119DF0](v14))
    {
      uint64_t v15 = *((void *)v14 + 1);
      uint64_t v16 = swift_getObjectType();
      uint64_t v17 = (void *)ViewRendererHost.uiViewController.getter(v16, v15);
      swift_unknownObjectRelease();
      if (v17)
      {
        int v18 = v2[*(void *)((*v5 & *(void *)v2) + 0x88)];
        if (v18 != 2)
        {
          id v20 = v17;
          id v21 = objc_msgSend(v11, sel_parentViewController);

          if (v18)
          {
            if (!v21 || (v21, v21 != v20))
            {
              id v22 = objc_msgSend(v2, sel_window);

              if (v22)
              {
                objc_msgSend(v20, sel_addChildViewController_, v11);
                id v23 = v13;
                PlatformViewHost.hostedView.setter(v13);
              }
            }
          }
          else if (!v21 || (v21, v21 != v20))
          {
            objc_msgSend(v20, sel_addChildViewController_, v11);
          }
          id v44 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1E20]), sel_init);
          char v24 = &v2[*(void *)((*v5 & *(void *)v2) + 0x68)];
          swift_beginAccess();
          id v45 = v20;
          uint64_t v25 = *(void *)v24;
          uint64_t v26 = *((void *)v24 + 1);
          uint64_t v27 = *v5 & *(void *)v2;
          LODWORD(v43) = *(_DWORD *)&v2[*(void *)(v27 + 0x70)];
          int v28 = &v2[*(void *)(v27 + 144)];
          uint64_t v29 = *(void *)v28;
          char v30 = v28[8];
          int v41 = *((_DWORD *)v28 + 3);
          uint64_t v31 = (objc_class *)type metadata accessor for EnvironmentWrapper();
          uint64_t v32 = (char *)objc_allocWithZone(v31);
          uint64_t v33 = &v32[OBJC_IVAR___SwiftUIEnvironmentWrapper_environment];
          *(void *)uint64_t v33 = v25;
          *((void *)v33 + 1) = v26;
          *(_DWORD *)&v32[OBJC_IVAR___SwiftUIEnvironmentWrapper_phase] = v43;
          uint64_t v34 = &v32[OBJC_IVAR___SwiftUIEnvironmentWrapper_focusedValues];
          uint64_t v42 = v29;
          *(void *)uint64_t v34 = v29;
          v34[8] = v30;
          *((_DWORD *)v34 + 3) = v41;
          v46.receiver = v32;
          v46.super_class = v31;
          swift_retain_n();
          swift_retain_n();
          swift_retain_n();
          uint64_t v35 = [(UIView_optional *)&v46 init];
          unsigned int v43 = v40;
          MEMORY[0x1F4188790](v35);
          *(void *)&v40[-32] = v25;
          *(void *)&v40[-24] = v26;
          v40[-16] = 0;
          uint64_t v36 = v44;
          uint64_t v37 = (void *)UITraitCollection._modifyingTraits(environmentWrapper:mutations:)();
          swift_release();
          swift_release();
          swift_release();

          id v38 = v37;
          id v39 = v45;
          objc_msgSend(v45, sel__noWarn_setOverrideTraitCollection_forChild_, v38, v11);

          goto LABEL_9;
        }
      }
    }
    id v19 = v13;
    PlatformViewHost.hostedView.setter(v13);

LABEL_9:
    v48.receiver = v2;
    v48.super_class = ObjectType;
    -[UIView_optional willMoveToSuperview:](&v48, sel_willMoveToSuperview_, toSuperview, v10);
    return;
  }
  __break(1u);
}

void closure #1 in PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  uint64_t v7 = a1 + 16;
  swift_beginAccess();
  uint64_t v8 = (void *)MEMORY[0x18C119DF0](v7);
  if (v8)
  {
    uint64_t v9 = v8;
    objc_msgSend(v8, sel__noWarn_setOverrideTraitCollection_forChild_, a2, a3);
  }
  objc_msgSend(a3, sel_updateTraitsIfNeeded);
  if (a4)
  {
    swift_beginAccess();
    double v10 = (void *)MEMORY[0x18C119DF0](v7);
    if (v10)
    {
      id v11 = v10;
      objc_msgSend(v10, sel_setNeedsStatusBarAppearanceUpdate);
    }
  }
}

void @objc PlatformViewHost.didMoveToWindow()(void *a1)
{
  id v1 = a1;
  PlatformViewHost.didMoveToWindow()();
}

Swift::Void __swiftcall PlatformViewHost.didMoveToWindow()()
{
  id v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  double v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v23 - v7;
  id v9 = objc_msgSend(v1, sel_window, v6);

  if (!v9) {
    goto LABEL_9;
  }
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, (char *)v1 + *(void *)((*v3 & *v1) + 0x78), AssociatedTypeWitness);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_9;
  }
  id receiver = v24.receiver;
  id v11 = objc_msgSend(v24.receiver, sel_view);
  if (v11)
  {
    id v12 = v11;
    uint64_t v13 = (char *)v1 + *(void *)((*v3 & *v1) + 0x80);
    if (MEMORY[0x18C119DF0](v13)
      && (uint64_t v14 = *((void *)v13 + 1),
          uint64_t v15 = swift_getObjectType(),
          id v16 = (id)ViewRendererHost.uiViewController.getter(v15, v14),
          swift_unknownObjectRelease(),
          v16))
    {
      int v17 = *((unsigned __int8 *)v1 + *(void *)((*v3 & *v1) + 0x88));
      if (v17 != 2)
      {
        if (v17)
        {
          objc_msgSend(v16, sel_addChildViewController_, receiver);
        }
        else
        {
          id v16 = v16;
          id v18 = objc_msgSend(receiver, sel_parentViewController);

          if (!v18 || (v18, v18 != v16)) {
            objc_msgSend(v16, sel_addChildViewController_, receiver);
          }
          id v19 = (objc_class *)swift_getObjectType();
          v24.id receiver = v1;
          v24.super_class = v19;
          id v20 = objc_msgSendSuper2(&v24, sel_hostedView);
          if (v20)
          {
            id v21 = v20;

            goto LABEL_9;
          }
        }
        id v22 = v12;
        PlatformViewHost.hostedView.setter(v12);
        objc_msgSend(receiver, sel_didMoveToParentViewController_, v16);

        goto LABEL_9;
      }
    }
    else
    {
    }
LABEL_9:
    v23.id receiver = v1;
    v23.super_class = ObjectType;
    objc_msgSendSuper2(&v23, sel_didMoveToWindow);
    return;
  }
  __break(1u);
}

void @objc ListCollectionViewCellBase.layoutSubviews()(void *a1)
{
  id v1 = a1;
  ListCollectionViewCellBase.layoutSubviews()();
}

Swift::Void __swiftcall ListCollectionViewCellBase.layoutSubviews()()
{
  v8.id receiver = v0;
  v8.super_class = (Class)type metadata accessor for ListCollectionViewCellBase();
  objc_msgSendSuper2(&v8, sel_layoutSubviews);
  if (one-time initialization token for isEnabledInProcessEnv != -1) {
    swift_once();
  }
  if ((static ListUsesUIHostingConfigurationFeature.isEnabledInProcessEnv & 1) == 0)
  {
    uint64_t v1 = *(void *)&v0[direct field offset for ListCollectionViewCellBase.host];
    if (v1)
    {
      objc_msgSend(*(id *)&v0[direct field offset for ListCollectionViewCellBase.host], sel_bounds);
      double Width = CGRectGetWidth(v9);
      uint64_t v3 = (double *)&v0[direct field offset for ListCollectionViewCellBase.cellHostWidth];
      id v4 = (BOOL *)&v0[direct field offset for ListCollectionViewCellBase.cellHostWidth + 8];
      if (!*v4 && Width == *v3) {
        return;
      }
    }
    else
    {
      uint64_t v3 = (double *)&v0[direct field offset for ListCollectionViewCellBase.cellHostWidth];
      if (v0[direct field offset for ListCollectionViewCellBase.cellHostWidth + 8]) {
        return;
      }
      id v4 = (BOOL *)(v3 + 1);
      double Width = 0.0;
    }
    uint64_t v5 = &v0[OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_insetsDelegate];
    if (MEMORY[0x18C119DF0](&v0[OBJC_IVAR____TtC7SwiftUI25AnyListCollectionViewCell_insetsDelegate]))
    {
      uint64_t v6 = *((void *)v5 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 8))(v0, ObjectType, v6);
      swift_unknownObjectRelease();
    }
    *uint64_t v3 = Width;
    *id v4 = v1 == 0;
  }
}

Swift::Void __swiftcall UICollectionViewListCoordinatorBase.listCollectionViewSeparatorInsetsChanged(for:)(UICollectionViewCell *a1)
{
  id v3 = (id)MEMORY[0x18C119DF0]((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xF8));
  objc_msgSend(v3, sel__cellPreferredSeparatorInsetsChanged_, a1);
}

void UINavigationItem.updateTrailingItemsIfNeeded(_:)(void *a1, SEL *a2, SEL *a3, SEL *a4)
{
  objc_super v8 = v4;
  id v9 = [a1 *a2];
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
  static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v10 = [v8 *a2];
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v12 = specialized _ArrayProtocol.filter(_:)(v11);
  swift_bridgeObjectRelease();
  specialized Array.replaceSubrange<A>(_:with:)(0, 0, v12);
  id v13 = [v8 *a3];
  if (v13)
  {
    uint64_t v14 = v13;
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
    unint64_t v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    unint64_t v16 = specialized _ArrayProtocol.filter(_:)(v15);
    swift_bridgeObjectRelease();
    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v17) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v17)
      {
LABEL_4:
        uint64_t v28 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray.reserveCapacity(_:)();
        if (v17 < 0)
        {
          __break(1u);
          return;
        }
        uint64_t v26 = a4;
        uint64_t v18 = 0;
        uint64_t v19 = MEMORY[0x1E4FBC838] + 8;
        do
        {
          if ((v16 & 0xC000000000000001) != 0) {
            id v20 = (id)MEMORY[0x18C117680](v18, v16);
          }
          else {
            id v20 = *(id *)(v16 + 8 * v18 + 32);
          }
          id v21 = v20;
          ++v18;
          type metadata accessor for ToolbarItemPlacement.Role?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, v19, MEMORY[0x1E4FBBE00]);
          uint64_t v22 = swift_allocObject();
          *(_OWORD *)(v22 + 16) = xmmword_188351940;
          *(void *)(v22 + 32) = v21;
          specialized Array._endMutation()();
          id v23 = objc_allocWithZone(MEMORY[0x1E4FB14B8]);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v23, sel_initWithBarButtonItems_representativeItem_, isa, 0);

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        while (v17 != v18);
        uint64_t v25 = v28;
        swift_bridgeObjectRelease();
        a4 = v26;
        goto LABEL_13;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v25 = MEMORY[0x1E4FBC860];
LABEL_13:
    specialized Array.replaceSubrange<A>(_:with:)(0, 0, v25);
  }
  v27.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v8, *a4, v27.super.isa);
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1)
{
  unint64_t v1 = a1;
  uint64_t v20 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_29;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = _CocoaArrayWrapper.endIndex.getter())
  {
    unint64_t v14 = v1;
    unint64_t v3 = 0;
    uint64_t v17 = v1 & 0xFFFFFFFFFFFFFF8;
    unint64_t v18 = v1 & 0xC000000000000001;
    uint64_t v15 = i;
    unint64_t v16 = v1 + 32;
    while (1)
    {
      if (v18)
      {
        id v4 = (id)MEMORY[0x18C117680](v3, v14);
        BOOL v5 = __OFADD__(v3++, 1);
        if (v5) {
          goto LABEL_28;
        }
      }
      else
      {
        if (v3 >= *(void *)(v17 + 16)) {
          goto LABEL_27;
        }
        id v4 = *(id *)(v16 + 8 * v3);
        BOOL v5 = __OFADD__(v3++, 1);
        if (v5) {
          goto LABEL_28;
        }
      }
      uint64_t v19 = v4;
      id v6 = objc_msgSend(v4, sel_barButtonItems);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
      unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v1 >> 62) {
        break;
      }
      uint64_t v7 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v7) {
        goto LABEL_11;
      }
LABEL_4:
      swift_bridgeObjectRelease_n();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      unint64_t v1 = (unint64_t)&v20;
      specialized ContiguousArray._endMutation()();
LABEL_5:
      if (v3 == v15) {
        return v20;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    if (!v7) {
      goto LABEL_4;
    }
LABEL_11:
    uint64_t v8 = 4;
    while (1)
    {
      id v9 = (v1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C117680](v8 - 4, v1) : *(id *)(v1 + 8 * v8);
      id v10 = v9;
      uint64_t v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1)) {
        break;
      }
      swift_getObjectType();
      unsigned int v12 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI);

      if (v12)
      {

        swift_bridgeObjectRelease_n();
        goto LABEL_5;
      }
      ++v8;
      if (v11 == v7) {
        goto LABEL_4;
      }
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    ;
  }
  return MEMORY[0x1E4FBC860];
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  unint64_t v7;
  uint64_t v9;

  id v9 = MEMORY[0x1E4FBC860];
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      id v4 = a1 & 0xFFFFFFFFFFFFFF8;
      while ((a1 & 0xC000000000000001) != 0)
      {
        BOOL v5 = (id)MEMORY[0x18C117680](v3, a1);
LABEL_9:
        id v6 = v5;
        uint64_t v7 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_15;
        }
        swift_getObjectType();
        if (objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI))
        {
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          id v4 = a1 & 0xFFFFFFFFFFFFFF8;
        }
        ++v3;
        if (v7 == v2) {
          return v9;
        }
      }
      if (v3 < *(void *)(v4 + 16)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    BOOL v5 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t (*a6)(uint64_t))
{
  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    id v6 = a6;
    uint64_t v9 = a3;
    uint64_t v10 = a2;
    uint64_t v11 = a1;
    uint64_t v8 = *v7;
    if (!((unint64_t)*v7 >> 62))
    {
      uint64_t v13 = v8 & 0xFFFFFFFFFFFFFF8;
      uint64_t v14 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v14 >= a2) {
        goto LABEL_4;
      }
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v14 < v10) {
    goto LABEL_39;
  }
LABEL_4:
  uint64_t v12 = v10 - v11;
  if (__OFSUB__(v10, v11))
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v13 = v9 & 0xFFFFFFFFFFFFFF8;
  uint64_t v14 = (unint64_t)v9 >> 62;
  if (!((unint64_t)v9 >> 62))
  {
    unint64_t v15 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v16 = v15 - v12;
    if (!__OFSUB__(v15, v12)) {
      goto LABEL_7;
    }
LABEL_46:
    __break(1u);
LABEL_47:
    swift_bridgeObjectRetain();
    uint64_t v33 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v18 = v33 + v39;
    if (!__OFADD__(v33, v39)) {
      goto LABEL_9;
    }
LABEL_49:
    __break(1u);
LABEL_50:
    swift_bridgeObjectRetain();
    uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_41:
  if (v9 < 0) {
    uint64_t v8 = v9;
  }
  else {
    uint64_t v8 = v13;
  }
  swift_bridgeObjectRetain();
  unint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v16 = v15 - v12;
  if (__OFSUB__(v15, v12)) {
    goto LABEL_46;
  }
LABEL_7:
  uint64_t v8 = *v7;
  uint64_t v39 = v16;
  uint64_t v37 = v14;
  if ((unint64_t)*v7 >> 62) {
    goto LABEL_47;
  }
  uint64_t v17 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v18 = v17 + v16;
  if (__OFADD__(v17, v16)) {
    goto LABEL_49;
  }
LABEL_9:
  uint64_t v41 = v15;
  uint64_t v36 = v6;
  unint64_t v15 = *v7;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v7 = v15;
  uint64_t v38 = v9;
  uint64_t v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject
    && (v15 & 0x8000000000000000) == 0
    && (v15 & 0x4000000000000000) == 0)
  {
    uint64_t v20 = v15 & 0xFFFFFFFFFFFFFF8;
    if (v18 <= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_19;
    }
    uint64_t v8 = 1;
  }
  if (v15 >> 62) {
    goto LABEL_50;
  }
  uint64_t v21 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_16:
  if (v21 <= v18) {
    uint64_t v21 = v18;
  }
  swift_bridgeObjectRetain();
  unint64_t v15 = MEMORY[0x18C117690](v8, v21, 1, v15);
  swift_bridgeObjectRelease();
  *uint64_t v7 = v15;
  uint64_t v20 = v15 & 0xFFFFFFFFFFFFFF8;
LABEL_19:
  uint64_t v22 = v20 + 32 + 8 * v11;
  type metadata accessor for NSObject(0, a4);
  swift_arrayDestroy();
  uint64_t v23 = v39;
  if (!v39) {
    goto LABEL_29;
  }
  if (!(v15 >> 62))
  {
    uint64_t v24 = *(void *)(v20 + 16);
    uint64_t v25 = v24 - v10;
    if (!__OFSUB__(v24, v10)) {
      goto LABEL_22;
    }
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  swift_bridgeObjectRetain();
  uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v23 = v39;
  uint64_t v25 = v34 - v10;
  if (__OFSUB__(v34, v10)) {
    goto LABEL_53;
  }
LABEL_22:
  if (v25 < 0)
  {
LABEL_58:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v26 = (char *)(v22 + 8 * v41);
  NSArray v27 = (char *)(v20 + 32 + 8 * v10);
  if (v26 != v27 || v26 >= &v27[8 * v25])
  {
    memmove(v26, v27, 8 * v25);
    uint64_t v23 = v39;
  }
  if (v15 >> 62)
  {
LABEL_54:
    swift_bridgeObjectRetain();
    uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v29 = v35 + v39;
    if (!__OFADD__(v35, v39)) {
      goto LABEL_28;
    }
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  uint64_t v28 = *(void *)(v20 + 16);
  uint64_t v29 = v28 + v23;
  if (__OFADD__(v28, v23)) {
    goto LABEL_56;
  }
LABEL_28:
  *(void *)(v20 + 16) = v29;
LABEL_29:
  if (v41 >= 1)
  {
    if (v37)
    {
      uint64_t v30 = swift_bridgeObjectRetain();
      uint64_t v31 = v36(v30);
      swift_bridgeObjectRelease();
      specialized closure #1 in _ArrayBufferProtocol.replaceSubrange<A>(_:with:elementsOf:)(v31 + 32, *(void *)(v31 + 16), v41, v22, a4);
      swift_release();
      goto LABEL_34;
    }
    if (*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) == v41)
    {
      swift_arrayInitWithCopy();
      goto LABEL_34;
    }
    goto LABEL_57;
  }
LABEL_34:
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, &lazy cache variable for type metadata for UIBarButtonItemGroup, 0x1E4FB14B8, (uint64_t (*)(uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t vars8;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = a3;
    BOOL v5 = a2;
    uint64_t v7 = a1;
    id v6 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v23 < v5) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v9 = v5 - v7;
  if (__OFSUB__(v5, v7))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  id v6 = *v4;
  if (*v4 >> 62) {
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8)) {
    goto LABEL_38;
  }
LABEL_8:
  id v6 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *id v4 = v6;
  uint64_t v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v13 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v10 = 1;
  }
  if (v6 >> 62) {
    goto LABEL_39;
  }
  uint64_t v14 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  swift_bridgeObjectRetain();
  id v6 = MEMORY[0x18C117690](v10, v14, 1, v6);
  swift_bridgeObjectRelease();
  *id v4 = v6;
  uint64_t v13 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  unint64_t v15 = (void *)(v13 + 32 + 8 * v7);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
  swift_arrayDestroy();
  if (v8)
  {
    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v17 = v24 - v5;
      if (!__OFSUB__(v24, v5))
      {
LABEL_21:
        if (v17 < 0)
        {
LABEL_46:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v18 = (char *)(v15 + 1);
        uint64_t v19 = (char *)(v13 + 32 + 8 * v5);
        if (v15 + 1 != (void *)v19 || v18 >= &v19[8 * v17]) {
          memmove(v18, v19, 8 * v17);
        }
        if (!(v6 >> 62))
        {
          uint64_t v20 = *(void *)(v13 + 16);
          uint64_t v21 = v20 + v8;
          if (!__OFADD__(v20, v8))
          {
LABEL_27:
            *(void *)(v13 + 16) = v21;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v21 = v25 + v8;
        if (!__OFADD__(v25, v8)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(v13 + 16);
      uint64_t v17 = v16 - v5;
      if (!__OFSUB__(v16, v5)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:
  *unint64_t v15 = v3;

  return specialized Array._endMutation()();
}

{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t vars8;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = a3;
    BOOL v5 = a2;
    id v6 = a1;
    uint64_t v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10) >= a2) {
        goto LABEL_4;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v23 < v5) {
    goto LABEL_33;
  }
LABEL_4:
  uint64_t v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  uint64_t v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_35:
    __break(1u);
LABEL_36:
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v11 = v10 + v8;
    if (!__OFADD__(v10, v8)) {
      goto LABEL_8;
    }
LABEL_38:
    __break(1u);
LABEL_39:
    swift_bridgeObjectRetain();
    uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  uint64_t v7 = *v4;
  if (*v4 >> 62) {
    goto LABEL_36;
  }
  uint64_t v10 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v11 = v10 + v8;
  if (__OFADD__(v10, v8)) {
    goto LABEL_38;
  }
LABEL_8:
  uint64_t v7 = *v4;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *id v4 = v7;
  uint64_t v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_18;
    }
    uint64_t v10 = 1;
  }
  if (v7 >> 62) {
    goto LABEL_39;
  }
  uint64_t v14 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11) {
    uint64_t v14 = v11;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = MEMORY[0x18C117690](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *id v4 = v7;
  uint64_t v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  unint64_t v15 = (void *)(v13 + 32 + 8 * v6);
  type metadata accessor for AccessibilityNode();
  swift_arrayDestroy();
  if (v8)
  {
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      uint64_t v17 = v24 - v5;
      if (!__OFSUB__(v24, v5))
      {
LABEL_21:
        if (v17 < 0)
        {
LABEL_46:
          uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        uint64_t v18 = (char *)(v15 + 1);
        uint64_t v19 = (char *)(v13 + 32 + 8 * v5);
        if (v15 + 1 != (void *)v19 || v18 >= &v19[8 * v17]) {
          memmove(v18, v19, 8 * v17);
        }
        if (!(v7 >> 62))
        {
          uint64_t v20 = *(void *)(v13 + 16);
          uint64_t v21 = v20 + v8;
          if (!__OFADD__(v20, v8))
          {
LABEL_27:
            *(void *)(v13 + 16) = v21;
            goto LABEL_28;
          }
          goto LABEL_45;
        }
LABEL_43:
        swift_bridgeObjectRetain();
        uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v21 = v25 + v8;
        if (!__OFADD__(v25, v8)) {
          goto LABEL_27;
        }
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(v13 + 16);
      uint64_t v17 = v16 - v5;
      if (!__OFSUB__(v16, v5)) {
        goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_43;
  }
LABEL_28:
  *unint64_t v15 = v3;

  return specialized Array._endMutation()();
}

{
  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, a3, (unint64_t *)&lazy cache variable for type metadata for UIMenuElement, 0x1E4FB1980, (uint64_t (*)(uint64_t))specialized _copyCollectionToContiguousArray<A>(_:));
}

Class @objc ListCollectionViewCellBase.preferredLayoutAttributesFitting(_:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  v6.super.Class isa = ListCollectionViewCellBase.preferredLayoutAttributesFitting(_:)((UICollectionViewLayoutAttributes)v4).super.isa;

  return v6.super.isa;
}

UICollectionViewLayoutAttributes __swiftcall ListCollectionViewCellBase.preferredLayoutAttributesFitting(_:)(UICollectionViewLayoutAttributes a1)
{
  if (one-time initialization token for isEnabledInProcessEnv != -1) {
    swift_once();
  }
  if (static ListUsesUIHostingConfigurationFeature.isEnabledInProcessEnv)
  {
    v7.id receiver = v1;
    v7.super_class = (Class)type metadata accessor for ListCollectionViewCellBase();
    id v3 = objc_msgSendSuper2(&v7, sel_preferredLayoutAttributesFittingAttributes_, a1.super.isa);
    return (UICollectionViewLayoutAttributes)v3;
  }
  else
  {
    objc_msgSend(v1, sel_effectiveUserInterfaceLayoutDirection);
    objc_msgSend(v1, sel__contentViewInset);
    uint64_t v5 = type metadata accessor for ListCollectionViewCellBase();
    uint64_t WitnessTable = swift_getWitnessTable();
    return (UICollectionViewLayoutAttributes)PlatformListViewBase<>.hostPreferredLayoutAttributes(fitting:insets:)(a1.super.isa, v5, WitnessTable);
  }
}

void *PlatformListViewBase<>.hostPreferredLayoutAttributes(fitting:insets:)(void *a1, uint64_t a2, uint64_t a3)
{
  id v4 = v3;
  objc_msgSend(a1, sel_size);
  id v8 = objc_msgSend(a1, sel_representedElementKind);
  if (!v8)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_10;
  }
  uint64_t v9 = v8;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v12)
  {
LABEL_10:
    id v17 = (id)swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  if (v10 == v13 && v12 == v14)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    id v17 = (id)swift_bridgeObjectRelease();
    if ((v16 & 1) == 0) {
      goto LABEL_11;
    }
  }
  id v17 = objc_msgSend(a1, sel_respondsToSelector_, sel__listLayoutItemMaxWidth);
  if (v17)
  {
    id v17 = objc_msgSend(a1, sel__listLayoutItemMaxWidth);
    if (v34 > 0.0) {
      id v17 = objc_msgSend(a1, sel__listLayoutItemMaxWidth);
    }
  }
LABEL_11:
  MEMORY[0x1F4188790](v17);
  CGRect.inset(by:layoutDirection:)();
  double v19 = v18;
  double v21 = v20;
  uint64_t v22 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 80);
  uint64_t v23 = (void *)v22(a2, a3);

  if (v23 != v4)
  {
    uint64_t v24 = (void *)v22(a2, a3);
    UIView.invalidateRendererHostSafeAreaInsets()();
  }
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewLayoutAttributes);
  swift_dynamicCast();
  double v25 = PlatformListViewBase<>.hostSizeThatFits(width:)(a2, a3);
  double v27 = v26;
  uint64_t v28 = (void *)v22(a2, a3);

  if (v28 != v4)
  {
    uint64_t v29 = (void *)v22(a2, a3);
    objc_msgSend(v29, sel_setFrame_, v19, v21, v25, v27);
  }
  EdgeInsets.vertical.getter();
  double v31 = v27 + v30;
  EdgeInsets.horizontal.getter();
  objc_msgSend(v35, sel_setSize_, v25 + v32, v31);
  return v35;
}

id protocol witness for PlatformListViewBase.hostParentView.getter in conformance ListTableViewHeaderFooter()
{
  id v1 = objc_msgSend(v0, sel_contentView);

  return v1;
}

Swift::Void __swiftcall ListCollectionViewCellBase.didUpdateFocus(in:with:)(UIFocusUpdateContext in, UIFocusAnimationCoordinator with)
{
  v6.id receiver = v2;
  v6.super_class = (Class)type metadata accessor for ListCollectionViewCellBase();
  objc_msgSendSuper2(&v6, sel_didUpdateFocusInContext_withAnimationCoordinator_, in.super.isa, with.super.isa);
  uint64_t v5 = *(void **)&v2[direct field offset for ListCollectionViewCellBase.host];
  if (v5) {
    objc_msgSend(v5, sel_didUpdateFocusInContext_withAnimationCoordinator_, in.super.isa, with.super.isa);
  }
}

uint64_t type metadata accessor for ListCollectionViewCellBase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #1 in PlatformViewHost.isPlatformFocusContainerHost.getter(void **a1)
{
  return closure #1 in PlatformViewHost.isPlatformFocusContainerHost.getter(a1) & 1;
}

void PlatformListViewBase.defaultUpdateViewGraphForDisplay(_:sizeThatFitsCallback:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t))(a5 + 56);
  uint64_t v11 = v10(a4, a5);
  if (v11)
  {
    uint64_t v12 = (void *)v11;
    if (((_UIHostingView.isHiddenForReuse.getter() ^ a1) & 1) == 0) {
      _UIHostingView.isHiddenForReuse.setter((a1 & 1) == 0);
    }
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 88))(a4, a5);
  if (v13)
  {
    uint64_t v14 = (void *)v13;
    if (((_UIHostingView.isHiddenForReuse.getter() ^ a1) & 1) == 0) {
      _UIHostingView.isHiddenForReuse.setter((a1 & 1) == 0);
    }
  }
  unint64_t v15 = (void *)v10(a4, a5);
  if ((a1 & 1) == 0)
  {
    if (!v15) {
      return;
    }
    id v21 = v15;
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();

    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    ViewGraphGeometryObservers.removeAll()();
    swift_endAccess();
    goto LABEL_16;
  }
  if (!v15) {
    return;
  }
  id v20 = v15;
  id v16 = objc_msgSend(v15, sel_superview);
  if (v16)
  {
    id v19 = v16;
    if (a2)
    {
      swift_retain();
      objc_msgSend(v19, sel_bounds);
      CGRectGetWidth(v23);
      _ProposedSize.init(width:height:)();
      specialized _UIHostingView.viewGraph.getter();
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = a2;
      *(void *)(v17 + 24) = a3;
      swift_beginAccess();
      outlined copy of AppIntentExecutor?(a2);
      type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
      swift_retain();
      ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
      swift_endAccess();
      swift_release();
      swift_release();
      specialized _UIHostingView.viewGraph.getter();
      swift_beginAccess();
      swift_retain();
      ViewGraphGeometryObservers.resetObserver(for:)();
      swift_endAccess();

      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
LABEL_16:
      swift_release();
      return;
    }

    double v18 = v19;
  }
  else
  {
    double v18 = v20;
  }
}

void UIView.invalidateRendererHostSafeAreaInsets()()
{
  swift_getObjectType();
  if (swift_conformsToProtocol2()) {
    id v1 = v0;
  }
  else {
    id v1 = 0;
  }
  if (v1)
  {
    swift_getObjectType();
    id v2 = v0;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  id v3 = objc_msgSend(v0, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v5) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v5) {
      goto LABEL_15;
    }
  }
  if (v5 < 1)
  {
    __break(1u);
    return;
  }
  for (uint64_t i = 0; i != v5; ++i)
  {
    if ((v4 & 0xC000000000000001) != 0) {
      id v7 = (id)MEMORY[0x18C117680](i, v4);
    }
    else {
      id v7 = *(id *)(v4 + 8 * i + 32);
    }
    id v8 = v7;
    UIView.invalidateRendererHostSafeAreaInsets()();
  }
LABEL_15:

  swift_bridgeObjectRelease();
}

uint64_t specialized PlatformViewHost.isPlatformFocusContainerHost.getter(uint64_t (*a1)(void), uint64_t (*a2)(void))
{
  swift_unknownObjectWeakInit();
  outlined init with copy of ScrollableCollection?((uint64_t)v10, (uint64_t)v9, a1);
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = (void *)MEMORY[0x18C119DF0](v9);
  swift_unknownObjectWeakInit();

  outlined destroy of ScrollableCollection?((uint64_t)v9, a2);
  closure #1 in PlatformViewHost.UnarySubtreeSequence.makeIterator()(v4, &v8);
  objc_super v6 = v8;
  if (v8)
  {
    while (1)
    {
      self;
      if (swift_dynamicCastObjCClass()) {
        break;
      }

      closure #1 in PlatformViewHost.UnarySubtreeSequence.makeIterator()(v4, &v8);
      objc_super v6 = v8;
      if (!v8) {
        goto LABEL_4;
      }
    }
    swift_release();
    outlined destroy of ScrollableCollection?((uint64_t)v10, a2);

    return 1;
  }
  else
  {
LABEL_4:
    swift_release();
    outlined destroy of ScrollableCollection?((uint64_t)v10, a2);
    return 0;
  }
}

void closure #1 in PlatformViewHost.UnarySubtreeSequence.makeIterator()(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x18C119DF0](v3);
  uint64_t v5 = v4;
  if (!v4) {
    goto LABEL_14;
  }
  id v6 = objc_msgSend(v4, sel_subviews);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v8 != 1)
  {
    uint64_t v11 = 0;
    goto LABEL_13;
  }
  id v9 = objc_msgSend(v5, sel_subviews);
  unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v11) {
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v11 = *(void **)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v11)
    {
LABEL_11:
      swift_bridgeObjectRelease();
LABEL_13:
      swift_beginAccess();
      swift_unknownObjectWeakAssign();

LABEL_14:
      *a2 = v5;
      return;
    }
  }
  if ((v10 & 0xC000000000000001) != 0)
  {
    id v12 = (id)MEMORY[0x18C117680](0, v10);
    goto LABEL_10;
  }
  if (*(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v12 = *(id *)(v10 + 32);
LABEL_10:
    uint64_t v11 = v12;
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t closure #1 in PlatformViewHost.isPlatformFocusContainerHost.getter(void **a1)
{
  id v1 = *a1;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIScrollView);
  id v2 = v1;
  uint64_t v3 = swift_dynamicCast();
  if (v3) {

  }
  return v3;
}

uint64_t FocusViewGraph.needsUpdate(graph:)(uint64_t a1)
{
  uint64_t v2 = v1;
  char v4 = *(unsigned char *)(v1 + 24);
  uint64_t v5 = a1 + 200;
  swift_beginAccess();
  if (MEMORY[0x18C119DF0](v5))
  {
    uint64_t v6 = *(void *)(a1 + 208);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 16))(&v13, v8, v8, ObjectType, v6);
    swift_unknownObjectRelease();
    id v9 = v13;
    if (v13)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIFocusSystem);
      id v10 = v9;
      uint64_t v11 = (void *)static UIFocusSystem.focusSystem(for:)();

      if (v11) {
      *(unsigned char *)(v2 + 26) = ((v11 != 0) ^ *(unsigned char *)(v2 + 25)) & 1;
      }
      *(unsigned char *)(v2 + 25) = v11 != 0;
    }
  }
  if (v4) {
    return 1;
  }
  else {
    return *(unsigned __int8 *)(v2 + 26);
  }
}

uint64_t type metadata accessor for NSObject(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t _UIHostingView.as<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  char v4 = v3;
  v22[1] = *MEMORY[0x1E4FBC8C8] & *v3;
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v22 - v10;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v23 = v14;
  unint64_t v15 = (char *)v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  _UIHostingView.base.getter();
  UIHostingViewBase.as<A>(_:)(a2, (uint64_t)v11);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a2) != 1) {
    goto LABEL_19;
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for FocusHost) == a1)
  {
    type metadata accessor for _UIHostingView();
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v24 = v3;
    double v25 = (char **)WitnessTable;
    if (v23 == 16) {
      goto LABEL_47;
    }
    __break(1u);
    goto LABEL_22;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListHost) == a1)
  {
LABEL_22:
    uint64_t v24 = v3;
    double v25 = &protocol witness table for _UIHostingView<A>;
    if (v23 == 16) {
      goto LABEL_47;
    }
    __break(1u);
    goto LABEL_24;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, &lazy cache variable for type metadata for AccessibilityHost) == a1)
  {
LABEL_24:
    uint64_t v24 = v3;
    double v25 = (char **)&protocol witness table for _UIHostingView<A>;
    if (v23 == 16) {
      goto LABEL_47;
    }
    __break(1u);
    goto LABEL_26;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for UIViewControllerProvider) == a1)
  {
LABEL_26:
    uint64_t v24 = v3;
    double v25 = (char **)&protocol witness table for _UIHostingView<A>;
    if (v23 == 16) {
      goto LABEL_47;
    }
    __break(1u);
    goto LABEL_28;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost) == a1)
  {
LABEL_28:
    type metadata accessor for _UIHostingView();
    uint64_t v19 = swift_getWitnessTable();
    uint64_t v24 = v3;
    double v25 = (char **)v19;
    if (v23 == 16) {
      goto LABEL_47;
    }
    __break(1u);
    goto LABEL_30;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for PointerHost) == a1)
  {
LABEL_30:
    uint64_t v24 = v3;
    double v25 = (char **)&protocol witness table for _UIHostingView<A>;
    if (v23 == 16) {
      goto LABEL_47;
    }
    __break(1u);
    goto LABEL_32;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, &lazy cache variable for type metadata for WindowLayoutHost) == a1)
  {
LABEL_32:
    uint64_t v24 = v3;
    double v25 = (char **)&protocol witness table for _UIHostingView<A>;
    if (v23 == 16) {
      goto LABEL_47;
    }
    __break(1u);
    goto LABEL_34;
  }
  if (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView) == a1)
  {
LABEL_34:
    uint64_t v24 = v3;
    if (v23 == 8) {
      goto LABEL_47;
    }
    __break(1u);
LABEL_36:
    uint64_t result = type metadata accessor for _UIHostingView();
    uint64_t v26 = result;
    double v27 = &protocol witness table for _UIHostingView<A>;
    uint64_t v24 = v3;
    if (v23 == 40) {
      goto LABEL_37;
    }
    __break(1u);
    goto LABEL_51;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for CurrentEventProvider) == a1)goto LABEL_36; {
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for FallbackResponderProvider) == a1)
  }
  {
    uint64_t v24 = v3;
    double v25 = (char **)&protocol witness table for _UIHostingView<A>;
    if (v23 == 16) {
      goto LABEL_47;
    }
    __break(1u);
    goto LABEL_40;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for ContainerBackgroundHost) == a1)
  {
LABEL_40:
    uint64_t v24 = v3;
    double v25 = (char **)&protocol witness table for _UIHostingView<A>;
    if (v23 == 16) {
      goto LABEL_47;
    }
    __break(1u);
    goto LABEL_42;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, &lazy cache variable for type metadata for RootTransformProvider) == a1)
  {
LABEL_42:
    uint64_t v26 = type metadata accessor for _UIHostingView();
    double v27 = (_UNKNOWN **)swift_getWitnessTable();
    uint64_t v24 = v3;
    if (v23 == 40) {
      goto LABEL_37;
    }
    __break(1u);
LABEL_44:
    uint64_t v24 = v3;
    double v25 = (char **)&protocol witness table for _UIHostingView<A>;
    if (v23 != 16)
    {
      __break(1u);
      goto LABEL_46;
    }
LABEL_47:
    (*(void (**)(char *, void **, uint64_t))(v12 + 16))(a3, &v24, a2);
    goto LABEL_48;
  }
  if (type metadata accessor for ContainerBackgroundHost(0, &lazy cache variable for type metadata for RootTransformUpdater) == a1)goto LABEL_44; {
  if (type metadata accessor for ContainerBackgroundHost(0, &lazy cache variable for type metadata for ViewRendererHost) != a1)
  }
  {
    uint64_t v16 = 1;
    if (type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphRenderObserver) != a1)return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(a3, v16, 1, a2); {
    uint64_t v26 = type metadata accessor for _UIHostingView();
    }
    double v27 = (_UNKNOWN **)swift_getWitnessTable();
    uint64_t v24 = v4;
    if (v23 != 40)
    {
      __break(1u);
LABEL_19:
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v17(v15, v11, a2);
      v17(a3, v15, a2);
LABEL_48:
      uint64_t v16 = 0;
      return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(a3, v16, 1, a2);
    }
LABEL_37:
    (*(void (**)(char *, void **, uint64_t))(v12 + 16))(a3, &v24, a2);
    id v21 = v4;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
    goto LABEL_48;
  }
LABEL_46:
  type metadata accessor for _UIHostingView();
  uint64_t result = swift_getWitnessTable();
  uint64_t v24 = v3;
  double v25 = (char **)result;
  if (v23 == 16) {
    goto LABEL_47;
  }
LABEL_51:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ContainerBackgroundHost(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t UIHostingViewBase.as<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  if (type metadata accessor for ViewGraphRenderDelegate() == a1)
  {
    uint64_t result = _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(&lazy protocol witness table cache variable for type UIHostingViewBase and conformance UIHostingViewBase, v5, (void (*)(uint64_t))type metadata accessor for UIHostingViewBase);
    v8[0] = v2;
    v8[1] = result;
    uint64_t v2 = *(void *)(a1 - 8);
    if (*(void *)(v2 + 64) == 16) {
      goto LABEL_9;
    }
    __break(1u);
LABEL_8:
    v8[0] = *(void *)(v2 + 72);
    uint64_t v2 = *(void *)(a1 - 8);
    if (*(void *)(v2 + 64) != 8)
    {
      __break(1u);
      return result;
    }
LABEL_9:
    (*(void (**)(uint64_t, void *, uint64_t))(v2 + 16))(a2, v8, a1);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v2 + 56))(a2, 0, 1, a1);
  }
  uint64_t result = type metadata accessor for DisplayList.ViewRenderer();
  if (result == a1) {
    goto LABEL_8;
  }
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);

  return v7(a2, 1, 1, a1);
}

unint64_t type metadata accessor for ViewGraphRenderDelegate()
{
  unint64_t result = lazy cache variable for type metadata for ViewGraphRenderDelegate;
  if (!lazy cache variable for type metadata for ViewGraphRenderDelegate)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ViewGraphRenderDelegate);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ListCollectionViewCellBase.backgroundHost.getter()
{
  type metadata accessor for UIBackgroundConfiguration?();
  double v1 = MEMORY[0x1F4188790](v0 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x18C116980](v1);
  uint64_t v4 = type metadata accessor for UIBackgroundConfiguration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v3, 1, v4))
  {
    _s7SwiftUI16PlatformItemListV0D0VWOhTm_1((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for UIBackgroundConfiguration?);
    return 0;
  }
  uint64_t v6 = (void *)UIBackgroundConfiguration.customView.getter();
  _s7SwiftUI16PlatformItemListV0D0VWOhTm_1((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for UIBackgroundConfiguration?);
  if (!v6) {
    return 0;
  }
  type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
  uint64_t result = swift_dynamicCastClass();
  if (!result)
  {

    return 0;
  }
  return result;
}

void type metadata accessor for UIBackgroundConfiguration?()
{
  if (!lazy cache variable for type metadata for UIBackgroundConfiguration?)
  {
    type metadata accessor for UIBackgroundConfiguration();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?);
    }
  }
}

uint64_t UIHostingContentView.updateViewGraphForDisplay(isHidden:)(char a1)
{
  uint64_t v2 = v1;
  int v4 = a1 & 1;
  uint64_t v5 = (uint64_t *)MEMORY[0x1E4FBC8C8];
  uint64_t v6 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t result = _UIHostingView.isHiddenForReuse.getter();
  if ((result & 1) != v4)
  {
    _UIHostingView.isHiddenForReuse.setter(v4);
    specialized _UIHostingView.focusBridge.getter();
    swift_retain();
    FocusBridge.canAcceptFocus.setter((a1 & 1) == 0);
    swift_release();
    if ((a1 & 1) == 0 && *((unsigned char *)v1 + *(void *)((*v5 & *v1) + 0x6B0)) == 1)
    {
      static Semantics.v6.getter();
      uint64_t v8 = isLinkedOnOrAfter(_:)();
      if (v8)
      {
        MEMORY[0x1F4188790](v8);
        static Update.ensure<A>(_:)();
      }
    }
    __int16 v39 = 64;
    long long v9 = *(_OWORD *)(v6 + 1616);
    long long aBlock = *(_OWORD *)(v6 + 1600);
    long long v36 = v9;
    type metadata accessor for UIHostingContentView();
    swift_getWitnessTable();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    uint64_t v10 = *v1;
    uint64_t v11 = *v5;
    if (a1) {
      goto LABEL_15;
    }
    uint64_t v12 = (char *)v1 + *(void *)((v11 & v10) + 0x6A0);
    if (v12[25]) {
      goto LABEL_15;
    }
    uint64_t v13 = (double *)((char *)v1 + *(void *)((v11 & v10) + 0x6A8));
    if ((_BYTE)v13[2]) {
      goto LABEL_15;
    }
    uint64_t v14 = *(void *)v12;
    uint64_t v15 = *((void *)v12 + 1);
    uint64_t v16 = *((void *)v12 + 2);
    char v17 = v12[24];
    double v19 = *v13;
    double v18 = v13[1];
    *(void *)&long long aBlock = v14;
    BYTE8(aBlock) = v15 & 1;
    *(void *)&long long v36 = v16;
    BYTE8(v36) = v17 & 1;
    ViewRendererHost.sizeThatFits(_:)();
    double v22 = UIHostingContentView.roundSize(_:)(v20, v21);
    uint64_t v10 = *v1;
    uint64_t v11 = *v5;
    if (v22 == v19 && v23 == v18)
    {
LABEL_15:
      double v32 = 0;
    }
    else
    {
      double v25 = (char *)v1 + *(void *)((v11 & v10) + 0x6A0);
      *((void *)v25 + 1) = 0;
      *((void *)v25 + 2) = 0;
      *(void *)double v25 = 0;
      *((_WORD *)v25 + 12) = 256;
      uint64_t v26 = (char *)v1 + *(void *)((*v5 & *v1) + 0x6A8);
      *(void *)uint64_t v26 = 0;
      *((void *)v26 + 1) = 0;
      v26[16] = 1;
      uint64_t v27 = self;
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = v1;
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = partial apply for closure #2 in UIHostingContentView.updateViewGraphForDisplay(isHidden:);
      *(void *)(v29 + 24) = v28;
      uint64_t v37 = partial apply for thunk for @callee_guaranteed () -> ();
      uint64_t v38 = v29;
      *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
      *((void *)&aBlock + 1) = 1107296256;
      *(void *)&long long v36 = thunk for @escaping @callee_guaranteed () -> ();
      *((void *)&v36 + 1) = &block_descriptor_35;
      double v30 = _Block_copy(&aBlock);
      double v31 = v1;
      swift_retain();
      swift_release();
      objc_msgSend((id)v27, sel_performWithoutAnimation_, v30);
      _Block_release(v30);
      LOBYTE(v27) = swift_isEscapingClosureAtFileLocation();
      uint64_t result = swift_release();
      if (v27)
      {
        __break(1u);
        return result;
      }
      uint64_t v10 = *v31;
      uint64_t v11 = *v5;
      double v32 = partial apply for closure #2 in UIHostingContentView.updateViewGraphForDisplay(isHidden:);
    }
    uint64_t v33 = *(void **)((char *)v1 + *(void *)((v10 & v11) + 0x678));
    if (v33)
    {
      id v34 = v33;
      _UIHostingView.isHiddenForReuse.setter(a1 & 1);
    }
    if ((a1 & 1) == 0) {
      *((unsigned char *)v2 + *(void *)((*v5 & *v2) + 0x6B0)) = 1;
    }
    return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v32);
  }
  return result;
}

void _UIHostingView.isHiddenForReuse.setter(char a1)
{
  *(unsigned char *)(*(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68)) + 220) = a1;
  UIHostingViewBase.updateRemovedState(uiView:)(0);
}

uint64_t UIHostingContentView.hostingView<A>(_:willUpdate:)(void *a1, uint64_t a2)
{
  uint64_t v5 = *a1 & *MEMORY[0x1E4FBC8C8];
  long long v6 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x650);
  v17[0] = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x640);
  v17[1] = v6;
  uint64_t v7 = type metadata accessor for UIHostingConfiguration();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v17 - v9;
  specialized _UIHostingView.focusBridge.getter();
  char v11 = _UIHostingView.isHiddenForReuse.getter();
  swift_retain();
  FocusBridge.canAcceptFocus.setter((v11 & 1) == 0);
  swift_release();
  UIHostingContentView._configuration.getter((uint64_t)v10);
  uint64_t v12 = UIHostingConfiguration.delegate.getter(v7);
  uint64_t v14 = v13;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v12)
  {
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, void, void, uint64_t, uint64_t))(v14 + 16))(a1, a2, *(void *)(v5 + 80), *(void *)(v5 + 88), ObjectType, v14);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t _UIHostingView.isHiddenForReuse.getter()
{
  return *(unsigned __int8 *)(*(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68)) + 220);
}

void FocusBridge.canAcceptFocus.setter(char a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = 2;
  if ((a1 & 1) == 0) {
    uint64_t v3 = 0;
  }
  unint64_t v4 = v2 & 0xFFFFFFFFFFFFFFFDLL | v3;
  if (v4 != v2)
  {
    *(void *)(v1 + 16) = v4;
    *(_DWORD *)(v1 + 48) = 0;
    uint64_t v5 = FocusBridge.host.getter();
    if (v5)
    {
      long long v6 = (void *)v5;
      swift_getObjectType();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    }
  }
}

uint64_t UIHostingContentView.hostingView<A>(_:didUpdate:)(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a1 & *MEMORY[0x1E4FBC8C8];
  long long v6 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x650);
  v18[0] = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x640);
  v18[1] = v6;
  uint64_t v7 = type metadata accessor for UIHostingConfiguration();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v18 - v9;
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  UIHostingContentView._configuration.getter((uint64_t)v18 - v9);
  uint64_t v13 = UIHostingConfiguration.delegate.getter(v7);
  uint64_t v15 = v14;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v13)
  {
    uint64_t ObjectType = swift_getObjectType();
    *(void *)&v18[0] = v11;
    *((void *)&v18[0] + 1) = v12;
    (*(void (**)(void *, _OWORD *, void, void, uint64_t, uint64_t))(v15 + 24))(a1, v18, *(void *)(v5 + 80), *(void *)(v5 + 88), ObjectType, v15);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t UIHostingConfiguration.delegate.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UIHostingConfigurationStorage(0);
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  long long v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UIHostingConfigurationStorage(v1 + *(int *)(a1 + 56), (uint64_t)v6, type metadata accessor for UIHostingConfigurationStorage);
  uint64_t v7 = MEMORY[0x18C119DF0](&v6[*(int *)(v4 + 52)]);
  outlined destroy of UIHostingConfigurationStorage((uint64_t)v6, type metadata accessor for UIHostingConfigurationStorage);
  return v7;
}

void type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>()
{
  if (!lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>)
  {
    lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer();
    unint64_t v0 = type metadata accessor for ViewGraphGeometryObservers();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewGraphGeometryObservers<SizeThatFitsMeasurer>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer()
{
  unint64_t result = lazy protocol witness table cache variable for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer;
  if (!lazy protocol witness table cache variable for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizeThatFitsMeasurer and conformance SizeThatFitsMeasurer);
  }
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance FocusedValues(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a1 + 12);
  int v3 = *(_DWORD *)(a2 + 12);
  return v2 != -1 && v3 != -1 && v2 == v3;
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance ContainerBackgroundKeys.WantsContainerBackgroundPlacementKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2 = *a1;
  int v3 = *a2;
  BOOL v4 = v3 == 5;
  BOOL v6 = v3 != 5 && v2 == v3;
  if (v2 == 5) {
    return v4;
  }
  else {
    return v6;
  }
}

uint64_t getEnumTagSinglePayload for TextInputDictation(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
      }
    }
  }
  unsigned int v4 = *(unsigned __int8 *)a1;
  BOOL v5 = v4 >= 2;
  int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance TabBarPlacementKey(char *a1, char *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1, *a2);
}

uint64_t protocol witness for Rule.value.getter in conformance CustomProgressView<A, B>.Child@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return CustomProgressView.Child.value.getter(*(void *)v2, *(_DWORD *)(v2 + 8), a1[2], a1[3], a1[4], a1[5], a2);
}

ValueMetadata *type metadata accessor for PlatformItemList()
{
  return &type metadata for PlatformItemList;
}

uint64_t objectdestroy_23Tm()
{
  if (*(void *)(v0 + 112))
  {
    if (*(unsigned char *)(v0 + 32) != 2) {
      swift_unknownObjectWeakDestroy();
    }
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t objectdestroy_23Tm_0()
{
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 24), *(unsigned char *)(v0 + 32));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 72), *(unsigned char *)(v0 + 80));
  outlined consume of Environment<CGFloat?>.Content(*(void *)(v0 + 88), *(unsigned __int8 *)(v0 + 96), *(unsigned char *)(v0 + 97));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 104), *(unsigned char *)(v0 + 112));
  outlined consume of Environment<ListItemTint?>.Content(*(void *)(v0 + 120), *(unsigned __int8 *)(v0 + 128), *(unsigned char *)(v0 + 129));

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in static PlatformViewRepresentable._makeView(view:inputs:)()
{
  return implicit closure #4 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance InspectorAnchorPreferenceKey@<X0>(void *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key(&one-time initialization token for defaultValue, &static InspectorAnchorPreferenceKey.defaultValue, a1);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance InspectorStorage.PreferenceKey@<X0>(void *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key(one-time initialization token for defaultValue, &static InspectorStorage.PreferenceKey.defaultValue, a1);
}

_UNKNOWN **base witness table accessor for ViewModifier in TransactionalPreferenceTransformModifier<A>()
{
  return &protocol witness table for TransactionalPreferenceTransformModifier<A>;
}

double partial apply for closure #1 in PlatformViewLayoutEngine.sizeThatFits(_:)()
{
  uint64_t v1 = *(void *)(v0 + 40);
  char v2 = *(unsigned char *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 56);
  char v4 = *(unsigned char *)(v0 + 64);
  int v6 = *(_DWORD *)(v0 + 68);
  int v5 = *(_DWORD *)(v0 + 72);
  uint64_t v9 = v1;
  char v10 = v2;
  uint64_t v11 = v3;
  char v12 = v4;
  uint64_t v7 = type metadata accessor for ViewLeafView();
  return ViewLeafView.sizeThatFits(in:environment:context:)(&v9, v6, v5, v7);
}

double ViewLeafView.sizeThatFits(in:environment:context:)(uint64_t *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  char v5 = *((unsigned char *)a1 + 8);
  uint64_t v6 = a1[2];
  char v7 = *((unsigned char *)a1 + 24);
  v17[0] = 0;
  v17[1] = 0;
  v9[1] = *(_OWORD *)(a4 + 16);
  int v10 = a2;
  int v11 = a3;
  uint64_t v12 = v4;
  char v13 = v5;
  uint64_t v14 = v6;
  char v15 = v7;
  uint64_t v16 = v17;
  MEMORY[0x18C113CE0](partial apply for closure #1 in ViewLeafView.sizeThatFits(in:environment:context:), v9);
  return *(double *)v17;
}

uint64_t PresentationSourceConfiguration.shadow(color:radius:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>)
{
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t v8 = *(void *)(v5 + 40);
  char v9 = *(unsigned char *)(v5 + 48);
  *(void *)a2 = a1;
  *(double *)(a2 + 8) = a3;
  *(double *)(a2 + 16) = a4;
  *(double *)(a2 + 24) = a5;
  *(void *)(a2 + 32) = v7;
  *(void *)(a2 + 40) = v8;
  *(unsigned char *)(a2 + 48) = v9;
  swift_retain();

  return swift_retain();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SheetPreference.InspectorKey@<X0>(uint64_t a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance SheetPreference.Key(&one-time initialization token for defaultValue, (uint64_t)&static SheetPreference.InspectorKey.defaultValue, a1);
}

uint64_t protocol witness for StyleModifier.styleBody(configuration:) in conformance LabelGroupStyleModifier<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return LabelGroupStyleModifier.styleBody(configuration:)(a1, a2);
}

uint64_t destroy for SharingPickerHostModifier(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2 != 1)
  {
    uint64_t v3 = *(void *)(a1 + 72);
    if (v3 != 1)
    {
      outlined consume of AnyShareConfiguration.Storage(*(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      if (v3)
      {
        outlined consume of Text.Storage(*(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
        swift_bridgeObjectRelease();
      }
      if (*(void *)(a1 + 104))
      {
        outlined consume of Text.Storage(*(void *)(a1 + 80), *(void *)(a1 + 88), *(unsigned char *)(a1 + 96));
        swift_bridgeObjectRelease();
      }
    }
    if (v2) {
      swift_release();
    }
  }

  return swift_release();
}

ValueMetadata *type metadata accessor for ContainerRelativeFrameModifier()
{
  return &type metadata for ContainerRelativeFrameModifier;
}

void protocol witness for static View._makeView(view:inputs:) in conformance ResolvedShadowView<A>(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance _ShadowView<A>()
{
  return static _ShadowView._makeView(view:inputs:)();
}

void *type metadata accessor for ToolbarRemovingModifier()
{
  return &unk_1ED441148;
}

ValueMetadata *type metadata accessor for NavigationState.Seeds()
{
  return &type metadata for NavigationState.Seeds;
}

__n128 __swift_memcpy40_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _AlignmentWritingModifier()
{
  return &type metadata for _AlignmentWritingModifier;
}

uint64_t ModifiedContent<>.accessibilityRemoveTraits(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return ModifiedContent<>.accessibilityAddTraits(_:)(a1, a2, MEMORY[0x1E4F41178], a3);
}

double protocol witness for LayoutEngine.sizeThatFits(_:) in conformance ScrollViewLayoutComputer.Engine()
{
  swift_retain();
  ViewSizeCache.get(_:makeValue:)();
  double v1 = v0;
  swift_release();
  return v1;
}

void *type metadata accessor for OnScrollVisibilityChangeModifier()
{
  return &unk_1ED45D0C0;
}

uint64_t type metadata completion function for ListDragAndDropControllerBase()
{
  uint64_t result = type metadata accessor for ShadowListUpdateRecorder();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t @objc UICollectionViewListCoordinatorBase.numberOfSections(in:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  uint64_t v6 = specialized UICollectionViewListCoordinatorBase.numberOfSections(in:)();

  return v6;
}

uint64_t specialized UICollectionViewListCoordinatorBase.numberOfSections(in:)()
{
  uint64_t v1 = *MEMORY[0x1E4FBC8C8] & *v0;
  uint64_t v2 = type metadata accessor for ShadowSectionCollection();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)&v13 - v4;
  uint64_t v6 = type metadata accessor for ShadowListDataSource();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v9 = (char *)&v13 - v8;
  int v10 = (char *)v0 + *(void *)(v1 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v10, v6);
  ShadowListDataSource.sectionIDs.getter((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v11 = ShadowSectionCollection.count.getter(v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v11;
}

BOOL partial apply for closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(char *a1)
{
  return closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(a1, *(void **)(v1 + 16));
}

BOOL closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(char *a1, void *a2)
{
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *a2;
  uint64_t v5 = type metadata accessor for ShadowListDataSource();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = type metadata accessor for ShadowRowCollection();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v15 - v11;
  uint64_t v13 = (char *)a2 + *(void *)(v4 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v13, v5);
  ShadowListDataSource.rowIDs(forSectionAt:)(a1, (uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_getWitnessTable();
  LOBYTE(a1) = Collection.isEmpty.getter();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return (a1 & 1) == 0;
}

uint64_t @objc UICollectionViewListCoordinatorBase.collectionView(_:numberOfItemsInSection:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = a1;
  uint64_t v8 = specialized UICollectionViewListCoordinatorBase.collectionView(_:numberOfItemsInSection:)(a4);

  return v8;
}

uint64_t specialized UICollectionViewListCoordinatorBase.collectionView(_:numberOfItemsInSection:)(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v16 - v6;
  uint64_t v8 = type metadata accessor for ShadowRowCollection();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v16 - v10;
  uint64_t v12 = (char *)v1 + *(void *)(v3 + 136);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v12, v4);
  uint64_t WitnessTable = swift_getWitnessTable();
  ListDiffable.rowIDs(forSectionAtOffset:)(a1, v4, WitnessTable);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v14 = ShadowRowCollection.count.getter(v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v14;
}

uint64_t ListDiffable.rowIDs(forSectionAtOffset:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  ListDiffable.sectionIndex(atOffset:)(a1, a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(a3 + 80))(v9, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for ShadowSectionCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(void *)((a1 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((a2 + (((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for ShadowRowCollection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = ((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  uint64_t v13 = v11 + 16;
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = v9 + v14 + 8;
  uint64_t v16 = (v15 + a1) & ~v14;
  uint64_t v17 = (v15 + a2) & ~v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v16, v17, AssociatedTypeWitness);
  uint64_t v18 = *(void *)(v13 + 48);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v19 = swift_getAssociatedTypeWitness();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = v20 + 16;
  uint64_t v22 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v23 = (v18 + v22 + v16) & ~v22;
  uint64_t v24 = (v18 + v22 + v17) & ~v22;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v23, v24, v19);
  *(void *)((*(void *)(v21 + 48) + 7 + v23) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v21 + 48)
                                                                                       + 7
                                                                                       + v24) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t (*protocol witness for Collection.subscript.read in conformance ShadowRowCollection<A>(uint64_t **a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = (uint64_t *)malloc(0x28uLL);
  *a1 = v6;
  v6[4] = (uint64_t)ShadowRowCollection.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*ShadowRowCollection.subscript.read(uint64_t *a1, uint64_t a2, uint64_t a3))()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  a1[1] = v7;
  uint64_t v8 = malloc(*(void *)(v7 + 64));
  a1[2] = (uint64_t)v8;
  ShadowRowCollection.subscript.getter(a2, a3, (uint64_t)v8);
  return ShadowRowCollection.subscript.read;
}

uint64_t ShadowRowCollection.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v41 = a1;
  uint64_t v43 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v38 = (char *)&v33 - v7;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v44 = swift_getAssociatedTypeWitness();
  uint64_t v36 = AssociatedTypeWitness;
  uint64_t v37 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v40 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v16 = *(int *)(v15 + 48);
  uint64_t v17 = v15;
  uint64_t v35 = v15;
  uint64_t v18 = (char *)&v33 + v16 - v13;
  uint64_t v19 = v39 + *(int *)(a2 + 40);
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();
  ShadowListUpdateRecorder.initialIndex(_:)((uint64_t)v14, (uint64_t)v18, v19, v41, updated);
  uint64_t v21 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 80))(v14, v5, v4);
  uint64_t v22 = &v11[*(int *)(v17 + 48)];
  uint64_t v23 = *(void *)(v44 - 8);
  (*(void (**)(char *, char *))(v23 + 16))(v11, v14);
  uint64_t v24 = v8;
  uint64_t v34 = v8;
  uint64_t v25 = *(void *)(v8 - 8);
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v18, v24);
  uint64_t v26 = v21;
  uint64_t v27 = v36;
  uint64_t v28 = (void (*)(char *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v30 = v29;
  uint64_t v31 = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 16))(v43, v30, v31);
  v28(v45, 0);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v26, v27);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v14, v35);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v34);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v11, v44);
}

uint64_t ShadowRowCollection.endIndex.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v16 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v14 - v5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = v2 + *(int *)(a1 + 40);
  swift_checkMetadataState();
  dispatch thunk of Collection.endIndex.getter();
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();
  ShadowListUpdateRecorder.finalIndex(_:)((uint64_t)v10, v17, v11, (uint64_t)v6, updated);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v6, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t ShadowListUpdateRecorder.finalIndex(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v48 = a4;
  uint64_t v41 = a3;
  uint64_t v44 = (void (**)(char *, uint64_t))a1;
  uint64_t v45 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v35 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v43 = (void (**)(char *, uint64_t))((char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12.n128_f64[0] = MEMORY[0x1F4188790](v11);
  objc_super v46 = (char *)&v32 - v14;
  uint64_t v47 = v13;
  uint64_t v15 = (char *)&v32 + *(int *)(v13 + 48) - v14;
  uint64_t v42 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v42 + 16);
  v34((char *)&v32 - v14, v41, AssociatedTypeWitness, v12);
  uint64_t v16 = *(void *)(v8 - 8);
  uint64_t v40 = v15;
  uint64_t v41 = v16;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v33(v15, v48, v8);
  uint64_t v36 = a5;
  uint64_t v37 = v5;
  ShadowListUpdateRecorder.updates.getter();
  uint64_t v53 = v55;
  uint64_t v54 = v56;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v18 = swift_getAssociatedConformanceWitness();
  uint64_t v48 = AssociatedTypeWitness;
  uint64_t v49 = AssociatedTypeWitness;
  uint64_t v50 = v8;
  uint64_t v51 = AssociatedConformanceWitness;
  uint64_t v52 = v18;
  type metadata accessor for ListUpdate();
  uint64_t v19 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v49 = v19;
  uint64_t v50 = v19;
  uint64_t v51 = WitnessTable;
  uint64_t v52 = WitnessTable;
  uint64_t v21 = (void (**)(char *, char *, uint64_t))type metadata accessor for ConcatenatedCollection();
  uint64_t v22 = (char *)swift_getWitnessTable();
  LOBYTE(v19) = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v19)
  {
    uint64_t v23 = v43;
    uint64_t v24 = (char *)v43 + *(int *)(v47 + 48);
    uint64_t v25 = *(void (**)(void (**)(char *, uint64_t), char *, uint64_t))(v42 + 32);
    uint64_t v26 = v48;
    v25(v43, v46, v48);
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    v27(v24, v40, v8);
    v25(v44, (char *)v23, v26);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v45, v24, v8);
  }
  else
  {
    uint64_t v29 = v36;
    ShadowListUpdateRecorder.updates.getter();
    uint64_t v39 = v49;
    uint64_t v55 = v49;
    uint64_t v56 = v50;
    uint64_t v30 = v43;
    uint64_t v31 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)v43 + *(int *)(v47 + 48));
    ((void (*)(void (**)(char *, uint64_t), char *, uint64_t))v34)(v43, v46, v48);
    v33((char *)v31, (uint64_t)v40, v8);
    ShadowListUpdateRecorder.applyUpdates<A>(_:to:)((uint64_t)v44, v45, (uint64_t)&v55, v30, v31, v29, v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v46, v47);
    (*(void (**)(unsigned int (*)(char *, uint64_t, uint64_t), uint64_t))(v41 + 8))(v31, v8);
    return (*(uint64_t (**)(void, uint64_t))(v42 + 8))(v30, v48);
  }
}

uint64_t ListDiffable.rowIndex(at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v17 - v9;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v17 - v13;
  uint64_t v15 = IndexPath.section.getter();
  ListDiffable.sectionIndex(atOffset:)(v15, a4, a5);
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v18, v14, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(a5 + 80))(v14, a4, a5);
  IndexPath.row.getter();
  swift_getAssociatedConformanceWitness();
  Collection.index(atOffset:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t ListDiffable.sectionIndex(atOffset:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  double v7 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v11 - v8;
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 56))(a2, a3, v7);
  swift_getAssociatedConformanceWitness();
  Collection.index(atOffset:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
}

uint64_t ShadowListUpdateRecorder.sectionIDs.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v6, v4);
  return ShadowSectionCollection.init(_:)((uint64_t)v6, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t ShadowRowCollection.init(_:section:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v126 = a2;
  uint64_t v114 = a1;
  uint64_t v115 = a5;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v125 = *(void (***)(void))(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  v102 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  v101 = (char *)&v91 - v10;
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  v128 = (void *)v11;
  uint64_t v129 = v12;
  uint64_t v13 = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v107 = *(void (***)(char *, uint64_t))(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  v99 = (char *)&v91 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  v105 = (char *)&v91 - v16;
  MEMORY[0x1F4188790](v17);
  v109 = (char *)&v91 - v18;
  MEMORY[0x1F4188790](v19);
  v108 = (char *)&v91 - v20;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v22 = swift_getAssociatedConformanceWitness();
  *(void *)&long long v133 = AssociatedTypeWitness;
  *((void *)&v133 + 1) = v13;
  uint64_t v123 = v13;
  uint64_t v121 = AssociatedConformanceWitness;
  uint64_t v134 = AssociatedConformanceWitness;
  uint64_t v135 = v22;
  uint64_t v23 = type metadata accessor for ListUpdate();
  v106 = *(void (***)(void))(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v100 = (char *)&v91 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v25);
  v117 = (char *)&v91 - v26;
  MEMORY[0x1F4188790](v27);
  v116 = (char *)&v91 - v28;
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v91 - v30;
  MEMORY[0x1F4188790](v32);
  v130 = (char *)&v91 - v33;
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();
  uint64_t v111 = *(void *)(updated - 8);
  uint64_t v35 = v115;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v111 + 16))(v115, v114, updated);
  uint64_t v36 = type metadata accessor for ShadowRowCollection();
  uint64_t v37 = v35 + *(int *)(v36 + 40);
  uint64_t v38 = v126;
  uint64_t v39 = v125[2];
  uint64_t v124 = AssociatedTypeWitness;
  v104 = v125 + 2;
  v103 = v39;
  ((void (*)(uint64_t, uint64_t, uint64_t))v39)(v37, v126, AssociatedTypeWitness);
  uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 80);
  uint64_t v110 = v36;
  v40(v38, a3, a4);
  swift_checkMetadataState();
  uint64_t v113 = dispatch thunk of Collection.count.getter();
  uint64_t v112 = updated;
  ShadowListUpdateRecorder.updates.getter();
  long long v41 = v132;
  long long v131 = v132;
  uint64_t v42 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v133 = v42;
  *((void *)&v133 + 1) = v42;
  uint64_t v134 = WitnessTable;
  uint64_t v135 = WitnessTable;
  type metadata accessor for ConcatenatedCollection();
  ConcatenatedCollection.startIndex.getter();
  uint64_t v44 = v133;
  char v45 = BYTE8(v133);
  long long v133 = v41;
  uint64_t v134 = v44;
  LOBYTE(v135) = v45;
  *(void *)&long long v132 = v44;
  BYTE8(v132) = v45;
  ConcatenatedCollection.endIndex.getter();
  uint64_t v129 = WitnessTable;
  if (static ConcatenatedCollectionIndex.== infix(_:_:)())
  {
    objc_super v46 = v125;
LABEL_3:
    ((void (*)(uint64_t, uint64_t))v46[1])(v126, v124);
    (*(void (**)(uint64_t, uint64_t))(v111 + 8))(v114, v112);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(v115 + *(int *)(v110 + 44)) = v113;
    return result;
  }
  v128 = &v134;
  v127 = (void (**)(char *, char *, uint64_t))(v106 + 4);
  objc_super v46 = v125;
  v119 = (void (**)(char *, char *, uint64_t))(v106 + 2);
  v120 = v125 + 1;
  uint64_t v48 = v123;
  uint64_t v118 = v123 - 8;
  uint64_t v49 = (void (**)(char *, uint64_t))(v106 + 1);
  v106 = v125 + 4;
  ++v107;
  while (1)
  {
    uint64_t v50 = v130;
    ConcatenatedCollection.subscript.getter();
    long long v132 = v133;
    ConcatenatedCollection.index(after:)();
    uint64_t v134 = v131;
    LOBYTE(v135) = BYTE8(v131);
    (*v127)(v31, v50, v23);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      uint64_t v57 = v116;
      (*v119)(v116, v31, v23);
      uint64_t v53 = &v57[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v58 = v124;
      char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t result = ((uint64_t (*)(char *, uint64_t))*v120)(v57, v58);
      if (v59)
      {
        BOOL v56 = __OFSUB__(v113--, 1);
        if (v56) {
          goto LABEL_31;
        }
      }
      goto LABEL_14;
    }
    if (EnumCaseMultiPayload == 4) {
      break;
    }
    if (EnumCaseMultiPayload == 5)
    {
      uint64_t v60 = v100;
      (*v119)(v100, v31, v23);
      uint64_t v61 = TupleTypeMetadata2;
      uint64_t v98 = &v60[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v62 = *(int *)(v61 + 48);
      v97 = &v108[v62];
      uint64_t v95 = &v60[v62];
      uint64_t v96 = *v106;
      uint64_t v63 = v48;
      uint64_t v64 = v124;
      v96();
      uint64_t v65 = *(void *)(v63 - 8);
      uint64_t v94 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
      v94(v97, v95, v63);
      uint64_t v66 = *(int *)(v61 + 48);
      long long v67 = &v109[v66];
      v97 = &v109[v66];
      uint64_t v95 = &v98[v66];
      v96();
      v94(v67, v95, v123);
      uint64_t v98 = *(char **)(v121 + 8);
      LODWORD(v96) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v68 = &v105[*(int *)(v61 + 48)];
      uint64_t v69 = v103;
      v103();
      long long v70 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
      long long v71 = v68;
      uint64_t v72 = v64;
      uint64_t v95 = (char *)(v65 + 16);
      uint64_t v94 = v70;
      v70(v71, v97, v123);
      uint64_t v73 = v101;
      ((void (*)(char *, uint64_t, uint64_t))v69)(v101, v126, v72);
      if (v96)
      {
        char v74 = v105;
        uint64_t v75 = v72;
        char v76 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v96 = *v120;
        ((void (*)(char *, uint64_t))v96)(v73, v75);
        uint64_t v77 = *v107;
        uint64_t v78 = TupleTypeMetadata2;
        (*v107)(v74, TupleTypeMetadata2);
        if ((v76 & 1) == 0)
        {
          v77(v109, v78);
          uint64_t result = ((uint64_t (*)(char *, uint64_t))v77)(v108, v78);
          BOOL v56 = __OFSUB__(v113--, 1);
          if (v56) {
            goto LABEL_32;
          }
          goto LABEL_30;
        }
        uint64_t v92 = v77;
        uint64_t v79 = v78;
      }
      else
      {
        uint64_t v96 = *v120;
        ((void (*)(char *, uint64_t))v96)(v73, v72);
        uint64_t v79 = TupleTypeMetadata2;
        uint64_t v92 = *v107;
        v92(v105, TupleTypeMetadata2);
      }
      int v93 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v80 = v99;
      uint64_t v81 = &v99[*(int *)(v79 + 48)];
      uint64_t v82 = v103;
      ((void (*)(char *, char *, uint64_t))v103)(v99, v109, v124);
      uint64_t v83 = v81;
      uint64_t v84 = v124;
      v94(v83, v97, v123);
      ((void (*)(char *, uint64_t, uint64_t))v82)(v102, v126, v84);
      if (v93)
      {
        ((void (*)(char *, uint64_t))v96)(v102, v84);
        uint64_t v85 = v92;
        v92(v80, v79);
        v85(v109, v79);
        v85(v108, v79);
LABEL_30:
        objc_super v46 = v125;
        uint64_t v48 = v123;
        goto LABEL_6;
      }
      uint64_t v86 = v102;
      uint64_t v87 = v84;
      char v88 = dispatch thunk of static Equatable.== infix(_:_:)();
      ((void (*)(char *, uint64_t))v96)(v86, v87);
      uint64_t v89 = v80;
      uint64_t v90 = v92;
      v92(v89, v79);
      v90(v109, v79);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v90)(v108, v79);
      if ((v88 & 1) == 0) {
        goto LABEL_30;
      }
      BOOL v56 = __OFADD__(v113++, 1);
      objc_super v46 = v125;
      uint64_t v48 = v123;
      if (v56) {
        goto LABEL_33;
      }
    }
LABEL_6:
    (*v49)(v31, v23);
    *(void *)&long long v132 = v134;
    BYTE8(v132) = v135;
    ConcatenatedCollection.endIndex.getter();
    if (static ConcatenatedCollectionIndex.== infix(_:_:)()) {
      goto LABEL_3;
    }
  }
  uint64_t v52 = v117;
  (*v119)(v117, v31, v23);
  uint64_t v53 = &v52[*(int *)(TupleTypeMetadata2 + 48)];
  uint64_t v54 = v124;
  char v55 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t result = ((uint64_t (*)(char *, uint64_t))*v120)(v52, v54);
  if ((v55 & 1) == 0)
  {
LABEL_14:
    uint64_t v48 = v123;
LABEL_15:
    (*(void (**)(char *, uint64_t))(*(void *)(v48 - 8) + 8))(v53, v48);
    objc_super v46 = v125;
    goto LABEL_6;
  }
  BOOL v56 = __OFADD__(v113++, 1);
  uint64_t v48 = v123;
  if (!v56) {
    goto LABEL_15;
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

unint64_t protocol witness for ListDiffable.rowIDs(forSectionAt:) in conformance CollectionViewListDataSource<A>@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  return CollectionViewListDataSource.rowIDs(forSectionAt:)(*a1, a2);
}

unint64_t CollectionViewListDataSource.rowIDs(forSectionAt:)@<X0>(unint64_t result@<X0>, void *a2@<X8>)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v3 = *(void *)(v2 + 56);
    if (*(void *)(v3 + 16) > result)
    {
      *a2 = *(void *)(v3 + 136 * result + 128);
      return swift_bridgeObjectRetain();
    }
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for ShadowRowCollection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ShadowSectionCollection.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v35 = a1;
  uint64_t v33 = a4;
  swift_getAssociatedTypeWitness();
  uint64_t v34 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  *(void *)&long long v38 = AssociatedTypeWitness;
  *((void *)&v38 + 1) = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v40 = swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for ListUpdate();
  uint64_t v28 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v13 = swift_checkMetadataState();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();
  uint64_t v29 = *(void *)(updated - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v33, v35, updated);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(a3 + 56);
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  v18(a2, a3);
  uint64_t v34 = dispatch thunk of Collection.count.getter();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  uint64_t v30 = updated;
  ShadowListUpdateRecorder.updates.getter();
  long long v19 = v37;
  long long v36 = v37;
  uint64_t v20 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v38 = v20;
  *((void *)&v38 + 1) = v20;
  uint64_t AssociatedConformanceWitness = WitnessTable;
  uint64_t v40 = WitnessTable;
  type metadata accessor for ConcatenatedCollection();
  ConcatenatedCollection.startIndex.getter();
  uint64_t v22 = v38;
  char v23 = BYTE8(v38);
  long long v38 = v19;
  uint64_t AssociatedConformanceWitness = v22;
  LOBYTE(v40) = v23;
  *(void *)&long long v37 = v22;
  BYTE8(v37) = v23;
  ConcatenatedCollection.endIndex.getter();
  if (static ConcatenatedCollectionIndex.== infix(_:_:)())
  {
LABEL_2:
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v35, v30);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = type metadata accessor for ShadowSectionCollection();
    *(void *)(v33 + *(int *)(result + 36)) = v34;
    return result;
  }
  uint64_t v25 = (void (**)(char *, char *, uint64_t))(v28 + 32);
  uint64_t v26 = (void (**)(char *, uint64_t))(v28 + 8);
  while (1)
  {
    ConcatenatedCollection.subscript.getter();
    long long v37 = v38;
    ConcatenatedCollection.index(after:)();
    uint64_t AssociatedConformanceWitness = v36;
    LOBYTE(v40) = BYTE8(v36);
    (*v25)(v9, v12, v7);
    uint64_t result = swift_getEnumCaseMultiPayload();
    if (!result) {
      break;
    }
    if (result == 1)
    {
      uint64_t v27 = v34 + 1;
      if (__OFADD__(v34, 1)) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
LABEL_6:
    (*v26)(v9, v7);
    *(void *)&long long v37 = AssociatedConformanceWitness;
    BYTE8(v37) = v40;
    ConcatenatedCollection.endIndex.getter();
    if (static ConcatenatedCollectionIndex.== infix(_:_:)()) {
      goto LABEL_2;
    }
  }
  uint64_t v27 = v34 - 1;
  if (!__OFSUB__(v34, 1))
  {
LABEL_12:
    uint64_t v34 = v27;
    goto LABEL_6;
  }
  __break(1u);
LABEL_13:
  __break(1u);
  return result;
}

uint64_t initializeWithCopy for AccessibilityFocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for CollectionViewListDataSource(uint64_t a1, uint64_t a2, int *a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(void **)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  uint64_t v8 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v8;
  uint64_t v9 = a3[9];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  uint64_t v12 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  id v14 = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = *(void *)(a2 + v15 + 8);
  if (v18)
  {
    if (v18 == 1)
    {
      long long v19 = *(_OWORD *)(v17 + 48);
      *(_OWORD *)(v16 + 32) = *(_OWORD *)(v17 + 32);
      *(_OWORD *)(v16 + 48) = v19;
      *(_DWORD *)(v16 + 63) = *(_DWORD *)(v17 + 63);
      long long v20 = *(_OWORD *)(v17 + 16);
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
      *(_OWORD *)(v16 + 16) = v20;
      goto LABEL_10;
    }
    *(void *)uint64_t v16 = *(void *)v17;
    *(void *)(v16 + 8) = v18;
    *(void *)(v16 + 16) = *(void *)(v17 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    *(void *)(v16 + 16) = *(void *)(v17 + 16);
  }
  uint64_t v21 = (void *)(v16 + 24);
  uint64_t v22 = (void *)(v17 + 24);
  char v23 = *(unsigned char *)(v17 + 64);
  if (v23)
  {
    *uint64_t v21 = *v22;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v24 = *(_OWORD *)(v17 + 48);
    *(_OWORD *)(v16 + 48) = v24;
    (**(void (***)(void *, void *))(v24 - 8))(v21, v22);
  }
  *(unsigned char *)(v16 + 64) = v23;
  *(_WORD *)(v16 + 65) = *(_WORD *)(v17 + 65);
LABEL_10:
  uint64_t v25 = a3[11];
  uint64_t v26 = a3[12];
  uint64_t v27 = (void *)(a1 + v25);
  uint64_t v28 = (void *)(a2 + v25);
  uint64_t v29 = v28[1];
  *uint64_t v27 = *v28;
  v27[1] = v29;
  *(unsigned char *)(a1 + v26) = *(unsigned char *)(a2 + v26);
  uint64_t v30 = a3[13];
  uint64_t v31 = a3[14];
  uint64_t v32 = a1 + v30;
  uint64_t v33 = a2 + v30;
  *(void *)uint64_t v32 = *(void *)v33;
  *(unsigned char *)(v32 + 8) = *(unsigned char *)(v33 + 8);
  *(void *)(a1 + v31) = *(void *)(a2 + v31);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t destroy for ShadowRowCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(uint64_t, void))v3)(a1, *(void *)(a2 + 16));
  uint64_t v4 = *(void *)(v3 + 56) + 7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (a1 + *(unsigned __int8 *)(v6 + 80) + (((v4 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  unint64_t v9 = v8 + *(void *)(v7 + 56);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t))(v11 + 8);
  uint64_t v13 = v10;
  unint64_t v14 = (v9 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);

  return v12(v14, v13);
}

uint64_t destroy for AccessibilityFocusStore.Entry(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t destroy for CollectionViewListDataSource(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 40);
  uint64_t v7 = *(void *)(v6 + 8);
  if (v7)
  {
    if (v7 == 1) {
      goto LABEL_7;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v6 + 64)) {
    swift_bridgeObjectRelease();
  }
  else {
    __swift_destroy_boxed_opaque_existential_1(v6 + 24);
  }
LABEL_7:
  swift_release();

  return swift_release();
}

uint64_t ShadowListUpdateRecorder.initialIndex(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  long long v24 = a3;
  uint64_t v25 = a1;
  ShadowListUpdateRecorder.updates.getter();
  uint64_t v22 = *((void *)&v30 + 1);
  uint64_t v23 = v30;
  long long v29 = v30;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v21 = a2;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for ListUpdate();
  *(void *)&long long v26 = type metadata accessor for Array();
  *((void *)&v26 + 1) = v26;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v28 = WitnessTable;
  uint64_t v8 = type metadata accessor for ConcatenatedCollection();
  uint64_t v9 = swift_getWitnessTable();
  char v10 = Collection.isEmpty.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v10) {
    return (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v24, v25, AssociatedTypeWitness);
  }
  uint64_t v12 = v21;
  uint64_t updated = ShadowListUpdateRecorder.updates.getter();
  long long v30 = v26;
  MEMORY[0x1F4188790](updated);
  v20[5] = v4;
  uint64_t KeyPath = swift_getKeyPath();
  MEMORY[0x1F4188790](KeyPath);
  v20[2] = v5;
  v20[3] = v4;
  v20[4] = v15;
  uint64_t v17 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #2 in implicit closure #1 in UIKitWheelPicker.updateUIView(_:context:), (uint64_t)v20, v8, v7, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v16);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&long long v30 = v17;
  swift_getWitnessTable();
  BidirectionalCollection.reversed()();
  *(void *)&long long v30 = v26;
  uint64_t v18 = type metadata accessor for ReversedCollection();
  uint64_t v19 = swift_getWitnessTable();
  ShadowListUpdateRecorder.applyUpdates<A>(_:to:)((uint64_t)&v30, v25, v12, v18, v19, v24);
  return swift_bridgeObjectRelease();
}

uint64_t ShadowListUpdateRecorder.updates.getter()
{
  return concatenate<A, B>(_:_:)();
}

uint64_t type metadata accessor for ListUpdate()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for ShadowSectionCollection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ShadowListDataSource.sectionIDs.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();

  return ShadowListUpdateRecorder.sectionIDs.getter(updated, a1);
}

uint64_t type metadata accessor for ShadowListUpdateRecorder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ShadowListUpdateRecorder.rowIDs(forSectionAt:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  uint64_t v11 = (char *)&v18 - v10;
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, v3, a2, v13);
  ShadowListUpdateRecorder.initialIndex(_:)(a1, a2, v11);
  return ShadowRowCollection.init(_:section:)((uint64_t)v15, (uint64_t)v11, v8, v7, a3);
}

uint64_t ShadowListDataSource.rowIDs(forSectionAt:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t updated = type metadata accessor for ShadowListUpdateRecorder();

  return ShadowListUpdateRecorder.rowIDs(forSectionAt:)(a1, updated, a2);
}

uint64_t type metadata accessor for NestedDynamicProperties()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for ScrollTargetBehaviorDecelerationContext()
{
  swift_release();

  return swift_release();
}

void *initializeWithCopy for AlignmentModifiedLayoutComputer.Engine(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t key path setter for EnvironmentValues.listRowInsets : EnvironmentValues()
{
  return EnvironmentValues.listRowInsets.setter();
}

uint64_t EnvironmentValues.listRowInsets.setter()
{
  return EnvironmentValues.listRowInsets.setter(&lazy cache variable for type metadata for EnvironmentPropertyKey<ListRowInsetsKey>, (uint64_t)&type metadata for ListRowInsetsKey, (uint64_t)&protocol witness table for ListRowInsetsKey, &lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListRowInsetsKey> and conformance EnvironmentPropertyKey<A>);
}

double protocol witness for static EnvironmentKey.defaultValue.getter in conformance EffectiveListRowInsetsKey@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListRowInsetsKey(&one-time initialization token for defaultValue, (__n128 *)&static EffectiveListRowInsetsKey.defaultValue, &xmmword_1E9015DC0, a1).n128_u64[0];
  return result;
}

uint64_t getEnumTagSinglePayload for PlatformTextFieldCoordinator.FieldStorage(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for PlatformLayerFactory.platformLayerType.getter in conformance _CALayerView<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(void *)(a1 + 16), a2, a3, a4);
}

uint64_t partial apply for closure #1 in UILargeContentViewerInteractionBridge.updateRequestedPreferences(for:)()
{
  return closure #1 in UILargeContentViewerInteractionBridge.updateRequestedPreferences(for:)(*(void *)(v0 + 16));
}

uint64_t closure #1 in UILargeContentViewerInteractionBridge.updateRequestedPreferences(for:)(uint64_t a1)
{
  if (*(unsigned char *)(a1 + OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_showLargeContentViewer) == 1) {
    return GraphHost.addPreference<A>(_:)();
  }
  else {
    return GraphHost.removePreference<A>(_:)();
  }
}

uint64_t base witness table accessor for MultiViewModifier in ButtonStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in ButtonStyleModifier<A>()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for TransformScrollBounceBehavior()
{
  return &type metadata for TransformScrollBounceBehavior;
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout(uint64_t a1, char a2, uint64_t a3, char a4, int *a5, uint64_t a6, CGFloat a7, CGFloat a8, CGFloat a9, CGFloat a10)
{
  return LeadingTrailingLabeledContentStyle_Phone.TitleAndContentLayout.placeSubviews(in:proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1, a5, a7, a8, a9, a10, *(double *)v10, a6, *(unsigned char *)(v10 + 16));
}

uint64_t AccessibilityChildBehaviorBox.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 136) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 152));

  return swift_deallocClassInstance();
}

uint64_t initializeWithCopy for LazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))((*(unsigned __int8 *)(v4 + 80) + 24 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 24 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance RepresentablePreferredFocusableViewInput<A>@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = static RepresentablePreferredFocusableViewInput.defaultValue.getter();
  *a1 = result;
  return result;
}

uint64_t static RepresentablePreferredFocusableViewInput.defaultValue.getter()
{
  return *MEMORY[0x1E4F4E7A0];
}

uint64_t getEnumTagSinglePayload for ContentMarginProxy(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 249)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t destroy for ToolbarAppearanceConfiguration(uint64_t a1, uint64_t a2)
{
  return destroy for ToolbarAppearanceConfiguration(a1, a2, MEMORY[0x1E4FBC8D0]);
}

unsigned char *storeEnumTagSinglePayload for MenuOrder(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for DragItemTimings(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 90) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 90) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 89) = a2 + 2;
    }
  }
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance ToString<A>@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_18834BB90;
  return result;
}

ValueMetadata *type metadata accessor for PencilPreferredAction()
{
  return &type metadata for PencilPreferredAction;
}

uint64_t partial apply for closure #3 in ScrollActionDispatcher.updateValue()()
{
  return closure #3 in ScrollActionDispatcher.updateValue()(*(uint64_t (**)(void))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t partial apply for specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)()
{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

{
  return specialized implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)();
}

ValueMetadata *type metadata accessor for EnableDeferredAccessibilityAttachmentModifier()
{
  return &type metadata for EnableDeferredAccessibilityAttachmentModifier;
}

id protocol witness for PlatformGroupFactory.platformGroupContainer(_:) in conformance HostingScrollView.PlatformContainer()
{
  return objc_retain(*(id *)(*(void *)(*v0 + OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer_scrollView)
                           + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host));
}

uint64_t getEnumTagSinglePayload for ScrollEnvironmentProperties(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 208)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

ValueMetadata *type metadata accessor for _FocusableModifier()
{
  return &type metadata for _FocusableModifier;
}

uint64_t getEnumTagSinglePayload for Button(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64) + ((v7 + 75) & ~v7);
  uint64_t v9 = 48;
  if ((unint64_t)(v8 + 1) > 0x30) {
    uint64_t v9 = v8 + 1;
  }
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= 0xFD) {
    unsigned int v13 = 253;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = v7 | 7;
  uint64_t v15 = v9 + v12 + 1;
  if (a2 <= v13) {
    goto LABEL_27;
  }
  uint64_t v16 = ((v15 + ((v14 + 2) & ~v14)) & ~v12) + *(void *)(v10 + 64);
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v20 = ((a2 - v13 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (!v18) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v20 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (!*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v20 < 2)
    {
LABEL_27:
      uint64_t v24 = ((unint64_t)a1 + v14 + 2) & ~v14;
      if (v11 > 0xFD)
      {
        long long v26 = *(uint64_t (**)(uint64_t))(v10 + 48);
        return v26((v15 + v24) & ~v12);
      }
      else
      {
        unsigned int v25 = *(unsigned __int8 *)(v24 + v9);
        if (v25 >= 3) {
          return (v25 ^ 0xFF) + 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v18 = *((unsigned __int8 *)a1 + v16);
  if (!*((unsigned char *)a1 + v16)) {
    goto LABEL_27;
  }
LABEL_17:
  int v21 = (v18 - 1) << v17;
  if (v16 > 3) {
    int v21 = 0;
  }
  if (v16)
  {
    if (v16 <= 3) {
      int v22 = ((v15 + ((v14 + 2) & ~v14)) & ~v12) + *(_DWORD *)(v10 + 64);
    }
    else {
      int v22 = 4;
    }
    switch(v22)
    {
      case 2:
        int v23 = *a1;
        break;
      case 3:
        int v23 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v23 = *(_DWORD *)a1;
        break;
      default:
        int v23 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v23 = 0;
  }
  return v13 + (v23 | v21) + 1;
}

uint64_t getEnumTagSinglePayload for LazyHStack(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 24) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 24) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

ValueMetadata *type metadata accessor for NavigationState.StackContent.Key()
{
  return &type metadata for NavigationState.StackContent.Key;
}

uint64_t destroy for SubmitScopeModifier(uint64_t a1)
{
  return outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

ValueMetadata *type metadata accessor for AccessibilityTechnology()
{
  return &type metadata for AccessibilityTechnology;
}

uint64_t type metadata accessor for Menu()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityPlatformViewModifier()
{
  return &protocol witness table for AccessibilityPlatformViewModifier;
}

uint64_t getEnumTagSinglePayload for DragItemTimings(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 90)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 89);
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance TextInputDictation(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a1[1] ^ a2[1] | a2[2] ^ a1[2]) & 1) == 0;
}

double protocol witness for static PreferenceKey.defaultValue.getter in conformance SwipeActions.Key@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

unsigned char *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance MenuOrderPreferenceKey(unsigned char *result, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t v2 = result;
  char v3 = *result;
  if (!*result)
  {
    double result = a2(&v4);
    char v3 = v4;
  }
  *uint64_t v2 = v3;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance ScrollViewReader<A>(uint64_t a1)
{
  return ScrollViewReader.body.getter(*v1, v1[1], *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t closure #1 in _UIHostingView.presentationModeLocation.getter(void *a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, void (*a4)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x50);
  uint64_t v7 = *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x58);
  a2(255, v6, v7);
  swift_getWitnessTable();
  type metadata accessor for LocationBox();
  uint64_t v8 = a1;
  a4(&v10, a1, v6, v7);
  return LocationBox.__allocating_init(_:)();
}

void UIKitPresentationModeLocation.init(host:)(void *a1)
{
  swift_unknownObjectWeakInit();
}

uint64_t type metadata accessor for UIKitScenePresentationModeLocation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for UIKitPresentationModeLocation()
{
  return __swift_instantiateGenericMetadata();
}

void *partial apply for specialized closure #1 in _UIHostingView.setRootView(_:transaction:)()
{
  return specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0);
}

{
  uint64_t v0;

  return specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0);
}

{
  uint64_t v0;

  return specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(v0);
}

ValueMetadata *type metadata accessor for SheetPreference.Placement()
{
  return &type metadata for SheetPreference.Placement;
}

ValueMetadata *type metadata accessor for RefreshAction()
{
  return &type metadata for RefreshAction;
}

ValueMetadata *type metadata accessor for ToolbarAppearanceConfiguration()
{
  return &type metadata for ToolbarAppearanceConfiguration;
}

uint64_t getEnumTagSinglePayload for ScrollTransitionConfiguration.Mode(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 32) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

void HostingScrollView.PlatformContainer.safeAreaInsets.getter()
{
  if (*(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets] == 1.79769313e308
    && *(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 8] == 1.79769313e308
    && *(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 16] == 1.79769313e308
    && *(double *)&v0[OBJC_IVAR____TtCC7SwiftUI17HostingScrollView17PlatformContainer__safeAreaInsets + 24] == 1.79769313e308)
  {
    v4.id receiver = v0;
    v4.super_class = (Class)swift_getObjectType();
    objc_msgSendSuper2(&v4, sel_safeAreaInsets);
  }
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance NavigationDestinationKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static NavigationDestinationKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t destroy for AlignmentModifiedLayoutComputer.Engine()
{
  swift_release();

  return swift_release();
}

Swift::Double protocol witness for LayoutEngine.layoutPriority() in conformance AlignmentModifiedLayoutComputer.Engine()
{
  return LayoutComputer.layoutPriority()();
}

__n128 __swift_memcpy233_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[13];
  *(_OWORD *)(a1 + 217) = *(long long *)((char *)a2 + 217);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t View.accessibilityIgnoresInvertColors(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4 = a1;
  return MEMORY[0x18C113660](&v4, a2, &type metadata for _AccessibilityIgnoresInvertColorsViewModifier, a3);
}

unsigned char *assignWithCopy for AccessibilityLargeContentViewModifier(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((unint64_t)&a1[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (unint64_t)&a2[*(unsigned __int8 *)(v4 + 80) + 1] & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SheetPreference(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 105)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

void static UIViewPlatformViewDefinition.makePlatformView(view:kind:)(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  self;
  long long v3 = (void *)swift_dynamicCastObjCClassUnconditional();
  unsigned __int8 v4 = v2;
  specialized static UIViewPlatformViewDefinition.initView(_:kind:)(v3, &v4);
}

id static UIViewPlatformViewDefinition.makeLayerView(type:kind:)(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v2 = *a2;
  if (v2 > 0x10) {
    goto LABEL_7;
  }
  if (((1 << v2) & 0x15F01) == 0)
  {
    if (v2 == 3)
    {
      type metadata accessor for _UIShapeHitTestingView();
      goto LABEL_4;
    }
LABEL_7:
    type metadata accessor for _UIGraphicsView();
    goto LABEL_4;
  }
  type metadata accessor for _UIInheritedView();
LABEL_4:
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  id v5 = _UIKitCreateCustomView(ObjCClassFromMetadata, v4);

  unsigned __int8 v7 = v2;
  specialized static UIViewPlatformViewDefinition.initView(_:kind:)(v5, &v7);
  return v5;
}

void static UIViewPlatformViewDefinition.makeView(kind:)(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 > 0x10) {
    goto LABEL_9;
  }
  if (((1 << v1) & 0x14F01) != 0)
  {
    type metadata accessor for _UIInheritedView();
LABEL_4:
    id v2 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
LABEL_5:
    unsigned __int8 v10 = v1;
    specialized static UIViewPlatformViewDefinition.initView(_:kind:)(v2, &v10);
    return;
  }
  if (v1 != 12)
  {
LABEL_9:
    type metadata accessor for _UIGraphicsView();
    goto LABEL_4;
  }
  type metadata accessor for _UIInheritedView();
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  id v4 = objc_msgSend(objc_allocWithZone(ObjCClassFromMetadata), sel_init);
  id v5 = objc_allocWithZone(ObjCClassFromMetadata);
  id v2 = v4;
  id v6 = objc_msgSend(v5, sel_init);
  objc_msgSend(v2, sel_setMaskView_, v6);

  id v7 = objc_msgSend(v2, sel_maskView);
  if (v7)
  {
    objc_msgSend(v7, sel_setAutoresizesSubviews_, 0);
    id v8 = objc_msgSend(v7, sel_layer);
    objc_msgSend(v8, sel_setAnchorPoint_, 0.0, 0.0);

    id v9 = objc_msgSend(v7, sel_layer);
    objc_msgSend(v9, sel_setAllowsGroupOpacity_, 0);
    objc_msgSend(v9, sel_setAllowsGroupBlending_, 0);

    goto LABEL_5;
  }
  __break(1u);
}

void specialized static UIViewPlatformViewDefinition.initView(_:kind:)(id a1, unsigned __int8 *a2)
{
  unsigned int v3 = *a2;
  if (v3 - 13 >= 2)
  {
    objc_msgSend(a1, sel_setAutoresizesSubviews_, 0);
    if (v3 > 0x10 || ((1 << v3) & 0x11F01) == 0) {
      objc_msgSend(a1, sel__setFocusInteractionEnabled_, 0);
    }
  }
  id v5 = objc_msgSend(a1, sel_layer);
  objc_msgSend(v5, sel_setAnchorPoint_, 0.0, 0.0);

  if (v3 <= 0x10)
  {
    if (((1 << v3) & 0x11E01) != 0)
    {
      id v6 = objc_msgSend(a1, sel_layer);
      objc_msgSend(v6, sel_setAllowsGroupOpacity_, 0);
      objc_msgSend(v6, sel_setAllowsGroupBlending_, 0);
    }
    else
    {
      if (((1 << v3) & 0xE) == 0) {
        return;
      }
      id v6 = objc_msgSend(a1, sel_layer);
      objc_msgSend(v6, sel_setAllowsEdgeAntialiasing_, 1);
    }
  }
}

id _UIKitCreateCustomView(objc_class *a1, void *a2)
{
  id v3 = a2;
  id v4 = (void *)[[a1 alloc] _initWithLayer:v3];

  return v4;
}

uint64_t type metadata accessor for _UIShapeHitTestingView()
{
  return self;
}

uint64_t type metadata accessor for _UIInheritedView()
{
  return self;
}

ValueMetadata *type metadata accessor for BalancedNavigationSplitViewStyle()
{
  return &type metadata for BalancedNavigationSplitViewStyle;
}

uint64_t partial apply for implicit closure #3 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)()
{
  return implicit closure #3 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)();
}

uint64_t base witness table accessor for ViewGraphDelegate in _UIHostingView<A>()
{
  return swift_getWitnessTable();
}

void static ViewAlignedScrollTargetBehavior.LimitBehavior.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t (*partial apply for closure #1 in closure #1 in Attribute.init<A>(_:)())(uint64_t a1, uint64_t a2)
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v1;
  long long v3 = *(_OWORD *)(v0 + 24);
  *(_OWORD *)(v2 + 24) = v3;
  *(void *)(v2 + 40) = v3;
  return partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:);
}

uint64_t protocol witness for UIContentView.supports(_:) in conformance UIHostingContentView<A, B>(uint64_t a1, uint64_t *a2)
{
  return specialized UIHostingContentView.supports(_:)(a1, a2[200], a2[201], a2[202], a2[203]);
}

ValueMetadata *type metadata accessor for ButtonMenuStyle.Automatic()
{
  return &type metadata for ButtonMenuStyle.Automatic;
}

ValueMetadata *protocol witness for static ForwardedEventDispatcher.eventType.getter in conformance PencilDoubleTapEventDispatcher()
{
  return &type metadata for PencilDoubleTapEvent;
}

unint64_t lazy protocol witness table accessor for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent;
  if (!lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent;
  if (!lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent;
  if (!lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilDoubleTapEvent and conformance PencilDoubleTapEvent);
  }
  return result;
}

ValueMetadata *protocol witness for static ForwardedEventDispatcher.eventType.getter in conformance PencilSqueezeEventDispatcher()
{
  return &type metadata for PencilSqueezeEvent;
}

unint64_t lazy protocol witness table accessor for type PencilSqueezeEvent and conformance PencilSqueezeEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent;
  if (!lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent;
  if (!lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent;
  if (!lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilSqueezeEvent and conformance PencilSqueezeEvent);
  }
  return result;
}

ValueMetadata *protocol witness for static ForwardedEventDispatcher.eventType.getter in conformance HoverEventDispatcher()
{
  return &type metadata for HoverEvent;
}

unint64_t lazy protocol witness table accessor for type HoverEvent and conformance HoverEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type HoverEvent and conformance HoverEvent;
  if (!lazy protocol witness table cache variable for type HoverEvent and conformance HoverEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEvent and conformance HoverEvent);
  }
  return result;
}

ValueMetadata *type metadata accessor for LayoutPlatformItemListFlags()
{
  return &type metadata for LayoutPlatformItemListFlags;
}

uint64_t LazyLayoutViewCache.item(data:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v283 = *MEMORY[0x1E4F143B8];
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v4 - 8);
  v225 = (char *)v224 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v241 = (uint64_t)v224 - v7;
  MEMORY[0x1F4188790](v8);
  uint64_t v238 = (uint64_t)v224 - v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v239 = (uint64_t)v224 - v11;
  MEMORY[0x1F4188790](v12);
  v232 = (char *)v224 - v13;
  MEMORY[0x1F4188790](v14);
  v226 = (char *)v224 - v15;
  unsigned int v16 = *(_DWORD *)(a1 + 40);
  unsigned int v17 = *(_DWORD *)(a1 + 44);
  uint64_t v18 = *(void *)(a1 + 48);
  *(void *)&v280[0] = __PAIR64__(v17, v16);
  *((void *)&v280[0] + 1) = v18;
  _ViewList_ID.canonicalID.getter();
  uint64_t v19 = v260;
  uint64_t v20 = DWORD1(v260);
  uint64_t v21 = *((void *)&v260 + 1);
  v227 = (uint64_t *)(v1 + 160);
  swift_beginAccess();
  uint64_t v22 = *(void *)(v1 + 160);
  uint64_t v23 = v19 | (v20 << 32);
  if (!*(void *)(v22 + 16))
  {
LABEL_8:
    uint64_t v230 = v23;
    swift_endAccess();
    char v31 = *(unsigned char *)(a1 + 68);
    uint64_t v236 = a1;
    if ((v31 & 1) != 0 || (*(void *)&long long v260 = *(void *)(a1 + 56), !ViewTraitCollection.optionalTransition()()))
    {
      uint64_t v237 = 0;
    }
    else
    {
      AGGraphClearUpdate();
      int v32 = *(_DWORD *)(v2 + 40);
      uint64_t v33 = *(void *)(v2 + 48);
      int v34 = *(_DWORD *)(v2 + 112);
      *(void *)&long long v260 = *(void *)(v2 + 32);
      DWORD2(v260) = v32;
      uint64_t v261 = v33;
      long long v262 = *(_OWORD *)(v2 + 56);
      long long v263 = *(_OWORD *)(v2 + 72);
      long long v264 = *(_OWORD *)(v2 + 88);
      uint64_t v265 = *(void *)(v2 + 104);
      int v266 = v34;
      _ViewInputs.environment.getter();
      long long v260 = *(_OWORD *)AGGraphGetValue();
      EnvironmentValues.accessibilityPrefersCrossFadeTransitions.getter();
      AGGraphSetUpdate();
      uint64_t v237 = AnyTransition.adjustedForAccessibility(prefersCrossFade:)();
      swift_release();
    }
    uint64_t v35 = swift_bridgeObjectRetain();
    unint64_t v36 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v35);
    swift_bridgeObjectRelease();
    swift_beginAccess();
    uint64_t v37 = *(void *)(v2 + 200);
    uint64_t v231 = v21;
    if (!v37)
    {
      ++*(_DWORD *)(v2 + 168);
      swift_bridgeObjectRetain();
      if ((v36 & 0x8000000000000000) != 0 || (unint64_t v38 = v36, (v36 & 0x4000000000000000) != 0))
      {
        unint64_t v38 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v36);
        swift_release();
      }
      swift_bridgeObjectRetain();
      if ((v38 & 0x8000000000000000) != 0 || (uint64_t v39 = (void *)v38, (v38 & 0x4000000000000000) != 0))
      {
        uint64_t v39 = specialized _copyCollectionToContiguousArray<A>(_:)(v38);
        swift_release();
      }
      *(void *)&v280[0] = v39;
      specialized MutableCollection<>.sort(by:)((uint64_t *)v280);
      swift_release();
      uint64_t v37 = *(void *)&v280[0];
      *(void *)(v2 + 200) = *(void *)&v280[0];
      swift_bridgeObjectRetain();
    }
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_release();
    *(void *)&long long v260 = __PAIR64__(v17, v16);
    *((void *)&v260 + 1) = v18;
    v244 = (void **)_ViewList_ID.reuseIdentifier.getter();
    long long v275 = 0uLL;
    *(void *)&long long v276 = 0;
    *((void *)&v276 + 1) = 0x1FFFFFFFELL;
    uint64_t v278 = 0;
    long long v277 = 0uLL;
    unsigned __int8 v279 = 0;
    *(void *)&long long v260 = __PAIR64__(v17, v16);
    *((void *)&v260 + 1) = v18;
    _ViewList_ID.reuseIdentifier.getter();
    static ReuseTrace.traceReuseIdentifier(_:)();
    unint64_t v235 = (unint64_t)v37 >> 62;
    if ((unint64_t)v37 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
      if (v40) {
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v40 = *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v40)
      {
LABEL_20:
        v233 = (long long *)((char *)&v276 + 8);
        unint64_t v234 = (unint64_t)&v275 + 8;
        v243 = (uint64_t *)(v37 & 0xC000000000000001);
        swift_beginAccess();
        uint64_t v41 = v37 & 0xFFFFFFFFFFFFFF8;
        uint64_t v229 = v37 & 0xFFFFFFFFFFFFFF8;
        if (v37 < 0) {
          uint64_t v41 = v37;
        }
        uint64_t v228 = v41;
        uint64_t v42 = 4;
        uint64_t v240 = v37;
        id v242 = (id)v40;
        while (1)
        {
          uint64_t v46 = v42 - 4;
          if (v243)
          {
            uint64_t v47 = MEMORY[0x18C117680](v42 - 4, v37);
            uint64_t v26 = v47;
            uint64_t v48 = v42 - 3;
            if (__OFADD__(v46, 1)) {
              goto LABEL_93;
            }
          }
          else
          {
            uint64_t v26 = *(void *)(v37 + 8 * v42);
            uint64_t v47 = swift_retain();
            uint64_t v48 = v42 - 3;
            if (__OFADD__(v46, 1))
            {
LABEL_93:
              __break(1u);
LABEL_94:
              uint64_t v146 = swift_bridgeObjectRelease_n();
              v147.n128_f64[0] = MEMORY[0x1F4188790](v146);
              uint64_t v148 = v236;
              v222 = (void *)v26;
              v223 = (void *)v236;
              (*(void (**)(double (*)@<D0>(__n128 *@<X8>), __n128))(*(void *)v2 + 312))(partial apply for implicit closure #10 in LazyLayoutViewCache.item(data:), v147);
              uint64_t v149 = *(void *)(v148 + 24);
              uint64_t v150 = *(void *)(v148 + 32);
              __swift_project_boxed_opaque_existential_1((void *)v148, v149);
              *(void *)(v26 + 288) = (*(uint64_t (**)(uint64_t, uint64_t))(v150 + 32))(v149, v150);
              swift_release();
              id v151 = *(id *)(v26 + 24);
              static ReuseTrace.traceCacheItemRecycled(_:)();

              uint64_t v152 = *(void *)(v148 + 48);
              *(void *)(v26 + 136) = *(void *)(v148 + 40);
              *(void *)(v26 + 144) = v152;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              char v153 = *(unsigned char *)(v148 + 76);
              char v154 = *(unsigned char *)(v148 + 77);
              char v155 = *(unsigned char *)(v148 + 78);
              *(_DWORD *)(v26 + 160) = *(_DWORD *)(v148 + 72);
              *(unsigned char *)(v26 + 164) = v153;
              *(unsigned char *)(v26 + 165) = v154;
              *(unsigned char *)(v26 + 166) = v155;
              add #1 (item:reset:) in LazyLayoutViewCache.item(data:)(v26, 1, v148, v2, v230, v231);
              swift_release();
              swift_release();
              uint64_t v157 = *((void *)&v275 + 1);
              uint64_t v156 = v275;
              uint64_t v159 = *((void *)&v276 + 1);
              uint64_t v158 = v276;
              uint64_t v161 = *((void *)&v277 + 1);
              uint64_t v160 = v277;
              uint64_t v162 = v278;
LABEL_119:
              outlined consume of ReuseMessage?(v156, v157, v158, v159, v160, v161, v162, v279);
LABEL_120:
              swift_release();
              return v26;
            }
          }
          if (*(void ***)(v26 + 152) != v244)
          {
            MEMORY[0x1F4188790](v47);
            v222 = (void *)v37;
            lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging();
            if (static UserDefaultKeyedFeature.isEnabled.getter())
            {
              uint64_t v62 = v2;
              if (one-time initialization token for log != -1) {
                swift_once();
              }
              uint64_t v63 = type metadata accessor for Logger();
              uint64_t v64 = __swift_project_value_buffer(v63, (uint64_t)static Log.LazyLayoutReuse.log);
              uint64_t v65 = *(void *)(v63 - 8);
              uint64_t v66 = v241;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 16))(v241, v64, v63);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v66, 0, 1, v63);
              outlined destroy of Logger?(v66);
              lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways();
              uint64_t v67 = static UserDefaultKeyedFeature.isEnabled.getter();
              if (v67)
              {
                double v68 = MEMORY[0x1F4188790](v67);
                v222 = partial apply for implicit closure #4 in LazyLayoutViewCache.item(data:);
                v223 = v221;
                uint64_t v2 = v62;
                (*(void (**)(uint64_t (*)(), double))(*(void *)v62 + 312))(partial apply for implicit closure #1 in noteFailedReuse #1 (_:) in LazyLayoutViewCache.item(data:), v68);
                uint64_t v37 = v240;
                goto LABEL_51;
              }
              uint64_t v2 = v62;
              if (v235)
              {
                uint64_t v37 = v240;
                swift_bridgeObjectRetain();
                uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v83 = *(void *)(v229 + 16);
                uint64_t v37 = v240;
              }
              uint64_t v40 = (uint64_t)v242;
              long long v86 = v275;
              long long v87 = v276;
              long long v88 = v277;
              uint64_t v89 = v278;
              *(void *)&long long v275 = v83;
              unint64_t v90 = v234;
              *(_OWORD *)unint64_t v234 = 0u;
              *(_OWORD *)(v90 + 16) = 0u;
              *(_OWORD *)(v90 + 32) = 0u;
              unsigned __int8 v91 = v279;
              unsigned __int8 v279 = 16;
              outlined consume of ReuseMessage?(v86, *((uint64_t *)&v86 + 1), v87, *((uint64_t *)&v87 + 1), v88, *((uint64_t *)&v88 + 1), v89, v91);
            }
            else
            {
              uint64_t v69 = type metadata accessor for Logger();
              uint64_t v70 = v241;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56))(v241, 1, 1, v69);
              outlined destroy of Logger?(v70);
LABEL_51:
              uint64_t v40 = (uint64_t)v242;
            }
            id v92 = *(id *)(v26 + 24);
            static ReuseTrace.traceMismatchedReuseIDFailure(_:_:)();
            swift_release();

            goto LABEL_26;
          }
          if (*(_DWORD *)(v2 + 192) - *(_DWORD *)(v26 + 176) < 1) {
            break;
          }
          if (*(_DWORD *)(v26 + 188) == *(_DWORD *)(v2 + 212) || *(unsigned char *)(v26 + 208) != 1)
          {
            lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging();
            if (static UserDefaultKeyedFeature.isEnabled.getter())
            {
              if (one-time initialization token for log != -1) {
                swift_once();
              }
              uint64_t v71 = type metadata accessor for Logger();
              uint64_t v72 = __swift_project_value_buffer(v71, (uint64_t)static Log.LazyLayoutReuse.log);
              uint64_t v73 = *(void *)(v71 - 8);
              uint64_t v74 = v239;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v239, v72, v71);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v73 + 56))(v74, 0, 1, v71);
              outlined destroy of Logger?(v74);
              lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways();
              uint64_t v75 = static UserDefaultKeyedFeature.isEnabled.getter();
              if (v75)
              {
                double v76 = MEMORY[0x1F4188790](v75);
                v222 = partial apply for implicit closure #6 in LazyLayoutViewCache.item(data:);
                v223 = (void *)v26;
                (*(void (**)(uint64_t (*)(), double))(*(void *)v2 + 312))(implicit closure #1 in noteFailedReuse #1 (_:) in LazyLayoutViewCache.item(data:)partial apply, v76);
              }
              else
              {
                uint64_t v93 = *(void *)(v26 + 144);
                *(void *)&v280[0] = *(void *)(v26 + 136);
                *((void *)&v280[0] + 1) = v93;
                swift_retain();
                _ViewList_ID.canonicalID.getter();
                long long v94 = v260;
                uint64_t v95 = *(void *)(v26 + 152);
                swift_release();
                long long v96 = v275;
                long long v97 = v276;
                long long v98 = v277;
                uint64_t v99 = v278;
                long long v275 = v94;
                *(void *)&long long v276 = v95;
                uint64_t v40 = (uint64_t)v242;
                uint64_t v100 = v233;
                _OWORD *v233 = 0u;
                v100[1] = 0u;
                unsigned __int8 v101 = v279;
                unsigned __int8 v279 = 48;
                outlined consume of ReuseMessage?(v96, *((uint64_t *)&v96 + 1), v97, *((uint64_t *)&v97 + 1), v98, *((uint64_t *)&v98 + 1), v99, v101);
              }
              uint64_t v37 = v240;
            }
            else
            {
              uint64_t v84 = type metadata accessor for Logger();
              uint64_t v85 = v239;
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v239, 1, 1, v84);
              outlined destroy of Logger?(v85);
            }
            id v45 = *(id *)(v26 + 24);
            static ReuseTrace.traceReuseCacheItemPlaced(_:)();
            goto LABEL_25;
          }
          uint64_t v267 = *(void *)(v26 + 128);
          LOBYTE(v268) = 0;
          if (!v237
            || (lazy protocol witness table accessor for type CompareTransitionType and conformance CompareTransitionType(),
                swift_retain(),
                AnyTransition.visitType<A>(applying:)(),
                swift_release(),
                v268 != 1))
          {
            lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging();
            if (static UserDefaultKeyedFeature.isEnabled.getter())
            {
              if (one-time initialization token for log != -1) {
                swift_once();
              }
              uint64_t v102 = type metadata accessor for Logger();
              uint64_t v103 = __swift_project_value_buffer(v102, (uint64_t)static Log.LazyLayoutReuse.log);
              uint64_t v104 = *(void *)(v102 - 8);
              uint64_t v105 = (uint64_t)v232;
              (*(void (**)(char *, uint64_t, uint64_t))(v104 + 16))(v232, v103, v102);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56))(v105, 0, 1, v102);
              outlined destroy of Logger?(v105);
              lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways();
              uint64_t v106 = static UserDefaultKeyedFeature.isEnabled.getter();
              if (v106)
              {
                double v107 = MEMORY[0x1F4188790](v106);
                v222 = partial apply for implicit closure #7 in LazyLayoutViewCache.item(data:);
                v223 = (void *)v26;
                (*(void (**)(uint64_t (*)(), double))(*(void *)v2 + 312))(implicit closure #1 in noteFailedReuse #1 (_:) in LazyLayoutViewCache.item(data:)partial apply, v107);
              }
              else
              {
                uint64_t v119 = *(void *)(v26 + 144);
                *(void *)&v280[0] = *(void *)(v26 + 136);
                *((void *)&v280[0] + 1) = v119;
                swift_retain();
                _ViewList_ID.canonicalID.getter();
                long long v120 = v260;
                uint64_t v121 = *(void *)(v26 + 152);
                swift_release();
                long long v122 = v275;
                long long v123 = v276;
                long long v124 = v277;
                uint64_t v125 = v278;
                long long v275 = v120;
                *(void *)&long long v276 = v121;
                uint64_t v40 = (uint64_t)v242;
                uint64_t v126 = v233;
                _OWORD *v233 = 0u;
                v126[1] = 0u;
                unsigned __int8 v127 = v279;
                unsigned __int8 v279 = 64;
                outlined consume of ReuseMessage?(v122, *((uint64_t *)&v122 + 1), v123, *((uint64_t *)&v123 + 1), v124, *((uint64_t *)&v124 + 1), v125, v127);
              }
              uint64_t v37 = v240;
            }
            else
            {
              uint64_t v117 = type metadata accessor for Logger();
              uint64_t v118 = (uint64_t)v232;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v117 - 8) + 56))(v232, 1, 1, v117);
              outlined destroy of Logger?(v118);
            }
            static ReuseTrace.traceReuseTypeComparisonFailure(_:_:)();
LABEL_24:
            id v45 = *(id *)(v26 + 24);
            static ReuseTrace.traceReuseSkippedNotIdle(_:)();
LABEL_25:
            swift_release();

            goto LABEL_26;
          }
          uint64_t v50 = *(void *)(v26 + 80);
          uint64_t v49 = *(void *)(v26 + 88);
          __swift_project_boxed_opaque_existential_1((void *)(v26 + 56), v50);
          if ((*(uint64_t (**)(void, uint64_t, void, void, uint64_t, uint64_t, uint64_t))(v49 + 24))(*(void *)(v26 + 96), v236, *(int *)(v236 + 40), *(void *)(v26 + 112), 1, v50, v49))
          {
            v224[0] = (void *)(v26 + 56);
            uint64_t v51 = *(void *)(v26 + 144);
            *(void *)&v280[0] = *(void *)(v26 + 136);
            *((void *)&v280[0] + 1) = v51;
            _ViewList_ID.canonicalID.getter();
            uint64_t v53 = (void *)*((void *)&v260 + 1);
            uint64_t v52 = v260;
            swift_beginAccess();
            swift_bridgeObjectRetain();
            v224[1] = v53;
            unint64_t v54 = specialized __RawDictionaryStorage.find<A>(_:)(v52, (uint64_t)v53);
            LOBYTE(v52) = v55;
            swift_bridgeObjectRelease();
            if (v52)
            {
              unint64_t v56 = v54;
              uint64_t v57 = v227;
              int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              uint64_t v59 = *v57;
              *(void *)&v280[0] = *v57;
              *uint64_t v57 = 0x8000000000000000;
              if (!isUniquelyReferenced_nonNull_native)
              {
                specialized _NativeDictionary.copy()();
                uint64_t v59 = *(void *)&v280[0];
              }
              swift_release();
              specialized _NativeDictionary._delete(at:)(v56, v59);
              *uint64_t v57 = v59;
              swift_bridgeObjectRelease();
            }
            swift_endAccess();
            swift_release();
            uint64_t v60 = *(void *)(v26 + 80);
            uint64_t v61 = *(void *)(v26 + 88);
            __swift_project_boxed_opaque_existential_1(v224[0], v60);
            if ((*(uint64_t (**)(void, uint64_t, void, void, void, uint64_t, uint64_t))(v61 + 24))(*(void *)(v26 + 96), v236, *(int *)(v236 + 40), *(void *)(v26 + 112), 0, v60, v61))goto LABEL_94; {
            swift_release();
            }
          }
          else
          {
            id v128 = *(id *)(v26 + 24);
            static ReuseTrace.traceReuseCacheItemFailure(_:)();

            lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging();
            if (static UserDefaultKeyedFeature.isEnabled.getter())
            {
              uint64_t v40 = (uint64_t)v242;
              if (one-time initialization token for log != -1) {
                swift_once();
              }
              uint64_t v129 = type metadata accessor for Logger();
              uint64_t v130 = __swift_project_value_buffer(v129, (uint64_t)static Log.LazyLayoutReuse.log);
              uint64_t v131 = *(void *)(v129 - 8);
              uint64_t v132 = (uint64_t)v226;
              (*(void (**)(char *, uint64_t, uint64_t))(v131 + 16))(v226, v130, v129);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v131 + 56))(v132, 0, 1, v129);
              outlined destroy of Logger?(v132);
              lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways();
              uint64_t v133 = static UserDefaultKeyedFeature.isEnabled.getter();
              if (v133)
              {
                double v134 = MEMORY[0x1F4188790](v133);
                v222 = partial apply for implicit closure #11 in LazyLayoutViewCache.item(data:);
                v223 = (void *)v26;
                (*(void (**)(uint64_t (*)(), double))(*(void *)v2 + 312))(implicit closure #1 in noteFailedReuse #1 (_:) in LazyLayoutViewCache.item(data:)partial apply, v134);
              }
              else
              {
                uint64_t v137 = *(void *)(v26 + 144);
                *(void *)&v280[0] = *(void *)(v26 + 136);
                *((void *)&v280[0] + 1) = v137;
                swift_retain();
                _ViewList_ID.canonicalID.getter();
                long long v138 = v260;
                uint64_t v139 = *(void *)(v26 + 152);
                swift_release();
                long long v140 = v275;
                long long v141 = v276;
                long long v142 = v277;
                uint64_t v143 = v278;
                long long v275 = v138;
                *(void *)&long long v276 = v139;
                uint64_t v40 = (uint64_t)v242;
                v144 = v233;
                _OWORD *v233 = 0u;
                v144[1] = 0u;
                unsigned __int8 v145 = v279;
                unsigned __int8 v279 = 80;
                outlined consume of ReuseMessage?(v140, *((uint64_t *)&v140 + 1), v141, *((uint64_t *)&v141 + 1), v142, *((uint64_t *)&v142 + 1), v143, v145);
              }
              swift_release();
              uint64_t v37 = v240;
              goto LABEL_26;
            }
            uint64_t v135 = type metadata accessor for Logger();
            uint64_t v136 = (uint64_t)v226;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v135 - 8) + 56))(v226, 1, 1, v135);
            outlined destroy of Logger?(v136);
          }
          swift_release();
          uint64_t v37 = v240;
          uint64_t v40 = (uint64_t)v242;
LABEL_26:
          ++v42;
          if (v48 == v40) {
            goto LABEL_96;
          }
        }
        lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging();
        if (static UserDefaultKeyedFeature.isEnabled.getter())
        {
          if (one-time initialization token for log != -1) {
            swift_once();
          }
          uint64_t v77 = type metadata accessor for Logger();
          uint64_t v78 = __swift_project_value_buffer(v77, (uint64_t)static Log.LazyLayoutReuse.log);
          uint64_t v79 = *(void *)(v77 - 8);
          uint64_t v80 = v238;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v79 + 16))(v238, v78, v77);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v79 + 56))(v80, 0, 1, v77);
          outlined destroy of Logger?(v80);
          lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways();
          uint64_t v81 = static UserDefaultKeyedFeature.isEnabled.getter();
          if (v81)
          {
            double v82 = MEMORY[0x1F4188790](v81);
            v222 = partial apply for implicit closure #5 in LazyLayoutViewCache.item(data:);
            v223 = (void *)v26;
            (*(void (**)(uint64_t (*)(), double))(*(void *)v2 + 312))(implicit closure #1 in noteFailedReuse #1 (_:) in LazyLayoutViewCache.item(data:)partial apply, v82);
          }
          else
          {
            uint64_t v108 = *(void *)(v26 + 144);
            *(void *)&v280[0] = *(void *)(v26 + 136);
            *((void *)&v280[0] + 1) = v108;
            swift_retain();
            _ViewList_ID.canonicalID.getter();
            long long v109 = v260;
            uint64_t v110 = *(void *)(v26 + 152);
            swift_release();
            long long v111 = v275;
            long long v112 = v276;
            long long v113 = v277;
            uint64_t v114 = v278;
            long long v275 = v109;
            *(void *)&long long v276 = v110;
            uint64_t v40 = (uint64_t)v242;
            uint64_t v115 = v233;
            _OWORD *v233 = 0u;
            v115[1] = 0u;
            unsigned __int8 v116 = v279;
            unsigned __int8 v279 = 32;
            outlined consume of ReuseMessage?(v111, *((uint64_t *)&v111 + 1), v112, *((uint64_t *)&v112 + 1), v113, *((uint64_t *)&v113 + 1), v114, v116);
          }
          uint64_t v37 = v240;
        }
        else
        {
          uint64_t v43 = type metadata accessor for Logger();
          uint64_t v44 = v238;
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v238, 1, 1, v43);
          outlined destroy of Logger?(v44);
        }
        goto LABEL_24;
      }
    }
LABEL_96:
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways();
    char v163 = static UserDefaultKeyedFeature.isEnabled.getter();
    swift_bridgeObjectRelease();
    uint64_t v164 = v236;
    if ((v163 & 1) == 0)
    {
      if (!v40)
      {
        swift_beginAccess();
        if (*((void *)&v276 + 1) >> 1 == 0xFFFFFFFFLL && v279 <= 1u)
        {
          lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging();
          if (static UserDefaultKeyedFeature.isEnabled.getter())
          {
            if (one-time initialization token for log != -1) {
              swift_once();
            }
            uint64_t v208 = type metadata accessor for Logger();
            uint64_t v209 = __swift_project_value_buffer(v208, (uint64_t)static Log.LazyLayoutReuse.log);
            uint64_t v210 = *(void *)(v208 - 8);
            uint64_t v211 = (uint64_t)v225;
            (*(void (**)(char *, uint64_t, uint64_t))(v210 + 16))(v225, v209, v208);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v210 + 56))(v211, 0, 1, v208);
            outlined destroy of Logger?(v211);
            if (static UserDefaultKeyedFeature.isEnabled.getter())
            {
              (*(void (**)(double (*)@<D0>(uint64_t@<X8>), void))(*(void *)v2 + 312))(specialized implicit closure #1 in noteFailedReuse #1 (_:) in LazyLayoutViewCache.item(data:), 0);
            }
            else
            {
              long long v214 = v275;
              long long v215 = v276;
              long long v216 = v277;
              uint64_t v217 = v278;
              long long v275 = 0u;
              long long v276 = 0u;
              long long v277 = 0u;
              uint64_t v278 = 0;
              unsigned __int8 v218 = v279;
              unsigned __int8 v279 = 16;
              outlined consume of ReuseMessage?(v214, *((uint64_t *)&v214 + 1), v215, *((uint64_t *)&v215 + 1), v216, *((uint64_t *)&v216 + 1), v217, v218);
            }
          }
          else
          {
            uint64_t v212 = type metadata accessor for Logger();
            uint64_t v213 = (uint64_t)v225;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v212 - 8) + 56))(v225, 1, 1, v212);
            outlined destroy of Logger?(v213);
          }
        }
      }
      uint64_t v165 = swift_beginAccess();
      uint64_t v166 = *((void *)&v276 + 1);
      unsigned __int8 v167 = v279;
      if (*((void *)&v276 + 1) >> 1 != 0xFFFFFFFFLL || v279 >= 2u)
      {
        v244 = v224;
        long long v168 = v277;
        uint64_t v170 = *((void *)&v275 + 1);
        uint64_t v169 = v276;
        uint64_t v171 = v275;
        v280[0] = v275;
        v280[1] = v276;
        v280[2] = v277;
        uint64_t v281 = v278;
        id v242 = (id)v278;
        unsigned __int8 v282 = v279;
        MEMORY[0x1F4188790](v165);
        v222 = v280;
        v243 = (uint64_t *)(*(void *)v2 + 312);
        uint64_t v241 = *v243;
        outlined copy of ReuseMessage(v171, v170, v169, v166, v168, *((uint64_t *)&v168 + 1), v172, v167);
        ((void (*)(uint64_t (*)@<X0>(_OWORD *@<X8>), void *))v241)(partial apply for implicit closure #1 in closure #2 in LazyLayoutViewCache.item(data:), v221);
        uint64_t v173 = v171;
        uint64_t v164 = v236;
        outlined consume of ReuseMessage?(v173, v170, v169, v166, v168, *((uint64_t *)&v168 + 1), (uint64_t)v242, v167);
      }
    }
    id v174 = (id)AGSubgraphGetGraph();
    v175 = (char *)*(unsigned int *)(v164 + 64);
    LODWORD(v240) = *(unsigned __int8 *)(v164 + 68);
    uint64_t v241 = (uint64_t)v175;
    v176 = (void *)AGSubgraphCreate2();

    type metadata accessor for IndirectAttributeMap();
    id v177 = v176;
    v244 = (void **)IndirectAttributeMap.__allocating_init(subgraph:)();
    int v258 = 0;
    char v259 = 1;
    unsigned int v256 = 0;
    char v257 = 1;
    int v254 = 0;
    char v255 = 1;
    unsigned int v252 = 0;
    char v253 = 1;
    unsigned int v250 = 0;
    char v251 = 1;
    v274[0] = 0;
    uint64_t v178 = v237;
    swift_retain();
    v243 = (uint64_t *)AGGraphClearUpdate();
    uint64_t v239 = (uint64_t)(id)AGSubgraphGetCurrent();
    id v242 = v177;
    AGSubgraphSetCurrent();
    outlined init with copy of TableColumnList(v164, (uint64_t)&v267);
    uint64_t v238 = v271;
    unint64_t v234 = (unint64_t)__swift_project_boxed_opaque_existential_1(&v267, v270);
    unint64_t v235 = (unint64_t)v224;
    uint64_t v179 = *(void *)(v2 + 32);
    uint64_t v180 = *(void *)(v2 + 48);
    uint64_t v182 = *(void *)(v2 + 72);
    uint64_t v181 = *(void *)(v2 + 80);
    DWORD2(v260) = *(_DWORD *)(v2 + 40);
    int v183 = *(_DWORD *)(v2 + 112);
    *(void *)&long long v260 = v179;
    uint64_t v261 = v180;
    long long v262 = *(_OWORD *)(v2 + 56);
    *(void *)&long long v263 = v182;
    *((void *)&v263 + 1) = v181;
    long long v264 = *(_OWORD *)(v2 + 88);
    uint64_t v265 = *(void *)(v2 + 104);
    int v266 = v183;
    MEMORY[0x1F4188790](v179);
    v224[-10] = &v258;
    v224[-9] = &v256;
    v224[-8] = &v254;
    v224[-7] = (void *)v2;
    v219 = &v252;
    uint64_t v220 = v178;
    v221[0] = v184;
    v221[1] = &v250;
    v222 = v274;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _ViewList_Elements.makeOneElement(at:inputs:indirectMap:body:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v267);
    v185 = (void *)v239;
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
    swift_release();
    uint64_t v186 = v272;
    unint64_t v187 = v273;
    if (v259 == 1)
    {
      AGGraphClearUpdate();
      id v188 = (id)AGSubgraphGetCurrent();
      v189 = v242;
      AGSubgraphSetCurrent();
      LODWORD(v260) = 0;
      WORD2(v260) = 0;
      BYTE6(v260) = 1;
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_0(0, &lazy cache variable for type metadata for External<LazyLayoutCacheItem.State>, (uint64_t)&type metadata for LazyLayoutCacheItem.State, MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<LazyLayoutCacheItem.State> and conformance External<A>();
      int v190 = Attribute.init<A>(body:value:flags:update:)();
      AGSubgraphSetCurrent();

      AGGraphSetUpdate();
      LODWORD(v243) = v190;
      int v258 = v190;
      char v259 = 0;
    }
    else
    {
      LODWORD(v243) = v258;
      v189 = v242;
    }
    id v242 = (id)v2;
    uint64_t v191 = v236;
    if (v186)
    {
      unint64_t v192 = HIDWORD(v187);
    }
    else
    {
      _ViewOutputs.init()();
      uint64_t v186 = v267;
      LODWORD(v187) = v268;
      LODWORD(v192) = v269;
    }
    uint64_t v247 = v186;
    int v248 = v187;
    int v249 = v192;
    outlined init with copy of TableColumnList(v191, (uint64_t)&v260);
    uint64_t v193 = *(void *)(v191 + 48);
    v246[0] = *(void *)(v191 + 40);
    v246[1] = v193;
    unint64_t v235 = *(unsigned int *)(v191 + 72);
    unsigned __int8 v194 = *(unsigned char *)(v191 + 76);
    int v195 = *(unsigned __int8 *)(v191 + 77);
    int v196 = *(unsigned __int8 *)(v191 + 78);
    unint64_t v234 = v250;
    unsigned __int8 v197 = v251;
    uint64_t v238 = v274[0];
    uint64_t v239 = SLODWORD(v246[0]);
    type metadata accessor for LazyLayoutCacheItem();
    uint64_t v198 = swift_allocObject();
    id v199 = v189;
    uint64_t v200 = (uint64_t)v244;
    swift_retain();
    uint64_t v201 = (uint64_t)v242;
    swift_retain();
    swift_bridgeObjectRetain();
    unsigned __int8 v245 = v194;
    uint64_t v202 = 0x1000000000000;
    if (!v196) {
      uint64_t v202 = 0;
    }
    uint64_t v203 = 0x10000000000;
    if (!v195) {
      uint64_t v203 = 0;
    }
    unsigned __int8 v245 = v197;
    v219 = (_DWORD *)(v203 | v202 | ((unint64_t)v194 << 32) | v235);
    uint64_t v26 = specialized LazyLayoutCacheItem.init(cache:subgraph:outputs:state:list:elements:id:elementIndex:section:indirectMap:transition:transitionType:)(v201, v199, &v247, (int)v243, v241 | ((unint64_t)v240 << 32), &v260, (int *)v246, v239, (int)v219, SBYTE4(v219), SBYTE5(v219), SBYTE6(v219), v200, v234, (v234 | ((unint64_t)v197 << 32)) >> 32, v238, v198);
    swift_release();

    swift_release();
    (*(void (**)(double (*)@<D0>(uint64_t@<X8>), uint64_t))(*(void *)v201 + 312))(partial apply for implicit closure #16 in LazyLayoutViewCache.item(data:), v26);
    id v204 = *(id *)(v26 + 24);
    static ReuseTrace.traceReuseCacheItemAdded(_:_:)();

    if ((v257 & 1) == 0)
    {
      MEMORY[0x1F4188790](v256);
      v222 = partial apply for closure #6 in LazyLayoutViewCache.item(data:);
      v223 = (void *)v26;
      AGGraphMutateAttribute();
    }
    uint64_t v205 = v231;
    if ((v253 & 1) == 0)
    {
      MEMORY[0x1F4188790](v252);
      v222 = partial apply for closure #1 in LazyLayoutViewCache.init<A>(layout:list:inputs:);
      v223 = (void *)v26;
      AGGraphMutateAttribute();
    }
    uint64_t v206 = v236;
    if ((v251 & 1) == 0)
    {
      LODWORD(v260) = v250;
      *((void *)&v260 + 1) = v26;
      if (!v237)
      {
        __break(1u);
        uint64_t result = swift_release();
        __break(1u);
        return result;
      }
      lazy protocol witness table accessor for type UpdateSubviewTransition and conformance UpdateSubviewTransition();
      swift_retain();
      swift_retain();
      AnyTransition.visitType<A>(applying:)();
      swift_release();
      swift_release();
    }
    add #1 (item:reset:) in LazyLayoutViewCache.item(data:)(v26, 0, v206, v201, v230, v205);
    swift_release();

    swift_release();
    uint64_t v157 = *((void *)&v275 + 1);
    uint64_t v156 = v275;
    uint64_t v159 = *((void *)&v276 + 1);
    uint64_t v158 = v276;
    uint64_t v161 = *((void *)&v277 + 1);
    uint64_t v160 = v277;
    uint64_t v162 = v278;
    goto LABEL_119;
  }
  swift_retain();
  unint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v21);
  if ((v25 & 1) == 0)
  {
    swift_release();
    goto LABEL_8;
  }
  uint64_t v26 = *(void *)(*(void *)(v22 + 56) + 8 * v24);
  swift_endAccess();
  swift_retain();
  swift_release();
  if (*(unsigned char *)(v26 + 208))
  {
    int v27 = *(_DWORD *)(v26 + 176);
    swift_beginAccess();
    if (v27 != *(_DWORD *)(v2 + 192))
    {
      add #1 (item:reset:) in LazyLayoutViewCache.item(data:)(v26, 0, a1, v2, v23, v21);
      goto LABEL_120;
    }
  }
  int v28 = *(_DWORD *)(v26 + 184);
  swift_beginAccess();
  int v29 = *(_DWORD *)(v2 + 168);
  if (v28 == v29) {
    goto LABEL_120;
  }
  *(_DWORD *)(v26 + 184) = v29;
  uint64_t v267 = *(void *)(a1 + 56);
  v274[4] = 0;
  swift_bridgeObjectRetain();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  swift_release();
  double v30 = *(double *)&v275;
  *(void *)(v26 + 168) = v275;
  *(unsigned char *)(v2 + 226) = *(unsigned char *)(v2 + 226) & 1 | (v30 != 0.0);
  return v26;
}

void type metadata accessor for Logger?()
{
  if (!lazy cache variable for type metadata for Logger?)
  {
    type metadata accessor for Logger();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Logger?);
    }
  }
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  _ViewList_ID.Canonical.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

{
  Swift::Int v4;
  uint64_t vars8;

  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[0] = a1;
  v11[1] = a2;
  uint64_t v4 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v5 = a3 & ~v4;
  if ((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = ~v4;
    do
    {
      uint64_t v7 = (void *)(*(void *)(v3 + 48) + 16 * v5);
      uint64_t v8 = v7[1];
      v10[0] = *v7;
      v10[1] = v8;
      if (MEMORY[0x18C10D6E0](v10, v11)) {
        break;
      }
      unint64_t v5 = (v5 + 1) & v6;
    }
    while (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t i;
  uint64_t v9;
  void *v10;
  uint64_t v12;
  void *v13;
  void *v15;

  uint64_t v4 = v3 + 64;
  unint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      uint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        uint64_t v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (uint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; uint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  void *v8;

  unint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    do
    {
      uint64_t v8 = (void *)(*(void *)(v3 + 48) + 16 * result);
      if (v8[1] == a2 && *v8 == a1) {
        break;
      }
      uint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  uint64_t v4 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v5 = a3 & ~v4;
  if ((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = ~v4;
    do
    {
      if (static AccessibilityAttachmentToken.== infix(_:_:)()) {
        break;
      }
      unint64_t v5 = (v5 + 1) & v6;
    }
    while (((*(void *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

{
  uint64_t v3;
  uint64_t v5;
  unint64_t result;
  int32x4_t v7;

  unint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    v7.i64[0] = a1;
    v7.i64[1] = a2;
    do
    {
      if (vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vceqq_s32(*(int32x4_t *)(*(void *)(v3 + 48) + 16 * result), v7)), 0xFuLL))))break; {
      uint64_t result = (result + 1) & ~v5;
      }
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  void *v10;
  BOOL v11;
  uint64_t v12;
  void *v13;
  BOOL v14;

  uint64_t v4 = v3 + 64;
  unint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    uint64_t v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        uint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        uint64_t v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t outlined init with copy of AccessibilityScrollableContext?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  type metadata accessor for External<UInt32>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t outlined destroy of AccessibilityScrollableContext?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for External<UInt32>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for External<UInt32>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for _DUIPreviewMode(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

void type metadata accessor for AGGraphRef(uint64_t a1)
{
}

uint64_t _LazyLayoutViewCache.logReuse(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging();
  if (static UserDefaultKeyedFeature.isEnabled.getter())
  {
    if (one-time initialization token for log != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Log.LazyLayoutReuse.log);
    uint64_t v11 = *(void *)(v9 - 8);
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(v8, v10, v9);
    uint64_t v12 = (*(uint64_t (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v9);
  }
  else
  {
    uint64_t v13 = type metadata accessor for Logger();
    uint64_t v12 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v8, 1, 1, v13);
  }
  MEMORY[0x1F4188790](v12);
  *(_OWORD *)&v15[-32] = *(_OWORD *)(v5 + 320);
  *(void *)&v15[-16] = a1;
  *(void *)&v15[-8] = a2;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF2os6LoggerV_s5NeverOytTg5((void (*)(uint64_t *__return_ptr, unsigned char *))partial apply for closure #1 in _LazyLayoutViewCache.logReuse(_:));
  return outlined destroy of Logger?((uint64_t)v8);
}

uint64_t outlined destroy of Logger?(uint64_t a1)
{
  type metadata accessor for Logger?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging()
{
  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
  }
  return result;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF2os6LoggerV_s5NeverOytTg5(void (*a1)(uint64_t *__return_ptr, unsigned char *))
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of ScrollableCollection?(v1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Logger?);
  int v11 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4);
  if (v11 != 1)
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32))(v7, v10, v4);
    a1(&v14, v7);
    if (v2) {
      return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
    }
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v11 == 1;
}

uint64_t outlined init with copy of ScrollableCollection?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI20ScrollableCollection_pSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.UnarySubtreeSequence()
{
  if (!lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.UnarySubtreeSequence)
  {
    type metadata accessor for ContentResponderHelper<TrivialContentResponder>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewHost<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>.UnarySubtreeSequence);
    }
  }
}

uint64_t type metadata accessor for LazyLayoutCacheItem()
{
  uint64_t result = type metadata singleton initialization cache for LazyLayoutCacheItem;
  if (!type metadata singleton initialization cache for LazyLayoutCacheItem) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  _sypSgMaTm_9(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size_2(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = (2 * (v5 >> 3)) | 1;
  uint64_t v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<UIPress>.Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  size_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  _sypSgMaTm_9(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<FocusStoreList.Item>, (uint64_t)&type metadata for FocusStoreList.Item, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size_2(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 72);
  uint64_t v5 = specialized Sequence._copyContents(initializing:)((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

{
  uint64_t v1;
  void *v3;
  size_t v4;
  void *v5;
  uint64_t v7;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  _s10Foundation14DateComponentsVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)>, (uint64_t (*)(uint64_t))type metadata accessor for (key: Int, value: DragReorderableLayoutCoordinator.ChildFrame), MEMORY[0x1E4FBBE00]);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = _swift_stdlib_malloc_size_2(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 56);
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of Set<UIPress>.Iterator._Variant();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

unint64_t lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways()
{
  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways;
  if (!lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UpdateSubviewTransition and conformance UpdateSubviewTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type UpdateSubviewTransition and conformance UpdateSubviewTransition;
  if (!lazy protocol witness table cache variable for type UpdateSubviewTransition and conformance UpdateSubviewTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UpdateSubviewTransition and conformance UpdateSubviewTransition);
  }
  return result;
}

uint64_t specialized LazyLayoutCacheItem.init(cache:subgraph:outputs:state:list:elements:id:elementIndex:section:indirectMap:transition:transitionType:)(uint64_t a1, void *a2, uint64_t *a3, int a4, uint64_t a5, void *a6, int *a7, uint64_t a8, int a9, char a10, char a11, char a12, uint64_t a13, int a14, char a15, uint64_t a16, uint64_t a17)
{
  uint64_t v28 = *a3;
  int v20 = *a7;
  int v31 = a7[1];
  uint64_t v21 = *((void *)a7 + 1);
  *(void *)(a17 + 16) = 0;
  int v22 = *MEMORY[0x1E4F4E7A0];
  *(_DWORD *)(a17 + 52) = *MEMORY[0x1E4F4E7A0];
  *(_OWORD *)(a17 + 168) = 0u;
  *(_OWORD *)(a17 + 184) = 0u;
  *(void *)(a17 + 200) = 0;
  *(unsigned char *)(a17 + 208) = 1;
  *(_DWORD *)(a17 + 212) = -1;
  *(_OWORD *)(a17 + 232) = 0u;
  *(_OWORD *)(a17 + 216) = 0u;
  *(_OWORD *)(a17 + 248) = 0u;
  *(_OWORD *)(a17 + 264) = 0u;
  *(unsigned char *)(a17 + 280) = 1;
  *(void *)(a17 + 288) = 0;
  *(_DWORD *)(a17 + 296) = 0x20000;
  swift_beginAccess();
  swift_retain();
  swift_unownedRelease();
  *(void *)(a17 + 16) = a1;
  swift_endAccess();
  *(void *)(a17 + 24) = a2;
  *(void *)(a17 + 32) = v28;
  *(void *)(a17 + 40) = a3[1];
  if ((a5 & 0x100000000) != 0) {
    int v23 = v22;
  }
  else {
    int v23 = a5;
  }
  *(_DWORD *)(a17 + 48) = a4;
  *(_DWORD *)(a17 + 52) = v23;
  outlined init with copy of TableColumnList((uint64_t)a6, a17 + 56);
  *(void *)(a17 + 96) = a8;
  *(_DWORD *)(a17 + 136) = v20;
  *(_DWORD *)(a17 + 140) = v31;
  *(void *)(a17 + 144) = v21;
  swift_unownedRetain();
  id v24 = a2;
  *(void *)(a17 + 152) = _ViewList_ID.reuseIdentifier.getter();
  *(_DWORD *)(a17 + 160) = a9;
  *(unsigned char *)(a17 + 164) = a10 & 1;
  *(unsigned char *)(a17 + 165) = a11 & 1;
  *(unsigned char *)(a17 + 166) = a12 & 1;
  uint64_t v25 = a6[3];
  uint64_t v26 = a6[4];
  __swift_project_boxed_opaque_existential_1(a6, v25);
  *(void *)(a17 + 104) = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 32))(v25, v26);
  *(void *)(a17 + 112) = a13;
  *(_DWORD *)(a17 + 120) = a14;
  *(unsigned char *)(a17 + 124) = a15 & 1;
  *(void *)(a17 + 128) = a16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a6);
  return a17;
}

uint64_t outlined consume of ReuseMessage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  if ((unint64_t)a4 >> 1 != 0xFFFFFFFF || a8 >= 2u) {
    return outlined consume of ReuseMessage(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    uint64_t v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  int v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *int v11 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    ++v11;
    unint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for SearchFieldPlacement.Role()
{
  return &type metadata for SearchFieldPlacement.Role;
}

uint64_t protocol witness for StyleModifier.styleBody(configuration:) in conformance SectionStyleModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return SectionStyleModifier.styleBody(configuration:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), a2, a3);
}

uint64_t initializeWithCopy for PrimitiveTargetVisibilityModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for DraggingPreviewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  uint64_t v9 = *(void *)(v8 + 8);
  if (v9)
  {
    uint64_t v10 = *(void *)(v8 + 16);
    *(void *)(v7 + 8) = v9;
    *(void *)(v7 + 16) = v10;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
  }
  uint64_t v11 = *(void *)(v8 + 24);
  if (v11)
  {
    uint64_t v12 = *(void *)(v8 + 32);
    *(void *)(v7 + 24) = v11;
    *(void *)(v7 + 32) = v12;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
  }
  uint64_t v13 = *(void *)(v8 + 40);
  if (v13)
  {
    uint64_t v14 = *(void *)(v8 + 48);
    *(void *)(v7 + 40) = v13;
    *(void *)(v7 + 48) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
  }
  uint64_t v15 = *(void *)(v8 + 56);
  if (v15)
  {
    uint64_t v16 = *(void *)(v8 + 64);
    *(void *)(v7 + 56) = v15;
    *(void *)(v7 + 64) = v16;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
  }
  int64_t v17 = (_OWORD *)(v7 + 72);
  unint64_t v18 = (_OWORD *)(v8 + 72);
  uint64_t v19 = *(void *)(v8 + 96);
  if (v19)
  {
    *(void *)(v7 + 96) = v19;
    (**(void (***)(_OWORD *, _OWORD *))(v19 - 8))(v17, v18);
  }
  else
  {
    long long v20 = *(_OWORD *)(v8 + 88);
    *int64_t v17 = *v18;
    *(_OWORD *)(v7 + 88) = v20;
  }
  uint64_t v21 = *(void *)(v8 + 112);
  *(void *)(v7 + 104) = *(void *)(v8 + 104);
  *(void *)(v7 + 112) = v21;
  swift_retain();
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PortalGroupRendererEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PortalGroupRendererEffect(a1, a2, a3, a4, a5, a6, (void (*)(void))lazy protocol witness table accessor for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect);
}

uint64_t type metadata accessor for OptionalViewAlias()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for MenuOrder()
{
  return &type metadata for MenuOrder;
}

ValueMetadata *type metadata accessor for ContainerBackgroundModifier()
{
  return &type metadata for ContainerBackgroundModifier;
}

ValueMetadata *type metadata accessor for HasKeyboardShortcut()
{
  return &type metadata for HasKeyboardShortcut;
}

double storeEnumTagSinglePayload for ScrollTransitionConfiguration.Mode(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 40) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = 2 * -a2;
      *(void *)(a1 + 40) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unint64_t protocol witness for _RendererEffect.effectValue(size:) in conformance PortalGroupRendererEffect@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *v2;
  int v6 = *((_DWORD *)v2 + 2);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 40) = a1;
  unint64_t result = lazy protocol witness table accessor for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect();
  *(void *)(v7 + 48) = result;
  *(void *)(v7 + 16) = v5;
  *(_DWORD *)(v7 + 24) = v6;
  *(void *)a2 = v7;
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = 3;
  return result;
}

unint64_t lazy protocol witness table accessor for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect;
  if (!lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect;
  if (!lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect;
  if (!lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect;
  if (!lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect;
  if (!lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect;
  if (!lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect;
  if (!lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ButtonStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t initializeBufferWithCopyOfBuffer for FocusedValues(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  swift_retain();
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for FocusStore(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationState.ListKey(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t UIView.SafeAreaHelper.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for ContentMarginModifier()
{
  return &type metadata for ContentMarginModifier;
}

ValueMetadata *type metadata accessor for ButtonFocusInteractionModifier()
{
  return &type metadata for ButtonFocusInteractionModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityAttachmentModifier()
{
  return &protocol witness table for AccessibilityAttachmentModifier;
}

void *initializeBufferWithCopyOfBuffer for AccessibilityFocusStore(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance _AllowsHitTestingModifier(uint64_t a1@<X8>)
{
  BOOL v2 = *v1 == 0;
  if (*v1) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = 2;
  }
  *(void *)a1 = v3;
  if (v2) {
    char v4 = 2;
  }
  else {
    char v4 = 19;
  }
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = v4;
}

ValueMetadata *type metadata accessor for NavigationSplitViewVisibility()
{
  return &type metadata for NavigationSplitViewVisibility;
}

void specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
}

{
  PortalGroupID.updateValue()();
}

{
  UIKitHostedFocusItemLifecycle.updateValue()();
}

{
  AnyHoverEffectContainer.updateValue()();
}

{
  ScrollStateEnqueueRequests.updateValue()();
}

{
  ToolbarPlacementEnvironment.updateValue()();
}

{
  specialized LazySubviewPrefetcher.updateValue()(0xD000000000000010, 0x8000000188328BB0, (uint64_t)&type metadata for LazyVStackLayout, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))specialized closure #1 in LazySubviewPrefetcher.updateValue());
}

{
  specialized LazySubviewPrefetcher.updateValue()(0xD000000000000010, 0x8000000188328C80, (uint64_t)&type metadata for LazyHStackLayout, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))specialized closure #1 in LazySubviewPrefetcher.updateValue());
}

{
  UpdateBridgedState.updateValue()();
}

{
  ToolbarMakeEntries.updateValue()();
}

{
  void *v0;
  id v1;
  void *v2;

  AGGraphGetValue();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
  unint64_t v0 = *(void **)AGGraphGetValue();
  swift_bridgeObjectRetain();
  uint64_t v1 = v0;
  AccessibilityAttachment.init(properties:platformElement:)();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
}

{
  BoundNavigationPathDetector.updateValue()();
}

{
  UpdateNavigationEventHandlers.updateValue()();
}

{
  AppearanceEffect.updateValue()();
}

{
  GeometryTransform.updateValue()();
}

{
  specialized PropertiesTransform.updateValue()();
}

{
  AccessibilityHostedViewBridgeTransform.updateValue()();
}

{
  UpdateContextMenuInteraction.updateValue()();
}

{
  LazyFocusableFillerBoundsProvider.updateValue()();
}

{
  specialized LazySubviewPrefetcher.updateValue()(0x8000000188328A70, (uint64_t)&type metadata for LazyFixedSizeHStackLayout);
}

{
  specialized LazySubviewPrefetcher.updateValue()(0x8000000188328B60, (uint64_t)&type metadata for LazyFixedSizeVStackLayout);
}

{
  PlatformAccessibilityContent.updateValue()();
}

{
  OnFocusObserver.updateValue()();
}

{
  HoverResponderChild.updateValue()();
}

{
  DefaultLayoutResponderFilter.updateValue()();
}

{
  specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  DisplayList.HostedViews.ResponderFilter.updateValue()();
}

{
  DisplayList.HostedViews.updateValue()();
}

{
  BoundInputsView.Info.updateValue()();
}

{
  specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  UpdateCollectionViewTableCoordinator.updateValue()();
}

{
  specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  specialized AccessibilityBridgedPlatformView.updateValue()();
}

{
  specialized LazySubviewPrefetcher.updateValue()(0x69724748797A614CLL, 0xEF74756F79614C64, (uint64_t)&type metadata for LazyHGridLayout, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))specialized closure #1 in LazySubviewPrefetcher.updateValue());
}

{
  specialized LazySubviewPrefetcher.updateValue()(0x69724756797A614CLL, 0xEF74756F79614C64, (uint64_t)&type metadata for LazyVGridLayout, (void (*)(_DWORD *, uint64_t, uint64_t, uint64_t))specialized closure #1 in LazySubviewPrefetcher.updateValue());
}

{
  void *v0;

  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t Value;
  uint64_t v4;

  unint64_t v0 = type metadata accessor for SearchToolbarItem();
  MEMORY[0x1F4188790](v0);
  BOOL v2 = (char *)&v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for SearchToolbarItem);
  swift_retain();
  swift_getAtKeyPath();
  __break(1u);
}

{
  swift_retain();
  swift_getAtKeyPath();
  __break(1u);
}

{
  AGGraphGetValue();
  swift_retain();
  swift_retain();
  swift_getAtKeyPath();
  __break(1u);
}

ValueMetadata *type metadata accessor for ResolvedCustomButtonMenu.Configuration()
{
  return &type metadata for ResolvedCustomButtonMenu.Configuration;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance CustomButtonMenuStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t partial apply for closure #2 in AccessibilityProxyModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in AccessibilityProxyModifier.body(content:)(v1[4], v1[2], v1[3], a1);
}

void static ContentMarginPlacement.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t initializeWithCopy for _LazyLayout_PlacedSubview(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_retain();
  return a1;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance SearchFieldPlacement.Role(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static SearchFieldPlacement.Role.== infix(_:_:)(*a1, *a2);
}

uint64_t specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v8, (uint64_t)&v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.setter(a2, a3, a4);
  specialized AccessibilityProperties.subscript.getter(*a1, (uint64_t)&v19);
  uint64_t v10 = v22;
  uint64_t v9 = v23;
  char v11 = v24;
  uint64_t v12 = v19;
  uint64_t v13 = v20;
  char v14 = v21;
  if (v20)
  {
    if (v23)
    {
      uint64_t v16 = v19;
      uint64_t v17 = v20;
      char v18 = v21;
      AccessibilityIdentifierStorage.merge(with:)();
      uint64_t v12 = v16;
      uint64_t v13 = v17;
      char v14 = v18;
    }
  }
  else if (v23)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = v10;
    uint64_t v13 = v9;
    char v14 = v11;
  }
  else
  {
    uint64_t v13 = 0;
  }
  specialized AccessibilityProperties.subscript.setter(v12, v13, v14);

  return swift_bridgeObjectRelease();
}

uint64_t specialized AccessibilityProperties.subscript.setter(uint64_t a1, uint64_t a2, char a3)
{
  if (a2)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>();
    uint64_t v10 = v6;
    uint64_t v11 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>);
    v8[0] = a1;
    v8[1] = a2;
    char v9 = a3;
    return specialized Dictionary.subscript.setter((uint64_t)v8, MEMORY[0x1E4F40A98]);
  }
  else
  {
    specialized Dictionary.removeValue(forKey:)(MEMORY[0x1E4F40A98], (uint64_t)v8);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
}

{
  uint64_t v5;
  void v7[2];
  char v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
  {
    specialized Dictionary.removeValue(forKey:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey, (uint64_t)v7);
    return _s7SwiftUI20ScrollableCollection_pSgWOhTm_1((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry?, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry, MEMORY[0x1E4F41218]);
  }
  else
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityUIKitTraits?>();
    char v9 = v5;
    uint64_t v10 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C12LabelStorageVSgGACyxGAA03AnycdE0AAWlTm_1(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityUIKitTraits?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityUIKitTraits?>);
    v7[0] = a1;
    v7[1] = a2;
    uint64_t v8 = 0;
    return specialized Dictionary.subscript.setter((uint64_t)v7, (uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey);
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>)
  {
    _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?, MEMORY[0x1E4F41168], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityIdentifierStorage?>);
    }
  }
}

uint64_t specialized AccessibilityProperties.subscript.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40A98]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)v13);
    uint64_t v6 = v15;
    uint64_t v7 = v16;
    __swift_project_boxed_opaque_existential_1(v13, v15);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v17, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?, MEMORY[0x1E4F41168], v8);
  uint64_t result = swift_dynamicCast();
  uint64_t v10 = v13[0];
  uint64_t v11 = v13[1];
  char v12 = v14;
  if (!result)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    char v12 = 0;
  }
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = v12;
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned char v13[312];
  unsigned char v14[312];
  void v15[3];
  uint64_t v16;
  uint64_t v17;
  void v18[4];

  if (*(void *)(a1 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40B68]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)v15);
    uint64_t v6 = v16;
    uint64_t v7 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v18, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0], v8);
  if (swift_dynamicCast())
  {
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v15, v9, v10, v11);
    outlined init with take of AccessibilityDataSeriesConfiguration??((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AccessibilityDataSeriesConfiguration??);
    outlined init with take of AccessibilityDataSeriesConfiguration??((uint64_t)v13, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AccessibilityDataSeriesConfiguration??);
  }
  else
  {
    _s7SwiftUI36AccessibilityDataSeriesConfigurationVSgWOi0_((uint64_t)v14);
  }
  return outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)v14, a2, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0]);
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void, uint64_t);
  uint64_t result;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[2];

  if (*(void *)(a1 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40B88]), (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)&v12);
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    __swift_project_boxed_opaque_existential_1(&v12, v14);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v16, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v12);
  }
  else
  {
    memset(v16, 0, sizeof(v16));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, &lazy cache variable for type metadata for AccessibilityLabelStorage?, MEMORY[0x1E4F40E40], v8);
  uint64_t result = swift_dynamicCast();
  uint64_t v10 = v12;
  uint64_t v11 = v13;
  if (!result)
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
  }
  *(void *)a2 = v10;
  *(unsigned char *)(a2 + 8) = v11;
  return result;
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned char v13[152];
  unsigned char v14[152];
  void v15[3];
  uint64_t v16;
  uint64_t v17;
  void v18[4];

  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TextLayoutPropertiesKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)v15);
    uint64_t v6 = v16;
    uint64_t v7 = v17;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v18, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
  }
  else
  {
    memset(v18, 0, sizeof(v18));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties, v8);
  if (swift_dynamicCast())
  {
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v15, v9, v10, v11);
    outlined init with take of AccessibilityDataSeriesConfiguration??((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AccessibilityTextLayoutProperties??);
    outlined init with take of AccessibilityDataSeriesConfiguration??((uint64_t)v13, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for AccessibilityTextLayoutProperties??);
  }
  else
  {
    _s7SwiftUI33AccessibilityTextLayoutPropertiesOSgWOi0_((uint64_t)v14);
  }
  return outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)v14, a2, &lazy cache variable for type metadata for AccessibilityTextLayoutProperties?, (uint64_t)&type metadata for AccessibilityTextLayoutProperties);
}

{
  unint64_t v4;
  char v5;
  long long v6;
  void v8[3];
  long long v9;
  _OWORD v10[2];

  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableCollectionKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)v8);
    uint64_t v6 = v9;
    __swift_project_boxed_opaque_existential_1(v8, v9);
    (*(void (**)(_OWORD *__return_ptr, void, void))(*((void *)&v6 + 1) + 8))(v10, v6, *((void *)&v6 + 1));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  type metadata accessor for (NSObject & PlatformAccessibilityElementProtocol)?(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection?, (uint64_t)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E4F40678], (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CVarArg);
  if (swift_dynamicCast()) {
    return outlined init with take of ScrollableCollection?((uint64_t)v8, a2);
  }
  memset(v8, 0, sizeof(v8));
  char v9 = xmmword_18834FC50;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 32) = 0;
  return outlined destroy of ScrollableCollection??((uint64_t)v8);
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void, uint64_t);
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  int v14;
  __int16 v15;
  char v16;
  _OWORD v17[2];

  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ScrollableContextKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)&v10);
    uint64_t v6 = *((void *)&v11 + 1);
    uint64_t v7 = v12;
    __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v17, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext, v8);
  if (swift_dynamicCast()) {
    return outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)&v10, a2, (unint64_t *)&lazy cache variable for type metadata for AccessibilityScrollableContext?, (uint64_t)&type metadata for AccessibilityScrollableContext);
  }
  char v12 = 0u;
  uint64_t v13 = 0u;
  uint64_t v10 = 0u;
  uint64_t v11 = 0u;
  uint64_t v15 = 0;
  char v14 = 0;
  uint64_t v16 = -2;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_WORD *)(a2 + 68) = 0;
  *(_DWORD *)(a2 + 64) = 0;
  *(unsigned char *)(a2 + 70) = -1;
  return outlined destroy of AccessibilityValueStorage??((uint64_t)&v10, (uint64_t (*)(void))type metadata accessor for AccessibilityScrollableContext??);
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void, uint64_t);
  long long v10;
  long long v11;
  uint64_t v12;
  char v13;
  _OWORD v14[2];

  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TableContextKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)&v10);
    uint64_t v6 = *((void *)&v11 + 1);
    uint64_t v7 = v12;
    __swift_project_boxed_opaque_existential_1(&v10, *((uint64_t *)&v11 + 1));
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v14, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
  }
  else
  {
    memset(v14, 0, sizeof(v14));
  }
  uint64_t v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, v8);
  if (swift_dynamicCast()) {
    return outlined init with take of AccessibilityDataSeriesConfiguration?((uint64_t)&v10, a2, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  }
  char v12 = 0;
  uint64_t v10 = 0u;
  uint64_t v11 = 0u;
  uint64_t v13 = -2;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = -1;
  return outlined destroy of AccessibilityValueStorage??((uint64_t)&v10, (uint64_t (*)(void))type metadata accessor for AccessibilityTableContext??);
}

{
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v15[2];

  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.AutomationVisibilityKey),
        (v5 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v4, (uint64_t)&v11);
    uint64_t v6 = v13;
    uint64_t v7 = v14;
    __swift_project_boxed_opaque_existential_1(&v11, v13);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v7 + 8))(v15, v6, v7);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  }
  else
  {
    memset(v15, 0, sizeof(v15));
  }
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>?(0);
  uint64_t result = swift_dynamicCast();
  char v9 = v11;
  uint64_t v10 = v12;
  if (!result) {
    char v9 = 0;
  }
  *(void *)a2 = v9;
  *(unsigned char *)(a2 + 8) = v10 & 1 | ((result & 1) == 0);
  return result;
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void (*v14)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void v18[3];
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];

  type metadata accessor for Locale?(0, &lazy cache variable for type metadata for LinkDestination.Configuration??, (uint64_t (*)(uint64_t))type metadata accessor for LinkDestination.Configuration?, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v18[-1] - v5;
  if (*(void *)(a1 + 16) && (uint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40B08]), (v8 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(a1 + 56) + 40 * v7, (uint64_t)v18);
    char v9 = v19;
    uint64_t v10 = v20;
    __swift_project_boxed_opaque_existential_1(v18, v19);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v10 + 8))(v21, v9, v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
  }
  else
  {
    memset(v21, 0, sizeof(v21));
  }
  _s7SwiftUI25AccessibilityValueStorageVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  type metadata accessor for LinkDestination.Configuration?(0);
  char v12 = v11;
  uint64_t v13 = swift_dynamicCast();
  char v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
  if (v13)
  {
    v14(v6, 0, 1, v12);
    return outlined init with take of AccessibilityDataSeriesConfiguration??((uint64_t)v6, a2, (uint64_t (*)(void))type metadata accessor for LinkDestination.Configuration?);
  }
  else
  {
    v14(v6, 1, 1, v12);
    uint64_t v16 = type metadata accessor for LinkDestination.Configuration();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a2, 1, 1, v16);
    return outlined destroy of LinkDestination.Configuration??((uint64_t)v6, &lazy cache variable for type metadata for LinkDestination.Configuration??, (uint64_t (*)(uint64_t))type metadata accessor for LinkDestination.Configuration?);
  }
}

uint64_t storeEnumTagSinglePayload for NavigationState.ListKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ButtonStyleConfiguration()
{
  return &type metadata for ButtonStyleConfiguration;
}

void static ScrollIndicatorVisibility.never.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

uint64_t base witness table accessor for _AttributeBody in PropertiesTransform<A>()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for NavigationButtonInput()
{
  return &type metadata for NavigationButtonInput;
}

uint64_t outlined init with copy of ContentScrollViewBox(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for ContentScrollViewBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4();
  ((void (*)(uint64_t, uint64_t))a4)(v7 + 8, a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t initializeWithCopy for ContentScrollViewBox(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for ContentScrollViewBox(a1, a2, a3, MEMORY[0x1E4FBC920]);
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.SearchFieldPlacementKey(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*a1, *a2);
}

uint64_t getEnumTag for LazyState.Storage(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v3 = 16;
  if (*(void *)(v2 + 64) > 0x10uLL) {
    uint64_t v3 = *(void *)(v2 + 64);
  }
  uint64_t v4 = a1[v3];
  int v5 = v4 - 2;
  if (v4 >= 2)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_12;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v8 = (v7 | (v5 << (8 * v3))) + 2;
        LODWORD(v4) = v7 + 2;
        if (v3 >= 4) {
          uint64_t v4 = v4;
        }
        else {
          uint64_t v4 = v8;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

uint64_t storeEnumTagSinglePayload for StatusBarKey.StatusBar(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

__n128 __swift_memcpy28_4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance TransactionalPreferenceTransformModifier<A>@<D0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t *a3@<X8>)
{
  return static TransactionalPreferenceTransformModifier._makeView(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t initializeWithCopy for DisclosureIndicator_PhoneTV(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  char v7 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  return a1;
}

id protocol witness for static TextAlwaysOnProvider.makeAlwaysOn(inputs:schedule:outputs:) in conformance SwiftUITextAlwaysOnProvider()
{
  id result = objc_msgSend(self, sel__alwaysOnSupported);
  if (result)
  {
    MEMORY[0x1F4188790](result);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PlatformItemListTransformModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance SharingActivityPickerPresentation.Key@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static SharingActivityPickerPresentation.Key.defaultValue;

  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for RefreshScopeModifier()
{
  return &type metadata for RefreshScopeModifier;
}

void closure #1 in UIHostingViewBase.updateRemovedState(uiView:)partial apply()
{
}

void partial apply for closure #1 in UIHostingViewBase.updateRemovedState(uiView:)()
{
  uint64_t v1 = *(char **)(v0 + 24);
  uint64_t v2 = *(void *)(*(void *)(v0 + 16) + 64);
  char v3 = *v1;
  swift_beginAccess();
  *(unsigned char *)(v2 + 169) = v3;
  GraphHost.updateRemovedState()();
}

void _s7SwiftUI17UIHostingViewBaseC18updateRemovedState02uiD0ySo6UIViewCSg_tFyyXEfU_TA_0()
{
  closure #1 in UIHostingViewBase.updateRemovedState(uiView:)(*(void *)(v0 + 16), *(char **)(v0 + 24));
}

void closure #1 in UIHostingViewBase.updateRemovedState(uiView:)(uint64_t a1, char *a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  char v3 = *a2;
  swift_beginAccess();
  *(unsigned char *)(v2 + 169) = v3;
  GraphHost.updateRemovedState()();
}

_UNKNOWN **base witness table accessor for ViewModifier in IgnoreColorInvertEffect()
{
  return &protocol witness table for IgnoreColorInvertEffect;
}

Swift::Void __swiftcall _UIHostingView.preferencesDidChange()()
{
}

uint64_t DeprecatedAlertBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v38 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v5 = v38;
  uint64_t v6 = *(void *)(v38 + 88);
  uint64_t v49 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v43 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v41 = (char *)v37 - v9;
  MEMORY[0x1F4188790](v10);
  v37[3] = (char *)v37 - v11;
  v37[4] = v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v42 = (char *)v37 - v14;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v51 = (char *)v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v46 = (char *)v37 - v18;
  MEMORY[0x1F4188790](v19);
  v37[2] = (char *)v37 - v20;
  MEMORY[0x1F4188790](v21);
  uint64_t v40 = (char *)v37 - v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v39 = (char *)v37 - v24;
  MEMORY[0x1F4188790](v25);
  id v45 = (char *)v37 - v26;
  MEMORY[0x1F4188790](v27);
  uint64_t v44 = (char *)v37 - v28;
  uint64_t v53 = v29;
  uint64_t v30 = type metadata accessor for PreferenceValues.Value();
  uint64_t v52 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  int v32 = (char *)v37 - v31;
  uint64_t v33 = *a1;
  uint64_t v34 = *(void *)(v5 + 104);
  swift_getAssociatedTypeWitness();
  uint64_t v55 = v33;
  uint64_t v47 = v34;
  uint64_t v50 = v6;
  swift_getAssociatedConformanceWitness();
  PreferenceValues.subscript.getter();
  int v35 = *(_DWORD *)((char *)v2 + *(void *)((*v4 & *v2) + 0x80));
  uint64_t v54 = v30;
  PreferenceValues.Value.seed.getter();
  if (v35 == -1 || v55 == -1 || v35 != v55) {
    DeprecatedAlertBridge.presenter.getter();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v32, v54);
}

uint64_t _UIHostingView.currentAccessibilityFocusStore.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1B0));
  uint64_t v3 = v2[1];
  uint64_t v4 = v2[2];
  *a1 = *v2;
  a1[1] = v3;
  a1[2] = v4;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall _UIHostingView.updateEnvironment()()
{
  uint64_t v1 = *MEMORY[0x1E4FBC8C8] & *v0;
  _UIHostingView.base.getter();
  UIHostingViewBase.startUpdateEnvironment()(&v5);
  swift_release();
  if (_UIHostingView.delegate.getter())
  {
    uint64_t v3 = v2;
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, long long *, void, void, uint64_t, uint64_t))(v3 + 16))(v0, &v5, *(void *)(v1 + 80), *(void *)(v1 + 88), ObjectType, v3);
    swift_unknownObjectRelease();
  }
  _UIHostingView.viewController.getter();
}

void sub_18732A4B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (a1)
  {
    a18 = a21;
    a19 = a22;
    swift_retain();
    swift_retain();
    UIHostingController.resolveRequiredBridges(in:allowedActions:)(&a18, 3);
    swift_release();
    swift_release();
  }
  _UIHostingView.base.getter();
  swift_release();
  uint64_t v25 = (void *)specialized _UIHostingView.traitCollectionOverride.getter();
  if (!v25)
  {
    objc_msgSend(v22, sel_traitCollection);
    uint64_t v25 = 0;
  }
  uint64_t v26 = a22;
  a18 = a21;
  a19 = a22;
  id v27 = v25;
  if (EnvironmentValues.accessibilityInvertColors.getter())
  {
    LOBYTE(a18) = UIView.ancestorHasInvertFilterApplied.getter() & 1;
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey>, (uint64_t)&type metadata for IgnoreInvertColorsFilterActiveKey, (uint64_t)&protocol witness table for IgnoreInvertColorsFilterActiveKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IgnoreInvertColorsFilterActiveKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v26)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  id v28 = objc_msgSend(v22, sel_window);
  if (v28)
  {

    id v29 = objc_msgSend(v22, sel__undimmedTintColor);
    if (v29)
    {
      id v30 = v29;
      Color.Resolved.init(platformColor:)();
      if ((v31 & 1) == 0)
      {
        Color.init(_:)();
        EnvironmentValues.accentColor.setter();
      }
    }
  }
  if (objc_msgSend(v22, sel_tintAdjustmentMode) == (id)2)
  {
    LOBYTE(a18) = 1;
    EnvironmentValues.tintAdjustmentMode.setter();
  }
  if (_UIHostingView.accessibilityEnabled.getter()) {
    EnvironmentValues.accessibilityEnabled.setter();
  }
  id v32 = objc_msgSend(v22, sel_window);
  if (!v32) {
    goto LABEL_25;
  }
  uint64_t v33 = v32;
  id v34 = objc_msgSend(v32, sel_windowScene);

  if (!v34) {
    goto LABEL_25;
  }
  id v35 = objc_msgSend(v34, sel__systemUserInterfaceStyle);

  if (v35 == (id)2)
  {
    char v36 = 1;
  }
  else
  {
    if (v35 != (id)1)
    {
LABEL_25:
      id v37 = objc_msgSend(v22, sel_window);
      id v38 = v37;
      if (v37)
      {
        id v39 = objc_msgSend(v37, sel_windowScene);

        if (v39)
        {
          id v38 = objc_msgSend(v39, sel_session);
        }
        else
        {
          id v38 = 0;
        }
      }
      specialized EnvironmentValues.sceneSession.setter((uint64_t)v38);

      id v40 = objc_msgSend(v22, sel_window);
      if (!v40) {
        goto LABEL_33;
      }
      uint64_t v41 = v40;
      id v42 = objc_msgSend(v40, sel_windowScene);

      if (!v42) {
        goto LABEL_34;
      }
      id v43 = objc_msgSend(v42, sel_systemProtectionManager);

      if (v43)
      {
        LOBYTE(v42) = objc_msgSend(v43, sel_isUserAuthenticationEnabled);
      }
      else
      {
LABEL_33:
        LOBYTE(v42) = 0;
      }
LABEL_34:
      LOBYTE(a18) = (_BYTE)v42;
      type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<InterfaceProtectionKey>, (uint64_t)&type metadata for InterfaceProtectionKey, (uint64_t)&protocol witness table for InterfaceProtectionKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      uint64_t v44 = a22;
      if (a22)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      id v45 = objc_msgSend(v22, sel_undoManager);
      a18 = (uint64_t)v45;
      type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UndoManagerKey>, (uint64_t)&type metadata for UndoManagerKey, (uint64_t)&protocol witness table for UndoManagerKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>();
      id v46 = v45;
      swift_retain();
      PropertyList.subscript.setter();
      if (v44)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

        swift_release();
        swift_release();
      }
      else
      {
      }
      swift_release();
      if (_UIHostingView.accessibilityEnabled.getter())
      {
        uint64_t v47 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v48 = (void *)swift_allocObject();
        v48[2] = *(void *)(v23 + 80);
        v48[3] = *(void *)(v23 + 88);
        v48[4] = v47;
        swift_retain();
        uint64_t v49 = partial apply for closure #3 in _UIHostingView.updateEnvironment();
      }
      else
      {
        uint64_t v49 = 0;
        uint64_t v48 = 0;
      }
      a18 = (uint64_t)v49;
      a19 = v48;
      type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityRequestFocusKey>, (uint64_t)&type metadata for AccessibilityRequestFocusKey, (uint64_t)&protocol witness table for AccessibilityRequestFocusKey, MEMORY[0x1E4F40930]);
      outlined copy of AppIntentExecutor?((uint64_t)v49);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (a22)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v49);
      _UIHostingView.isPresentedInModalViewController.getter();
    }
    char v36 = 0;
  }
  LOBYTE(a18) = v36;
  EnvironmentValues.systemColorScheme.setter();
  goto LABEL_25;
}

void sub_18732AB30(char a1)
{
  if ((a1 & 1) == 0) {
    _UIHostingView.isPresentedInNavigationController.getter();
  }
  uint64_t v19 = 0;
  uint64_t v20 = _UIHostingView.presentationModeLocation.getter();
  char v21 = 1;
  type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>, (uint64_t)&type metadata for PresentationModeKey, (uint64_t)&protocol witness table for PresentationModeKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (v4)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  uint64_t v5 = v22;
  type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey>, (uint64_t)&type metadata for EnvironmentValues.DismissWindowActionKey, (uint64_t)&protocol witness table for EnvironmentValues.DismissWindowActionKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v22)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  id v6 = objc_msgSend(v1, sel_window);
  uint64_t v16 = v3;
  if (v6 && (uint64_t v7 = v6, v8 = objc_msgSend(v6, sel_windowScene), v7, v8))
  {

    char v9 = 1;
  }
  else
  {
    char v9 = 0;
  }
  uint64_t v10 = _UIHostingView.scenePresentationModeLocation.getter();
  swift_retain();
  outlined consume of Binding<NavigationSplitViewColumn>?(v19, v20);
  v17[0] = 0;
  v17[1] = v10;
  char v18 = v9;
  type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey>, (uint64_t)&type metadata for EnvironmentValues.DismissWindowActionKey, (uint64_t)&protocol witness table for EnvironmentValues.DismissWindowActionKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (v22)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  id v11 = objc_msgSend(v1, sel_window);
  if (v11)
  {
    uint64_t v12 = v11;
    id v13 = objc_msgSend(v11, sel_windowScene, v10, v16, v2);

    if (v13)
    {
      id v14 = objc_msgSend(v13, sel__FBSScene);

      id v15 = objc_msgSend(v14, sel_settings);
      if (v15)
      {
        type metadata accessor for ClarityUIApplicationSceneSettings();
        if (swift_dynamicCastClass())
        {
          ClarityUIApplicationSceneSettings.navigationBarHost.getter((uint64_t)v17);
          type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationBarHostKey>, (uint64_t)&type metadata for NavigationBarHostKey, (uint64_t)&protocol witness table for NavigationBarHostKey, MEMORY[0x1E4F40930]);
          lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>();
          swift_retain();
          PropertyList.subscript.setter();
          if (v5)
          {
            swift_retain();
            swift_retain();
            PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
            swift_release();
            swift_release();
          }
          swift_release();
          ClarityUIApplicationSceneSettings.listLayout.getter((uint64_t)v17);
          type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MultimodalListLayoutKey>, (uint64_t)&type metadata for MultimodalListLayoutKey, (uint64_t)&protocol witness table for MultimodalListLayoutKey, MEMORY[0x1E4F40930]);
          lazy protocol witness table accessor for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>();
          swift_retain();
          PropertyList.subscript.setter();
          if (v5)
          {
            swift_retain();
            swift_retain();
            PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
            swift_release();
            swift_release();
          }
          swift_release();
          LOBYTE(v17[0]) = ClarityUIApplicationSceneSettings.areBadgesEnabled.getter() & 1;
          type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>, (uint64_t)&type metadata for BadgesEnabledKey, (uint64_t)&protocol witness table for BadgesEnabledKey, MEMORY[0x1E4F40930]);
          lazy protocol witness table accessor for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>();
          swift_retain();
          PropertyList.subscript.setter();
          if (v5)
          {
            swift_retain();
            swift_retain();
            PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

LABEL_32:
            swift_release();
            swift_release();
            goto LABEL_33;
          }

          goto LABEL_33;
        }
      }
    }
  }
  LOBYTE(v17[0]) = 0;
  type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationBarHostKey>, (uint64_t)&type metadata for NavigationBarHostKey, (uint64_t)&protocol witness table for NavigationBarHostKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v22)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  LOBYTE(v17[0]) = 0;
  type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MultimodalListLayoutKey>, (uint64_t)&type metadata for MultimodalListLayoutKey, (uint64_t)&protocol witness table for MultimodalListLayoutKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v22)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  LOBYTE(v17[0]) = 1;
  type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>, (uint64_t)&type metadata for BadgesEnabledKey, (uint64_t)&protocol witness table for BadgesEnabledKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v22)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    goto LABEL_32;
  }
LABEL_33:
  swift_release();
  _UIHostingView.viewController.getter();
}

void type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined consume of Binding<NavigationSplitViewColumn>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t destroy for FindContext(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized _UIHostingView.focusBridge.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8));
}

uint64_t UIHostingViewBase.withMainThreadRender(wasAsync:_:)@<X0>(char a1@<W0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  if (MEMORY[0x18C119DF0](v4 + 40))
  {
    uint64_t v10 = *(void *)(v4 + 48);
    uint64_t ObjectType = swift_getObjectType();
    LOBYTE(v10) = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(ObjectType, v10);
    swift_unknownObjectRelease();
    char v12 = v10 ^ 1;
  }
  else
  {
    char v12 = 1;
  }
  id v13 = self;
  if (!objc_msgSend(v13, sel_areAnimationsEnabled) || (v12 & 1) != 0)
  {
    uint64_t result = a2();
    if ((a1 & 1) == 0) {
      *(unsigned char *)(v5 + 219) = 0;
    }
  }
  else if (a1)
  {
    return a2();
  }
  else
  {
    static Time.infinity.getter();
    id v15 = (void *)swift_allocObject();
    v15[2] = &v19;
    v15[3] = a2;
    v15[4] = a3;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = partial apply for closure #1 in UIHostingViewBase.withMainThreadRender(wasAsync:_:);
    *(void *)(v16 + 24) = v15;
    aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
    aBlock[5] = v16;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = &block_descriptor_41;
    uint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v13, sel_performWithoutAnimation_, v17);
    _Block_release(v17);
    LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (v17)
    {
      __break(1u);
    }
    else
    {
      *a4 = v19;
      *(unsigned char *)(v5 + 219) = 0;
      return swift_release();
    }
  }
  return result;
}

uint64_t _UIHostingView.shouldDisableUIKitAnimations.getter()
{
  if (!*(_DWORD *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70)))
  {
    char v1 = *((unsigned char *)_UIHostingView.base.getter() + 219);
    swift_release();
    if ((v1 & 1) == 0 && (_UIHostingView.isInSizeTransition.getter() & 1) == 0) {
      _UIHostingView.isResizingSheet.getter();
    }
  }
  return 0;
}

void sub_18732BA58()
{
}

void _UIHostingView.isTabSidebarMorphing.getter()
{
}

id sub_18732BA74(id a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  id v12 = a1;
  if (a1)
  {
    id v13 = objc_msgSend(a1, sel_tabBarController);

    if (v13)
    {
      id v12 = objc_msgSend(v13, sel__isInSidebarTransition);
    }
    else
    {
      return 0;
    }
  }
  return v12;
}

uint64_t _UIHostingView.isRotatingWindow.getter()
{
  return *(unsigned __int8 *)(*(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68)) + 224);
}

void _UIHostingView.isResizingSheet.getter()
{
  id v1 = objc_msgSend(v0, sel_window);
  uint64_t v2 = v1;
  if (v1)
  {
    id v3 = objc_msgSend(v1, sel__rootSheetPresentationController);

    if (!v3) {
      _UIHostingView.containingViewController.getter();
    }
    objc_msgSend(v3, sel__isGeneratingAnimations);
  }
  _UIHostingView.containingViewController.getter();
}

void _UIHostingView.containingViewController.getter()
{
}

id sub_18732BC1C(id result, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!result) {
    return objc_msgSend(v10, sel__viewControllerForAncestor);
  }
  return result;
}

void _UIHostingView.viewController.getter()
{
}

uint64_t _UIHostingView.delegate.getter()
{
  return MEMORY[0x18C119DF0]((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198));
}

id _UIHostingView.sheetBridge.getter()
{
  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0);
  uint64_t v2 = *(void **)((char *)v0 + v1);
  id v3 = v2;
  if (v2 == (void *)1)
  {
    uint64_t ObjectType = swift_getObjectType();
    id v3 = closure #1 in _UIHostingView.sheetBridge.getter(ObjectType);
    uint64_t v5 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = v3;
    id v6 = v3;
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v5);
  }
  outlined copy of SheetBridge<_ViewList_View, SheetPreference.Key>??(v2);
  return v3;
}

id outlined copy of SheetBridge<_ViewList_View, SheetPreference.Key>??(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t specialized _UIHostingView.editMenuBridge.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118));
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey>, (uint64_t)&type metadata for EnvironmentValues.DismissWindowActionKey, (uint64_t)&protocol witness table for EnvironmentValues.DismissWindowActionKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DismissWindowActionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t DeprecatedAlertBridge.update(environment:)(uint64_t *a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = *(void *)(v3 + 0x58);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v8 = (char *)&v19 - v7;
  uint64_t v9 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v10);
  id v12 = (char *)&v19 - v11;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  *(void *)&long long v19 = v13;
  *((void *)&v19 + 1) = v14;
  swift_retain();
  swift_retain();
  DeprecatedAlertBridge.lastEnvironment.setter(&v19);
  DeprecatedAlertBridge.lastPresentation.getter((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v4) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, v4);
  if ((*((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xA0)) & 1) == 0)
  {
    uint64_t v16 = *(void **)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x88));
    if (v16)
    {
      *(void *)&long long v19 = v13;
      *((void *)&v19 + 1) = v14;
      uint64_t v17 = *(void *)(v3 + 104);
      id v18 = v16;
      PlatformAlertController.update<A>(for:with:environmentChanged:)((uint64_t)v12, (uint64_t *)&v19, 1, v4, v17);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v4);
}

uint64_t getEnumTagSinglePayload for Alert.Presentation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 280)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t getEnumTagSinglePayload for ActionSheet.Presentation(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 168)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t DeprecatedAlertBridge.lastPresentation.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x98);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t DeprecatedAlertBridge.lastEnvironment.setter(_OWORD *a1)
{
  *(_OWORD *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x90)) = *a1;
  swift_release();

  return swift_release();
}

uint64_t _UIHostingView.accessibilityEnabled.getter()
{
  uint64_t v1 = *(void *)(*(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68)) + 64);
  swift_beginAccess();
  return *(unsigned __int8 *)(v1 + 360);
}

uint64_t specialized _UIHostingView.inspectorBridge.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108));
}

void *destroy for OnDeleteTableRowModifier(void *result)
{
  if (*result) {
    return (void *)swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<UndoManagerKey>, (uint64_t)&type metadata for UndoManagerKey, (uint64_t)&protocol witness table for UndoManagerKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<UndoManagerKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t specialized _UIHostingView.pencilEventsBridge.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150));
}

uint64_t specialized _UIHostingView.contextMenuBridge.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168));
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t specialized PencilEventsBridge.updateEnvironment(_:)(uint64_t a1)
{
  unint64_t v2 = self;
  objc_msgSend(v2, sel_preferredTapAction);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilDoubleTapActionKey>);
  swift_retain();
  PropertyList.subscript.setter();
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  objc_msgSend(v2, sel_preferredSqueezeAction);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.PreferredPencilSqueezeActionKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v3)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AccessibilityRequestFocusKey>, (uint64_t)&type metadata for AccessibilityRequestFocusKey, (uint64_t)&protocol witness table for AccessibilityRequestFocusKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AccessibilityRequestFocusKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<MultimodalListLayoutKey>, (uint64_t)&type metadata for MultimodalListLayoutKey, (uint64_t)&protocol witness table for MultimodalListLayoutKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<InterfaceProtectionKey>, (uint64_t)&type metadata for InterfaceProtectionKey, (uint64_t)&protocol witness table for InterfaceProtectionKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<InterfaceProtectionKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationBarHostKey>, (uint64_t)&type metadata for NavigationBarHostKey, (uint64_t)&protocol witness table for NavigationBarHostKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationBarHostKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<InterfaceProtectionKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<BadgesEnabledKey>, (uint64_t)&type metadata for BadgesEnabledKey, (uint64_t)&protocol witness table for BadgesEnabledKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<BadgesEnabledKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t ContextMenuBridge.update(environment:)(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t _UIHostingView.scenePresentationModeLocation.getter()
{
  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x188);
  if (*(void *)((char *)v0 + v1))
  {
    uint64_t v2 = *(void *)((char *)v0 + v1);
  }
  else
  {
    uint64_t v2 = closure #1 in _UIHostingView.presentationModeLocation.getter(v0, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitScenePresentationModeLocation, (uint64_t)&protocol conformance descriptor for UIKitScenePresentationModeLocation<A>, (void (*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))UIKitScenePresentationModeLocation.init(host:));
    *(void *)((char *)v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t _UIHostingView.presentationModeLocation.getter()
{
  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180);
  if (*(void *)((char *)v0 + v1))
  {
    uint64_t v2 = *(void *)((char *)v0 + v1);
  }
  else
  {
    uint64_t v2 = closure #1 in _UIHostingView.presentationModeLocation.getter(v0, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for UIKitPresentationModeLocation, (uint64_t)&protocol conformance descriptor for UIKitPresentationModeLocation<A>, (void (*)(uint64_t *__return_ptr, void *, uint64_t, uint64_t))UIKitPresentationModeLocation.init(host:));
    *(void *)((char *)v0 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t specialized _UIHostingView.traitCollectionOverride.getter()
{
  return *(void *)(*(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68)) + 168);
}

void _UIHostingView.isPresentedInModalViewController.getter()
{
}

uint64_t sub_18732CC28(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = (void *)result;
    id v2 = objc_msgSend((id)result, sel_presentingViewController);

    if (v2)
    {

      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void _UIHostingView.isPresentedInNavigationController.getter()
{
}

uint64_t sub_18732CC84(void *a1)
{
  if (a1)
  {
    id v2 = objc_msgSend(a1, sel_navigationController);

    if (v2)
    {
      id v3 = objc_msgSend(v2, sel_viewControllers);
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
      unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v4 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      if (v5 >= 2)
      {
        id v6 = objc_msgSend(v2, sel_topViewController);
        _UIHostingView.viewController.getter();
      }
    }
  }
  return 0;
}

uint64_t type metadata accessor for ClarityUIApplicationSceneSettings()
{
  return self;
}

uint64_t AVKitCaptureButtonBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  v4[4] = *a1;
  uint64_t result = PreferenceValues.seed.getter();
  if (v5)
  {
    MEMORY[0x1F4188790](result);
    v4[2] = v1;
    swift_beginAccess();
    specialized VersionSeedTracker.didChange(_:action:)(v2, partial apply for closure #1 in AVKitCaptureButtonBridge.preferencesDidChange(_:), (uint64_t)v4);
    return swift_endAccess();
  }
  return result;
}

void PencilEventsBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  PreferenceValues.subscript.getter();
  LOBYTE(v1) = v2;
  HIDWORD(v1) = v3;
  PencilEventsBridge.updateState(wantsPencilEvents:)((uint64_t)&v1);
}

void PencilEventsBridge.updateState(wantsPencilEvents:)(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 4);
  if (v2 == -1
    || ((int v3 = *(_DWORD *)(v1 + direct field offset for PencilEventsBridge.wantsPencilEventsSeed), v3 != -1)
      ? (BOOL v4 = v2 == v3)
      : (BOOL v4 = 0),
        !v4))
  {
    if (*(unsigned char *)a1)
    {
      uint64_t v5 = MEMORY[0x18C119DF0](v1 + direct field offset for PencilEventsBridge.host);
      if (v5)
      {
        id v6 = (id)v5;
        uint64_t v7 = direct field offset for PencilEventsBridge.pencilInteraction;
        if (!*(void *)(v1 + direct field offset for PencilEventsBridge.pencilInteraction))
        {
          id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1A80]), sel_init);
          objc_msgSend(v8, sel_setDelegate_, v1);
          objc_msgSend(v6, sel_addInteraction_, v8);
          uint64_t v9 = *(void **)(v1 + v7);
          *(void *)(v1 + v7) = v8;
          id v10 = v8;

          PencilEventsBridge.startObservingPreferredActions()();
          id v6 = v10;
        }
LABEL_14:
      }
    }
    else
    {
      uint64_t v11 = direct field offset for PencilEventsBridge.pencilInteraction;
      id v12 = *(void **)(v1 + direct field offset for PencilEventsBridge.pencilInteraction);
      if (v12)
      {
        uint64_t v13 = (void *)MEMORY[0x18C119DF0](v1 + direct field offset for PencilEventsBridge.host);
        id v6 = v12;
        if (v13)
        {
          objc_msgSend(v13, sel_removeInteraction_, v6);
        }
        uint64_t v14 = *(void **)(v1 + v11);
        *(void *)(v1 + v11) = 0;

        PencilEventsBridge.stopObservingPreferredActions()();
        goto LABEL_14;
      }
    }
    *(_DWORD *)(v1 + direct field offset for PencilEventsBridge.wantsPencilEventsSeed) = v2;
  }
}

void DragAndDropBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = MEMORY[0x18C119DF0](v1 + direct field offset for DragAndDropBridge.host);
  if (v3)
  {
    BOOL v4 = (void *)v3;
    uint64_t ObjectType = swift_getObjectType();

    if ((*(uint64_t (**)(void))(ObjectType + 1208))())
    {
      uint64_t v20 = v2;
      PreferenceValues.subscript.getter();
      v34[0] = v36;
      int v35 = v37;
      PreferenceValues.subscript.getter();
      uint64_t v6 = v2;
      char v7 = v21;
      uint64_t v8 = v22;
      char v9 = v23;
      uint64_t v10 = v24;
      char v11 = v25;
      uint64_t v12 = v26;
      char v13 = v27;
      uint64_t v14 = v28;
      char v15 = v29;
      uint64_t v16 = v30;
      char v17 = v31;
      char v18 = v32;
      int v19 = v33;
      DragAndDropBridge.updateDragInteraction(_:_:)((uint64_t)v34, (uint64_t)&v6);
      uint64_t v6 = v2;
      PreferenceValues.subscript.getter();
      LOBYTE(v6) = v20;
      HIDWORD(v6) = HIDWORD(v20);
      DragAndDropBridge.updateDropInteraction(_:)((uint64_t)&v6);
      uint64_t v6 = v2;
      PreferenceValues.subscript.getter();
      LOBYTE(v6) = v20;
      HIDWORD(v6) = HIDWORD(v20);
      DragAndDropBridge.updateSpringLoadedInteraction(_:)((uint64_t)&v6);
    }
  }
  else
  {
    __break(1u);
  }
}

void ContextMenuBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *a1;
  uint64_t v4 = v1 + direct field offset for ContextMenuBridge.host;
  uint64_t v5 = MEMORY[0x18C119DF0](v1 + direct field offset for ContextMenuBridge.host);
  if (!v5)
  {
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v6 = (void *)v5;
  uint64_t ObjectType = swift_getObjectType();

  if ((*(uint64_t (**)(void))(ObjectType + 1208))())
  {
    PreferenceValues.subscript.getter();
    PreferenceValues.subscript.getter();
    if (v23 == -1
      || ((int v8 = *(_DWORD *)(v2 + direct field offset for ContextMenuBridge.hasContextMenuSeed), v8 != -1)
        ? (BOOL v9 = v23 == v8)
        : (BOOL v9 = 0),
          v9 ? (BOOL v10 = v23 == -1) : (BOOL v10 = 1),
          v10
       || ((int v11 = *(_DWORD *)(v2 + direct field offset for ContextMenuBridge.menuOrderSeed), v11 != -1)
         ? (BOOL v12 = v23 == v11)
         : (BOOL v12 = 0),
           !v12)))
    {
      uint64_t v13 = direct field offset for ContextMenuBridge.interaction;
      uint64_t v14 = *(void **)(v2 + direct field offset for ContextMenuBridge.interaction);
      if (v14)
      {
        if ((v22 & 1) == 0)
        {
          id v15 = v14;
          objc_msgSend(v15, sel_dismissMenu, v3);
          uint64_t v16 = (void *)MEMORY[0x18C119DF0](v4);
          if (v16)
          {
            char v17 = v16;
            objc_msgSend(v16, sel_removeInteraction_, v15);

            id v18 = 0;
LABEL_22:
            char v21 = *(void **)(v2 + v13);
            *(void *)(v2 + v13) = v18;

            goto LABEL_23;
          }
          goto LABEL_26;
        }
      }
      else if (v22)
      {
        id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1680]), sel_initWithDelegate_, v2, v3);
        int v19 = (void *)MEMORY[0x18C119DF0](v4);
        if (v19)
        {
          uint64_t v20 = v19;
          objc_msgSend(v19, sel_addInteraction_, v18);

          goto LABEL_22;
        }
LABEL_27:
        __break(1u);
        return;
      }
LABEL_23:
      *(unsigned char *)(v2 + direct field offset for ContextMenuBridge.menuOrder) = v22;
      *(_DWORD *)(v2 + direct field offset for ContextMenuBridge.hasContextMenuSeed) = v23;
      *(_DWORD *)(v2 + direct field offset for ContextMenuBridge.menuOrderSeed) = v23;
    }
  }
}

uint64_t specialized _UIHostingView.shareConfigurationBridge.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x128));
}

uint64_t specialized _UIHostingView.avkitCaptureButtonBridge.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148));
}

uint64_t specialized _UIHostingView.scenePresentationBridge.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x140));
}

uint64_t specialized _UIHostingView.tooltipBridge.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x110));
}

uint64_t specialized _UIHostingView.pointerBridge.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158));
}

void TooltipBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  PreferenceValues.subscript.getter();
  LOBYTE(v1) = v2;
  HIDWORD(v1) = v3;
  TooltipBridge.updateState(hasTooltip:)((unsigned __int8 *)&v1);
}

void TooltipBridge.updateState(hasTooltip:)(unsigned __int8 *a1)
{
  int v2 = *a1;
  int v3 = *((_DWORD *)a1 + 1);
  if (v3 == -1
    || ((int v4 = *(_DWORD *)(v1 + direct field offset for TooltipBridge.hasTooltipSeed), v4 != -1)
      ? (BOOL v5 = v3 == v4)
      : (BOOL v5 = 0),
        !v5))
  {
    uint64_t v6 = v1 + direct field offset for TooltipBridge.host;
    char v7 = (void *)MEMORY[0x18C119DF0](v1 + direct field offset for TooltipBridge.host);
    if (v7)
    {
      int v8 = v7;
      uint64_t v9 = direct field offset for TooltipBridge.tooltipInteraction;
      if (!*(void *)(v1 + direct field offset for TooltipBridge.tooltipInteraction))
      {
        if (v2)
        {
          id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1DE8]), sel_init);
          objc_msgSend(v16, sel_setDelegate_, v1);
          id v17 = v16;
          objc_msgSend(v8, sel_addInteraction_, v17);

          id v15 = *(void **)(v1 + v9);
          *(void *)(v1 + v9) = v17;
LABEL_18:

LABEL_19:
          *(_DWORD *)(v1 + direct field offset for TooltipBridge.hasTooltipSeed) = v3;
          return;
        }

        BOOL v10 = (void **)(v1 + direct field offset for TooltipBridge.tooltipInteraction);
        uint64_t v11 = *(void *)(v1 + direct field offset for TooltipBridge.tooltipInteraction);
        if (!v11) {
          goto LABEL_19;
        }
LABEL_13:
        uint64_t v13 = (void *)MEMORY[0x18C119DF0](v6);
        if (v13)
        {
          uint64_t v14 = v13;
          objc_msgSend(v13, sel_removeInteraction_, v11);
        }
        id v15 = *v10;
        *BOOL v10 = 0;
        goto LABEL_18;
      }
    }
    BOOL v10 = (void **)(v1 + direct field offset for TooltipBridge.tooltipInteraction);
    uint64_t v11 = *(void *)(v1 + direct field offset for TooltipBridge.tooltipInteraction);
    if (v11) {
      char v12 = v2;
    }
    else {
      char v12 = 1;
    }
    if (v12) {
      goto LABEL_19;
    }
    goto LABEL_13;
  }
}

void DragAndDropBridge.updateSpringLoadedInteraction(_:)(uint64_t a1)
{
  int v2 = v1;
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *(void *)v1;
  int v4 = *(_DWORD *)(a1 + 4);
  if (v4 == -1
    || ((int v5 = *(_DWORD *)&v1[direct field offset for DragAndDropBridge.canSpringLoadSeed], v5 != -1)
      ? (BOOL v6 = v4 == v5)
      : (BOOL v6 = 0),
        !v6))
  {
    uint64_t v7 = direct field offset for DragAndDropBridge.springLoadedInteraction;
    uint64_t v8 = *(void *)&v1[direct field offset for DragAndDropBridge.springLoadedInteraction];
    if (v8)
    {
      if ((*(unsigned char *)a1 & 1) == 0)
      {
        uint64_t v9 = (void *)MEMORY[0x18C119DF0](&v2[direct field offset for DragAndDropBridge.host]);
        if (v9)
        {
          BOOL v10 = v9;
          objc_msgSend(v9, sel_removeInteraction_, v8);

          uint64_t v11 = *(void **)&v2[v7];
          *(void *)&v2[v7] = 0;
LABEL_13:

          goto LABEL_14;
        }
        __break(1u);
        goto LABEL_17;
      }
    }
    else if (*(unsigned char *)a1)
    {
      uint64_t v12 = *(void *)(v3 + 96);
      uint64_t v13 = *(void *)(v3 + 104);
      type metadata accessor for DragAndDropBridge.SpringLoadedBehavior();
      uint64_t v14 = v2;
      uint64_t v24 = (void *)specialized DragAndDropBridge.SpringLoadedBehavior.__allocating_init(bridge:)((uint64_t)v14, (uint64_t (*)(void, void, void))type metadata accessor for DragAndDropBridge.SpringLoadedBehavior, (uint64_t (*)(uint64_t))specialized DragAndDropBridge.SpringLoadedBehavior.init(bridge:));

      type metadata accessor for DragAndDropBridge.SpringLoadedEffect();
      id v15 = v14;
      id v16 = (void *)specialized DragAndDropBridge.SpringLoadedBehavior.__allocating_init(bridge:)((uint64_t)v15, (uint64_t (*)(void, void, void))type metadata accessor for DragAndDropBridge.SpringLoadedEffect, (uint64_t (*)(uint64_t))specialized DragAndDropBridge.SpringLoadedEffect.init(bridge:));

      uint64_t v17 = swift_allocObject();
      swift_unknownObjectWeakInit();
      id v18 = (void *)swift_allocObject();
      _OWORD v18[2] = v12;
      v18[3] = v13;
      v18[4] = v17;
      id v19 = objc_allocWithZone(MEMORY[0x1E4FB1C50]);
      aBlock[4] = partial apply for closure #1 in DragAndDropBridge.updateSpringLoadedInteraction(_:);
      aBlock[5] = v18;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UISpringLoadedInteraction, @guaranteed UISpringLoadedInteractionContext) -> ();
      aBlock[3] = &block_descriptor_70;
      uint64_t v20 = _Block_copy(aBlock);
      swift_retain();
      id v21 = objc_msgSend(v19, sel_initWithInteractionBehavior_interactionEffect_activationHandler_, v24, v16, v20);

      _Block_release(v20);
      swift_release();
      swift_release();
      char v22 = (void *)MEMORY[0x18C119DF0](&v15[direct field offset for DragAndDropBridge.host]);
      if (v22)
      {
        int v23 = v22;
        objc_msgSend(v22, sel_addInteraction_, v21);

        uint64_t v11 = *(void **)&v2[v7];
        *(void *)&v2[v7] = v21;
        goto LABEL_13;
      }
LABEL_17:
      __break(1u);
      return;
    }
LABEL_14:
    *(_DWORD *)&v2[direct field offset for DragAndDropBridge.canSpringLoadSeed] = v4;
  }
}

void DragAndDropBridge.updateDropInteraction(_:)(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 4);
  if (v2 == -1
    || ((int v3 = *(_DWORD *)(v1 + direct field offset for DragAndDropBridge.canDropSeed), v3 != -1)
      ? (BOOL v4 = v2 == v3)
      : (BOOL v4 = 0),
        !v4))
  {
    uint64_t v5 = direct field offset for DragAndDropBridge.dropInteraction;
    uint64_t v6 = *(void *)(v1 + direct field offset for DragAndDropBridge.dropInteraction);
    if (v6)
    {
      if ((*(unsigned char *)a1 & 1) == 0)
      {
        uint64_t v7 = (void *)MEMORY[0x18C119DF0](v1 + direct field offset for DragAndDropBridge.host);
        if (v7)
        {
          uint64_t v8 = v7;
          objc_msgSend(v7, sel_removeInteraction_, v6);

          id v9 = 0;
LABEL_13:
          uint64_t v12 = *(void **)(v1 + v5);
          *(void *)(v1 + v5) = v9;

          goto LABEL_14;
        }
        __break(1u);
        goto LABEL_17;
      }
    }
    else if (*(unsigned char *)a1)
    {
      id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1738]), sel_initWithDelegate_, v1);
      BOOL v10 = (void *)MEMORY[0x18C119DF0](v1 + direct field offset for DragAndDropBridge.host);
      if (v10)
      {
        uint64_t v11 = v10;
        objc_msgSend(v10, sel_addInteraction_, v9);

        goto LABEL_13;
      }
LABEL_17:
      __break(1u);
      return;
    }
LABEL_14:
    *(_DWORD *)(v1 + direct field offset for DragAndDropBridge.canDropSeed) = v2;
  }
}

void DragAndDropBridge.updateDragInteraction(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int v4 = *(_DWORD *)(a1 + 4);
  int v5 = *(_DWORD *)(a2 + 92);
  uint64_t v6 = direct field offset for DragAndDropBridge.hasDragItemsSeed;
  if (v4 == -1
    || ((int v7 = *(_DWORD *)(v2 + direct field offset for DragAndDropBridge.hasDragItemsSeed), v7 != -1)
      ? (BOOL v8 = v4 == v7)
      : (BOOL v8 = 0),
        !v8))
  {
    uint64_t v9 = direct field offset for DragAndDropBridge.dragInteraction;
    uint64_t v10 = *(void *)(v2 + direct field offset for DragAndDropBridge.dragInteraction);
    if (v10)
    {
      if ((*(unsigned char *)a1 & 1) == 0)
      {
        uint64_t v11 = (void *)MEMORY[0x18C119DF0](v3 + direct field offset for DragAndDropBridge.host);
        if (v11)
        {
          uint64_t v12 = v11;
          objc_msgSend(v11, sel_removeInteraction_, v10);

          id v13 = 0;
LABEL_13:
          id v16 = *(void **)(v3 + v9);
          *(void *)(v3 + v9) = v13;

          goto LABEL_14;
        }
        __break(1u);
        goto LABEL_24;
      }
    }
    else if (*(unsigned char *)a1)
    {
      id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1708]), sel_initWithDelegate_, v3);
      objc_msgSend(v13, sel_setEnabled_, 1);
      uint64_t v14 = (void *)MEMORY[0x18C119DF0](v3 + direct field offset for DragAndDropBridge.host);
      if (v14)
      {
        id v15 = v14;
        objc_msgSend(v14, sel_addInteraction_, v13);

        goto LABEL_13;
      }
LABEL_24:
      __break(1u);
      return;
    }
LABEL_14:
    *(_DWORD *)(v3 + v6) = v4;
  }
  uint64_t v17 = *(void **)(v3 + direct field offset for DragAndDropBridge.dragInteraction);
  if (v17)
  {
    uint64_t v18 = direct field offset for DragAndDropBridge.dragTimingsSeed;
    if (v5 == -1
      || ((int v19 = *(_DWORD *)(v3 + direct field offset for DragAndDropBridge.dragTimingsSeed), v19 != -1)
        ? (BOOL v20 = v5 == v19)
        : (BOOL v20 = 0),
          !v20))
    {
      id v21 = v17;
      DragItemTimings.apply(to:)((UIDragInteraction)v21);

      *(_DWORD *)(v3 + v18) = v5;
    }
  }
}

uint64_t specialized VersionSeedTracker.didChange(_:action:)(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  return specialized VersionSeedTracker.didChange(_:action:)(a1, a2, a3, (uint64_t)&type metadata for AVKitCaptureButtonPreference, (uint64_t)&protocol witness table for AVKitCaptureButtonPreference, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
}

{
  return specialized VersionSeedTracker.didChange(_:action:)(a1, a2, a3, (uint64_t)&type metadata for InteractiveDismissAttemptKey, (uint64_t)&protocol witness table for InteractiveDismissAttemptKey, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:willUpdate:) in conformance ListCollectionViewCellBase<A>()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x158))();
}

void ListCollectionViewCellBase.hostingView<A>(_:willUpdate:)(uint64_t a1, uint64_t a2)
{
}

uint64_t ShareConfigurationBridge.preferencesDidChange(_:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  swift_retain();
  swift_beginAccess();
  specialized VersionSeedTracker.didChange(_:action:)(v2, (_DWORD *)(v1 + 24), (void (*)(uint64_t *))partial apply for implicit closure #2 in implicit closure #1 in ShareConfigurationBridge.preferencesDidChange(_:));
  swift_endAccess();
  return swift_release();
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:didChangePreferences:) in conformance ListCollectionViewCellBase<A>()
{
  return specialized ListCollectionViewCellBase.hostingView<A>(_:didChangePreferences:)();
}

uint64_t specialized ListCollectionViewCellBase.hostingView<A>(_:didChangePreferences:)()
{
  if (one-time initialization token for isEnabledInProcessEnv != -1) {
    uint64_t result = swift_once();
  }
  if ((static ListUsesUIHostingConfigurationFeature.isEnabledInProcessEnv & 1) == 0)
  {
    uint64_t v1 = &v0[direct field offset for ListCollectionViewCellBase.popUpButtonSeed];
    swift_beginAccess();
    PreferenceValues.subscript.getter();
    if (*(_DWORD *)v1 == -1 || v6 == -1 || *(_DWORD *)v1 != v6)
    {
      *(_DWORD *)uint64_t v1 = v6;
      closure #1 in ListCollectionViewCellBase.hostingView<A>(_:didChangePreferences:)((uint64_t)v5, v0);
    }
    _s7SwiftUI16PlatformItemListV0D0VWOhTm_1((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PreferenceValues.Value<WeakBox<UIButton>?>);
    return swift_endAccess();
  }
  return result;
}

uint64_t RootViewDelegate.hostingView<A>(_:didUpdate:)(void *a1, uint64_t *a2)
{
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *a1;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t result = MEMORY[0x18C119DF0](v2 + 24);
  if (result)
  {
    uint64_t v8 = *(void *)(v2 + 32);
    uint64_t ObjectType = swift_getObjectType();
    v10[0] = v5;
    v10[1] = v6;
    (*(void (**)(void *, void *, void, void, uint64_t, uint64_t))(v8 + 24))(a1, v10, *(void *)(v4 + 80), *(void *)(v4 + 88), ObjectType, v8);
    return swift_unknownObjectRelease();
  }
  return result;
}

void closure #1 in ListCollectionViewCellBase.hostingView<A>(_:didChangePreferences:)(uint64_t a1, void *a2)
{
  _s7SwiftUI16PlatformItemListV0D0VWOcTm_1(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>?);
  uint64_t v3 = (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>?;
  if (v5[8])
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = (void *)MEMORY[0x18C119DF0](v5);
    uint64_t v3 = (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>;
  }
  _s7SwiftUI16PlatformItemListV0D0VWOhTm_1((uint64_t)v5, v3);
  objc_msgSend(a2, sel__setPopupMenuButton_, v4);
}

void protocol witness for UIHostingViewDelegate.hostingView<A>(_:didChangePreferences:) in conformance SheetBridge<A, B>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
}

uint64_t $defer #1 <A, B>() in DeprecatedAlertBridge.preferencesDidChange(_:)()
{
  uint64_t v0 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v0);
  uint64_t v2 = (char *)&v4 - v1;
  type metadata accessor for PreferenceValues.Value();
  PreferenceValues.Value.value.getter();
  return DeprecatedAlertBridge.lastPresentation.setter((uint64_t)v2);
}

uint64_t DeprecatedAlertBridge.lastPresentation.setter(uint64_t a1)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x98);
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t destroy for ScrollView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v4 + 48)) {
    swift_release();
  }
  swift_unknownObjectWeakDestroy();
  if (*(void *)(v4 + 80)) {
    swift_release();
  }

  return swift_bridgeObjectRelease();
}

double @objc _UIHostingView.transform.getter@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v3 = a1;
  _UIHostingView.transform.getter(v7);

  double result = *(double *)v7;
  long long v5 = v7[1];
  long long v6 = v7[2];
  *a2 = v7[0];
  a2[1] = v5;
  a2[2] = v6;
  return result;
}

double _UIHostingView.transform.getter@<D0>(_OWORD *a1@<X8>)
{
  v7.id receiver = v1;
  v7.super_class = (Class)type metadata accessor for _UIHostingView();
  objc_msgSendSuper2(&v7, sel_transform);
  double result = *(double *)&v4;
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  return result;
}

uint64_t getEnumTagSinglePayload for PopoverPresentation(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 118)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for ViewAlignedScrollTargetBehavior()
{
  return &type metadata for ViewAlignedScrollTargetBehavior;
}

uint64_t protocol witness for View.body.getter in conformance <> LabeledContent<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return LabeledContent<>.body.getter(a1, *(void *)(a2 - 8), *(void *)(a2 - 16), a3);
}

uint64_t protocol witness for PlatformGroupFactory.makePlatformGroup() in conformance HostingScrollView.PlatformContainer()
{
  return swift_unknownObjectRetain();
}

uint64_t partial apply for closure #1 in UpdateViewDestinationViewModifier.RequestWriter.updateValue()(uint64_t a1)
{
  return closure #1 in UpdateViewDestinationViewModifier.RequestWriter.updateValue()(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), v1 + 48);
}

ValueMetadata *type metadata accessor for ScrollIndicatorVisibility()
{
  return &type metadata for ScrollIndicatorVisibility;
}

ValueMetadata *type metadata accessor for PlatformItemListButtonStyle()
{
  return &type metadata for PlatformItemListButtonStyle;
}

uint64_t base witness table accessor for _AttributeBody in PlatformItemListGenerator<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t ScrollEventStateReader.init(content:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

unsigned char *partial apply for closure #1 in View.transformToolbarRole(_:isEnabled:)(unsigned char *a1)
{
  return closure #1 in View.transformToolbarRole(_:isEnabled:)(a1, *(unsigned char *)(v1 + 16), *(unsigned char *)(v1 + 17));
}

uint64_t getEnumTagSinglePayload for Toolbar.BarLocation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFF1 && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 2147483633);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 14;
  if (v4 >= 0x10) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t initializeWithCopy for ToolbarAppearanceModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_WORD *)(a1 + 56) = *(_WORD *)(a2 + 56);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(a1 + 59) = *(unsigned char *)(a2 + 59);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

ValueMetadata *type metadata accessor for ProgressViewStyleConfiguration.Label()
{
  return &type metadata for ProgressViewStyleConfiguration.Label;
}

ValueMetadata *type metadata accessor for HostingControllerBridges()
{
  return &type metadata for HostingControllerBridges;
}

ValueMetadata *type metadata accessor for ToolbarRole.Role()
{
  return &type metadata for ToolbarRole.Role;
}

uint64_t initializeWithCopy for AccessibilityAdaptiveStack(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 48);
  char v6 = *(unsigned char *)(a2 + 56);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v5, v6);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(v2 + 64);
  LOBYTE(v2) = *(unsigned char *)(v2 + 72);
  outlined copy of Environment<Bool>.Content(v7, v2);
  *(void *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 72) = v2;
  return a1;
}

void partial apply for closure #1 in View.accessibilityAttachment<A>(content:_:)(uint64_t a1@<X8>)
{
  closure #1 in View.accessibilityAttachment<A>(content:_:)(v1[7], v1[8], v1[5], a1);
}

uint64_t protocol witness for _RendererEffect.effectValue(size:) in conformance IgnoreColorInvertEffect@<X0>(uint64_t a1@<X8>)
{
  if (*v1 == 1)
  {
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 2;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 116) = 0u;
    char v4 = 9;
    *(unsigned char *)(result + 132) = 16;
  }
  else
  {
    uint64_t result = 0;
    char v4 = 19;
  }
  *(void *)a1 = result;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = v4;
  return result;
}

ValueMetadata *type metadata accessor for GridItem.Size()
{
  return &type metadata for GridItem.Size;
}

ValueMetadata *type metadata accessor for LabelStyleConfiguration.Title()
{
  return &type metadata for LabelStyleConfiguration.Title;
}

uint64_t SwiftUIGlue.makeDefaultLayoutComputer()()
{
  type metadata accessor for ViewGraph();
  MEMORY[0x18C114EE0]();
  uint64_t v0 = ViewGraph.$defaultLayoutComputer.getter();
  swift_release();

  return MEMORY[0x1F41011B0](v0);
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance EnvironmentValues.AutomaticContentMarginKey(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = a1[2];
  char v5 = *((unsigned char *)a1 + 24);
  uint64_t v6 = a1[4];
  char v7 = *((unsigned char *)a1 + 40);
  uint64_t v8 = a1[6];
  char v9 = *((unsigned char *)a1 + 56);
  uint64_t v10 = *a2;
  char v11 = *((unsigned char *)a2 + 8);
  uint64_t v12 = a2[2];
  char v13 = *((unsigned char *)a2 + 24);
  uint64_t v14 = a2[4];
  char v15 = *((unsigned char *)a2 + 40);
  uint64_t v16 = a2[6];
  char v17 = *((unsigned char *)a2 + 56);
  uint64_t v27 = v2;
  char v28 = v3;
  uint64_t v29 = v4;
  char v30 = v5;
  uint64_t v31 = v6;
  char v32 = v7;
  uint64_t v33 = v8;
  char v34 = v9;
  uint64_t v19 = v10;
  char v20 = v11;
  uint64_t v21 = v12;
  char v22 = v13;
  uint64_t v23 = v14;
  char v24 = v15;
  uint64_t v25 = v16;
  char v26 = v17;
  return MEMORY[0x18C110940](&v27, &v19) & 1;
}

uint64_t DividerStyleConfiguration.orientation.getter()
{
  return *v0;
}

uint64_t partial apply for closure #1 in static AdaptiveStack._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static AdaptiveStack._makeView(view:inputs:)(a1);
}

uint64_t key path getter for EnvironmentValues.hoverEffectState : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.HoverEffectStateKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for AppIntentAction()
{
  return &type metadata for AppIntentAction;
}

uint64_t type metadata accessor for NavigationView()
{
  return __swift_instantiateGenericMetadata();
}

void protocol witness for PlatformDrawable.options.getter in conformance RBDrawingView(uint64_t a1@<X8>)
{
}

unint64_t destroy for BorderedButtonColorSpec.LabelStyle(unint64_t *a1)
{
  unint64_t result = *a1;
  if (result >= 0xFFFFFFFF) {
    return swift_release();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TableHeaderView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 67)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

ValueMetadata *type metadata accessor for IdentityLink()
{
  return &type metadata for IdentityLink;
}

ValueMetadata *type metadata accessor for NavigationState.SelectionSeed()
{
  return &type metadata for NavigationState.SelectionSeed;
}

void closure #1 in UIHostingController.initialDataDrivenPresentationMode(canPop:)(char a1@<W2>, unsigned char *a2@<X8>)
{
  *a2 = a1;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance EnableKeyboardTrackingElement()
{
  return static EnableKeyboardTrackingElement.cachedValue;
}

uint64_t storeEnumTagSinglePayload for NavigationStackViewSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationLinkModifier<A>()
{
  return static NavigationLinkModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance BaseModifier<A>()
{
  return static BaseModifier._makeViewList(modifier:inputs:body:)();
}

ValueMetadata *type metadata accessor for PresentationOptionsPreferenceKey()
{
  return &type metadata for PresentationOptionsPreferenceKey;
}

uint64_t initializeWithCopy for CoordinateSpaceNameModifier(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40))
  {
    long long v3 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v3;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t specialized static IdentityLink._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  return _DynamicPropertyBuffer.append<A>(_:fieldOffset:)();
}

unint64_t lazy protocol witness table accessor for type IdentityLinkBox and conformance IdentityLinkBox()
{
  unint64_t result = lazy protocol witness table cache variable for type IdentityLinkBox and conformance IdentityLinkBox;
  if (!lazy protocol witness table cache variable for type IdentityLinkBox and conformance IdentityLinkBox)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IdentityLinkBox and conformance IdentityLinkBox);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AccessibilityPlatformItemTransform(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for UpdateViewFocusItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for UpdateViewFocusItem(a1, a2, a3, MEMORY[0x1E4FBC940]);
}

uint64_t storeEnumTagSinglePayload for HandGestureShortcutInteractiveControl.BorderShape(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior()
{
  lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior();
  PropertyList.subscript.getter();
  return v1;
}

unint64_t lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
  }
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ButtonRepeatBehavior.HasCustomRepeatBehavior()
{
  lazy protocol witness table accessor for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior();
  PropertyList.subscript.getter();
  return v1;
}

unint64_t lazy protocol witness table accessor for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior;
  if (!lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior;
  if (!lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior;
  if (!lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior;
  if (!lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior;
  if (!lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
  }
  return result;
}

uint64_t protocol witness for static RemovableAttribute.didReinsert(attribute:) in conformance Transform<A>()
{
  return static Transform.didReinsert(attribute:)();
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance RelationshipModifier<A>@<D0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr, double)@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  return static RelationshipModifier._makeView(modifier:inputs:body:)(a1, a2, a3, *(void *)(a4 + 16), *(void *)(a4 + 24), a5);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance UpdateViewDestinationViewModifier<A>@<D0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  return static UpdateViewDestinationViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3);
}

void protocol witness for static Shape.role.getter in conformance DividerShape<A>(unsigned char *a1@<X8>)
{
}

_UNKNOWN **base witness table accessor for ViewModifier in _AllowsHitTestingModifier()
{
  return &protocol witness table for _AllowsHitTestingModifier;
}

uint64_t storeEnumTagSinglePayload for AnyShareConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 104) = 0;
    }
    if (a2) {
      *(void *)(result + 64) = a2;
    }
  }
  return result;
}

void closure #1 in static ScrollViewCommitMutation.commit(layoutState:phaseState:containerSize:isPreferred:transaction:)(char a1, uint64_t a2)
{
  if (a1)
  {
    swift_beginAccess();
    if (MEMORY[0x18C119DF0](a2 + 200))
    {
      uint64_t v3 = *(void *)(a2 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, double))(v3 + 32))(ObjectType, v3, 0.0);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    GraphHost.flushTransactions()();
  }
}

void DisplayLink.displayLinkTimer(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = swift_getObjectType();
  static Update.lock()();
  uint64_t v5 = OBJC_IVAR____TtC7SwiftUI11DisplayLink_currentThread;
  int v6 = v1[OBJC_IVAR____TtC7SwiftUI11DisplayLink_currentThread];
  uint64_t v7 = OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread;
  int v8 = v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread];
  if (v6 == v8)
  {
    if (*(void *)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link])
    {
      objc_msgSend(a1, sel_timestamp);
      double v10 = v9;
      objc_msgSend(a1, sel_targetTimestamp);
      uint64_t v12 = v11;
      uint64_t v13 = OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate;
      double v14 = *(double *)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate];
      if (v14 + -0.00416666667 < v10)
      {
        char v15 = a1;
        uint64_t v16 = (double *)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_currentUpdate];
        *uint64_t v16 = v10;
        *((unsigned char *)v16 + 8) = 0;
        static Time.infinity.getter();
        *(void *)&v2[v13] = v59;
        if (swift_weakLoadStrong())
        {
          uint64_t v58 = v12;
          *(double *)&long long v59 = v10;
          UIHostingViewBase.displayLinkTimer(timestamp:targetTimestamp:isAsyncThread:)((uint64_t *)&v59, (double *)&v58, v2[v5]);
          swift_release();
        }
        *uint64_t v16 = 0.0;
        *((unsigned char *)v16 + 8) = 1;
        double v14 = *(double *)&v2[v13];
        a1 = v15;
      }
      static Time.infinity.getter();
      if (v14 == *(double *)&v59)
      {
        if ((v2[v7] & 1) == 0)
        {
          if ((v2[v5] & 1) == 0) {
            goto LABEL_37;
          }
          char v17 = *(void **)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link];
          if (!v17) {
            goto LABEL_37;
          }
          uint64_t v54 = (void **)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link];
          goto LABEL_18;
        }
        v2[v7] = 0;
        *(double *)&v2[v13] = v10;
      }
    }
    int v8 = v2[v7];
    if (v8 == v2[v5]) {
      goto LABEL_37;
    }
  }
  char v17 = *(void **)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link];
  if (!v17) {
    goto LABEL_37;
  }
  uint64_t v54 = (void **)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link];
  if (!v8)
  {
LABEL_18:
    id v20 = v17;
LABEL_19:
    int v21 = v2[v7];
    if (v21 != v2[v5])
    {
      if ((v21 & 1) == 0) {
        goto LABEL_33;
      }
      uint64_t v57 = v7;
      if (static DisplayLink.asyncRunloop)
      {
        char v22 = v20;
        id v23 = (id)static DisplayLink.asyncRunloop;
        LODWORD(v56) = 1;
        goto LABEL_34;
      }
      goto LABEL_44;
    }
    goto LABEL_36;
  }
  uint64_t v53 = a1;
  uint64_t v18 = &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>;
  static DisplayLink.asyncPending = 1;
  uint64_t v19 = static DisplayLink.asyncRunloop;
  id v20 = v17;
  if (v19)
  {
    a1 = v53;
    goto LABEL_19;
  }
  id v52 = v20;
  unint64_t v56 = 0x8000000188337070;
  uint64_t v57 = v7;
  char v24 = &unk_1E9008000;
  uint64_t v55 = ObjectType;
  while (static DisplayLink.asyncThread)
  {
LABEL_24:
    static Update.wait()();
    v18[1656] = 1;
    if (v24[247])
    {
      id v20 = v52;
      a1 = v53;
      goto LABEL_19;
    }
  }
  long long v59 = 0u;
  long long v60 = 0u;
  uint64_t v58 = ObjectType;
  type metadata accessor for DisplayLink.Type();
  uint64_t v25 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
  uint64_t v26 = *((void *)&v60 + 1);
  if (*((void *)&v60 + 1))
  {
    uint64_t v27 = __swift_project_boxed_opaque_existential_1(&v59, *((uint64_t *)&v60 + 1));
    uint64_t v28 = *(void *)(v26 - 8);
    double v29 = MEMORY[0x1F4188790](v27);
    uint64_t v31 = v18;
    uint64_t v32 = v5;
    uint64_t v33 = (char *)&v51 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v28 + 16))(v33, v29);
    uint64_t v34 = _bridgeAnythingToObjectiveC<A>(_:)();
    int v35 = v33;
    uint64_t v5 = v32;
    uint64_t v18 = v31;
    (*(void (**)(char *, uint64_t))(v28 + 8))(v35, v26);
    uint64_t v7 = v57;
    char v24 = (void *)&unk_1E9008000;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
  }
  else
  {
    uint64_t v34 = 0;
  }
  id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F29060]), sel_initWithTarget_selector_object_, v25, sel_asyncThreadWithArg_, v34);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  objc_msgSend(v36, sel_setQualityOfService_, 33);
  int v37 = (void *)MEMORY[0x18C115780](0xD00000000000001FLL, v56);
  objc_msgSend(v36, sel_setName_, v37);

  if (_NSThreadStart(v36))
  {
    id v38 = (void *)static DisplayLink.asyncThread;
    static DisplayLink.asyncThread = (uint64_t)v36;

    uint64_t ObjectType = v55;
    goto LABEL_24;
  }

  v2[v7] = 0;
  id v20 = v52;
  a1 = v53;
  if ((v2[v5] & 1) == 0)
  {
LABEL_36:

LABEL_37:
    if (*(void *)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link])
    {
      double v50 = *(double *)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate];
      static Time.infinity.getter();
      if (v50 == *(double *)&v59 && v2[v7] == v2[v5]) {
        objc_msgSend(a1, sel_setPaused_, 1);
      }
    }
    else
    {
      objc_msgSend(a1, sel_invalidate);
    }
    static Update.unlock()();
    return;
  }
LABEL_33:
  char v22 = v20;
  uint64_t v57 = v7;
  id v23 = objc_msgSend(self, sel_mainRunLoop);
  LODWORD(v56) = 0;
LABEL_34:
  id v39 = objc_msgSend(self, sel_currentRunLoop);
  uint64_t v40 = *MEMORY[0x1E4F1C4B0];
  objc_msgSend(v22, sel_removeFromRunLoop_forMode_, v39, *MEMORY[0x1E4F1C4B0]);

  id v41 = objc_msgSend(v22, sel_display);
  id v42 = self;
  id v43 = v2;
  id v44 = objc_msgSend(v42, sel_displayLinkWithDisplay_target_selector_, v41, v43, sel_displayLinkTimer_);

  if (v44)
  {
    objc_msgSend(v44, sel_addToRunLoop_forMode_, v23, v40);
    id v45 = *v54;
    *uint64_t v54 = v44;
    id v46 = v44;

    Swift::Double v47 = *(double *)&v43[OBJC_IVAR____TtC7SwiftUI11DisplayLink_interval];
    uint64_t v48 = OBJC_IVAR____TtC7SwiftUI11DisplayLink_reasons;
    uint64_t v49 = *(void *)&v43[OBJC_IVAR____TtC7SwiftUI11DisplayLink_reasons];
    *(void *)&v43[OBJC_IVAR____TtC7SwiftUI11DisplayLink_interval] = 0;
    *(void *)&v43[v48] = MEMORY[0x1E4FBC870];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    DisplayLink.setFrameInterval(_:reasons:)(v49, v47);
    swift_bridgeObjectRelease();

    v2[v5] = v56;
    uint64_t v7 = v57;
    goto LABEL_37;
  }
  __break(1u);
LABEL_44:
  __break(1u);
}

Swift::Void __swiftcall UIHostingViewBase.startDisplayLink(delay:)(Swift::Double delay)
{
  uint64_t v2 = v1;
  uint64_t v4 = MEMORY[0x18C119DF0](v1 + 16);
  if (v4)
  {
    id v17 = (id)v4;
    uint64_t v5 = *(void **)(v1 + 176);
    if (v5) {
      goto LABEL_7;
    }
    if (UIHostingViewBase.updatesWillBeVisible.getter())
    {
      id v6 = objc_msgSend(v17, sel_window);
      if (v6)
      {
        uint64_t v7 = v6;
        objc_allocWithZone((Class)type metadata accessor for DisplayLink());
        uint64_t v8 = swift_retain();
        DisplayLink.init(host:window:)(v8, v7);
        double v9 = *(void **)(v2 + 176);
        *(void *)(v2 + 176) = v10;
      }
    }
    uint64_t v5 = *(void **)(v2 + 176);
    if (v5)
    {
LABEL_7:
      uint64_t v11 = *(void *)(v2 + 64);
      swift_beginAccess();
      double v12 = *(double *)(v11 + 384);
      id v13 = v5;
      if ((~*(void *)&v12 & 0x7FF0000000000000) == 0) {
        double v12 = 0.0;
      }
      uint64_t v14 = swift_bridgeObjectRetain();
      DisplayLink.setNextUpdate(delay:interval:reasons:)(v14, delay, v12);
      swift_bridgeObjectRelease();
      if (objc_msgSend(self, sel_isMainThread))
      {
        char v15 = *(void **)(v2 + 208);
        if (v15)
        {
          objc_msgSend(v15, sel_invalidate);
          uint64_t v16 = *(void **)(v2 + 208);
        }
        else
        {
          uint64_t v16 = 0;
        }
        *(void *)(v2 + 208) = 0;

        *(void *)(v2 + 192) = 0;
        *(unsigned char *)(v2 + 200) = 1;
      }
    }
    else
    {
      UIHostingViewBase.startUpdateTimer(delay:)(delay);
    }
  }
}

uint64_t DisplayLink.setFrameInterval(_:reasons:)(uint64_t a1, Swift::Double a2)
{
  if (*(double *)(v2 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_interval) != a2)
  {
    *(Swift::Double *)(v2 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_interval) = a2;
    CAFrameRateRange v8 = CAFrameRateRange.init(interval:)(a2);
    uint64_t v4 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_link);
    if (v4) {
      objc_msgSend(v4, sel_setPreferredFrameRateRange_, *(double *)&v8.minimum, *(double *)&v8.maximum, *(double *)&v8.preferred);
    }
  }
  uint64_t v5 = OBJC_IVAR____TtC7SwiftUI11DisplayLink_reasons;
  uint64_t result = specialized static Set.== infix(_:_:)(*(void *)(v2 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_reasons), a1);
  if ((result & 1) == 0)
  {
    *(void *)(v2 + v5) = a1;
    swift_bridgeObjectRetain();
    uint64_t v7 = swift_bridgeObjectRelease();
    MEMORY[0x1F4188790](v7);
    return AGTupleWithBuffer();
  }
  return result;
}

uint64_t specialized static Set.== infix(_:_:)(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 56;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(result + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      return result;
    }
    if (v13 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 1;
    if (v13 + 1 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 2;
    if (v13 + 2 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 3;
    if (v13 + 3 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v15 = v13 + 4;
    if (v15 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v4 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_34;
        }
        if (v4 >= v9) {
          return 1;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        ++v15;
        if (v14) {
          goto LABEL_24;
        }
      }
    }
    int64_t v4 = v15;
LABEL_24:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    unsigned int v16 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v12);
    uint64_t result = MEMORY[0x18C118330](*(void *)(a2 + 40), v16, 4);
    uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v18 = result & ~v17;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    uint64_t v19 = *(void *)(a2 + 48);
  }
  while (*(_DWORD *)(v19 + 4 * v18) == v16);
  uint64_t v20 = ~v17;
  while (1)
  {
    unint64_t v18 = (v18 + 1) & v20;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    if (*(_DWORD *)(v19 + 4 * v18) == v16) {
      goto LABEL_7;
    }
  }
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  Swift::Int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  unsigned char v24[40];
  unsigned char v25[24];
  uint64_t v26;
  long long v27;
  long long v28;
  uint64_t v29;
  unsigned char v30[40];
  unsigned char v31[40];
  unsigned char v32[48];

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(result + 56);
  uint64_t v20 = result + 56;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & v5;
  int v21 = (unint64_t)(v6 + 63) >> 6;
  int64_t v9 = a2 + 56;
  if ((v7 & v5) != 0) {
    goto LABEL_7;
  }
LABEL_8:
  unint64_t v12 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_53;
  }
  if (v12 >= v21) {
    return 1;
  }
  int64_t v13 = *(void *)(v20 + 8 * v12);
  ++v4;
  if (v13) {
    goto LABEL_23;
  }
  int64_t v4 = v12 + 1;
  if (v12 + 1 >= v21) {
    return 1;
  }
  int64_t v13 = *(void *)(v20 + 8 * v4);
  if (v13) {
    goto LABEL_23;
  }
  int64_t v4 = v12 + 2;
  if (v12 + 2 >= v21) {
    return 1;
  }
  int64_t v13 = *(void *)(v20 + 8 * v4);
  if (v13) {
    goto LABEL_23;
  }
  int64_t v4 = v12 + 3;
  if (v12 + 3 >= v21) {
    return 1;
  }
  int64_t v13 = *(void *)(v20 + 8 * v4);
  if (v13) {
    goto LABEL_23;
  }
  unint64_t v14 = v12 + 4;
  if (v14 >= v21) {
    return 1;
  }
  int64_t v13 = *(void *)(v20 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
LABEL_23:
    unint64_t v8 = (v13 - 1) & v13;
    unint64_t v11 = __clz(__rbit64(v13)) + (v4 << 6);
    while (1)
    {
      outlined init with copy of ToolbarPlacement.Role(*(void *)(v3 + 48) + 40 * v11, (uint64_t)v32);
      outlined init with take of ToolbarPlacement.Role((uint64_t)v32, (uint64_t)v31);
      Hasher.init(_seed:)();
      ToolbarPlacement.Role.hash(into:)();
      int64_t v15 = Hasher._finalize()();
      unsigned int v16 = -1 << *(unsigned char *)(a2 + 32);
      uint64_t v17 = v15 & ~v16;
      if (((*(void *)(v9 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
        break;
      }
      unint64_t v18 = ~v16;
      while (2)
      {
        outlined init with copy of ToolbarPlacement.Role(*(void *)(a2 + 48) + 40 * v17, (uint64_t)v30);
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v30, (uint64_t)v25);
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v31, (uint64_t)&v27);
        switch(v26)
        {
          case 0:
            if (*((void *)&v28 + 1)) {
              goto LABEL_42;
            }
            goto LABEL_47;
          case 1:
            if (*((void *)&v28 + 1) == 1) {
              goto LABEL_47;
            }
            goto LABEL_42;
          case 2:
            if (*((void *)&v28 + 1) == 2) {
              goto LABEL_47;
            }
            goto LABEL_42;
          case 3:
            if (*((void *)&v28 + 1) == 3) {
              goto LABEL_47;
            }
            goto LABEL_42;
          case 4:
            if (*((void *)&v28 + 1) == 4) {
              goto LABEL_47;
            }
            goto LABEL_42;
          case 5:
            if (*((void *)&v28 + 1) == 5) {
              goto LABEL_47;
            }
            goto LABEL_42;
          case 6:
            if (*((void *)&v28 + 1) != 6) {
              goto LABEL_42;
            }
            goto LABEL_47;
          default:
            outlined init with copy of ToolbarPlacement.Role((uint64_t)v25, (uint64_t)v24);
            if (*((void *)&v28 + 1) < 7uLL)
            {
              outlined destroy of AnyHashable((uint64_t)v24);
LABEL_42:
              outlined destroy of Logger?((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role));
              goto LABEL_43;
            }
            v22[0] = v27;
            v22[1] = v28;
            id v23 = v29;
            uint64_t v19 = MEMORY[0x18C1174E0](v24, v22);
            outlined destroy of AnyHashable((uint64_t)v22);
            outlined destroy of AnyHashable((uint64_t)v24);
            if ((v19 & 1) == 0)
            {
              outlined destroy of ToolbarPlacement.Role((uint64_t)v25);
LABEL_43:
              outlined destroy of ToolbarPlacement.Role((uint64_t)v30);
              uint64_t v17 = (v17 + 1) & v18;
              if (((*(void *)(v9 + ((v17 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v17) & 1) == 0) {
                goto LABEL_50;
              }
              continue;
            }
LABEL_47:
            outlined destroy of ToolbarPlacement.Role((uint64_t)v25);
            outlined destroy of ToolbarPlacement.Role((uint64_t)v30);
            uint64_t result = outlined destroy of ToolbarPlacement.Role((uint64_t)v31);
            if (!v8) {
              goto LABEL_8;
            }
LABEL_7:
            uint64_t v10 = __clz(__rbit64(v8));
            v8 &= v8 - 1;
            unint64_t v11 = v10 | (v4 << 6);
            break;
        }
        break;
      }
    }
LABEL_50:
    outlined destroy of ToolbarPlacement.Role((uint64_t)v31);
    return 0;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v21) {
      return 1;
    }
    int64_t v13 = *(void *)(v20 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_23;
    }
  }
LABEL_53:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (result == a2) {
    return 1;
  }
  uint64_t v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  uint64_t v5 = result + 56;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(result + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      return result;
    }
    if (v13 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 1;
    if (v13 + 1 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 2;
    if (v13 + 2 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 3;
    if (v13 + 3 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v15 = v13 + 4;
    if (v15 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v4 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_34;
        }
        if (v4 >= v9) {
          return 1;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        ++v15;
        if (v14) {
          goto LABEL_24;
        }
      }
    }
    int64_t v4 = v15;
LABEL_24:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    unsigned int v16 = *(void *)(*(void *)(v3 + 48) + 8 * v12);
    uint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v18 = result & ~v17;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    uint64_t v19 = *(void *)(a2 + 48);
  }
  while (*(void *)(v19 + 8 * v18) == v16);
  uint64_t v20 = ~v17;
  while (1)
  {
    unint64_t v18 = (v18 + 1) & v20;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    if (*(void *)(v19 + 8 * v18) == v16) {
      goto LABEL_7;
    }
  }
}

{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;

  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v3 = 0;
  uint64_t v32 = result + 56;
  int64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  uint64_t v6 = v5 & *(void *)(result + 56);
  uint64_t v33 = (unint64_t)(v4 + 63) >> 6;
  int v35 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      uint64_t v7 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      uint64_t v34 = v3;
      unint64_t v8 = v7 | (v3 << 6);
      goto LABEL_25;
    }
    int64_t v9 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_44;
    }
    if (v9 >= v33) {
      return 1;
    }
    uint64_t v10 = *(void *)(v32 + 8 * v9);
    unint64_t v11 = v3 + 1;
    if (!v10)
    {
      unint64_t v11 = v3 + 2;
      if (v3 + 2 >= v33) {
        return 1;
      }
      uint64_t v10 = *(void *)(v32 + 8 * v11);
      if (!v10)
      {
        unint64_t v11 = v3 + 3;
        if (v3 + 3 >= v33) {
          return 1;
        }
        uint64_t v10 = *(void *)(v32 + 8 * v11);
        if (!v10) {
          break;
        }
      }
    }
LABEL_24:
    uint64_t v6 = (v10 - 1) & v10;
    uint64_t v34 = v11;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_25:
    int64_t v13 = result;
    unint64_t v14 = *(void **)(*(void *)(result + 48) + 8 * v8);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    int64_t v15 = v14;
    String.hash(into:)();
    unsigned int v16 = Hasher._finalize()();
    swift_bridgeObjectRelease();
    uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v18 = v16 & ~v17;
    if (((*(void *)(v35 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      goto LABEL_40;
    }
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    int v21 = v20;
    if (v19 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v21 == v22)
    {
LABEL_7:
      swift_bridgeObjectRelease_n();
    }
    else
    {
      char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v24 & 1) == 0)
      {
        uint64_t v25 = ~v17;
        while (1)
        {
          unint64_t v18 = (v18 + 1) & v25;
          if (((*(void *)(v35 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
            break;
          }
          uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v28 = v27;
          if (v26 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v28 == v29) {
            goto LABEL_7;
          }
          uint64_t v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v31) {
            goto LABEL_8;
          }
        }
LABEL_40:

        return 0;
      }
    }
LABEL_8:

    uint64_t result = v13;
    uint64_t v3 = v34;
  }
  unint64_t v12 = v3 + 4;
  if (v3 + 4 >= v33) {
    return 1;
  }
  uint64_t v10 = *(void *)(v32 + 8 * v12);
  if (v10)
  {
    unint64_t v11 = v3 + 4;
    goto LABEL_24;
  }
  while (1)
  {
    unint64_t v11 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v11 >= v33) {
      return 1;
    }
    uint64_t v10 = *(void *)(v32 + 8 * v11);
    ++v12;
    if (v10) {
      goto LABEL_24;
    }
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t DisplayLink.setNextUpdate(delay:interval:reasons:)(uint64_t a1, double a2, Swift::Double a3)
{
  double v7 = 0.0;
  if (a2 >= 0.001)
  {
    if (*(unsigned char *)(v3 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_currentUpdate + 8)) {
      double v8 = CACurrentMediaTime();
    }
    else {
      double v8 = *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_currentUpdate);
    }
    double v7 = v8 + a2;
  }
  if (v7 < *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate))
  {
    *(double *)(v3 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate) = v7;
    int64_t v9 = *(void **)(v3 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_link);
    if (v9) {
      objc_msgSend(v9, sel_setPaused_, 0);
    }
  }

  return DisplayLink.setFrameInterval(_:reasons:)(a1, a3);
}

void UIHostingViewBase.displayLinkTimer(timestamp:targetTimestamp:isAsyncThread:)(uint64_t *a1, double *a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = *a1;
  double v7 = *a2;
  if (!MEMORY[0x18C119DF0](v4 + 24)) {
    return;
  }
  uint64_t v8 = *(void *)(v4 + 32);
  if (objc_msgSend(self, sel_isMainThread))
  {
    int64_t v9 = *(void **)(v4 + 208);
    if (v9)
    {
      objc_msgSend(v9, sel_invalidate);
      uint64_t v10 = *(void **)(v4 + 208);
    }
    else
    {
      uint64_t v10 = 0;
    }
    *(void *)(v4 + 208) = 0;

    *(void *)(v4 + 192) = 0;
    *(unsigned char *)(v4 + 200) = 1;
  }
  *(void *)(v4 + 184) = v6;
  UIAnimationDragCoefficient();
  uint64_t ObjectType = swift_getObjectType();
  if ((a3 & 1) == 0)
  {
    ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
    int64_t v13 = *(char **)(v4 + 176);
    if (v13)
    {
      double v14 = *(double *)&v13[OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextUpdate];
      unint64_t v18 = v13;
      static Time.infinity.getter();
      if (v14 < v7 && (ViewGraph.updateRequiredMainThread.getter() & 1) == 0)
      {
        static Semantics.v3.getter();
        char v17 = isLinkedOnOrAfter(_:)();
        swift_unknownObjectRelease();
        if (v17) {
          v18[OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread] = 1;
        }

        return;
      }
    }
LABEL_16:
    swift_unknownObjectRelease();
    return;
  }
  ViewRendererHost.renderAsync(interval:targetTimestamp:)();
  if (v20)
  {
    uint64_t v12 = *(void *)(v4 + 176);
    if (v12) {
      *(unsigned char *)(v12 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread) = 0;
    }
    (*(void (**)(uint64_t, double))(*(void *)(v8 + 8) + 32))(ObjectType, 0.0);
    goto LABEL_16;
  }
  if ((~*(void *)&v19 & 0x7FF0000000000000) != 0) {
    (*(void (**)(uint64_t, double))(*(void *)(v8 + 8) + 32))(ObjectType, fmax(v19 - *(double *)(v4 + 88), 0.000001));
  }
  char v15 = ViewGraph.updateRequiredMainThread.getter();
  swift_unknownObjectRelease();
  if (v15)
  {
    uint64_t v16 = *(void *)(v4 + 176);
    if (v16) {
      *(unsigned char *)(v16 + OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread) = 0;
    }
  }
}

uint64_t type metadata accessor for DisplayLink()
{
  return self;
}

void DisplayLink.init(host:window:)(uint64_t a1, void *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_weakInit();
  *(void *)&v2[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link] = 0;
  uint64_t v5 = v2;
  static Time.infinity.getter();
  uint64_t v6 = &v5[OBJC_IVAR____TtC7SwiftUI11DisplayLink_currentUpdate];
  *(void *)uint64_t v6 = 0;
  v6[8] = 1;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI11DisplayLink_interval] = 0;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUI11DisplayLink_reasons] = MEMORY[0x1E4FBC870];
  v5[OBJC_IVAR____TtC7SwiftUI11DisplayLink_currentThread] = 0;
  v5[OBJC_IVAR____TtC7SwiftUI11DisplayLink_nextThread] = 0;

  v17.id receiver = v5;
  v17.super_class = ObjectType;
  id v7 = objc_msgSendSuper2(&v17, sel_init);
  swift_weakAssign();
  uint64_t v8 = (char *)v7;
  id v9 = objc_msgSend(a2, sel_screen);
  id v10 = objc_msgSend(v9, sel_displayLinkWithTarget_selector_, v8, sel_displayLinkTimer_);

  uint64_t v11 = OBJC_IVAR____TtC7SwiftUI11DisplayLink_link;
  uint64_t v12 = *(void **)&v8[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link];
  *(void *)&v8[OBJC_IVAR____TtC7SwiftUI11DisplayLink_link] = v10;

  int64_t v13 = *(void **)&v8[v11];
  if (v13)
  {
    double v14 = self;
    id v15 = v13;
    id v16 = objc_msgSend(v14, sel_mainRunLoop);
    objc_msgSend(v15, sel_addToRunLoop_forMode_, v16, *MEMORY[0x1E4F1C4B0]);

    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t _NSThreadStart(void *a1)
{
  id v1 = a1;
  if (objc_opt_respondsToSelector())
  {
    uint64_t v2 = [v1 startAndReturnError:0];
  }
  else
  {
    [v1 start];
    uint64_t v2 = 1;
  }

  return v2;
}

unint64_t type metadata accessor for DisplayLink.Type()
{
  unint64_t result = lazy cache variable for type metadata for DisplayLink.Type;
  if (!lazy cache variable for type metadata for DisplayLink.Type)
  {
    type metadata accessor for DisplayLink();
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for DisplayLink.Type);
  }
  return result;
}

id @objc PlatformViewHost.__deallocating_deinit(void *a1)
{
  id v1 = a1;
  return FileWrapperPlatformDocument.__deallocating_deinit();
}

id FileWrapperPlatformDocument.__deallocating_deinit()
{
  v2.id receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t key path setter for EnvironmentValues.triggerSubmission : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  outlined copy of AppIntentExecutor?(*a1);
  specialized EnvironmentValues.subscript.setter(v1);

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

double SwitchToggleStyle.makeBody(configuration:)@<D0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = a1[2];
  long long v5 = a1[4];
  long long v6 = a1[5];
  long long v42 = a1[3];
  long long v43 = v5;
  long long v7 = a1[1];
  long long v39 = *a1;
  long long v40 = v7;
  long long v41 = v4;
  long long v8 = v2[2];
  long long v9 = v2[3];
  long long v10 = *v2;
  v45[1] = v2[1];
  v45[2] = v8;
  v45[3] = v9;
  uint64_t v46 = *((void *)v2 + 8);
  long long v44 = v6;
  v45[0] = v10;
  closure #1 in SwitchToggleStyle.makeBody(configuration:)((uint64_t *)&v39, (uint64_t)v45, (uint64_t)&v29);
  uint64_t v11 = v30;
  char v12 = BYTE8(v30);
  long long v27 = v31;
  uint64_t v13 = v32;
  char v14 = v33;
  char v15 = v34;
  char v16 = v35;
  char v26 = v36;
  uint64_t v24 = v38;
  uint64_t v25 = v37;
  uint64_t v28 = v29;
  objc_super v17 = (_OWORD *)swift_allocObject();
  long long v18 = v42;
  long long v19 = v43;
  v17[3] = v41;
  v17[4] = v18;
  long long v20 = v44;
  v17[5] = v19;
  v17[6] = v20;
  long long v21 = v40;
  v17[1] = v39;
  void v17[2] = v21;
  outlined retain of ToggleStyleConfiguration(&v39);
  lazy protocol witness table accessor for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture();
  Gesture.onEnded(_:)();
  swift_release();
  uint64_t v22 = v29;
  *(void *)a2 = v28;
  *(void *)(a2 + 8) = v11;
  *(unsigned char *)(a2 + 16) = v12;
  *(_OWORD *)(a2 + 24) = v27;
  *(void *)(a2 + 40) = v13;
  *(unsigned char *)(a2 + 48) = v14;
  *(unsigned char *)(a2 + 49) = v15;
  *(unsigned char *)(a2 + 50) = v16;
  *(unsigned char *)(a2 + 51) = v26;
  *(void *)(a2 + 56) = v25;
  *(void *)(a2 + 64) = v24;
  *(unsigned char *)(a2 + 72) = 2;
  *(void *)(a2 + 80) = v22;
  double result = *(double *)&v30;
  *(_OWORD *)(a2 + 88) = v30;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  *(_DWORD *)(a2 + 120) = 3;
  return result;
}

__n128 closure #1 in SwitchToggleStyle.makeBody(configuration:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  char v7 = *((unsigned char *)a1 + 16);
  uint64_t v8 = *(void *)(a2 + 64);
  if (v8)
  {
    swift_retain();
    swift_retain();
    outlined retain of SwitchToggleStyle(a2);
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v10 = *(void *)(a2 + 16);
    uint64_t v11 = *(unsigned __int8 *)(a2 + 24);
    swift_retain();
    swift_retain();
    outlined retain of SwitchToggleStyle(a2);
    outlined copy of Environment<Color?>.Content(v10, v11);
    uint64_t v9 = specialized Environment.wrappedValue.getter(v10, v11);
    outlined consume of Environment<Color?>.Content(v10, v11);
  }
  uint64_t v12 = *(void *)(a2 + 32);
  char v13 = *(unsigned char *)(a2 + 40);
  swift_retain();
  outlined copy of ResolvedTableRowIDs.Storage(v12, v13);
  uint64_t v14 = specialized Environment.wrappedValue.getter(v12, v13);
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v12, v13);
  outlined release of SwitchToggleStyle(a2);
  static TintPlacement.switchThumb.getter();
  if (*(void *)(v14 + 16) && (uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(), (v16 & 1) != 0))
  {
    uint64_t v17 = *(void *)(*(void *)(v14 + 56) + 8 * v15);
    swift_retain();
  }
  else
  {
    uint64_t v17 = 0;
  }
  swift_bridgeObjectRelease();
  char v18 = *(unsigned char *)(a2 + 56);
  outlined retain of SwitchToggleStyle(a2);
  uint64_t v19 = swift_retain();
  uint64_t v20 = specialized Environment.wrappedValue.getter(v19, v18);
  swift_release();
  outlined release of SwitchToggleStyle(a2);
  uint64_t v44 = v5;
  uint64_t v45 = v6;
  char v46 = v7;
  uint64_t v47 = v9;
  uint64_t v48 = v17;
  uint64_t v49 = v20;
  int v50 = 65793;
  uint64_t v21 = qword_1ED4251A0;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  specialized View.accessibility<A>(_:_:isEnabled:)(v21, v21, 1, (uint64_t)v34);
  swift_release();
  swift_release();
  swift_release();
  swift_release_n();
  swift_release_n();
  uint64_t v22 = v34[0];
  uint64_t v23 = v34[1];
  char v24 = v35;
  __n128 v33 = v36;
  uint64_t v25 = v37;
  char v26 = v38;
  char v27 = v39;
  char v31 = v41;
  char v32 = v40;
  uint64_t v29 = v43;
  uint64_t v30 = v42;
  swift_release();
  swift_release();
  swift_release();
  *(void *)a3 = v22;
  *(void *)(a3 + 8) = v23;
  *(unsigned char *)(a3 + 16) = v24;
  __n128 result = v33;
  *(__n128 *)(a3 + 24) = v33;
  *(void *)(a3 + 40) = v25;
  *(unsigned char *)(a3 + 48) = v26;
  *(unsigned char *)(a3 + 49) = v27;
  *(unsigned char *)(a3 + 50) = v32;
  *(unsigned char *)(a3 + 51) = v31;
  *(void *)(a3 + 56) = v30;
  *(void *)(a3 + 64) = v29;
  return result;
}

uint64_t outlined release of SwitchToggleStyle(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  outlined consume of Environment<Bool?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined consume of Environment<Color?>.Content(v2, v3);
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v4, v5);
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined retain of SwitchToggleStyle(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = *(unsigned char *)(a1 + 40);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  outlined copy of Environment<Color?>.Content(v2, v3);
  outlined copy of ResolvedTableRowIDs.Storage(v4, v5);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for SwitchToggleStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(*a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  unsigned __int8 v7 = *((unsigned char *)a2 + 24);
  outlined copy of Environment<Color?>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  uint64_t v8 = a2[4];
  char v9 = *((unsigned char *)a2 + 40);
  outlined copy of ResolvedTableRowIDs.Storage(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  char v10 = *((unsigned char *)a2 + 56);
  *(void *)(a1 + 48) = a2[6];
  *(unsigned char *)(a1 + 56) = v10;
  *(void *)(a1 + 64) = a2[8];
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ButtonRepeatModifier(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = v2[1];
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 16) = *((_WORD *)v2 + 8);
  uint64_t v4 = v2[4];
  *(void *)(a1 + 24) = v2[3];
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  unsigned __int8 v5 = (void *)v2[5];
  uint64_t v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v5;
  id v7 = v5;

  *(unsigned char *)(a1 + 48) = *((unsigned char *)v2 + 48);
  *(void *)(a1 + 56) = v2[7];
  swift_retain();
  swift_release();
  uint64_t v8 = v2[8];
  LOBYTE(v2) = *((unsigned char *)v2 + 72);
  outlined copy of ResolvedTableRowIDs.Storage(v8, (char)v2);
  uint64_t v9 = *(void *)(a1 + 64);
  char v10 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = v8;
  *(unsigned char *)(a1 + 72) = (_BYTE)v2;
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v9, v10);
  return a1;
}

uint64_t initializeWithCopy for ButtonRepeatModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  unsigned __int8 v5 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  char v7 = *(unsigned char *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  id v8 = v5;
  swift_retain();
  outlined copy of ResolvedTableRowIDs.Storage(v6, v7);
  *(void *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 72) = v7;
  return a1;
}

uint64_t outlined copy of ResolvedTableRowIDs.Storage(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRetain();
  }
  else {
    return swift_retain();
  }
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<Switch, _FixedSizeLayout>, _ContentShapeModifier<Capsule>>, CaptureViewRespondersModifier>(uint64_t a1)
{
  return a1;
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, char a2, uint64_t a3, unint64_t a4)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_retain();
    os_log_type_t v7 = static os_log_type_t.fault.getter();
    id v8 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      char v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v13 = v11;
      *(_DWORD *)char v10 = 136315138;
      uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v8, v9, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v11, -1, -1);
      MEMORY[0x18C119C60](v10, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(a1, 0);
    swift_release();
    swift_release();
    return v14;
  }
  return a1;
}

{
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  swift_retain();
  if ((a2 & 1) == 0)
  {
    id v8 = static os_log_type_t.fault.getter();
    os_log_type_t v9 = static Log.runtimeIssuesLog.getter();
    char v10 = v8;
    if (os_log_type_enabled(v9, v8))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      uint64_t v14 = v12;
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v9, v10, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v12, -1, -1);
      MEMORY[0x18C119C60](v11, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    swift_release();
    swift_release();
    swift_release();
    return v15;
  }
  return a1;
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, char a2)
{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD000000000000028, 0x80000001883281A0);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 1953394502, 0xE400000000000000);
}

{
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unsigned __int8 v9;
  uint64_t v10;

  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  uint64_t v3 = static os_log_type_t.fault.getter();
  uint64_t v4 = static Log.runtimeIssuesLog.getter();
  unsigned __int8 v5 = v3;
  if (os_log_type_enabled(v4, v3))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v7 = swift_slowAlloc();
    char v10 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    os_log_type_t v9 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(1819242306, 0xE400000000000000, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1872C6000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v7, -1, -1);
    MEMORY[0x18C119C60](v6, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  outlined consume of Environment<Bool>.Content(a1, 0);
  swift_release();
  swift_release();
  return v9;
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0x696C696269736956, 0xEA00000000007974, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0x6C616E6F6974704FLL, 0xEF3E726F6C6F433CLL, (void (*)(uint64_t, void))outlined consume of Environment<Color?>.Content);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 1701605202, 0xE400000000000000, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD000000000000015, 0x8000000188327F00, (void (*)(uint64_t, void))outlined consume of Environment<AnyShapeStyle?>.Content);
}

{
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if ((a2 & 1) == 0)
  {
    swift_retain();
    uint64_t v3 = static os_log_type_t.fault.getter();
    uint64_t v4 = static Log.runtimeIssuesLog.getter();
    unsigned __int8 v5 = v3;
    if (os_log_type_enabled(v4, v3))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v7 = swift_slowAlloc();
      char v10 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      os_log_type_t v9 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x8000000188328320, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v7, -1, -1);
      MEMORY[0x18C119C60](v6, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(a1, 0);
    swift_release();
    swift_release();
    LODWORD(a1) = (unsigned __int16)v9 | (BYTE2(v9) << 16);
  }
  return a1 & 0xFFFFFF;
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0x6C616E6F6974704FLL, 0xEE003E6C6F6F423CLL, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD00000000000001ELL, 0x8000000188328460, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD000000000000017, 0x8000000188328040, (void (*)(uint64_t, void))outlined consume of Environment<AnyShapeStyle?>.Content);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD000000000000016, 0x8000000188328300);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD000000000000011, 0x80000001883282C0, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content);
}

{
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  unsigned __int8 v9;
  uint64_t v10;

  if (a2) {
    return a1 & 1;
  }
  swift_retain();
  uint64_t v3 = static os_log_type_t.fault.getter();
  uint64_t v4 = static Log.runtimeIssuesLog.getter();
  unsigned __int8 v5 = v3;
  if (os_log_type_enabled(v4, v3))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v7 = swift_slowAlloc();
    char v10 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    os_log_type_t v9 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x8000000188328080, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1872C6000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v7, -1, -1);
    MEMORY[0x18C119C60](v6, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  outlined consume of Environment<Bool>.Content(a1, 0);
  swift_release();
  swift_release();
  return v9;
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD000000000000018, 0x80000001883284A0);
}

{
  return specialized Environment.wrappedValue.getter(a1, a2, 0xD000000000000014, 0x8000000188328180, (void (*)(uint64_t, void))outlined consume of Environment<Bool?>.Content);
}

{
  os_log_type_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  if ((a2 & 1) == 0)
  {
    swift_retain();
    uint64_t v3 = static os_log_type_t.fault.getter();
    uint64_t v4 = static Log.runtimeIssuesLog.getter();
    unsigned __int8 v5 = v3;
    if (os_log_type_enabled(v4, v3))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v7 = swift_slowAlloc();
      os_log_type_t v9 = v7;
      *(_DWORD *)uint64_t v6 = 136315138;
      char v10 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000012, 0x80000001883281D0, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v7, -1, -1);
      MEMORY[0x18C119C60](v6, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<Bool>.Content(a1, 0);
    swift_release();
    swift_release();
    return v10;
  }
  return a1;
}

uint64_t one-time initialization function for didChangeNotifications()
{
  if (one-time initialization token for settingsNotifications != -1) {
    swift_once();
  }
  uint64_t v0 = static AccessibilityCore.UserSettings.settingsNotifications;
  if (one-time initialization token for visualDidChangeNotifications != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)swift_bridgeObjectRetain();
  uint64_t result = (uint64_t)specialized Array.append<A>(contentsOf:)(v1);
  uint64_t v3 = qword_1ED420688;
  if (qword_1ED420688)
  {
    uint64_t v4 = (void *)*MEMORY[0x1E4FB24E8];
    unsigned __int8 v5 = (void *)*MEMORY[0x1E4FB25D0];
    uint64_t v6 = (void *)MEMORY[0x1E4FBC860];
    os_log_type_t v7 = &byte_1ED420698;
    id v8 = (void **)MEMORY[0x1E4FB91C0];
    while (2)
    {
      int v9 = *v7++;
      char v10 = v5;
      switch(v9)
      {
        case 1:
          char v10 = v4;
          goto LABEL_16;
        case 2:
          char v10 = (void *)*MEMORY[0x1E4FB9140];
          if (*MEMORY[0x1E4FB9140]) {
            goto LABEL_16;
          }
          __break(1u);
LABEL_21:
          __break(1u);
LABEL_22:
          __break(1u);
          return result;
        case 3:
          char v10 = (void *)*MEMORY[0x1E4FB9100];
          if (!*MEMORY[0x1E4FB9100]) {
            goto LABEL_21;
          }
          goto LABEL_16;
        case 4:
          char v10 = *v8;
          if (*v8) {
            goto LABEL_16;
          }
          goto LABEL_22;
        case 5:
          goto LABEL_8;
        default:
LABEL_16:
          id v11 = v10;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
            uint64_t v6 = (void *)result;
          }
          unint64_t v13 = v6[2];
          unint64_t v12 = v6[3];
          if (v13 >= v12 >> 1)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v12 > 1), v13 + 1, 1, v6);
            uint64_t v6 = (void *)result;
          }
          v6[2] = v13 + 1;
          v6[v13 + 4] = v11;
LABEL_8:
          if (--v3) {
            continue;
          }
          goto LABEL_20;
      }
    }
  }
LABEL_20:
  swift_bridgeObjectRetain();
  uint64_t v14 = (void *)swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v14);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  static AccessibilityCore.UserSettings.didChangeNotifications = v0;
  return result;
}

void *specialized Array.append<A>(contentsOf:)(void *result)
{
  uint64_t v2 = result[2];
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v10, 1, v3);
  uint64_t v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((v3[3] >> 1) - v3[2] < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  type metadata accessor for NSNotificationName(0);
  uint64_t result = (void *)swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = (void *)swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = v3[2];
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    v3[2] = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  int64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  int64_t v10;

  uint64_t v2 = result[2];
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = result;
  uint64_t result = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (result && v5 <= v3[3] >> 1)
  {
    if (v6[2]) {
      goto LABEL_5;
    }
    goto LABEL_13;
  }
  if (v4 <= v5) {
    int64_t v10 = v4 + v2;
  }
  else {
    int64_t v10 = v4;
  }
  uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v10, 1, v3);
  uint64_t v3 = result;
  if (!v6[2])
  {
LABEL_13:
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
LABEL_5:
  if ((v3[3] >> 1) - v3[2] < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  type metadata accessor for ()();
  uint64_t result = (void *)swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_14:
    uint64_t result = (void *)swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v7 = v3[2];
  BOOL v8 = __OFADD__(v7, v2);
  uint64_t v9 = v7 + v2;
  if (!v8)
  {
    v3[2] = v9;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
  return result;
}

uint64_t key path setter for EnvironmentValues.refresh : EnvironmentValues(uint64_t *a1)
{
  uint64_t v1 = *a1;
  outlined copy of AppIntentExecutor?(*a1);
  specialized EnvironmentValues.subscript.setter(v1);

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

uint64_t protocol witness for View.body.getter in conformance ButtonBehavior<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ButtonBehavior.body.getter(a1, a2);
}

void closure #1 in View.transformPlatformItemSelectionBehavior(_:)(uint64_t a1, void (*a2)(__int16 *))
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  if (v3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_17:
    }
      uint64_t v2 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    for (unint64_t i = 0; i != v3; ++i)
    {
      if (i >= v2[2])
      {
        __break(1u);
        goto LABEL_17;
      }
      uint64_t v5 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
      unint64_t v6 = (unint64_t)v2
         + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
         + *(void *)(v5 + 72) * i;
      uint64_t v7 = *(void *)(v6 + 408);
      if (v7 != 1)
      {
        char v8 = *(unsigned char *)(v6 + 464);
        uint64_t v9 = *(void *)(v6 + 440);
        uint64_t v10 = *(void *)(v6 + 432);
        uint64_t v11 = *(void *)(v6 + 424);
        uint64_t v12 = *(void *)(v6 + 416);
        uint64_t v13 = *(void *)(v6 + 400);
        __int16 v33 = v13 & 0x101;
        char v34 = BYTE2(v13) & 1;
        char v35 = BYTE3(v13) & 1;
        unsigned __int8 v36 = BYTE4(v13);
        *(void *)&long long v37 = v7;
        *((void *)&v37 + 1) = v12;
        *(void *)&long long v38 = v11;
        *((void *)&v38 + 1) = v10;
        *(void *)char v39 = v9;
        *(_OWORD *)&v39[8] = *(_OWORD *)(v6 + 448);
        char v40 = v8;
        outlined copy of AppIntentExecutor?(v7);
        outlined copy of AppIntentExecutor?(v11);
        outlined copy of AppIntentExecutor?(v9);
        a2(&v33);
        uint64_t v14 = *(void *)&v39[16];
        char v15 = v40;
        uint64_t v16 = 256;
        if (!HIBYTE(v33)) {
          uint64_t v16 = 0;
        }
        uint64_t v17 = v16 | v33;
        uint64_t v18 = 0x10000;
        if (!v34) {
          uint64_t v18 = 0;
        }
        uint64_t v19 = 0x1000000;
        if (!v35) {
          uint64_t v19 = 0;
        }
        unint64_t v20 = v17 | v18 | v19 | ((unint64_t)v36 << 32);
        uint64_t v21 = *(void *)(v6 + 400);
        uint64_t v22 = *(void *)(v6 + 408);
        uint64_t v23 = *(void *)(v6 + 416);
        uint64_t v24 = *(void *)(v6 + 424);
        uint64_t v25 = *(void *)(v6 + 432);
        uint64_t v26 = *(void *)(v6 + 440);
        uint64_t v27 = *(void *)(v6 + 448);
        uint64_t v28 = *(void *)(v6 + 456);
        char v29 = *(unsigned char *)(v6 + 464);
        *(void *)(v6 + 400) = v20;
        *(_OWORD *)(v6 + 408) = v37;
        *(_OWORD *)(v6 + 424) = v38;
        *(_OWORD *)(v6 + 440) = *(_OWORD *)v39;
        *(void *)(v6 + 456) = v14;
        *(unsigned char *)(v6 + 464) = v15;
        LOBYTE(v30) = v29;
        outlined copy of PlatformItemList.Item.SelectionBehavior?(v21, v22, v23, v24, v25, v26, v27, v28, v30, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      }
    }
    *(void *)a1 = v2;
  }
}

uint64_t ButtonBehavior.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v116 = a2;
  type metadata accessor for ButtonActionModifier<<<opaque return type of Gesture.debugLabel(_:)>>.0>();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v5);
  long long v96 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(uint64_t (**)(char))(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v121 = a1;
  uint64_t v10 = type metadata accessor for VStack();
  *(void *)&long long v135 = MEMORY[0x1E4F405B8];
  uint64_t v120 = v10;
  *((void *)&v135 + 1) = v10;
  uint64_t v136 = v9;
  uint64_t v137 = MEMORY[0x1E4F405B0];
  uint64_t v11 = type metadata accessor for StaticIf();
  uint64_t v119 = v6;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v99 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  long long v97 = (char *)&v95 - v13;
  type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(255, &lazy cache variable for type metadata for _AnimationModifier<ButtonInteractionPhase>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase, (uint64_t)&type metadata for ButtonInteractionPhase, MEMORY[0x1E4F40370]);
  uint64_t v100 = v12;
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v102 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unsigned __int8 v101 = (char *)&v95 - v15;
  type metadata accessor for StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier>();
  uint64_t v103 = v14;
  uint64_t v98 = v16;
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v105 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  long long v123 = (char *)&v95 - v18;
  type metadata accessor for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
  uint64_t v106 = v17;
  uint64_t v104 = v19;
  uint64_t v20 = type metadata accessor for ModifiedContent();
  uint64_t v112 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  long long v109 = (char *)&v95 - v21;
  type metadata accessor for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
  uint64_t v113 = v20;
  uint64_t v108 = v22;
  uint64_t v115 = type metadata accessor for ModifiedContent();
  uint64_t v114 = *(void *)(v115 - 8);
  MEMORY[0x1F4188790](v115);
  uint64_t v110 = (char *)&v95 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  long long v111 = (char *)&v95 - v25;
  uint64_t v127 = v11;
  uint64_t v107 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v126 = (char *)&v95 - v27;
  type metadata accessor for <<opaque return type of Gesture.debugLabel(_:)>>.0();
  uint64_t v125 = v28;
  uint64_t v124 = *(void *)(v28 - 8);
  double v29 = MEMORY[0x1F4188790](v28);
  long long v122 = (char *)&v95 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned char *)(v3 + 8))
  {
    char v31 = MEMORY[0x18C112680](v29);
    if (v31) {
      uint64_t v32 = 0;
    }
    else {
      uint64_t v32 = 0x3FB999999999999ALL;
    }
  }
  else
  {
    char v31 = 0;
    uint64_t v32 = *(void *)v3;
  }
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v9;
  *(void *)(v33 + 24) = v8;
  long long v34 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v33 + 64) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v33 + 80) = v34;
  long long v35 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v33 + 96) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v33 + 112) = v35;
  long long v36 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v33 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v33 + 48) = v36;
  outlined retain of ButtonBehavior<A>(v3);
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = v9;
  *(void *)(v37 + 24) = v8;
  long long v38 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v37 + 64) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v37 + 80) = v38;
  long long v39 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v37 + 96) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v37 + 112) = v39;
  long long v40 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v37 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v37 + 48) = v40;
  outlined retain of ButtonBehavior<A>(v3);
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = v9;
  *(void *)(v41 + 24) = v8;
  long long v42 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v41 + 64) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v41 + 80) = v42;
  long long v43 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v41 + 96) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v41 + 112) = v43;
  long long v44 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v41 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v41 + 48) = v44;
  *(void *)&long long v135 = partial apply for implicit closure #2 in implicit closure #1 in ButtonBehavior.body.getter;
  *((void *)&v135 + 1) = v33;
  uint64_t v136 = partial apply for implicit closure #4 in implicit closure #3 in ButtonBehavior.body.getter;
  uint64_t v137 = v37;
  uint64_t v138 = v32;
  LOBYTE(v139) = v31 & 1;
  long long v140 = partial apply for closure #1 in ButtonBehavior.body.getter;
  uint64_t v141 = v41;
  *(void *)&long long v144 = 0x3C6E6F74747542;
  *((void *)&v144 + 1) = 0xE700000000000000;
  outlined retain of ButtonBehavior<A>(v3);
  v45._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._countAndFlagsBits = 62;
  v46._object = (void *)0xE100000000000000;
  String.append(_:)(v46);
  type metadata accessor for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>();
  uint64_t v128 = v8;
  uint64_t v118 = v9;
  lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>);
  uint64_t v47 = v122;
  Gesture.debugLabel(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)partial apply for implicit closure #4 in implicit closure #3 in ButtonBehavior.body.getter);
  uint64_t v48 = swift_release();
  MEMORY[0x1F4188790](v48);
  uint64_t v49 = v118;
  MEMORY[0x1F4188790](v50);
  uint64_t v52 = v51;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v53 = v49;
  StaticIf<>.init(_:then:else:)();
  uint64_t v54 = (uint64_t)v96;
  (*(void (**)(char *, char *, uint64_t))(v124 + 16))(v96, v47, v125);
  uint64_t v55 = *(void *)(v3 + 24);
  uint64_t v117 = *(void *)(v3 + 16);
  uint64_t v56 = v119;
  uint64_t v57 = (uint64_t *)(v54 + *(int *)(v119 + 36));
  *uint64_t v57 = v117;
  v57[1] = v55;
  uint64_t v120 = v55;
  uint64_t v150 = WitnessTable;
  uint64_t v151 = v52;
  swift_retain();
  uint64_t v58 = v127;
  uint64_t v59 = swift_getWitnessTable();
  long long v60 = v97;
  MEMORY[0x18C113660](v54, v58, v56, v59);
  outlined destroy of LinkDestination.Configuration(v54, (uint64_t (*)(void))type metadata accessor for ButtonActionModifier<<<opaque return type of Gesture.debugLabel(_:)>>.0>);
  ButtonBehavior.animation.getter();
  long long v152 = *(_OWORD *)(v3 + 80);
  long long v135 = *(_OWORD *)(v3 + 80);
  long long v96 = (char *)type metadata accessor for ButtonBehavior.StateType();
  uint64_t v121 = type metadata accessor for State();
  State.wrappedValue.getter();
  LOWORD(v135) = v144;
  uint64_t v148 = v59;
  uint64_t v149 = &protocol witness table for ButtonActionModifier<A>;
  uint64_t v119 = MEMORY[0x1E4F3FBC0];
  uint64_t v61 = v100;
  uint64_t v62 = swift_getWitnessTable();
  lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase();
  uint64_t v63 = v101;
  View.animation<A>(_:value:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v99 + 8))(v60, v61);
  uint64_t v64 = swift_allocObject();
  uint64_t v65 = v128;
  *(void *)(v64 + 16) = v53;
  *(void *)(v64 + 24) = v65;
  long long v66 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)(v64 + 64) = *(_OWORD *)(v3 + 32);
  *(_OWORD *)(v64 + 80) = v66;
  long long v67 = *(_OWORD *)(v3 + 80);
  *(_OWORD *)(v64 + 96) = *(_OWORD *)(v3 + 64);
  *(_OWORD *)(v64 + 112) = v67;
  long long v68 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)(v64 + 32) = *(_OWORD *)v3;
  *(_OWORD *)(v64 + 48) = v68;
  uint64_t v69 = v117;
  *(void *)&long long v135 = v117;
  *((void *)&v135 + 1) = v120;
  uint64_t v136 = partial apply for closure #4 in ButtonBehavior.body.getter;
  uint64_t v137 = v64;
  outlined retain of ButtonBehavior<A>(v3);
  unint64_t v70 = lazy protocol witness table accessor for type _AnimationModifier<ButtonInteractionPhase> and conformance _AnimationModifier<A>();
  uint64_t v146 = v62;
  unint64_t v147 = v70;
  uint64_t v71 = v103;
  uint64_t v100 = swift_getWitnessTable();
  MEMORY[0x18C113660](&v135, v71, v98, v100);
  swift_release();
  (*(void (**)(char *, uint64_t))(v102 + 8))(v63, v71);
  long long v144 = v152;
  uint64_t v72 = State.projectedValue.getter();
  long long v73 = v135;
  LOWORD(v52) = (_WORD)v136;
  char v74 = BYTE2(v136);
  MEMORY[0x1F4188790](v72);
  swift_getKeyPath();
  long long v135 = v73;
  LOWORD(v136) = v52;
  BYTE2(v136) = v74;
  type metadata accessor for Binding();
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  long long v75 = v144;
  LOWORD(v52) = v145;
  uint64_t KeyPath = swift_getKeyPath();
  long long v135 = v75;
  LOWORD(v136) = v52;
  uint64_t v77 = v120;
  uint64_t v137 = v69;
  uint64_t v138 = v120;
  uint64_t v139 = 0;
  LOBYTE(v140) = 0;
  uint64_t v141 = 0;
  uint64_t v142 = KeyPath;
  char v143 = 0;
  unint64_t v78 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v133 = v100;
  unint64_t v134 = v78;
  swift_retain();
  uint64_t v79 = v106;
  uint64_t v80 = swift_getWitnessTable();
  uint64_t v81 = v109;
  double v82 = v123;
  MEMORY[0x18C113660](&v135, v79, v104, v80);
  swift_release();
  swift_release();
  swift_release();
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(KeyPath, 0);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v82, v79);
  long long v144 = v152;
  uint64_t v83 = State.projectedValue.getter();
  long long v84 = v135;
  LOWORD(v82) = (_WORD)v136;
  LOBYTE(KeyPath) = BYTE2(v136);
  MEMORY[0x1F4188790](v83);
  swift_getKeyPath();
  long long v135 = v84;
  LOWORD(v136) = (_WORD)v82;
  BYTE2(v136) = KeyPath;
  Binding.subscript.getter();
  swift_release();
  swift_release();
  swift_release();
  long long v135 = v144;
  LOWORD(v136) = v145;
  uint64_t v137 = v117;
  uint64_t v138 = v77;
  unint64_t HasCustomRepeat = lazy protocol witness table accessor for type StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v131 = v80;
  unint64_t v132 = HasCustomRepeat;
  swift_retain();
  uint64_t v86 = v113;
  uint64_t v87 = swift_getWitnessTable();
  long long v88 = v110;
  MEMORY[0x18C113660](&v135, v86, v108, v87);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v112 + 8))(v81, v86);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v126, v127);
  (*(void (**)(char *, uint64_t))(v124 + 8))(v122, v125);
  unint64_t HasCustomSpringLoaded = lazy protocol witness table accessor for type StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v129 = v87;
  unint64_t v130 = HasCustomSpringLoaded;
  uint64_t v90 = v115;
  swift_getWitnessTable();
  unsigned __int8 v91 = v111;
  static ViewBuilder.buildExpression<A>(_:)(v88);
  id v92 = *(void (**)(char *, uint64_t))(v114 + 8);
  v92(v88, v90);
  static ViewBuilder.buildExpression<A>(_:)(v91);
  return ((uint64_t (*)(char *, uint64_t))v92)(v91, v90);
}

uint64_t destroy for AsOptional(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

uint64_t destroy for _ButtonGesture(uint64_t a1)
{
  uint64_t result = swift_release();
  if (*(void *)(a1 + 16))
  {
    return swift_release();
  }
  return result;
}

uint64_t outlined retain of ButtonBehavior<A>(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of AppIntentExecutor?(v2);
  swift_retain();
  return a1;
}

uint64_t outlined copy of AppIntentExecutor?(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

void type metadata accessor for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for StaticIf();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier>)
  {
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier>();
    lazy protocol witness table accessor for type ButtonFocusInteractionModifier and conformance ButtonFocusInteractionModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
    lazy protocol witness table accessor for type ButtonSpringLoadedInteraction and conformance ButtonSpringLoadedInteraction();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
    lazy protocol witness table accessor for type ButtonRepeatModifier and conformance ButtonRepeatModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnimationModifier<ButtonInteractionPhase> and conformance _AnimationModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _AnimationModifier<ButtonInteractionPhase> and conformance _AnimationModifier<A>;
  if (!lazy protocol witness table cache variable for type _AnimationModifier<ButtonInteractionPhase> and conformance _AnimationModifier<A>)
  {
    type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(255, &lazy cache variable for type metadata for _AnimationModifier<ButtonInteractionPhase>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase, (uint64_t)&type metadata for ButtonInteractionPhase, MEMORY[0x1E4F40370]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnimationModifier<ButtonInteractionPhase> and conformance _AnimationModifier<A>);
  }
  return result;
}

void type metadata accessor for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>)
  {
    type metadata accessor for CallbacksGesture<FailedCallbacks<()>>();
    lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type CallbacksGesture<FailedCallbacks<()>> and conformance CallbacksGesture<A>, (void (*)(uint64_t))type metadata accessor for CallbacksGesture<FailedCallbacks<()>>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>);
    }
  }
}

void type metadata accessor for <<opaque return type of Gesture.debugLabel(_:)>>.0()
{
  if (!lazy cache variable for type metadata for <<opaque return type of Gesture.debugLabel(_:)>>.0)
  {
    type metadata accessor for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>();
    lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>);
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of Gesture.debugLabel(_:)>>.0);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonInteractionPhase and conformance ButtonInteractionPhase;
  if (!lazy protocol witness table cache variable for type ButtonInteractionPhase and conformance ButtonInteractionPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonInteractionPhase and conformance ButtonInteractionPhase);
  }
  return result;
}

uint64_t outlined destroy of LinkDestination.Configuration(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI15LinkDestinationV13ConfigurationVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for ButtonActionModifier<<<opaque return type of Gesture.debugLabel(_:)>>.0>()
{
  if (!lazy cache variable for type metadata for ButtonActionModifier<<<opaque return type of Gesture.debugLabel(_:)>>.0>)
  {
    type metadata accessor for <<opaque return type of Gesture.debugLabel(_:)>>.0();
    type metadata accessor for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>();
    lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<FailedCallbacks<()>>, _ButtonGesture>);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for ButtonActionModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ButtonActionModifier<<<opaque return type of Gesture.debugLabel(_:)>>.0>);
    }
  }
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarStorage.Entry>, type metadata accessor for ToolbarStorage.Entry, type metadata accessor for ToolbarStorage.Entry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, MEMORY[0x1E4F27DE8], MEMORY[0x1E4F27DE8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<TableCellFormula>, (uint64_t (*)(uint64_t))type metadata accessor for TableCellFormula, (uint64_t (*)(void))type metadata accessor for TableCellFormula);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)>, &lazy cache variable for type metadata for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CommandsList.Item>, type metadata accessor for CommandsList.Item, type metadata accessor for CommandsList.Item);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<MenuVisitor.MenuStackGroup>, (uint64_t (*)(uint64_t))type metadata accessor for MenuVisitor.MenuStackGroup, (uint64_t (*)(void))type metadata accessor for MenuVisitor.MenuStackGroup);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UICellAccessory>, MEMORY[0x1E4FB0E68], MEMORY[0x1E4FB0E68]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<IntelligenceElement>, MEMORY[0x1E4FB0BB0], MEMORY[0x1E4FB0BB0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBCEA8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<CommandGroupPlacementBox>, type metadata accessor for CommandGroupPlacementBox, type metadata accessor for CommandGroupPlacementBox);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(source: IndexPath, destination: IndexPath)>, (uint64_t (*)(uint64_t))type metadata accessor for (source: IndexPath, destination: IndexPath), (uint64_t (*)(void))type metadata accessor for (source: IndexPath, destination: IndexPath));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<MainMenuItem>, type metadata accessor for MainMenuItem, type metadata accessor for MainMenuItem);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<MainMenuItem.Template>, type metadata accessor for MainMenuItem.Template, type metadata accessor for MainMenuItem.Template);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarStorage.Item>, type metadata accessor for ToolbarStorage.Item, type metadata accessor for ToolbarStorage.Item);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<DisplayList.HostedViewState.Key>, type metadata accessor for DisplayList.HostedViewState.Key, type metadata accessor for DisplayList.HostedViewState.Key);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UpdateCoalescingCollectionView.UpdateInvalidation>, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation, type metadata accessor for UpdateCoalescingCollectionView.UpdateInvalidation);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x1E4F276F0], MEMORY[0x1E4F276F0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<WidgetAuxiliaryViewMetadata.Text.Metadata>, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata, type metadata accessor for WidgetAuxiliaryViewMetadata.Text.Metadata);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(ToolbarStorage.Entry, Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (ToolbarStorage.Entry, Int), (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TableCellFormula, id: TableColumnCustomizationID)>, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<KeyPress.Handler>, type metadata accessor for KeyPress.Handler, type metadata accessor for KeyPress.Handler);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

unsigned char *partial apply for closure #1 in PlatformItemNavigationSelectionStyleModifier.body(content:)(unsigned char *result)
{
  int v2 = *(unsigned __int8 *)(v1 + 16);
  *unint64_t result = 0;
  if (v2 != 2) {
    result[4] = 2 * (v2 & 1);
  }
  return result;
}

uint64_t partial apply for closure #1 in BaseModifier.Transform.body(content:)(uint64_t a1)
{
  type metadata accessor for BaseModifier.Transform();

  return closure #1 in BaseModifier.Transform.body(content:)(a1);
}

uint64_t closure #1 in BaseModifier.Transform.body(content:)(uint64_t a1)
{
  type metadata accessor for BaseModifier.Transform();
  type metadata accessor for NavigationState.ListKey?(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  uint64_t result = State.wrappedValue.getter();
  if (v4) {
    char v3 = 2;
  }
  else {
    char v3 = 0;
  }
  *(unsigned char *)(a1 + 4) = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonFocusInteractionModifier and conformance ButtonFocusInteractionModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonFocusInteractionModifier and conformance ButtonFocusInteractionModifier;
  if (!lazy protocol witness table cache variable for type ButtonFocusInteractionModifier and conformance ButtonFocusInteractionModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonFocusInteractionModifier and conformance ButtonFocusInteractionModifier);
  }
  return result;
}

void type metadata accessor for AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>()
{
  if (!lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>)
  {
    type metadata accessor for _EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>();
    lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type _EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>> and conformance _EndedGesture<A>, (void (*)(uint64_t))type metadata accessor for _EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>);
    unint64_t v0 = type metadata accessor for AddGestureModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AddGestureModifier<_EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>>);
    }
  }
}

void type metadata accessor for CallbacksGesture<FailedCallbacks<()>>()
{
  if (!lazy cache variable for type metadata for CallbacksGesture<FailedCallbacks<()>>)
  {
    type metadata accessor for FailedCallbacks<()>(255, &lazy cache variable for type metadata for FailedCallbacks<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F3FB38]);
    lazy protocol witness table accessor for type FailedCallbacks<()> and conformance FailedCallbacks<A>();
    unint64_t v0 = type metadata accessor for CallbacksGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CallbacksGesture<FailedCallbacks<()>>);
    }
  }
}

void type metadata accessor for _EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>()
{
  if (!lazy cache variable for type metadata for _EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>)
  {
    type metadata accessor for _ChangedGesture<PhysicalButtonPressGesture>();
    lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type _ChangedGesture<PhysicalButtonPressGesture> and conformance _ChangedGesture<A>, (void (*)(uint64_t))type metadata accessor for _ChangedGesture<PhysicalButtonPressGesture>);
    unint64_t v0 = type metadata accessor for _EndedGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EndedGesture<_ChangedGesture<PhysicalButtonPressGesture>>);
    }
  }
}

void type metadata accessor for _ChangedGesture<PhysicalButtonPressGesture>()
{
  if (!lazy cache variable for type metadata for _ChangedGesture<PhysicalButtonPressGesture>)
  {
    lazy protocol witness table accessor for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture();
    lazy protocol witness table accessor for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType();
    unint64_t v0 = type metadata accessor for _ChangedGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ChangedGesture<PhysicalButtonPressGesture>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture;
  if (!lazy protocol witness table cache variable for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonSpringLoadedInteraction and conformance ButtonSpringLoadedInteraction()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonSpringLoadedInteraction and conformance ButtonSpringLoadedInteraction;
  if (!lazy protocol witness table cache variable for type ButtonSpringLoadedInteraction and conformance ButtonSpringLoadedInteraction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonSpringLoadedInteraction and conformance ButtonSpringLoadedInteraction);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonRepeatModifier and conformance ButtonRepeatModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonRepeatModifier and conformance ButtonRepeatModifier;
  if (!lazy protocol witness table cache variable for type ButtonRepeatModifier and conformance ButtonRepeatModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonRepeatModifier and conformance ButtonRepeatModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType()
{
  unint64_t result = lazy protocol witness table cache variable for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType;
  if (!lazy protocol witness table cache variable for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FailedCallbacks<()> and conformance FailedCallbacks<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type FailedCallbacks<()> and conformance FailedCallbacks<A>;
  if (!lazy protocol witness table cache variable for type FailedCallbacks<()> and conformance FailedCallbacks<A>)
  {
    type metadata accessor for FailedCallbacks<()>(255, &lazy cache variable for type metadata for FailedCallbacks<()>, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4F3FB38]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FailedCallbacks<()> and conformance FailedCallbacks<A>);
  }
  return result;
}

void type metadata accessor for FailedCallbacks<()>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t closure #1 in PlatformItemListViewThatFitsRepresentable.FittingChildrenPlatformItemList.value.getter(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for PlatformItemList.Item();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  unint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v13 - v7;
  swift_bridgeObjectRelease();
  uint64_t v19 = MEMORY[0x1E4FBC860];
  void v13[2] = &v19;
  SizeFittingState.applyChildren(selectLast:to:)(0);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v20);
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v20, (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550]);
  v16[0] = xmmword_18834BB90;
  memset(&v16[1], 0, 48);
  char v17 = 0;
  __n128 v14 = 0uLL;
  uint64_t v15 = 0;
  PlatformItemList.Item.init(text:image:selectionBehavior:accessibility:tint:imageColorResolver:)(0, (uint64_t)v18, v16, &v14, 0, 0, (uint64_t)v8);
  uint64_t v9 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((void *)v8 + 77) = v9;
  outlined init with copy of PlatformItemList.Item((uint64_t)v8, (uint64_t)v5);
  type metadata accessor for CommandOperation?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBBE00]);
  unint64_t v10 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_18834BB80;
  outlined init with take of PlatformItemList.Item((uint64_t)v5, v11 + v10);
  *a1 = v11;
  outlined destroy of CommandOperation((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  return swift_bridgeObjectRelease();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    if ((uint64_t)(v10 >> 1) < a2)
    {
      if (v11 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      int64_t v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v10 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v11 = a2;
      }
    }
  }
  else
  {
    int64_t v11 = a2;
  }
  uint64_t v12 = a4[2];
  if (v11 <= v12) {
    uint64_t v13 = a4[2];
  }
  else {
    uint64_t v13 = v11;
  }
  if (!v13)
  {
    char v17 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, a5, a6, MEMORY[0x1E4FBBE00]);
  uint64_t v14 = *(void *)(a7(0) - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  char v17 = (void *)swift_allocObject();
  size_t v18 = _swift_stdlib_malloc_size_0(v17);
  if (!v15 || (v18 - v16 == 0x8000000000000000 ? (BOOL v19 = v15 == -1) : (BOOL v19 = 0), v19))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  void v17[2] = v12;
  v17[3] = 2 * ((uint64_t)(v18 - v16) / v15);
LABEL_19:
  uint64_t v20 = *(void *)(a7(0) - 8);
  if (a1)
  {
    if (v17 < a4
      || (unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80),
          (char *)v17 + v21 >= (char *)a4 + v21 + *(void *)(v20 + 72) * v12))
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v17 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v17;
}

uint64_t type metadata accessor for PlatformItemList.Item()
{
  uint64_t result = type metadata singleton initialization cache for PlatformItemList.Item;
  if (!type metadata singleton initialization cache for PlatformItemList.Item) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t closure #1 in _UIHostingView.beginTransaction()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (one-time initialization token for defaultUseSetNeedsLayout != -1) {
    swift_once();
  }
  if (static UIKitUpdateCycle.defaultUseSetNeedsLayout == 1)
  {
    swift_beginAccess();
    uint64_t result = MEMORY[0x18C119DF0](a1 + 16);
    if (result)
    {
      uint64_t v7 = (void *)result;
      _UIHostingView.base.getter();

      UIHostingViewBase.requestImmediateUpdate()();
      return swift_release();
    }
  }
  else
  {
    uint64_t v8 = (void *)swift_allocObject();
    void v8[2] = a2;
    v8[3] = a3;
    v8[4] = a1;
    swift_retain();
    if (_UIUpdateCycleEnabled()) {
      specialized static UIKitUpdateCycle.addPreCommitObserver(_:)((uint64_t)partial apply for closure #1 in closure #1 in _UIHostingView.beginTransaction(), (uint64_t)v8);
    }
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSRunLoop);
    MEMORY[0x18C1170B0](partial apply for closure #1 in closure #1 in _UIHostingView.beginTransaction(), v8);
    return swift_release();
  }
  return result;
}

uint64_t specialized static UIKitUpdateCycle.addPreCommitObserver(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = _UIUpdateCycleEnabled();
  if (result)
  {
    if (!static UIKitUpdateCycle.item)
    {
      v13[4] = closure #1 in static UIKitUpdateCycle.addPreCommitObserver(_:);
      v13[5] = 0;
      v13[0] = MEMORY[0x1E4F143A8];
      v13[1] = 1107296256;
      void v13[2] = thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned Double, @unowned UnsafePointer<_UIUpdateTiming>) -> ();
      void v13[3] = &block_descriptor_3;
      unint64_t v5 = _Block_copy(v13);
      uint64_t inserted = _UIUpdateSequenceInsertItem();
      _Block_release(v5);
      static UIKitUpdateCycle.item = inserted;
    }
    if (one-time initialization token for observerActions != -1) {
      swift_once();
    }
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = a1;
    *(void *)(v7 + 24) = a2;
    swift_beginAccess();
    uint64_t v8 = static UIKitUpdateCycle.observerActions;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    static UIKitUpdateCycle.observerActions = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8[2] + 1, 1, v8);
      static UIKitUpdateCycle.observerActions = v8;
    }
    unint64_t v11 = v8[2];
    unint64_t v10 = v8[3];
    if (v11 >= v10 >> 1)
    {
      uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v8);
      static UIKitUpdateCycle.observerActions = v8;
    }
    void v8[2] = v11 + 1;
    uint64_t v12 = &v8[2 * v11];
    v12[4] = partial apply for thunk for @callee_guaranteed () -> ();
    v12[5] = v7;
    return swift_endAccess();
  }
  return result;
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *a1, int64_t a2, char a3, void *a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<()>, (uint64_t (*)(uint64_t))type metadata accessor for ());
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<WeakBox<ViewResponder>>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<ViewResponder>, type metadata accessor for WeakBox<ViewResponder>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CodingKey>, &lazy cache variable for type metadata for CodingKey, MEMORY[0x1E4FBC7D0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<[UIView]>, (uint64_t (*)(uint64_t))type metadata accessor for [UIView], (void (*)(void))type metadata accessor for [UIView]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<(tag: String, item: String)>, (uint64_t)&lazy cache variable for type metadata for (tag: String, item: String), (uint64_t)"tag item ", (void (*)(void, uint64_t, void, uint64_t))type metadata accessor for (seed: Int, removeIndex: Int));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<HitTestTrace<UIView>>, (uint64_t (*)(uint64_t))type metadata accessor for HitTestTrace<UIView>, (void (*)(void))type metadata accessor for HitTestTrace<UIView>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<HitTestTrace<ViewResponder>>, (uint64_t (*)(uint64_t))type metadata accessor for HitTestTrace<ViewResponder>, (void (*)(void))type metadata accessor for HitTestTrace<ViewResponder>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(String?, String)>, (uint64_t (*)(uint64_t))type metadata accessor for (String?, String), (void (*)(void))type metadata accessor for (String?, String));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(key: String?, value: String)>, (uint64_t (*)(uint64_t))type metadata accessor for (key: String?, value: String), (void (*)(void))type metadata accessor for (key: String?, value: String));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PreviewModifier>, &lazy cache variable for type metadata for PreviewModifier, (uint64_t)&protocol descriptor for PreviewModifier);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityCoreNotification>, &lazy cache variable for type metadata for AccessibilityCoreNotification, (uint64_t)&protocol descriptor for AccessibilityCoreNotification);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<UIKitAnimationCooperating>, (unint64_t *)&lazy cache variable for type metadata for UIKitAnimationCooperating, (uint64_t)&protocol descriptor for UIKitAnimationCooperating);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<EventBindingSource>, (unint64_t *)&lazy cache variable for type metadata for EventBindingSource);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<Selectable>, (unint64_t *)&lazy cache variable for type metadata for Selectable, (uint64_t)&protocol descriptor for Selectable);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<DocumentCreationStrategy>, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy, (uint64_t)&protocol descriptor for DocumentCreationStrategy);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<TableColumnList>, (unint64_t *)&lazy cache variable for type metadata for TableColumnList, (uint64_t)&protocol descriptor for TableColumnList);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<UIKitProxyFocusItem>, (unint64_t *)&lazy cache variable for type metadata for UIKitProxyFocusItem);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<WeakBox<UIGestureRecognizer>>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<UIGestureRecognizer>, (void (*)(void))type metadata accessor for WeakBox<UIGestureRecognizer>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &lazy cache variable for type metadata for _ContiguousArrayStorage<[UIAccessibilityLocationDescriptor]>, (uint64_t (*)(uint64_t))type metadata accessor for [UIAccessibilityLocationDescriptor], (void (*)(void))type metadata accessor for [UIAccessibilityLocationDescriptor]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<AccessibilityLinkElement>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLinkElement);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<WeakBox<DocumentViewController>>, (uint64_t (*)(uint64_t))type metadata accessor for WeakBox<DocumentViewController>, type metadata accessor for WeakBox<DocumentViewController>);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (void (*)(void))type metadata accessor for _ContiguousArrayStorage<(String, String)>, (uint64_t)&lazy cache variable for type metadata for (String, String), MEMORY[0x1E4FBB1A0], (void (*)(void, uint64_t, void, uint64_t))type metadata accessor for (Badge, Spacer));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, MEMORY[0x1E4F40678]);
}

void *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(void *result, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  char v7 = (char)result;
  if (a3)
  {
    unint64_t v8 = a4[3];
    int64_t v9 = v8 >> 1;
    if ((uint64_t)(v8 >> 1) < a2)
    {
      if (v9 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v8 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v9 = a2;
      }
    }
  }
  else
  {
    int64_t v9 = a2;
  }
  uint64_t v10 = a4[2];
  if (v9 <= v10) {
    uint64_t v11 = a4[2];
  }
  else {
    uint64_t v11 = v9;
  }
  if (v11)
  {
    type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(0, a5, a6, MEMORY[0x1E4FBBE00]);
    uint64_t v12 = (void *)swift_allocObject();
    int64_t v13 = _swift_stdlib_malloc_size_0(v12);
    uint64_t v14 = v13 - 32;
    if (v13 < 32) {
      uint64_t v14 = v13 - 17;
    }
    v12[2] = v10;
    v12[3] = 2 * (v14 >> 4);
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v7)
  {
    if (v12 != a4 || v12 + 4 >= &a4[2 * v10 + 4]) {
      memmove(v12 + 4, a4 + 4, 16 * v10);
    }
    a4[2] = 0;
  }
  else
  {
    type metadata accessor for ()();
    swift_arrayInitWithCopy();
  }
  swift_bridgeObjectRelease();
  return v12;
}

void type metadata accessor for _ContiguousArrayStorage<(index: Int, element: TabCustomizationID, id: TabCustomizationID)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t type metadata accessor for ()()
{
  unint64_t result = lazy cache variable for type metadata for ();
  if (!lazy cache variable for type metadata for ())
  {
    unint64_t result = swift_getFunctionTypeMetadata0();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ());
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy cache variable for type metadata for ();
  if (!lazy cache variable for type metadata for ())
  {
    unint64_t result = swift_getFunctionTypeMetadata0();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ());
  }
  return result;
}

void type metadata accessor for NSNotificationName(uint64_t a1)
{
}

ValueMetadata *type metadata accessor for LazyPageTabViewStyle()
{
  return &type metadata for LazyPageTabViewStyle;
}

ValueMetadata *type metadata accessor for PageTabViewStyle()
{
  return &type metadata for PageTabViewStyle;
}

ValueMetadata *type metadata accessor for ActiveContextMenu()
{
  return &type metadata for ActiveContextMenu;
}

uint64_t storeEnumTagSinglePayload for ScrollEnvironmentProperties(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 208) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 208) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

SwiftUI::ViewAlignedScrollTargetBehavior __swiftcall ViewAlignedScrollTargetBehavior.init(limitBehavior:)(SwiftUI::ViewAlignedScrollTargetBehavior limitBehavior)
{
  *uint64_t v1 = *(unsigned char *)limitBehavior.limitBehavior.role;
  return limitBehavior;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance PopoverPresentation.Key@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static PopoverPresentation.Key.defaultValue;

  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for AnyButtonStyleType()
{
  return &type metadata for AnyButtonStyleType;
}

ValueMetadata *type metadata accessor for AppIntentExecutor()
{
  return &type metadata for AppIntentExecutor;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _ResolvedMatchedTransitionSourceConfiguration.Shadow(uint64_t a1, uint64_t a2)
{
  double v3 = *(double *)(a1 + 8);
  double v2 = *(double *)(a1 + 16);
  double v4 = *(double *)(a1 + 24);
  double v6 = *(double *)(a2 + 8);
  double v5 = *(double *)(a2 + 16);
  double v7 = *(double *)(a2 + 24);
  if (*(void *)a1 == *(void *)a2)
  {
    if (v3 != v6) {
      return 0;
    }
    return v4 == v7 && v2 == v5;
  }
  char v8 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
  BOOL result = 0;
  if ((v8 & 1) != 0 && v3 == v6) {
    return v4 == v7 && v2 == v5;
  }
  return result;
}

uint64_t static AccessibilityChildBehavior.ignore.getter@<X0>(void *a1@<X8>)
{
  return static HoverEffect.automatic.getter(&one-time initialization token for ignore, &static AccessibilityChildBehavior.ignore, a1);
}

void partial apply for closure #1 in static ScrollViewCommitMutation.commit(layoutState:phaseState:containerSize:isPreferred:transaction:)()
{
  closure #1 in static ScrollViewCommitMutation.commit(layoutState:phaseState:containerSize:isPreferred:transaction:)(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t base witness table accessor for _AttributeBody in SubscriptionView<A, B>.Subscriber()
{
  return swift_getWitnessTable();
}

void *specialized _UIHostingView.__allocating_init(rootView:)(objc_class *a1)
{
  id v2 = objc_allocWithZone((Class)type metadata accessor for _UIHostingView());
  return specialized _UIHostingView.init(rootView:)(a1);
}

void *specialized _UIHostingView.init(rootView:)(objc_class *a1)
{
  id v2 = v1;
  Class super_class = a1;
  uint64_t ObjectType = swift_getObjectType();
  double v4 = (void *)MEMORY[0x1E4FBC8C8];
  double v5 = (void *)(*MEMORY[0x1E4FBC8C8] & *v1);
  *(_DWORD *)((char *)v2 + v5[14]) = 0;
  *((unsigned char *)v2 + *(void *)((*v4 & *v2) + 0x78)) = 0;
  *((unsigned char *)v2 + *(void *)((*v4 & *v2) + 0x80)) = 1;
  *(_DWORD *)((char *)v2 + *(void *)((*v4 & *v2) + 0x88)) = 0;
  double v6 = (char *)v2 + *(void *)((*v4 & *v2) + 0x90);
  *(_OWORD *)double v6 = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  v6[32] = 1;
  double v7 = (char *)v2 + *(void *)((*v4 & *v2) + 0x98);
  *(_OWORD *)double v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v7[32] = 1;
  *(_DWORD *)((char *)v2 + *(void *)((*v4 & *v2) + 0xA0)) = 0;
  *(void *)((char *)v2 + *(void *)((*v4 & *v2) + 0xA8)) = 0;
  *(void *)((char *)v2 + *(void *)((*v4 & *v2) + 0xB0)) = 0;
  *(void *)((char *)v2 + *(void *)((*v4 & *v2) + 0xB8)) = -1;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v2 + *(void *)((*v4 & *v2) + 0xC8)) = 0;
  *((unsigned char *)v2 + *(void *)((*v4 & *v2) + 0xD8)) = 2;
  uint64_t v8 = *(void *)((*v4 & *v2) + 0xE0);
  uint64_t v10 = v5[11];
  unint64_t v126 = v5[10];
  unint64_t v9 = v126;
  uint64_t v127 = &type metadata for Alert.Presentation;
  uint64_t v128 = v10;
  uint64_t v129 = (ValueMetadata *)&protocol witness table for Alert.Presentation;
  type metadata accessor for DeprecatedAlertBridge();
  uint64_t v11 = v2;
  *(void *)((char *)v2 + v8) = DeprecatedAlertBridge.__allocating_init(style:)(1);
  uint64_t v12 = *(void *)((*v4 & *v11) + 0xE8);
  unint64_t v126 = v9;
  uint64_t v127 = &type metadata for ActionSheet.Presentation;
  uint64_t v128 = v10;
  uint64_t v129 = (ValueMetadata *)&protocol witness table for ActionSheet.Presentation;
  type metadata accessor for DeprecatedAlertBridge();
  *(void *)((char *)v11 + v12) = DeprecatedAlertBridge.__allocating_init(style:)(0);
  *(void *)((char *)v11 + *(void *)((*v4 & *v11) + 0xF0)) = 1;
  uint64_t v13 = *(void *)((*v4 & *v11) + 0xF8);
  type metadata accessor for FocusBridge();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  *(void *)(v14 + 32) = 0;
  *(void *)(v14 + 40) = 0;
  swift_unknownObjectWeakInit();
  uint64_t v15 = MEMORY[0x1E4FBC860];
  unint64_t v16 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(_DWORD *)(v14 + 48) = 0;
  *(void *)(v14 + 56) = v15;
  *(void *)(v14 + 64) = v16;
  EnvironmentValues.init()();
  *(_OWORD *)(v14 + 120) = 0u;
  *(_OWORD *)(v14 + 104) = 0u;
  *(_OWORD *)(v14 + 88) = 0u;
  *(void *)(v14 + 136) = 1;
  *(_DWORD *)(v14 + 144) = 0;
  swift_weakInit();
  *(void *)(v14 + 160) = 0;
  *(void *)(v14 + 168) = 0;
  *(_WORD *)(v14 + 176) = 1;
  *(void *)((char *)v11 + v13) = v14;
  uint64_t v17 = *(void *)((*v4 & *v11) + 0x100);
  type metadata accessor for DragAndDropBridge();
  *(void *)((char *)v11 + v17) = PencilEventsBridge.__allocating_init()();
  *(void *)((char *)v11 + *(void *)((*v4 & *v11) + 0x108)) = 0;
  uint64_t v18 = *(void *)((*v4 & *v11) + 0x110);
  type metadata accessor for TooltipBridge();
  *(void *)((char *)v11 + v18) = PencilEventsBridge.__allocating_init()();
  uint64_t v19 = *(void *)((*v4 & *v11) + 0x118);
  type metadata accessor for EditMenuBridge();
  *(void *)((char *)v11 + v19) = PencilEventsBridge.__allocating_init()();
  *(void *)((char *)v11 + *(void *)((*v4 & *v11) + 0x120)) = 0;
  *(void *)((char *)v11 + *(void *)((*v4 & *v11) + 0x128)) = 0;
  uint64_t v20 = *(void *)((*v4 & *v11) + 0x130);
  type metadata accessor for UIKitStatusBarBridge();
  *(void *)((char *)v11 + v20) = UIKitStatusBarBridge.__allocating_init()();
  swift_weakInit();
  *(void *)((char *)v11 + *(void *)((*v4 & *v11) + 0x140)) = 0;
  uint64_t v21 = *(void *)((*v4 & *v11) + 0x148);
  type metadata accessor for AVKitCaptureButtonBridge();
  *(void *)((char *)v11 + v21) = PencilEventsBridge.__allocating_init()();
  uint64_t v22 = *(void *)((*v4 & *v11) + 0x150);
  type metadata accessor for PencilEventsBridge();
  *(void *)((char *)v11 + v22) = PencilEventsBridge.__allocating_init()();
  *(void *)((char *)v11 + *(void *)((*v4 & *v11) + 0x158)) = 0;
  uint64_t v23 = *(void *)((*v4 & *v11) + 0x160);
  type metadata accessor for UIKitSensoryFeedbackCache();
  *(void *)((char *)v11 + v23) = UIKitSensoryFeedbackCache.__allocating_init()();
  uint64_t v24 = *(void *)((*v4 & *v11) + 0x168);
  type metadata accessor for ContextMenuBridge();
  *(void *)((char *)v11 + v24) = PencilEventsBridge.__allocating_init()();
  *((unsigned char *)v11 + *(void *)((*v4 & *v11) + 0x170)) = 0;
  uint64_t v25 = *(void *)((*v4 & *v11) + 0x178);
  *(void *)((char *)v11 + v25) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UILargeContentViewerInteractionBridge()), sel_init);
  *(void *)((char *)v11 + *(void *)((*v4 & *v11) + 0x180)) = 0;
  *(void *)((char *)v11 + *(void *)((*v4 & *v11) + 0x188)) = 0;
  *(void *)((char *)v11 + *(void *)((*v4 & *v11) + 0x190)) = 0;
  *(void *)((char *)v11 + *(void *)((*v4 & *v11) + 0x198) + 8) = 0;
  swift_unknownObjectWeakInit();
  *(void *)((char *)v11 + *(void *)((*v4 & *v11) + 0x1A0)) = 0;
  uint64_t v26 = (char *)v11 + *(void *)((*v4 & *v11) + 0x1A8);
  *(void *)uint64_t v26 = 0;
  v26[8] = 0;
  *((_DWORD *)v26 + 3) = 0;
  uint64_t v27 = (void *)((char *)v11 + *(void *)((*v4 & *v11) + 0x1B0));
  unint64_t v28 = specialized Dictionary.init(dictionaryLiteral:)(v15);
  *uint64_t v27 = 0;
  v27[1] = v28;
  uint64_t v29 = MEMORY[0x1E4FBC868];
  v27[2] = MEMORY[0x1E4FBC868];
  *((unsigned char *)v11 + *(void *)((*v4 & *v11) + 0x1B8)) = 0;
  *((unsigned char *)v11 + *(void *)((*v4 & *v11) + 0x1C0)) = 0;
  *(void *)((char *)v11 + *(void *)((*v4 & *v11) + 0x1C8)) = 0;
  *(void *)((char *)v11 + *(void *)((*v4 & *v11) + 0x1D0)) = 0;
  *((unsigned char *)v11 + *(void *)((*v4 & *v11) + 0x1D8)) = 0;
  uint64_t v30 = (*(uint64_t (**)(char *, Class, unint64_t))(*(void *)(v9 - 8) + 16))((char *)v11 + *(void *)((*v4 & *v11) + 0x60), super_class, v9);
  uint64_t v31 = MEMORY[0x18C113CA0](v30);
  uint64_t v32 = (*(void *(**)(unint64_t *__return_ptr, uint64_t))(ObjectType + 1192))(&v126, v31);
  if ((v126 & 1) == 0)
  {
    if ((v126 & 2) != 0)
    {
      uint64_t v33 = 2;
      if ((v126 & 4) == 0) {
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v33 = 0;
      if ((v126 & 4) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_7;
  }
  if ((v126 & 2) == 0)
  {
    uint64_t v33 = 1;
    if ((v126 & 4) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t v33 = 3;
  if ((v126 & 4) != 0) {
LABEL_7:
  }
    v33 |= 4uLL;
LABEL_8:
  if ((v126 & 0x10) != 0) {
    v33 |= 8uLL;
  }
  if ((v126 & 0x20) != 0) {
    v33 |= 0x10uLL;
  }
  if ((*(uint64_t (**)(void *))(ObjectType + 1216))(v32)) {
    uint64_t v34 = v33;
  }
  else {
    uint64_t v34 = v33 | 0x20;
  }
  type metadata accessor for UIHostingViewBase();
  type metadata accessor for ModifiedContent();
  uint64_t v35 = type metadata accessor for ModifiedContent();
  unint64_t v36 = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
  uint64_t v136 = v10;
  unint64_t v137 = v36;
  uint64_t v123 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v135 = MEMORY[0x1E4F40960];
  swift_getWitnessTable();
  *(void *)((char *)v11 + *(void *)((*v4 & *v11) + 0x68)) = UIHostingViewBase.__allocating_init<A>(rootViewType:options:)(v35, v34);
  uint64_t v37 = swift_retain_n();
  unint64_t v126 = specialized FocusViewGraph.init(graph:)(v37);
  uint64_t v127 = v38;
  uint64_t v128 = v39;
  LOWORD(v129) = v40 & 0x101;
  BYTE2(v129) = v41 & 1;
  lazy protocol witness table accessor for type FocusViewGraph and conformance FocusViewGraph();
  ViewGraph.append<A>(feature:)();
  swift_release();
  LOWORD(v127) = 0;
  unint64_t v126 = 0;
  lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  if (_UIUpdateAdaptiveRateNeeded())
  {
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v9, v123, v42, v43);
    type metadata accessor for _UIHostingView.EnableVFDFeature();
    swift_retain();
    swift_getWitnessTable();
    ViewGraph.append<A>(feature:)();
    swift_release();
  }
  long long v44 = (void *)MEMORY[0x1E4FBC860];
  unint64_t v45 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v127 = 0;
  uint64_t v128 = 0;
  unint64_t v126 = 0;
  LOBYTE(v129) = 0;
  unint64_t v130 = 0;
  unint64_t v131 = v45;
  uint64_t v132 = v29;
  char v133 = 1;
  lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph();
  swift_retain();
  ViewGraph.append<A>(feature:)();
  swift_release();
  outlined consume of FocusStore?(0, v45);
  unint64_t v46 = specialized Dictionary.init(dictionaryLiteral:)(v44);
  uint64_t v129 = &type metadata for HoverEventDispatcher;
  unint64_t v130 = lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher();
  unint64_t v126 = v46;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v126);
  uint64_t v129 = &type metadata for PencilDoubleTapEventDispatcher;
  unint64_t v130 = lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v126);
  uint64_t v129 = &type metadata for PencilSqueezeEventDispatcher;
  unint64_t v130 = lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher();
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v126);
  unint64_t v47 = specialized Dictionary.init(dictionaryLiteral:)(v44);
  uint64_t v129 = &type metadata for KeyEventDispatcher;
  unint64_t v130 = lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher();
  unint64_t v126 = v47;
  swift_retain();
  EventBindingManager.addForwardedEventDispatcher(_:)();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v126);
  type metadata accessor for UIKitEventBindingBridge();
  swift_allocObject();
  swift_retain();
  *(void *)((char *)v11 + *(void *)((*v4 & *v11) + 0xD0)) = UIKitEventBindingBridge.init(eventBindingManager:)();

  v125.id receiver = v11;
  v125.Class super_class = (Class)type metadata accessor for _UIHostingView();
  Class super_class = v125.super_class;
  id v48 = -[objc_class initWithFrame:](&v125, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  _UIHostingView.base.getter();
  swift_retain();
  swift_release();
  uint64_t v49 = v48;
  swift_unknownObjectWeakInit();

  uint64_t v50 = type metadata accessor for _UIHostingView.HostViewGraph();
  swift_getWitnessTable();
  ViewGraph.append<A>(feature:)();
  swift_release();
  uint64_t v51 = (*(uint64_t (**)(unint64_t *, uint64_t))(*(void *)(v50 - 8) + 8))(&v126, v50);
  (*(void (**)(uint64_t))((*v4 & *v49) + 0x500))(v51);
  uint64_t v52 = _UIHostingView.base.getter();
  if (MEMORY[0x18C119DF0](v52 + 3))
  {
    swift_getObjectType();
    ViewRendererHost.initializeViewGraph()();
    UIHostingViewBase.setUpNotifications()();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  uint64_t v53 = static RepresentableContextValues.current;
  if ((void)static RepresentableContextValues.current != 1)
  {
    uint64_t v54 = *((void *)&static RepresentableContextValues.current + 1);
    uint64_t v55 = qword_1EB2E8DA0;
    uint64_t v56 = qword_1EB2E8DA8;
    char v57 = byte_1EB2E8DB0;
    if ((void)static RepresentableContextValues.current)
    {
      outlined copy of RepresentableContextValues?(static RepresentableContextValues.current, *((uint64_t *)&static RepresentableContextValues.current + 1), qword_1EB2E8DA0, qword_1EB2E8DA8, byte_1EB2E8DB0);
      uint64_t v58 = swift_retain();
      _UIHostingView.setPreferenceBridge(_:)(v58);
      uint64_t v59 = swift_release();
      if (v57)
      {
LABEL_23:
        id v122 = &v122;
        MEMORY[0x1F4188790](v59);
        swift_retain();
        swift_retain();
        outlined copy of RepresentableContextValues.EnvironmentStorage(v55, v56, 1);
        static Update.ensure<A>(_:)();
        outlined consume of RepresentableContextValues?(v53, v54, v55, v56, v57);
        unint64_t v61 = v126;
        uint64_t v60 = (uint64_t)v127;
LABEL_30:
        uint64_t v62 = (void *)MEMORY[0x1E4FBC8C8];
        uint64_t v63 = *(void *)((char *)v49 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v49) + 0x68));
        uint64_t v64 = *(void *)(v63 + 120);
        *(void *)(v63 + 120) = v61;
        *(void *)(v63 + 128) = v60;
        outlined consume of EnvironmentValues?(v64);
        uint64_t v65 = v55;
        double v4 = v62;
        outlined consume of RepresentableContextValues?(v53, v54, v65, v56, v57);
        goto LABEL_31;
      }
    }
    else
    {
      swift_retain();
      uint64_t v59 = outlined copy of RepresentableContextValues.EnvironmentStorage(v55, v56, v57 & 1);
      if (v57) {
        goto LABEL_23;
      }
    }
    unint64_t v126 = v55;
    uint64_t v127 = (ValueMetadata *)v56;
    swift_retain();
    swift_retain();
    uint64_t v60 = v56;
    unint64_t v61 = v55;
    goto LABEL_30;
  }
LABEL_31:
  swift_unknownObjectWeakAssign();
  swift_unknownObjectWeakAssign();
  uint64_t v66 = specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  swift_retain();
  UIKitStatusBarBridge.addPreferences(to:)(v66);
  swift_release();
  swift_release();
  uint64_t v123 = *(void *)((*v4 & *v49) + 0x168);
  swift_unknownObjectWeakAssign();
  long long v67 = *(void **)((char *)v49 + *(void *)((*v4 & *v49) + 0xE0));
  specialized DeprecatedAlertBridge.host.setter();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  id v68 = v67;
  specialized DeprecatedAlertBridge.addPreferences(to:)();

  swift_release();
  uint64_t v69 = *(void **)((char *)v49 + *(void *)((*v4 & *v49) + 0xE8));
  specialized DeprecatedAlertBridge.host.setter();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  id v70 = v69;
  specialized DeprecatedAlertBridge.addPreferences(to:)();

  swift_release();
  id v71 = _UIHostingView.sheetBridge.getter();
  if (v71)
  {
    uint64_t v72 = v71;
    specialized SheetBridge.host.setter();
  }
  long long v73 = _UIHostingView.sheetBridge.getter();
  if (v73)
  {
    char v74 = v73;
    specialized _UIHostingView.viewGraph.getter();
    long long v75 = *(void (**)(uint64_t))((*v4 & *v74) + 0x1F0);
    id v122 = v48;
    uint64_t v76 = swift_retain();
    v75(v76);

    swift_release();
  }
  uint64_t v77 = *(void *)((char *)v49 + *(void *)((*v4 & *v49) + 0xF8));
  uint64_t v78 = swift_getWitnessTable();
  *(void *)(v77 + 32) = &protocol witness table for _UIHostingView<A>;
  *(void *)(v77 + 40) = v78;
  swift_unknownObjectWeakAssign();
  swift_retain();
  uint64_t v79 = FocusBridge.host.getter();
  if (v79)
  {
    uint64_t v81 = (void *)v79;
    uint64_t v82 = v80;
    uint64_t v83 = swift_getObjectType();
    (*(void (**)(uint64_t))(*(void *)(v82 + 8) + 16))(v83);

    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  swift_release();
  long long v84 = *(void **)((char *)v49 + *(void *)((*v4 & *v49) + 0x100));
  swift_unknownObjectWeakAssign();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  id v85 = v84;
  DragAndDropBridge.addPreferences(to:)();

  swift_release();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  uint64_t v86 = *(void **)((char *)v49 + *(void *)((*v4 & *v49) + 0x110));
  swift_unknownObjectWeakAssign();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  id v87 = v86;
  specialized TooltipBridge.addPreferences(to:)();

  swift_release();
  long long v88 = *(void **)((char *)v49 + *(void *)((*v4 & *v49) + 0x118));
  swift_unknownObjectWeakAssign();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  id v89 = v88;
  specialized EditMenuBridge.addPreferences(to:)();

  swift_release();
  uint64_t v90 = *(void **)((char *)v49 + *(void *)((*v4 & *v49) + 0x150));
  swift_unknownObjectWeakAssign();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  id v91 = v90;
  specialized PencilEventsBridge.addPreferences(to:)();

  swift_release();
  id v92 = *(void **)((char *)v49 + *(void *)((*v4 & *v49) + 0x148));
  swift_unknownObjectWeakAssign();
  id v93 = v92;
  AVKitCaptureButtonBridge.addPreferences()();

  id v94 = objc_msgSend(v49, sel_traitCollection);
  id v95 = objc_msgSend(v94, sel_userInterfaceIdiom);

  if (v95 == (id)1
    || (id v96 = objc_msgSend(v49, sel_traitCollection),
        id v97 = objc_msgSend(v96, sel_userInterfaceIdiom),
        v96,
        v97 == (id)6))
  {
    type metadata accessor for PointerBridge();
    id v98 = PencilEventsBridge.__allocating_init()();
    swift_unknownObjectWeakAssign();
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    specialized PointerBridge.addPreferences(to:)();
    swift_release();
    uint64_t v99 = *(void *)((*v4 & *v49) + 0x158);
    uint64_t v100 = *(void **)((char *)v49 + v99);
    *(void *)((char *)v49 + v99) = v98;
  }
  unsigned __int8 v101 = *(void **)((char *)v49 + v123);
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  id v102 = v101;
  ContextMenuBridge.addPreferences(to:)();

  swift_release();
  uint64_t v103 = *(char **)((char *)v49 + *(void *)((*v4 & *v49) + 0x178));
  *(void *)&v103[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = swift_getWitnessTable();
  swift_unknownObjectWeakAssign();
  uint64_t v104 = specialized _UIHostingView.viewGraph.getter();
  MEMORY[0x1F4188790](v104);
  swift_retain();
  uint64_t v105 = v103;
  static Update.ensure<A>(_:)();

  swift_release();
  uint64_t v106 = _UIHostingView.eventBindingManager.getter();
  uint64_t v107 = swift_getWitnessTable();
  swift_beginAccess();
  *(void *)(v106 + 24) = v107;
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v108 = _UIHostingView.eventBindingManager.getter();
  uint64_t v109 = *(void *)((*v4 & *v49) + 0xD0);
  swift_beginAccess();
  *(void *)(v108 + 40) = MEMORY[0x1E4F40268];
  swift_unknownObjectWeakAssign();
  swift_release();
  uint64_t v110 = *(void *)((char *)v49 + v109);
  uint64_t v111 = *(void *)(v110 + 48);
  if (v111)
  {
    uint64_t v112 = v49;
    swift_retain();
    objc_msgSend(v112, sel_addGestureRecognizer_, v111);
  }
  else
  {
    uint64_t v113 = v49;
    swift_retain();
  }
  objc_msgSend(v49, sel_addGestureRecognizer_, *(void *)(v110 + 56));
  swift_release();

  _UIHostingView.setupKeyboardAvoidanceNotifications()();
  id v114 = objc_msgSend(self, sel_defaultCenter);
  if (one-time initialization token for didChangeNotifications != -1) {
    swift_once();
  }
  uint64_t v115 = static AccessibilityCore.UserSettings.didChangeNotifications;
  uint64_t v116 = *(void *)(static AccessibilityCore.UserSettings.didChangeNotifications + 16);
  if (v116)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v116; ++i)
    {
      uint64_t v118 = *(void *)(v115 + 8 * i + 32);
      objc_msgSend(v114, sel_addObserver_selector_name_object_, v49, sel_accessibilityBooleanDidChange_, v118, 0);
    }
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v114, sel_addObserver_selector_name_object_, v49, sel_accessibilityFocusedElementDidChange_, *MEMORY[0x1E4FB2440], 0);
  uint64_t v119 = one-time initialization token for didUpdateListLayout;
  uint64_t v120 = v49;
  if (v119 != -1) {
    swift_once();
  }
  objc_msgSend(v114, sel_addObserver_selector_name_object_, v120, sel_clarityUISettingDidChange_, static ClarityUI.didUpdateListLayout, 0);

  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  HostingViewRegistry.add<A>(_:)((uint64_t)v120);

  static Update.end()();
  return v120;
}

uint64_t protocol witness for ViewRendererHost.viewGraph.getter in conformance _UIHostingView<A>()
{
  specialized _UIHostingView.viewGraph.getter();

  return swift_retain();
}

uint64_t specialized _UIHostingView.viewGraph.getter()
{
  return *(void *)(*(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68)) + 64);
}

id PencilEventsBridge.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<AccessibilityTechnology, [AccessibilityFocus.Match : Set<UniqueID>]>();
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v12 = v8 + 2;
    unsigned __int8 v4 = *((unsigned char *)v8 - 8);
    uint64_t v13 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    uint64_t v8 = v12;
    uint64_t v5 = v13;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  unsigned __int8 v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned __int8 v11[8];
  uint64_t v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Target>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = a1 + 32; ; i += 16)
    {
      outlined init with copy of (String, Any)(i, (uint64_t)v11, &lazy cache variable for type metadata for (AccessibilityTechnology, AccessibilityFocus.Target));
      uint64_t v5 = v11[0];
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11[0]);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v3[6] + result) = v5;
      unint64_t result = outlined init with take of AccessibilityFocus.Target((uint64_t)&v12, v3[7] + 8 * result);
      uint64_t v8 = v3[2];
      uint64_t v9 = __OFADD__(v8, 1);
      BOOL v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  void *v2;
  uint64_t v3;
  unsigned char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, Toolbar.VendedItem>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (unsigned char *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 3);
    double v6 = *((void *)v4 - 2);
    char v7 = (void *)*((void *)v4 - 1);
    uint64_t v8 = *v4;
    uint64_t v9 = v7;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v12 = v5;
    v12[1] = v6;
    uint64_t v13 = v2[7] + 16 * result;
    *(void *)uint64_t v13 = v7;
    *(unsigned char *)(v13 + 8) = v8;
    char v14 = v2[2];
    uint64_t v15 = __OFADD__(v14, 1);
    unint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4 += 32;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t result;
  char v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  void v26[2];

  type metadata accessor for (AnyHashable, PassthroughSubject<Any, Never>)(0, (unint64_t *)&lazy cache variable for type metadata for (String, ToolbarStorage.Entry), (void (*)(uint64_t))type metadata accessor for ToolbarStorage.Entry);
  double v3 = v2;
  unsigned __int8 v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  double v6 = (void *)((char *)v26 - v5);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, ToolbarStorage.Entry>();
  char v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  BOOL v10 = (uint64_t)v6 + *(int *)(v3 + 48);
  uint64_t v11 = v7 + 64;
  uint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v26[1] = a1;
  uint64_t v13 = a1 + v12;
  char v14 = *(void *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (AnyHashable, PassthroughSubject<Any, Never>)(v13, (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for (String, ToolbarStorage.Entry), (void (*)(uint64_t))type metadata accessor for ToolbarStorage.Entry);
    uint64_t v15 = *v6;
    unint64_t v16 = v6[1];
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v6, v16);
    if (v18) {
      break;
    }
    uint64_t v19 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v20 = (uint64_t *)(v8[6] + 16 * result);
    *uint64_t v20 = v15;
    v20[1] = v16;
    uint64_t v21 = v8[7];
    uint64_t v22 = type metadata accessor for ToolbarStorage.Entry(0);
    unint64_t result = outlined init with take of ToolbarStorage.Entry(v10, v21 + *(void *)(*(void *)(v22 - 8) + 72) * v19, type metadata accessor for ToolbarStorage.Entry);
    uint64_t v23 = v8[2];
    uint64_t v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    void v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unsigned char v13[40];
  long long v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<Toolbar.BarLocation, Toolbar.LocationStorage>, (void (*)(void))lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unsigned __int8 v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v4, (uint64_t)v13, &lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.LocationStorage));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
    if (v6) {
      break;
    }
    char v7 = result;
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t result = outlined init with take of Toolbar.BarLocation((uint64_t)v13, v2[6] + 40 * result);
    uint64_t v8 = v2[7] + 24 * v7;
    uint64_t v9 = v15;
    *(_OWORD *)uint64_t v8 = v14;
    *(void *)(v8 + 16) = v9;
    BOOL v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 64;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  unint64_t result;
  char v5;
  long long *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  long long v11;
  char v12;
  long long v13;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, [AnyConnectionOptionActionBox]>();
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v13 = *(_OWORD *)(a1 + 32);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(a1 + 32));
  if (v5)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  double v6 = (long long *)(a1 + 48);
  char v7 = v1 - 1;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v13;
    *(void *)(v3[7] + 8 * result) = *((void *)&v13 + 1);
    uint64_t v8 = v3[2];
    uint64_t v9 = __OFADD__(v8, 1);
    BOOL v10 = v8 + 1;
    if (v9) {
      break;
    }
    v3[2] = v10;
    if (!v7) {
      goto LABEL_8;
    }
    uint64_t v11 = *v6++;
    uint64_t v13 = v11;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    --v7;
    if (v12) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  double *i;
  double v5;
  double v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<CGFloat, Int>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (double *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *(i - 1);
      double v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = 8 * result;
      *(double *)(v3[6] + v9) = v5;
      *(double *)(v3[7] + v9) = v6;
      BOOL v10 = v3[2];
      uint64_t v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  uint64_t v7;
  long long v8;
  long long v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<AnyHashable, DisplayList.Version>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unsigned __int8 v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v4, (uint64_t)v13, &lazy cache variable for type metadata for (AnyHashable, DisplayList.Version));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
    if (v6) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v7 = v2[6] + 40 * result;
    uint64_t v8 = v13[0];
    uint64_t v9 = v13[1];
    *(void *)(v7 + 32) = v14;
    *(_OWORD *)char v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    *(void *)(v2[7] + 8 * result) = v15;
    BOOL v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 48;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  unint64_t result;
  char v5;
  long long *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  long long v11;
  char v12;
  long long v13;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, NavigationDestinationResolverBase>();
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v13 = *(_OWORD *)(a1 + 32);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(a1 + 32));
  if (v5)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  double v6 = (long long *)(a1 + 48);
  char v7 = v1 - 1;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v13;
    *(void *)(v3[7] + 8 * result) = *((void *)&v13 + 1);
    uint64_t v8 = v3[2];
    uint64_t v9 = __OFADD__(v8, 1);
    BOOL v10 = v8 + 1;
    if (v9) {
      break;
    }
    v3[2] = v10;
    if (!v7) {
      goto LABEL_8;
    }
    uint64_t v11 = *v6++;
    uint64_t v13 = v11;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    --v7;
    if (v12) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  long long v15;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, Decodable & Encodable.Type>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (void *)(a1 + 64);
  while (1)
  {
    uint64_t v5 = *(v4 - 4);
    double v6 = *(v4 - 3);
    uint64_t v15 = *((_OWORD *)v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v10 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v10 = v5;
    v10[1] = v6;
    uint64_t v11 = v2[7] + 24 * result;
    *(_OWORD *)uint64_t v11 = v15;
    *(void *)(v11 + 16) = v7;
    uint64_t v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1);
    char v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 5;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  unsigned char *i;
  long long v5;
  char v6;
  unint64_t result;
  char v8;
  _OWORD *v9;
  long long v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  long long v14;
  long long v15;
  long long v16;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, Bool>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (unsigned char *)(a1 + 80); ; i += 56)
    {
      uint64_t v5 = *((_OWORD *)i - 2);
      char v14 = *((_OWORD *)i - 3);
      uint64_t v15 = v5;
      unint64_t v16 = *((_OWORD *)i - 1);
      double v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v14);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = (_OWORD *)(v3[6] + 48 * result);
      BOOL v10 = v15;
      *uint64_t v9 = v14;
      v9[1] = v10;
      _OWORD v9[2] = v16;
      *(unsigned char *)(v3[7] + result) = v6;
      uint64_t v11 = v3[2];
      uint64_t v12 = __OFADD__(v11, 1);
      uint64_t v13 = v11 + 1;
      if (v12) {
        goto LABEL_10;
      }
      v3[2] = v13;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  void *i;
  char v5;
  uint64_t v6;
  uint64_t v7;
  long long v8;
  unint64_t result;
  char v10;
  _OWORD *v11;
  long long v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  long long v16;
  long long v17;
  long long v18;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>, (void (*)(uint64_t))type metadata accessor for [Binding<Bool>], (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (void *)(a1 + 80); ; i += 7)
    {
      uint64_t v5 = *((unsigned char *)i - 16);
      double v6 = *(i - 1);
      char v7 = *i;
      uint64_t v8 = *((_OWORD *)i - 2);
      unint64_t v16 = *((_OWORD *)i - 3);
      uint64_t v17 = v8;
      LOBYTE(v18) = v5;
      *((void *)&v18 + 1) = v6;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v16);
      if (v10) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v11 = (_OWORD *)(v3[6] + 48 * result);
      uint64_t v12 = v17;
      *uint64_t v11 = v16;
      v11[1] = v12;
      void v11[2] = v18;
      *(void *)(v3[7] + 8 * result) = v7;
      uint64_t v13 = v3[2];
      char v14 = __OFADD__(v13, 1);
      uint64_t v15 = v13 + 1;
      if (v14) {
        goto LABEL_10;
      }
      v3[2] = v15;
      swift_bridgeObjectRetain();
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  void *i;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  long long v10;
  unint64_t result;
  char v12;
  _OWORD *v13;
  long long v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, NavigationListState.Selection>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (void *)(a1 + 112); ; i += 11)
    {
      uint64_t v5 = *((unsigned char *)i - 48);
      double v6 = *(i - 5);
      char v7 = *(i - 4);
      uint64_t v8 = *(i - 3);
      uint64_t v9 = *i;
      BOOL v10 = *((_OWORD *)i - 4);
      uint64_t v19 = *((_OWORD *)i - 1);
      uint64_t v20 = *((_OWORD *)i - 5);
      uint64_t v21 = v10;
      LOBYTE(v22) = v5;
      *((void *)&v22 + 1) = v6;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v20);
      if (v12) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v13 = (_OWORD *)(v3[6] + 48 * result);
      char v14 = v21;
      *uint64_t v13 = v20;
      v13[1] = v14;
      void v13[2] = v22;
      uint64_t v15 = v3[7] + 40 * result;
      *(void *)uint64_t v15 = v7;
      *(void *)(v15 + 8) = v8;
      *(_OWORD *)(v15 + 16) = v19;
      *(void *)(v15 + 32) = v9;
      unint64_t v16 = v3[2];
      uint64_t v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17) {
        goto LABEL_10;
      }
      v3[2] = v18;
      swift_retain();
      swift_retain();
      swift_retain();
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  void *i;
  char v5;
  uint64_t v6;
  uint64_t v7;
  long long v8;
  unint64_t result;
  char v10;
  _OWORD *v11;
  long long v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  long long v16;
  long long v17;
  long long v18;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, AnyListSelection>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (void *)(a1 + 80); ; i += 7)
    {
      uint64_t v5 = *((unsigned char *)i - 16);
      double v6 = *(i - 1);
      char v7 = *i;
      uint64_t v8 = *((_OWORD *)i - 2);
      unint64_t v16 = *((_OWORD *)i - 3);
      uint64_t v17 = v8;
      LOBYTE(v18) = v5;
      *((void *)&v18 + 1) = v6;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v16);
      if (v10) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v11 = (_OWORD *)(v3[6] + 48 * result);
      uint64_t v12 = v17;
      *uint64_t v11 = v16;
      v11[1] = v12;
      void v11[2] = v18;
      *(void *)(v3[7] + 8 * result) = v7;
      uint64_t v13 = v3[2];
      char v14 = __OFADD__(v13, 1);
      uint64_t v15 = v13 + 1;
      if (v14) {
        goto LABEL_10;
      }
      v3[2] = v15;
      swift_retain();
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  long long v10;
  long long v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    double v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<AnyHashable, Any>();
  id v2 = static _DictionaryStorage.allocate(capacity:)();
  double v3 = (void *)v2;
  unsigned __int8 v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  double v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for (AnyHashable, Any));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    BOOL v10 = v15[0];
    uint64_t v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    char v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  uint64_t v7;
  long long v8;
  long long v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<AnyHashable, PassthroughSubject<Any, Never>>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unsigned __int8 v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (AnyHashable, PassthroughSubject<Any, Never>)(v4, (uint64_t)v13, &lazy cache variable for type metadata for (AnyHashable, PassthroughSubject<Any, Never>), (void (*)(uint64_t))type metadata accessor for PassthroughSubject<Any, Never>);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
    if (v6) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v7 = v2[6] + 40 * result;
    uint64_t v8 = v13[0];
    uint64_t v9 = v13[1];
    *(void *)(v7 + 32) = v14;
    *(_OWORD *)char v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    *(void *)(v2[7] + 8 * result) = v15;
    BOOL v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 48;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  char v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  long long v9;
  long long v10;
  long long v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unsigned char v15[8];
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  char v20;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationSplitColumn, NavigationState.StackContent.PositionedView>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitColumn and conformance NavigationSplitColumn);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = a1 + 32; ; i += 80)
    {
      outlined init with copy of (String, Any)(i, (uint64_t)v15, &lazy cache variable for type metadata for (NavigationSplitColumn, NavigationState.StackContent.PositionedView));
      uint64_t v5 = v15[0];
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15[0]);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v3[6] + result) = v5;
      uint64_t v8 = v3[7] + 72 * result;
      *(_OWORD *)uint64_t v8 = v16;
      uint64_t v9 = v17;
      BOOL v10 = v18;
      uint64_t v11 = v19;
      *(unsigned char *)(v8 + 64) = v20;
      *(_OWORD *)(v8 + 32) = v10;
      *(_OWORD *)(v8 + 48) = v11;
      *(_OWORD *)(v8 + 16) = v9;
      uint64_t v12 = v3[2];
      uint64_t v13 = __OFADD__(v12, 1);
      char v14 = v12 + 1;
      if (v13) {
        goto LABEL_10;
      }
      v3[2] = v14;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  void *v2;
  uint64_t v3;
  void **v4;
  void *v5;
  id v6;
  id v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<_UIImageNamedColorStyle, UIColor>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    double v6 = *(v4 - 1);
    char v7 = v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v10 = 8 * result;
    *(void *)(v2[6] + v10) = v6;
    *(void *)(v2[7] + v10) = v7;
    uint64_t v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  unsigned char *v5;
  Swift::UInt v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  if (!*(void *)(a1 + 16))
  {
    double v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<SceneID, KeyboardShortcut>, (void (*)(void))lazy protocol witness table accessor for type SceneID and conformance SceneID);
  id v2 = static _DictionaryStorage.allocate(capacity:)();
  double v3 = (void *)v2;
  unsigned __int8 v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v20 = v2 + 64;
  swift_retain();
  uint64_t v5 = (unsigned char *)(a1 + 80);
  while (1)
  {
    double v6 = *((void *)v5 - 6);
    char v7 = *((void *)v5 - 5);
    uint64_t v8 = *(v5 - 32);
    BOOL v10 = *((void *)v5 - 3);
    uint64_t v9 = *((void *)v5 - 2);
    uint64_t v11 = *((void *)v5 - 1);
    uint64_t v12 = *v5;
    outlined copy of SceneID(v6, v7, v8);
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7, v8);
    if (v14) {
      break;
    }
    *(void *)(v20 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v15 = v3[6] + 24 * result;
    *(void *)uint64_t v15 = v6;
    *(void *)(v15 + 8) = v7;
    *(unsigned char *)(v15 + 16) = v8;
    unint64_t v16 = v3[7] + 32 * result;
    *(void *)unint64_t v16 = v10;
    *(void *)(v16 + 8) = v9;
    *(void *)(v16 + 16) = v11;
    *(unsigned char *)(v16 + 24) = v12;
    uint64_t v17 = v3[2];
    uint64_t v18 = __OFADD__(v17, 1);
    uint64_t v19 = v17 + 1;
    if (v18) {
      goto LABEL_11;
    }
    v5 += 56;
    v3[2] = v19;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  _DWORD *i;
  Swift::UInt v5;
  unsigned __int8 v6;
  Swift::UInt v7;
  int v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationState.StackContent.Key, NavigationState.SelectionSeed>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (_DWORD *)(a1 + 56); ; i += 8)
    {
      uint64_t v5 = *((void *)i - 3);
      double v6 = *((unsigned char *)i - 16);
      char v7 = *((void *)i - 1);
      uint64_t v8 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v7);
      if (v10) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v11 = v3[6] + 24 * result;
      *(void *)uint64_t v11 = v5;
      *(unsigned char *)(v11 + 8) = v6;
      *(void *)(v11 + 16) = v7;
      *(_DWORD *)(v3[7] + 4 * result) = v8;
      uint64_t v12 = v3[2];
      uint64_t v13 = __OFADD__(v12, 1);
      char v14 = v12 + 1;
      if (v13) {
        goto LABEL_10;
      }
      v3[2] = v14;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  unsigned __int8 v4;
  Swift::UInt v5;
  void *v6;
  unint64_t result;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  char v17;
  id v18;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<NavigationContentAbstractPosition, NavigationStackHostingController<AnyView>>();
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  double v6 = *(void **)(a1 + 48);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    uint64_t v18 = v6;
    return (unint64_t)v3;
  }
  uint64_t v9 = (void *)(a1 + 72);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v10 = v3[6] + 16 * result;
    *(unsigned char *)BOOL v10 = v4;
    *(void *)(v10 + 8) = v5;
    *(void *)(v3[7] + 8 * result) = v6;
    uint64_t v11 = v3[2];
    uint64_t v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    char v14 = v9 + 3;
    unsigned __int8 v4 = *((unsigned char *)v9 - 16);
    uint64_t v5 = *(v9 - 1);
    uint64_t v15 = (void *)*v9;
    unint64_t v16 = v6;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
    uint64_t v9 = v14;
    double v6 = v15;
    if (v17) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  uint64_t v15;
  char v16;
  long long v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  unsigned char v21[48];
  long long v22;
  char v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  __int16 v28;
  uint64_t v29;
  char v30;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, ToolbarAppearanceConfiguration>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unsigned __int8 v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v4, (uint64_t)v21, &lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarAppearanceConfiguration));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21);
    if (v6) {
      break;
    }
    char v7 = result;
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t result = outlined init with take of ToolbarPlacement.Role((uint64_t)v21, v2[6] + 40 * result);
    uint64_t v8 = v2[7] + 80 * v7;
    uint64_t v9 = v23;
    BOOL v10 = v24;
    uint64_t v11 = v25;
    uint64_t v12 = v26;
    uint64_t v13 = v27;
    char v14 = v28;
    uint64_t v15 = v29;
    unint64_t v16 = v30;
    uint64_t v17 = v22;
    *(unsigned char *)uint64_t v8 = v21[40];
    *(_OWORD *)(v8 + 8) = v17;
    *(unsigned char *)(v8 + 24) = v9;
    *(void *)(v8 + 32) = v10;
    *(unsigned char *)(v8 + 40) = v11;
    *(void *)(v8 + 48) = v12;
    *(unsigned char *)(v8 + 56) = v13;
    *(_WORD *)(v8 + 57) = v14;
    *(void *)(v8 + 64) = v15;
    *(unsigned char *)(v8 + 72) = v16;
    uint64_t v18 = v2[2];
    uint64_t v19 = __OFADD__(v18, 1);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    v2[2] = v20;
    v4 += 120;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned char v11[40];
  __int16 v12;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, PlatformBarUpdates>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unsigned __int8 v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v4, (uint64_t)v11, &lazy cache variable for type metadata for (ToolbarPlacement.Role, PlatformBarUpdates));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
    if (v6) {
      break;
    }
    char v7 = result;
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t result = outlined init with take of ToolbarPlacement.Role((uint64_t)v11, v2[6] + 40 * result);
    *(_WORD *)(v2[7] + 2 * v7) = v12;
    uint64_t v8 = v2[2];
    uint64_t v9 = __OFADD__(v8, 1);
    BOOL v10 = v8 + 1;
    if (v9) {
      goto LABEL_11;
    }
    v2[2] = v10;
    v4 += 48;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  void *i;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<VerticalEdge, Double>, (void (*)(void))lazy protocol witness table accessor for type VerticalEdge and conformance VerticalEdge);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (void *)(a1 + 40); ; i += 2)
    {
      uint64_t v5 = *((unsigned char *)i - 8);
      double v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v3[6] + result) = v5;
      *(void *)(v3[7] + 8 * result) = v6;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  unint64_t result;
  void *v5;
  char v6;
  long long *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  long long v12;
  id v13;
  char v14;
  id v15;
  long long v16;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, UIHostingKeyboardTrackingElement>();
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unint64_t v16 = *(_OWORD *)(a1 + 32);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(a1 + 32));
  if (v6)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    uint64_t v15 = v5;
    return (unint64_t)v3;
  }
  char v7 = (long long *)(a1 + 48);
  uint64_t v8 = v1 - 1;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = (void *)*((void *)&v16 + 1);
    *(void *)(v3[6] + 8 * result) = v16;
    *(void *)(v3[7] + 8 * result) = *((void *)&v16 + 1);
    BOOL v10 = v3[2];
    uint64_t v11 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    uint64_t v5 = (void *)*((void *)&v16 + 1);
    v3[2] = v11;
    if (!v8) {
      goto LABEL_8;
    }
    uint64_t v12 = *v7++;
    unint64_t v16 = v12;
    uint64_t v13 = v9;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v12);
    --v8;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(void))type metadata accessor for _DictionaryStorage<String, SceneStorageValues.AnyEntry>);
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  uint64_t v7;
  long long v8;
  long long v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  _OWORD v13[2];
  uint64_t v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<AnyHashable, [AnyHashable : PassthroughSubject<Any, Never>]>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unsigned __int8 v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (AnyHashable, PassthroughSubject<Any, Never>)(v4, (uint64_t)v13, &lazy cache variable for type metadata for (AnyHashable, [AnyHashable : PassthroughSubject<Any, Never>]), (void (*)(uint64_t))type metadata accessor for [AnyHashable : PassthroughSubject<Any, Never>]);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v13);
    if (v6) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    char v7 = v2[6] + 40 * result;
    uint64_t v8 = v13[0];
    uint64_t v9 = v13[1];
    *(void *)(v7 + 32) = v14;
    *(_OWORD *)char v7 = v8;
    *(_OWORD *)(v7 + 16) = v9;
    *(void *)(v2[7] + 8 * result) = v15;
    BOOL v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 48;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, [Any]>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    double v6 = *(v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v10 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  int *i;
  long long v5;
  int v6;
  unint64_t result;
  char v8;
  _OWORD *v9;
  long long v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  long long v14;
  _OWORD v15[2];

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationStackViewPosition, VersionSeed>, (void (*)(void))lazy protocol witness table accessor for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (int *)(a1 + 76); ; i += 12)
    {
      uint64_t v5 = *(_OWORD *)(i - 7);
      char v14 = *(_OWORD *)(i - 11);
      v15[0] = v5;
      *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)((char *)i - 19);
      double v6 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v14);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = (_OWORD *)(v3[6] + 48 * result);
      BOOL v10 = v15[0];
      *uint64_t v9 = v14;
      v9[1] = v10;
      *(_OWORD *)((char *)v9 + 25) = *(_OWORD *)((char *)v15 + 9);
      *(_DWORD *)(v3[7] + 4 * result) = v6;
      uint64_t v11 = v3[2];
      uint64_t v12 = __OFADD__(v11, 1);
      uint64_t v13 = v11 + 1;
      if (v12) {
        goto LABEL_10;
      }
      v3[2] = v13;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned char v11[40];
  uint64_t v12;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, AnyShapeStyle>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unsigned __int8 v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v4, (uint64_t)v11, &lazy cache variable for type metadata for (ToolbarPlacement.Role, AnyShapeStyle));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
    if (v6) {
      break;
    }
    char v7 = result;
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t result = outlined init with take of ToolbarPlacement.Role((uint64_t)v11, v2[6] + 40 * result);
    *(void *)(v2[7] + 8 * v7) = v12;
    uint64_t v8 = v2[2];
    uint64_t v9 = __OFADD__(v8, 1);
    BOOL v10 = v8 + 1;
    if (v9) {
      goto LABEL_11;
    }
    v2[2] = v10;
    v4 += 48;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, NavigationDestinationPresentation>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = a1 + 32; ; i += 104)
    {
      outlined init with copy of (String, Any)(i, (uint64_t)&v11, &lazy cache variable for type metadata for (Namespace.ID, NavigationDestinationPresentation));
      uint64_t v5 = v11;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      unint64_t result = outlined init with take of NavigationDestinationPresentation((uint64_t)&v12, v3[7] + 96 * result);
      uint64_t v8 = v3[2];
      uint64_t v9 = __OFADD__(v8, 1);
      BOOL v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  id v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<UINavigationController, Set<NavigationStackHostingController<AnyView>>>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    double v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    BOOL v10 = v2[2];
    uint64_t v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationLinkSelectionIdentifier, Int>, (void (*)(void))lazy protocol witness table accessor for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (uint64_t *)(a1 + 64);
  while (1)
  {
    uint64_t v5 = *(v4 - 4);
    double v6 = *(v4 - 3);
    char v7 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v9 = *v4;
    swift_retain();
    outlined copy of Text.LineStyle?(v6, v7);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v7, v8);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (uint64_t *)(v2[6] + 32 * result);
    *uint64_t v12 = v5;
    v12[1] = v6;
    v12[2] = v7;
    v12[3] = v8;
    *(void *)(v2[7] + 8 * result) = v9;
    uint64_t v13 = v2[2];
    char v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 5;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  unsigned char v11[24];

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<HashableWeakBox<UIViewController>, ScenePhase>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unsigned __int8 v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (NSFileWrapper, UTType)(v4, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for (HashableWeakBox<UIViewController>, ScenePhase));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v11);
    if (v6) {
      break;
    }
    char v7 = result;
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t result = outlined init with take of HashableWeakBox<UIViewController>((uint64_t)v11, v2[6] + 16 * result);
    *(unsigned char *)(v2[7] + v7) = v11[16];
    uint64_t v8 = v2[2];
    uint64_t v9 = __OFADD__(v8, 1);
    BOOL v10 = v8 + 1;
    if (v9) {
      goto LABEL_11;
    }
    v2[2] = v10;
    v4 += 24;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  long long *i;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  unint64_t result;
  char v11;
  _OWORD *v12;
  long long v13;
  _OWORD *v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  _OWORD v33[2];
  long long v34;
  unsigned char v35[25];

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest>, (void (*)(void))lazy protocol witness table accessor for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (long long *)(a1 + 32); ; i += 12)
    {
      uint64_t v5 = i[9];
      uint64_t v31 = i[8];
      uint64_t v32 = v5;
      v33[0] = i[10];
      *(_OWORD *)((char *)v33 + 12) = *(long long *)((char *)i + 172);
      double v6 = i[5];
      uint64_t v27 = i[4];
      unint64_t v28 = v6;
      char v7 = i[7];
      uint64_t v29 = i[6];
      uint64_t v30 = v7;
      uint64_t v8 = i[1];
      uint64_t v24 = *i;
      *(_OWORD *)uint64_t v25 = v8;
      uint64_t v9 = i[3];
      *(_OWORD *)&v25[16] = i[2];
      uint64_t v26 = v9;
      uint64_t v34 = v24;
      v35[0] = v25[0];
      *(_OWORD *)&v35[8] = *(_OWORD *)&v25[8];
      v35[24] = v25[24];
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v34);
      if (v11) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v12 = (_OWORD *)(v3[6] + 48 * result);
      uint64_t v13 = *(_OWORD *)v35;
      *uint64_t v12 = v34;
      v12[1] = v13;
      *(_OWORD *)((char *)v12 + 25) = *(_OWORD *)&v35[9];
      char v14 = (_OWORD *)(v3[7] + 144 * result);
      uint64_t v15 = v31;
      unint64_t v16 = v32;
      uint64_t v17 = v33[0];
      *(_OWORD *)((char *)v14 + 124) = *(_OWORD *)((char *)v33 + 12);
      v14[6] = v16;
      v14[7] = v17;
      v14[5] = v15;
      uint64_t v18 = v27;
      uint64_t v19 = v28;
      uint64_t v20 = v30;
      v14[3] = v29;
      v14[4] = v20;
      v14[1] = v18;
      v14[2] = v19;
      *char v14 = v26;
      uint64_t v21 = v3[2];
      uint64_t v22 = __OFADD__(v21, 1);
      uint64_t v23 = v21 + 1;
      if (v22) {
        goto LABEL_10;
      }
      v3[2] = v23;
      outlined retain of (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)((uint64_t)&v24);
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void v23[2];

  type metadata accessor for (UUID, UIMenuIdentifier)(0, &lazy cache variable for type metadata for (UUID, ()), (void (*)(uint64_t))type metadata accessor for ());
  double v3 = v2;
  unsigned __int8 v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  double v6 = (char *)v23 - v5;
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<UUID, UIMenuIdentifier>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<UUID, (_:)>, (void (*)(uint64_t))type metadata accessor for (_:));
  char v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  BOOL v10 = *(int *)(v3 + 48);
  uint64_t v11 = v7 + 64;
  uint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  char v14 = *(void *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (UUID, UIMenuIdentifier)(v13, (uint64_t)v6, &lazy cache variable for type metadata for (UUID, ()), (void (*)(uint64_t))type metadata accessor for ());
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v16) {
      break;
    }
    uint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v6, v19);
    *(_OWORD *)(v8[7] + 16 * v17) = *(_OWORD *)&v6[v10];
    uint64_t v20 = v8[2];
    uint64_t v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    void v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  unsigned char *i;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  unint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationSplitColumn, NavigationSplitViewColumnWidth>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitColumn and conformance NavigationSplitColumn);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (unsigned char *)(a1 + 72); ; i += 48)
    {
      uint64_t v5 = *(i - 40);
      double v6 = *((void *)i - 4);
      char v7 = *((void *)i - 3);
      uint64_t v9 = *((void *)i - 2);
      uint64_t v8 = *((void *)i - 1);
      BOOL v10 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v12) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v3[6] + result) = v5;
      uint64_t v13 = v3[7] + 40 * result;
      *(void *)uint64_t v13 = v6;
      *(void *)(v13 + 8) = v7;
      *(void *)(v13 + 16) = v9;
      *(void *)(v13 + 24) = v8;
      *(unsigned char *)(v13 + 32) = v10;
      char v14 = v3[2];
      uint64_t v15 = __OFADD__(v14, 1);
      unint64_t v16 = v14 + 1;
      if (v15) {
        goto LABEL_10;
      }
      v3[2] = v16;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    double v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, Any>();
  id v2 = static _DictionaryStorage.allocate(capacity:)();
  double v3 = (void *)v2;
  unsigned __int8 v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  double v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)&v15);
    char v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    char v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  long long v17;

  if (!*(void *)(a1 + 16))
  {
    double v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, Any>();
  id v2 = static _DictionaryStorage.allocate(capacity:)();
  double v3 = (void *)v2;
  unsigned __int8 v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  double v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)&v15, (unint64_t *)&lazy cache variable for type metadata for (String, Any));
    char v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    char v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, Character>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    double v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    char v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void v23[2];

  type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (CodingUserInfoKey, Any), MEMORY[0x1E4FBBC50]);
  double v3 = v2;
  unsigned __int8 v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  double v6 = (char *)v23 - v5;
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<CodingUserInfoKey, Any>();
  char v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  BOOL v10 = &v6[*(int *)(v3 + 48)];
  uint64_t v11 = v7 + 64;
  uint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  char v14 = *(void *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (UIApplicationOpenExternalURLOptionsKey, Any)(v13, (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for (CodingUserInfoKey, Any), MEMORY[0x1E4FBBC50]);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v16) {
      break;
    }
    uint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v6, v19);
    unint64_t result = (unint64_t)outlined init with take of Any(v10, (_OWORD *)(v8[7] + 32 * v17));
    uint64_t v20 = v8[2];
    uint64_t v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    void v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void v23[2];

  type metadata accessor for (NSAttributedStringKey, Any)(0, (unint64_t *)&lazy cache variable for type metadata for (UUID, PlatformItemList), MEMORY[0x1E4F27990]);
  double v3 = v2;
  unsigned __int8 v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  double v6 = (char *)v23 - v5;
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<UUID, PlatformItemList>();
  char v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  BOOL v10 = *(int *)(v3 + 48);
  uint64_t v11 = v7 + 64;
  uint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  char v14 = *(void *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (UIApplicationOpenExternalURLOptionsKey, Any)(v13, (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for (UUID, PlatformItemList), MEMORY[0x1E4F27990]);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v16) {
      break;
    }
    uint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v6, v19);
    *(void *)(v8[7] + 8 * v17) = *(void *)&v6[v10];
    uint64_t v20 = v8[2];
    uint64_t v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    void v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(void))type metadata accessor for _DictionaryStorage<NSAttributedStringKey, Any>, (unint64_t *)&lazy cache variable for type metadata for (NSAttributedStringKey, Any), type metadata accessor for NSAttributedStringKey, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  void *v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  long long v16;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, TabItemGroup.HostCache>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (_OWORD *)(a1 + 64);
  while (1)
  {
    uint64_t v5 = *((void *)v4 - 4);
    double v6 = *((void *)v4 - 3);
    uint64_t v8 = *((void *)v4 - 2);
    char v7 = *((void *)v4 - 1);
    unint64_t v16 = *v4;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = v2[7] + 32 * result;
    *(void *)uint64_t v12 = v8;
    *(void *)(v12 + 8) = v7;
    *(_OWORD *)(v12 + 16) = v16;
    uint64_t v13 = v2[2];
    char v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v2[2] = v15;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, UIAccessibilityCustomRotor>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (void **)(a1 + 48);
  while (1)
  {
    uint64_t v5 = (uint64_t)*(v4 - 2);
    double v6 = (uint64_t)*(v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    uint64_t v8 = v7;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1);
    char v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(void))type metadata accessor for _DictionaryStorage<UIApplicationOpenExternalURLOptionsKey, Any>, &lazy cache variable for type metadata for (UIApplicationOpenExternalURLOptionsKey, Any), type metadata accessor for UIApplicationOpenExternalURLOptionsKey, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<AccessibilityAttachmentToken, DisplayList.Version>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (void *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    double v6 = *((unsigned char *)v4 - 8);
    char v7 = *v4;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v10 = v2[6] + 12 * result;
    *(void *)BOOL v10 = v5;
    *(unsigned char *)(v10 + 8) = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(void))type metadata accessor for _DictionaryStorage<String, MainMenuItemCoordinator>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void v23[2];

  type metadata accessor for (NSAttributedStringKey, Any)(0, &lazy cache variable for type metadata for (CommandGroupPlacementBox, CommandAccumulator), (void (*)(uint64_t))type metadata accessor for CommandGroupPlacementBox);
  double v3 = v2;
  unsigned __int8 v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  double v6 = (char *)v23 - v5;
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<CommandGroupPlacementBox, CommandAccumulator>();
  char v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  BOOL v10 = *(int *)(v3 + 48);
  uint64_t v11 = v7 + 64;
  uint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  char v14 = *(void *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (UIApplicationOpenExternalURLOptionsKey, Any)(v13, (uint64_t)v6, &lazy cache variable for type metadata for (CommandGroupPlacementBox, CommandAccumulator), (void (*)(uint64_t))type metadata accessor for CommandGroupPlacementBox);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v16) {
      break;
    }
    uint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for CommandGroupPlacementBox(0);
    unint64_t result = outlined init with take of ToolbarStorage.Entry((uint64_t)v6, v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, type metadata accessor for CommandGroupPlacementBox);
    *(_OWORD *)(v8[7] + 16 * v17) = *(_OWORD *)&v6[v10];
    uint64_t v20 = v8[2];
    uint64_t v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    void v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &lazy cache variable for type metadata for _DictionaryStorage<String, [TaskActionsContainer<(), ()>.ContainerEntry]>, &lazy cache variable for type metadata for [TaskActionsContainer<(), ()>.ContainerEntry], &lazy cache variable for type metadata for TaskActionsContainer<(), ()>.ContainerEntry, MEMORY[0x1E4FBC848] + 8);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &lazy cache variable for type metadata for _DictionaryStorage<String, [TaskActionsContainer<String, ()>.ContainerEntry]>, &lazy cache variable for type metadata for [TaskActionsContainer<String, ()>.ContainerEntry], &lazy cache variable for type metadata for TaskActionsContainer<String, ()>.ContainerEntry, MEMORY[0x1E4FBB1A0]);
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  _OWORD *v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _OWORD v19[6];
  _OWORD v20[2];
  uint64_t v21;

  if (!*(void *)(a1 + 16))
  {
    double v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>>();
  id v2 = static _DictionaryStorage.allocate(capacity:)();
  double v3 = (void *)v2;
  unsigned __int8 v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  double v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (NSFileWrapper, UTType)(v6, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for (IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = (_OWORD *)(v3[6] + (result << 7));
    BOOL v10 = v19[3];
    uint64_t v11 = v19[2];
    uint64_t v12 = v19[1];
    *uint64_t v9 = v19[0];
    v9[1] = v12;
    _OWORD v9[2] = v11;
    v9[3] = v10;
    uint64_t v13 = v19[4];
    char v14 = v19[5];
    uint64_t v15 = v20[0];
    *(_OWORD *)((char *)v9 + 105) = *(_OWORD *)((char *)v20 + 9);
    v9[5] = v14;
    v9[6] = v15;
    v9[4] = v13;
    unint64_t result = outlined init with take of WeakBox<PlatformDocument>((uint64_t)&v21, v3[7] + 8 * result);
    unint64_t v16 = v3[2];
    uint64_t v17 = __OFADD__(v16, 1);
    uint64_t v18 = v16 + 1;
    if (v17) {
      goto LABEL_11;
    }
    v3[2] = v18;
    v6 += 136;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabSectionCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (void *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    double v6 = *(v4 - 2);
    char v7 = *((unsigned char *)v4 - 8);
    uint64_t v8 = *v4;
    outlined copy of TabCustomizationID.Base();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v7);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = v2[6] + 24 * result;
    *(void *)uint64_t v11 = v5;
    *(void *)(v11 + 8) = v6;
    *(unsigned char *)(v11 + 16) = v7;
    *(void *)(v2[7] + 8 * result) = v8;
    uint64_t v12 = v2[2];
    uint64_t v13 = __OFADD__(v12, 1);
    char v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v2[2] = v14;
    v4 += 4;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  char *v4;
  long long v5;
  uint64_t v6;
  char v7;
  char v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  long long v12;
  long long v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  long long v18;
  long long v19;
  char v20;
  unsigned char v21[40];

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<TableColumnCustomizationID, TableColumnCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (char *)(a1 + 81);
  while (1)
  {
    uint64_t v5 = *(_OWORD *)(v4 - 33);
    uint64_t v18 = *(_OWORD *)(v4 - 49);
    uint64_t v19 = v5;
    uint64_t v20 = *(v4 - 17);
    double v6 = *(void *)(v4 - 9);
    char v7 = *(v4 - 1);
    uint64_t v8 = *v4;
    outlined init with take of TableColumnCustomizationID.Base((uint64_t)&v18, (uint64_t)v21);
    outlined retain of TableColumnCustomizationID.Base((uint64_t)v21);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v18);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = v2[6] + 40 * result;
    uint64_t v12 = v18;
    uint64_t v13 = v19;
    *(unsigned char *)(v11 + 32) = v20;
    *(_OWORD *)uint64_t v11 = v12;
    *(_OWORD *)(v11 + 16) = v13;
    char v14 = v2[7] + 16 * result;
    *(void *)char v14 = v6;
    *(unsigned char *)(v14 + 8) = v7;
    *(unsigned char *)(v14 + 9) = v8;
    uint64_t v15 = v2[2];
    unint64_t v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v4 += 56;
    v2[2] = v17;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  _OWORD *v4;
  id v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  long long v11;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<UIDragItem, CGPoint>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (_OWORD *)(a1 + 40);
  while (1)
  {
    uint64_t v11 = *v4;
    uint64_t v5 = *((id *)v4 - 1);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v7) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v5;
    *(_OWORD *)(v2[7] + 16 * result) = v11;
    uint64_t v8 = v2[2];
    uint64_t v9 = __OFADD__(v8, 1);
    BOOL v10 = v8 + 1;
    if (v9) {
      goto LABEL_11;
    }
    v2[2] = v10;
    unsigned __int8 v4 = (_OWORD *)((char *)v4 + 24);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  _OWORD *v4;
  id v5;
  unint64_t result;
  char v7;
  _OWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  long long v12;
  long long v13;
  long long v14;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<UIDragItem, CGAffineTransform>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (_OWORD *)(a1 + 40);
  while (1)
  {
    uint64_t v13 = v4[1];
    char v14 = *v4;
    uint64_t v12 = v4[2];
    uint64_t v5 = *((id *)v4 - 1);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if (v7) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v2[6] + 8 * result) = v5;
    uint64_t v8 = (_OWORD *)(v2[7] + 48 * result);
    void *v8 = v14;
    v8[1] = v13;
    void v8[2] = v12;
    uint64_t v9 = v2[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v2[2] = v11;
    unsigned __int8 v4 = (_OWORD *)((char *)v4 + 56);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  unsigned char *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (char *)(a1 + 50);
  while (1)
  {
    uint64_t v5 = *(void *)(v4 - 18);
    double v6 = *(void *)(v4 - 10);
    char v7 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    uint64_t v9 = *v4;
    outlined copy of TabCustomizationID.Base();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6, v7);
    if (v11) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = v2[6] + 24 * result;
    *(void *)uint64_t v12 = v5;
    *(void *)(v12 + 8) = v6;
    *(unsigned char *)(v12 + 16) = v7;
    uint64_t v13 = (unsigned char *)(v2[7] + 2 * result);
    *uint64_t v13 = v8;
    v13[1] = v9;
    char v14 = v2[2];
    uint64_t v15 = __OFADD__(v14, 1);
    unint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v4 += 24;
    v2[2] = v16;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!*(void *)(a1 + 16))
  {
    double v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, TabEntry>();
  id v2 = static _DictionaryStorage.allocate(capacity:)();
  double v3 = (void *)v2;
  unsigned __int8 v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  double v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (String, Any)(v6, (uint64_t)&v15, &lazy cache variable for type metadata for (String, TabEntry));
    char v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = outlined init with take of TabEntry((uint64_t)&v17, v3[7] + 272 * result);
    uint64_t v12 = v3[2];
    uint64_t v13 = __OFADD__(v12, 1);
    char v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 288;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, Int>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v5 = *(v4 - 2);
    double v6 = *(v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v9) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    BOOL v10 = (uint64_t *)(v2[6] + 16 * result);
    *BOOL v10 = v5;
    v10[1] = v6;
    *(void *)(v2[7] + 8 * result) = v7;
    uint64_t v11 = v2[2];
    uint64_t v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;

  if (!*(void *)(a1 + 16))
  {
    double v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<PartialKeyPath<UISplitViewController>, Any>();
  id v2 = static _DictionaryStorage.allocate(capacity:)();
  double v3 = (void *)v2;
  unsigned __int8 v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  double v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (NSFileWrapper, UTType)(v6, (uint64_t)&v13, (uint64_t (*)(void))type metadata accessor for (PartialKeyPath<UISplitViewController>, Any));
    char v7 = v13;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)outlined init with take of Any(&v14, (_OWORD *)(v3[7] + 32 * result));
    BOOL v10 = v3[2];
    uint64_t v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t result;
  char v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  void v24[2];

  type metadata accessor for (NSFileWrapper, UTType)();
  double v3 = v2;
  unsigned __int8 v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  double v6 = (void *)((char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<NSFileWrapper, UTType>();
  char v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  BOOL v10 = (char *)v6 + *(int *)(v3 + 48);
  uint64_t v11 = v7 + 64;
  uint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v24[1] = a1;
  uint64_t v13 = a1 + v12;
  char v14 = *(void *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (NSFileWrapper, UTType)(v13, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for (NSFileWrapper, UTType));
    uint64_t v15 = *v6;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*v6);
    if (v17) {
      break;
    }
    uint64_t v18 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v8[6] + 8 * result) = v15;
    uint64_t v19 = v8[7];
    uint64_t v20 = type metadata accessor for UTType();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v19 + *(void *)(*(void *)(v20 - 8) + 72) * v18, v10, v20);
    uint64_t v21 = v8[2];
    uint64_t v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    void v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void v23[2];

  type metadata accessor for (UUID, UIMenuIdentifier)(0, (unint64_t *)&lazy cache variable for type metadata for (UUID, UIMenuIdentifier), type metadata accessor for UIMenuIdentifier);
  double v3 = v2;
  unsigned __int8 v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  double v6 = (char *)v23 - v5;
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<UUID, UIMenuIdentifier>(0, &lazy cache variable for type metadata for _DictionaryStorage<UUID, UIMenuIdentifier>, type metadata accessor for UIMenuIdentifier);
  char v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  BOOL v10 = *(int *)(v3 + 48);
  uint64_t v11 = v7 + 64;
  uint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  char v14 = *(void *)(v4 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of (UUID, UIMenuIdentifier)(v13, (uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for (UUID, UIMenuIdentifier), type metadata accessor for UIMenuIdentifier);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v6);
    if (v16) {
      break;
    }
    uint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v6, v19);
    *(void *)(v8[7] + 8 * v17) = *(void *)&v6[v10];
    uint64_t v20 = v8[2];
    uint64_t v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    void v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  char v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  long long v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unsigned char v16[48];
  long long v17;
  uint64_t v18;
  char v19;
  long long v20;
  char v21;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>, type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>)), (void (*)(void))lazy protocol witness table accessor for type TableRowID and conformance TableRowID);
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  unsigned __int8 v4 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of (AnyHashable, PassthroughSubject<Any, Never>)(v4, (uint64_t)v16, &lazy cache variable for type metadata for (TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))), type metadata accessor for (Int, (CountingIndex<Int>, CountingIndex<Int>)));
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
    if (v6) {
      break;
    }
    char v7 = result;
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    unint64_t result = outlined init with take of TableRowID((uint64_t)v16, v2[6] + 48 * result);
    uint64_t v8 = v2[7] + 56 * v7;
    uint64_t v9 = v18;
    BOOL v10 = v19;
    uint64_t v11 = v21;
    uint64_t v12 = v20;
    *(_OWORD *)uint64_t v8 = v17;
    *(void *)(v8 + 16) = v9;
    *(unsigned char *)(v8 + 24) = v10;
    *(_OWORD *)(v8 + 32) = v12;
    *(unsigned char *)(v8 + 48) = v11;
    uint64_t v13 = v2[2];
    char v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v2[2] = v15;
    v4 += 104;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  void *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(void *)(a1 + 16))
  {
    id v2 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  type metadata accessor for _DictionaryStorage<String, String>();
  id v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  double v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  unsigned __int8 v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    double v6 = *(v4 - 2);
    uint64_t v8 = *(v4 - 1);
    char v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v2[6] + 16 * result);
    *uint64_t v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (void *)(v2[7] + 16 * result);
    *uint64_t v12 = v8;
    v12[1] = v7;
    uint64_t v13 = v2[2];
    char v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  char *v4;
  int v5;
  char v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AdaptableTabBarPlacement, Visibility>, (void (*)(void))lazy protocol witness table accessor for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement);
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = (char *)(a1 + 33);
  do
  {
    uint64_t v5 = *(v4 - 1);
    if (v5 == 3) {
      break;
    }
    double v6 = *v4;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(v4 - 1));
    if (v8)
    {
      __break(1u);
LABEL_11:
      __break(1u);
      return result;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v5;
    *(unsigned char *)(v3[7] + result) = v6;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      goto LABEL_11;
    }
    v4 += 2;
    v3[2] = v11;
    --v1;
  }
  while (v1);
  return (unint64_t)v3;
}

{
  uint64_t v1;
  void *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  void *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char v14;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.Relationship, [AccessibilityNode]>();
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v8 = (void *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v12 = v8 + 2;
    unsigned __int8 v4 = *((unsigned char *)v8 - 8);
    uint64_t v13 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    uint64_t v8 = v12;
    uint64_t v5 = v13;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  unint64_t result;
  char v5;
  long long *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  long long v11;
  char v12;
  long long v13;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ContainerBackgroundKeys.AnyCustomKey, AnyView>, (void (*)(void))lazy protocol witness table accessor for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey);
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v13 = *(_OWORD *)(a1 + 32);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)(a1 + 32));
  if (v5)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  double v6 = (long long *)(a1 + 48);
  char v7 = v1 - 1;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v13;
    *(void *)(v3[7] + 8 * result) = *((void *)&v13 + 1);
    uint64_t v8 = v3[2];
    uint64_t v9 = __OFADD__(v8, 1);
    BOOL v10 = v8 + 1;
    if (v9) {
      break;
    }
    v3[2] = v10;
    if (!v7) {
      goto LABEL_8;
    }
    uint64_t v11 = *v6++;
    uint64_t v13 = v11;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
    --v7;
    if (v12) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  Swift::UInt v5;
  Swift::UInt v6;
  unint64_t result;
  char v8;
  Swift::UInt *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  Swift::UInt v13;
  Swift::UInt v14;
  long long v15;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<EventID, EventType>();
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = a1 + 32; ; i += 56)
    {
      outlined init with copy of (NSFileWrapper, UTType)(i, (uint64_t)&v13, (uint64_t (*)(void))type metadata accessor for (EventID, EventType));
      uint64_t v5 = v13;
      double v6 = v14;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v13, v14);
      if (v8) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v9 = (Swift::UInt *)(v3[6] + 16 * result);
      *uint64_t v9 = v5;
      v9[1] = v6;
      unint64_t result = outlined init with take of OptionalBinaryInteger(&v15, v3[7] + 40 * result);
      BOOL v10 = v3[2];
      uint64_t v11 = __OFADD__(v10, 1);
      uint64_t v12 = v10 + 1;
      if (v11) {
        goto LABEL_10;
      }
      v3[2] = v12;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(void))type metadata accessor for _DictionaryStorage<ObjectIdentifier, Int>, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v1;
  void *v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  int v12;
  unint64_t result;
  char v14;
  _OWORD *v15;
  uint64_t v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  char v40;
  unsigned char v41[256];

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, AlertStorage>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = *(_OWORD *)(a1 + 240);
  *(_OWORD *)&v41[192] = *(_OWORD *)(a1 + 224);
  *(_OWORD *)&v41[208] = v4;
  uint64_t v5 = *(_OWORD *)(a1 + 272);
  *(_OWORD *)&v41[224] = *(_OWORD *)(a1 + 256);
  *(_OWORD *)&v41[240] = v5;
  double v6 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)&v41[128] = *(_OWORD *)(a1 + 160);
  *(_OWORD *)&v41[144] = v6;
  char v7 = *(_OWORD *)(a1 + 208);
  *(_OWORD *)&v41[160] = *(_OWORD *)(a1 + 192);
  *(_OWORD *)&v41[176] = v7;
  uint64_t v8 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)&v41[64] = *(_OWORD *)(a1 + 96);
  *(_OWORD *)&v41[80] = v8;
  uint64_t v9 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)&v41[96] = *(_OWORD *)(a1 + 128);
  *(_OWORD *)&v41[112] = v9;
  BOOL v10 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)char v41 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v41[16] = v10;
  uint64_t v11 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v41[32] = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v41[48] = v11;
  uint64_t v12 = *(_DWORD *)v41;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt32 *)v41);
  if (v14)
  {
LABEL_7:
    __break(1u);
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v15 = (_OWORD *)(a1 + 288);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v12;
    unint64_t v16 = v3[7] + 248 * result;
    uint64_t v17 = *(_OWORD *)&v41[8];
    uint64_t v18 = *(_OWORD *)&v41[24];
    uint64_t v19 = *(_OWORD *)&v41[56];
    *(_OWORD *)(v16 + 32) = *(_OWORD *)&v41[40];
    *(_OWORD *)(v16 + 48) = v19;
    *(_OWORD *)unint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t v20 = *(_OWORD *)&v41[72];
    uint64_t v21 = *(_OWORD *)&v41[88];
    uint64_t v22 = *(_OWORD *)&v41[120];
    *(_OWORD *)(v16 + 96) = *(_OWORD *)&v41[104];
    *(_OWORD *)(v16 + 112) = v22;
    *(_OWORD *)(v16 + 64) = v20;
    *(_OWORD *)(v16 + 80) = v21;
    uint64_t v23 = *(_OWORD *)&v41[136];
    uint64_t v24 = *(_OWORD *)&v41[152];
    uint64_t v25 = *(_OWORD *)&v41[184];
    *(_OWORD *)(v16 + 160) = *(_OWORD *)&v41[168];
    *(_OWORD *)(v16 + 176) = v25;
    *(_OWORD *)(v16 + 128) = v23;
    *(_OWORD *)(v16 + 144) = v24;
    uint64_t v26 = *(_OWORD *)&v41[200];
    uint64_t v27 = *(_OWORD *)&v41[216];
    unint64_t v28 = *(_OWORD *)&v41[232];
    *(void *)(v16 + 240) = *(void *)&v41[248];
    *(_OWORD *)(v16 + 208) = v27;
    *(_OWORD *)(v16 + 224) = v28;
    *(_OWORD *)(v16 + 192) = v26;
    uint64_t v29 = v3[2];
    uint64_t v30 = __OFADD__(v29, 1);
    uint64_t v31 = v29 + 1;
    if (v30) {
      break;
    }
    v3[2] = v31;
    outlined retain of (ViewIdentity, AlertStorage)(v41);
    if (!--v1) {
      return (unint64_t)v3;
    }
    uint64_t v32 = v15[13];
    *(_OWORD *)&v41[192] = v15[12];
    *(_OWORD *)&v41[208] = v32;
    uint64_t v33 = v15[15];
    *(_OWORD *)&v41[224] = v15[14];
    *(_OWORD *)&v41[240] = v33;
    uint64_t v34 = v15[9];
    *(_OWORD *)&v41[128] = v15[8];
    *(_OWORD *)&v41[144] = v34;
    uint64_t v35 = v15[11];
    *(_OWORD *)&v41[160] = v15[10];
    *(_OWORD *)&v41[176] = v35;
    unint64_t v36 = v15[5];
    *(_OWORD *)&v41[64] = v15[4];
    *(_OWORD *)&v41[80] = v36;
    uint64_t v37 = v15[7];
    *(_OWORD *)&v41[96] = v15[6];
    *(_OWORD *)&v41[112] = v37;
    long long v38 = v15[1];
    *(_OWORD *)char v41 = *v15;
    *(_OWORD *)&v41[16] = v38;
    uint64_t v39 = v15[3];
    *(_OWORD *)&v41[32] = v15[2];
    *(_OWORD *)&v41[48] = v39;
    uint64_t v12 = *(_DWORD *)v41;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(Swift::UInt32 *)v41);
    v15 += 16;
    if (v40) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  Swift::UInt32 v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  Swift::UInt32 v11;
  uint64_t v12;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, ConfirmationDialog>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = a1 + 32; ; i += 192)
    {
      outlined init with copy of (String, Any)(i, (uint64_t)&v11, &lazy cache variable for type metadata for (ViewIdentity, ConfirmationDialog));
      uint64_t v5 = v11;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v11);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v3[6] + 4 * result) = v5;
      unint64_t result = outlined init with take of ConfirmationDialog((uint64_t)&v12, v3[7] + 184 * result);
      uint64_t v8 = v3[2];
      uint64_t v9 = __OFADD__(v8, 1);
      BOOL v10 = v8 + 1;
      if (v9) {
        goto LABEL_10;
      }
      v3[2] = v10;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  Swift::UInt32 v4;
  unint64_t result;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _OWORD *v11;
  char v12;
  long long v13;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, (_:)>, (void (*)(uint64_t))type metadata accessor for (_:), (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = *(_DWORD *)(a1 + 32);
  uint64_t v13 = *(_OWORD *)(a1 + 40);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v6)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  char v7 = (_OWORD *)(a1 + 64);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_DWORD *)(v3[6] + 4 * result) = v4;
    *(_OWORD *)(v3[7] + 16 * result) = v13;
    uint64_t v8 = v3[2];
    uint64_t v9 = __OFADD__(v8, 1);
    BOOL v10 = v8 + 1;
    if (v9) {
      break;
    }
    v3[2] = v10;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v11 = (_OWORD *)((char *)v7 + 24);
    unsigned __int8 v4 = *((_DWORD *)v7 - 2);
    uint64_t v13 = *v7;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    char v7 = v11;
    if (v12) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  long long *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  _DWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  id v15;
  long long v16;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.Index.ID, DisplayList.AccessibilityUpdater.CacheValue>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.Index.ID and conformance DisplayList.Index.ID);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (long long *)(a1 + 48); ; i += 2)
    {
      uint64_t v5 = *((unsigned int *)i - 4);
      double v6 = *((unsigned int *)i - 3);
      char v7 = *((unsigned int *)i - 2);
      uint64_t v8 = *((unsigned int *)i - 1);
      unint64_t v16 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5 | (v6 << 32), v7 | (v8 << 32));
      if (v10) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v11 = (_DWORD *)(v3[6] + 16 * result);
      *uint64_t v11 = v5;
      v11[1] = v6;
      void v11[2] = v7;
      void v11[3] = v8;
      *(_OWORD *)(v3[7] + 16 * result) = v16;
      uint64_t v12 = v3[2];
      uint64_t v13 = __OFADD__(v12, 1);
      char v14 = v12 + 1;
      if (v13) {
        goto LABEL_10;
      }
      v3[2] = v14;
      uint64_t v15 = (id)v16;
      swift_bridgeObjectRetain();
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (void (*)(void))type metadata accessor for _DictionaryStorage<Int, Int>, (uint64_t (*)(uint64_t))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v1;
  void *v3;
  Swift::UInt v4;
  unint64_t result;
  char v6;
  _OWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _OWORD *v11;
  char v12;
  long long v13;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<KeyCommandID, ()>, (void (*)(uint64_t))type metadata accessor for (), (void (*)(void))lazy protocol witness table accessor for type KeyCommandID and conformance KeyCommandID);
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = *(void *)(a1 + 32);
  uint64_t v13 = *(_OWORD *)(a1 + 40);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v6)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  char v7 = (_OWORD *)(a1 + 64);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    *(_OWORD *)(v3[7] + 16 * result) = v13;
    uint64_t v8 = v3[2];
    uint64_t v9 = __OFADD__(v8, 1);
    BOOL v10 = v8 + 1;
    if (v9) {
      break;
    }
    v3[2] = v10;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v11 = (_OWORD *)((char *)v7 + 24);
    unsigned __int8 v4 = *((void *)v7 - 1);
    uint64_t v13 = *v7;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    char v7 = v11;
    if (v12) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  long long v4;
  long long v5;
  long long v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  long long *v11;
  void *v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  long long v26;
  long long v27;
  long long v28;
  char v29;
  long long v30;
  long long v31;
  unsigned char v32[64];
  unsigned char v33[25];

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, TouchEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)&v32[32] = *(_OWORD *)(a1 + 96);
  *(_OWORD *)&v32[48] = v4;
  *(_OWORD *)uint64_t v33 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)&v33[9] = *(_OWORD *)(a1 + 137);
  uint64_t v5 = *(_OWORD *)(a1 + 48);
  uint64_t v30 = *(_OWORD *)(a1 + 32);
  uint64_t v31 = v5;
  double v6 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)uint64_t v32 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v32[16] = v6;
  uint64_t v8 = *((void *)&v30 + 1);
  char v7 = v30;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v30, *((Swift::UInt *)&v30 + 1));
  if (v10)
  {
LABEL_7:
    __break(1u);
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v11 = (long long *)(a1 + 160);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v12 = (void *)(v3[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v3[7] + 112 * result;
    char v14 = BYTE8(v31);
    uint64_t v15 = *(void *)v32;
    unint64_t v16 = *(void *)&v32[56];
    uint64_t v17 = *(void *)v33;
    uint64_t v18 = v33[24];
    uint64_t v19 = *(_OWORD *)&v32[8];
    uint64_t v20 = *(_OWORD *)&v32[24];
    uint64_t v21 = *(_OWORD *)&v32[40];
    uint64_t v22 = *(_OWORD *)&v33[8];
    *(void *)uint64_t v13 = v31;
    *(unsigned char *)(v13 + 8) = v14;
    *(void *)(v13 + 16) = v15;
    *(_OWORD *)(v13 + 24) = v19;
    *(_OWORD *)(v13 + 40) = v20;
    *(_OWORD *)(v13 + 56) = v21;
    *(void *)(v13 + 72) = v16;
    *(void *)(v13 + 80) = v17;
    *(_OWORD *)(v13 + 88) = v22;
    *(unsigned char *)(v13 + 104) = v18;
    uint64_t v23 = v3[2];
    uint64_t v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      break;
    }
    v3[2] = v25;
    outlined retain of CoreGlue2.LinkURLParameters((uint64_t)&v30);
    if (!--v1) {
      return (unint64_t)v3;
    }
    uint64_t v26 = v11[5];
    *(_OWORD *)&v32[32] = v11[4];
    *(_OWORD *)&v32[48] = v26;
    *(_OWORD *)uint64_t v33 = v11[6];
    *(_OWORD *)&v33[9] = *(long long *)((char *)v11 + 105);
    uint64_t v27 = v11[1];
    uint64_t v30 = *v11;
    uint64_t v31 = v27;
    unint64_t v28 = v11[3];
    *(_OWORD *)uint64_t v32 = v11[2];
    *(_OWORD *)&v32[16] = v28;
    uint64_t v8 = *((void *)&v30 + 1);
    char v7 = v30;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v30, *((Swift::UInt *)&v30 + 1));
    v11 += 8;
    if (v29) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  Swift::UInt v4;
  Swift::UInt v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  unsigned char *v12;
  Swift::UInt *v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  unsigned char *v18;
  uint64_t v19;
  char v20;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, PhysicalButtonEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  double v6 = *(void *)(a1 + 48);
  char v7 = *(unsigned char *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(unsigned char *)(a1 + 72);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if (v11)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  uint64_t v12 = (unsigned char *)(a1 + 120);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v13 = (Swift::UInt *)(v3[6] + 16 * result);
    *uint64_t v13 = v4;
    v13[1] = v5;
    char v14 = v3[7] + 32 * result;
    *(void *)char v14 = v6;
    *(unsigned char *)(v14 + 8) = v7;
    *(void *)(v14 + 16) = v8;
    *(unsigned char *)(v14 + 24) = v9;
    uint64_t v15 = v3[2];
    unint64_t v16 = __OFADD__(v15, 1);
    uint64_t v17 = v15 + 1;
    if (v16) {
      break;
    }
    v3[2] = v17;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v18 = v12 + 48;
    unsigned __int8 v4 = *((void *)v12 - 5);
    uint64_t v5 = *((void *)v12 - 4);
    double v6 = *((void *)v12 - 3);
    char v7 = *(v12 - 16);
    uint64_t v19 = *((void *)v12 - 1);
    uint64_t v9 = *v12;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
    uint64_t v12 = v18;
    uint64_t v8 = v19;
    if (v20) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  long long v16;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Int, DragReorderableLayoutCoordinator.ChildFrame>();
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (uint64_t *)(a1 + 40); ; i += 7)
    {
      uint64_t v5 = *(i - 1);
      double v6 = *i;
      char v7 = i[1];
      uint64_t v8 = i[2];
      unint64_t v16 = *(_OWORD *)(i + 3);
      uint64_t v9 = i[5];
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v11) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      uint64_t v12 = v3[7] + 48 * result;
      *(void *)uint64_t v12 = v6;
      *(void *)(v12 + 8) = v7;
      *(void *)(v12 + 16) = v8;
      *(_OWORD *)(v12 + 24) = v16;
      *(void *)(v12 + 40) = v9;
      uint64_t v13 = v3[2];
      char v14 = __OFADD__(v13, 1);
      uint64_t v15 = v13 + 1;
      if (v14) {
        goto LABEL_10;
      }
      v3[2] = v15;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  _OWORD *i;
  unsigned __int8 v5;
  unint64_t result;
  char v7;
  _OWORD *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  long long v12;
  long long v13;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>, (void (*)(void))lazy protocol witness table accessor for type Axis and conformance Axis);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (_OWORD *)(a1 + 56); ; uint64_t i = (_OWORD *)((char *)i + 40))
    {
      uint64_t v5 = *((unsigned char *)i - 24);
      uint64_t v12 = *i;
      uint64_t v13 = *(i - 1);
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v7) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(unsigned char *)(v3[6] + result) = v5;
      uint64_t v8 = (_OWORD *)(v3[7] + 32 * result);
      void *v8 = v13;
      v8[1] = v12;
      uint64_t v9 = v3[2];
      BOOL v10 = __OFADD__(v9, 1);
      uint64_t v11 = v9 + 1;
      if (v10) {
        goto LABEL_10;
      }
      v3[2] = v11;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for [AccessibilityFocus.Match : Set<UniqueID>](0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityFocus.Match, Set<UniqueID>>, MEMORY[0x1E4FBBD58]);
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  LOBYTE(v4) = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v8 = (uint64_t *)(a1 + 56);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(unsigned char *)(v3[6] + result) = v4;
    *(void *)(v3[7] + 8 * result) = v5;
    uint64_t v9 = v3[2];
    BOOL v10 = __OFADD__(v9, 1);
    uint64_t v11 = v9 + 1;
    if (v10) {
      break;
    }
    v3[2] = v11;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v12 = v8 + 2;
    unsigned __int8 v4 = *((unsigned __int8 *)v8 - 8);
    uint64_t v13 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    uint64_t v8 = v12;
    uint64_t v5 = v13;
    if (v14) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;
  long long v17;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<Int, (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String)>();
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = *(void *)(a1 + 32);
  uint64_t v17 = *(_OWORD *)(a1 + 40);
  double v6 = *(void *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 64);
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = (uint64_t *)(a1 + 104);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v4;
    BOOL v10 = v3[7] + 32 * result;
    *(_OWORD *)BOOL v10 = v17;
    *(void *)(v10 + 16) = v6;
    *(void *)(v10 + 24) = v5;
    uint64_t v11 = v3[2];
    uint64_t v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    char v14 = v9 + 5;
    unsigned __int8 v4 = *(v9 - 4);
    uint64_t v17 = *(_OWORD *)(v9 - 3);
    double v6 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    uint64_t v9 = v14;
    uint64_t v5 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  Swift::UInt v5;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  Swift::UInt *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  long long v16;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, RawPanGesture.StateType.EventInfo>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = a1 + 40; ; i += 48)
    {
      uint64_t v5 = *(void *)(i - 8);
      double v6 = *(void *)i;
      char v7 = *(void *)(i + 8);
      unint64_t v16 = *(_OWORD *)(i + 16);
      uint64_t v8 = *(void *)(i + 32);
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, *(void *)i);
      if (v10) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v11 = (Swift::UInt *)(v3[6] + 16 * result);
      *uint64_t v11 = v5;
      v11[1] = v6;
      uint64_t v12 = v3[7] + 32 * result;
      *(void *)uint64_t v12 = v7;
      *(_OWORD *)(v12 + 8) = v16;
      *(void *)(v12 + 24) = v8;
      uint64_t v13 = v3[2];
      char v14 = __OFADD__(v13, 1);
      uint64_t v15 = v13 + 1;
      if (v14) {
        goto LABEL_10;
      }
      v3[2] = v15;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  unsigned char *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Int, (Int, CountingIndex<Int>)>();
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (unsigned char *)(a1 + 64); ; i += 40)
    {
      uint64_t v5 = *((void *)i - 4);
      double v6 = *((void *)i - 3);
      char v7 = *((void *)i - 2);
      uint64_t v8 = *((void *)i - 1);
      uint64_t v9 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v11) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(void *)(v3[6] + 8 * result) = v5;
      uint64_t v12 = v3[7] + 32 * result;
      *(void *)uint64_t v12 = v6;
      *(void *)(v12 + 8) = v7;
      *(void *)(v12 + 16) = v8;
      *(unsigned char *)(v12 + 24) = v9;
      uint64_t v13 = v3[2];
      char v14 = __OFADD__(v13, 1);
      uint64_t v15 = v13 + 1;
      if (v14) {
        goto LABEL_10;
      }
      v3[2] = v15;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  _OWORD *i;
  Swift::UInt v5;
  Swift::UInt v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  Swift::UInt *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  long long v17;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, HoverEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = (_OWORD *)(a1 + 72); ; uint64_t i = (_OWORD *)((char *)i + 56))
    {
      uint64_t v5 = *((void *)i - 5);
      double v6 = *((void *)i - 4);
      char v7 = *((void *)i - 3);
      uint64_t v8 = *((unsigned char *)i - 16);
      uint64_t v9 = *((void *)i - 1);
      uint64_t v17 = *i;
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
      if (v11) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v12 = (Swift::UInt *)(v3[6] + 16 * result);
      *uint64_t v12 = v5;
      v12[1] = v6;
      uint64_t v13 = v3[7] + 40 * result;
      *(void *)uint64_t v13 = v7;
      *(unsigned char *)(v13 + 8) = v8;
      *(void *)(v13 + 16) = v9;
      *(_OWORD *)(v13 + 24) = v17;
      char v14 = v3[2];
      uint64_t v15 = __OFADD__(v14, 1);
      unint64_t v16 = v14 + 1;
      if (v15) {
        goto LABEL_10;
      }
      v3[2] = v16;
      swift_retain();
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *v4;
  Swift::UInt v5;
  Swift::UInt v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t result;
  char v19;
  Swift::UInt *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, PanEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    unsigned __int8 v4 = (uint64_t *)(a1 + 72);
    while (1)
    {
      uint64_t v5 = *(v4 - 5);
      double v6 = *(v4 - 4);
      char v7 = *(v4 - 3);
      uint64_t v8 = *(v4 - 2);
      uint64_t v9 = *(v4 - 1);
      BOOL v10 = *v4;
      uint64_t v11 = *((unsigned char *)v4 + 8);
      uint64_t v12 = v4[2];
      uint64_t v13 = v4[3];
      char v14 = v4[4];
      uint64_t v15 = v4[5];
      unint64_t v16 = v4[6];
      uint64_t v25 = v4[7];
      uint64_t v17 = *((unsigned char *)v4 + 64);
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
      if (v19) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      uint64_t v20 = (Swift::UInt *)(v3[6] + 16 * result);
      *uint64_t v20 = v5;
      v20[1] = v6;
      uint64_t v21 = v3[7] + 96 * result;
      *(void *)uint64_t v21 = v7;
      *(void *)(v21 + 8) = v8;
      *(void *)(v21 + 16) = v9;
      *(void *)(v21 + 24) = v10;
      *(unsigned char *)(v21 + 32) = v11;
      *(void *)(v21 + 40) = v12;
      *(void *)(v21 + 48) = v13;
      *(void *)(v21 + 56) = v14;
      *(void *)(v21 + 64) = v15;
      *(void *)(v21 + 72) = v16;
      *(void *)(v21 + 80) = v25;
      *(unsigned char *)(v21 + 88) = v17;
      uint64_t v22 = v3[2];
      uint64_t v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23) {
        goto LABEL_10;
      }
      v4 += 14;
      v3[2] = v24;
      swift_retain();
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t i;
  Swift::UInt v5;
  Swift::UInt8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t result;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Spacing.Key, Spacing.Value>, (void (*)(void))lazy protocol witness table accessor for type Spacing.Key and conformance Spacing.Key);
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    for (uint64_t i = a1 + 40; ; i += 56)
    {
      uint64_t v5 = *(void *)(i - 8);
      double v6 = *(unsigned char *)i;
      char v7 = *(void *)(i + 8);
      uint64_t v8 = *(void *)(i + 16);
      uint64_t v9 = *(void *)(i + 24);
      BOOL v10 = *(void *)(i + 32);
      uint64_t v11 = *(unsigned char *)(i + 40);
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5, *(unsigned char *)i);
      if (v13) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      char v14 = v3[6] + 16 * result;
      *(void *)char v14 = v5;
      *(unsigned char *)(v14 + 8) = v6;
      uint64_t v15 = v3[7] + 40 * result;
      *(void *)uint64_t v15 = v7;
      *(void *)(v15 + 8) = v8;
      *(void *)(v15 + 16) = v9;
      *(void *)(v15 + 24) = v10;
      *(unsigned char *)(v15 + 32) = v11;
      unint64_t v16 = v3[2];
      uint64_t v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17) {
        goto LABEL_10;
      }
      v3[2] = v18;
      if (!--v1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t result;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _DictionaryStorage<UInt32, ScrollViewCommitInfo>();
    double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
    unsigned __int8 v4 = (uint64_t *)(a1 + 56);
    while (1)
    {
      uint64_t v19 = v1;
      uint64_t v5 = *((_DWORD *)v4 - 6);
      double v6 = *(v4 - 2);
      char v7 = *(v4 - 1);
      uint64_t v8 = *v4;
      uint64_t v9 = v4[1];
      uint64_t v11 = v4[2];
      BOOL v10 = v4[3];
      uint64_t v21 = v4[5];
      uint64_t v22 = v4[4];
      uint64_t v12 = v4[7];
      uint64_t v20 = v4[6];
      unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
      if (v14) {
        break;
      }
      *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v3[6] + 4 * result) = v5;
      uint64_t v15 = (uint64_t *)(v3[7] + 80 * result);
      *uint64_t v15 = v6;
      v15[1] = v7;
      v15[2] = v8;
      v15[3] = v9;
      v15[4] = v11;
      v15[5] = v10;
      v15[6] = v22;
      v15[7] = v21;
      v15[8] = v20;
      v15[9] = v12;
      unint64_t v16 = v3[2];
      uint64_t v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17) {
        goto LABEL_10;
      }
      v4 += 11;
      v3[2] = v18;
      outlined copy of ScrollViewCommitInfo(v6, v7, v8, v9, v11, v10, v22, v21, v20);
      uint64_t v1 = v19 - 1;
      if (v19 == 1) {
        return (unint64_t)v3;
      }
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC868];
  }
  return result;
}

{
  uint64_t v1;
  void *v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  _OWORD *v12;
  uint64_t v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  char v31;
  unsigned char v32[187];

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<Int, Image.Resolved>();
  double v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  unsigned __int8 v4 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)&v32[128] = *(_OWORD *)(a1 + 160);
  *(_OWORD *)&v32[144] = v4;
  *(_OWORD *)&v32[160] = *(_OWORD *)(a1 + 192);
  *(_OWORD *)&v32[171] = *(_OWORD *)(a1 + 203);
  uint64_t v5 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)&v32[64] = *(_OWORD *)(a1 + 96);
  *(_OWORD *)&v32[80] = v5;
  double v6 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)&v32[96] = *(_OWORD *)(a1 + 128);
  *(_OWORD *)&v32[112] = v6;
  char v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)uint64_t v32 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)&v32[16] = v7;
  uint64_t v8 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)&v32[32] = *(_OWORD *)(a1 + 64);
  *(_OWORD *)&v32[48] = v8;
  uint64_t v9 = *(void *)v32;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(uint64_t *)v32);
  if (v11)
  {
LABEL_7:
    __break(1u);
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v12 = (_OWORD *)(a1 + 224);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v9;
    uint64_t v13 = v3[7] + 184 * result;
    char v14 = *(_OWORD *)&v32[8];
    uint64_t v15 = *(_OWORD *)&v32[24];
    unint64_t v16 = *(_OWORD *)&v32[56];
    *(_OWORD *)(v13 + 32) = *(_OWORD *)&v32[40];
    *(_OWORD *)(v13 + 48) = v16;
    *(_OWORD *)uint64_t v13 = v14;
    *(_OWORD *)(v13 + 16) = v15;
    uint64_t v17 = *(_OWORD *)&v32[72];
    uint64_t v18 = *(_OWORD *)&v32[88];
    uint64_t v19 = *(_OWORD *)&v32[120];
    *(_OWORD *)(v13 + 96) = *(_OWORD *)&v32[104];
    *(_OWORD *)(v13 + 112) = v19;
    *(_OWORD *)(v13 + 64) = v17;
    *(_OWORD *)(v13 + 80) = v18;
    uint64_t v20 = *(_OWORD *)&v32[136];
    uint64_t v21 = *(_OWORD *)&v32[152];
    uint64_t v22 = *(_OWORD *)&v32[168];
    *(_DWORD *)(v13 + 175) = *(_DWORD *)&v32[183];
    *(_OWORD *)(v13 + 144) = v21;
    *(_OWORD *)(v13 + 160) = v22;
    *(_OWORD *)(v13 + 128) = v20;
    uint64_t v23 = v3[2];
    uint64_t v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      break;
    }
    v3[2] = v25;
    outlined retain of (Int, Image.Resolved)((uint64_t)v32);
    if (!--v1) {
      return (unint64_t)v3;
    }
    uint64_t v26 = v12[9];
    *(_OWORD *)&v32[128] = v12[8];
    *(_OWORD *)&v32[144] = v26;
    *(_OWORD *)&v32[160] = v12[10];
    *(_OWORD *)&v32[171] = *(_OWORD *)((char *)v12 + 171);
    uint64_t v27 = v12[5];
    *(_OWORD *)&v32[64] = v12[4];
    *(_OWORD *)&v32[80] = v27;
    unint64_t v28 = v12[7];
    *(_OWORD *)&v32[96] = v12[6];
    *(_OWORD *)&v32[112] = v28;
    uint64_t v29 = v12[1];
    *(_OWORD *)uint64_t v32 = *v12;
    *(_OWORD *)&v32[16] = v29;
    uint64_t v30 = v12[3];
    *(_OWORD *)&v32[32] = v12[2];
    *(_OWORD *)&v32[48] = v30;
    uint64_t v9 = *(void *)v32;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(uint64_t *)v32);
    v12 += 12;
    if (v31) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

Swift::Void __swiftcall _UIHostingView.updateRootView()()
{
  uint64_t v1 = *MEMORY[0x1E4FBC8C8] & *v0;
  type metadata accessor for ModifiedContent();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v9 - v4;
  uint64_t v6 = swift_retain();
  _UIHostingView.makeRootView()(v6, (uint64_t)v5);
  uint64_t v7 = *(void *)(v1 + 88);
  unint64_t v8 = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
  _OWORD v9[2] = v7;
  v9[3] = v8;
  v9[0] = swift_getWitnessTable();
  v9[1] = MEMORY[0x1E4F40960];
  swift_getWitnessTable();
  ViewGraph.setRootView<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type EditModeScopeModifier and conformance EditModeScopeModifier;
  if (!lazy protocol witness table cache variable for type EditModeScopeModifier and conformance EditModeScopeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EditModeScopeModifier and conformance EditModeScopeModifier);
  }
  return result;
}

uint64_t _UIHostingView.makeRootView()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v20[0] = a2;
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 + 0x50);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v8 = (char *)v20 - v7;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v20 - v12;
  char v14 = (void *)MEMORY[0x18C119DF0]((char *)v2 + *(void *)(v3 + 192), v11);
  uint64_t v15 = v14;
  if (v14) {

  }
  uint64_t v16 = *(void *)(v4 + 88);
  type metadata accessor for _UIHostingView();
  CoreCoordinator.dataSource.getter((uint64_t)v8);
  v21[0] = v15 != 0;
  v21[8] = 0;
  uint64_t v22 = 0;
  MEMORY[0x18C113660](v21, v5, &type metadata for EditModeScopeModifier, v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_getWitnessTable();
  unint64_t v17 = lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
  v20[1] = v16;
  v20[2] = v17;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](WitnessTable, v9, MEMORY[0x1E4F40968], WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t destroy for TouchEvent()
{
  return swift_release();
}

uint64_t CoreCoordinator.dataSource.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = (char *)v1 + *(void *)(v3 + 0x60);
  swift_beginAccess();
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)(*(void *)(v3 + 80) - 8) + 16))(a1, v4);
}

uint64_t _UIHostingView.eventBindingManager.getter()
{
  uint64_t v0 = _UIHostingView.base.getter()[10];
  swift_retain();
  swift_release();
  return v0;
}

uint64_t specialized DeprecatedAlertBridge.host.setter()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t specialized DeprecatedAlertBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

id DeprecatedAlertBridge.__allocating_init(style:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return DeprecatedAlertBridge.init(style:)(a1);
}

id DeprecatedAlertBridge.init(style:)(uint64_t a1)
{
  id v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *v1;
  swift_unknownObjectWeakInit();
  *((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0x78)) = 0;
  *(_DWORD *)((char *)v1 + *(void *)((*v3 & *v1) + 0x80)) = 0;
  *(void *)((char *)v1 + *(void *)((*v3 & *v1) + 0x88)) = 0;
  uint64_t v5 = v1;
  EnvironmentValues.init()();
  uint64_t v6 = *(void *)(v4 + 88);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(&v5[*(void *)((*v3 & *(void *)v5) + 0x98)], 1, 1, v6);
  v5[*(void *)((*v3 & *(void *)v5) + 0xA0)] = 0;
  *(void *)&v5[*(void *)((*v3 & *(void *)v5) + 0xA8)] = a1;

  uint64_t v8 = *(void *)(v4 + 80);
  long long v9 = *(_OWORD *)(v4 + 96);
  v10.id receiver = v5;
  v10.Class super_class = (Class)type metadata accessor for DeprecatedAlertBridge();
  return objc_msgSendSuper2(&v10, sel_init, v8, v6, v9);
}

uint64_t type metadata accessor for DeprecatedAlertBridge()
{
  return swift_getGenericMetadata();
}

uint64_t storeEnumTagSinglePayload for ActionSheet.Presentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 168) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 168) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Alert.Presentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 280) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 280) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for FocusBridge()
{
  return self;
}

uint64_t type metadata accessor for UIHostingViewBase()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph;
  if (!lazy protocol witness table cache variable for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListViewGraph and conformance PlatformItemListViewGraph);
  }
  return result;
}

Swift::Void __swiftcall UIHostingViewBase.setUpNotifications()()
{
  id v1 = objc_msgSend(self, sel_defaultCenter);
  uint64_t v2 = (void *)MEMORY[0x18C115780](0xD000000000000032, 0x8000000188336FE0);
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_willBeginSnapshotSession, v2, 0);

  id v3 = (void *)MEMORY[0x18C115780](0xD00000000000002FLL, 0x8000000188337020);
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_didEndSnapshotSession, v3, 0);

  type metadata accessor for _ContiguousArrayStorage<NSNotificationName>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NSNotificationName>, (uint64_t (*)(uint64_t))type metadata accessor for NSNotificationName, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB70;
  uint64_t v5 = (void *)*MEMORY[0x1E4F1C370];
  uint64_t v6 = (void *)*MEMORY[0x1E4F1C4F8];
  *(void *)(inited + 32) = *MEMORY[0x1E4F1C370];
  *(void *)(inited + 40) = v6;
  uint64_t v7 = (void *)*MEMORY[0x1E4FB2E98];
  id v8 = v5;
  id v9 = v6;
  id v10 = v7;
  double v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)1, 3, 1, (void *)inited);
  void v11[2] = 3;
  v11[6] = v10;
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_externalEnvironmentDidChange, v11[4], 0);
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_externalEnvironmentDidChange, v11[5], 0);
  objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_externalEnvironmentDidChange, v11[6], 0);

  swift_bridgeObjectRelease();
}

void type metadata accessor for _ContiguousArrayStorage<NSNotificationName>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _ss23_ContiguousArrayStorageCySo18NSNotificationNameaGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<EventID, [KeyPress.Handler]>();
  id v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v4 = a1[4];
  Swift::UInt v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v10 = (Swift::UInt *)(v3[6] + 16 * result);
    *id v10 = v4;
    v10[1] = v5;
    *(void *)(v3[7] + 8 * result) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    char v14 = v9 + 3;
    Swift::UInt v4 = *(v9 - 2);
    Swift::UInt v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  Swift::UInt v4;
  Swift::UInt v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t *v9;
  Swift::UInt *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  char v16;

  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBinding>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  id v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v4 = a1[4];
  Swift::UInt v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  uint64_t v9 = a1 + 9;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v10 = (Swift::UInt *)(v3[6] + 16 * result);
    *id v10 = v4;
    v10[1] = v5;
    *(void *)(v3[7] + 8 * result) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    char v14 = v9 + 3;
    Swift::UInt v4 = *(v9 - 2);
    Swift::UInt v5 = *(v9 - 1);
    uint64_t v15 = *v9;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(0, &lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, Transaction>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  id v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v5 = a1[4];
  Swift::UInt v4 = a1[5];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  char v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    id v10 = v3[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    Swift::UInt v5 = *(v8 - 1);
    char v14 = *v8;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    char v8 = v13;
    Swift::UInt v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, PropertyList>();
  id v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v5 = a1[4];
  Swift::UInt v4 = a1[5];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_retain();
    return (unint64_t)v3;
  }
  char v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    id v10 = v3[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    Swift::UInt v5 = *(v8 - 1);
    char v14 = *v8;
    swift_retain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    char v8 = v13;
    Swift::UInt v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  char v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<Int, [ObjectIdentifier]>();
  id v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v5 = a1[4];
  Swift::UInt v4 = a1[5];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  char v8 = a1 + 7;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v5;
    *(void *)(v3[7] + v9) = v4;
    id v10 = v3[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    Swift::UInt v5 = *(v8 - 1);
    char v14 = *v8;
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    char v8 = v13;
    Swift::UInt v4 = v14;
    if (v15) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t result;
  char v8;
  void **v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  void **v14;
  void *v15;
  id v16;
  char v17;
  id v18;

  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<SensoryFeedback.FeedbackType, UIFeedbackGenerator>();
  id v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v4 = a1[4];
  Swift::UInt v5 = a1[5];
  uint64_t v6 = (void *)a1[6];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if (v8)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    uint64_t v18 = v6;
    return (unint64_t)v3;
  }
  uint64_t v9 = (void **)(a1 + 9);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    id v10 = (uint64_t *)(v3[6] + 16 * result);
    *id v10 = v4;
    v10[1] = v5;
    *(void *)(v3[7] + 8 * result) = v6;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1);
    uint64_t v13 = v11 + 1;
    if (v12) {
      break;
    }
    v3[2] = v13;
    if (!--v1) {
      goto LABEL_8;
    }
    char v14 = v9 + 3;
    Swift::UInt v4 = (uint64_t)*(v9 - 2);
    Swift::UInt v5 = (uint64_t)*(v9 - 1);
    uint64_t v15 = *v9;
    char v16 = v6;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
    uint64_t v9 = v14;
    uint64_t v6 = v15;
    if (v17) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  Swift::UInt v4;
  void *v5;
  unint64_t result;
  char v7;
  void **v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  void **v13;
  void *v14;
  id v15;
  char v16;
  id v17;

  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<UISplitViewControllerColumn, NavigationStackCoordinator<SplitColumnNavigationStrategy>>();
  id v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v4 = a1[4];
  Swift::UInt v5 = (void *)a1[5];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
  if (v7)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    unint64_t v17 = v5;
    return (unint64_t)v3;
  }
  char v8 = (void **)(a1 + 7);
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v3[6] + v9) = v4;
    *(void *)(v3[7] + v9) = v5;
    id v10 = v3[2];
    uint64_t v11 = __OFADD__(v10, 1);
    BOOL v12 = v10 + 1;
    if (v11) {
      break;
    }
    v3[2] = v12;
    if (!--v1) {
      goto LABEL_8;
    }
    uint64_t v13 = v8 + 2;
    Swift::UInt v4 = (Swift::UInt)*(v8 - 1);
    char v14 = *v8;
    uint64_t v15 = v5;
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4);
    char v8 = v13;
    Swift::UInt v5 = v14;
    if (v16) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t *v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  uint64_t v1 = a1[2];
  if (!v1) {
    return MEMORY[0x1E4FBC868];
  }
  type metadata accessor for _DictionaryStorage<Character, String>();
  id v3 = (void *)static _DictionaryStorage.allocate(capacity:)();
  Swift::UInt v4 = a1[4];
  Swift::UInt v5 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v6 = a1[7];
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v5);
  if (v9)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (unint64_t)v3;
  }
  id v10 = a1 + 11;
  while (1)
  {
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v4;
    v11[1] = v5;
    BOOL v12 = (void *)(v3[7] + 16 * result);
    *BOOL v12 = v7;
    v12[1] = v6;
    uint64_t v13 = v3[2];
    char v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      break;
    }
    v3[2] = v15;
    if (!--v1) {
      goto LABEL_8;
    }
    char v16 = v10 + 4;
    Swift::UInt v4 = *(v10 - 3);
    unint64_t v17 = *(v10 - 2);
    uint64_t v7 = *(v10 - 1);
    uint64_t v18 = *v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v4, v17);
    id v10 = v16;
    uint64_t v6 = v18;
    Swift::UInt v5 = v17;
    if (v19) {
      goto LABEL_7;
    }
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for UILargeContentViewerInteractionBridge()
{
  return self;
}

id UILargeContentViewerInteractionBridge.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_host + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_interaction] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_simultaneousGesture] = 0;
  uint64_t v2 = &v0[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_activeItem];
  *(_OWORD *)uint64_t v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((void *)v2 + 4) = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_largeContentViewTreeSeed] = 0;
  id v3 = &v0[OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_largeContentViewTree];
  _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi1_((uint64_t)v13);
  outlined init with take of AccessibilityLargeContentViewTree(v13, v3);
  uint64_t v4 = OBJC_IVAR____TtC7SwiftUI37UILargeContentViewerInteractionBridge_showLargeContentViewer;
  Swift::UInt v5 = self;
  uint64_t v6 = v0;
  v0[v4] = objc_msgSend(v5, sel_isEnabled);

  v12.id receiver = v6;
  v12.Class super_class = ObjectType;
  id v7 = objc_msgSendSuper2(&v12, sel_init);
  char v8 = self;
  id v9 = v7;
  id v10 = objc_msgSend(v8, sel_defaultCenter);
  objc_msgSend(v10, sel_addObserver_selector_name_object_, v9, sel_enabledStatusDidChange, *MEMORY[0x1E4FB2C60], 0);

  return v9;
}

_OWORD *protocol witness for static PreferenceKey.defaultValue.getter in conformance AccessibilityLargeContentViewTree.Key@<X0>(_OWORD *a1@<X8>)
{
  _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi1_((uint64_t)v3);
  return outlined init with take of AccessibilityLargeContentViewTree(v3, a1);
}

_OWORD *outlined init with take of AccessibilityLargeContentViewTree(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  long long v4 = a1[3];
  long long v5 = a1[4];
  long long v6 = a1[6];
  a2[5] = a1[5];
  a2[6] = v6;
  a2[3] = v4;
  a2[4] = v5;
  long long v7 = a1[7];
  long long v8 = a1[8];
  long long v9 = a1[10];
  a2[9] = a1[9];
  a2[10] = v9;
  a2[7] = v7;
  a2[8] = v8;
  long long v10 = a1[11];
  long long v11 = a1[12];
  long long v12 = a1[13];
  *(_OWORD *)((char *)a2 + 217) = *(long long *)((char *)a1 + 217);
  a2[12] = v11;
  a2[13] = v12;
  a2[11] = v10;
  return a2;
}

double _s7SwiftUI33AccessibilityLargeContentViewTreeOWOi1_(uint64_t a1)
{
  *(void *)(a1 + 224) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 232) = 0x80;
  return result;
}

unint64_t lazy protocol witness table accessor for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher()
{
  unint64_t result = lazy protocol witness table cache variable for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher;
  if (!lazy protocol witness table cache variable for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilDoubleTapEventDispatcher and conformance PencilDoubleTapEventDispatcher);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher()
{
  unint64_t result = lazy protocol witness table cache variable for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher;
  if (!lazy protocol witness table cache variable for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilSqueezeEventDispatcher and conformance PencilSqueezeEventDispatcher);
  }
  return result;
}

id @objc AVKitCaptureButtonBridge.init()()
{
  return AVKitCaptureButtonBridge.init()();
}

id AVKitCaptureButtonBridge.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(_DWORD *)&v0[direct field offset for AVKitCaptureButtonBridge.seedTracker] = -1;
  long long v2 = &v0[direct field offset for AVKitCaptureButtonBridge.dispatch];
  *(void *)long long v2 = 0;
  *((void *)v2 + 1) = 0;
  *(void *)&v0[direct field offset for AVKitCaptureButtonBridge.interaction] = 0;
  swift_unknownObjectWeakInit();
  v4.id receiver = v0;
  v4.Class super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

uint64_t type metadata accessor for UIKitEventBindingBridge()
{
  uint64_t result = type metadata singleton initialization cache for UIKitEventBindingBridge;
  if (!type metadata singleton initialization cache for UIKitEventBindingBridge) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t UIKitEventBindingBridge.init(eventBindingManager:)()
{
  v0[6] = 0;
  v0[8] = 0;
  uint64_t v1 = swift_retain();
  if ((MEMORY[0x18C111F70](v1) & 1) == 0)
  {
    id v2 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitGestureRecognizer()), sel_init);
    long long v3 = (void *)v0[6];
    v0[6] = v2;
  }
  v0[7] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitHoverGestureRecognizer()), sel_init);
  swift_release();
  swift_retain();
  uint64_t v4 = EventBindingBridge.init(eventBindingManager:)();
  long long v5 = *(void **)(v4 + 48);
  if (v5)
  {
    swift_weakAssign();
    uint64_t Strong = swift_weakLoadStrong();
    long long v7 = *(void (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v5) + 0x130);
    swift_retain_n();
    long long v8 = v5;
    v7(Strong);

    swift_release();
    swift_release_n();
  }
  swift_release();
  swift_weakAssign();
  return v4;
}

uint64_t type metadata accessor for UIKitHoverGestureRecognizer()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type AccessibilityViewGraph and conformance AccessibilityViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityViewGraph and conformance AccessibilityViewGraph;
  if (!lazy protocol witness table cache variable for type AccessibilityViewGraph and conformance AccessibilityViewGraph)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityViewGraph and conformance AccessibilityViewGraph);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HoverEventDispatcher and conformance HoverEventDispatcher()
{
  unint64_t result = lazy protocol witness table cache variable for type HoverEventDispatcher and conformance HoverEventDispatcher;
  if (!lazy protocol witness table cache variable for type HoverEventDispatcher and conformance HoverEventDispatcher)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEventDispatcher and conformance HoverEventDispatcher);
  }
  return result;
}

id @objc PencilEventsBridge.init()()
{
  return PencilEventsBridge.init()();
}

id PencilEventsBridge.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(_DWORD *)&v0[direct field offset for PencilEventsBridge.wantsPencilEventsSeed] = 0;
  *(void *)&v0[direct field offset for PencilEventsBridge.pencilInteraction] = 0;
  v0[direct field offset for PencilEventsBridge.preferredTapActionContext] = 0;
  v0[direct field offset for PencilEventsBridge.preferredSqueezeActionContext] = 0;
  *(void *)&v0[direct field offset for PencilEventsBridge.pencilDoubleTapSerial] = 0;
  *(void *)&v0[direct field offset for PencilEventsBridge.pencilSqueezeSerial] = 0;
  v3.id receiver = v0;
  v3.Class super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_init);
}

unint64_t lazy protocol witness table accessor for type KeyEventDispatcher and conformance KeyEventDispatcher()
{
  unint64_t result = lazy protocol witness table cache variable for type KeyEventDispatcher and conformance KeyEventDispatcher;
  if (!lazy protocol witness table cache variable for type KeyEventDispatcher and conformance KeyEventDispatcher)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyEventDispatcher and conformance KeyEventDispatcher);
  }
  return result;
}

id @objc ContextMenuBridge.init()()
{
  return ContextMenuBridge.init()();
}

id ContextMenuBridge.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(void *)&v0[direct field offset for ContextMenuBridge.interaction] = 0;
  v0[direct field offset for ContextMenuBridge.menuOrder] = 0;
  *(_DWORD *)&v0[direct field offset for ContextMenuBridge.hasContextMenuSeed] = 0;
  *(_DWORD *)&v0[direct field offset for ContextMenuBridge.menuOrderSeed] = 0;
  *(void *)&v0[direct field offset for ContextMenuBridge.inspectorBridgeToken] = 0;
  id v2 = &v0[direct field offset for ContextMenuBridge.presentedMenu];
  *(_DWORD *)id v2 = 0;
  v2[4] = 0;
  v4.id receiver = v0;
  v4.Class super_class = ObjectType;
  return objc_msgSendSuper2(&v4, sel_init);
}

id @objc DragAndDropBridge.init()()
{
  return DragAndDropBridge.init()();
}

id DragAndDropBridge.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(_DWORD *)&v0[direct field offset for DragAndDropBridge.hasDragItemsSeed] = 0;
  *(_DWORD *)&v0[direct field offset for DragAndDropBridge.dragTimingsSeed] = 0;
  *(void *)&v0[direct field offset for DragAndDropBridge.dragInteraction] = 0;
  *(_DWORD *)&v0[direct field offset for DragAndDropBridge.canDropSeed] = 0;
  *(void *)&v0[direct field offset for DragAndDropBridge.dropInteraction] = 0;
  *(_DWORD *)&v0[direct field offset for DragAndDropBridge.canSpringLoadSeed] = 0;
  *(void *)&v0[direct field offset for DragAndDropBridge.springLoadedInteraction] = 0;
  *(void *)&v0[direct field offset for DragAndDropBridge.activeSpringLoadedResponder] = 0;
  id v2 = &v0[direct field offset for DragAndDropBridge.activeDrop];
  *(_OWORD *)id v2 = xmmword_18834BB90;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *(_OWORD *)(v2 + 57) = 0u;
  objc_super v3 = &v0[direct field offset for DragAndDropBridge.onSessionBegan];
  *(void *)objc_super v3 = 0;
  *((void *)v3 + 1) = 0;
  objc_super v4 = &v0[direct field offset for DragAndDropBridge.onSessionEnded];
  *(void *)objc_super v4 = 0;
  *((void *)v4 + 1) = 0;
  v6.id receiver = v0;
  v6.Class super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for AnyDragAndDropBridge()
{
  return self;
}

id @objc EditMenuBridge.init()()
{
  return EditMenuBridge.init()();
}

id EditMenuBridge.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(void *)&v0[direct field offset for EditMenuBridge.interaction] = 0;
  *(_DWORD *)&v0[direct field offset for EditMenuBridge.editMenuPresentationSeed] = 0;
  id v2 = &v0[direct field offset for EditMenuBridge.lastEditMenuPresentation];
  *(_OWORD *)id v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  objc_super v3 = &v0[direct field offset for EditMenuBridge.presentedMenu];
  *((void *)v3 + 4) = 0;
  *(_OWORD *)objc_super v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *(_OWORD *)(v3 + 40) = xmmword_18834FC50;
  v5.id receiver = v0;
  v5.Class super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id @objc TooltipBridge.init()()
{
  return TooltipBridge.init()();
}

id TooltipBridge.init()()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  swift_unknownObjectWeakInit();
  *(_DWORD *)&v0[direct field offset for TooltipBridge.hasTooltipSeed] = 0;
  *(void *)&v0[direct field offset for TooltipBridge.tooltipInteraction] = 0;
  v3.id receiver = v0;
  v3.Class super_class = ObjectType;
  return objc_msgSendSuper2(&v3, sel_init);
}

uint64_t SheetBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t specialized SheetBridge.host.setter()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t type metadata accessor for UIKitSensoryFeedbackCache()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AVKitCaptureButtonBridge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for UIKitStatusBarBridge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PencilEventsBridge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for DragAndDropBridge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ContextMenuBridge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _UIHostingView.EnableVFDFeature()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _UIHostingView.HostViewGraph()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for EditMenuBridge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TooltipBridge()
{
  return __swift_instantiateGenericMetadata();
}

Swift::Void __swiftcall AVKitCaptureButtonBridge.addPreferences()()
{
  uint64_t v1 = MEMORY[0x18C119DF0](v0 + direct field offset for AVKitCaptureButtonBridge.host);
  if (v1)
  {
    id v2 = (void *)v1;
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();

    GraphHost.addPreference<A>(_:)();
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t add #1 <A><A1>(preference:) in UIKitStatusBarBridge.addPreferences(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return VersionSeedSetTracker.addPreference<A>(_:)(a1, a4, a5);
}

uint64_t VersionSeedSetTracker.addPreference<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *v3;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v6 + 16) + 1, 1, (char *)v6);
    uint64_t v6 = result;
  }
  unint64_t v9 = *(void *)(v6 + 16);
  unint64_t v8 = *(void *)(v6 + 24);
  if (v9 >= v8 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v8 > 1), v9 + 1, 1, (char *)v6);
    uint64_t v6 = result;
  }
  uint64_t v10 = *(void *)(a3 + 8);
  *(void *)(v6 + 16) = v9 + 1;
  unint64_t v11 = v6 + 24 * v9;
  *(void *)(v11 + 32) = a2;
  *(void *)(v11 + 40) = v10;
  *(_DWORD *)(v11 + 48) = -1;
  *objc_super v3 = v6;
  return result;
}

uint64_t UIKitStatusBarBridge.addPreferences(to:)(uint64_t a1)
{
  return add #1 <A><A1>(preference:) in UIKitStatusBarBridge.addPreferences(to:)((uint64_t)&type metadata for StatusBarKey, a1, v1, (uint64_t)&type metadata for StatusBarKey, (uint64_t)&protocol witness table for StatusBarKey);
}

uint64_t specialized PencilEventsBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t DragAndDropBridge.addPreferences(to:)()
{
  uint64_t result = MEMORY[0x18C119DF0](v0 + direct field offset for DragAndDropBridge.host);
  if (result)
  {
    id v2 = (void *)result;
    uint64_t ObjectType = swift_getObjectType();

    uint64_t result = (*(uint64_t (**)(void))(ObjectType + 1208))();
    if (result)
    {
      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();
      GraphHost.addPreference<A>(_:)();
      return GraphHost.addPreference<A>(_:)();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t ContextMenuBridge.addPreferences(to:)()
{
  uint64_t result = MEMORY[0x18C119DF0](v0 + direct field offset for ContextMenuBridge.host);
  if (result)
  {
    id v2 = (void *)result;
    uint64_t ObjectType = swift_getObjectType();

    uint64_t result = (*(uint64_t (**)(void))(ObjectType + 1208))();
    if (result)
    {
      GraphHost.addPreference<A>(_:)();
      return GraphHost.addPreference<A>(_:)();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

Swift::Void __swiftcall _UIHostingView.setupKeyboardAvoidanceNotifications()()
{
  if (static SemanticFeature.isEnabled.getter())
  {
    id v1 = objc_msgSend(self, sel_defaultCenter);
    objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_keyboardWillShowWithNotification_, *MEMORY[0x1E4FB2C58], 0);
    objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_keyboardWillHideWithNotification_, *MEMORY[0x1E4FB2C50], 0);
    objc_msgSend(v1, sel_addObserver_selector_name_object_, v0, sel_keyboardFrameWillChangeWithNotification_, *MEMORY[0x1E4FB2C48], 0);
  }
}

uint64_t specialized EditMenuBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t specialized TooltipBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t UIKitStatusBarBridge.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  *(_WORD *)(v0 + 16) = 2;
  *(void *)(v0 + 24) = MEMORY[0x1E4FBC860];
  *(void *)(v0 + 32) = -1;
  swift_unknownObjectWeakInit();
  return v0;
}

uint64_t _UIHostingView.setPreferenceBridge(_:)(uint64_t a1)
{
  swift_retain();
  uint64_t v2 = ViewGraph.preferenceBridge.getter();
  swift_release();
  if (!v2 || (uint64_t result = swift_release(), v2 != a1))
  {
    swift_retain();
    swift_retain();
    ViewGraph.preferenceBridge.setter();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityRepresentationModifier<A>.ProxyModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return AccessibilityRepresentationModifier.ProxyModifier.value.getter(*v2, *(void *)(a1 + 16), a2);
}

ValueMetadata *type metadata accessor for ListItemTint()
{
  return &type metadata for ListItemTint;
}

uint64_t initializeWithCopy for EditModeScopeModifier.TransformModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeWithCopy for LazyViewGeometry(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for LazyTransaction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_retain();
  return a1;
}

unint64_t destroy for ScrollViewCommitMutation(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 96);
  if ((~result & 0xF000000000000004) != 0) {
    return outlined consume of SystemScrollLayoutState.ContentOffsetMode(result);
  }
  return result;
}

uint64_t base witness table accessor for View in ResolvedButtonStyle()
{
  return lazy protocol witness table accessor for type ResolvedButtonStyle and conformance ResolvedButtonStyle(&lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle, (void (*)(uint64_t))type metadata accessor for ResolvedButtonStyle);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ResolvedButtonStyle and conformance ResolvedButtonStyle(&lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle, (void (*)(uint64_t))type metadata accessor for ResolvedButtonStyle);

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ResolvedButtonStyle and conformance ResolvedButtonStyle(&lazy protocol witness table cache variable for type ResolvedButtonStyle and conformance ResolvedButtonStyle, (void (*)(uint64_t))type metadata accessor for ResolvedButtonStyle);

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t lazy protocol witness table accessor for type ResolvedButtonStyle and conformance ResolvedButtonStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ListStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ListStyleWriter._makeInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t PresentationSourceConfiguration.cornerRadius(_:stye:)@<X0>(char *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  char v4 = *a1;
  uint64_t v5 = *(void *)(v3 + 32);
  long long v6 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(_OWORD *)(a2 + 16) = v6;
  *(void *)(a2 + 32) = v5;
  *(double *)(a2 + 40) = a3;
  *(unsigned char *)(a2 + 48) = v4;
  swift_retain();

  return swift_retain();
}

ValueMetadata *type metadata accessor for SceneID()
{
  return &type metadata for SceneID;
}

ValueMetadata *type metadata accessor for NavigationLinkPresentedValue()
{
  return &type metadata for NavigationLinkPresentedValue;
}

ValueMetadata *type metadata accessor for TriggerSubmitAction()
{
  return &type metadata for TriggerSubmitAction;
}

uint64_t base witness table accessor for _AttributeBody in GeometryActionBinder<A>()
{
  return swift_getWitnessTable();
}

BOOL protocol witness for static EnvironmentalModifier._tracksEnvironmentDependencies.getter in conformance CoreSheetPresentationModifier<A>()
{
  return static CoreSheetPresentationModifier._tracksEnvironmentDependencies.getter();
}

uint64_t protocol witness for LayoutEngine.spacing() in conformance AlignmentModifiedLayoutComputer.Engine()
{
  return LayoutComputer.spacing()();
}

uint64_t outlined destroy of ContentScrollViewBox(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ContentScrollViewBox()
{
  swift_unknownObjectWeakDestroy();

  return swift_unknownObjectWeakDestroy();
}

uint64_t partial apply for closure #1 in static SystemScrollView._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static SystemScrollView._makeView(view:inputs:)(a1);
}

uint64_t partial apply for closure #5 in static SystemScrollView._makeView(view:inputs:)(uint64_t a1)
{
  return closure #5 in static SystemScrollView._makeView(view:inputs:)(a1, *(void *)(v1 + 16));
}

uint64_t partial apply for implicit closure #4 in static SystemScrollView._makeView(view:inputs:)()
{
  return implicit closure #4 in static SystemScrollView._makeView(view:inputs:)();
}

uint64_t protocol witness for static ImageAccessibilityProvider.makeView(image:resolved:) in conformance SwiftUIImageAccessibilityProvider@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 104);
  long long v4 = *(_OWORD *)(a1 + 112);
  swift_retain();
  outlined copy of AccessibilityImageLabel?(v3, v4, *((uint64_t *)&v4 + 1));
  specialized AccessibilityImageModifier.body(content:)(a2);
  swift_release();

  return outlined consume of AccessibilityImageLabel?(v3, v4, *((uint64_t *)&v4 + 1));
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _ContentShapeKindModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t storeEnumTagSinglePayload for PersistentSystemOverlaysKey.Overlays(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance EnableLazyLayoutReuseLoggingAlways()
{
  return static EnableLazyLayoutReuseLoggingAlways.cachedValue;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance PopoverPresentation.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t closure #1 in perform #1 <A>(work:) in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()partial apply()
{
  return partial apply for closure #1 in perform #1 <A>(work:) in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()();
}

uint64_t partial apply for closure #1 in perform #1 <A>(work:) in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()()
{
  return closure #1 in perform #1 <A>(work:) in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()();
}

uint64_t _s7SwiftUI17PlatformViewChildV11updateValueyyFyyXEfU_yyXEfU3_yyXEfU_7performL_4workyyyXE_tAA0cD13RepresentableRzlFyyXEfU_TA_0()
{
  return ViewRendererHost.performExternalUpdate(_:)();
}

uint64_t closure #1 in perform #1 <A>(work:) in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()()
{
  return ViewRendererHost.performExternalUpdate(_:)();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance AccessibilityNodesKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = *((void *)&static AccessibilityNodesKey.defaultValue + 1);
  *a1 = static AccessibilityNodesKey.defaultValue;
  a1[1] = v2;

  return swift_bridgeObjectRetain();
}

uint64_t outlined destroy of MoveInteraction(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI15MoveInteractionVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for MoveInteraction(void *a1, uint64_t a2)
{
  if (*a1) {
    swift_release();
  }
  unsigned int v4 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for IndexSet();
  unsigned int v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t closure #1 in UIKitToolbarStrategy.updateBottomBar()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v11);
  unsigned int v6 = (void *)MEMORY[0x18C119DF0](&v12);
  outlined destroy of HostingControllerOverrides((uint64_t)v11);
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v9);
  if (v6)
  {
    outlined destroy of Toolbar.UpdateContext((uint64_t)v9);
  }
  else
  {
    unsigned int v6 = (void *)MEMORY[0x18C119DF0](&v10);
    uint64_t result = outlined destroy of Toolbar.UpdateContext((uint64_t)v9);
    if (!v6)
    {
      char v8 = 0;
      goto LABEL_5;
    }
  }

  *(void *)(a1 + direct field offset for ToolbarBridge.platformVended + 16) = UIKitToolbarStrategy.makeBarItems()();
  uint64_t result = swift_bridgeObjectRelease();
  char v8 = 1;
LABEL_5:
  *a3 = v8;
  return result;
}

void closure #1 in BarAppearanceBridge.updateSidebarToggle(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage) != 1) {
    return;
  }
  uint64_t v5 = a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined init with copy of BarAppearanceBridge.UpdateContext?(v5, (uint64_t)&v23);
  if (!v23)
  {
    outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v23, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
LABEL_6:
    outlined init with copy of BarAppearanceBridge.UpdateContext?(v5, (uint64_t)&v23);
    if (!v23)
    {
      outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v23, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
      return;
    }
    id v7 = v24;
    id v6 = v24;
    outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v23);
    if (!v7) {
      return;
    }
    goto LABEL_8;
  }
  outlined init with copy of HostingControllerOverrides((uint64_t)v25, (uint64_t)v21);
  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v23);
  id v6 = (id)MEMORY[0x18C119DF0](&v22);
  outlined destroy of HostingControllerOverrides((uint64_t)v21);
  if (!v6) {
    goto LABEL_6;
  }
LABEL_8:
  outlined init with copy of HostingControllerOverrides(a1 + 16, (uint64_t)&v23);
  id v8 = (id)MEMORY[0x18C119DF0](v26);
  outlined destroy of HostingControllerOverrides((uint64_t)&v23);
  if (v8 || (id v8 = objc_msgSend(v6, sel_splitViewController)) != 0)
  {
    if (objc_msgSend(v8, sel_style)
      && (id v9 = objc_msgSend(v8, sel_viewControllerForColumn_, 3)) != 0
      && (v10 = v9, self, uint64_t v11 = swift_dynamicCastObjCClass(), v10, v11))
    {
      unsigned int v12 = v6 == (id)v11;
    }
    else
    {
      unsigned int v12 = objc_msgSend(v8, sel_isCollapsed);
    }
    if (objc_msgSend(v8, sel_style)
      && (!v12 ? (uint64_t v13 = 0) : (uint64_t v13 = 3),
          (id v14 = objc_msgSend(v8, sel_viewControllerForColumn_, v13)) != 0))
    {
      uint64_t v15 = v14;
      self;
      uint64_t v16 = swift_dynamicCastObjCClass();
      if (v16 && v6 == (id)v16)
      {
        v21[0] = a3;
        PreferenceValues.subscript.getter();
        uint64_t v17 = v25[0];
        uint64_t v18 = v25[1];
        if (specialized Set.contains(_:)(0, v26[2]))
        {
          uint64_t v19 = v8;
          uint64_t v20 = 1;
        }
        else
        {
          uint64_t v19 = v8;
          uint64_t v20 = 0;
        }
        objc_msgSend(v19, sel_setDisplayModeButtonVisibility_, v20);

        swift_bridgeObjectRelease();
        outlined consume of Binding<NavigationSplitViewColumn>?(v17, v18);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
      }
    }
    else
    {
    }
  }
  else
  {
  }
}

uint64_t UIViewController.hasNavigationBarContent(updateContext:)(uint64_t a1)
{
  uint64_t v2 = v1;
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0) {
    return 1;
  }
  uint64_t v4 = a1 + 16;
  BOOL v5 = UIViewController.hasOrWillHaveBackItem(overrides:)(a1 + 16);
  id v6 = objc_msgSend(v1, sel_navigationItem);
  unsigned int v7 = objc_msgSend(v6, sel_hidesBackButton);

  outlined init with copy of HostingControllerOverrides(v4, (uint64_t)v26);
  id v8 = (id)MEMORY[0x18C119DF0](&v27);
  outlined destroy of HostingControllerOverrides((uint64_t)v26);
  if (!v8) {
    id v8 = objc_msgSend(v2, sel_splitViewController);
  }
  id v9 = objc_msgSend(v2, sel_navigationItem);
  unsigned __int8 HaveNavigationBar = UINavigationItem.hasContent.getter();

  if (v8)
  {
    id v11 = v8;
    id v12 = objc_msgSend(v2, sel_navigationController);
    if (!v12)
    {
LABEL_27:

      goto LABEL_28;
    }
    id v13 = v12;
    if (objc_msgSend(v11, sel_style)
      && (id v14 = objc_msgSend(v11, sel_viewControllerForColumn_, 3)) != 0
      && (uint64_t v15 = v14, self, v16 = swift_dynamicCastObjCClass(), v15, v16))
    {
      if (v13 == (id)v16) {
        id v17 = v13;
      }
      else {
        id v17 = v11;
      }
      if (v13 == (id)v16) {
        id v18 = v11;
      }
      else {
        id v18 = v13;
      }
      if ((v13 == (id)v16) | HaveNavigationBar & 1)
      {
        HaveNavigationBar |= v13 != (id)v16;
        id v11 = v17;
        id v13 = v18;
LABEL_26:

        id v11 = v13;
        goto LABEL_27;
      }
    }
    else
    {
      unsigned int v19 = objc_msgSend(v11, sel_isCollapsed);
      if (v19) {
        id v20 = v13;
      }
      else {
        id v20 = v11;
      }
      if (v19) {
        id v21 = v11;
      }
      else {
        id v21 = v13;
      }
      if ((v19 | HaveNavigationBar))
      {
        HaveNavigationBar |= v19 ^ 1;
        id v11 = v20;
        id v13 = v21;
        goto LABEL_26;
      }
    }
    unsigned __int8 HaveNavigationBar = UISplitViewController.mayHaveNavigationBarContent.getter();
    goto LABEL_26;
  }
LABEL_28:
  id v22 = objc_msgSend(v2, sel_tabBarController);
  if (v22)
  {
    uint64_t v23 = v22;
    if (HaveNavigationBar)
    {

      return 1;
    }
    unsigned __int8 v25 = UITabBarController.combinedWithNavigationBar.getter();

    if (v25) {
      return 1;
    }
  }
  else
  {

    if (HaveNavigationBar) {
      return 1;
    }
  }
  return v5 & (v7 ^ 1);
}

uint64_t specialized static HostingControllerOverrides.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of PushTarget?(a1, (uint64_t)v23);
  outlined init with copy of PushTarget?(a2, (uint64_t)v21);
  outlined init with copy of PushTarget?((uint64_t)v23, (uint64_t)v25);
  outlined init with copy of PushTarget?((uint64_t)v21, (uint64_t)&v26);
  if (v25[8] == 2)
  {
    _s7SwiftUI10PushTargetVSgWOhTm_0((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for PushTarget?);
    _s7SwiftUI10PushTargetVSgWOhTm_0((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for PushTarget?);
    if (v27 == 2)
    {
      _s7SwiftUI10PushTargetVSgWOhTm_0((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for PushTarget?);
      outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v25);
      outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v23);
      goto LABEL_8;
    }
LABEL_6:
    _s7SwiftUI10PushTargetVSgWOhTm_0((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for (PushTarget?, PushTarget?));
    outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v25);
    outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v23);
    goto LABEL_14;
  }
  outlined init with copy of PushTarget?((uint64_t)v25, (uint64_t)v19);
  if (v27 == 2)
  {
    _s7SwiftUI10PushTargetVSgWOhTm_0((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for PushTarget?);
    _s7SwiftUI10PushTargetVSgWOhTm_0((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for PushTarget?);
    outlined destroy of PushTarget((uint64_t)v19);
    goto LABEL_6;
  }
  outlined init with take of PushTarget((uint64_t)&v26, (uint64_t)v17);
  char v4 = specialized static PushTarget.== infix(_:_:)((uint64_t)v19, (uint64_t)v17);
  outlined destroy of PushTarget((uint64_t)v17);
  _s7SwiftUI10PushTargetVSgWOhTm_0((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for PushTarget?);
  _s7SwiftUI10PushTargetVSgWOhTm_0((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for PushTarget?);
  outlined destroy of PushTarget((uint64_t)v19);
  _s7SwiftUI10PushTargetVSgWOhTm_0((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for PushTarget?);
  outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v25);
  outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v23);
  if ((v4 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_8:
  BOOL v5 = (void *)MEMORY[0x18C119DF0](&v26);
  id v6 = (void *)MEMORY[0x18C119DF0](&v24);
  unsigned int v7 = v6;
  if (!v5)
  {
    if (!v6)
    {
      outlined destroy of HostingControllerOverrides((uint64_t)v23);
      outlined destroy of HostingControllerOverrides((uint64_t)v25);
      outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v21);
      outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v19);
      goto LABEL_19;
    }

LABEL_14:
    outlined destroy of HostingControllerOverrides((uint64_t)v23);
    outlined destroy of HostingControllerOverrides((uint64_t)v25);
    outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v21);
    outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v19);
    goto LABEL_15;
  }

  if (!v7) {
    goto LABEL_14;
  }

  outlined destroy of HostingControllerOverrides((uint64_t)v23);
  outlined destroy of HostingControllerOverrides((uint64_t)v25);
  outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v21);
  outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v19);
  if (v5 != v7) {
    goto LABEL_15;
  }
LABEL_19:
  uint64_t v10 = (void *)MEMORY[0x18C119DF0](&v22);
  id v11 = (void *)MEMORY[0x18C119DF0](&v20);
  id v12 = v11;
  if (v10)
  {

    if (v12)
    {

      outlined destroy of HostingControllerOverrides((uint64_t)v19);
      outlined destroy of HostingControllerOverrides((uint64_t)v21);
      outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v17);
      outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v16);
      if (v10 == v12) {
        goto LABEL_26;
      }
LABEL_16:
      outlined destroy of HostingControllerOverrides((uint64_t)v16);
      outlined destroy of HostingControllerOverrides((uint64_t)v17);
      char v8 = 0;
      return v8 & 1;
    }
LABEL_15:
    outlined destroy of HostingControllerOverrides((uint64_t)v19);
    outlined destroy of HostingControllerOverrides((uint64_t)v21);
    outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v17);
    outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v16);
    goto LABEL_16;
  }
  if (v11)
  {

    goto LABEL_15;
  }
  outlined destroy of HostingControllerOverrides((uint64_t)v19);
  outlined destroy of HostingControllerOverrides((uint64_t)v21);
  outlined init with copy of HostingControllerOverrides(a1, (uint64_t)v17);
  outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v16);
LABEL_26:
  int v13 = v18;
  BOOL v14 = v18 == 2;
  outlined destroy of HostingControllerOverrides((uint64_t)v17);
  int v15 = v16[48];
  outlined destroy of HostingControllerOverrides((uint64_t)v16);
  char v8 = v15 == 2 && v14;
  if (v13 != 2 && v15 != 2) {
    char v8 = ((v13 & 1) == 0) ^ v15;
  }
  return v8 & 1;
}

uint64_t outlined destroy of HostingControllerOverrides(uint64_t a1)
{
  return a1;
}

uint64_t destroy for HostingControllerOverrides(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8) != 2) {
    swift_unknownObjectWeakDestroy();
  }
  swift_unknownObjectWeakDestroy();

  return swift_unknownObjectWeakDestroy();
}

uint64_t UIHostingController.overrides.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + direct field offset for UIHostingController.overrides;
  swift_beginAccess();
  return outlined init with copy of HostingControllerOverrides(v3, a1);
}

uint64_t outlined init with copy of HostingControllerOverrides(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for HostingControllerOverrides(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  if (*(unsigned char *)(a2 + 8) == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  else
  {
    a4(a1, a2);
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  }
  a4(a1 + 32, a2 + 32);
  a4(a1 + 40, a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t initializeWithCopy for HostingControllerOverrides(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for HostingControllerOverrides(a1, a2, a3, MEMORY[0x1E4FBC920]);
}

uint64_t outlined init with copy of PushTarget?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PushTarget?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for PushTarget?()
{
  if (!lazy cache variable for type metadata for PushTarget?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PushTarget?);
    }
  }
}

uint64_t ToolbarBridge.preferencesDidChange<A>(_:hostingController:)(uint64_t *a1, void *a2)
{
  uint64_t v2 = *a1;
  id v3 = a2;
  Toolbar.UpdateContext.init<A>(hostingController:)(v3, (uint64_t)v8);
  uint64_t v7 = v2;
  uint64_t v4 = ToolbarBridge.preferencesDidChange(_:context:)(&v7, (uint64_t)v8);
  ToolbarBridge.adoptUpdates<A>(_:hostingController:)(v4, v5 & 0xFF0101, v3);
  swift_bridgeObjectRelease();
  return outlined destroy of Toolbar.UpdateContext((uint64_t)v8);
}

uint64_t static ToolbarBridge.update<A>(environment:toolbarBridge:hostingController:)(uint64_t *a1, void *a2, void *a3)
{
  id v5 = a3;
  Toolbar.UpdateContext.init<A>(hostingController:)(v5, (uint64_t)v13);
  if (a2)
  {
    id v6 = a2;
    uint64_t v7 = ToolbarBridge.update(environment:context:)(a1, (uint64_t)v13);
    ToolbarBridge.adoptUpdates<A>(_:hostingController:)(v7, v8 & 0xFF0101, v5);
    swift_bridgeObjectRelease();
    uint64_t v9 = a1[1];
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
    swift_retain_n();
    if (v9)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    v12[0] |= 1uLL;
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SuppliedBridgesKey>);
    swift_retain();
    PropertyList.subscript.setter();
    if (v9)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();

      swift_release();
      swift_release();
    }
    else
    {
    }
    swift_release();
  }
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v13, (uint64_t)v12);
  outlined init with copy of PushTarget?((uint64_t)v12, (uint64_t)&v11, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (a1[1])
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of PushTarget?((uint64_t)v12, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  return outlined destroy of Toolbar.UpdateContext((uint64_t)v13);
}

void Toolbar.UpdateContext.init<A>(hostingController:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  long long v8 = xmmword_18834C6B0;
  uint64_t v9 = 0;
  LOBYTE(v10) = 0;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  char v11 = 2;
  outlined init with take of HostingControllerOverrides((uint64_t)&v8, a2);
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  *(_WORD *)(a2 + 80) = 257;
  *(void *)(a2 + 88) = MEMORY[0x1E4FBC860];
  outlined destroy of HostingControllerOverrides(a2);
  UIHostingController.overrides.getter(a2);
  id v4 = objc_msgSend(a1, sel_navigationController, v8, v9, v10);
  swift_unknownObjectWeakAssign();

  swift_unknownObjectWeakAssign();
  id v5 = objc_msgSend((id)specialized UIHostingController.host.getter(), sel_window);
  id v6 = v5;
  if (v5)
  {
    id v7 = objc_msgSend(v5, sel_windowScene);

    if (v7)
    {
      id v6 = objc_msgSend(v7, sel_session);
    }
    else
    {
      id v6 = 0;
    }
  }

  swift_unknownObjectWeakAssign();
}

uint64_t outlined init with take of HostingControllerOverrides(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithTake for HostingControllerOverrides(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return initializeWithCopy for HostingControllerOverrides(a1, a2, a3, MEMORY[0x1E4FBC930]);
}

void ToolbarBridge.adoptUpdates<A>(_:hostingController:)(uint64_t a1, int a2, id a3)
{
  id v4 = v3;
  id v5 = a3;
  uint64_t v25 = *MEMORY[0x1E4FBC8C8] & *v3;
  if ((a2 & 0x100) != 0)
  {
    uint64_t v10 = *(void *)((char *)v3 + direct field offset for ToolbarBridge.navigationAdaptor);
    uint64_t v11 = *(void *)(v10 + 16);
    if (v11)
    {
      id v24 = a3;
      uint64_t v12 = v10 + 32;
      swift_bridgeObjectRetain();
      char v13 = 0;
      do
      {
        outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v12, (uint64_t)&v30);
        outlined init with copy of TableColumnList((uint64_t)&v30, (uint64_t)v27);
        outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)&v30);
        uint64_t v14 = v28;
        uint64_t v15 = v29;
        __swift_project_boxed_opaque_existential_1(v27, v28);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v15 + 8))(&v26, v14, v15);
        v13 |= v26;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v27);
        v12 += 48;
        --v11;
      }
      while (v11);
      swift_bridgeObjectRelease();
      if ((v13 & 2) != 0)
      {
        ToolbarBridge.resetPlatform()();
        char v9 = 1;
      }
      else
      {
        char v9 = 0;
      }
      int v8 = 256;
      id v5 = v24;
    }
    else
    {
      char v9 = 0;
      int v8 = 256;
    }
  }
  else
  {
    int v8 = 0;
    char v9 = 0;
  }
  id v16 = objc_msgSend(v5, sel_navigationItem, v24);
  id v17 = *(id *)((char *)v4 + direct field offset for ToolbarBridge.platformVended + 8);
  UINavigationItem.adoptNavigationItem(_:updates:forceUpdate:)(v17, a1, a2 & 0xFF0001 | v8, v9);

  if ((a2 & 0x100) != 0)
  {
    uint64_t v18 = *(void *)((char *)v4 + direct field offset for ToolbarBridge.navigationAdaptor);
    if (*(void *)(v18 + 16))
    {
      swift_bridgeObjectRetain();
      *(_OWORD *)uint64_t v32 = *(_OWORD *)(v25 + 80);
      *(void *)&v32[16] = v18;
      id v33 = v5;
      static Update.ensure<A>(_:)();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  *(void *)uint64_t v32 = 0;
  *(_OWORD *)&v32[8] = xmmword_18838A9E0;
  char v19 = specialized Set.contains(_:)((uint64_t)&v30, a1);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v30);
  if (v19)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v5, sel_setToolbarItems_, isa);
  }
  if (a2) {
    ToolbarBridge.updateToolbarVisibility<A>(hostingController:)(v5);
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  *(void *)uint64_t v32 = 0;
  *(_OWORD *)&v32[8] = xmmword_188382670;
  char v21 = specialized Set.contains(_:)((uint64_t)&v30, a1);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v30);
  if (v21) {
    goto LABEL_21;
  }
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  *(void *)uint64_t v32 = 0;
  *(_OWORD *)&v32[8] = xmmword_188382690;
  char v22 = specialized Set.contains(_:)((uint64_t)&v30, a1);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v30);
  if ((v22 & 1) != 0
    || (uint64_t v30 = 0,
        uint64_t v31 = 0,
        *(void *)uint64_t v32 = 0,
        *(_OWORD *)&v32[8] = xmmword_18838A9F0,
        char v23 = specialized Set.contains(_:)((uint64_t)&v30, a1),
        outlined destroy of Toolbar.BarLocation((uint64_t)&v30),
        (v23 & 1) != 0))
  {
LABEL_21:
    ToolbarBridge.updateTabBar<A>(hostingController:)(v5);
  }
}

uint64_t ToolbarBridge.update(environment:context:)(uint64_t *a1, uint64_t a2)
{
  id v3 = v2;
  uint64_t v45 = MEMORY[0x1E4FBC870];
  __int16 v46 = 0;
  char v47 = 0;
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v44);
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  EnvironmentValues.horizontalSizeClass.getter();
  v44[80] = v48;
  *(void *)&v42[0] = v5;
  *((void *)&v42[0] + 1) = v6;
  EnvironmentValues.verticalSizeClass.getter();
  v44[81] = v48;
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v44, (uint64_t)v42);
  uint64_t v7 = (uint64_t)v2 + direct field offset for ToolbarBridge.updateContext;
  swift_beginAccess();
  outlined assign with take of Toolbar.UpdateContext?((uint64_t)v42, v7);
  swift_endAccess();
  if (ToolbarBridge.allowsUpdates.getter())
  {
    int v8 = (long long *)((char *)v3 + direct field offset for ToolbarBridge.lastEnvironment);
    swift_beginAccess();
    long long v48 = *v8;
    EnvironmentValues.horizontalSizeClass.getter();
    if (v40[0] == 2)
    {
      swift_endAccess();
    }
    else
    {
      swift_endAccess();
      v42[0] = *(_OWORD *)a1;
      EnvironmentValues.horizontalSizeClass.getter();
      if v48 == 2 || ((v48 ^ v40[0]))
      {
        char v9 = (void *)((char *)v3 + direct field offset for ToolbarBridge.toolbarStorage);
        uint64_t v10 = *(void *)((char *)v3 + direct field offset for ToolbarBridge.toolbarStorage + 40);
        if (v10)
        {
          uint64_t v11 = *v9;
          uint64_t v12 = v9[1];
          uint64_t v13 = v9[2];
          uint64_t v14 = v9[3];
          uint64_t v15 = v9[4];
          uint64_t v16 = v9[6];
          uint64_t v17 = v9[7];
          *(void *)&long long v48 = *v9;
          *((void *)&v48 + 1) = v12;
          uint64_t v49 = v13;
          uint64_t v50 = v14;
          uint64_t v51 = v15;
          uint64_t v52 = v10;
          char v53 = v16 & 1;
          uint64_t v54 = v17;
          unint64_t v18 = *(unsigned int *)((char *)v3 + direct field offset for ToolbarBridge.lastBarContext) | ((unint64_t)(*(unsigned __int16 *)((char *)v3 + direct field offset for ToolbarBridge.lastBarContext + 4) | (*((unsigned __int8 *)v3 + direct field offset for ToolbarBridge.lastBarContext + 6) << 16)) << 32);
          if (*(_DWORD *)((char *)v3 + direct field offset for ToolbarBridge.lastBarContext) != 2)
          {
            unint64_t v34 = HIDWORD(v18);
            unint64_t v35 = v18 >> 40;
            uint64_t v37 = v11;
            uint64_t v38 = v16;
            uint64_t updated = outlined init with copy of Toolbar.UpdateContext((uint64_t)v44, (uint64_t)v42);
            uint64_t v39 = &v33;
            MEMORY[0x1F4188790](updated);
            unint64_t v36 = v24;
            v24[2] = v3;
            v24[3] = &v48;
            __int16 v25 = v18 & 0x101;
            char v26 = BYTE2(v18) & 1;
            char v27 = BYTE3(v18) & 1;
            char v28 = v34;
            char v29 = v35;
            char v30 = BYTE6(v18) & 1;
            uint64_t v31 = v44;
            uint64_t v32 = &v45;
            swift_bridgeObjectRetain();
            outlined copy of Binding<NavigationSplitViewColumn>?(v13, v14);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            static ToolbarStrategy.withUpdater<A>(_:_:body:)(v3, (uint64_t)v42, (void (*)(char *))partial apply for closure #1 in ToolbarBridge.update(environment:context:), (uint64_t)v36);
            outlined consume of ToolbarStorage?(v37, v12, v13, v14, v15, v10);
            outlined destroy of Toolbar.UpdateContext((uint64_t)v42);
          }
        }
      }
    }
  }
  outlined init with copy of HostingControllerOverrides((uint64_t)v44, (uint64_t)v40);
  uint64_t v20 = (void *)MEMORY[0x18C119DF0](&v41);
  outlined destroy of HostingControllerOverrides((uint64_t)v40);
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v44, (uint64_t)v42);
  if (v20)
  {
    outlined destroy of Toolbar.UpdateContext((uint64_t)v42);
LABEL_12:

    uint64_t v21 = ToolbarBridge.uiSafeAreaTransitionState.getter();
    specialized EnvironmentValues.safeAreaTransitionState.setter(v21, (uint64_t)&protocol witness table for ToolbarSafeAreaTransitionState);
    swift_release();
    goto LABEL_13;
  }
  uint64_t v20 = (void *)MEMORY[0x18C119DF0](&v43);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v42);
  if (v20) {
    goto LABEL_12;
  }
LABEL_13:
  specialized ToolbarBridge.uiInputAccessoryGenerator.getter();
  swift_retain();
  specialized EnvironmentValues.uiInputAccessoryGenerator.setter();
  swift_release();
  uint64_t v22 = v45;
  swift_bridgeObjectRetain();
  $defer #1 <A>() in ToolbarBridge.update(environment:context:)((uint64_t)v3, a1);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v44);
  swift_bridgeObjectRelease();
  return v22;
}

BOOL ToolbarBridge.allowsUpdates.getter()
{
  uint64_t v1 = *(void *)(v0 + direct field offset for ToolbarBridge.navigationAdaptor);
  uint64_t v2 = *(void *)(v1 + 16);
  if (!v2) {
    return 1;
  }
  uint64_t v3 = v1 + 32;
  swift_bridgeObjectRetain();
  char v4 = 0;
  do
  {
    outlined init with copy of UINavigationItemAdaptorStorage.Adaptor(v3, (uint64_t)v12);
    outlined init with copy of TableColumnList((uint64_t)v12, (uint64_t)v9);
    outlined destroy of UINavigationItemAdaptorStorage.Adaptor((uint64_t)v12);
    uint64_t v5 = v10;
    uint64_t v6 = v11;
    __swift_project_boxed_opaque_existential_1(v9, v10);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v6 + 8))(&v8, v5, v6);
    v4 |= v8;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    v3 += 48;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return (v4 & 2) == 0;
}

uint64_t specialized ToolbarBridge.uiInputAccessoryGenerator.getter()
{
  return *(void *)(v0 + direct field offset for ToolbarBridge.platformVended + 40);
}

uint64_t specialized ToolbarStrategy.withUpdate<A>(_:)(void (*a1)(void))
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    outlined init with copy of PushTarget?((uint64_t)(v1 + 1), (uint64_t)v6, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
    if (v7)
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v6, (uint64_t)v8);
      id v4 = v2;
      a1();

      return outlined destroy of Toolbar.UpdateContext((uint64_t)v8);
    }
    outlined destroy of PushTarget?((uint64_t)v6, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized ToolbarStrategy.withUpdate<A>(_:)(void (*a1)(void *__return_ptr))
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    outlined init with copy of PushTarget?((uint64_t)(v1 + 1), (uint64_t)v6, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
    if (v6[11])
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v6, (uint64_t)v7);
      id v4 = v2;
      a1(v6);

      outlined destroy of Toolbar.UpdateContext((uint64_t)v7);
      return v6[0];
    }
    outlined destroy of PushTarget?((uint64_t)v6, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  void **v1;
  void *v2;
  id v4;
  uint64_t result;
  void v6[12];
  unsigned char v7[96];

  uint64_t v2 = *v1;
  if (*v1)
  {
    outlined init with copy of PushTarget?((uint64_t)(v1 + 1), (uint64_t)v6, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
    if (v6[11])
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v6, (uint64_t)v7);
      id v4 = v2;
      a1(v6);

      outlined destroy of Toolbar.UpdateContext((uint64_t)v7);
      return LOBYTE(v6[0]);
    }
    outlined destroy of PushTarget?((uint64_t)v6, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t UIKitToolbarStrategy.updateBarTitle()(void (*a1)(void *__return_ptr))
{
  uint64_t v2 = *v1;
  if (*v1)
  {
    outlined init with copy of PushTarget?((uint64_t)(v1 + 1), (uint64_t)v6, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
    if (v6[11])
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v6, (uint64_t)v7);
      id v4 = v2;
      a1(v6);

      outlined destroy of Toolbar.UpdateContext((uint64_t)v7);
      return LOBYTE(v6[0]);
    }
    outlined destroy of PushTarget?((uint64_t)v6, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined init with take of Toolbar.UpdateContext(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithTake for Toolbar.UpdateContext(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8) == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  else
  {
    swift_unknownObjectWeakTakeInit();
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  }
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  return a1;
}

uint64_t $defer #1 <A>() in ToolbarBridge.update(environment:context:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = (void *)(a1 + direct field offset for ToolbarBridge.lastEnvironment);
  swift_beginAccess();
  *uint64_t v5 = v3;
  v5[1] = v4;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  memset(v8, 0, sizeof(v8));
  uint64_t v6 = a1 + direct field offset for ToolbarBridge.updateContext;
  swift_beginAccess();
  outlined assign with take of Toolbar.UpdateContext?((uint64_t)v8, v6);
  return swift_endAccess();
}

uint64_t outlined assign with take of Toolbar.UpdateContext?(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI7ToolbarO13UpdateContextVSgMaTm_0(0, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

BOOL UIViewController.hasOrWillHaveBackItem(overrides:)(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 48);
  if (v2 == 2)
  {
    outlined init with copy of PushTarget?(a1, (uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for PushTarget?, (uint64_t)&type metadata for PushTarget);
    id v4 = (id)MEMORY[0x18C119DF0](a1 + 40);
    if (!v4) {
      id v4 = objc_msgSend(v1, sel_splitViewController);
    }
    outlined init with copy of PushTarget?((uint64_t)v48, (uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for PushTarget?, (uint64_t)&type metadata for PushTarget);
    if (v44 == 2)
    {
      outlined destroy of PushTarget?((uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for PushTarget?, (uint64_t)&type metadata for PushTarget);
      id v5 = objc_msgSend(v1, sel_navigationController);
      if (v5)
      {
        uint64_t v6 = v5;
        id v7 = objc_msgSend(v5, sel_viewControllers);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
        unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (!(v8 >> 62))
        {
          uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRelease();

          if (v9 <= 1) {
            goto LABEL_14;
          }
LABEL_12:

          BOOL v10 = 1;
          goto LABEL_60;
        }
        swift_bridgeObjectRetain();
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();

        swift_bridgeObjectRelease_n();
        if (v13 > 1) {
          goto LABEL_12;
        }
      }
LABEL_14:
      if (v4)
      {
        id v14 = v4;
        id v15 = objc_msgSend(v14, sel_traitCollection);
        id v16 = objc_msgSend(v15, sel_horizontalSizeClass);

        BOOL v10 = v16 != (id)1 && objc_msgSend(v14, sel_displayMode) == (id)1;
        outlined init with copy of PushTarget?((uint64_t)v48, (uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for PushTarget?, (uint64_t)&type metadata for PushTarget);
        if (v44 == 2)
        {
          outlined destroy of PushTarget?((uint64_t)&v43, (unint64_t *)&lazy cache variable for type metadata for PushTarget?, (uint64_t)&type metadata for PushTarget);
        }
        else
        {
          outlined init with take of PushTarget((uint64_t)&v43, (uint64_t)v45);
          if (v47 != 1)
          {
            uint64_t v17 = v46;
            if (objc_msgSend(v14, sel_style))
            {
              id v18 = objc_msgSend(v14, sel_viewControllerForColumn_, v17);
              if (v18)
              {
                char v19 = v18;
                self;
                uint64_t v20 = (void *)swift_dynamicCastObjCClass();
                if (v20)
                {
                  id v21 = objc_msgSend(v20, sel_viewControllers);
                  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
                  unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

                  if (v22 >> 62)
                  {
                    swift_bridgeObjectRetain();
                    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();

                    swift_bridgeObjectRelease_n();
                  }
                  else
                  {
                    uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
                    swift_bridgeObjectRelease();
                  }
                  BOOL v10 = v23 != 0;
                  outlined destroy of PushTarget((uint64_t)v45);

                  goto LABEL_60;
                }
              }
            }
          }
          outlined destroy of PushTarget((uint64_t)v45);
        }
        if (objc_msgSend(v14, sel_style))
        {
          id v24 = objc_msgSend(v14, sel_viewControllerForColumn_, 0);
          if (v24)
          {
            __int16 v25 = v24;
            self;
            char v26 = (void *)swift_dynamicCastObjCClass();
            if (v26)
            {
              char v27 = v26;
              id v28 = objc_msgSend(v26, sel_viewControllers);
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
              unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if (v29 >> 62)
              {
                swift_bridgeObjectRetain();
                uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              swift_bridgeObjectRelease();
              if (v30)
              {

                goto LABEL_49;
              }
            }
          }
        }
        if (!objc_msgSend(v14, sel_style)
          || (id v31 = objc_msgSend(v14, sel_viewControllerForColumn_, 2)) == 0)
        {

          goto LABEL_60;
        }
        __int16 v25 = v31;
        self;
        uint64_t v32 = (void *)swift_dynamicCastObjCClass();
        if (!v32)
        {

          goto LABEL_53;
        }
        char v27 = v32;
        id v33 = objc_msgSend(v32, sel_viewControllers);
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
        unint64_t v34 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v34 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v35)
          {
LABEL_43:
            unint64_t v36 = v35 - 1;
            if (__OFSUB__(v35, 1))
            {
              __break(1u);
            }
            else if ((v34 & 0xC000000000000001) == 0)
            {
              if ((v36 & 0x8000000000000000) != 0)
              {
                __break(1u);
              }
              else if (v36 < *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10))
              {
                uint64_t v37 = *(void *)(v34 + 8 * v36 + 32);
                goto LABEL_48;
              }
              __break(1u);
              goto LABEL_66;
            }
            uint64_t v37 = MEMORY[0x18C117680](v36, v34);
            swift_unknownObjectRelease();
LABEL_48:

            swift_bridgeObjectRelease();
            if ((void *)v37 == v1)
            {
LABEL_49:
              id v38 = v25;
              if (v10)
              {

                BOOL v10 = 1;
                goto LABEL_60;
              }
              id v39 = objc_msgSend(v27, sel_viewControllers);
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
              unint64_t v40 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

              if (!(v40 >> 62))
              {
                uint64_t v41 = *(void *)((v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRelease();

LABEL_56:
                BOOL v10 = v41 > 1;
                goto LABEL_60;
              }
LABEL_66:
              swift_bridgeObjectRetain();
              uint64_t v41 = _CocoaArrayWrapper.endIndex.getter();

              swift_bridgeObjectRelease_n();
              goto LABEL_56;
            }
LABEL_53:

            goto LABEL_60;
          }
        }
        else
        {
          uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v35) {
            goto LABEL_43;
          }
        }

        swift_bridgeObjectRelease();
        goto LABEL_60;
      }
      BOOL v10 = 0;
LABEL_60:
      outlined destroy of PushTarget?((uint64_t)v48, (unint64_t *)&lazy cache variable for type metadata for PushTarget?, (uint64_t)&type metadata for PushTarget);
      return v10;
    }
    outlined init with take of PushTarget((uint64_t)&v43, (uint64_t)v45);
    int v11 = v47;
    outlined init with take of PushTarget((uint64_t)v45, (uint64_t)&v43);
    int v12 = v44;
    outlined destroy of PushTarget((uint64_t)&v43);
    if (v11 != 1 || v12) {
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  return v2 & 1;
}

uint64_t outlined destroy of PushTarget?(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  _s7SwiftUI7ToolbarO13UpdateContextVSgMaTm_0(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t _s7SwiftUI10PushTargetVSgWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with copy of PushTarget?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _s7SwiftUI7ToolbarO13UpdateContextVSgMaTm_0(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for Toolbar.UpdateContext?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI7ToolbarO13UpdateContextVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void partial apply for closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)(uint64_t a1@<X1>, void *a2@<X8>)
{
  closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(a1, *(void *)(v2 + 16), (uint64_t)partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.barButtonGroups(in:), a2);
}

void partial apply for closure #1 in UIKitToolbarStrategy.willReturnUpdates(_:preferences:)(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(v2 + 25)) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  closure #1 in UIKitToolbarStrategy.willReturnUpdates(_:preferences:)(a1, a2, *(void *)(v2 + 16), v3 | *(unsigned __int8 *)(v2 + 24) | (*(unsigned __int8 *)(v2 + 26) << 16), *(void ***)(v2 + 32));
}

void closure #1 in UIKitToolbarStrategy.willReturnUpdates(_:preferences:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  outlined init with copy of HostingControllerOverrides(a2, (uint64_t)v22);
  uint64_t v9 = (void *)MEMORY[0x18C119DF0](&v23);
  outlined destroy of HostingControllerOverrides((uint64_t)v22);
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)&v17);
  if (v9)
  {
    outlined destroy of Toolbar.UpdateContext((uint64_t)&v17);
  }
  else
  {
    uint64_t v9 = (void *)MEMORY[0x18C119DF0](v21);
    outlined destroy of Toolbar.UpdateContext((uint64_t)&v17);
    if (!v9)
    {
      char v10 = 0;
      goto LABEL_5;
    }
  }

  char v10 = 1;
LABEL_5:
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  long long v20 = xmmword_18838A9E0;
  char v11 = specialized Set.contains(_:)((uint64_t)&v17, a3);
  outlined destroy of Toolbar.BarLocation((uint64_t)&v17);
  if ((v11 & 1) != 0
    || (uint64_t v17 = 0,
        uint64_t v18 = 0,
        uint64_t v19 = 0,
        long long v20 = xmmword_18838A9E0,
        char v12 = specialized ToolbarBridge.hasEntries(in:)(&v17),
        outlined destroy of Toolbar.BarLocation((uint64_t)&v17),
        (v12 & 1) == 0))
  {
    if (*(void *)(a1 + direct field offset for ToolbarBridge.platformVended + 32)) {
      char v14 = v10;
    }
    else {
      char v14 = 1;
    }
    if ((v14 & 1) == 0)
    {
LABEL_8:
      unint64_t v13 = UIKitToolbarStrategy.makeBarItems()();
      if (v13 >> 62)
      {
        if (!_CocoaArrayWrapper.endIndex.getter()) {
          goto LABEL_11;
        }
      }
      else if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_11:
        specialized ToolbarStrategy.withUpdate<A>(_:)(a5);
        return;
      }
      UIKitToolbarStrategy.createToolbarIfNeeded()();
      goto LABEL_11;
    }
  }
  else if ((v10 & 1) == 0)
  {
    goto LABEL_8;
  }
  id v15 = (char *)*a5;
  if (*a5)
  {
    outlined init with copy of PushTarget?((uint64_t)(a5 + 1), (uint64_t)&v17, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
    if (v21[4])
    {
      outlined destroy of PushTarget?((uint64_t)&v17, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
      id v16 = *(void **)&v15[direct field offset for ToolbarBridge.platformVended + 32];
      *(void *)&v15[direct field offset for ToolbarBridge.platformVended + 32] = 0;

      return;
    }
    outlined destroy of PushTarget?((uint64_t)&v17, &lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext);
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t ToolbarBridge.preferencesDidChange(_:context:)(uint64_t *a1, uint64_t a2)
{
  int v3 = v2;
  uint64_t v4 = *a1;
  uint64_t v18 = MEMORY[0x1E4FBC870];
  __int16 v19 = 0;
  char v20 = 0;
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v16);
  unint64_t v5 = (char *)v2 + direct field offset for ToolbarBridge.lastEnvironment;
  swift_beginAccess();
  uint64_t v6 = *((void *)v5 + 1);
  EnvironmentValues.horizontalSizeClass.getter();
  v16[80] = v15;
  v11[7] = v6;
  EnvironmentValues.verticalSizeClass.getter();
  swift_endAccess();
  v16[81] = v15;
  v11[6] = v4;
  PreferenceValues.subscript.getter();
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x1E4FBC860];
  specialized Set.formUnion<A>(_:)(MEMORY[0x1E4FBC860]);
  swift_endAccess();
  swift_bridgeObjectRelease();
  uint64_t v17 = v7;
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v16, (uint64_t)v12);
  uint64_t v8 = (uint64_t)v3 + direct field offset for ToolbarBridge.updateContext;
  swift_beginAccess();
  outlined assign with take of Toolbar.UpdateContext?((uint64_t)v12, v8);
  swift_endAccess();
  outlined init with copy of Toolbar.UpdateContext((uint64_t)v16, (uint64_t)v12);
  void v11[2] = v3;
  void v11[3] = v4;
  v11[4] = &v18;
  v11[5] = v16;
  static ToolbarStrategy.withUpdater<A>(_:_:body:)(v3, (uint64_t)v12, (void (*)(char *))partial apply for closure #1 in ToolbarBridge.preferencesDidChange(_:context:), (uint64_t)v11);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v12);
  uint64_t v9 = v18;
  swift_bridgeObjectRetain();
  $defer #1 <A>() in ToolbarBridge.preferencesDidChange(_:context:)((uint64_t)v3);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v16);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t specialized Set.formUnion<A>(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  if (v1)
  {
    uint64_t v2 = result + 32;
    do
    {
      outlined init with copy of Toolbar.BarLocation(v2, (uint64_t)v3);
      specialized Set._Variant.insert(_:)((uint64_t)v4, (uint64_t)v3);
      uint64_t result = outlined destroy of Toolbar.BarLocation((uint64_t)v4);
      v2 += 40;
      --v1;
    }
    while (v1);
  }
  return result;
}

{
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  unsigned char v13[40];
  unsigned char v14[40];
  unsigned char v15[40];

  uint64_t v1 = result;
  uint64_t v2 = 0;
  int v3 = result + 64;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  unint64_t v5 = -1;
  if (v4 < 64) {
    unint64_t v5 = ~(-1 << v4);
  }
  uint64_t v6 = v5 & *(void *)(result + 64);
  uint64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      uint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      uint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    char v10 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v10 >= v7) {
      return swift_release();
    }
    char v11 = *(void *)(v3 + 8 * v10);
    ++v2;
    if (!v11)
    {
      uint64_t v2 = v10 + 1;
      if (v10 + 1 >= v7) {
        return swift_release();
      }
      char v11 = *(void *)(v3 + 8 * v2);
      if (!v11)
      {
        uint64_t v2 = v10 + 2;
        if (v10 + 2 >= v7) {
          return swift_release();
        }
        char v11 = *(void *)(v3 + 8 * v2);
        if (!v11)
        {
          uint64_t v2 = v10 + 3;
          if (v10 + 3 >= v7) {
            return swift_release();
          }
          char v11 = *(void *)(v3 + 8 * v2);
          if (!v11)
          {
            uint64_t v2 = v10 + 4;
            if (v10 + 4 >= v7) {
              return swift_release();
            }
            char v11 = *(void *)(v3 + 8 * v2);
            if (!v11) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    uint64_t v6 = (v11 - 1) & v11;
    uint64_t v9 = __clz(__rbit64(v11)) + (v2 << 6);
LABEL_5:
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v1 + 48) + 40 * v9, (uint64_t)v15);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v15, (uint64_t)v13);
    specialized Set._Variant.insert(_:)((uint64_t)v14, (uint64_t)v13);
    uint64_t result = outlined destroy of ToolbarPlacement.Role((uint64_t)v14);
  }
  char v12 = v10 + 5;
  if (v12 >= v7) {
    return swift_release();
  }
  char v11 = *(void *)(v3 + 8 * v12);
  if (v11)
  {
    uint64_t v2 = v12;
    goto LABEL_24;
  }
  while (1)
  {
    uint64_t v2 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v2 >= v7) {
      return swift_release();
    }
    char v11 = *(void *)(v3 + 8 * v2);
    ++v12;
    if (v11) {
      goto LABEL_24;
    }
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t static ToolbarStrategy.withUpdater<A>(_:_:body:)(void *a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  uint64_t v16 = a4;
  uint64_t v17 = a3;
  uint64_t v6 = *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x50);
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](a1);
  char v10 = (char *)&v16 - v9;
  uint64_t v12 = *(void *)(v11 + 88);
  (*(void (**)(uint64_t, uint64_t, double))(v12 + 64))(v6, v12, v8);
  uint64_t v13 = *(void (**)(void *, uint64_t, uint64_t))(v12 + 24);
  uint64_t v14 = a1;
  v13(a1, v6, v12);
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v18);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 48))(v18, v6, v12);
  v17(v10);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void destroy for UIKitToolbarStrategy(uint64_t a1)
{
  if (*(void *)(a1 + 96))
  {
    if (*(unsigned char *)(a1 + 16) != 2) {
      swift_unknownObjectWeakDestroy();
    }
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_unknownObjectWeakDestroy();
    swift_bridgeObjectRelease();
  }
}

double protocol witness for ToolbarStrategy.init() in conformance UIKitToolbarStrategy@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 96) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

void protocol witness for ToolbarStrategy.updater.setter in conformance UIKitToolbarStrategy(void *a1)
{
  *uint64_t v1 = a1;
}

uint64_t protocol witness for ToolbarStrategy.updateContext.setter in conformance UIKitToolbarStrategy(uint64_t a1)
{
  return outlined assign with take of Toolbar.UpdateContext?(a1, v1 + 8);
}

uint64_t partial apply for closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1)
{
  return closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t $defer #1 <A>() in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1)
{
  memset(v3, 0, sizeof(v3));
  uint64_t v1 = a1 + direct field offset for ToolbarBridge.updateContext;
  swift_beginAccess();
  outlined assign with take of Toolbar.UpdateContext?((uint64_t)v3, v1);
  return swift_endAccess();
}

BOOL specialized ToolbarBridge.hasEntries(in:)(uint64_t a1)
{
  int v3 = (uint64_t *)(v1 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  uint64_t v4 = *v3;
  if (*(void *)(v4 + 16) && (uint64_t v5 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v6 & 1) != 0))
  {
    uint64_t v7 = (uint64_t *)(*(void *)(v4 + 56) + 24 * v5);
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    swift_endAccess();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    outlined consume of Toolbar.LocationStorage?(v8);
    uint64_t v10 = *(void *)(v9 + 16);
    swift_bridgeObjectRelease();
    return v10 != 0;
  }
  else
  {
    swift_endAccess();
    return 0;
  }
}

uint64_t outlined consume of Toolbar.LocationStorage?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

BOOL specialized static Toolbar.UpdateContext.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 80);
  int v5 = *(unsigned __int8 *)(a2 + 80);
  if (v4 == 2)
  {
    if (v5 == 2)
    {
      outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v33);
      outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v31);
      goto LABEL_7;
    }
LABEL_5:
    outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v33);
    outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v31);
    goto LABEL_11;
  }
  if (v5 == 2) {
    goto LABEL_5;
  }
  char v6 = v5 ^ v4;
  outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v33);
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v31);
  if (v6) {
    goto LABEL_11;
  }
LABEL_7:
  int v7 = v32;
  if (v34 == 2)
  {
    outlined destroy of Toolbar.UpdateContext((uint64_t)v31);
    outlined destroy of Toolbar.UpdateContext((uint64_t)v33);
    if (v7 == 2)
    {
      outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v29);
      outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v27);
LABEL_26:
      char v8 = specialized static Array<A>.== infix(_:_:)(v30, v28);
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v32 == 2)
  {
LABEL_11:
    outlined destroy of Toolbar.UpdateContext((uint64_t)v31);
    outlined destroy of Toolbar.UpdateContext((uint64_t)v33);
LABEL_12:
    outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v29);
    outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v27);
    goto LABEL_13;
  }
  char v15 = v32 ^ v34;
  outlined destroy of Toolbar.UpdateContext((uint64_t)v31);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v33);
  outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v29);
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v27);
  if ((v15 & 1) == 0) {
    goto LABEL_26;
  }
LABEL_13:
  char v8 = 0;
LABEL_14:
  outlined destroy of Toolbar.UpdateContext((uint64_t)v29);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v27);
  char v9 = specialized static HostingControllerOverrides.== infix(_:_:)(a1, a2);
  outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v25);
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v23);
  if ((v9 & 1) == 0) {
    goto LABEL_21;
  }
  uint64_t v10 = (void *)MEMORY[0x18C119DF0](&v26);
  uint64_t v11 = (void *)MEMORY[0x18C119DF0](&v24);
  uint64_t v12 = v11;
  if (!v10)
  {
    if (!v11)
    {
      outlined destroy of Toolbar.UpdateContext((uint64_t)v23);
      outlined destroy of Toolbar.UpdateContext((uint64_t)v25);
      outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v21);
      outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v19);
      goto LABEL_28;
    }

    goto LABEL_21;
  }

  if (!v12)
  {
LABEL_21:
    outlined destroy of Toolbar.UpdateContext((uint64_t)v23);
    outlined destroy of Toolbar.UpdateContext((uint64_t)v25);
    outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v21);
    outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v19);
    goto LABEL_22;
  }

  outlined destroy of Toolbar.UpdateContext((uint64_t)v23);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v25);
  outlined init with copy of Toolbar.UpdateContext(a1, (uint64_t)v21);
  outlined init with copy of Toolbar.UpdateContext(a2, (uint64_t)v19);
  if (v10 == v12)
  {
LABEL_28:
    uint64_t v16 = (void *)MEMORY[0x18C119DF0](&v22);
    uint64_t v17 = (void *)MEMORY[0x18C119DF0](&v20);
    uint64_t v18 = v17;
    if (v16)
    {

      if (v18)
      {

        BOOL v13 = v16 == v18;
        goto LABEL_35;
      }
    }
    else
    {
      if (!v17)
      {
        BOOL v13 = 1;
LABEL_35:
        outlined destroy of Toolbar.UpdateContext((uint64_t)v19);
        outlined destroy of Toolbar.UpdateContext((uint64_t)v21);
        if (v8) {
          return v13;
        }
        return 0;
      }
    }
    BOOL v13 = 0;
    goto LABEL_35;
  }
LABEL_22:
  outlined destroy of Toolbar.UpdateContext((uint64_t)v19);
  outlined destroy of Toolbar.UpdateContext((uint64_t)v21);
  return 0;
}

uint64_t outlined destroy of Toolbar.UpdateContext(uint64_t a1)
{
  return a1;
}

uint64_t destroy for Toolbar.UpdateContext(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8) != 2) {
    swift_unknownObjectWeakDestroy();
  }
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of Toolbar.UpdateContext(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for Toolbar.UpdateContext(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 8) == 2)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  }
  else
  {
    swift_unknownObjectWeakCopyInit();
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  }
  swift_unknownObjectWeakCopyInit();
  swift_unknownObjectWeakCopyInit();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  swift_unknownObjectWeakCopyInit();
  swift_unknownObjectWeakCopyInit();
  swift_unknownObjectWeakCopyInit();
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t UINavigationItem.hasContent.getter()
{
  uint64_t v1 = v0;
  id v2 = objc_msgSend(v0, sel_leftBarButtonItems);
  if (!v2) {
    goto LABEL_6;
  }
  int v3 = v2;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
  unint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v5)
  {
    BOOL v6 = 1;
  }
  else
  {
LABEL_6:
    id v7 = objc_msgSend(v1, sel_leadingItemGroups);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
    unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    BOOL v6 = v9 != 0;
  }
  id v10 = objc_msgSend(v1, sel_rightBarButtonItems);
  if (!v10) {
    goto LABEL_14;
  }
  uint64_t v11 = v10;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v13)
  {
    BOOL v14 = 1;
  }
  else
  {
LABEL_14:
    id v15 = objc_msgSend(v1, sel_trailingItemGroups);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
    unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v17 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    BOOL v14 = v17 != 0;
  }
  id v18 = objc_msgSend(v1, sel__bottomPalette);

  id v19 = objc_msgSend(v1, sel_searchController);
  id v20 = v19;
  if (v19) {

  }
  if (static SemanticFeature.isEnabled.getter())
  {
    id v21 = objc_msgSend(v1, sel_centerItemGroups);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
    unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v22 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v23 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    BOOL v24 = v23 != 0;
  }
  else
  {
    BOOL v24 = 0;
  }
  char v25 = UINavigationItem.hasLargeContent.getter() | v6;
  uint64_t result = 1;
  if ((v25 & 1) == 0 && !v18)
  {
    if (v20) {
      int v27 = 1;
    }
    else {
      int v27 = v24;
    }
    return v14 | v27;
  }
  return result;
}

uint64_t UINavigationItem.hasLargeContent.getter()
{
  id v1 = objc_msgSend(v0, sel_title);
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v5 = v4;

    swift_bridgeObjectRelease();
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v3 & 0xFFFFFFFFFFFFLL;
    }
    BOOL v7 = v6 == 0;
  }
  else
  {
    BOOL v7 = 1;
  }
  id v8 = objc_msgSend(v0, sel_titleView);
  if (v8)
  {
  }
  else if (v7)
  {
    return 0;
  }
  return 1;
}

uint64_t ToolbarBridge.uiSafeAreaTransitionState.getter()
{
  return Toolbar.PlatformVended.uiSafeAreaTransitionState.getter();
}

uint64_t Toolbar.PlatformVended.uiSafeAreaTransitionState.getter()
{
  if (*(void *)(v0 + 56))
  {
    uint64_t v1 = *(void *)(v0 + 56);
  }
  else
  {
    type metadata accessor for ToolbarSafeAreaTransitionState();
    uint64_t v1 = swift_allocObject();
    *(void *)(v1 + 16) = 0;
    *(void *)(v0 + 56) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

void ToolbarBridge.updateTabBar<A>(hostingController:)(id a1)
{
  id v2 = objc_msgSend(a1, sel_tabBarController);
  if (v2)
  {
    id v9 = v2;
    swift_getObjectType();
    if (objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI))
    {
      unsigned int v3 = objc_msgSend(a1, sel__appearState);
      id v4 = objc_msgSend(v9, sel_selectedViewController);
      id v5 = v4;
      if (v4 == a1 && v4 != 0 || v3 == 1) {
        ToolbarBridge.updateTabSidebar(tabBarController:)(v9);
      }

      id v8 = v5;
    }
    else
    {
      id v8 = v9;
    }
  }
}

void closure #1 in UIKitToolbarStrategy.updateNavigationAccessory()(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  BOOL v14 = 0;
  memset(v12, 0, sizeof(v12));
  long long v13 = xmmword_18835ED10;
  specialized ToolbarBridge.adjustEntries(in:_:)((uint64_t)v12, a1, (uint64_t)&v14);
  outlined destroy of Toolbar.BarLocation((uint64_t)v12);
  uint64_t v4 = a1 + direct field offset for ToolbarBridge.platformVended;
  id v5 = objc_msgSend(*(id *)(a1 + direct field offset for ToolbarBridge.platformVended + 8), sel__largeTitleAccessoryView);
  uint64_t v6 = v14;
  objc_msgSend(*(id *)(v4 + 8), sel__setLargeTitleAccessoryView_, v14);
  BOOL v7 = *(void **)(v4 + 8);
  id v8 = v5;
  id v9 = objc_msgSend(v7, sel__largeTitleAccessoryView);
  id v10 = v9;
  if (!v8)
  {
    if (!v9)
    {
      BOOL v11 = 0;
      goto LABEL_9;
    }

    goto LABEL_7;
  }
  if (!v9)
  {

LABEL_7:
    BOOL v11 = 1;
    goto LABEL_9;
  }

  BOOL v11 = v8 != v10;
LABEL_9:

  *a2 = v11;
}

uint64_t partial apply for closure #1 in UIKitToolbarStrategy.updateTabSidebar()@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in UIKitToolbarStrategy.updateTabSidebar()(a1, a2);
}

uint64_t closure #1 in UIKitToolbarStrategy.updateTabSidebar()@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  memset(v6, 0, sizeof(v6));
  long long v7 = xmmword_18838A9F0;
  uint64_t v4 = specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(void *__return_ptr))partial apply for closure #1 in UIKitToolbarStrategy.barButtonItems(in:));
  outlined destroy of Toolbar.BarLocation((uint64_t)v6);
  *(void *)(a1 + direct field offset for ToolbarBridge.platformVended + 24) = v4;
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = 1;
  return result;
}

uint64_t partial apply for closure #1 in UIKitToolbarStrategy.updateBottomBar()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  return closure #1 in UIKitToolbarStrategy.updateBottomBar()(a1, a2, a3);
}

void partial apply for closure #1 in UIKitToolbarStrategy.updateBarCenter()(uint64_t a1@<X0>, char *a2@<X8>)
{
}

void closure #1 in UIKitToolbarStrategy.updateBarCenter()(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = static SemanticFeature.isEnabled.getter();
  if (v4)
  {
    memset(v9, 0, sizeof(v9));
    long long v10 = xmmword_18834FC50;
    MEMORY[0x1F4188790](v4);
    specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(void *__return_ptr))closure #1 in UIKitToolbarStrategy.barButtonGroups(in:)partial apply);
    outlined destroy of Toolbar.BarLocation((uint64_t)v9);
    id v5 = *(void **)(a1 + direct field offset for ToolbarBridge.platformVended + 8);
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBarButtonItemGroup);
    id v6 = v5;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_setCenterItemGroups_, isa);

    char v8 = 1;
  }
  else
  {
    char v8 = 0;
  }
  *a2 = v8;
}

void closure #1 in UIKitToolbarStrategy.updateBarTitle()(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v28 = 0;
  unint64_t v29 = 0;
  memset(v27, 0, sizeof(v27));
  specialized ToolbarBridge.adjustEntries(in:_:)((uint64_t)v27, a1, (uint64_t)&v29);
  outlined destroy of Toolbar.BarLocation((uint64_t)v27);
  uint64_t v3 = a1 + direct field offset for ToolbarBridge.platformVended;
  id v4 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + direct field offset for ToolbarBridge.platformVended
                                                             + 8), sel_titleView));
  id v5 = v29;
  objc_msgSend(*(id *)(v3 + 8), sel_setTitleView_, v29);
  id v6 = *(void **)(v3 + 8);
  id v7 = v4;
  id v8 = objc_msgSend(v6, sel_titleView);
  id v9 = v8;
  if (v7)
  {

    if (v9)
    {

      BOOL v10 = v7 == v9;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v8)
  {

LABEL_6:
    BOOL v10 = 0;
    goto LABEL_8;
  }
  BOOL v10 = 1;
LABEL_8:
  id v11 = objc_msgSend(*(id *)(v3 + 8), sel_customizationIdentifier);
  if (v11)
  {
    unint64_t v12 = v11;
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  unint64_t v16 = (uint64_t *)(a1 + direct field offset for ToolbarBridge.toolbarStorage);
  if (*(void *)(a1 + direct field offset for ToolbarBridge.toolbarStorage + 40))
  {
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    id v19 = *(void **)(v3 + 8);
    swift_bridgeObjectRetain();
    if (v17)
    {
      id v20 = v19;
      swift_bridgeObjectRetain();
      id v21 = (void *)MEMORY[0x18C115780](v18, v17);
      swift_bridgeObjectRelease();
      char v22 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v18 = 0;
    id v19 = *(void **)(v3 + 8);
  }
  id v20 = v19;
  uint64_t v17 = 0;
  id v21 = 0;
  char v22 = 1;
LABEL_16:
  objc_msgSend(v20, sel_setCustomizationIdentifier_, v21);

  if (v10)
  {
    if (v15)
    {
      if ((v22 & 1) == 0)
      {
        if (v13 == v18 && v15 == v17) {
          char v25 = 1;
        }
        else {
          char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_29;
      }
    }
    else
    {

      if (v22)
      {
        char v25 = 1;
LABEL_29:
        BOOL v24 = a2;
        char v23 = v25 ^ 1;
        goto LABEL_30;
      }
    }
    swift_bridgeObjectRelease();
    char v25 = 0;
    goto LABEL_29;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v23 = 1;
  BOOL v24 = a2;
LABEL_30:
  *BOOL v24 = v23 & 1;
}

void partial apply for closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(uint64_t a1@<X1>, void *a2@<X8>)
{
  closure #1 in UIKitToolbarStrategy.barButtonItems(in:)(a1, *(void *)(v2 + 16), (uint64_t)partial apply for closure #1 in closure #1 in UIKitToolbarStrategy.barButtonItems(in:), a2);
}

uint64_t specialized ToolbarBridge.adjustEntries(in:_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized ToolbarBridge.adjustEntries(in:_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t *, uint64_t))closure #1 in closure #1 in UIKitToolbarStrategy.updateBarTitle());
}

{
  return specialized ToolbarBridge.adjustEntries(in:_:)(a1, a2, a3, (void (*)(uint64_t, uint64_t *, uint64_t))closure #1 in closure #1 in UIKitToolbarStrategy.updateNavigationAccessory());
}

uint64_t UIKitToolbarStrategy.makeBarItems()()
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  unint64_t v43 = MEMORY[0x1E4FBC860];
  unint64_t v44 = MEMORY[0x1E4FBC860];
  uint64_t result = specialized ToolbarStrategy.withUpdate<A>(_:)(v0, (uint64_t)&v44, (uint64_t)&v43);
  if (v44 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v17)
    {
LABEL_3:
      uint64_t v42 = v1;
      unint64_t v3 = v43;
      unint64_t v4 = v43 >> 62;
      unint64_t v41 = v43 >> 62;
      if (v43 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v20 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v5 >= 0) {
          uint64_t v21 = v5;
        }
        else {
          uint64_t v21 = v5 + 1;
        }
        uint64_t v6 = v21 >> 1;
        if (v20 >= 2)
        {
          if (v5 >= -1) {
            goto LABEL_59;
          }
          __break(1u);
        }
      }
      else
      {
        uint64_t v5 = *(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10);
        uint64_t v6 = (unint64_t)v5 >> 1;
        if ((unint64_t)v5 > 1)
        {
          if (*(void *)((v43 & 0xFFFFFFFFFFFFFF8) + 0x10) < v6)
          {
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
            return result;
          }
          while (1)
          {
            if ((v3 & 0xC000000000000001) != 0 && (unint64_t)(v5 + 1) >= 3)
            {
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
              Swift::Int v7 = 0;
              do
              {
                Swift::Int v8 = v7 + 1;
                _ArrayBuffer._typeCheckSlowPath(_:)(v7);
                Swift::Int v7 = v8;
              }
              while (v6 != v8);
            }
            if (v4)
            {
              swift_bridgeObjectRetain();
              uint64_t v9 = _CocoaArrayWrapper.subscript.getter();
              uint64_t v10 = v13;
              uint64_t v12 = v14;
              unint64_t v11 = v15;
              swift_bridgeObjectRelease();
            }
            else
            {
              uint64_t v9 = v3 & 0xFFFFFFFFFFFFFF8;
              uint64_t v10 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
              unint64_t v11 = (2 * v6) | 1;
              swift_bridgeObjectRetain();
              uint64_t v12 = 0;
            }
            specialized Array.append<A>(contentsOf:)(v9, v10, v12, v11);
            int v16 = 1;
LABEL_25:
            char v23 = self;
            id v24 = objc_msgSend(v23, sel_flexibleSpaceItem);
            MEMORY[0x18C115B40]();
            if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            unint64_t v25 = swift_bridgeObjectRetain();
            specialized Array.append<A>(contentsOf:)(v25);
            id v26 = objc_msgSend(v23, sel_flexibleSpaceItem);
            MEMORY[0x18C115B40]();
            if (*(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v42 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            if (!v16)
            {
LABEL_47:
              uint64_t v19 = v42;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              return v19;
            }
            unint64_t v4 = v41;
            if (!v41) {
              break;
            }
            swift_bridgeObjectRetain();
            uint64_t v27 = _CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
            if (v27 >= v6)
            {
              swift_bridgeObjectRetain();
              uint64_t v38 = _CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
              if (v38 < v6)
              {
                __break(1u);
LABEL_53:
                __break(1u);
LABEL_54:
                __break(1u);
LABEL_55:
                __break(1u);
LABEL_56:
                __break(1u);
LABEL_57:
                __break(1u);
                goto LABEL_58;
              }
LABEL_32:
              if (v5 < -1) {
                goto LABEL_54;
              }
              if (v41)
              {
                swift_bridgeObjectRetain();
                uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              if (v5 < v27) {
                goto LABEL_55;
              }
              if (v27 < 0) {
                goto LABEL_56;
              }
              if ((v3 & 0xC000000000000001) == 0 || v6 == v27) {
                goto LABEL_43;
              }
              if (v6 < v27)
              {
                type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
                Swift::Int v28 = v6;
                do
                {
                  Swift::Int v29 = v28 + 1;
                  _ArrayBuffer._typeCheckSlowPath(_:)(v28);
                  Swift::Int v28 = v29;
                }
                while (v27 != v29);
LABEL_43:
                if (v41)
                {
                  swift_bridgeObjectRetain();
                  uint64_t v30 = _CocoaArrayWrapper.subscript.getter();
                  uint64_t v31 = v33;
                  uint64_t v6 = v34;
                  unint64_t v32 = v35;
                  swift_bridgeObjectRelease();
                }
                else
                {
                  uint64_t v30 = v3 & 0xFFFFFFFFFFFFFF8;
                  uint64_t v31 = (v3 & 0xFFFFFFFFFFFFFF8) + 32;
                  unint64_t v32 = (2 * v27) | 1;
                  swift_bridgeObjectRetain();
                }
                specialized Array.append<A>(contentsOf:)(v30, v31, v6, v32);
                goto LABEL_47;
              }
              goto LABEL_57;
            }
LABEL_58:
            __break(1u);
LABEL_59:
            swift_bridgeObjectRetain();
            uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
            uint64_t result = swift_bridgeObjectRelease();
            if (v39 < 0) {
              goto LABEL_62;
            }
            swift_bridgeObjectRetain();
            uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
            uint64_t result = swift_bridgeObjectRelease();
            if (v40 < v6) {
              goto LABEL_61;
            }
          }
          uint64_t v27 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v27 < v6) {
            goto LABEL_53;
          }
          goto LABEL_32;
        }
      }
      unint64_t v22 = swift_bridgeObjectRetain();
      specialized Array.append<A>(contentsOf:)(v22);
      int v16 = 0;
      goto LABEL_25;
    }
  }
  else if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  unint64_t v18 = v43;
  if ((v43 & 0x8000000000000000) == 0 && (v43 & 0x4000000000000000) == 0)
  {
    swift_bridgeObjectRelease();
    return v18 & 0xFFFFFFFFFFFFFF8;
  }
  unint64_t v36 = swift_bridgeObjectRetain();
  uint64_t v37 = specialized _copyCollectionToContiguousArray<A>(_:)(v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return (uint64_t)v37;
}

uint64_t type metadata accessor for ToolbarSafeAreaTransitionState()
{
  return self;
}

id UITabBarController.combinedWithNavigationBar.getter()
{
  swift_getObjectType();
  id result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__uip_isFloatingTabBarEnabled);
  if (result)
  {
    id v2 = objc_msgSend(v0, sel_traitCollection);
    id v3 = objc_msgSend(v2, sel_userInterfaceIdiom);

    if (v3 == (id)1)
    {
      id v4 = objc_msgSend(v0, sel_traitCollection);
      id v5 = objc_msgSend(v4, sel_horizontalSizeClass);

      return (id)(v5 == (id)2);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t specialized Set.contains(_:)(char a1, uint64_t a2)
{
  if (!*(void *)(a2 + 16)) {
    goto LABEL_9;
  }
  Swift::UInt v3 = a1 & 1;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v3);
  Swift::Int v4 = Hasher._finalize()();
  uint64_t v5 = -1 << *(unsigned char *)(a2 + 32);
  unint64_t v6 = v4 & ~v5;
  uint64_t v7 = a2 + 56;
  if (((*(void *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v8 = *(void *)(a2 + 48);
  if (((v3 == 0) ^ *(unsigned __int8 *)(v8 + v6)))
  {
    char v9 = 1;
    return v9 & 1;
  }
  uint64_t v10 = ~v5;
  unint64_t v11 = (v6 + 1) & v10;
  if (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
  {
LABEL_9:
    char v9 = 0;
    return v9 & 1;
  }
  do
  {
    char v9 = (v3 == 0) ^ *(unsigned char *)(v8 + v11);
    if (v9) {
      break;
    }
    unint64_t v11 = (v11 + 1) & v10;
  }
  while (((*(void *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return v9 & 1;
}

BOOL UISplitViewController.mayHaveNavigationBarContent.getter()
{
  swift_getObjectType();
  BOOL result = 1;
  if (objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI))
  {
    id v1 = objc_msgSend(v0, sel_displayModeButtonVisibility);
    unsigned __int8 v2 = objc_msgSend(v0, sel_presentsWithGesture);
    if (v1 != (id)2 && (v1 || (v2 & 1) == 0)) {
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in ContainerRelativeFrameModifier.MakeLayout.resolvedLength(axis:size:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>, __n128 a3@<Q0>)
{
  a3.n128_u64[0] = *(void *)(v3 + 16);
  uint64_t result = *(unsigned __int8 *)(v3 + 32);
  uint64_t v7 = *(uint64_t (**)(__n128))(a1 + 24);
  if (v7)
  {
    if (*(unsigned char *)(v3 + 32)) {
      a3.n128_u64[0] = *(void *)(v3 + 24);
    }
    uint64_t result = v7(a3);
  }
  else if (*(unsigned char *)(v3 + 32))
  {
    a3.n128_u64[0] = *(void *)(v3 + 24);
  }
  *a2 = a3.n128_u64[0];
  return result;
}

id PortalGroupRendererEffect.makePlatformGroup()(uint64_t a1, int a2)
{
  Swift::Int v4 = (objc_class *)type metadata accessor for PortalGroupMarkerView();
  uint64_t v5 = (char *)objc_allocWithZone(v4);
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUIP33_5DAB09131F46EF4FA69B417F7F09D60321PortalGroupMarkerView_kind] = a1;
  *(_DWORD *)&v5[OBJC_IVAR____TtC7SwiftUIP33_5DAB09131F46EF4FA69B417F7F09D60321PortalGroupMarkerView_id] = a2;
  v10.id receiver = v5;
  v10.Class super_class = v4;
  id v6 = objc_msgSendSuper2(&v10, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
  id v7 = objc_msgSend(v6, sel_layer);
  objc_msgSend(v7, sel_setAllowsGroupOpacity_, 0);

  id v8 = objc_msgSend(v6, sel_layer);
  objc_msgSend(v8, sel_setAllowsGroupBlending_, 0);

  return v6;
}

uint64_t protocol witness for PlatformGroupFactory.updatePlatformGroup(_:) in conformance PortalGroupRendererEffect()
{
  uint64_t v1 = *v0;
  int v2 = *((_DWORD *)v0 + 2);
  type metadata accessor for PortalGroupMarkerView();
  swift_unknownObjectRetain();
  uint64_t v3 = swift_dynamicCastClass();
  if (v3)
  {
    *(void *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_5DAB09131F46EF4FA69B417F7F09D60321PortalGroupMarkerView_kind) = v1;
    *(_DWORD *)(v3 + OBJC_IVAR____TtC7SwiftUIP33_5DAB09131F46EF4FA69B417F7F09D60321PortalGroupMarkerView_id) = v2;
  }

  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for PortalGroupMarkerView()
{
  return self;
}

_UNKNOWN **base witness table accessor for ViewModifier in ProgressViewStyleModifier<A>()
{
  return &protocol witness table for ProgressViewStyleModifier<A>;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance UpdateViewDestinationRequest.UpdateViewDestinationRequestKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static UpdateViewDestinationRequest.UpdateViewDestinationRequestKey.defaultValue;

  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for AccessibilityRepresentableStyleModifier()
{
  return &type metadata for AccessibilityRepresentableStyleModifier;
}

uint64_t ScrollView.init(_:showsIndicators:content:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a4 + *(int *)(type metadata accessor for ScrollView() + 36);
  *(unsigned char *)uint64_t v7 = a1;
  *(unsigned char *)(v7 + 1) = a2;
  *(_OWORD *)(v7 + 8) = 0u;
  *(_OWORD *)(v7 + 24) = 0u;
  *(unsigned char *)(v7 + 40) = 2;
  *(void *)(v7 + 72) = 0;
  *(void *)(v7 + 48) = 0;
  *(void *)(v7 + 56) = 0;
  uint64_t v8 = swift_unknownObjectWeakInit();
  *(void *)(v7 + 112) = 0;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 96) = 0u;
  return a3(v8);
}

uint64_t type metadata accessor for ScrollView()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in _GeometryActionModifier<A>()
{
  return &protocol witness table for _GeometryActionModifier<A>;
}

void closure #1 in UIView.adoptEnvironment(_:hostedSubview:)(void *a1, char a2, void *a3)
{
  uint64_t v6 = a2 & 1;
  if (objc_msgSend(a1, sel_isUserInteractionEnabled) != v6) {
    objc_msgSend(a1, sel_setUserInteractionEnabled_, v6);
  }
  self;
  uint64_t v7 = swift_dynamicCastObjCClass();
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    id v9 = a3;
    if (objc_msgSend(v8, sel_isEnabled) != (a2 & 1)) {
      objc_msgSend(v8, sel_setEnabled_);
    }
  }
}

ValueMetadata *type metadata accessor for EffectiveLabelStyle()
{
  return &type metadata for EffectiveLabelStyle;
}

uint64_t protocol witness for static ViewInputsModifier.graphInputsSemantics.getter in conformance _CoordinateSpaceModifier<A>()
{
  return MEMORY[0x1F40FF7D8]();
}

ValueMetadata *type metadata accessor for ResetScrollEnvironmentModifier()
{
  return &type metadata for ResetScrollEnvironmentModifier;
}

uint64_t partial apply for implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)()
{
  return dispatch thunk of StatefulRule.updateValue()();
}

uint64_t GeometryActionBinder.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v110 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v90 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v111 = (char *)v85 - v7;
  uint64_t v105 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v8);
  id v94 = (char *)v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  id v89 = (char *)v85 - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v106 = (char *)v85 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v107 = (char *)v85 - v15;
  uint64_t v16 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v20);
  id v95 = (char *)v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  id v92 = (char *)v85 - v23;
  MEMORY[0x1F4188790](v24);
  uint64_t v109 = (char *)v85 - v25;
  MEMORY[0x1F4188790](v26);
  uint64_t v99 = (char *)v85 - v27;
  uint64_t v87 = v28;
  MEMORY[0x1F4188790](v29);
  uint64_t v112 = (char *)v85 - v30;
  uint64_t v31 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v32);
  id v93 = (char *)v85 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = v33;
  MEMORY[0x1F4188790](v34);
  uint64_t v113 = (char *)v85 - v35;
  if (*(_DWORD *)(v1 + *(int *)(a1 + 68)) != *(_DWORD *)AGGraphGetValue() >> 1) {
    specialized GeometryActionBinder.reset(seed:)((int *)a1);
  }
  ++*(_DWORD *)(v1 + *(int *)(a1 + 72));
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result != *MEMORY[0x1E4F4E7A0])
  {
    BOOL v115 = *(_DWORD *)(v1 + 20) == *MEMORY[0x1E4F4E7A0];
    GeometryProxy.init(owner:size:environment:transform:position:safeAreaInsets:seed:)();
    uint64_t Value = AGGraphGetValue();
    uint64_t v102 = v31;
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 16);
    uint64_t v39 = v113;
    v85[1] = v31 + 16;
    v85[0] = v38;
    v38(v113, Value, v4);
    uint64_t v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v1, a1);
    MEMORY[0x1F4188790](v40);
    uint64_t v104 = v4;
    uint64_t v41 = v110;
    v85[-4] = v4;
    v85[-3] = v41;
    v85[-2] = v39;
    v85[-1] = &v115;
    swift_getWitnessTable();
    uint64_t v42 = v112;
    StatefulRule.withObservation<A>(do:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, a1);
    uint64_t v43 = v114;
    unint64_t v44 = *(void (**)(char *, char *, uint64_t))(v114 + 16);
    uint64_t v45 = a1;
    uint64_t v46 = v107;
    uint64_t v101 = v114 + 16;
    uint64_t v100 = v44;
    v44(v107, v42, AssociatedTypeWitness);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(v46, 0, 1, AssociatedTypeWitness);
    uint64_t v98 = v45;
    uint64_t v47 = *(int *)(v45 + 76);
    uint64_t v97 = v2;
    uint64_t v48 = v2 + v47;
    uint64_t v49 = v105;
    uint64_t v50 = (char *)(v105 + 16);
    uint64_t v51 = *(void (**)(char *))(v105 + 16);
    uint64_t v52 = AssociatedTypeWitness;
    char v53 = v106;
    uint64_t v91 = v48;
    v51(v106);
    uint64_t v54 = v111;
    uint64_t v55 = &v111[*(int *)(TupleTypeMetadata2 + 48)];
    ((void (*)(char *, char *, uint64_t))v51)(v111, v46, v6);
    uint64_t v103 = v55;
    ((void (*)(char *, char *, uint64_t))v51)(v55, v53, v6);
    uint64_t v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48);
    unsigned int v57 = v56(v54, 1, v52);
    id v96 = v51;
    if (v57 == 1)
    {
      id v89 = v50;
      uint64_t v58 = *(void (**)(char *, uint64_t))(v49 + 8);
      v58(v53, v6);
      v58(v46, v6);
      uint64_t v59 = v52;
      if (v56(v103, 1, v52) == 1)
      {
        v58(v111, v6);
        (*(void (**)(char *, uint64_t))(v114 + 8))(v112, v52);
LABEL_19:
        uint64_t v70 = v104;
        uint64_t v69 = v102;
        return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v113, v70);
      }
      long long v88 = v56;
      uint64_t v61 = v98;
    }
    else
    {
      uint64_t v60 = v89;
      ((void (*)(char *, char *, uint64_t))v51)(v89, v54, v6);
      long long v88 = v56;
      uint64_t v59 = v52;
      if (v56(v103, 1, v52) != 1)
      {
        uint64_t v81 = v114;
        uint64_t v82 = v99;
        (*(void (**)(char *, char *, uint64_t))(v114 + 32))(v99, v103, v59);
        swift_getAssociatedConformanceWitness();
        LODWORD(TupleTypeMetadata2) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v83 = *(void (**)(char *, uint64_t))(v81 + 8);
        v83(v82, v59);
        uint64_t v58 = *(void (**)(char *, uint64_t))(v49 + 8);
        v58(v106, v6);
        v58(v107, v6);
        long long v84 = v83;
        v83(v60, v59);
        v58(v111, v6);
        uint64_t v61 = v98;
        uint64_t v62 = (void (*)(char *, uint64_t, uint64_t))v96;
        if (TupleTypeMetadata2)
        {
          v84(v112, v59);
          goto LABEL_19;
        }
LABEL_11:
        uint64_t v63 = v94;
        v62(v94, v91, v6);
        uint64_t v64 = v92;
        uint64_t v65 = (uint64_t)v112;
        v100(v92, v112, v59);
        if (v88(v63, 1, v59) == 1)
        {
          uint64_t v66 = v64;
          long long v67 = *(void (**)(char *, char *, uint64_t))(v114 + 32);
          v67(v109, v66, v59);
          v58(v63, v6);
        }
        else
        {
          uint64_t v68 = v114;
          (*(void (**)(char *, uint64_t))(v114 + 8))(v64, v59);
          long long v67 = *(void (**)(char *, char *, uint64_t))(v68 + 32);
          v67(v109, v63, v59);
        }
        uint64_t v69 = v102;
        if (GeometryActionBinder.dispatch(value:)(v65, v61))
        {
          uint64_t v70 = v104;
          ((void (*)(char *, char *, uint64_t))v85[0])(v93, v113, v104);
          id v71 = (void (*)(char *, uint64_t, uint64_t))v100;
          v100(v99, v109, v59);
          v71(v95, v65, v59);
          unint64_t v72 = (*(unsigned __int8 *)(v69 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
          uint64_t v73 = v114;
          uint64_t v74 = *(unsigned __int8 *)(v114 + 80);
          unint64_t v75 = (v86 + v74 + v72) & ~v74;
          unint64_t v76 = (v87 + v74 + v75) & ~v74;
          uint64_t v77 = swift_allocObject();
          uint64_t v78 = v110;
          *(void *)(v77 + 16) = v70;
          *(void *)(v77 + 24) = v78;
          (*(void (**)(unint64_t, char *, uint64_t))(v69 + 32))(v77 + v72, v93, v70);
          v67((char *)(v77 + v75), v99, v59);
          v67((char *)(v77 + v76), v95, v59);
          static Update.enqueueAction(_:)();
          swift_release();
          uint64_t v79 = *(void (**)(char *, uint64_t))(v73 + 8);
          v79(v109, v59);
          v79((char *)v65, v59);
        }
        else
        {
          uint64_t v80 = *(void (**)(char *, uint64_t))(v114 + 8);
          v80(v109, v59);
          v80((char *)v65, v59);
          uint64_t v70 = v104;
        }
        return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v113, v70);
      }
      uint64_t v58 = *(void (**)(char *, uint64_t))(v49 + 8);
      v58(v106, v6);
      v58(v107, v6);
      (*(void (**)(char *, uint64_t))(v114 + 8))(v60, v52);
      uint64_t v61 = v98;
    }
    (*(void (**)(char *, uint64_t))(v90 + 8))(v111, TupleTypeMetadata2);
    uint64_t v62 = (void (*)(char *, uint64_t, uint64_t))v96;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

uint64_t initializeWithCopy for TextFieldState.DeprecatedActions(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t destroy for TextFieldState.DeprecatedActions()
{
  swift_release();

  return swift_release();
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

Swift::Void __swiftcall PlatformViewChild.updateValue()()
{
}

uint64_t LazyTransition.updateValue()(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v32 - v10;
  uint64_t v12 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = v1;
  uint64_t v18 = *(void *)(v1 + 8);
  if (!v18) {
    __break(1u);
  }
  uint64_t v33 = v15;
  uint64_t v34 = v14;
  uint64_t v35 = v6;
  int v19 = *(_DWORD *)(v18 + 52);
  int v20 = *MEMORY[0x1E4F4E7A0];
  uint64_t v36 = AssociatedTypeWitness;
  if (v19 == v20)
  {
    ViewTraitCollection.init()();
    uint64_t v21 = v39[0];
  }
  else
  {
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    uint64_t Value = AGGraphGetValue();
    outlined init with copy of TableColumnList(Value, (uint64_t)v39);
    uint64_t v23 = v40;
    uint64_t v24 = v41;
    __swift_project_boxed_opaque_existential_1(v39, v40);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v24 + 40))(&v38, v23, v24);
    uint64_t v21 = v38;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
  }
  uint64_t v38 = v21;
  ViewTraitCollection.transition.getter();
  swift_bridgeObjectRelease();
  AnyTransition.base<A>(as:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v34);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v11, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 40))(v37 + *(int *)(a1 + 40), v17, v4);
  }
  uint64_t v25 = AGGraphGetValue();
  if (*(unsigned char *)(v25 + 5)) {
    uint64_t v26 = *(unsigned __int8 *)(v25 + 4);
  }
  else {
    uint64_t v26 = 1;
  }
  uint64_t v27 = PlaceholderContentView.init()();
  uint64_t v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 24))(v27, v26, v4, v3);
  MEMORY[0x1F4188790](v28);
  *(&v32 - 2) = a1;
  *(&v32 - 1) = swift_getWitnessTable();
  uint64_t v29 = v36;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v8, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v32 - 4), v36, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v30);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v8, v29);
}

uint64_t GeometryActionBinder.dispatch(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if ((unint64_t)*(unsigned __int8 *)(v2 + *(int *)(a2 + 64) + 12) << 32 == 0x200000000)
  {
    swift_getAssociatedTypeWitness();
    swift_getAssociatedConformanceWitness();
    type metadata accessor for ValueCycleDetector();
    char v5 = ValueCycleDetector.dispatch(value:label:isDebug:)();
  }
  else
  {
    char v5 = UpdateCycleDetector.dispatch(label:isDebug:)();
  }
  $defer #1 <A>() in GeometryActionBinder.dispatch(value:)(v3, a1);
  return v5 & 1;
}

uint64_t $defer #1 <A>() in GeometryActionBinder.dispatch(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for GeometryActionBinder() + 76);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v3, v5);
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v3, a2, AssociatedTypeWitness);
  uint64_t v6 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56);

  return v6(v3, 0, 1, AssociatedTypeWitness);
}

uint64_t PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updateValue()()
{
  int v4 = *(unsigned __int8 *)(v0 + 8);
  uint64_t result = specialized PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.modifier.getter();
  if (result)
  {
    uint64_t result = PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updatedVisibleIDs()();
    if (result)
    {
      if (UpdateCycleDetector.dispatch(label:isDebug:)())
      {
        swift_bridgeObjectRetain();
        PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.enqueueAction(ids:)();
        swift_bridgeObjectRelease();
      }
      uint64_t result = swift_bridgeObjectRelease();
    }
    char v2 = 1;
  }
  else
  {
    if (v4)
    {
      uint64_t v3 = static Array._allocateUninitialized(_:)();
      swift_bridgeObjectRelease();
      *(void *)(v0 + 32) = v3;
      swift_bridgeObjectRetain();
      PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.enqueueAction(ids:)();
      uint64_t result = swift_bridgeObjectRelease();
    }
    char v2 = 0;
  }
  *(unsigned char *)(v0 + 8) = v2;
  return result;
}

uint64_t specialized PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.modifier.getter()
{
  return *(unsigned __int8 *)AGGraphGetValue();
}

uint64_t type metadata accessor for PrimitiveTargetVisibilityModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SubscriptionView.Subscriber.updateValue()(void *a1)
{
  uint64_t v3 = (uint64_t (*)(uint64_t))a1[2];
  uint64_t v44 = *((void *)v3 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v43 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CombineIdentifier();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v40 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[4];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for ActionDispatcherSubscriber();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  uint64_t v42 = v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v38 = (char **)((char *)&v31 - v10);
  uint64_t v11 = (char *)a1[3];
  uint64_t v12 = a1[5];
  uint64_t v45 = v3;
  uint64_t v46 = v11;
  uint64_t v13 = v11;
  uint64_t v47 = v7;
  uint64_t v48 = v12;
  uint64_t v32 = type metadata accessor for SubscriptionView();
  uint64_t v14 = *(void *)(v32 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  MEMORY[0x1F4188790](v32);
  uint64_t v31 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v31 - v17;
  uint64_t v36 = v12;
  uint64_t v37 = v1;
  uint64_t v33 = *(void *)(v1 + 16);
  uint64_t v34 = v7;
  uint64_t v35 = v13;
  SubscriptionView.Subscriber.view.getter((uint64_t)&v31 - v17);
  uint64_t v19 = v32;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))((char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v18, v32);
  unint64_t v20 = (*(unsigned __int8 *)(v14 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  *((void *)v21 + 2) = v3;
  *((void *)v21 + 3) = v13;
  *((void *)v21 + 4) = v7;
  *((void *)v21 + 5) = v12;
  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(&v21[v20], v31, v19);
  uint64_t v45 = partial apply for closure #1 in SubscriptionView.Subscriber.updateValue();
  uint64_t v46 = v21;
  MEMORY[0x18C10C030](&v45);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v23 = v19;
  v22(v18, v19);
  uint64_t v24 = *(void *)(v37 + 16);
  swift_retain();
  uint64_t v25 = (uint64_t)v40;
  CombineIdentifier.init()();
  uint64_t v26 = v38;
  ActionDispatcherSubscriber.init(actionBox:combineIdentifier:)(v24, v25, v38);
  SubscriptionView.Subscriber.view.getter((uint64_t)v18);
  uint64_t v28 = v43;
  uint64_t v27 = v44;
  (*(void (**)(char *, char *, uint64_t (*)(uint64_t)))(v44 + 16))(v43, &v18[*(int *)(v23 + 52)], v3);
  v22(v18, v23);
  uint64_t v29 = v41;
  swift_getWitnessTable();
  swift_getWitnessTable();
  SubscriptionLifetime.subscribe<A>(subscriber:to:)();
  (*(void (**)(char *, uint64_t (*)(uint64_t)))(v27 + 8))(v28, v3);
  return (*(uint64_t (**)(void *, uint64_t))(v42 + 8))(v26, v29);
}

uint64_t destroy for SubscriptionView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8) + 8;
  (*(void (**)(void))v4)();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((*(void *)(v4 + 56)
                                                                                            + a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));

  return swift_release();
}

uint64_t destroy for ActionDispatcherSubscriber(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for CombineIdentifier();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t SubscriptionView.Subscriber.view.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for SubscriptionView();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t initializeWithCopy for SubscriptionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 48) + 7;
  uint64_t v15 = (void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for SubscriptionView()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithCopy for SceneBridgeReader(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<HoverEffect?>.Content(*a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v6;
  swift_retain();
  return a1;
}

uint64_t ActionDispatcherSubscriber.init(actionBox:combineIdentifier:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  uint64_t v4 = (char *)a3 + *(int *)(type metadata accessor for ActionDispatcherSubscriber() + 28);
  uint64_t v5 = type metadata accessor for CombineIdentifier();
  uint64_t v6 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);

  return v6(v4, a2, v5);
}

uint64_t type metadata accessor for ActionDispatcherSubscriber()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t IsAnimated.updateValue()(uint64_t a1)
{
  void v17[2] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  type metadata accessor for TransactionalPreferenceTransformModifier();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v6 = v5;
  uint64_t v8 = *Value;
  uint64_t v7 = Value[1];
  v17[0] = swift_getAssociatedTypeWitness();
  uint64_t v9 = MEMORY[0x1E4FBC848] + 8;
  uint64_t FunctionTypeMetadata = swift_getFunctionTypeMetadata();
  uint64_t result = AGGraphGetOutputValue();
  if (result) {
    BOOL v12 = (v6 & 1) == 0;
  }
  else {
    BOOL v12 = 0;
  }
  if (!v12)
  {
    swift_retain();
    AGGraphClearUpdate();
    uint64_t v13 = *(void *)AGGraphGetValue();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v14 = (void *)swift_allocObject();
    v14[2] = v2;
    v14[3] = v3;
    v14[4] = v8;
    v14[5] = v7;
    v14[6] = v13;
    v17[0] = partial apply for closure #2 in IsAnimated.updateValue();
    v17[1] = v14;
    MEMORY[0x1F4188790](v14);
    void v16[2] = a1;
    v16[3] = swift_getWitnessTable();
    swift_retain();
    swift_retain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v17, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v16, FunctionTypeMetadata, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v15);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

{
  char *v1;
  char *v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t OutputValue;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t AssociatedTypeWitness;
  uint64_t v46;
  char *v47;
  char v48;
  char v49[16];
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  void v55[6];

  v55[4] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(char **)(a1 + 40);
  uint64_t v4 = *(char **)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v36 = (char *)&v36 - v5;
  char v6 = *(char **)(a1 + 16);
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = *(char **)(a1 + 32);
  v55[0] = v6;
  v55[1] = v4;
  v55[2] = v11;
  v55[3] = v3;
  uint64_t v41 = type metadata accessor for TransactionalPreferenceModifier();
  uint64_t v46 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  uint64_t v13 = (char *)&v36 - v12;
  IsAnimated.modifier.getter((uint64_t)&v36 - v12);
  uint64_t v38 = a1;
  uint64_t v14 = *(int *)(a1 + 56);
  uint64_t v42 = v1;
  uint64_t v15 = &v1[v14];
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v10, &v1[v14], v7);
  uint64_t v39 = v6;
  uint64_t v50 = v6;
  uint64_t v51 = v4;
  uint64_t v43 = v4;
  uint64_t v40 = v11;
  uint64_t v52 = v11;
  char v53 = v3;
  uint64_t v44 = v3;
  uint64_t v47 = v13;
  uint64_t v54 = v13;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in IsAnimated.updateValue(), (uint64_t)v49, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], v16, (uint64_t)&v48);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v10, v7);
  if (v48 == 2 || (v48 & 1) != 0)
  {
    v17(v15, v7);
    uint64_t v25 = v39;
    uint64_t v27 = *((void *)v39 - 1);
    (*(void (**)(char *, char *, char *))(v27 + 16))(v15, v47, v39);
    (*(void (**)(char *, void, uint64_t, char *))(v27 + 56))(v15, 0, 1, v25);
    AGGraphClearUpdate();
    uint64_t v22 = v42;
    unint64_t v20 = v43;
    uint64_t v24 = v40;
    uint64_t v21 = v44;
    closure #2 in IsAnimated.updateValue()(v55);
    AGGraphSetUpdate();
    uint64_t v28 = v55[0];
    uint64_t v26 = (char *)v38;
    uint64_t v29 = *(int *)(v38 + 60);
    Outputuint64_t Value = swift_release();
    *(void *)&v22[v29] = v28;
    uint64_t v18 = AssociatedTypeWitness;
LABEL_6:
    MEMORY[0x1F4188790](OutputValue);
    *(&v36 - 6) = v25;
    *(&v36 - 5) = v20;
    *(&v36 - 4) = v24;
    *(&v36 - 3) = v21;
    *(&v36 - 2) = v22;
    uint64_t v30 = (uint64_t)v36;
    uint64_t v32 = v31;
    uint64_t v33 = Attribute.syncMainIfReferences<A>(do:)();
    MEMORY[0x1F4188790](v33);
    *(&v36 - 2) = v26;
    *(&v36 - 1) = (char *)swift_getWitnessTable();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v30, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v36 - 4), v18, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v34);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v30, v18);
    uint64_t v23 = v32;
    return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v47, v23);
  }
  uint64_t v18 = AssociatedTypeWitness;
  Outputuint64_t Value = AGGraphGetOutputValue();
  unint64_t v20 = v43;
  uint64_t v21 = v44;
  uint64_t v22 = v42;
  uint64_t v23 = v41;
  uint64_t v24 = v40;
  uint64_t v25 = v39;
  uint64_t v26 = (char *)v38;
  if (!OutputValue) {
    goto LABEL_6;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v47, v23);
}

uint64_t type metadata accessor for TransactionalPreferenceTransformModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updatedVisibleIDs()()
{
  uint64_t v40 = static Array._allocateUninitialized(_:)();
  unsigned int v1 = *v0;
  unsigned int v2 = v0[1];
  char v3 = *((unsigned char *)v0 + 8);
  unsigned int v4 = v0[5];
  char v5 = *((unsigned char *)v0 + 24);
  unsigned int v6 = v0[7];
  uint64_t v7 = *((void *)v0 + 4);
  type metadata accessor for [ScrollTargetRole.Role : [ScrollableCollection]]();
  uint64_t v8 = *(void *)AGGraphGetValue();
  unint64_t v34 = __PAIR64__(v2, v1);
  char v35 = v3;
  uint64_t v9 = v8;
  uint64_t v29 = v0;
  uint64_t v36 = *(void *)(v0 + 3);
  unsigned int v37 = v4;
  LOBYTE(v38) = v5;
  HIDWORD(v38) = v6;
  uint64_t v39 = v7;
  specialized PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.modifier.getter();
  uint64_t v30 = v9 + 64;
  uint64_t v10 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v9 + 64);
  int64_t v32 = (unint64_t)(v10 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v14 = 0;
  uint64_t v31 = v9;
  while (v12)
  {
    unint64_t v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    unint64_t v16 = v15 | (v14 << 6);
LABEL_22:
    uint64_t v20 = *(void *)(*(void *)(v9 + 56) + 8 * v16);
    uint64_t v21 = *(void *)(v20 + 16);
    if (v21)
    {
      int64_t v33 = v14;
      uint64_t v22 = v20 + 32;
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of TableColumnList(v22, (uint64_t)&v34);
        uint64_t v23 = v39;
        uint64_t v24 = __swift_project_boxed_opaque_existential_1(&v34, v38);
        double v25 = MEMORY[0x1F4188790](v24);
        (*(void (**)(uint64_t (*)(unsigned int *, uint64_t), double))(v23 + 24))(partial apply for closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updatedVisibleIDs(), v25);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v34);
        v22 += 40;
        --v21;
      }
      while (v21);
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v9 = v31;
      int64_t v14 = v33;
    }
  }
  int64_t v17 = v14 + 1;
  if (__OFADD__(v14, 1))
  {
    __break(1u);
LABEL_31:
    __break(1u);
    return result;
  }
  if (v17 >= v32) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v30 + 8 * v17);
  ++v14;
  if (v18) {
    goto LABEL_21;
  }
  int64_t v14 = v17 + 1;
  if (v17 + 1 >= v32) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v30 + 8 * v14);
  if (v18) {
    goto LABEL_21;
  }
  int64_t v14 = v17 + 2;
  if (v17 + 2 >= v32) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v30 + 8 * v14);
  if (v18) {
    goto LABEL_21;
  }
  int64_t v14 = v17 + 3;
  if (v17 + 3 >= v32) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v30 + 8 * v14);
  if (v18)
  {
LABEL_21:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
    goto LABEL_22;
  }
  int64_t v19 = v17 + 4;
  if (v19 < v32)
  {
    unint64_t v18 = *(void *)(v30 + 8 * v19);
    if (!v18)
    {
      while (1)
      {
        int64_t v14 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          goto LABEL_31;
        }
        if (v14 >= v32) {
          goto LABEL_26;
        }
        unint64_t v18 = *(void *)(v30 + 8 * v14);
        ++v19;
        if (v18) {
          goto LABEL_21;
        }
      }
    }
    int64_t v14 = v19;
    goto LABEL_21;
  }
LABEL_26:
  swift_release();
  uint64_t v26 = v40;
  swift_bridgeObjectRetain();
  char v27 = static Array<A>.== infix(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v27)
  {
    uint64_t v28 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v28 = v26;
  }
  *((void *)v29 + 4) = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t LazyScrollable.forEachVisibleSubview(_:)(void (*a1)(long long *, char *))
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v2 = result;
    if (AGSubgraphIsValid())
    {
      LazyScrollable.transform.getter((uint64_t)&v45);
      uint64_t v3 = v45;
      if ((void)v45 != 1)
      {
        long long v52 = v45;
        long long v53 = *(_OWORD *)v46;
        uint64_t v54 = *(void *)&v46[16];
        Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
        if (WeakValue)
        {
          uint64_t v5 = *WeakValue;
          uint64_t v6 = WeakValue[1];
          int v41 = *(unsigned __int8 *)AGGraphGetValue();
          int v7 = *(_DWORD *)(v2 + 40);
          uint64_t v8 = *(void *)(v2 + 48);
          int v9 = *(_DWORD *)(v2 + 112);
          *(void *)&long long v45 = *(void *)(v2 + 32);
          DWORD2(v45) = v7;
          *(void *)uint64_t v46 = v8;
          *(_OWORD *)&v46[8] = *(_OWORD *)(v2 + 56);
          *(_OWORD *)&v46[24] = *(_OWORD *)(v2 + 72);
          *(_OWORD *)&v46[40] = *(_OWORD *)(v2 + 88);
          uint64_t v47 = *(void *)(v2 + 104);
          int v48 = v9;
          _ViewInputs.size.getter();
          uint64_t Value = (long long *)AGGraphGetValue();
          long long v11 = Value[1];
          long long v45 = *Value;
          *(_OWORD *)uint64_t v46 = v11;
          MEMORY[0x18C114450]();
          type metadata accessor for [Any](0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
          uint64_t v12 = *(void *)AGGraphGetValue();
          *(void *)&long long v45 = v5;
          *((void *)&v45 + 1) = v6;
          uint64_t v13 = swift_bridgeObjectRetain();
          *(double *)&unint64_t v14 = MEMORY[0x18C10C240](v13);
          ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v15, v14));
          char v51 = 0;
          uint64_t v16 = *(void *)(v12 + 16);
          if (v16)
          {
            uint64_t v17 = v16 - 1;
            unint64_t v18 = (char *)(v12 + 48);
            do
            {
              uint64_t v19 = v17;
              uint64_t v20 = *((void *)v18 - 2);
              uint64_t v21 = *((void *)v18 - 1);
              char v22 = *v18;
              uint64_t v23 = *((void *)v18 + 1);
              char v24 = v18[16];
              *(void *)&long long v45 = v21;
              BYTE8(v45) = v22;
              *(void *)uint64_t v46 = v23;
              v46[8] = v24;
              *(_OWORD *)&v46[16] = *(_OWORD *)(v18 + 24);
              *(_OWORD *)&v46[32] = *(_OWORD *)(v18 + 40);
              uint64_t v43 = *(void *)(v20 + 32);
              uint64_t v44 = *(void *)(v20 + 40);
              swift_retain_n();
              if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
              {
                static LayoutComputer.defaultValue.getter();
                uint64_t v27 = v43;
                uint64_t v26 = v44;
              }
              else
              {
                double v25 = (uint64_t *)AGGraphGetValue();
                uint64_t v27 = *v25;
                uint64_t v26 = v25[1];
                swift_retain();
              }
              uint64_t v49 = v27;
              uint64_t v50 = v26;
              LayoutComputer.sizeThatFits(_:)();
              unint64_t v29 = v28;
              unint64_t v31 = v30;
              swift_release();
              CGPoint v32 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v31, v29));
              long long v45 = *(_OWORD *)(v20 + 32);
              if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
              {
                static LayoutComputer.defaultValue.getter();
              }
              else
              {
                int64_t v33 = (void *)AGGraphGetValue();
                uint64_t v34 = v33[1];
                *(void *)&long long v45 = *v33;
                *((void *)&v45 + 1) = v34;
                swift_retain();
              }
              *(void *)&long long v45 = v21;
              BYTE8(v45) = v22;
              *(void *)uint64_t v46 = v23;
              v46[8] = v24;
              LayoutComputer.sizeThatFits(_:)();
              CGFloat v36 = v35;
              CGFloat v38 = v37;
              swift_release_n();
              swift_release();
              if (v41)
              {
                v56.origin.x = v32.x;
                v56.origin.y = v32.y;
                v56.size.width = v36;
                v56.size.height = v38;
                CGRectGetMaxX(v56);
              }
              uint64_t v39 = *((void *)v18 - 2);
              uint64_t v40 = *(void *)(v39 + 144);
              uint64_t v49 = *(void *)(v39 + 136);
              uint64_t v50 = v40;
              swift_bridgeObjectRetain();
              swift_retain();
              ScrollableCollectionSubview.init(id:frame:transform:)();
              a1(&v45, &v51);
              swift_bridgeObjectRelease();
              swift_release();
              if (v51) {
                break;
              }
              uint64_t v17 = v19 - 1;
              v18 += 72;
            }
            while (v19);
          }
          swift_bridgeObjectRelease();
          swift_release();
        }
        else
        {
          outlined consume of Transaction?(v3);
        }
      }
      return swift_release();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updatedVisibleIDs()(unsigned int *a1, uint64_t a2)
{
  return closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updatedVisibleIDs()(a1, *(double *)(v2 + 32), a2, *(void *)(v2 + 40), *(void *)(v2 + 16));
}

uint64_t closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updatedVisibleIDs()(unsigned int *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v49 = a4;
  double v51 = a2;
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v47 - v9;
  MEMORY[0x1F4188790](v11);
  int v48 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  unint64_t v15 = (char *)&v47 - v14;
  unsigned int v17 = *a1;
  unsigned int v16 = a1[1];
  uint64_t v18 = *((void *)a1 + 1);
  uint64_t v19 = *((void *)a1 + 2);
  uint64_t v20 = *((void *)a1 + 3);
  uint64_t v21 = *((void *)a1 + 4);
  uint64_t v22 = *((void *)a1 + 5);
  uint64_t v50 = *((void *)a1 + 6);
  uint64_t v23 = *((void *)a1 + 7);
  uint64_t v24 = *((void *)a1 + 8);
  uint64_t v26 = *((void *)a1 + 9);
  uint64_t v25 = *((void *)a1 + 10);
  *(void *)&long long v58 = __PAIR64__(v16, v17);
  *((void *)&v58 + 1) = v18;
  uint64_t v28 = v27;
  _ViewList_ID.explicitID<A>(for:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v10, 1, a5) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  unint64_t v30 = v15;
  (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v15, v10, a5);
  *(void *)&long long v58 = __PAIR64__(v16, v17);
  *((void *)&v58 + 1) = v18;
  *(void *)&long long v59 = v19;
  *((void *)&v59 + 1) = v20;
  uint64_t v60 = v21;
  uint64_t v61 = v22;
  uint64_t v31 = v50;
  uint64_t v62 = v50;
  uint64_t v63 = v23;
  uint64_t v64 = v24;
  uint64_t v65 = v26;
  uint64_t v66 = v25;
  ScrollableCollectionSubview.frame.getter();
  CGFloat v33 = v32;
  CGFloat v35 = v34;
  CGFloat v37 = v36;
  CGFloat v39 = v38;
  v57.origin.CGFloat x = v32;
  v57.origin.CGFloat y = v34;
  v57.size.width = v36;
  v57.size.CGFloat height = v38;
  uint64_t v60 = 0;
  long long v58 = 0u;
  long long v59 = 0u;
  LOBYTE(v61) = 2;
  uint64_t v52 = v31;
  uint64_t v53 = v23;
  uint64_t v54 = v24;
  uint64_t v55 = v26;
  uint64_t v56 = v25;
  CGRect.convertAndClipToScrollView(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)&v58);
  v67.origin.CGFloat x = v33;
  v67.origin.CGFloat y = v35;
  v67.size.width = v37;
  v67.size.CGFloat height = v39;
  double Width = CGRectGetWidth(v67);
  v68.origin.CGFloat x = v33;
  v68.origin.CGFloat y = v35;
  v68.size.width = v37;
  v68.size.CGFloat height = v39;
  double v41 = Width * CGRectGetHeight(v68);
  CGFloat x = v57.origin.x;
  CGFloat y = v57.origin.y;
  CGFloat v44 = v57.size.width;
  CGFloat height = v57.size.height;
  double v46 = CGRectGetWidth(v57);
  v69.origin.CGFloat x = x;
  v69.origin.CGFloat y = y;
  v69.size.width = v44;
  v69.size.CGFloat height = height;
  if (v46 * CGRectGetHeight(v69) / v41 >= v51)
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v48, v30, a5);
    type metadata accessor for Array();
    Array.append(_:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v30, a5);
}

uint64_t outlined destroy of CoordinateSpace(uint64_t a1)
{
  return a1;
}

uint64_t LazyScrollable.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = AGGraphGetWeakValue();
  if (result)
  {
    long long v6 = *(_OWORD *)result;
    long long v7 = *(_OWORD *)(result + 16);
    uint64_t v3 = *(void *)(result + 32);
    uint64_t result = swift_retain();
    long long v4 = v6;
    long long v5 = v7;
  }
  else
  {
    uint64_t v3 = 0;
    long long v4 = xmmword_18834FC50;
    long long v5 = 0uLL;
  }
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = v3;
  return result;
}

uint64_t destroy for _TaskValueModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = type metadata accessor for TaskPriority();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5 + 8;
  unint64_t v7 = (a1 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v8 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v9 = *(uint64_t (**)(unint64_t))(v8 + 8);
  unint64_t v10 = (v7 + *(void *)(v6 + 56) + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);

  return v9(v10);
}

uint64_t destroy for EnvironmentChangeModifier()
{
  swift_release();

  return swift_release();
}

uint64_t ScrollActionDispatcher.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v91 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  id v96 = (char *)&v88 - v8;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v10);
  id v89 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v104 = (char *)&v88 - v13;
  uint64_t v107 = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v101 = *(void *)(v14 - 8);
  uint64_t v102 = (unsigned int (*)(void, void, void))v14;
  MEMORY[0x1F4188790](v14);
  unsigned int v16 = (char *)&v88 - v15;
  uint64_t v105 = *(void *)(v7 - 8);
  *(void *)&long long v110 = v105;
  MEMORY[0x1F4188790](v17);
  uint64_t v90 = (char *)&v88 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v97 = (char *)&v88 - v20;
  MEMORY[0x1F4188790](v21);
  uint64_t v98 = (char *)&v88 - v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v88 - v24;
  MEMORY[0x1F4188790](v26);
  uint64_t v111 = (uint64_t)&v88 - v27;
  uint64_t v113 = v4;
  uint64_t v28 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v29);
  uint64_t v112 = (uint64_t)&v88 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v31 = *(_DWORD *)AGGraphGetValue() >> 1;
  uint64_t v32 = *(int *)(a1 + 48);
  if (v31 != *(_DWORD *)(v2 + v32))
  {
    *(_DWORD *)(v2 + v32) = v31;
    uint64_t v33 = v2 + *(int *)(a1 + 44);
    *(void *)(v33 + 4) = 0xFFFFFFFFLL;
    *(unsigned char *)(v33 + 12) = 0;
    uint64_t v34 = v2 + *(int *)(a1 + 52);
    (*(void (**)(uint64_t, uint64_t))(v110 + 8))(v34, v7);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v34, 1, 1, AssociatedTypeWitness);
  }
  uint64_t v100 = (void (*)(void, void, void))v25;
  uint64_t v109 = v9;
  uint64_t v106 = v7;
  uint64_t v35 = specialized ScrollActionDispatcher.inputs.getter();
  uint64_t v103 = v28;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16))(v112, v2, v113);
  swift_bridgeObjectRetain();
  uint64_t v95 = dispatch thunk of CustomDebugStringConvertible.debugDescription.getter();
  unint64_t v108 = v36;
  if (MEMORY[0x18C115C50](v35, v107) >= 2)
  {
    os_log_type_t v37 = static os_log_type_t.fault.getter();
    CGFloat v38 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v39 = v37;
    if (os_log_type_enabled(v38, v37))
    {
      uint64_t v40 = v5;
      unint64_t v41 = v108;
      swift_bridgeObjectRetain_n();
      uint64_t v94 = v40;
      uint64_t v42 = swift_slowAlloc();
      uint64_t v93 = v2;
      uint64_t v43 = (uint8_t *)v42;
      uint64_t v44 = swift_slowAlloc();
      uint64_t v92 = AssociatedTypeWitness;
      uint64_t v45 = v44;
      v115[0] = (uint64_t (*)())v44;
      *(_DWORD *)uint64_t v43 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v41, (uint64_t *)v115);
      uint64_t v46 = v94;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v5 = v46;
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v38, v39, "%s: Multiple scroll views were found. Picking the first one to compare.", v43, 0xCu);
      swift_arrayDestroy();
      uint64_t v47 = v45;
      uint64_t AssociatedTypeWitness = v92;
      MEMORY[0x18C119C60](v47, -1, -1);
      int v48 = v43;
      uint64_t v2 = v93;
      MEMORY[0x18C119C60](v48, -1, -1);
    }
  }
  uint64_t v107 = a1;
  v115[0] = (uint64_t (*)())v35;
  type metadata accessor for Array();
  swift_getWitnessTable();
  Collection.first.getter();
  uint64_t v49 = swift_bridgeObjectRelease();
  MEMORY[0x1F4188790](v49);
  *(&v88 - 4) = v113;
  *(&v88 - 3) = v5;
  uint64_t v51 = v111;
  uint64_t v50 = v112;
  *(&v88 - 2) = v2;
  *(&v88 - 1) = v50;
  uint64_t v52 = v102;
  _sSq7flatMapyqd_0_SgABxqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ScrollActionDispatcher.updateValue(), (uint64_t)(&v88 - 6), MEMORY[0x1E4FBC248], AssociatedTypeWitness, v53, v51);
  (*(void (**)(char *, unsigned int (*)(void, void, void)))(v101 + 8))(v16, v52);
  uint64_t v54 = v110;
  uint64_t v55 = AssociatedTypeWitness;
  uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v110 + 16);
  uint64_t v57 = v5;
  long long v58 = v100;
  uint64_t v59 = v106;
  v56((char *)v100, v51, v106);
  uint64_t v60 = v109;
  uint64_t v102 = *(unsigned int (**)(void, void, void))(v109 + 48);
  if (v102(v58, 1, v55) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v61 = *(void (**)(void, void))(v54 + 8);
    v61(v58, v59);
    goto LABEL_23;
  }
  uint64_t v94 = v57;
  uint64_t v62 = v2;
  uint64_t v100 = *(void (**)(void, void, void))(v60 + 32);
  uint64_t v101 = v60 + 32;
  v100(v104, v58, v55);
  uint64_t v63 = v98;
  (*(void (**)(void))(v60 + 16))();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(v63, 0, 1, v55);
  uint64_t v64 = *(int *)(v107 + 52);
  uint64_t v93 = v62;
  uint64_t v65 = v62 + v64;
  uint64_t v66 = v97;
  v56(v97, v65, v59);
  CGRect v67 = v96;
  CGRect v68 = &v96[*(int *)(TupleTypeMetadata2 + 48)];
  v56(v96, (uint64_t)v63, v59);
  v56(v68, (uint64_t)v66, v59);
  CGRect v69 = (uint64_t (*)(char *, uint64_t, uint64_t))v102;
  if (v102(v67, 1, v55) == 1)
  {
    uint64_t v61 = *(void (**)(void, void))(v110 + 8);
    v61(v66, v59);
    v61(v63, v59);
    int v70 = v69(v68, 1, v55);
    uint64_t v92 = v55;
    if (v70 == 1)
    {
      v61(v67, v59);
      swift_bridgeObjectRelease();
      uint64_t v2 = v93;
      (*(void (**)(char *, uint64_t))(v109 + 8))(v104, v92);
      goto LABEL_23;
    }
    uint64_t v74 = v94;
    uint64_t v2 = v93;
    uint64_t v72 = v109;
  }
  else
  {
    id v71 = v90;
    v56(v90, (uint64_t)v67, v59);
    if (v69(v68, 1, v55) != 1)
    {
      unint64_t v76 = v89;
      v100(v89, v68, v55);
      uint64_t v74 = v94;
      swift_getAssociatedConformanceWitness();
      char v77 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v72 = v109;
      uint64_t v78 = *(void (**)(char *, uint64_t))(v109 + 8);
      v78(v76, v55);
      uint64_t v61 = *(void (**)(void, void))(v110 + 8);
      v61(v97, v59);
      v61(v98, v59);
      v78(v71, v55);
      uint64_t v75 = ((uint64_t (*)(char *, uint64_t))v61)(v96, v59);
      if (v77)
      {
        swift_bridgeObjectRelease();
        uint64_t v2 = v93;
        v78(v104, v55);
        goto LABEL_23;
      }
      uint64_t v92 = v55;
      uint64_t v2 = v93;
      goto LABEL_20;
    }
    uint64_t v61 = *(void (**)(void, void))(v110 + 8);
    v61(v97, v59);
    v61(v98, v59);
    uint64_t v72 = v109;
    uint64_t v73 = *(void (**)(char *, uint64_t))(v109 + 8);
    uint64_t v92 = v55;
    v73(v71, v55);
    uint64_t v74 = v94;
    uint64_t v2 = v93;
  }
  uint64_t v75 = (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v67, TupleTypeMetadata2);
LABEL_20:
  MEMORY[0x1F4188790](v75);
  unint64_t v79 = v108;
  *(&v88 - 2) = v95;
  *(&v88 - 1) = v79;
  char v80 = UpdateCycleDetector.dispatch(label:isDebug:)();
  swift_bridgeObjectRelease();
  if (v80)
  {
    AGGraphClearUpdate();
    uint64_t v81 = (uint64_t)v104;
    closure #2 in ScrollActionDispatcher.updateValue()(v112, v2, (uint64_t)v104, v113, v74, v115);
    AGGraphSetUpdate();
    long long v110 = *(_OWORD *)v115;
    uint64_t v82 = swift_allocObject();
    *(_OWORD *)(v82 + 16) = v110;
    uint64_t Strong = swift_weakLoadStrong();
    long long v84 = (void *)swift_allocObject();
    v84[2] = partial apply for thunk for @escaping @callee_guaranteed () -> (@out ());
    v84[3] = v82;
    v84[4] = Strong;
    swift_retain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v81, v92);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v72 + 8))(v104, v92);
  }
LABEL_23:
  uint64_t v85 = v111;
  uint64_t v86 = v113;
  $defer #1 <A>() in ScrollActionDispatcher.updateValue()(v2, v111);
  v61(v85, v59);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v103 + 8))(v112, v86);
}

uint64_t specialized ScrollActionDispatcher.inputs.getter()
{
  return *(void *)AGGraphGetValue();
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OnScrollGeometryChangeModifier<A>.GeometryActionProvider()
{
  return 0xD000000000000021;
}

unint64_t *UpdateViewDestinationRequestProcessor.PreferenceDebouncer.updateValue()()
{
  uint64_t v14 = *(void *)(v0 + 32);
  uint64_t v15 = *(void *)(v0 + 24);
  uint64_t v1 = *(void *)(v0 + 56);
  int v2 = *(_DWORD *)(v0 + 64);
  int v3 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v3 != v2)
  {
    *(_DWORD *)(v0 + 64) = v3;
    *(void *)(v0 + 44) = 0xFFFFFFFFLL;
    *(unsigned char *)(v0 + 52) = 0;
  }
  AGGraphGetValue();
  char v5 = v4;
  type metadata accessor for Optional();
  AGGraphGetValue();
  char v7 = v6;
  uint64_t v8 = *(void *)AGGraphGetValue();
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue) {
    uint64_t v10 = *WeakValue;
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v11 = WeakValue == 0;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v10;
  *(unsigned char *)(v12 + 24) = v11;
  *(void *)(v12 + 28) = v1;
  *(unsigned char *)(v12 + 36) = v5 & 1;
  *(unsigned char *)(v12 + 37) = v7 & 1;
  *(void *)(v12 + 40) = 0;
  *(void *)(v12 + 48) = v15;
  *(void *)(v12 + 56) = v14;
  *(void *)(v12 + 64) = v8;
  *(unsigned char *)(v12 + 72) = 0;
  type metadata accessor for (_:)();
  outlined copy of Text.LineStyle?(v15, v14);
  AGGraphSetOutputValue();
  swift_release();
  return $defer #1 <A, B>() in UpdateViewDestinationRequestProcessor.PreferenceDebouncer.updateValue()(v0);
}

unint64_t *$defer #1 <A, B>() in UpdateViewDestinationRequestProcessor.PreferenceDebouncer.updateValue()(uint64_t a1)
{
  type metadata accessor for UpdateViewDestinationRequestProcessor.PreferenceDebouncer();
  uint64_t result = (unint64_t *)AGGraphGetWeakValue();
  if (result) {
    unint64_t v3 = *result;
  }
  else {
    unint64_t v3 = 0;
  }
  unint64_t v4 = HIDWORD(v3);
  if (!result)
  {
    LODWORD(v3) = -1;
    LODWORD(v4) = -1;
  }
  *(_DWORD *)(a1 + 56) = v3;
  *(_DWORD *)(a1 + 60) = v4;
  return result;
}

uint64_t type metadata accessor for UpdateViewDestinationRequestProcessor.PreferenceDebouncer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.enqueueAction(ids:)()
{
  return Attribute.syncMainIfReferences<A>(do:)();
}

uint64_t initializeWithTake for SubscriptionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  *(_OWORD *)((*(void *)(v9 + 32) + 7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v9 + 32) + 7 + v13) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role;
  if (!lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollTargetRole.Role and conformance ScrollTargetRole.Role);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformItemListGeneratingViewModifier<A, B>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t *a4@<X4>, uint64_t a5@<X8>)
{
  return static PlatformItemListGeneratingViewModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4[2], a4[3], a4[4], a4[5], a5);
}

ValueMetadata *type metadata accessor for HoverEffect()
{
  return &type metadata for HoverEffect;
}

ValueMetadata *protocol witness for static ForwardedEventDispatcher.eventType.getter in conformance KeyEventDispatcher()
{
  return &type metadata for KeyEvent;
}

unint64_t lazy protocol witness table accessor for type KeyEvent and conformance KeyEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type KeyEvent and conformance KeyEvent;
  if (!lazy protocol witness table cache variable for type KeyEvent and conformance KeyEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type KeyEvent and conformance KeyEvent);
  }
  return result;
}

uint64_t specialized static SwiftUIGestureAccessibilityProvider.makeGesture(mask:inputs:outputs:)(void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a3 + 48);
  v12[2] = *(_OWORD *)(a3 + 32);
  void v12[3] = v6;
  v12[4] = *(_OWORD *)(a3 + 64);
  int v13 = *(_DWORD *)(a3 + 80);
  long long v7 = *(_OWORD *)(a3 + 16);
  v12[0] = *(_OWORD *)a3;
  v12[1] = v7;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    a1();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type AccessibilityGestureAttachment and conformance AccessibilityGestureAttachment();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v9 = *a4;
    unint64_t v10 = a4[1];
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)()) {
      specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, v12, v9, v10, 0);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityGestureAttachment and conformance AccessibilityGestureAttachment()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityGestureAttachment and conformance AccessibilityGestureAttachment;
  if (!lazy protocol witness table cache variable for type AccessibilityGestureAttachment and conformance AccessibilityGestureAttachment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityGestureAttachment and conformance AccessibilityGestureAttachment);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in UIKitScenePresentationModeLocation<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in UIKitPresentationModeLocation<A>()
{
  return swift_getWitnessTable();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance UndoManagerKey(void **a1, void **a2)
{
  int v2 = *a1;
  unint64_t v3 = *a2;
  BOOL result = ((unint64_t)*a1 | (unint64_t)*a2) == 0;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    type metadata accessor for NSUndoManager();
    id v6 = v2;
    id v7 = v3;
    char v8 = static NSObject.== infix(_:_:)();

    return v8 & 1;
  }
  return result;
}

unint64_t type metadata accessor for NSUndoManager()
{
  unint64_t result = lazy cache variable for type metadata for NSUndoManager;
  if (!lazy cache variable for type metadata for NSUndoManager)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSUndoManager);
  }
  return result;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedHelpStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedHelpStyle and conformance ResolvedHelpStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

unint64_t lazy protocol witness table accessor for type ResolvedHelpStyle and conformance ResolvedHelpStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedHelpStyle and conformance ResolvedHelpStyle;
  if (!lazy protocol witness table cache variable for type ResolvedHelpStyle and conformance ResolvedHelpStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedHelpStyle and conformance ResolvedHelpStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedHelpStyle and conformance ResolvedHelpStyle;
  if (!lazy protocol witness table cache variable for type ResolvedHelpStyle and conformance ResolvedHelpStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedHelpStyle and conformance ResolvedHelpStyle);
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentMarginPlacement()
{
  return &type metadata for ContentMarginPlacement;
}

ValueMetadata *type metadata accessor for ScrollToTopGestureAction()
{
  return &type metadata for ScrollToTopGestureAction;
}

uint64_t SheetPreference.Value.viewIDs.getter()
{
  outlined init with copy of SheetPreference.Value(v0, (uint64_t)v10);
  if (!v12) {
    return specialized Set.init<A>(_:)(*(uint64_t *)&v10[0]);
  }
  if (v12 != 1) {
    return MEMORY[0x1E4FBC870];
  }
  long long v8 = v10[4];
  v9[0] = *(_OWORD *)v11;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)&v11[9];
  long long v4 = v10[0];
  long long v5 = v10[1];
  long long v6 = v10[2];
  long long v7 = v10[3];
  type metadata accessor for Binding<PresentationMode>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Namespace.ID>, MEMORY[0x1E4F41808], MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  *(void *)(inited + 32) = *((void *)&v5 + 1);
  Swift::Int v2 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  outlined destroy of SheetPreference((uint64_t)&v4);
  return v2;
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _SetStorage<ToolbarPlacement.Role>(0, &lazy cache variable for type metadata for _SetStorage<Namespace.ID>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v6 = a1 + 32;
    while (1)
    {
      Swift::UInt v7 = *(void *)(v6 + 8 * v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      Swift::Int result = Hasher._finalize()();
      uint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = result & ~v9;
      unint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      uint64_t v13 = 1 << v10;
      uint64_t v14 = *(void *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(void *)(v14 + 8 * v10) == v7) {
          goto LABEL_3;
        }
        uint64_t v15 = ~v9;
        while (1)
        {
          unint64_t v10 = (v10 + 1) & v15;
          unint64_t v11 = v10 >> 6;
          uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
          uint64_t v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0) {
            break;
          }
          if (*(void *)(v14 + 8 * v10) == v7) {
            goto LABEL_3;
          }
        }
      }
      *(void *)(v5 + 8 * v11) = v13 | v12;
      *(void *)(v14 + 8 * v10) = v7;
      uint64_t v16 = *(void *)(v3 + 16);
      BOOL v17 = __OFADD__(v16, 1);
      uint64_t v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  BOOL v17;
  uint64_t v18;
  void *v19;
  void *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.KeyPressHandlersKey>(0, &lazy cache variable for type metadata for _SetStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB1B0], MEMORY[0x1E4FBB9A8]);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      long long v8 = *v6;
      Swift::UInt v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      unint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      uint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        BOOL v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          uint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      uint64_t v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v18;
  void *v19;
  void *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _SetStorage<ToolbarPlacement.Role>(0, &lazy cache variable for type metadata for _SetStorage<KeyEquivalent>, (void (*)(void))lazy protocol witness table accessor for type KeyEquivalent and conformance KeyEquivalent);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v25 = a1 + 32;
    while (1)
    {
      uint64_t v6 = (uint64_t *)(v25 + 16 * v4);
      long long v8 = *v6;
      Swift::UInt v7 = v6[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      Swift::Int result = Hasher._finalize()();
      unint64_t v10 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v11 = result & ~v10;
      uint64_t v12 = v11 >> 6;
      uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
      uint64_t v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        uint64_t v15 = *(void *)(v3 + 48);
        uint64_t v16 = (void *)(v15 + 16 * v11);
        if (*v16 == v8 && v16[1] == v7) {
          goto LABEL_3;
        }
        Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if (result) {
          goto LABEL_3;
        }
        uint64_t v18 = ~v10;
        while (1)
        {
          unint64_t v11 = (v11 + 1) & v18;
          uint64_t v12 = v11 >> 6;
          uint64_t v13 = *(void *)(v5 + 8 * (v11 >> 6));
          uint64_t v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0) {
            break;
          }
          uint64_t v19 = (void *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            Swift::Int result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0) {
              continue;
            }
          }
          goto LABEL_3;
        }
      }
      *(void *)(v5 + 8 * v12) = v14 | v13;
      uint64_t v21 = (void *)(*(void *)(v3 + 48) + 16 * v11);
      *uint64_t v21 = v8;
      v21[1] = v7;
      uint64_t v22 = *(void *)(v3 + 16);
      uint64_t v23 = __OFADD__(v22, 1);
      uint64_t v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(void *)(v3 + 16) = v24;
      swift_bridgeObjectRetain();
LABEL_3:
      if (++v4 == v1) {
        return v3;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

uint64_t add #1 (item:reset:) in LazyLayoutViewCache.item(data:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  swift_beginAccess();
  swift_retain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v22 = *(void *)(a4 + 160);
  *(void *)(a4 + 160) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a5, a6, isUniquelyReferenced_nonNull_native);
  *(void *)(a4 + 160) = v22;
  swift_release();
  swift_bridgeObjectRelease();
  swift_endAccess();
  (*(void (**)(double (*)@<D0>(uint64_t@<X8>), uint64_t))(*(void *)a4 + 312))(partial apply for implicit closure #3 in add #1 (item:reset:) in LazyLayoutViewCache.item(data:), a4);
  swift_beginAccess();
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a4 + 168);
  uint64_t v13 = *(void *)(a3 + 56);
  uint64_t v20 = 0;
  uint64_t v21 = v13;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  *(void *)(a1 + 168) = v18[0];
  *(_DWORD *)(a1 + 212) = -1;
  AGGraphClearUpdate();
  closure #1 in add #1 (item:reset:) in LazyLayoutViewCache.item(data:)(a4, a1, a2, a3);
  AGGraphSetUpdate();
  char v14 = *(unsigned char *)(a4 + 225);
  outlined init with copy of _LazyLayout_Subview.Data(a3, (uint64_t)v18);
  char v15 = v14 | ~v19;
  uint64_t result = outlined destroy of _LazyLayout_Subview.Data((uint64_t)v18);
  *(unsigned char *)(a4 + 225) = v15 & 1;
  BOOL v17 = (*(unsigned char *)(a4 + 226) & 1) != 0 || *(double *)(a1 + 168) != 0.0;
  *(unsigned char *)(a4 + 226) = v17;
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_release();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_retain();
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      uint64_t v19 = v18[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v19 + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v22 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = v21;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void **v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t *v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v5 = (void **)v4;
  uint64_t v28 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  unint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v4;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  char v16 = v13[2];
  uint64_t v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v21 = *v5;
    if (v19)
    {
LABEL_8:
      char v22 = (uint64_t *)(v21[7] + 16 * v15);
      uint64_t result = swift_release();
      uint64_t v24 = v28;
      *char v22 = a1;
      v22[1] = v24;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  uint64_t v25 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v19 & 1) != (v26 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v15 = v25;
  unint64_t v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a3, v9);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, v28, v21);
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  void *v18;
  char v19;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_7:
    uint64_t v18 = *v5;
    if (v16)
    {
LABEL_8:
      *(void *)(v18[7] + 8 * v12) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) != (v19 & 1))
  {
LABEL_15:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v12 = result;
  uint64_t v18 = *v5;
  if (v16) {
    goto LABEL_8;
  }
LABEL_11:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

{
  void *v4;
  void **v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void *v21;
  uint64_t *v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  uint64_t v5 = (void **)v4;
  unint64_t v10 = type metadata accessor for CommandGroupPlacementBox(0);
  MEMORY[0x1F4188790](v10);
  unint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (void *)*v4;
  uint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  char v16 = v13[2];
  uint64_t v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v19 = v14;
  uint64_t v20 = v13[3];
  if (v20 >= v18 && (a4 & 1) != 0)
  {
LABEL_7:
    unint64_t v21 = *v5;
    if (v19)
    {
LABEL_8:
      char v22 = (uint64_t *)(v21[7] + 16 * v15);
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      *char v22 = a1;
      v22[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  if (v20 >= v18 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)(a3);
  if ((v19 & 1) != (v25 & 1))
  {
LABEL_14:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v15 = v24;
  unint64_t v21 = *v5;
  if (v19) {
    goto LABEL_8;
  }
LABEL_11:
  outlined init with copy of CommandGroupPlacementBox(a3, (uint64_t)v12);
  return specialized _NativeDictionary._insert(at:key:value:)(v15, (uint64_t)v12, a1, a2, v21);
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:), (void (*)(unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))specialized _NativeDictionary._insert(at:key:value:));
}

{
  void *v4;
  void **v5;
  void *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t vars8;

  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      uint64_t v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v18 = *v5;
  if (v16)
  {
LABEL_8:
    uint64_t v19 = v18[7] + 272 * v12;
    return outlined assign with take of TabEntry(a1, v19);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v12, a2, a3, a1, v18);

  return swift_bridgeObjectRetain();
}

uint64_t closure #1 in add #1 (item:reset:) in LazyLayoutViewCache.item(data:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  int v8 = *(_DWORD *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  int v10 = *(_DWORD *)(a1 + 112);
  uint64_t v23 = *(void *)(a1 + 32);
  int v24 = v8;
  uint64_t v25 = v9;
  long long v26 = *(_OWORD *)(a1 + 56);
  long long v27 = *(_OWORD *)(a1 + 72);
  long long v28 = *(_OWORD *)(a1 + 88);
  uint64_t v29 = *(void *)(a1 + 104);
  int v30 = v10;
  _ViewInputs.transaction.getter();
  AGGraphGetValue();
  char v11 = Transaction.fromScrollView.getter();
  int v12 = *(_DWORD *)AGGraphGetValue();
  swift_beginAccess();
  *(_DWORD *)(a2 + 176) = *(_DWORD *)(a1 + 192);
  if (v11)
  {
    BOOL v13 = 0;
    char v14 = 1;
  }
  else
  {
    AGGraphClearUpdate();
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    uint64_t Value = AGGraphGetValue();
    outlined init with copy of TableColumnList(Value, (uint64_t)&v23);
    AGGraphSetUpdate();
    long long v16 = v26;
    __swift_project_boxed_opaque_existential_1(&v23, v26);
    uint64_t v17 = *(void *)(a4 + 48);
    v21[0] = *(void *)(a4 + 40);
    v21[1] = v17;
    uint64_t v20 = *(void *)(a1 + 184);
    (*(void (**)(uint64_t *__return_ptr, void *, uint64_t *, void, void))(*((void *)&v16 + 1) + 56))(&v22, v21, &v20, v16, *((void *)&v16 + 1));
    BOOL v13 = (v22 & 1) == 0 && v22 != 2;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v23);
    char v14 = 0;
  }
  LODWORD(v23) = v12 + (a3 & 1);
  BYTE4(v23) = v14;
  *(_WORD *)((char *)&v23 + 5) = v13;
  return AGGraphSetValue();
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

{
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  uint64_t v5 = (void *)(a5[6] + 16 * result);
  *uint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

{
  void *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  *(void *)(a5[6] + 8 * result) = a2;
  uint64_t v5 = (void *)(a5[7] + 16 * result);
  *uint64_t v5 = a3;
  v5[1] = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = type metadata accessor for _DictionaryStorage();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t type metadata accessor for BarEnvironmentViewModel(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for BarEnvironmentViewModel);
}

unint64_t lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical;
  if (!lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  }
  return result;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ManagedBarAppearancesKey@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized static EnvironmentValues.ManagedBarAppearancesKey.defaultValue.getter();
  *a1 = result;
  return result;
}

uint64_t specialized static EnvironmentValues.ManagedBarAppearancesKey.defaultValue.getter()
{
  type metadata accessor for _GraphValue<ToolbarAppearanceModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  *(_OWORD *)(inited + 48) = 0u;
  *(void *)(inited + 64) = 0;
  *(_OWORD *)(inited + 32) = 0u;
  uint64_t v1 = specialized Set.init(_nonEmptyArrayLiteral:)(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v6 = v1;
  if (static SemanticFeature.isEnabled.getter())
  {
    memset(v3, 0, sizeof(v3));
    long long v4 = xmmword_188382680;
    specialized Set._Variant.insert(_:)((uint64_t)v5, (uint64_t)v3);
    outlined destroy of ToolbarPlacement.Role((uint64_t)v5);
    return v6;
  }
  return v1;
}

void type metadata accessor for _GraphValue<ToolbarAppearanceModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _SetStorage<ToolbarPlacement.Role>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<ToolbarPlacement.Role>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    while (1)
    {
      outlined init with copy of ToolbarPlacement.Role(a1 + 32 + 40 * v4, (uint64_t)v30);
      Hasher.init(_seed:)();
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v30, (uint64_t)&v27);
      switch(*((void *)&v28 + 1))
      {
        case 0:
          Swift::UInt v6 = 0;
          goto LABEL_14;
        case 1:
          Swift::UInt v6 = 1;
          goto LABEL_14;
        case 2:
          Swift::UInt v6 = 2;
          goto LABEL_14;
        case 3:
          Swift::UInt v6 = 3;
          goto LABEL_14;
        case 4:
          Swift::UInt v6 = 4;
          goto LABEL_14;
        case 5:
          Swift::UInt v6 = 5;
          goto LABEL_14;
        case 6:
          Swift::UInt v6 = 7;
LABEL_14:
          Hasher._combine(_:)(v6);
          break;
        default:
          v20[0] = v27;
          v20[1] = v28;
          uint64_t v21 = v29;
          Hasher._combine(_:)(6uLL);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v20);
          break;
      }
      Swift::Int v7 = Hasher._finalize()();
      uint64_t v8 = ~(-1 << *(unsigned char *)(v3 + 32));
      unint64_t v9 = v7 & v8;
      unint64_t v10 = (v7 & (unint64_t)v8) >> 6;
      uint64_t v11 = *(void *)(v5 + 8 * v10);
      uint64_t v12 = 1 << (v7 & v8);
      if ((v12 & v11) != 0)
      {
        while (1)
        {
          outlined init with copy of ToolbarPlacement.Role(*(void *)(v3 + 48) + 40 * v9, (uint64_t)&v27);
          outlined init with copy of ToolbarPlacement.Role((uint64_t)&v27, (uint64_t)v22);
          outlined init with copy of ToolbarPlacement.Role((uint64_t)v30, (uint64_t)&v24);
          switch(v23)
          {
            case 0:
              if (*((void *)&v25 + 1)) {
                goto LABEL_32;
              }
              goto LABEL_3;
            case 1:
              if (*((void *)&v25 + 1) == 1) {
                goto LABEL_3;
              }
              goto LABEL_32;
            case 2:
              if (*((void *)&v25 + 1) == 2) {
                goto LABEL_3;
              }
              goto LABEL_32;
            case 3:
              if (*((void *)&v25 + 1) == 3) {
                goto LABEL_3;
              }
              goto LABEL_32;
            case 4:
              if (*((void *)&v25 + 1) == 4) {
                goto LABEL_3;
              }
              goto LABEL_32;
            case 5:
              if (*((void *)&v25 + 1) == 5) {
                goto LABEL_3;
              }
              goto LABEL_32;
            case 6:
              if (*((void *)&v25 + 1) != 6) {
                goto LABEL_32;
              }
              goto LABEL_3;
            default:
              outlined init with copy of ToolbarPlacement.Role((uint64_t)v22, (uint64_t)v20);
              if (*((void *)&v25 + 1) >= 7uLL)
              {
                v18[0] = v24;
                v18[1] = v25;
                uint64_t v19 = v26;
                char v13 = MEMORY[0x18C1174E0](v20, v18);
                outlined destroy of AnyHashable((uint64_t)v18);
                outlined destroy of AnyHashable((uint64_t)v20);
                if (v13)
                {
LABEL_3:
                  outlined destroy of ToolbarPlacement.Role((uint64_t)v22);
                  outlined destroy of ToolbarPlacement.Role((uint64_t)&v27);
                  outlined destroy of ToolbarPlacement.Role((uint64_t)v30);
                  goto LABEL_4;
                }
                outlined destroy of ToolbarPlacement.Role((uint64_t)v22);
              }
              else
              {
                outlined destroy of AnyHashable((uint64_t)v20);
LABEL_32:
                outlined destroy of KeyPress.Handler.Subject((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for (ToolbarPlacement.Role, ToolbarPlacement.Role));
              }
              outlined destroy of ToolbarPlacement.Role((uint64_t)&v27);
              unint64_t v9 = (v9 + 1) & v8;
              unint64_t v10 = v9 >> 6;
              uint64_t v11 = *(void *)(v5 + 8 * (v9 >> 6));
              uint64_t v12 = 1 << v9;
              if ((v11 & (1 << v9)) == 0) {
                goto LABEL_37;
              }
              break;
          }
        }
      }
LABEL_37:
      *(void *)(v5 + 8 * v10) = v12 | v11;
      uint64_t result = outlined init with take of ToolbarPlacement.Role((uint64_t)v30, *(void *)(v3 + 48) + 40 * v9);
      uint64_t v15 = *(void *)(v3 + 16);
      BOOL v16 = __OFADD__(v15, 1);
      uint64_t v17 = v15 + 1;
      if (v16) {
        break;
      }
      *(void *)(v3 + 16) = v17;
LABEL_4:
      if (++v4 == v1) {
        return v3;
      }
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC870];
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;

  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    type metadata accessor for _SetStorage<NSURLResourceKey>();
    uint64_t v3 = static _SetStorage.allocate(capacity:)();
    uint64_t v4 = 0;
    uint64_t v5 = v3 + 56;
    uint64_t v31 = v1;
    uint64_t v32 = a1 + 32;
    while (1)
    {
      Swift::UInt v6 = *(void **)(v32 + 8 * v4);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
      Hasher.init(_seed:)();
      Swift::Int v7 = v6;
      String.hash(into:)();
      uint64_t v8 = Hasher._finalize()();
      swift_bridgeObjectRelease();
      unint64_t v9 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v10 = v8 & ~v9;
      uint64_t v11 = v10 >> 6;
      uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
      char v13 = 1 << v10;
      if (((1 << v10) & v12) == 0) {
        goto LABEL_20;
      }
      char v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      BOOL v16 = v15;
      if (v14 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v16 == v17)
      {
LABEL_3:
        swift_bridgeObjectRelease_n();
      }
      else
      {
        uint64_t v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v19 & 1) == 0)
        {
          uint64_t v20 = ~v9;
          while (1)
          {
            unint64_t v10 = (v10 + 1) & v20;
            uint64_t v11 = v10 >> 6;
            uint64_t v12 = *(void *)(v5 + 8 * (v10 >> 6));
            char v13 = 1 << v10;
            if ((v12 & (1 << v10)) == 0) {
              break;
            }
            uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v23 = v22;
            if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v23 == v24) {
              goto LABEL_3;
            }
            uint64_t v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v26) {
              goto LABEL_4;
            }
          }
LABEL_20:
          *(void *)(v5 + 8 * v11) = v13 | v12;
          *(void *)(*(void *)(v3 + 48) + 8 * v10) = v7;
          long long v27 = *(void *)(v3 + 16);
          long long v28 = __OFADD__(v27, 1);
          uint64_t v29 = v27 + 1;
          if (v28)
          {
            __break(1u);
            JUMPOUT(0x1880B4B10);
          }
          *(void *)(v3 + 16) = v29;
          goto LABEL_5;
        }
      }
LABEL_4:

LABEL_5:
      if (++v4 == v31) {
        return v3;
      }
    }
  }
  return MEMORY[0x1E4FBC870];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  Swift::UInt64 v11;
  Swift::UInt v12;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  double v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v34;

  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC870];
  }
  type metadata accessor for _SetStorage<ToolbarPlacement.Role>(0, &lazy cache variable for type metadata for _SetStorage<PresentationDetent>, (void (*)(void))lazy protocol witness table accessor for type PresentationDetent and conformance PresentationDetent);
  uint64_t v3 = static _SetStorage.allocate(capacity:)();
  uint64_t v4 = 0;
  uint64_t v5 = v3 + 56;
  uint64_t v34 = a1 + 32;
  do
  {
    Swift::UInt v6 = v34 + 16 * v4;
    Swift::Int v7 = *(double *)v6;
    uint64_t v8 = *(void *)(v6 + 8);
    ++v4;
    Hasher.init(_seed:)();
    unint64_t v9 = v8 >> 62;
    switch(v8 >> 62)
    {
      case 1uLL:
        unint64_t v10 = 3;
        goto LABEL_7;
      case 2uLL:
        Hasher._combine(_:)(4uLL);
        uint64_t v12 = *(void *)&v7;
        goto LABEL_20;
      case 3uLL:
        if (*(void *)&v7 | v8 ^ 0xC000000000000000)
        {
          if (v8 == 0xC000000000000000 && *(void *)&v7 == 1) {
            uint64_t v12 = 1;
          }
          else {
            uint64_t v12 = 5;
          }
        }
        else
        {
          uint64_t v12 = 0;
        }
LABEL_20:
        Hasher._combine(_:)(v12);
        break;
      default:
        unint64_t v10 = 2;
LABEL_7:
        Hasher._combine(_:)(v10);
        if ((*(void *)&v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
          uint64_t v11 = *(void *)&v7;
        }
        else {
          uint64_t v11 = 0;
        }
        Hasher._combine(_:)(v11);
        break;
    }
    char v14 = Hasher._finalize()();
    uint64_t v15 = -1 << *(unsigned char *)(v3 + 32);
    BOOL v16 = v14 & ~v15;
    uint64_t v17 = v16 >> 6;
    uint64_t v18 = *(void *)(v5 + 8 * (v16 >> 6));
    uint64_t v19 = 1 << v16;
    uint64_t v20 = *(void *)(v3 + 48);
    if (((1 << v16) & v18) != 0)
    {
      uint64_t v21 = ~v15;
      uint64_t v22 = *(void *)&v7 != 2;
      uint64_t v23 = *(void *)&v7 != 1;
      long long v24 = *(void *)&v7 != 0;
      if (v8 != 0xC000000000000000)
      {
        uint64_t v22 = 1;
        uint64_t v23 = 1;
        long long v24 = 1;
      }
      if (v9 != 3)
      {
        uint64_t v22 = 1;
        uint64_t v23 = 1;
        long long v24 = 1;
      }
      while (1)
      {
        long long v25 = v20 + 16 * v16;
        uint64_t v26 = *(double *)v25;
        long long v27 = *(void *)(v25 + 8);
        switch(v27 >> 62)
        {
          case 1uLL:
            if (v9 == 1) {
              goto LABEL_27;
            }
            goto LABEL_28;
          case 2uLL:
            if (v9 == 2 && *(void *)&v26 == *(void *)&v7) {
              goto LABEL_3;
            }
            goto LABEL_28;
          case 3uLL:
            if (*(void *)&v26 | v27 ^ 0xC000000000000000)
            {
              if (v27 == 0xC000000000000000 && *(void *)&v26 == 1)
              {
                if (!v23) {
                  goto LABEL_3;
                }
              }
              else if (!v22)
              {
                goto LABEL_3;
              }
            }
            else if (!v24)
            {
              goto LABEL_3;
            }
LABEL_28:
            BOOL v16 = (v16 + 1) & v21;
            uint64_t v17 = v16 >> 6;
            uint64_t v18 = *(void *)(v5 + 8 * (v16 >> 6));
            uint64_t v19 = 1 << v16;
            if ((v18 & (1 << v16)) == 0) {
              goto LABEL_47;
            }
            break;
          default:
            if (v9) {
              goto LABEL_28;
            }
LABEL_27:
            if (v26 != v7) {
              goto LABEL_28;
            }
            goto LABEL_3;
        }
      }
    }
LABEL_47:
    *(void *)(v5 + 8 * v17) = v19 | v18;
    uint64_t v29 = v20 + 16 * v16;
    *(double *)uint64_t v29 = v7;
    *(void *)(v29 + 8) = v8;
    int v30 = *(void *)(v3 + 16);
    uint64_t v31 = __OFADD__(v30, 1);
    uint64_t v32 = v30 + 1;
    if (v31)
    {
      __break(1u);
      JUMPOUT(0x1880B5328);
    }
    *(void *)(v3 + 16) = v32;
LABEL_3:
    ;
  }
  while (v4 != v1);
  return v3;
}

void type metadata accessor for _SetStorage<ToolbarPlacement.Role>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _SetStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  ToolbarPlacement.Role.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_25;
  }
  uint64_t v13 = a1;
  uint64_t v9 = ~v7;
  while (2)
  {
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v5 + 48) + 40 * v8, (uint64_t)v22);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v22, (uint64_t)v17);
    outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)&v19);
    switch(v18)
    {
      case 0:
        if (*((void *)&v20 + 1)) {
          goto LABEL_19;
        }
        goto LABEL_26;
      case 1:
        if (*((void *)&v20 + 1) == 1) {
          goto LABEL_26;
        }
        goto LABEL_19;
      case 2:
        if (*((void *)&v20 + 1) == 2) {
          goto LABEL_26;
        }
        goto LABEL_19;
      case 3:
        if (*((void *)&v20 + 1) == 3) {
          goto LABEL_26;
        }
        goto LABEL_19;
      case 4:
        if (*((void *)&v20 + 1) == 4) {
          goto LABEL_26;
        }
        goto LABEL_19;
      case 5:
        if (*((void *)&v20 + 1) == 5) {
          goto LABEL_26;
        }
        goto LABEL_19;
      case 6:
        if (*((void *)&v20 + 1) != 6) {
          goto LABEL_19;
        }
        goto LABEL_26;
      default:
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v17, (uint64_t)v16);
        if (*((void *)&v20 + 1) < 7uLL)
        {
          outlined destroy of AnyHashable((uint64_t)v16);
LABEL_19:
          outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role));
          goto LABEL_20;
        }
        v14[0] = v19;
        v14[1] = v20;
        uint64_t v15 = v21;
        char v10 = MEMORY[0x18C1174E0](v16, v14);
        outlined destroy of AnyHashable((uint64_t)v14);
        outlined destroy of AnyHashable((uint64_t)v16);
        if ((v10 & 1) == 0)
        {
          outlined destroy of ToolbarPlacement.Role((uint64_t)v17);
LABEL_20:
          outlined destroy of ToolbarPlacement.Role((uint64_t)v22);
          unint64_t v8 = (v8 + 1) & v9;
          if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            a1 = v13;
LABEL_25:
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            outlined init with copy of ToolbarPlacement.Role(a2, (uint64_t)v17);
            v22[0] = *v2;
            *Swift::Int v2 = 0x8000000000000000;
            specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v17, v8, isUniquelyReferenced_nonNull_native);
            *Swift::Int v2 = v22[0];
            swift_bridgeObjectRelease();
            outlined init with take of ToolbarPlacement.Role(a2, a1);
            return 1;
          }
          continue;
        }
LABEL_26:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v17);
        outlined destroy of ToolbarPlacement.Role((uint64_t)v22);
        swift_bridgeObjectRelease();
        outlined destroy of ToolbarPlacement.Role(a2);
        outlined init with copy of ToolbarPlacement.Role(*(void *)(*v2 + 48) + 40 * v8, v13);
        return 0;
    }
  }
}

{
  uint64_t *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  _OWORD v14[2];
  uint64_t v15;
  unsigned char v16[40];
  unsigned char v17[24];
  uint64_t v18;
  long long v19;
  long long v20;
  uint64_t v21;
  void v22[6];

  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  Toolbar.BarLocation.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  uint64_t v13 = a1;
  uint64_t v9 = ~v7;
  while (2)
  {
    outlined init with copy of Toolbar.BarLocation(*(void *)(v5 + 48) + 40 * v8, (uint64_t)v22);
    outlined init with copy of Toolbar.BarLocation((uint64_t)v22, (uint64_t)v17);
    outlined init with copy of Toolbar.BarLocation(a2, (uint64_t)&v19);
    switch(v18)
    {
      case 0:
        if (*((void *)&v20 + 1)) {
          goto LABEL_35;
        }
        goto LABEL_42;
      case 1:
        if (*((void *)&v20 + 1) == 1) {
          goto LABEL_42;
        }
        goto LABEL_35;
      case 2:
        if (*((void *)&v20 + 1) == 2) {
          goto LABEL_42;
        }
        goto LABEL_35;
      case 3:
        if (*((void *)&v20 + 1) == 3) {
          goto LABEL_42;
        }
        goto LABEL_35;
      case 4:
        if (*((void *)&v20 + 1) == 4) {
          goto LABEL_42;
        }
        goto LABEL_35;
      case 5:
        if (*((void *)&v20 + 1) == 5) {
          goto LABEL_42;
        }
        goto LABEL_35;
      case 6:
        if (*((void *)&v20 + 1) == 6) {
          goto LABEL_42;
        }
        goto LABEL_35;
      case 7:
        if (*((void *)&v20 + 1) == 7) {
          goto LABEL_42;
        }
        goto LABEL_35;
      case 8:
        if (*((void *)&v20 + 1) == 8) {
          goto LABEL_42;
        }
        goto LABEL_35;
      case 9:
        if (*((void *)&v20 + 1) == 9) {
          goto LABEL_42;
        }
        goto LABEL_35;
      case 10:
        if (*((void *)&v20 + 1) == 10) {
          goto LABEL_42;
        }
        goto LABEL_35;
      case 11:
        if (*((void *)&v20 + 1) == 11) {
          goto LABEL_42;
        }
        goto LABEL_35;
      case 12:
        if (*((void *)&v20 + 1) == 12) {
          goto LABEL_42;
        }
        goto LABEL_35;
      case 13:
        if (*((void *)&v20 + 1) == 13) {
          goto LABEL_42;
        }
        goto LABEL_35;
      case 14:
        if (*((void *)&v20 + 1) != 14) {
          goto LABEL_35;
        }
        goto LABEL_42;
      default:
        outlined init with copy of Toolbar.BarLocation((uint64_t)v17, (uint64_t)v16);
        if (*((void *)&v20 + 1) < 0xFuLL)
        {
          outlined destroy of AnyHashable((uint64_t)v16);
LABEL_35:
          outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
          goto LABEL_36;
        }
        v14[0] = v19;
        v14[1] = v20;
        uint64_t v15 = v21;
        char v10 = MEMORY[0x18C1174E0](v16, v14);
        outlined destroy of AnyHashable((uint64_t)v14);
        outlined destroy of AnyHashable((uint64_t)v16);
        if ((v10 & 1) == 0)
        {
          outlined destroy of Toolbar.BarLocation((uint64_t)v17);
LABEL_36:
          outlined destroy of Toolbar.BarLocation((uint64_t)v22);
          unint64_t v8 = (v8 + 1) & v9;
          if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
          {
            swift_bridgeObjectRelease();
            a1 = v13;
LABEL_41:
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            outlined init with copy of Toolbar.BarLocation(a2, (uint64_t)v17);
            v22[0] = *v2;
            *Swift::Int v2 = 0x8000000000000000;
            specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v17, v8, isUniquelyReferenced_nonNull_native);
            *Swift::Int v2 = v22[0];
            swift_bridgeObjectRelease();
            outlined init with take of Toolbar.BarLocation(a2, a1);
            return 1;
          }
          continue;
        }
LABEL_42:
        outlined destroy of Toolbar.BarLocation((uint64_t)v17);
        outlined destroy of Toolbar.BarLocation((uint64_t)v22);
        swift_bridgeObjectRelease();
        outlined destroy of Toolbar.BarLocation(a2);
        outlined init with copy of Toolbar.BarLocation(*(void *)(*v2 + 48) + 40 * v8, v13);
        return 0;
    }
  }
}

{
  void *v2;
  void *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  unsigned char v15[72];

  uint64_t v3 = v2;
  Swift::Int v6 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  ToolbarItemPlacement.Role.hash(into:)();
  uint64_t v7 = Hasher._finalize()();
  unint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  uint64_t v9 = v7 & ~v8;
  if ((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    char v10 = ~v8;
    while (1)
    {
      outlined init with copy of ToolbarItemPlacement.Role(*(void *)(v6 + 48) + 48 * v9, (uint64_t)v15);
      uint64_t v11 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v15, a2);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v15);
      if (v11) {
        break;
      }
      uint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarItemPlacement.Role(a2);
    outlined init with copy of ToolbarItemPlacement.Role(*(void *)(*v3 + 48) + 48 * v9, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of ToolbarItemPlacement.Role(a2, (uint64_t)v15);
    char v14 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v15, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    outlined init with take of ToolbarItemPlacement.Role(a2, a1);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  uint64_t v3 = v2;
  Swift::Int v6 = type metadata accessor for CommandGroupPlacementBox(0);
  uint64_t v22 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  Hasher.init(_seed:)();
  type metadata accessor for CommandGroupPlacement(0);
  swift_bridgeObjectRetain();
  UUID.hash(into:)();
  char v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  uint64_t v12 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12))
  {
    long long v19 = v2;
    long long v20 = a2;
    uint64_t v21 = a1;
    uint64_t v13 = ~v11;
    char v14 = *(void *)(v22 + 72);
    while (1)
    {
      outlined init with copy of CommandGroupPlacementBox(*(void *)(v9 + 48) + v14 * v12, (uint64_t)v8);
      uint64_t v15 = static UUID.== infix(_:_:)();
      outlined destroy of CommandGroupPlacementBox((uint64_t)v8);
      if (v15) {
        break;
      }
      uint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a2 = v20;
        a1 = v21;
        uint64_t v3 = v19;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    outlined destroy of CommandGroupPlacementBox(v20);
    outlined init with copy of CommandGroupPlacementBox(*(void *)(*v19 + 48) + v14 * v12, v21);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of CommandGroupPlacementBox(a2, (uint64_t)v8);
    uint64_t v23 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v8, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v23;
    swift_bridgeObjectRelease();
    outlined init with take of CommandGroupPlacementBox(a2, a1);
    return 1;
  }
}

{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  Swift::Int v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  char isUniquelyReferenced_nonNull_native;
  long long v14;
  uint64_t v16;
  unsigned char v17[40];

  uint64_t v3 = v2;
  Swift::Int v6 = *v2;
  uint64_t v7 = *(void *)(*v2 + 40);
  swift_bridgeObjectRetain();
  unint64_t v8 = AnyHashable._rawHashValue(seed:)(v7);
  uint64_t v9 = -1 << *(unsigned char *)(v6 + 32);
  char v10 = v8 & ~v9;
  if ((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    while (1)
    {
      outlined init with copy of AnyHashable(*(void *)(v6 + 48) + 40 * v10, (uint64_t)v17);
      uint64_t v12 = MEMORY[0x18C1174E0](v17, a2);
      outlined destroy of AnyHashable((uint64_t)v17);
      if (v12) {
        break;
      }
      char v10 = (v10 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable(a2);
    outlined init with copy of AnyHashable(*(void *)(*v3 + 48) + 40 * v10, a1);
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    outlined init with copy of AnyHashable(a2, (uint64_t)v17);
    BOOL v16 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((Swift::Int)v17, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v16;
    swift_bridgeObjectRelease();
    char v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v14;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    return 1;
  }
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v7 > v6)
      {
        specialized _NativeSet.copy()();
        goto LABEL_31;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v8 = *v3;
    Hasher.init(_seed:)();
    ToolbarPlacement.Role.hash(into:)();
    Swift::Int v9 = Hasher._finalize()();
    uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
    a2 = v9 & ~v10;
    if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v11 = ~v10;
      while (1)
      {
        outlined init with copy of ToolbarPlacement.Role(*(void *)(v8 + 48) + 40 * a2, (uint64_t)v27);
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v27, (uint64_t)v22);
        outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v24);
        switch(v23)
        {
          case 0:
            if (!*((void *)&v25 + 1)) {
              goto LABEL_34;
            }
            goto LABEL_26;
          case 1:
            if (*((void *)&v25 + 1) == 1) {
              goto LABEL_34;
            }
            goto LABEL_26;
          case 2:
            if (*((void *)&v25 + 1) == 2) {
              goto LABEL_34;
            }
            goto LABEL_26;
          case 3:
            if (*((void *)&v25 + 1) == 3) {
              goto LABEL_34;
            }
            goto LABEL_26;
          case 4:
            if (*((void *)&v25 + 1) == 4) {
              goto LABEL_34;
            }
            goto LABEL_26;
          case 5:
            if (*((void *)&v25 + 1) == 5) {
              goto LABEL_34;
            }
            goto LABEL_26;
          case 6:
            if (*((void *)&v25 + 1) == 6) {
              goto LABEL_34;
            }
            goto LABEL_26;
          default:
            outlined init with copy of ToolbarPlacement.Role((uint64_t)v22, (uint64_t)v21);
            if (*((void *)&v25 + 1) >= 7uLL)
            {
              v19[0] = v24;
              v19[1] = v25;
              uint64_t v20 = v26;
              char v12 = MEMORY[0x18C1174E0](v21, v19);
              outlined destroy of AnyHashable((uint64_t)v19);
              outlined destroy of AnyHashable((uint64_t)v21);
              if (v12) {
                goto LABEL_34;
              }
              outlined destroy of ToolbarPlacement.Role((uint64_t)v22);
            }
            else
            {
              outlined destroy of AnyHashable((uint64_t)v21);
LABEL_26:
              outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role));
            }
            outlined destroy of ToolbarPlacement.Role((uint64_t)v27);
            a2 = (a2 + 1) & v11;
            if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              goto LABEL_31;
            }
            break;
        }
      }
    }
  }
LABEL_31:
  uint64_t v13 = *v18;
  *(void *)(*v18 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of ToolbarPlacement.Role(a1, *(void *)(v13 + 48) + 40 * a2);
  uint64_t v15 = *(void *)(v13 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
LABEL_34:
    outlined destroy of ToolbarPlacement.Role((uint64_t)v22);
    outlined destroy of ToolbarPlacement.Role((uint64_t)v27);
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v13 + 16) = v17;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  unint64_t v7 = type metadata accessor for CommandGroupPlacementBox(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(*v3 + 16);
  char v12 = *(void *)(*v3 + 24);
  long long v27 = v3;
  long long v28 = a1;
  if (v12 > v11 && (a3 & 1) != 0)
  {
LABEL_13:
    uint64_t v13 = v8;
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
    goto LABEL_8;
  }
  if (v12 <= v11)
  {
    specialized _NativeSet.copyAndResize(capacity:)();
LABEL_8:
    char v14 = *v3;
    Hasher.init(_seed:)();
    type metadata accessor for CommandGroupPlacement(0);
    UUID.hash(into:)();
    uint64_t v15 = Hasher._finalize()();
    BOOL v16 = -1 << *(unsigned char *)(v14 + 32);
    a2 = v15 & ~v16;
    if ((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v26 = v7;
      uint64_t v17 = ~v16;
      uint64_t v13 = v8;
      uint64_t v18 = *(void *)(v8 + 72);
      while (1)
      {
        outlined init with copy of CommandGroupPlacementBox(*(void *)(v14 + 48) + v18 * a2, (uint64_t)v10);
        long long v19 = static UUID.== infix(_:_:)();
        outlined destroy of CommandGroupPlacementBox((uint64_t)v10);
        if (v19) {
          goto LABEL_17;
        }
        a2 = (a2 + 1) & v17;
        if (((*(void *)(v14 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    goto LABEL_13;
  }
  uint64_t v13 = v8;
  specialized _NativeSet.copy()();
LABEL_14:
  uint64_t v20 = v28;
  uint64_t v21 = *v27;
  *(void *)(*v27 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of CommandGroupPlacementBox(v20, *(void *)(v21 + 48) + *(void *)(v13 + 72) * a2);
  uint64_t v23 = *(void *)(v21 + 16);
  long long v24 = __OFADD__(v23, 1);
  long long v25 = v23 + 1;
  if (!v24)
  {
    *(void *)(v21 + 16) = v25;
    return result;
  }
  __break(1u);
LABEL_17:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t *v18;
  _OWORD v19[2];
  uint64_t v20;
  unsigned char v21[40];
  unsigned char v22[24];
  uint64_t v23;
  long long v24;
  long long v25;
  uint64_t v26;
  unsigned char v27[48];

  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    if (a3)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v7 > v6)
      {
        specialized _NativeSet.copy()();
        goto LABEL_47;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v8 = *v3;
    Hasher.init(_seed:)();
    Toolbar.BarLocation.hash(into:)();
    Swift::Int v9 = Hasher._finalize()();
    uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
    a2 = v9 & ~v10;
    if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
    {
      uint64_t v11 = ~v10;
      while (1)
      {
        outlined init with copy of Toolbar.BarLocation(*(void *)(v8 + 48) + 40 * a2, (uint64_t)v27);
        outlined init with copy of Toolbar.BarLocation((uint64_t)v27, (uint64_t)v22);
        outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v24);
        switch(v23)
        {
          case 0:
            if (!*((void *)&v25 + 1)) {
              goto LABEL_50;
            }
            goto LABEL_42;
          case 1:
            if (*((void *)&v25 + 1) == 1) {
              goto LABEL_50;
            }
            goto LABEL_42;
          case 2:
            if (*((void *)&v25 + 1) == 2) {
              goto LABEL_50;
            }
            goto LABEL_42;
          case 3:
            if (*((void *)&v25 + 1) == 3) {
              goto LABEL_50;
            }
            goto LABEL_42;
          case 4:
            if (*((void *)&v25 + 1) == 4) {
              goto LABEL_50;
            }
            goto LABEL_42;
          case 5:
            if (*((void *)&v25 + 1) == 5) {
              goto LABEL_50;
            }
            goto LABEL_42;
          case 6:
            if (*((void *)&v25 + 1) == 6) {
              goto LABEL_50;
            }
            goto LABEL_42;
          case 7:
            if (*((void *)&v25 + 1) == 7) {
              goto LABEL_50;
            }
            goto LABEL_42;
          case 8:
            if (*((void *)&v25 + 1) == 8) {
              goto LABEL_50;
            }
            goto LABEL_42;
          case 9:
            if (*((void *)&v25 + 1) == 9) {
              goto LABEL_50;
            }
            goto LABEL_42;
          case 10:
            if (*((void *)&v25 + 1) == 10) {
              goto LABEL_50;
            }
            goto LABEL_42;
          case 11:
            if (*((void *)&v25 + 1) == 11) {
              goto LABEL_50;
            }
            goto LABEL_42;
          case 12:
            if (*((void *)&v25 + 1) == 12) {
              goto LABEL_50;
            }
            goto LABEL_42;
          case 13:
            if (*((void *)&v25 + 1) == 13) {
              goto LABEL_50;
            }
            goto LABEL_42;
          case 14:
            if (*((void *)&v25 + 1) == 14) {
              goto LABEL_50;
            }
            goto LABEL_42;
          default:
            outlined init with copy of Toolbar.BarLocation((uint64_t)v22, (uint64_t)v21);
            if (*((void *)&v25 + 1) >= 0xFuLL)
            {
              v19[0] = v24;
              v19[1] = v25;
              uint64_t v20 = v26;
              char v12 = MEMORY[0x18C1174E0](v21, v19);
              outlined destroy of AnyHashable((uint64_t)v19);
              outlined destroy of AnyHashable((uint64_t)v21);
              if (v12) {
                goto LABEL_50;
              }
              outlined destroy of Toolbar.BarLocation((uint64_t)v22);
            }
            else
            {
              outlined destroy of AnyHashable((uint64_t)v21);
LABEL_42:
              outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
            }
            outlined destroy of Toolbar.BarLocation((uint64_t)v27);
            a2 = (a2 + 1) & v11;
            if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
              goto LABEL_47;
            }
            break;
        }
      }
    }
  }
LABEL_47:
  uint64_t v13 = *v18;
  *(void *)(*v18 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of Toolbar.BarLocation(a1, *(void *)(v13 + 48) + 40 * a2);
  uint64_t v15 = *(void *)(v13 + 16);
  BOOL v16 = __OFADD__(v15, 1);
  uint64_t v17 = v15 + 1;
  if (v16)
  {
    __break(1u);
LABEL_50:
    outlined destroy of Toolbar.BarLocation((uint64_t)v22);
    outlined destroy of Toolbar.BarLocation((uint64_t)v27);
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    *(void *)(v13 + 16) = v17;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::UInt v10;
  Swift::Int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(void, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unsigned char v23[8];
  uint64_t v24;

  unint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  uint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  Swift::Int v9 = *v3;
  Hasher.init(_seed:)();
  uint64_t v10 = *(void *)(a1 + 8);
  Hasher._combine(_:)(v10);
  uint64_t v11 = Hasher._finalize()();
  char v12 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v11 & ~v12;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v13 = ~v12;
    char v14 = MEMORY[0x1E4FBC838] + 8;
    do
    {
      uint64_t v15 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3FB58];
      outlined init with copy of HashableWeakBox<Swift.AnyObject>(*(void *)(v9 + 48) + 16 * a2, (uint64_t)v23, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, v14, MEMORY[0x1E4F3FB58]);
      BOOL v16 = v24;
      _s7SwiftUI15HashableWeakBoxVyyXlGWOhTm_0((uint64_t)v23, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, v14, v15);
      if (v16 == v10) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v13;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v17 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of HashableWeakBox<Swift.AnyObject>(a1, *(void *)(v17 + 48) + 16 * a2);
  long long v19 = *(void *)(v17 + 16);
  uint64_t v20 = __OFADD__(v19, 1);
  uint64_t v21 = v19 + 1;
  if (!v20)
  {
    *(void *)(v17 + 16) = v21;
    return result;
  }
  __break(1u);
LABEL_15:
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_3(0, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4F3FB58]);
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unsigned char v19[72];

  unint64_t v4 = v3;
  unint64_t v7 = *(void *)(*v3 + 16);
  uint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  Swift::Int v9 = *v3;
  Hasher.init(_seed:)();
  ToolbarItemPlacement.Role.hash(into:)();
  uint64_t v10 = Hasher._finalize()();
  uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
  a2 = v10 & ~v11;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    char v12 = ~v11;
    do
    {
      outlined init with copy of ToolbarItemPlacement.Role(*(void *)(v9 + 48) + 48 * a2, (uint64_t)v19);
      uint64_t v13 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v19, a1);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v19);
      if (v13) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v12;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  char v14 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = outlined init with take of ToolbarItemPlacement.Role(a1, *(void *)(v14 + 48) + 48 * a2);
  BOOL v16 = *(void *)(v14 + 16);
  uint64_t v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v14 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v32 = a1;
  unint64_t v6 = type metadata accessor for UTType();
  unint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(*v3 + 16);
  char v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  int v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()(MEMORY[0x1E4FBCEA8], (void (*)(void, double))type metadata accessor for _SetStorage<UTType>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v3;
  lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
  char v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  BOOL v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    long long v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
      uint64_t v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  long long v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  long long v27 = __OFADD__(v26, 1);
  long long v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v32 = a1;
  unint64_t v6 = type metadata accessor for URL();
  unint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(*v3 + 16);
  char v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  int v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()(MEMORY[0x1E4F276F0], (void (*)(void, double))type metadata accessor for _SetStorage<URL>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v3;
  lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
  char v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  BOOL v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    long long v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
      uint64_t v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  long long v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  long long v27 = __OFADD__(v26, 1);
  long long v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v32 = a1;
  unint64_t v6 = type metadata accessor for IndexPath();
  unint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(*v3 + 16);
  char v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  int v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()(MEMORY[0x1E4F27DE8], (void (*)(void, double))type metadata accessor for _SetStorage<IndexPath>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v3;
  lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
  char v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  BOOL v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    long long v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
      uint64_t v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  long long v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  long long v27 = __OFADD__(v26, 1);
  long long v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  uint64_t v19;
  void (*v20)(char *, unint64_t, uint64_t);
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  uint64_t v32 = a1;
  unint64_t v6 = type metadata accessor for DateComponents();
  unint64_t v7 = *(void *)(v6 - 8);
  v8.n128_f64[0] = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(*v3 + 16);
  char v12 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  int v30 = v7;
  if (v12 > v11 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v12 > v11)
    {
      specialized _NativeSet.copy()(MEMORY[0x1E4F26F90], (void (*)(void, double))type metadata accessor for _SetStorage<DateComponents>);
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v13 = *v3;
  lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x1E4F26F90]);
  char v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v15 = -1 << *(unsigned char *)(v13 + 32);
  a2 = v14 & ~v15;
  uint64_t v31 = v13;
  BOOL v16 = v13 + 56;
  if ((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v17 = ~v15;
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    long long v19 = v7 + 16;
    uint64_t v18 = v20;
    uint64_t v21 = *(void *)(v19 + 56);
    do
    {
      v18(v10, *(void *)(v31 + 48) + v21 * a2, v6);
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x1E4F26F90]);
      uint64_t v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v19 - 8))(v10, v6);
      if (v22) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v17;
    }
    while (((*(void *)(v16 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v23 = v30;
  long long v24 = *v29;
  *(void *)(v24 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v23 + 32))(*(void *)(v24 + 48) + *(void *)(v23 + 72) * a2, v32, v6, v8);
  uint64_t v26 = *(void *)(v24 + 16);
  long long v27 = __OFADD__(v26, 1);
  long long v28 = v26 + 1;
  if (!v27)
  {
    *(void *)(v24 + 16) = v28;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<ToolbarPlacement.Role>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_43;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_43;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_43;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_43:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_49;
                  }
                  if (v12 >= v9) {
                    goto LABEL_43;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      outlined init with take of ToolbarPlacement.Role(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v33);
      Hasher.init(_seed:)();
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v33, (uint64_t)&v30);
      switch(*((void *)&v31 + 1))
      {
        case 0:
          Swift::UInt v19 = 0;
          goto LABEL_33;
        case 1:
          Swift::UInt v19 = 1;
          goto LABEL_33;
        case 2:
          Swift::UInt v19 = 2;
          goto LABEL_33;
        case 3:
          Swift::UInt v19 = 3;
          goto LABEL_33;
        case 4:
          Swift::UInt v19 = 4;
          goto LABEL_33;
        case 5:
          Swift::UInt v19 = 5;
          goto LABEL_33;
        case 6:
          Swift::UInt v19 = 7;
LABEL_33:
          Hasher._combine(_:)(v19);
          break;
        default:
          v28[0] = v30;
          v28[1] = v31;
          uint64_t v29 = v32;
          Hasher._combine(_:)(6uLL);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v28);
          break;
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_48;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t result = outlined init with take of ToolbarPlacement.Role((uint64_t)v33, *(void *)(v4 + 48) + 40 * v13);
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;
  long long v30;
  long long v31;
  uint64_t v32;
  unsigned char v33[48];

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<Toolbar.BarLocation>, (void (*)(void))lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_51;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_51;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_51;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_51:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_57;
                  }
                  if (v12 >= v9) {
                    goto LABEL_51;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      outlined init with take of Toolbar.BarLocation(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v33);
      Hasher.init(_seed:)();
      outlined init with copy of Toolbar.BarLocation((uint64_t)v33, (uint64_t)&v30);
      switch(*((void *)&v31 + 1))
      {
        case 0:
          Swift::UInt v19 = 0;
          goto LABEL_41;
        case 1:
          Swift::UInt v19 = 1;
          goto LABEL_41;
        case 2:
          Swift::UInt v19 = 2;
          goto LABEL_41;
        case 3:
          Swift::UInt v19 = 3;
          goto LABEL_41;
        case 4:
          Swift::UInt v19 = 4;
          goto LABEL_41;
        case 5:
          Swift::UInt v19 = 5;
          goto LABEL_41;
        case 6:
          Swift::UInt v19 = 6;
          goto LABEL_41;
        case 7:
          Swift::UInt v19 = 7;
          goto LABEL_41;
        case 8:
          Swift::UInt v19 = 8;
          goto LABEL_41;
        case 9:
          Swift::UInt v19 = 9;
          goto LABEL_41;
        case 0xALL:
          Swift::UInt v19 = 10;
          goto LABEL_41;
        case 0xBLL:
          Swift::UInt v19 = 11;
          goto LABEL_41;
        case 0xCLL:
          Swift::UInt v19 = 12;
          goto LABEL_41;
        case 0xDLL:
          Swift::UInt v19 = 13;
          goto LABEL_41;
        case 0xELL:
          Swift::UInt v19 = 15;
LABEL_41:
          Hasher._combine(_:)(v19);
          break;
        default:
          v28[0] = v30;
          v28[1] = v31;
          uint64_t v29 = v32;
          Hasher._combine(_:)(0xEuLL);
          AnyHashable.hash(into:)();
          outlined destroy of AnyHashable((uint64_t)v28);
          break;
      }
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_56;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t result = outlined init with take of Toolbar.BarLocation((uint64_t)v33, *(void *)(v4 + 48) + 40 * v13);
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<AGAttribute>();
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    unint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      unint64_t v8 = ~(-1 << v7);
    }
    else {
      unint64_t v8 = -1;
    }
    int64_t v9 = v8 & *(void *)(v2 + 56);
    long long v28 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          int64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            int64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *unint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  int64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        int64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int64_t v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
      uint64_t result = MEMORY[0x18C118330](*(void *)(v4 + 40), v18, 4);
      Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        int64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v22 = 0;
        char v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          BOOL v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        int64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t i;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<ObjectIdentifier>(0, &lazy cache variable for type metadata for _SetStorage<ObjectIdentifier>, MEMORY[0x1E4FBB058], MEMORY[0x1E4FBB060], MEMORY[0x1E4FBB9A8]);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    unint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      unint64_t v8 = ~(-1 << v7);
    }
    else {
      unint64_t v8 = -1;
    }
    int64_t v9 = v8 & *(void *)(v2 + 56);
    long long v28 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_37:
          __break(1u);
LABEL_38:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_32;
        }
        int64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_32;
          }
          int64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_32;
            }
            int64_t v16 = v6[v5];
            if (!v16)
            {
              uint64_t v5 = v15 + 3;
              if (v15 + 3 >= v10)
              {
LABEL_32:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *unint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v6[v5];
              for (uint64_t i = v15 + 3; !v16; ++i)
              {
                uint64_t v5 = i + 1;
                if (__OFADD__(i, 1)) {
                  goto LABEL_38;
                }
                if (v5 >= v10) {
                  goto LABEL_32;
                }
                int64_t v16 = v6[v5];
              }
            }
          }
        }
        int64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        int64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v22 = 0;
        char v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_37;
          }
          unint64_t v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          BOOL v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        int64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t i;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for ModifiedContent<AnyView, _SafeAreaInsetsModifier>(0, &lazy cache variable for type metadata for _SetStorage<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4FBC4D0], MEMORY[0x1E4FBB9A8]);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v27 = v1;
    uint64_t v5 = 0;
    unint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    if (v7 < 64) {
      unint64_t v8 = ~(-1 << v7);
    }
    else {
      unint64_t v8 = -1;
    }
    int64_t v9 = v8 & *(void *)(v2 + 56);
    long long v28 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_34;
        }
        int64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_34;
          }
          int64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_34;
            }
            int64_t v16 = v6[v5];
            if (!v16)
            {
              uint64_t v5 = v15 + 3;
              if (v15 + 3 >= v10) {
                goto LABEL_34;
              }
              int64_t v16 = v6[v5];
              if (!v16)
              {
                uint64_t v5 = v15 + 4;
                if (v15 + 4 >= v10)
                {
LABEL_34:
                  if (v28 >= 64) {
                    bzero((void *)(v2 + 56), 8 * v10);
                  }
                  else {
                    *unint64_t v6 = v26;
                  }
                  uint64_t v1 = v27;
                  *(void *)(v2 + 16) = 0;
                  break;
                }
                int64_t v16 = v6[v5];
                for (uint64_t i = v15 + 4; !v16; ++i)
                {
                  uint64_t v5 = i + 1;
                  if (__OFADD__(i, 1)) {
                    goto LABEL_40;
                  }
                  if (v5 >= v10) {
                    goto LABEL_34;
                  }
                  int64_t v16 = v6[v5];
                }
              }
            }
          }
        }
        int64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int64_t v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
      uint64_t result = MEMORY[0x18C118330](*(void *)(v4 + 40), v18, 4);
      Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        int64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v22 = 0;
        char v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          BOOL v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        int64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  _OWORD *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  long long *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  long long v30;
  Swift::UInt v31[2];

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<AccessibilityRelationshipScope.Key>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        int64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        unint64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9) {
          goto LABEL_33;
        }
        int64_t v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_33;
          }
          int64_t v18 = v6[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v9) {
              goto LABEL_33;
            }
            int64_t v18 = v6[v12];
            if (!v18)
            {
              Swift::UInt v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                long long v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  int64_t v18 = v6[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v18 - 1) & v18;
        int64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      uint64_t v20 = (long long *)(*(void *)(v2 + 48) + 48 * v16);
      uint64_t v29 = *v20;
      long long v30 = v20[1];
      *(_OWORD *)long long v31 = v20[2];
      Hasher.init(_seed:)();
      AnyHashable.hash(into:)();
      Hasher._combine(_:)(v31[1]);
      uint64_t result = Hasher._finalize()();
      unint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      char v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        BOOL v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            char v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = (_OWORD *)(*(void *)(v4 + 48) + 48 * v13);
      *unint64_t v14 = v29;
      v14[1] = v30;
      _OWORD v14[2] = *(_OWORD *)v31;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::UInt *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt *v18;
  Swift::UInt v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  void *v31;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<EventID>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_37;
  }
  uint64_t v5 = 0;
  long long v31 = (void *)(v2 + 56);
  unint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  while (1)
  {
    if (v8)
    {
      unint64_t v13 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_38;
    }
    if (v15 >= v9) {
      break;
    }
    int64_t v16 = v31[v15];
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v9) {
        break;
      }
      int64_t v16 = v31[v5];
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v9) {
          break;
        }
        int64_t v16 = v31[v5];
        if (!v16)
        {
          unint64_t v17 = v15 + 3;
          if (v17 >= v9) {
            break;
          }
          int64_t v16 = v31[v17];
          if (!v16)
          {
            while (1)
            {
              uint64_t v5 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_39;
              }
              if (v5 >= v9) {
                goto LABEL_33;
              }
              int64_t v16 = v31[v5];
              ++v17;
              if (v16) {
                goto LABEL_23;
              }
            }
          }
          uint64_t v5 = v17;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    int64_t v18 = (Swift::UInt *)(*(void *)(v2 + 48) + 16 * v14);
    Swift::UInt v19 = *v18;
    uint64_t v20 = v18[1];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v19);
    Hasher._combine(_:)(v20);
    unint64_t v21 = Hasher._finalize()();
    unint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    char v23 = v21 & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    BOOL v25 = 0;
    uint64_t v26 = (unint64_t)(63 - v22) >> 6;
    do
    {
      if (++v24 == v26 && (v25 & 1) != 0)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x188227A28);
      }
      uint64_t v27 = v24 == v26;
      if (v24 == v26) {
        unint64_t v24 = 0;
      }
      v25 |= v27;
      long long v28 = *(void *)(v10 + 8 * v24);
    }
    while (v28 == -1);
    uint64_t v11 = __clz(__rbit64(~v28)) + (v24 << 6);
LABEL_7:
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    int64_t v12 = (Swift::UInt *)(*(void *)(v4 + 48) + 16 * v11);
    *int64_t v12 = v19;
    v12[1] = v20;
    ++*(void *)(v4 + 16);
  }
LABEL_33:
  uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
  if (v29 > 63) {
    bzero(v31, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *long long v31 = -1 << v29;
  }
  uint64_t v1 = v0;
  *(void *)(v2 + 16) = 0;
LABEL_37:
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UTType();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  unint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  type metadata accessor for _SetStorage<UTType>();
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    unint64_t v8 = *(void *)(v4 + 56);
    os_log_type_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      int64_t v9 = ~(-1 << v7);
    }
    else {
      int64_t v9 = -1;
    }
    uint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    unint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    os_log_type_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    CGFloat v38 = v6;
    unint64_t v14 = v41;
    unint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        int64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        Swift::UInt v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        uint64_t v20 = v37[v19];
        unint64_t v21 = v13 + 1;
        if (!v20)
        {
          unint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          uint64_t v20 = v37[v21];
          if (!v20)
          {
            unint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            uint64_t v20 = v37[v21];
            if (!v20)
            {
              unint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *os_log_type_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              uint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  uint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        int64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      char v23 = v4;
      unint64_t v24 = *(void *)(v4 + 48);
      BOOL v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      unint64_t v6 = v38;
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      long long v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        int64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        long long v30 = 0;
        long long v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        int64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  int64_t v32;
  void *v33;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CommandGroupPlacementBox(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = *v0;
  type metadata accessor for _SetStorage<CommandGroupPlacementBox>();
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v8 = v7;
  if (*(void *)(v6 + 16))
  {
    int64_t v9 = 1 << *(unsigned char *)(v6 + 32);
    uint64_t v10 = *(void *)(v6 + 56);
    uint64_t v33 = (void *)(v6 + 56);
    if (v9 < 64) {
      uint64_t v11 = ~(-1 << v9);
    }
    else {
      uint64_t v11 = -1;
    }
    int64_t v12 = v11 & v10;
    long long v31 = v0;
    uint64_t v32 = (unint64_t)(v9 + 63) >> 6;
    unint64_t v13 = v7 + 56;
    uint64_t result = swift_retain();
    unint64_t v15 = 0;
    while (1)
    {
      if (v12)
      {
        unint64_t v17 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        int64_t v18 = v17 | (v15 << 6);
      }
      else
      {
        Swift::UInt v19 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v32) {
          goto LABEL_33;
        }
        uint64_t v20 = v33[v19];
        ++v15;
        if (!v20)
        {
          unint64_t v15 = v19 + 1;
          if (v19 + 1 >= v32) {
            goto LABEL_33;
          }
          uint64_t v20 = v33[v15];
          if (!v20)
          {
            unint64_t v15 = v19 + 2;
            if (v19 + 2 >= v32) {
              goto LABEL_33;
            }
            uint64_t v20 = v33[v15];
            if (!v20)
            {
              unint64_t v21 = v19 + 3;
              if (v21 >= v32)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v31;
                long long v30 = 1 << *(unsigned char *)(v6 + 32);
                if (v30 > 63) {
                  bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v33 = -1 << v30;
                }
                *(void *)(v6 + 16) = 0;
                break;
              }
              uint64_t v20 = v33[v21];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1)) {
                    goto LABEL_39;
                  }
                  if (v15 >= v32) {
                    goto LABEL_33;
                  }
                  uint64_t v20 = v33[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v15 = v21;
            }
          }
        }
LABEL_23:
        int64_t v12 = (v20 - 1) & v20;
        int64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
      }
      unint64_t v22 = *(void *)(v3 + 72);
      outlined init with take of CommandGroupPlacementBox(*(void *)(v6 + 48) + v22 * v18, (uint64_t)v5);
      Hasher.init(_seed:)();
      type metadata accessor for CommandGroupPlacement(0);
      UUID.hash(into:)();
      uint64_t result = Hasher._finalize()();
      char v23 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v24 = result & ~v23;
      BOOL v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
      {
        int64_t v16 = __clz(__rbit64((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          long long v28 = v25 == v27;
          if (v25 == v27) {
            BOOL v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v13 + 8 * v25);
        }
        while (v29 == -1);
        int64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = outlined init with take of CommandGroupPlacementBox((uint64_t)v5, *(void *)(v8 + 48) + v16 * v22);
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v8;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<String>(0, &lazy cache variable for type metadata for _SetStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB1B0], MEMORY[0x1E4FBB9A8]);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    long long v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      unint64_t v6 = ~(-1 << v5);
    }
    else {
      unint64_t v6 = -1;
    }
    uint64_t v7 = v6 & *(void *)(v2 + 56);
    unint64_t v8 = (unint64_t)(v5 + 63) >> 6;
    int64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    uint64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          uint64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            uint64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *long long v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  uint64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v11 = v18;
            }
          }
        }
LABEL_23:
        uint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      Swift::UInt v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      unint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      unint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      char v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        int64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        BOOL v25 = 0;
        uint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          long long v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        int64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      *unint64_t v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  char v26[8];
  Swift::UInt v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<HashableWeakBox<Swift.AnyObject>>();
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    unint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      unint64_t v8 = ~(-1 << v7);
    }
    else {
      unint64_t v8 = -1;
    }
    int64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          int64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            int64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                BOOL v25 = 1 << *(unsigned char *)(v2 + 32);
                if (v25 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v25 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v25;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  int64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        int64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      outlined init with take of HashableWeakBox<Swift.AnyObject>(*(void *)(v2 + 48) + 16 * v14, (uint64_t)v26);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v27);
      uint64_t result = Hasher._finalize()();
      int64_t v18 = -1 << *(unsigned char *)(v4 + 32);
      Swift::UInt v19 = result & ~v18;
      uint64_t v20 = v19 >> 6;
      if (((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6))) != 0)
      {
        int64_t v12 = __clz(__rbit64((-1 << v19) & ~*(void *)(v11 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v21 = 0;
        unint64_t v22 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v22 && (v21 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          char v23 = v20 == v22;
          if (v20 == v22) {
            uint64_t v20 = 0;
          }
          v21 |= v23;
          unint64_t v24 = *(void *)(v11 + 8 * v20);
        }
        while (v24 == -1);
        int64_t v12 = __clz(__rbit64(~v24)) + (v20 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t result = outlined init with take of HashableWeakBox<Swift.AnyObject>((uint64_t)v26, *(void *)(v4 + 48) + 16 * v12);
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<CommandFlag>, (void (*)(void))lazy protocol witness table accessor for type CommandFlag and conformance CommandFlag);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    unint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      unint64_t v8 = ~(-1 << v7);
    }
    else {
      unint64_t v8 = -1;
    }
    int64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          int64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            int64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  int64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        int64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        int64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v22 = 0;
        char v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          BOOL v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        int64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  unint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  type metadata accessor for _SetStorage<URL>();
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    unint64_t v8 = *(void *)(v4 + 56);
    os_log_type_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      int64_t v9 = ~(-1 << v7);
    }
    else {
      int64_t v9 = -1;
    }
    uint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    unint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    os_log_type_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    CGFloat v38 = v6;
    unint64_t v14 = v41;
    unint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        int64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        Swift::UInt v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        uint64_t v20 = v37[v19];
        unint64_t v21 = v13 + 1;
        if (!v20)
        {
          unint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          uint64_t v20 = v37[v21];
          if (!v20)
          {
            unint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            uint64_t v20 = v37[v21];
            if (!v20)
            {
              unint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *os_log_type_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              uint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  uint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        int64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      char v23 = v4;
      unint64_t v24 = *(void *)(v4 + 48);
      BOOL v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      unint64_t v6 = v38;
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      long long v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        int64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        long long v30 = 0;
        long long v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        int64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<String>(0, &lazy cache variable for type metadata for _SetStorage<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB560], MEMORY[0x1E4FBB9A8]);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    unint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    uint64_t v27 = v1;
    if (v7 < 64) {
      unint64_t v8 = ~(-1 << v7);
    }
    else {
      unint64_t v8 = -1;
    }
    int64_t v9 = v8 & *(void *)(v2 + 56);
    long long v28 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          int64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            int64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *unint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  int64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        int64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        int64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v22 = 0;
        char v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          BOOL v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        int64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  unint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  type metadata accessor for _SetStorage<IndexPath>();
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    unint64_t v8 = *(void *)(v4 + 56);
    os_log_type_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      int64_t v9 = ~(-1 << v7);
    }
    else {
      int64_t v9 = -1;
    }
    uint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    unint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    os_log_type_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    CGFloat v38 = v6;
    unint64_t v14 = v41;
    unint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        int64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        Swift::UInt v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        uint64_t v20 = v37[v19];
        unint64_t v21 = v13 + 1;
        if (!v20)
        {
          unint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          uint64_t v20 = v37[v21];
          if (!v20)
          {
            unint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            uint64_t v20 = v37[v21];
            if (!v20)
            {
              unint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *os_log_type_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              uint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  uint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        int64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      char v23 = v4;
      unint64_t v24 = *(void *)(v4 + 48);
      BOOL v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      unint64_t v6 = v38;
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      long long v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        int64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        long long v30 = 0;
        long long v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        int64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v27 = v1;
    uint64_t v5 = 0;
    unint64_t v6 = (uint64_t *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v26 = -1 << v7;
    if (v7 < 64) {
      unint64_t v8 = ~(-1 << v7);
    }
    else {
      unint64_t v8 = -1;
    }
    int64_t v9 = v8 & *(void *)(v2 + 56);
    long long v28 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          int64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            int64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                if (v28 >= 64) {
                  bzero((void *)(v2 + 56), 8 * v10);
                }
                else {
                  *unint64_t v6 = v26;
                }
                uint64_t v1 = v27;
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  int64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        int64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
      uint64_t result = static Hasher._hash(seed:_:)();
      Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        int64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v22 = 0;
        char v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          BOOL v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        int64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  long long v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  int64_t v34;
  void *v35;
  long long v36;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ArchivedViewState.ID>, (void (*)(void))lazy protocol witness table accessor for type ArchivedViewState.ID and conformance ArchivedViewState.ID);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v5 = v3;
  if (!*(void *)(v2 + 16)) {
    goto LABEL_37;
  }
  unint64_t v6 = 0;
  uint64_t v35 = (void *)(v2 + 56);
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  else {
    unint64_t v8 = -1;
  }
  int64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v34 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v6 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_38;
    }
    if (v15 >= v34) {
      break;
    }
    int64_t v16 = v35[v15];
    ++v6;
    if (!v16)
    {
      unint64_t v6 = v15 + 1;
      if (v15 + 1 >= v34) {
        break;
      }
      int64_t v16 = v35[v6];
      if (!v16)
      {
        unint64_t v6 = v15 + 2;
        if (v15 + 2 >= v34) {
          break;
        }
        int64_t v16 = v35[v6];
        if (!v16)
        {
          unint64_t v17 = v15 + 3;
          if (v17 >= v34) {
            break;
          }
          int64_t v16 = v35[v17];
          if (!v16)
          {
            while (1)
            {
              unint64_t v6 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_39;
              }
              if (v6 >= v34) {
                goto LABEL_33;
              }
              int64_t v16 = v35[v6];
              ++v17;
              if (v16) {
                goto LABEL_23;
              }
            }
          }
          unint64_t v6 = v17;
        }
      }
    }
LABEL_23:
    int64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_24:
    int64_t v18 = v2;
    Swift::UInt v19 = *(void *)(v2 + 48) + 24 * v14;
    unint64_t v21 = *(_DWORD *)v19;
    uint64_t v20 = *(_DWORD *)(v19 + 4);
    char v23 = *(_DWORD *)(v19 + 8);
    unint64_t v22 = *(_DWORD *)(v19 + 12);
    *(void *)&uint64_t v4 = *(void *)(v19 + 16);
    unint64_t v36 = v4;
    Hasher.init(_seed:)();
    Hasher.combine(bytes:)();
    Hasher._combine(_:)(DWORD1(v36));
    unint64_t v24 = Hasher._finalize()();
    BOOL v25 = -1 << *(unsigned char *)(v5 + 32);
    uint64_t v26 = v24 & ~v25;
    uint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v10 + 8 * (v26 >> 6))) != 0)
    {
      uint64_t v11 = __clz(__rbit64((-1 << v26) & ~*(void *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    long long v28 = 0;
    uint64_t v29 = (unint64_t)(63 - v25) >> 6;
    do
    {
      if (++v27 == v29 && (v28 & 1) != 0)
      {
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
      }
      long long v30 = v27 == v29;
      if (v27 == v29) {
        uint64_t v27 = 0;
      }
      v28 |= v30;
      long long v31 = *(void *)(v10 + 8 * v27);
    }
    while (v31 == -1);
    uint64_t v11 = __clz(__rbit64(~v31)) + (v27 << 6);
LABEL_7:
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    int64_t v12 = *(void *)(v5 + 48) + 24 * v11;
    *(_DWORD *)int64_t v12 = v21;
    *(_DWORD *)(v12 + 4) = v20;
    *(_DWORD *)(v12 + 8) = v23;
    *(_DWORD *)(v12 + 12) = v22;
    *((void *)&v4 + 1) = *((void *)&v36 + 1);
    *(void *)(v12 + 16) = v36;
    ++*(void *)(v5 + 16);
    uint64_t v2 = v18;
  }
LABEL_33:
  uint64_t v32 = 1 << *(unsigned char *)(v2 + 32);
  if (v32 > 63) {
    bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v35 = -1 << v32;
  }
  uint64_t v1 = v0;
  *(void *)(v2 + 16) = 0;
LABEL_37:
  uint64_t result = swift_release();
  *uint64_t v1 = v5;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unsigned char v27[48];

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ToolbarItemPlacement.Role>, (void (*)(void))lazy protocol witness table accessor for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v26;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      outlined init with take of ToolbarItemPlacement.Role(*(void *)(v2 + 48) + 48 * v15, (uint64_t)v27);
      Hasher.init(_seed:)();
      ToolbarItemPlacement.Role.hash(into:)();
      uint64_t result = Hasher._finalize()();
      Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v22 = 0;
        char v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          BOOL v25 = *(void *)(v10 + 8 * v21);
        }
        while (v25 == -1);
        unint64_t v13 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      uint64_t result = outlined init with take of ToolbarItemPlacement.Role((uint64_t)v27, *(void *)(v4 + 48) + 48 * v13);
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for DateComponents();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  unint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  type metadata accessor for _SetStorage<DateComponents>();
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    uint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    unint64_t v8 = *(void *)(v4 + 56);
    os_log_type_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      int64_t v9 = ~(-1 << v7);
    }
    else {
      int64_t v9 = -1;
    }
    uint64_t v10 = v9 & v8;
    uint64_t v35 = v0;
    unint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    os_log_type_t v39 = v2;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    unint64_t v13 = 0;
    CGFloat v38 = v6;
    unint64_t v14 = v41;
    unint64_t v15 = v42;
    while (1)
    {
      if (v10)
      {
        unint64_t v17 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        uint64_t v40 = v13;
        int64_t v18 = v17 | (v13 << 6);
      }
      else
      {
        Swift::UInt v19 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v19 >= v36) {
          goto LABEL_33;
        }
        uint64_t v20 = v37[v19];
        unint64_t v21 = v13 + 1;
        if (!v20)
        {
          unint64_t v21 = v13 + 2;
          if (v13 + 2 >= v36) {
            goto LABEL_33;
          }
          uint64_t v20 = v37[v21];
          if (!v20)
          {
            unint64_t v21 = v13 + 3;
            if (v13 + 3 >= v36) {
              goto LABEL_33;
            }
            uint64_t v20 = v37[v21];
            if (!v20)
            {
              unint64_t v22 = v13 + 4;
              if (v13 + 4 >= v36)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v35;
                uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
                if (v34 > 63) {
                  bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *os_log_type_t v37 = -1 << v34;
                }
                *(void *)(v4 + 16) = 0;
                break;
              }
              uint64_t v20 = v37[v22];
              if (!v20)
              {
                while (1)
                {
                  unint64_t v21 = v22 + 1;
                  if (__OFADD__(v22, 1)) {
                    goto LABEL_39;
                  }
                  if (v21 >= v36) {
                    goto LABEL_33;
                  }
                  uint64_t v20 = v37[v21];
                  ++v22;
                  if (v20) {
                    goto LABEL_23;
                  }
                }
              }
              unint64_t v21 = v13 + 4;
            }
          }
        }
LABEL_23:
        uint64_t v10 = (v20 - 1) & v20;
        uint64_t v40 = v21;
        int64_t v18 = __clz(__rbit64(v20)) + (v21 << 6);
      }
      char v23 = v4;
      unint64_t v24 = *(void *)(v4 + 48);
      BOOL v25 = *(void *)(v39 + 72);
      uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v26(v14, v24 + v25 * v18, v15);
      unint64_t v6 = v38;
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x1E4F26F90]);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      uint64_t v27 = -1 << *(unsigned char *)(v6 + 32);
      long long v28 = result & ~v27;
      uint64_t v29 = v28 >> 6;
      if (((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6))) != 0)
      {
        int64_t v16 = __clz(__rbit64((-1 << v28) & ~*(void *)(v11 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        long long v30 = 0;
        long long v31 = (unint64_t)(63 - v27) >> 6;
        do
        {
          if (++v29 == v31 && (v30 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v32 = v29 == v31;
          if (v29 == v31) {
            uint64_t v29 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v29);
        }
        while (v33 == -1);
        int64_t v16 = __clz(__rbit64(~v33)) + (v29 << 6);
      }
      *(void *)(v11 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v6 + 48) + v16 * v25, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v23;
      unint64_t v13 = v40;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v6;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<NavigationStackHostingController<AnyView>>();
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    long long v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v28;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      Swift::UInt v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ToolbarDefaultItemKind.Kind>, (void (*)(void))lazy protocol witness table accessor for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 0;
    unint64_t v6 = (void *)(v2 + 56);
    uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
    if (v7 < 64) {
      unint64_t v8 = ~(-1 << v7);
    }
    else {
      unint64_t v8 = -1;
    }
    int64_t v9 = v8 & *(void *)(v2 + 56);
    uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = result + 56;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v5 << 6);
      }
      else
      {
        unint64_t v15 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v15 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = v6[v15];
        ++v5;
        if (!v16)
        {
          uint64_t v5 = v15 + 1;
          if (v15 + 1 >= v10) {
            goto LABEL_33;
          }
          int64_t v16 = v6[v5];
          if (!v16)
          {
            uint64_t v5 = v15 + 2;
            if (v15 + 2 >= v10) {
              goto LABEL_33;
            }
            int64_t v16 = v6[v5];
            if (!v16)
            {
              unint64_t v17 = v15 + 3;
              if (v17 >= v10)
              {
LABEL_33:
                uint64_t v26 = 1 << *(unsigned char *)(v2 + 32);
                if (v26 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v26 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v26;
                }
                uint64_t v1 = v0;
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v16 = v6[v17];
              if (!v16)
              {
                while (1)
                {
                  uint64_t v5 = v17 + 1;
                  if (__OFADD__(v17, 1)) {
                    goto LABEL_39;
                  }
                  if (v5 >= v10) {
                    goto LABEL_33;
                  }
                  int64_t v16 = v6[v5];
                  ++v17;
                  if (v16) {
                    goto LABEL_23;
                  }
                }
              }
              uint64_t v5 = v17;
            }
          }
        }
LABEL_23:
        int64_t v9 = (v16 - 1) & v16;
        unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
      }
      int64_t v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v18);
      uint64_t result = Hasher._finalize()();
      Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v20 = result & ~v19;
      unint64_t v21 = v20 >> 6;
      if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
      {
        int64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v22 = 0;
        char v23 = (unint64_t)(63 - v19) >> 6;
        do
        {
          if (++v21 == v23 && (v22 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          unint64_t v24 = v21 == v23;
          if (v21 == v23) {
            unint64_t v21 = 0;
          }
          v22 |= v24;
          BOOL v25 = *(void *)(v11 + 8 * v21);
        }
        while (v25 == -1);
        int64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
      }
      *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  long long v30;
  uint64_t v31;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<String>(0, &lazy cache variable for type metadata for _SetStorage<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], MEMORY[0x1E4FBB9A8]);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        int64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        unint64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9) {
          goto LABEL_33;
        }
        int64_t v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_33;
          }
          int64_t v18 = v6[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v9) {
              goto LABEL_33;
            }
            int64_t v18 = v6[v12];
            if (!v18)
            {
              Swift::UInt v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                long long v28 = 1 << *(unsigned char *)(v2 + 32);
                if (v28 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v28;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  int64_t v18 = v6[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v18 - 1) & v18;
        int64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      uint64_t v20 = *(void *)(v2 + 48) + 40 * v16;
      uint64_t v29 = *(_OWORD *)v20;
      long long v30 = *(_OWORD *)(v20 + 16);
      long long v31 = *(void *)(v20 + 32);
      uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
      unint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v22 = result & ~v21;
      char v23 = v22 >> 6;
      if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v24 = 0;
        BOOL v25 = (unint64_t)(63 - v21) >> 6;
        do
        {
          if (++v23 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          uint64_t v26 = v23 == v25;
          if (v23 == v25) {
            char v23 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v10 + 8 * v23);
        }
        while (v27 == -1);
        unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
      *(_OWORD *)unint64_t v14 = v29;
      *(_OWORD *)(v14 + 16) = v30;
      *(void *)(v14 + 32) = v31;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<_ViewList_ID.Canonical>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    unint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v15 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        int64_t v16 = v15 | (v12 << 6);
      }
      else
      {
        unint64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v17 >= v9) {
          goto LABEL_33;
        }
        int64_t v18 = v6[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v9) {
            goto LABEL_33;
          }
          int64_t v18 = v6[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v9) {
              goto LABEL_33;
            }
            int64_t v18 = v6[v12];
            if (!v18)
            {
              Swift::UInt v19 = v17 + 3;
              if (v19 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                long long v30 = 1 << *(unsigned char *)(v2 + 32);
                if (v30 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *unint64_t v6 = -1 << v30;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              int64_t v18 = v6[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  int64_t v18 = v6[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v19;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v18 - 1) & v18;
        int64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
      }
      uint64_t v20 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v16);
      unint64_t v21 = *v20;
      unint64_t v22 = v20[1];
      Hasher.init(_seed:)();
      _ViewList_ID.Canonical.hash(into:)();
      uint64_t result = Hasher._finalize()();
      char v23 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v24 = result & ~v23;
      BOOL v25 = v24 >> 6;
      if (((-1 << v24) & ~*(void *)(v10 + 8 * (v24 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v24) & ~*(void *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        uint64_t v26 = 0;
        uint64_t v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          long long v28 = v25 == v27;
          if (v25 == v27) {
            BOOL v25 = 0;
          }
          v26 |= v28;
          uint64_t v29 = *(void *)(v10 + 8 * v25);
        }
        while (v29 == -1);
        unint64_t v13 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      unint64_t v14 = (void *)(*(void *)(v4 + 48) + 16 * v13);
      *unint64_t v14 = v21;
      v14[1] = v22;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v1 = v4;
  return result;
}

void type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _SetStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role;
  if (!lazy protocol witness table cache variable for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role;
  if (!lazy protocol witness table cache variable for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  }
  return result;
}

uint64_t UIKitToolbarStrategy.updateLocations()()
{
  type metadata accessor for _ContiguousArrayStorage<((), Toolbar.BarLocation)>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<((), Toolbar.BarLocation)>, &lazy cache variable for type metadata for ((), Toolbar.BarLocation), (void (*)(uint64_t))type metadata accessor for (), MEMORY[0x1E4FBBE00]);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_18838AA00;
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  uint64_t v2 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v2 + 16);
  uint64_t v91 = 0;
  memset(v90, 0, sizeof(v90));
  *(void *)&long long v87 = partial apply for implicit closure #2 in implicit closure #1 in UIKitToolbarStrategy.updateLocations();
  *((void *)&v87 + 1) = v2;
  outlined init with take of Toolbar.BarLocation((uint64_t)v90, (uint64_t)v88);
  uint64_t v3 = swift_allocObject();
  *(void *)(v1 + 32) = partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
  *(void *)(v3 + 16) = partial apply for implicit closure #2 in implicit closure #1 in UIKitToolbarStrategy.updateLocations();
  *(void *)(v3 + 24) = v2;
  *(void *)(v1 + 40) = v3;
  outlined init with take of Toolbar.BarLocation((uint64_t)v88, v1 + 48);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  uint64_t v4 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v4 + 16);
  memset(v85, 0, sizeof(v85));
  long long v86 = xmmword_18834FC50;
  *(void *)&long long v82 = partial apply for implicit closure #4 in implicit closure #3 in UIKitToolbarStrategy.updateLocations();
  *((void *)&v82 + 1) = v4;
  outlined init with take of Toolbar.BarLocation((uint64_t)v85, (uint64_t)v83);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = partial apply for implicit closure #4 in implicit closure #3 in UIKitToolbarStrategy.updateLocations();
  *(void *)(v5 + 24) = v4;
  *(void *)(v1 + 88) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(void *)(v1 + 96) = v5;
  outlined init with take of Toolbar.BarLocation((uint64_t)v83, v1 + 104);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  uint64_t v6 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v6 + 16);
  memset(v80, 0, sizeof(v80));
  long long v81 = xmmword_18835ED10;
  v78[0] = partial apply for implicit closure #6 in implicit closure #5 in UIKitToolbarStrategy.updateLocations();
  v78[1] = v6;
  outlined init with take of Toolbar.BarLocation((uint64_t)v80, (uint64_t)v79);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = partial apply for implicit closure #6 in implicit closure #5 in UIKitToolbarStrategy.updateLocations();
  *(void *)(v7 + 24) = v6;
  *(void *)(v1 + 144) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(void *)(v1 + 152) = v7;
  outlined init with take of Toolbar.BarLocation((uint64_t)v79, v1 + 160);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  uint64_t v8 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v8 + 16);
  memset(v76, 0, sizeof(v76));
  long long v77 = xmmword_18838AA10;
  uint64_t v73 = partial apply for implicit closure #8 in implicit closure #7 in UIKitToolbarStrategy.updateLocations();
  uint64_t v74 = v8;
  outlined init with take of Toolbar.BarLocation((uint64_t)v76, (uint64_t)v75);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = partial apply for implicit closure #8 in implicit closure #7 in UIKitToolbarStrategy.updateLocations();
  *(void *)(v9 + 24) = v8;
  *(void *)(v1 + 200) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(void *)(v1 + 208) = v9;
  outlined init with take of Toolbar.BarLocation((uint64_t)v75, v1 + 216);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  uint64_t v10 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v10 + 16);
  memset(v71, 0, sizeof(v71));
  long long v72 = xmmword_188382680;
  CGRect v68 = partial apply for implicit closure #10 in implicit closure #9 in UIKitToolbarStrategy.updateLocations();
  uint64_t v69 = v10;
  outlined init with take of Toolbar.BarLocation((uint64_t)v71, (uint64_t)v70);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = partial apply for implicit closure #10 in implicit closure #9 in UIKitToolbarStrategy.updateLocations();
  *(void *)(v11 + 24) = v10;
  *(void *)(v1 + 256) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(void *)(v1 + 264) = v11;
  outlined init with take of Toolbar.BarLocation((uint64_t)v70, v1 + 272);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  uint64_t v12 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v12 + 16);
  memset(v66, 0, sizeof(v66));
  long long v67 = xmmword_18838AA20;
  uint64_t v63 = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  uint64_t v64 = v12;
  outlined init with take of Toolbar.BarLocation((uint64_t)v66, (uint64_t)v65);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  *(void *)(v13 + 24) = v12;
  *(void *)(v1 + 312) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(void *)(v1 + 320) = v13;
  outlined init with take of Toolbar.BarLocation((uint64_t)v65, v1 + 328);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  uint64_t v14 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v14 + 16);
  memset(v61, 0, sizeof(v61));
  long long v62 = xmmword_188382690;
  long long v58 = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  uint64_t v59 = v14;
  outlined init with take of Toolbar.BarLocation((uint64_t)v61, (uint64_t)v60);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  *(void *)(v15 + 24) = v14;
  *(void *)(v1 + 368) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(void *)(v1 + 376) = v15;
  outlined init with take of Toolbar.BarLocation((uint64_t)v60, v1 + 384);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  uint64_t v16 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v16 + 16);
  memset(v56, 0, sizeof(v56));
  long long v57 = xmmword_188382670;
  uint64_t v53 = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  uint64_t v54 = v16;
  outlined init with take of Toolbar.BarLocation((uint64_t)v56, (uint64_t)v55);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  *(void *)(v17 + 24) = v16;
  *(void *)(v1 + 424) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(void *)(v1 + 432) = v17;
  outlined init with take of Toolbar.BarLocation((uint64_t)v55, v1 + 440);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  uint64_t v18 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v18 + 16);
  memset(v51, 0, sizeof(v51));
  long long v52 = xmmword_18838A9E0;
  int v48 = partial apply for implicit closure #18 in implicit closure #17 in UIKitToolbarStrategy.updateLocations();
  uint64_t v49 = v18;
  outlined init with take of Toolbar.BarLocation((uint64_t)v51, (uint64_t)v50);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = partial apply for implicit closure #18 in implicit closure #17 in UIKitToolbarStrategy.updateLocations();
  *(void *)(v19 + 24) = v18;
  *(void *)(v1 + 480) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(void *)(v1 + 488) = v19;
  outlined init with take of Toolbar.BarLocation((uint64_t)v50, v1 + 496);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  uint64_t v20 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v20 + 16);
  memset(v46, 0, sizeof(v46));
  long long v47 = xmmword_18838AA30;
  uint64_t v43 = partial apply for implicit closure #20 in implicit closure #19 in UIKitToolbarStrategy.updateLocations();
  uint64_t v44 = v20;
  outlined init with take of Toolbar.BarLocation((uint64_t)v46, (uint64_t)v45);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = partial apply for implicit closure #20 in implicit closure #19 in UIKitToolbarStrategy.updateLocations();
  *(void *)(v21 + 24) = v20;
  *(void *)(v1 + 536) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(void *)(v1 + 544) = v21;
  outlined init with take of Toolbar.BarLocation((uint64_t)v45, v1 + 552);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  uint64_t v22 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v22 + 16);
  memset(v41, 0, sizeof(v41));
  long long v42 = xmmword_18838AA40;
  CGFloat v38 = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  uint64_t v39 = v22;
  outlined init with take of Toolbar.BarLocation((uint64_t)v41, (uint64_t)v40);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key;
  *(void *)(v23 + 24) = v22;
  *(void *)(v1 + 592) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(void *)(v1 + 600) = v23;
  outlined init with take of Toolbar.BarLocation((uint64_t)v40, v1 + 608);
  outlined init with copy of UIKitToolbarStrategy(v0, (uint64_t)v92);
  uint64_t v24 = swift_allocObject();
  outlined init with take of UIKitToolbarStrategy(v92, v24 + 16);
  memset(v36, 0, sizeof(v36));
  long long v37 = xmmword_18838A9F0;
  v92[0] = (uint64_t)partial apply for implicit closure #24 in implicit closure #23 in UIKitToolbarStrategy.updateLocations();
  v92[1] = v24;
  outlined init with take of Toolbar.BarLocation((uint64_t)v36, (uint64_t)v93);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = partial apply for implicit closure #24 in implicit closure #23 in UIKitToolbarStrategy.updateLocations();
  *(void *)(v25 + 24) = v24;
  *(void *)(v1 + 648) = thunk for @escaping @callee_guaranteed () -> (@unowned Bool)partial apply;
  *(void *)(v1 + 656) = v25;
  uint64_t result = outlined init with take of Toolbar.BarLocation((uint64_t)v93, v1 + 664);
  unint64_t v27 = 0;
  uint64_t v35 = (uint64_t (*)())MEMORY[0x1E4FBC870];
  while (1)
  {
    long long v28 = 0uLL;
    if (v27 == 12)
    {
      uint64_t v89 = 0;
      memset(v88, 0, sizeof(v88));
      long long v87 = 0uLL;
      goto LABEL_9;
    }
    if ((v27 & 0x8000000000000000) != 0) {
      break;
    }
    if (v27 >= *(void *)(v1 + 16)) {
      goto LABEL_16;
    }
    _sxRi_zRi0_zlySbIsegr__7SwiftUI7ToolbarO11BarLocationOtWOc(v1 + 32 + 56 * v27++, (uint64_t)&v87);
    uint64_t v29 = v87;
    if ((void)v87)
    {
      uint64_t v30 = *((void *)&v87 + 1);
      uint64_t v31 = swift_allocObject();
      *(void *)(v31 + 16) = v29;
      *(void *)(v31 + 24) = v30;
      outlined init with take of Toolbar.BarLocation((uint64_t)v88, (uint64_t)v79);
      *(void *)&long long v82 = partial apply for thunk for @escaping @callee_guaranteed () -> (@out Bool);
      *((void *)&v82 + 1) = v31;
      outlined init with take of Toolbar.BarLocation((uint64_t)v79, (uint64_t)v83);
      goto LABEL_10;
    }
    long long v28 = 0uLL;
LABEL_9:
    uint64_t v84 = 0;
    v83[1] = v28;
    v83[0] = v28;
    long long v82 = v28;
LABEL_10:
    outlined init with take of (@escaping @callee_guaranteed () -> (@unowned Bool), Toolbar.BarLocation)?((uint64_t)&v82, (uint64_t)v92);
    uint64_t v32 = (uint64_t (*)(uint64_t))v92[0];
    if (!v92[0])
    {
      swift_setDeallocating();
      type metadata accessor for ((), Toolbar.BarLocation)(0, &lazy cache variable for type metadata for ((), Toolbar.BarLocation), (void (*)(uint64_t))type metadata accessor for ());
      swift_arrayDestroy();
      swift_deallocClassInstance();
      return (uint64_t)v35;
    }
    uint64_t v33 = outlined init with take of Toolbar.BarLocation((uint64_t)v93, (uint64_t)&v87);
    if (v32(v33))
    {
      outlined init with copy of Toolbar.BarLocation((uint64_t)&v87, (uint64_t)v78);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v73 = v35;
      specialized _NativeSet.update(with:isUnique:)((uint64_t)v78, isUniquelyReferenced_nonNull_native, (uint64_t)&v82);
      uint64_t v35 = v73;
      swift_release();
      swift_bridgeObjectRelease();
      outlined destroy of PushTarget?((uint64_t)&v82, &lazy cache variable for type metadata for Toolbar.BarLocation?, (uint64_t)&type metadata for Toolbar.BarLocation);
      uint64_t result = outlined destroy of Toolbar.BarLocation((uint64_t)&v87);
    }
    else
    {
      outlined destroy of Toolbar.BarLocation((uint64_t)&v87);
      uint64_t result = swift_release();
    }
  }
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t outlined init with take of ToolbarPlacement.Role(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of Toolbar.BarLocation(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t outlined init with take of (@escaping @callee_guaranteed () -> (@unowned Bool), Toolbar.BarLocation)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for _ContiguousArrayStorage<((), Toolbar.BarLocation)>(0, &lazy cache variable for type metadata for ((), Toolbar.BarLocation)?, &lazy cache variable for type metadata for ((), Toolbar.BarLocation), (void (*)(uint64_t))type metadata accessor for (), MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for _ContiguousArrayStorage<((), Toolbar.BarLocation)>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ((), Toolbar.BarLocation)(255, a3, a4);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t _sxRi_zRi0_zlySbIsegr__7SwiftUI7ToolbarO11BarLocationOtWOc(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ((), Toolbar.BarLocation)(0, &lazy cache variable for type metadata for ((), Toolbar.BarLocation), (void (*)(uint64_t))type metadata accessor for ());
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ((), Toolbar.BarLocation)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out Bool)()
{
  (*(void (**)(uint64_t *__return_ptr))(v0 + 16))(&v2);
  return v2;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@unowned Bool)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result & 1;
  return result;
}

uint64_t outlined init with copy of UIKitToolbarStrategy(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for UIKitToolbarStrategy(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v5 = (_OWORD *)(a1 + 8);
  uint64_t v6 = (_OWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 96);
  id v8 = v4;
  if (v7)
  {
    if (*(unsigned char *)(a2 + 16) == 2)
    {
      *uint64_t v5 = *v6;
      *(_OWORD *)((char *)v5 + 9) = *(_OWORD *)((char *)v6 + 9);
    }
    else
    {
      swift_unknownObjectWeakCopyInit();
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    }
    swift_unknownObjectWeakCopyInit();
    swift_unknownObjectWeakCopyInit();
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    swift_unknownObjectWeakCopyInit();
    swift_unknownObjectWeakCopyInit();
    swift_unknownObjectWeakCopyInit();
    *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = v6[3];
    uint64_t v5[2] = v6[2];
    v5[3] = v9;
    long long v10 = v6[5];
    v5[4] = v6[4];
    _WORD v5[5] = v10;
    long long v11 = v6[1];
    *uint64_t v5 = *v6;
    v5[1] = v11;
  }
  return a1;
}

uint64_t outlined init with take of UIKitToolbarStrategy(uint64_t *a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithTake for UIKitToolbarStrategy(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2 + 1;
  *(void *)a1 = v5;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  if (a2[12])
  {
    if (*((unsigned char *)a2 + 16) == 2)
    {
      *uint64_t v6 = *v4;
      *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v4 + 9);
    }
    else
    {
      swift_unknownObjectWeakTakeInit();
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      *(void *)(a1 + 24) = a2[3];
      *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    }
    swift_unknownObjectWeakTakeInit();
    swift_unknownObjectWeakTakeInit();
    *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
    swift_unknownObjectWeakTakeInit();
    swift_unknownObjectWeakTakeInit();
    swift_unknownObjectWeakTakeInit();
    *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
    *(void *)(a1 + 96) = a2[12];
  }
  else
  {
    long long v7 = v4[3];
    v6[2] = v4[2];
    void v6[3] = v7;
    long long v8 = v4[5];
    v6[4] = v4[4];
    v6[5] = v8;
    long long v9 = v4[1];
    *uint64_t v6 = *v4;
    v6[1] = v9;
  }
  return a1;
}

uint64_t specialized _NativeSet.update(with:isUnique:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *v3;
  Hasher.init(_seed:)();
  Toolbar.BarLocation.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
    int v12 = 0;
    goto LABEL_43;
  }
  uint64_t v30 = a3;
  uint64_t v10 = ~v8;
  while (2)
  {
    outlined init with copy of Toolbar.BarLocation(*(void *)(v6 + 48) + 40 * v9, (uint64_t)v42);
    outlined init with copy of Toolbar.BarLocation((uint64_t)v42, (uint64_t)v37);
    outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v39);
    switch(v38)
    {
      case 0:
        if (*((void *)&v40 + 1)) {
          goto LABEL_35;
        }
        goto LABEL_41;
      case 1:
        if (*((void *)&v40 + 1) == 1) {
          goto LABEL_41;
        }
        goto LABEL_35;
      case 2:
        if (*((void *)&v40 + 1) == 2) {
          goto LABEL_41;
        }
        goto LABEL_35;
      case 3:
        if (*((void *)&v40 + 1) == 3) {
          goto LABEL_41;
        }
        goto LABEL_35;
      case 4:
        if (*((void *)&v40 + 1) == 4) {
          goto LABEL_41;
        }
        goto LABEL_35;
      case 5:
        if (*((void *)&v40 + 1) == 5) {
          goto LABEL_41;
        }
        goto LABEL_35;
      case 6:
        if (*((void *)&v40 + 1) == 6) {
          goto LABEL_41;
        }
        goto LABEL_35;
      case 7:
        if (*((void *)&v40 + 1) == 7) {
          goto LABEL_41;
        }
        goto LABEL_35;
      case 8:
        if (*((void *)&v40 + 1) != 8) {
          goto LABEL_35;
        }
        goto LABEL_41;
      case 9:
        if (*((void *)&v40 + 1) == 9) {
          goto LABEL_41;
        }
        goto LABEL_35;
      case 10:
        if (*((void *)&v40 + 1) == 10) {
          goto LABEL_41;
        }
        goto LABEL_35;
      case 11:
        if (*((void *)&v40 + 1) == 11) {
          goto LABEL_41;
        }
        goto LABEL_35;
      case 12:
        if (*((void *)&v40 + 1) == 12) {
          goto LABEL_41;
        }
        goto LABEL_35;
      case 13:
        if (*((void *)&v40 + 1) == 13) {
          goto LABEL_41;
        }
        goto LABEL_35;
      case 14:
        if (*((void *)&v40 + 1) == 14) {
          goto LABEL_41;
        }
        goto LABEL_35;
      default:
        outlined init with copy of Toolbar.BarLocation((uint64_t)v37, (uint64_t)v36);
        if (*((void *)&v40 + 1) < 0xFuLL)
        {
          outlined destroy of AnyHashable((uint64_t)v36);
LABEL_35:
          outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
          goto LABEL_36;
        }
        long long v33 = v39;
        long long v34 = v40;
        uint64_t v35 = v41;
        char v11 = MEMORY[0x18C1174E0](v36, &v33);
        outlined destroy of AnyHashable((uint64_t)&v33);
        outlined destroy of AnyHashable((uint64_t)v36);
        if ((v11 & 1) == 0)
        {
          outlined destroy of Toolbar.BarLocation((uint64_t)v37);
LABEL_36:
          outlined destroy of Toolbar.BarLocation((uint64_t)v42);
          unint64_t v9 = (v9 + 1) & v10;
          if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          {
            int v12 = 0;
            goto LABEL_42;
          }
          continue;
        }
LABEL_41:
        outlined destroy of Toolbar.BarLocation((uint64_t)v37);
        outlined destroy of Toolbar.BarLocation((uint64_t)v42);
        int v12 = 1;
LABEL_42:
        a3 = v30;
LABEL_43:
        uint64_t v13 = *(void *)(*v3 + 16);
        uint64_t v14 = v12 ^ 1u;
        uint64_t v15 = v13 + v14;
        if (__OFADD__(v13, v14))
        {
          __break(1u);
          goto LABEL_101;
        }
        uint64_t v16 = *(void *)(*v3 + 24);
        if (v16 >= v15 && (a2 & 1) != 0)
        {
          if (v12) {
            goto LABEL_99;
          }
          goto LABEL_47;
        }
        if (a2)
        {
          specialized _NativeSet.resize(capacity:)();
          goto LABEL_54;
        }
        if (v16 >= v15)
        {
          specialized _NativeSet.copy()();
          if (v12)
          {
LABEL_99:
            uint64_t v28 = *v3;
            outlined init with take of Toolbar.BarLocation(*(void *)(*v3 + 48) + 40 * v9, a3);
            return outlined init with take of Toolbar.BarLocation(a1, *(void *)(v28 + 48) + 40 * v9);
          }
LABEL_47:
          unint64_t v17 = v9 >> 6;
          uint64_t v18 = 1 << v9;
LABEL_96:
          uint64_t v23 = *v3;
          *(void *)(*v3 + 8 * v17 + 56) |= v18;
          uint64_t result = outlined init with take of Toolbar.BarLocation(a1, *(void *)(v23 + 48) + 40 * v9);
          uint64_t v25 = *(void *)(v23 + 16);
          BOOL v26 = __OFADD__(v25, 1);
          uint64_t v27 = v25 + 1;
          if (!v26)
          {
            *(void *)(v23 + 16) = v27;
            *(void *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            *(void *)(a3 + 16) = 0;
            *(_OWORD *)(a3 + 24) = xmmword_18838AA50;
            return result;
          }
LABEL_101:
          __break(1u);
          goto LABEL_102;
        }
        specialized _NativeSet.copyAndResize(capacity:)();
LABEL_54:
        uint64_t v19 = *v3;
        Hasher.init(_seed:)();
        Toolbar.BarLocation.hash(into:)();
        Swift::Int v20 = Hasher._finalize()();
        uint64_t v21 = -1 << *(unsigned char *)(v19 + 32);
        unint64_t v9 = v20 & ~v21;
        unint64_t v17 = v9 >> 6;
        uint64_t v18 = 1 << v9;
        if (((1 << v9) & *(void *)(v19 + 56 + 8 * (v9 >> 6))) == 0)
        {
          if (v12) {
            goto LABEL_102;
          }
          goto LABEL_96;
        }
        char v32 = v12;
        uint64_t v22 = ~v21;
        while (2)
        {
          outlined init with copy of Toolbar.BarLocation(*(void *)(v19 + 48) + 40 * v9, (uint64_t)v42);
          outlined init with copy of Toolbar.BarLocation((uint64_t)v42, (uint64_t)v37);
          outlined init with copy of Toolbar.BarLocation(a1, (uint64_t)&v39);
          switch(v38)
          {
            case 0:
              if (*((void *)&v40 + 1)) {
                goto LABEL_88;
              }
              goto LABEL_98;
            case 1:
              if (*((void *)&v40 + 1) == 1) {
                goto LABEL_98;
              }
              goto LABEL_88;
            case 2:
              if (*((void *)&v40 + 1) == 2) {
                goto LABEL_98;
              }
              goto LABEL_88;
            case 3:
              if (*((void *)&v40 + 1) == 3) {
                goto LABEL_98;
              }
              goto LABEL_88;
            case 4:
              if (*((void *)&v40 + 1) == 4) {
                goto LABEL_98;
              }
              goto LABEL_88;
            case 5:
              if (*((void *)&v40 + 1) == 5) {
                goto LABEL_98;
              }
              goto LABEL_88;
            case 6:
              if (*((void *)&v40 + 1) == 6) {
                goto LABEL_98;
              }
              goto LABEL_88;
            case 7:
              if (*((void *)&v40 + 1) == 7) {
                goto LABEL_98;
              }
              goto LABEL_88;
            case 8:
              if (*((void *)&v40 + 1) == 8) {
                goto LABEL_98;
              }
              goto LABEL_88;
            case 9:
              if (*((void *)&v40 + 1) == 9) {
                goto LABEL_98;
              }
              goto LABEL_88;
            case 10:
              if (*((void *)&v40 + 1) != 10) {
                goto LABEL_88;
              }
              goto LABEL_98;
            case 11:
              if (*((void *)&v40 + 1) == 11) {
                goto LABEL_98;
              }
              goto LABEL_88;
            case 12:
              if (*((void *)&v40 + 1) == 12) {
                goto LABEL_98;
              }
              goto LABEL_88;
            case 13:
              if (*((void *)&v40 + 1) == 13) {
                goto LABEL_98;
              }
              goto LABEL_88;
            case 14:
              if (*((void *)&v40 + 1) == 14) {
                goto LABEL_98;
              }
              goto LABEL_88;
            default:
              outlined init with copy of Toolbar.BarLocation((uint64_t)v37, (uint64_t)v36);
              if (*((void *)&v40 + 1) < 0xFuLL)
              {
                outlined destroy of AnyHashable((uint64_t)v36);
LABEL_88:
                outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v37, (unint64_t *)&lazy cache variable for type metadata for (Toolbar.BarLocation, Toolbar.BarLocation));
LABEL_89:
                outlined destroy of Toolbar.BarLocation((uint64_t)v42);
                unint64_t v9 = (v9 + 1) & v22;
                unint64_t v17 = v9 >> 6;
                uint64_t v18 = 1 << v9;
                if ((*(void *)(v19 + 56 + 8 * (v9 >> 6)) & (1 << v9)) == 0)
                {
                  if (v32) {
                    goto LABEL_102;
                  }
                  goto LABEL_96;
                }
                continue;
              }
              long long v33 = v39;
              long long v34 = v40;
              uint64_t v35 = v41;
              char v29 = MEMORY[0x18C1174E0](v36, &v33);
              outlined destroy of AnyHashable((uint64_t)&v33);
              outlined destroy of AnyHashable((uint64_t)v36);
              if ((v29 & 1) == 0)
              {
                outlined destroy of Toolbar.BarLocation((uint64_t)v37);
                goto LABEL_89;
              }
LABEL_98:
              outlined destroy of Toolbar.BarLocation((uint64_t)v37);
              outlined destroy of Toolbar.BarLocation((uint64_t)v42);
              if (v32) {
                goto LABEL_99;
              }
LABEL_102:
              uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
          }
        }
    }
  }
}

{
  uint64_t *v3;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  long long v34;
  long long v35;
  uint64_t v36;
  unsigned char v37[40];
  unsigned char v38[24];
  uint64_t v39;
  long long v40;
  long long v41;
  uint64_t v42;
  unsigned char v43[48];

  uint64_t v6 = *v3;
  Hasher.init(_seed:)();
  ToolbarPlacement.Role.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
    int v12 = 0;
    goto LABEL_27;
  }
  uint64_t v30 = a3;
  uint64_t v10 = ~v8;
  while (2)
  {
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v6 + 48) + 40 * v9, (uint64_t)v43);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v43, (uint64_t)v38);
    outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v40);
    switch(v39)
    {
      case 0:
        if (*((void *)&v41 + 1)) {
          goto LABEL_19;
        }
        goto LABEL_25;
      case 1:
        if (*((void *)&v41 + 1) == 1) {
          goto LABEL_25;
        }
        goto LABEL_19;
      case 2:
        if (*((void *)&v41 + 1) == 2) {
          goto LABEL_25;
        }
        goto LABEL_19;
      case 3:
        if (*((void *)&v41 + 1) == 3) {
          goto LABEL_25;
        }
        goto LABEL_19;
      case 4:
        if (*((void *)&v41 + 1) == 4) {
          goto LABEL_25;
        }
        goto LABEL_19;
      case 5:
        if (*((void *)&v41 + 1) == 5) {
          goto LABEL_25;
        }
        goto LABEL_19;
      case 6:
        if (*((void *)&v41 + 1) != 6) {
          goto LABEL_19;
        }
        goto LABEL_25;
      default:
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v38, (uint64_t)v37);
        if (*((void *)&v41 + 1) < 7uLL)
        {
          outlined destroy of AnyHashable((uint64_t)v37);
LABEL_19:
          outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v38, (unint64_t *)&lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role));
          goto LABEL_20;
        }
        long long v34 = v40;
        uint64_t v35 = v41;
        unint64_t v36 = v42;
        char v11 = MEMORY[0x18C1174E0](v37, &v34);
        outlined destroy of AnyHashable((uint64_t)&v34);
        outlined destroy of AnyHashable((uint64_t)v37);
        if ((v11 & 1) == 0)
        {
          outlined destroy of ToolbarPlacement.Role((uint64_t)v38);
LABEL_20:
          outlined destroy of ToolbarPlacement.Role((uint64_t)v43);
          unint64_t v9 = (v9 + 1) & v10;
          if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
          {
            int v12 = 0;
            goto LABEL_26;
          }
          continue;
        }
LABEL_25:
        outlined destroy of ToolbarPlacement.Role((uint64_t)v38);
        outlined destroy of ToolbarPlacement.Role((uint64_t)v43);
        int v12 = 1;
LABEL_26:
        a3 = v30;
LABEL_27:
        uint64_t v13 = *(void *)(*v3 + 16);
        uint64_t v14 = v12 ^ 1u;
        uint64_t v15 = v13 + v14;
        if (__OFADD__(v13, v14))
        {
          __break(1u);
          goto LABEL_69;
        }
        uint64_t v16 = *(void *)(*v3 + 24);
        if (v16 >= v15 && (a2 & 1) != 0)
        {
          if (v12) {
            goto LABEL_67;
          }
          goto LABEL_31;
        }
        if (a2)
        {
          specialized _NativeSet.resize(capacity:)();
          goto LABEL_38;
        }
        if (v16 >= v15)
        {
          specialized _NativeSet.copy()();
          if (v12)
          {
LABEL_67:
            char v29 = *v3;
            outlined init with take of ToolbarPlacement.Role(*(void *)(*v3 + 48) + 40 * v9, a3);
            return outlined init with take of ToolbarPlacement.Role(a1, *(void *)(v29 + 48) + 40 * v9);
          }
LABEL_31:
          unint64_t v17 = v9 >> 6;
          uint64_t v18 = 1 << v9;
LABEL_64:
          uint64_t v24 = *v3;
          *(void *)(*v3 + 8 * v17 + 56) |= v18;
          uint64_t result = outlined init with take of ToolbarPlacement.Role(a1, *(void *)(v24 + 48) + 40 * v9);
          BOOL v26 = *(void *)(v24 + 16);
          uint64_t v27 = __OFADD__(v26, 1);
          uint64_t v28 = v26 + 1;
          if (!v27)
          {
            *(void *)(v24 + 16) = v28;
            *(void *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            *(void *)(a3 + 16) = 0;
            *(_OWORD *)(a3 + 24) = xmmword_188382690;
            return result;
          }
LABEL_69:
          __break(1u);
          goto LABEL_70;
        }
        specialized _NativeSet.copyAndResize(capacity:)();
LABEL_38:
        uint64_t v19 = *v3;
        Hasher.init(_seed:)();
        ToolbarPlacement.Role.hash(into:)();
        Swift::Int v20 = Hasher._finalize()();
        uint64_t v21 = -1 << *(unsigned char *)(v19 + 32);
        unint64_t v9 = v20 & ~v21;
        unint64_t v17 = v9 >> 6;
        uint64_t v18 = 1 << v9;
        if (((1 << v9) & *(void *)(v19 + 56 + 8 * (v9 >> 6))) == 0)
        {
          if (v12) {
            goto LABEL_70;
          }
          goto LABEL_64;
        }
        long long v33 = v12;
        uint64_t v31 = a3;
        uint64_t v22 = ~v21;
        while (2)
        {
          outlined init with copy of ToolbarPlacement.Role(*(void *)(v19 + 48) + 40 * v9, (uint64_t)v43);
          outlined init with copy of ToolbarPlacement.Role((uint64_t)v43, (uint64_t)v38);
          outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)&v40);
          switch(v39)
          {
            case 0:
              if (*((void *)&v41 + 1)) {
                goto LABEL_56;
              }
              goto LABEL_66;
            case 1:
              if (*((void *)&v41 + 1) == 1) {
                goto LABEL_66;
              }
              goto LABEL_56;
            case 2:
              if (*((void *)&v41 + 1) == 2) {
                goto LABEL_66;
              }
              goto LABEL_56;
            case 3:
              if (*((void *)&v41 + 1) == 3) {
                goto LABEL_66;
              }
              goto LABEL_56;
            case 4:
              if (*((void *)&v41 + 1) == 4) {
                goto LABEL_66;
              }
              goto LABEL_56;
            case 5:
              if (*((void *)&v41 + 1) == 5) {
                goto LABEL_66;
              }
              goto LABEL_56;
            case 6:
              if (*((void *)&v41 + 1) != 6) {
                goto LABEL_56;
              }
              goto LABEL_66;
            default:
              outlined init with copy of ToolbarPlacement.Role((uint64_t)v38, (uint64_t)v37);
              if (*((void *)&v41 + 1) < 7uLL)
              {
                outlined destroy of AnyHashable((uint64_t)v37);
LABEL_56:
                outlined destroy of (Toolbar.BarLocation, Toolbar.BarLocation)((uint64_t)v38, (unint64_t *)&lazy cache variable for type metadata for (ToolbarPlacement.Role, ToolbarPlacement.Role));
LABEL_57:
                outlined destroy of ToolbarPlacement.Role((uint64_t)v43);
                unint64_t v9 = (v9 + 1) & v22;
                unint64_t v17 = v9 >> 6;
                uint64_t v18 = 1 << v9;
                if ((*(void *)(v19 + 56 + 8 * (v9 >> 6)) & (1 << v9)) == 0)
                {
                  a3 = v31;
                  if (v33) {
                    goto LABEL_70;
                  }
                  goto LABEL_64;
                }
                continue;
              }
              long long v34 = v40;
              uint64_t v35 = v41;
              unint64_t v36 = v42;
              uint64_t v23 = MEMORY[0x18C1174E0](v37, &v34);
              outlined destroy of AnyHashable((uint64_t)&v34);
              outlined destroy of AnyHashable((uint64_t)v37);
              if ((v23 & 1) == 0)
              {
                outlined destroy of ToolbarPlacement.Role((uint64_t)v38);
                goto LABEL_57;
              }
LABEL_66:
              outlined destroy of ToolbarPlacement.Role((uint64_t)v38);
              outlined destroy of ToolbarPlacement.Role((uint64_t)v43);
              a3 = v31;
              if (v33) {
                goto LABEL_67;
              }
LABEL_70:
              uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
              __break(1u);
              return result;
          }
        }
    }
  }
}

{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::Int v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned char v33[72];

  uint64_t v4 = v3;
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  ToolbarItemPlacement.Role.hash(into:)();
  unint64_t v9 = Hasher._finalize()();
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  char v11 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11))
  {
    int v12 = ~v10;
    do
    {
      outlined init with copy of ToolbarItemPlacement.Role(*(void *)(v8 + 48) + 48 * v11, (uint64_t)v33);
      uint64_t v13 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v33, a1);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v33);
      if (v13) {
        break;
      }
      char v11 = (v11 + 1) & v12;
    }
    while (((*(void *)(v8 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  }
  else
  {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(void *)(*v3 + 16);
  uint64_t v15 = (v13 & 1) == 0;
  uint64_t v16 = v14 + v15;
  if (__OFADD__(v14, v15))
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  unint64_t v17 = *(void *)(*v3 + 24);
  char v32 = a3;
  if (v17 < v16 || (a2 & 1) == 0)
  {
    if (a2)
    {
      specialized _NativeSet.resize(capacity:)();
    }
    else
    {
      if (v17 >= v16)
      {
        specialized _NativeSet.copy()();
        if (v13) {
          goto LABEL_11;
        }
        goto LABEL_16;
      }
      specialized _NativeSet.copyAndResize(capacity:)();
    }
    uint64_t v21 = *v3;
    Hasher.init(_seed:)();
    ToolbarItemPlacement.Role.hash(into:)();
    uint64_t v22 = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v21 + 32);
    char v11 = v22 & ~v23;
    uint64_t v19 = v11 >> 6;
    Swift::Int v20 = 1 << v11;
    if (((1 << v11) & *(void *)(v21 + 56 + 8 * (v11 >> 6))) != 0)
    {
      uint64_t v24 = ~v23;
      while (1)
      {
        uint64_t v18 = 48 * v11;
        outlined init with copy of ToolbarItemPlacement.Role(*(void *)(v21 + 48) + 48 * v11, (uint64_t)v33);
        uint64_t v25 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v33, a1);
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)v33);
        if (v25) {
          break;
        }
        char v11 = (v11 + 1) & v24;
        uint64_t v19 = v11 >> 6;
        Swift::Int v20 = 1 << v11;
        if ((*(void *)(v21 + 56 + 8 * (v11 >> 6)) & (1 << v11)) == 0) {
          goto LABEL_22;
        }
      }
      if (v13) {
        goto LABEL_26;
      }
    }
    else
    {
LABEL_22:
      if ((v13 & 1) == 0)
      {
LABEL_23:
        BOOL v26 = *v4;
        *(void *)(*v4 + 8 * v19 + 56) |= v20;
        uint64_t result = outlined init with take of ToolbarItemPlacement.Role(a1, *(void *)(v26 + 48) + 48 * v11);
        uint64_t v28 = *(void *)(v26 + 16);
        char v29 = __OFADD__(v28, 1);
        uint64_t v30 = v28 + 1;
        if (!v29)
        {
          *(void *)(v26 + 16) = v30;
          *(void *)(v32 + 32) = 0;
          *(_OWORD *)char v32 = 0u;
          *(_OWORD *)(v32 + 16) = 0u;
          *(unsigned char *)(v32 + 40) = -1;
          return result;
        }
        goto LABEL_29;
      }
    }
LABEL_30:
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  if ((v13 & 1) == 0)
  {
LABEL_16:
    uint64_t v19 = v11 >> 6;
    Swift::Int v20 = 1 << v11;
    goto LABEL_23;
  }
LABEL_11:
  uint64_t v18 = 48 * v11;
LABEL_26:
  uint64_t v31 = *v4;
  outlined init with take of ToolbarItemPlacement.Role(*(void *)(*v4 + 48) + v18, v32);
  return outlined init with take of ToolbarItemPlacement.Role(a1, *(void *)(v31 + 48) + v18);
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<Toolbar.BarLocation>, (void (*)(void))lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_53:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_54:
      __break(1u);
      goto LABEL_55;
    }
    if (v16 >= v9) {
      goto LABEL_51;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_51;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_51;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    outlined init with copy of Toolbar.BarLocation(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v32);
    Hasher.init(_seed:)();
    outlined init with copy of Toolbar.BarLocation((uint64_t)v32, (uint64_t)&v29);
    switch(*((void *)&v30 + 1))
    {
      case 0:
        Swift::UInt v19 = 0;
        goto LABEL_41;
      case 1:
        Swift::UInt v19 = 1;
        goto LABEL_41;
      case 2:
        Swift::UInt v19 = 2;
        goto LABEL_41;
      case 3:
        Swift::UInt v19 = 3;
        goto LABEL_41;
      case 4:
        Swift::UInt v19 = 4;
        goto LABEL_41;
      case 5:
        Swift::UInt v19 = 5;
        goto LABEL_41;
      case 6:
        Swift::UInt v19 = 6;
        goto LABEL_41;
      case 7:
        Swift::UInt v19 = 7;
        goto LABEL_41;
      case 8:
        Swift::UInt v19 = 8;
        goto LABEL_41;
      case 9:
        Swift::UInt v19 = 9;
        goto LABEL_41;
      case 0xALL:
        Swift::UInt v19 = 10;
        goto LABEL_41;
      case 0xBLL:
        Swift::UInt v19 = 11;
        goto LABEL_41;
      case 0xCLL:
        Swift::UInt v19 = 12;
        goto LABEL_41;
      case 0xDLL:
        Swift::UInt v19 = 13;
        goto LABEL_41;
      case 0xELL:
        Swift::UInt v19 = 15;
LABEL_41:
        Hasher._combine(_:)(v19);
        break;
      default:
        v27[0] = v29;
        v27[1] = v30;
        uint64_t v28 = v31;
        Hasher._combine(_:)(0xEuLL);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v27);
        break;
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_54;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t result = outlined init with take of Toolbar.BarLocation((uint64_t)v32, *(void *)(v4 + 48) + 40 * v13);
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_51:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_53;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_51;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_55:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::UInt v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;
  long long v29;
  long long v30;
  uint64_t v31;
  unsigned char v32[48];

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, (unint64_t *)&lazy cache variable for type metadata for _SetStorage<ToolbarPlacement.Role>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_45:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v16 >= v9) {
      goto LABEL_43;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_43;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_43;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v32);
    Hasher.init(_seed:)();
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v32, (uint64_t)&v29);
    switch(*((void *)&v30 + 1))
    {
      case 0:
        Swift::UInt v19 = 0;
        goto LABEL_33;
      case 1:
        Swift::UInt v19 = 1;
        goto LABEL_33;
      case 2:
        Swift::UInt v19 = 2;
        goto LABEL_33;
      case 3:
        Swift::UInt v19 = 3;
        goto LABEL_33;
      case 4:
        Swift::UInt v19 = 4;
        goto LABEL_33;
      case 5:
        Swift::UInt v19 = 5;
        goto LABEL_33;
      case 6:
        Swift::UInt v19 = 7;
LABEL_33:
        Hasher._combine(_:)(v19);
        break;
      default:
        v27[0] = v29;
        v27[1] = v30;
        uint64_t v28 = v31;
        Hasher._combine(_:)(6uLL);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v27);
        break;
    }
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_46;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)(v10 + 8 * v22);
      }
      while (v26 == -1);
      unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t result = outlined init with take of ToolbarPlacement.Role((uint64_t)v32, *(void *)(v4 + 48) + 40 * v13);
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_43:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_45;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_43;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_47:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  int64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<String>(0, &lazy cache variable for type metadata for _SetStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB1B0], MEMORY[0x1E4FBB9A8]);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  long long v29 = (unint64_t)(v5 + 63) >> 6;
  int64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  char v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      char v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        char v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    Swift::UInt v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    unint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    char v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      int64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      int64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    *unint64_t v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    char v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    char v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ToolbarDefaultItemKind.Kind>, (void (*)(void))lazy protocol witness table accessor for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  else {
    unint64_t v8 = -1;
  }
  int64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  char v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    int64_t v18 = *(unsigned __int8 *)(*(void *)(v2 + 48) + v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      int64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v22 = 0;
      char v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        BOOL v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      int64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(unsigned char *)(*(void *)(v4 + 48) + v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26[8];
  Swift::UInt v27;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<HashableWeakBox<Swift.AnyObject>>();
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  else {
    unint64_t v8 = -1;
  }
  int64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  char v11 = result + 56;
  int64_t v12 = MEMORY[0x1E4FBC838] + 8;
  while (1)
  {
    if (v9)
    {
      unint64_t v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v15 = v14 | (v5 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v10) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v5;
    if (!v17)
    {
      uint64_t v5 = v16 + 1;
      if (v16 + 1 >= v10) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v5);
      if (!v17)
      {
        uint64_t v5 = v16 + 2;
        if (v16 + 2 >= v10) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v5);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v9 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v5 << 6);
LABEL_24:
    outlined init with copy of HashableWeakBox<Swift.AnyObject>(*(void *)(v2 + 48) + 16 * v15, (uint64_t)v26, &lazy cache variable for type metadata for HashableWeakBox<Swift.AnyObject>, v12, MEMORY[0x1E4F3FB58]);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v27);
    uint64_t result = Hasher._finalize()();
    Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v22 = 0;
      char v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        BOOL v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v13 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t result = outlined init with take of HashableWeakBox<Swift.AnyObject>((uint64_t)v26, *(void *)(v4 + 48) + 16 * v13);
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    uint64_t v5 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v5 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v5);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<ObjectIdentifier>(0, &lazy cache variable for type metadata for _SetStorage<ObjectIdentifier>, MEMORY[0x1E4FBB058], MEMORY[0x1E4FBB060], MEMORY[0x1E4FBB9A8]);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  else {
    unint64_t v8 = -1;
  }
  int64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  char v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_23;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    if (v15 >= v10) {
      goto LABEL_32;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_32;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_32;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16)
        {
          uint64_t v5 = v15 + 3;
          if (v15 + 3 >= v10)
          {
LABEL_32:
            uint64_t result = swift_release();
            uint64_t v1 = v26;
            goto LABEL_34;
          }
          int64_t v16 = *(void *)(v6 + 8 * v5);
          unint64_t v17 = v15 + 3;
          if (!v16) {
            break;
          }
        }
      }
    }
LABEL_22:
    int64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_23:
    int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      int64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v22 = 0;
      char v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_35;
        }
        unint64_t v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        BOOL v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      int64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_32;
    }
    int64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_22;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<NavigationStackHostingController<AnyView>>();
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::UInt v19 = *(void *)(v4 + 40);
    uint64_t v20 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    unint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    char v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v24 = 0;
      BOOL v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          char v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for ModifiedContent<AnyView, _SafeAreaInsetsModifier>(0, &lazy cache variable for type metadata for _SetStorage<UInt32>, MEMORY[0x1E4FBC4C0], MEMORY[0x1E4FBC4D0], MEMORY[0x1E4FBB9A8]);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_36:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  else {
    unint64_t v8 = -1;
  }
  int64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  char v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_25;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    if (v15 >= v10) {
      goto LABEL_34;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_34;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_34;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16)
        {
          uint64_t v5 = v15 + 3;
          if (v15 + 3 >= v10) {
            goto LABEL_34;
          }
          int64_t v16 = *(void *)(v6 + 8 * v5);
          if (!v16)
          {
            uint64_t v5 = v15 + 4;
            if (v15 + 4 >= v10)
            {
LABEL_34:
              uint64_t result = swift_release();
              uint64_t v1 = v26;
              goto LABEL_36;
            }
            int64_t v16 = *(void *)(v6 + 8 * v5);
            unint64_t v17 = v15 + 4;
            if (!v16) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    int64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_25:
    int64_t v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
    uint64_t result = MEMORY[0x18C118330](*(void *)(v4 + 40), v18, 4);
    Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      int64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v22 = 0;
      char v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_37;
        }
        unint64_t v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        BOOL v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      int64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_34;
    }
    int64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_24;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  _OWORD *v14;
  long long v15;
  long long v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _OWORD v29[2];
  Swift::UInt v30[2];

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<AccessibilityRelationshipScope.Key>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityRelationshipScope.Key and conformance AccessibilityRelationshipScope.Key);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v18 = v17 | (v12 << 6);
      goto LABEL_24;
    }
    Swift::UInt v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v9) {
      goto LABEL_33;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v9) {
        goto LABEL_33;
      }
      uint64_t v20 = *(void *)(v6 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v9) {
          goto LABEL_33;
        }
        uint64_t v20 = *(void *)(v6 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v20 - 1) & v20;
    int64_t v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_24:
    outlined init with copy of AccessibilityRelationshipScope.Key(*(void *)(v2 + 48) + 48 * v18, (uint64_t)v29);
    Hasher.init(_seed:)();
    AnyHashable.hash(into:)();
    Hasher._combine(_:)(v30[1]);
    uint64_t result = Hasher._finalize()();
    unint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    char v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    unint64_t v14 = (_OWORD *)(*(void *)(v4 + 48) + 48 * v13);
    unint64_t v15 = v29[0];
    int64_t v16 = *(_OWORD *)v30;
    v14[1] = v29[1];
    _OWORD v14[2] = v16;
    *unint64_t v14 = v15;
    ++*(void *)(v4 + 16);
  }
  unint64_t v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  Swift::UInt *v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt *v18;
  Swift::UInt v19;
  Swift::UInt v20;
  Swift::Int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  int64_t v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<EventID>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_35;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  else {
    unint64_t v8 = -1;
  }
  int64_t v9 = v8 & *(void *)(v2 + 56);
  long long v30 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_36;
    }
    if (v15 >= v30) {
      break;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v30) {
        break;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v30) {
          break;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16)
        {
          unint64_t v17 = v15 + 3;
          if (v17 >= v30) {
            break;
          }
          int64_t v16 = *(void *)(v6 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              uint64_t v5 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_37;
              }
              if (v5 >= v30) {
                goto LABEL_33;
              }
              int64_t v16 = *(void *)(v6 + 8 * v5);
              ++v17;
              if (v16) {
                goto LABEL_23;
              }
            }
          }
          uint64_t v5 = v17;
        }
      }
    }
LABEL_23:
    int64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    int64_t v18 = (Swift::UInt *)(*(void *)(v2 + 48) + 16 * v14);
    Swift::UInt v19 = *v18;
    uint64_t v20 = v18[1];
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v19);
    Hasher._combine(_:)(v20);
    unint64_t v21 = Hasher._finalize()();
    unint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    char v23 = v21 & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      char v11 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    BOOL v25 = 0;
    uint64_t v26 = (unint64_t)(63 - v22) >> 6;
    do
    {
      if (++v24 == v26 && (v25 & 1) != 0)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        JUMPOUT(0x18822F2E8);
      }
      uint64_t v27 = v24 == v26;
      if (v24 == v26) {
        unint64_t v24 = 0;
      }
      v25 |= v27;
      uint64_t v28 = *(void *)(v10 + 8 * v24);
    }
    while (v28 == -1);
    char v11 = __clz(__rbit64(~v28)) + (v24 << 6);
LABEL_7:
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    int64_t v12 = (Swift::UInt *)(*(void *)(v4 + 48) + 16 * v11);
    *int64_t v12 = v19;
    v12[1] = v20;
    ++*(void *)(v4 + 16);
  }
LABEL_33:
  uint64_t result = swift_release();
  uint64_t v1 = v0;
LABEL_35:
  *uint64_t v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UTType();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  type metadata accessor for _SetStorage<UTType>();
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  long long v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    char v11 = ~(-1 << v9);
  }
  else {
    char v11 = -1;
  }
  int64_t v12 = v11 & v10;
  unint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  long long v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      int64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      Swift::UInt v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    uint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v12 = (v21 - 1) & v21;
    Swift::UInt v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    char v23 = v6;
    unint64_t v24 = *(void *)(v6 + 48);
    BOOL v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type UTType and conformance UTType, MEMORY[0x1E4FBCEA8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      long long v29 = 0;
      long long v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0;
        }
        v29 |= v31;
        char v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  unint64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int64_t v32;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CommandGroupPlacementBox(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  type metadata accessor for _SetStorage<CommandGroupPlacementBox>();
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  long long v30 = v0;
  uint64_t v31 = v6 + 56;
  if (v9 < 64) {
    char v11 = ~(-1 << v9);
  }
  else {
    char v11 = -1;
  }
  int64_t v12 = v11 & v10;
  char v32 = (unint64_t)(v9 + 63) >> 6;
  unint64_t v13 = v7 + 56;
  uint64_t result = swift_retain();
  unint64_t v15 = 0;
  while (1)
  {
    if (v12)
    {
      unint64_t v17 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      int64_t v18 = v17 | (v15 << 6);
      goto LABEL_24;
    }
    Swift::UInt v19 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v32) {
      goto LABEL_33;
    }
    uint64_t v20 = *(void *)(v31 + 8 * v19);
    ++v15;
    if (!v20)
    {
      unint64_t v15 = v19 + 1;
      if (v19 + 1 >= v32) {
        goto LABEL_33;
      }
      uint64_t v20 = *(void *)(v31 + 8 * v15);
      if (!v20)
      {
        unint64_t v15 = v19 + 2;
        if (v19 + 2 >= v32) {
          goto LABEL_33;
        }
        uint64_t v20 = *(void *)(v31 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v12 = (v20 - 1) & v20;
    int64_t v18 = __clz(__rbit64(v20)) + (v15 << 6);
LABEL_24:
    unint64_t v22 = *(void *)(v3 + 72);
    outlined init with copy of CommandGroupPlacementBox(*(void *)(v6 + 48) + v22 * v18, (uint64_t)v5);
    Hasher.init(_seed:)();
    type metadata accessor for CommandGroupPlacement(0);
    UUID.hash(into:)();
    uint64_t result = Hasher._finalize()();
    char v23 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v24 = result & ~v23;
    BOOL v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6))) != 0)
    {
      int64_t v16 = __clz(__rbit64((-1 << v24) & ~*(void *)(v13 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v28 = v25 == v27;
        if (v25 == v27) {
          BOOL v25 = 0;
        }
        v26 |= v28;
        long long v29 = *(void *)(v13 + 8 * v25);
      }
      while (v29 == -1);
      int64_t v16 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    uint64_t result = outlined init with take of CommandGroupPlacementBox((uint64_t)v5, *(void *)(v8 + 48) + v16 * v22);
    ++*(void *)(v8 + 16);
  }
  unint64_t v21 = v19 + 3;
  if (v21 >= v32)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v30;
    goto LABEL_35;
  }
  uint64_t v20 = *(void *)(v31 + 8 * v21);
  if (v20)
  {
    unint64_t v15 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    unint64_t v15 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v15 >= v32) {
      goto LABEL_33;
    }
    uint64_t v20 = *(void *)(v31 + 8 * v15);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<CommandFlag>, (void (*)(void))lazy protocol witness table accessor for type CommandFlag and conformance CommandFlag);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  else {
    unint64_t v8 = -1;
  }
  int64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  char v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v18);
    uint64_t result = Hasher._finalize()();
    Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      int64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v22 = 0;
      char v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        BOOL v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      int64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  type metadata accessor for _SetStorage<URL>();
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  long long v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    char v11 = ~(-1 << v9);
  }
  else {
    char v11 = -1;
  }
  int64_t v12 = v11 & v10;
  unint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  long long v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      int64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      Swift::UInt v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    uint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v12 = (v21 - 1) & v21;
    Swift::UInt v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    char v23 = v6;
    unint64_t v24 = *(void *)(v6 + 48);
    BOOL v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type URL and conformance URL, MEMORY[0x1E4F276F0]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      long long v29 = 0;
      long long v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0;
        }
        v29 |= v31;
        char v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  unint64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<String>(0, &lazy cache variable for type metadata for _SetStorage<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB560], MEMORY[0x1E4FBB9A8]);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  else {
    unint64_t v8 = -1;
  }
  int64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  char v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      int64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v22 = 0;
      char v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        BOOL v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      int64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for IndexPath();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  type metadata accessor for _SetStorage<IndexPath>();
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  long long v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    char v11 = ~(-1 << v9);
  }
  else {
    char v11 = -1;
  }
  int64_t v12 = v11 & v10;
  unint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  long long v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      int64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      Swift::UInt v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    uint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v12 = (v21 - 1) & v21;
    Swift::UInt v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    char v23 = v6;
    unint64_t v24 = *(void *)(v6 + 48);
    BOOL v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      long long v29 = 0;
      long long v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0;
        }
        v29 |= v31;
        char v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  unint64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<CGFloat>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  else {
    unint64_t v8 = -1;
  }
  int64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  char v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    int64_t v18 = *(void *)(*(void *)(v2 + 48) + 8 * v14);
    uint64_t result = static Hasher._hash(seed:_:)();
    Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      int64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v22 = 0;
      char v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        BOOL v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      int64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(void *)(*(void *)(v4 + 48) + 8 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t *v26;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<AGAttribute>();
  uint64_t result = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = result;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v26 = v1;
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  else {
    unint64_t v8 = -1;
  }
  int64_t v9 = v8 & *(void *)(v2 + 56);
  uint64_t v10 = (unint64_t)(v7 + 63) >> 6;
  char v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v15 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v15);
    ++v5;
    if (!v16)
    {
      uint64_t v5 = v15 + 1;
      if (v15 + 1 >= v10) {
        goto LABEL_33;
      }
      int64_t v16 = *(void *)(v6 + 8 * v5);
      if (!v16)
      {
        uint64_t v5 = v15 + 2;
        if (v15 + 2 >= v10) {
          goto LABEL_33;
        }
        int64_t v16 = *(void *)(v6 + 8 * v5);
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
LABEL_24:
    int64_t v18 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v14);
    uint64_t result = MEMORY[0x18C118330](*(void *)(v4 + 40), v18, 4);
    Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6))) != 0)
    {
      int64_t v12 = __clz(__rbit64((-1 << v20) & ~*(void *)(v11 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v22 = 0;
      char v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        BOOL v25 = *(void *)(v11 + 8 * v21);
      }
      while (v25 == -1);
      int64_t v12 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v11 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    *(_DWORD *)(*(void *)(v4 + 48) + 4 * v12) = v18;
    ++*(void *)(v4 + 16);
  }
  unint64_t v17 = v15 + 3;
  if (v17 >= v10)
  {
LABEL_33:
    uint64_t result = swift_release();
    uint64_t v1 = v26;
    goto LABEL_35;
  }
  int64_t v16 = *(void *)(v6 + 8 * v17);
  if (v16)
  {
    uint64_t v5 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_33;
    }
    int64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  long long v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  Swift::Int v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  int64_t v34;
  long long v35;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ArchivedViewState.ID>, (void (*)(void))lazy protocol witness table accessor for type ArchivedViewState.ID and conformance ArchivedViewState.ID);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v5 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
    goto LABEL_35;
  }
  uint64_t v6 = 0;
  long long v33 = v2 + 56;
  uint64_t v7 = 1 << *(unsigned char *)(v2 + 32);
  if (v7 < 64) {
    unint64_t v8 = ~(-1 << v7);
  }
  else {
    unint64_t v8 = -1;
  }
  int64_t v9 = v8 & *(void *)(v2 + 56);
  long long v34 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v6 << 6);
      goto LABEL_24;
    }
    unint64_t v15 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      goto LABEL_36;
    }
    if (v15 >= v34) {
      break;
    }
    int64_t v16 = *(void *)(v33 + 8 * v15);
    ++v6;
    if (!v16)
    {
      uint64_t v6 = v15 + 1;
      if (v15 + 1 >= v34) {
        break;
      }
      int64_t v16 = *(void *)(v33 + 8 * v6);
      if (!v16)
      {
        uint64_t v6 = v15 + 2;
        if (v15 + 2 >= v34) {
          break;
        }
        int64_t v16 = *(void *)(v33 + 8 * v6);
        if (!v16)
        {
          unint64_t v17 = v15 + 3;
          if (v17 >= v34) {
            break;
          }
          int64_t v16 = *(void *)(v33 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              uint64_t v6 = v17 + 1;
              if (__OFADD__(v17, 1)) {
                goto LABEL_37;
              }
              if (v6 >= v34) {
                goto LABEL_33;
              }
              int64_t v16 = *(void *)(v33 + 8 * v6);
              ++v17;
              if (v16) {
                goto LABEL_23;
              }
            }
          }
          uint64_t v6 = v17;
        }
      }
    }
LABEL_23:
    int64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v6 << 6);
LABEL_24:
    int64_t v18 = v2;
    Swift::UInt v19 = *(void *)(v2 + 48) + 24 * v14;
    uint64_t v20 = *(_DWORD *)v19;
    unint64_t v21 = *(_DWORD *)(v19 + 4);
    char v23 = *(_DWORD *)(v19 + 8);
    unint64_t v22 = *(_DWORD *)(v19 + 12);
    *(void *)&uint64_t v4 = *(void *)(v19 + 16);
    uint64_t v35 = v4;
    Hasher.init(_seed:)();
    Hasher.combine(bytes:)();
    Hasher._combine(_:)(DWORD1(v35));
    unint64_t v24 = Hasher._finalize()();
    BOOL v25 = -1 << *(unsigned char *)(v5 + 32);
    uint64_t v26 = v24 & ~v25;
    uint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v10 + 8 * (v26 >> 6))) != 0)
    {
      char v11 = __clz(__rbit64((-1 << v26) & ~*(void *)(v10 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_7;
    }
    uint64_t v28 = 0;
    long long v29 = (unint64_t)(63 - v25) >> 6;
    do
    {
      if (++v27 == v29 && (v28 & 1) != 0)
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
      }
      long long v30 = v27 == v29;
      if (v27 == v29) {
        uint64_t v27 = 0;
      }
      v28 |= v30;
      uint64_t v31 = *(void *)(v10 + 8 * v27);
    }
    while (v31 == -1);
    char v11 = __clz(__rbit64(~v31)) + (v27 << 6);
LABEL_7:
    *(void *)(v10 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
    int64_t v12 = *(void *)(v5 + 48) + 24 * v11;
    *(_DWORD *)int64_t v12 = v20;
    *(_DWORD *)(v12 + 4) = v21;
    *(_DWORD *)(v12 + 8) = v23;
    *(_DWORD *)(v12 + 12) = v22;
    *((void *)&v4 + 1) = *((void *)&v35 + 1);
    *(void *)(v12 + 16) = v35;
    ++*(void *)(v5 + 16);
    uint64_t v2 = v18;
  }
LABEL_33:
  uint64_t result = swift_release();
  uint64_t v1 = v0;
LABEL_35:
  *uint64_t v1 = v5;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  unsigned char v26[48];

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<ToolbarItemPlacement.Role>, (void (*)(void))lazy protocol witness table accessor for type ToolbarItemPlacement.Role and conformance ToolbarItemPlacement.Role);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    outlined init with copy of ToolbarItemPlacement.Role(*(void *)(v2 + 48) + 48 * v15, (uint64_t)v26);
    Hasher.init(_seed:)();
    ToolbarItemPlacement.Role.hash(into:)();
    uint64_t result = Hasher._finalize()();
    Swift::UInt v19 = -1 << *(unsigned char *)(v4 + 32);
    uint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v20) & ~*(void *)(v10 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v22 = 0;
      char v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        unint64_t v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        BOOL v25 = *(void *)(v10 + 8 * v21);
      }
      while (v25 == -1);
      unint64_t v13 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    uint64_t result = outlined init with take of ToolbarItemPlacement.Role((uint64_t)v26, *(void *)(v4 + 48) + 48 * v13);
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DateComponents();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  type metadata accessor for _SetStorage<DateComponents>();
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v8;
    return result;
  }
  int64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  long long v34 = v0;
  uint64_t v35 = v6 + 56;
  if (v9 < 64) {
    char v11 = ~(-1 << v9);
  }
  else {
    char v11 = -1;
  }
  int64_t v12 = v11 & v10;
  unint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  long long v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  unint64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  while (1)
  {
    if (v12)
    {
      int64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      Swift::UInt v19 = v18 | (v16 << 6);
      goto LABEL_24;
    }
    uint64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_33;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }
LABEL_23:
    int64_t v12 = (v21 - 1) & v21;
    Swift::UInt v19 = __clz(__rbit64(v21)) + (v16 << 6);
LABEL_24:
    char v23 = v6;
    unint64_t v24 = *(void *)(v6 + 48);
    BOOL v25 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v24 + v25 * v19, v2);
    lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityScrollableContext?> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type DateComponents and conformance DateComponents, MEMORY[0x1E4F26F90]);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
    uint64_t v27 = result & ~v26;
    uint64_t v28 = v27 >> 6;
    if (((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v27) & ~*(void *)(v13 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      long long v29 = 0;
      long long v30 = (unint64_t)(63 - v26) >> 6;
      do
      {
        if (++v28 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v31 = v28 == v30;
        if (v28 == v30) {
          uint64_t v28 = 0;
        }
        v29 |= v31;
        char v32 = *(void *)(v13 + 8 * v28);
      }
      while (v32 == -1);
      unint64_t v17 = __clz(__rbit64(~v32)) + (v28 << 6);
    }
    *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v17 * v25, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v23;
  }
  unint64_t v22 = v20 + 3;
  if (v22 >= v36)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_35;
  }
  unint64_t v21 = *(void *)(v35 + 8 * v22);
  if (v21)
  {
    int64_t v16 = v22;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v16 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_33;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v16);
    ++v22;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  Swift::Int v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t *v28;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<UIOpenURLContext>(0, &lazy cache variable for type metadata for _SetStorage<BSAction>, (unint64_t *)&lazy cache variable for type metadata for BSAction, 0x1E4F4F668, (unint64_t *)&lazy protocol witness table cache variable for type BSAction and conformance NSObject);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::UInt v19 = *(void *)(v4 + 40);
    uint64_t v20 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    unint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    char v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      unint64_t v24 = 0;
      BOOL v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v26 = v23 == v25;
        if (v23 == v25) {
          char v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  long long v15;
  long long v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _OWORD v29[2];
  uint64_t v30;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<String>(0, &lazy cache variable for type metadata for _SetStorage<AnyHashable>, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB968], MEMORY[0x1E4FBB9A8]);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v17 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v18 = v17 | (v12 << 6);
      goto LABEL_24;
    }
    Swift::UInt v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v19 >= v9) {
      goto LABEL_33;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v19);
    ++v12;
    if (!v20)
    {
      int64_t v12 = v19 + 1;
      if (v19 + 1 >= v9) {
        goto LABEL_33;
      }
      uint64_t v20 = *(void *)(v6 + 8 * v12);
      if (!v20)
      {
        int64_t v12 = v19 + 2;
        if (v19 + 2 >= v9) {
          goto LABEL_33;
        }
        uint64_t v20 = *(void *)(v6 + 8 * v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v20 - 1) & v20;
    int64_t v18 = __clz(__rbit64(v20)) + (v12 << 6);
LABEL_24:
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v18, (uint64_t)v29);
    uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(v4 + 40));
    unint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    char v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v23) & ~*(void *)(v10 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      BOOL v25 = 0;
      uint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v10 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v13 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    unint64_t v14 = *(void *)(v4 + 48) + 40 * v13;
    unint64_t v15 = v29[0];
    int64_t v16 = v29[1];
    *(void *)(v14 + 32) = v30;
    *(_OWORD *)unint64_t v14 = v15;
    *(_OWORD *)(v14 + 16) = v16;
    ++*(void *)(v4 + 16);
  }
  unint64_t v21 = v19 + 3;
  if (v21 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  uint64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v12 = v21;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    uint64_t v20 = *(void *)(v6 + 8 * v12);
    ++v21;
    if (v20) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;

  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  type metadata accessor for _SetStorage<_ViewList_ID.Canonical>(0, &lazy cache variable for type metadata for _SetStorage<_ViewList_ID.Canonical>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v15 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      int64_t v16 = v15 | (v12 << 6);
      goto LABEL_24;
    }
    unint64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v17 >= v9) {
      goto LABEL_33;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v12;
    if (!v18)
    {
      int64_t v12 = v17 + 1;
      if (v17 + 1 >= v9) {
        goto LABEL_33;
      }
      int64_t v18 = *(void *)(v6 + 8 * v12);
      if (!v18)
      {
        int64_t v12 = v17 + 2;
        if (v17 + 2 >= v9) {
          goto LABEL_33;
        }
        int64_t v18 = *(void *)(v6 + 8 * v12);
        if (!v18) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v18 - 1) & v18;
    int64_t v16 = __clz(__rbit64(v18)) + (v12 << 6);
LABEL_24:
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v16);
    unint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    Hasher.init(_seed:)();
    swift_retain();
    _ViewList_ID.Canonical.hash(into:)();
    uint64_t result = Hasher._finalize()();
    char v23 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v24 = result & ~v23;
    BOOL v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v10 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v24) & ~*(void *)(v10 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      uint64_t v26 = 0;
      uint64_t v27 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v28 = v25 == v27;
        if (v25 == v27) {
          BOOL v25 = 0;
        }
        v26 |= v28;
        long long v29 = *(void *)(v10 + 8 * v25);
      }
      while (v29 == -1);
      unint64_t v13 = __clz(__rbit64(~v29)) + (v25 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    unint64_t v14 = (void *)(*(void *)(v4 + 48) + 16 * v13);
    *unint64_t v14 = v21;
    v14[1] = v22;
    ++*(void *)(v4 + 16);
  }
  Swift::UInt v19 = v17 + 3;
  if (v19 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  int64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v12 = v19;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    int64_t v18 = *(void *)(v6 + 8 * v12);
    ++v19;
    if (v18) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in UIKitToolbarStrategy.updateLocations()()
{
  return UIKitToolbarStrategy.updateBarTitle()((void (*)(void *__return_ptr))closure #1 in UIKitToolbarStrategy.updateBarTitle()) & 1;
}

uint64_t partial apply for implicit closure #10 in implicit closure #9 in UIKitToolbarStrategy.updateLocations()()
{
  return specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(void *__return_ptr))partial apply for closure #1 in UIKitToolbarStrategy.updateNavigationBarLeading()) & 1;
}

uint64_t partial apply for implicit closure #8 in implicit closure #7 in UIKitToolbarStrategy.updateLocations()()
{
  return specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(void *__return_ptr))partial apply for closure #1 in UIKitToolbarStrategy.updateNavigationBarTrailing()) & 1;
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in UIKitToolbarStrategy.updateLocations()()
{
  return UIKitToolbarStrategy.updateBarTitle()((void (*)(void *__return_ptr))closure #1 in UIKitToolbarStrategy.updateNavigationAccessory()) & 1;
}

uint64_t partial apply for implicit closure #24 in implicit closure #23 in UIKitToolbarStrategy.updateLocations()()
{
  return specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(void *__return_ptr))partial apply for closure #1 in UIKitToolbarStrategy.updateTabSidebar()) & 1;
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in UIKitToolbarStrategy.updateLocations()()
{
  return specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(void *__return_ptr))partial apply for closure #1 in UIKitToolbarStrategy.updateBarCenter()) & 1;
}

uint64_t partial apply for implicit closure #20 in implicit closure #19 in UIKitToolbarStrategy.updateLocations()()
{
  return UIKitToolbarStrategy.updateBarTitle()((void (*)(void *__return_ptr))closure #1 in UIKitToolbarStrategy.updateKeyboardBar()) & 1;
}

uint64_t partial apply for implicit closure #18 in implicit closure #17 in UIKitToolbarStrategy.updateLocations()()
{
  return specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(void *__return_ptr))partial apply for closure #1 in UIKitToolbarStrategy.updateBottomBar()) & 1;
}

uint64_t outlined destroy of KeyPress.Handler.Subject(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID()
{
  unint64_t result = lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID;
  if (!lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Namespace.ID and conformance Namespace.ID);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind;
  if (!lazy protocol witness table cache variable for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind;
  if (!lazy protocol witness table cache variable for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarDefaultItemKind.Kind and conformance ToolbarDefaultItemKind.Kind);
  }
  return result;
}

uint64_t initializeWithCopy for ScrollViewLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_retain();
  return a1;
}

uint64_t protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ActionsKey(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static AccessibilityPropertiesKey.isDefault(_:) in conformance AccessibilityProperties.ActionsKey(a1, a2, a3, &one-time initialization token for defaultValue, &static AccessibilityProperties.ActionsKey.defaultValue, specialized static Array<A>.== infix(_:_:));
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm()
{
  return swift_getWitnessTable();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.ToolbarButtonHoverShapeKey(uint64_t a1@<X8>)
{
  *(unsigned char *)(a1 + 2) = 0;
  *(_WORD *)a1 = 512;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AccessibilityLargeContentViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t type metadata accessor for AnyAccessibilityViewModifier()
{
  return self;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance KeyboardShortcutBindingBehavior<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

ValueMetadata *type metadata accessor for _ButtonGesture()
{
  return &type metadata for _ButtonGesture;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance UpdateViewDestinationRequestProcessor<A, B>@<D0>(long long *a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  return static UpdateViewDestinationRequestProcessor._makeView(modifier:inputs:body:)(a1, a2, a3);
}

ValueMetadata *type metadata accessor for PrimitiveButtonGesture()
{
  return &type metadata for PrimitiveButtonGesture;
}

ValueMetadata *type metadata accessor for NavigationState.ListKey()
{
  return &type metadata for NavigationState.ListKey;
}

ValueMetadata *type metadata accessor for OpacityButtonHighlightModifier()
{
  return &type metadata for OpacityButtonHighlightModifier;
}

ValueMetadata *type metadata accessor for ButtonDefaultRenderingModeModifier()
{
  return &type metadata for ButtonDefaultRenderingModeModifier;
}

ValueMetadata *type metadata accessor for ShouldRenderAsTemplate()
{
  return &type metadata for ShouldRenderAsTemplate;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _HiddenModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _HiddenModifier(a1, a2, a3, a4, a5, a6, &qword_1ED41CC00);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ListStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for ListStyleWriter<A>);
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI4TextV_s5NeverOytTg503_s7c129UI28NavigationPropertiesModifierV0C14TitleTransform33_4E1BC05EE94CBE2933101E32D46EF6C1LLV5valueyyAA0cF7StorageVSgzcvgyAJzcfU_yAA4E6VXEfU_AD0iN7StorageVSgTf1cn_n(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if (!a4) {
    return a4 == 0;
  }
  v8[0] = a1;
  v8[1] = a2;
  char v9 = a3 & 1;
  uint64_t v10 = a4;
  uint64_t result = closure #1 in closure #1 in NavigationPropertiesModifier.NavigationTitleTransform.value.getter((uint64_t)v8, a5);
  if (!v5) {
    return a4 == 0;
  }
  return result;
}

uint64_t closure #1 in closure #1 in NavigationPropertiesModifier.NavigationTitleTransform.value.getter(uint64_t result, uint64_t a2)
{
  uint64_t v4 = *(void *)result;
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v5 = *(unsigned __int8 *)(result + 16);
  uint64_t v6 = *(void *)(result + 24);
  uint64_t v7 = *(void *)(a2 + 24);
  if (v7 == 1)
  {
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v3;
    *(void *)(a2 + 16) = v5;
    *(void *)(a2 + 24) = v6;
    *(_OWORD *)(a2 + 32) = xmmword_1883B6DC0;
    *(void *)(a2 + 48) = 0;
    *(unsigned char *)(a2 + 56) = 3;
    outlined copy of Text.Storage(v4, v3, v5);
    return swift_bridgeObjectRetain();
  }
  if (!v7)
  {
    outlined copy of Text.Storage(*(void *)result, v3, v5);
    swift_bridgeObjectRetain();
    uint64_t v8 = v4;
    uint64_t v9 = v3;
    uint64_t v10 = v5;
    uint64_t v7 = v6;
LABEL_8:
    *(void *)a2 = v8;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = v10;
    *(void *)(a2 + 24) = v7;
    uint64_t v11 = *(void *)(a2 + 48);
    outlined copy of Text.Storage(v4, v3, v5);
    swift_bridgeObjectRetain();
    outlined consume of Text?(v4, v3, v5, v6);
    uint64_t result = outlined consume of Transaction?(1);
    *(void *)(a2 + 48) = v11;
    return result;
  }
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 40) == 5 || !*(void *)(a2 + 48)) {
    goto LABEL_8;
  }
  return result;
}

uint64_t UIHostingController.rootView.getter()
{
  return _UIHostingView.rootView.getter();
}

uint64_t @objc UIHostingController.prefersHomeIndicatorAutoHidden.getter()
{
  return UIHostingController.prefersHomeIndicatorAutoHidden.getter() & 1;
}

BOOL UIHostingController._prefersHomeIndicatorAutoHidden.getter()
{
  return UIHostingController._persistentSystemOverlays.getter() == 2;
}

uint64_t destroy for SearchOverlayView(uint64_t a1)
{
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);

  return outlined consume of Environment<Bool?>.Content(v2, v3);
}

uint64_t destroy for LazyLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

ValueMetadata *type metadata accessor for ViewAlignedScrollTargetBehavior.LimitBehavior()
{
  return &type metadata for ViewAlignedScrollTargetBehavior.LimitBehavior;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))ScrollViewContentFrame.value.getter);
}

{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v2 = MEMORY[0x1E4F40498];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))MEMORY[0x1E4F40FF0];

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, v3, &lazy cache variable for type metadata for [ScrollGeometryState], v2);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))FlipForRTLFrame.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))ScrollViewResponderPosition.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  void (*v2)(void *__return_ptr);
  uint64_t vars8;

  uint64_t v2 = (void (*)(void *__return_ptr))MEMORY[0x1E4F3F348];

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, v2);
}

{
  void (*v2)(void *__return_ptr);
  uint64_t vars8;

  uint64_t v2 = (void (*)(void *__return_ptr))MEMORY[0x1E4F40308];

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, v2);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void, void))specialized ArchivableDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void, void))specialized ArchivableDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void, void))specialized ArchivableDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void, void))specialized ArchivableDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void))FeedbackLocation.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void, void))specialized ArchivableDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void, void))specialized ArchivableDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void, void))specialized ArchivableDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSlider>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitStepper>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v2 = MEMORY[0x1E4F3F668];
  uint64_t v3 = (void (*)(uint64_t, uint64_t))MEMORY[0x1E4F407D8];

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, v3, &lazy cache variable for type metadata for [ViewGeometry], v2);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>>, (uint64_t)type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>, (void (*)(void *__return_ptr, uint64_t))specialized RemoteSheetContainerVCWriter.value.getter, (uint64_t (*)(void))type metadata accessor for RemoteSheetContainerVCWriter<PlatformViewRepresentableAdaptor<Switch>>);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void))specialized PlatformArchivedDisplayList.value.getter);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, &lazy cache variable for type metadata for PreferenceValueAttribute<BottomBarAppearanceKey>, (uint64_t)&type metadata for BottomBarAppearanceKey, (uint64_t)&protocol witness table for BottomBarAppearanceKey);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for PreferenceValueAttribute<NavigationBarAppearanceKey>, (uint64_t)&type metadata for NavigationBarAppearanceKey, (uint64_t)&protocol witness table for NavigationBarAppearanceKey);
}

{
  uint64_t vars8;

  return specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(a1, a2, (void (*)(void *__return_ptr, void, void, void, void))specialized ArchivableDisplayList.value.getter);
}

uint64_t static CustomHoverEffect<>.automatic.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance AlertStorage.PreferenceKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static AlertStorage.PreferenceKey.defaultValue;

  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for HandGestureShortcutInteractiveControl()
{
  return &type metadata for HandGestureShortcutInteractiveControl;
}

ValueMetadata *type metadata accessor for ArchivesInteractiveControlsEffect()
{
  return &type metadata for ArchivesInteractiveControlsEffect;
}

uint64_t WrappedButtonStyleBody.body.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = &v18[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6 - 8);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_6(v1 + *(int *)(a1 + 36), (uint64_t)&v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for PrimitiveButtonStyleConfiguration);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  outlined init with take of PrimitiveButtonStyleConfiguration((uint64_t)&v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v10 + v9, type metadata accessor for PrimitiveButtonStyleConfiguration);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, a1);
  unint64_t v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  *(void *)(v12 + 16) = v13;
  *(void *)(v12 + 24) = v14;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v3 + 32))(v12 + v11, v5, a1);
  type metadata accessor for ResolvedButtonStyleBody();
  uint64_t v15 = property wrapper backing initializer of ButtonBehavior.state();
  uint64_t v24 = v1;
  uint64_t v25 = 0;
  char v26 = 1;
  uint64_t v27 = partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:);
  uint64_t v28 = v10;
  long long v29 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  uint64_t v30 = 0;
  uint64_t v31 = partial apply for closure #1 in WrappedButtonStyleBody.body.getter;
  uint64_t v32 = v12;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  __int16 v35 = v15;
  char v36 = BYTE2(v15) & 1;
  uint64_t v37 = v16;
  uint64_t v22 = v13;
  uint64_t v23 = v14;
  uint64_t v19 = v13;
  uint64_t v20 = v14;
  unint64_t v21 = &v25;
  type metadata accessor for ButtonBehavior();
  swift_getWitnessTable();
  StaticIf<>.init<A>(idiom:then:else:)();
  return outlined release of ButtonBehavior<ResolvedButtonStyleBody<A>>((uint64_t)&v25);
}

uint64_t WrappedButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  v24[0] = a1;
  v24[1] = a3;
  uint64_t v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a2 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for WrappedButtonStyleBody();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v17 = (char *)v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x1F4188790](v18);
  unint64_t v21 = (char *)v24 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v13, v4, v9, v19);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_6(v24[0], (uint64_t)v8, type metadata accessor for PrimitiveButtonStyleConfiguration);
  WrappedButtonStyleBody.init(style:configuration:)((uint64_t)v13, (uint64_t)v8, v9, (uint64_t)v17);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v17);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v15 + 8);
  v22(v17, v14);
  static ViewBuilder.buildExpression<A>(_:)(v21);
  return ((uint64_t (*)(char *, uint64_t))v22)(v21, v14);
}

uint64_t initializeWithCopy for WrappedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 | 7) + v6;
  uint64_t v12 = (_WORD *)((v11 + a1) & ~(v10 | 7));
  uint64_t v13 = (_WORD *)((v11 + a2) & ~(v10 | 7));
  *uint64_t v12 = *v13;
  uint64_t v14 = (v10 | 7) + 2;
  uint64_t v15 = ((unint64_t)v12 + v14) & ~(v10 | 7);
  uint64_t v16 = (unsigned __int8 *)(((unint64_t)v13 + v14) & ~(v10 | 7));
  uint64_t v17 = *(void *)(v8 + 64);
  uint64_t v18 = v17 + ((v10 + 75) & ~v10);
  if ((unint64_t)(v18 + 1) > 0x30) {
    uint64_t v19 = v18 + 1;
  }
  else {
    uint64_t v19 = 48;
  }
  unsigned int v20 = v16[v19];
  unsigned int v21 = v20 - 3;
  if (v20 >= 3)
  {
    if (v19 <= 3) {
      uint64_t v22 = v19;
    }
    else {
      uint64_t v22 = 4;
    }
    switch(v22)
    {
      case 1:
        int v23 = *v16;
        goto LABEL_13;
      case 2:
        int v23 = *(unsigned __int16 *)v16;
        goto LABEL_13;
      case 3:
        int v23 = *(unsigned __int16 *)(((unint64_t)v13 + v14) & ~(v10 | 7)) | (*(unsigned __int8 *)((((unint64_t)v13 + v14) & ~(v10 | 7)) + 2) << 16);
        goto LABEL_13;
      case 4:
        int v23 = *(_DWORD *)v16;
LABEL_13:
        int v24 = (v23 | (v21 << (8 * v19))) + 3;
        unsigned int v20 = v23 + 3;
        if (v19 < 4) {
          unsigned int v20 = v24;
        }
        break;
      default:
        break;
    }
  }
  if (v20 == 2)
  {
    uint64_t v38 = *(void *)v16;
    uint64_t v39 = *(void *)((((unint64_t)v13 + v14) & ~(v10 | 7)) + 8);
    char v40 = *(unsigned char *)((((unint64_t)v13 + v14) & ~(v10 | 7)) + 0x10);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)(((unint64_t)v13 + v14) & ~(v10 | 7)), v39, v40);
    *(void *)uint64_t v15 = v38;
    *(void *)(v15 + 8) = v39;
    *(unsigned char *)(v15 + 16) = v40;
    uint64_t v41 = (void *)*((void *)v16 + 3);
    *(void *)(v15 + 24) = v41;
    uint64_t v42 = *((void *)v16 + 5);
    *(void *)(v15 + 32) = *((void *)v16 + 4);
    *(void *)(v15 + 40) = v42;
    *(unsigned char *)(v15 + v19) = 2;
    id v43 = v41;
LABEL_20:
    swift_retain();
    return a1;
  }
  if (v20 != 1)
  {
    uint64_t v44 = *(void *)((((unint64_t)v13 + v14) & ~(v10 | 7)) + 8);
    *(void *)uint64_t v15 = *(void *)v16;
    *(void *)(v15 + 8) = v44;
    *(unsigned char *)(v15 + v19) = 0;
    goto LABEL_20;
  }
  uint64_t v49 = v7;
  uint64_t v25 = *(void *)v16;
  uint64_t v26 = *(void *)((((unint64_t)v13 + v14) & ~(v10 | 7)) + 8);
  uint64_t v50 = a1;
  uint64_t v27 = *(void *)((((unint64_t)v13 + v14) & ~(v10 | 7)) + 0x10);
  uint64_t v28 = *(void *)((((unint64_t)v13 + v14) & ~(v10 | 7)) + 0x18);
  char v29 = *(unsigned char *)((((unint64_t)v13 + v14) & ~(v10 | 7)) + 0x22);
  __int16 v30 = *(_WORD *)((((unint64_t)v13 + v14) & ~(v10 | 7)) + 0x20);
  uint64_t v47 = v9;
  uint64_t v48 = v17;
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v16, *((void *)v16 + 1), *((void *)v16 + 2), *((void *)v16 + 3), *((_WORD *)v16 + 16), v16[34]);
  *(void *)uint64_t v15 = v25;
  *(void *)(v15 + 8) = v26;
  *(void *)(v15 + 16) = v27;
  *(void *)(v15 + 24) = v28;
  *(_WORD *)(v15 + 32) = v30;
  *(unsigned char *)(v15 + 34) = v29;
  unint64_t v31 = (v15 + 42) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = (unint64_t)(v16 + 42) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = *(void *)v32;
  uint64_t v34 = *(void *)(v32 + 8);
  uint64_t v35 = *(void *)(v32 + 16);
  uint64_t v36 = *(void *)(v32 + 24);
  char v46 = *(unsigned char *)(v32 + 34);
  __int16 v37 = *(_WORD *)(v32 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v32, v34, v35, v36, v37, v46);
  *(void *)unint64_t v31 = v33;
  *(void *)(v31 + 8) = v34;
  *(void *)(v31 + 16) = v35;
  *(void *)(v31 + 24) = v36;
  a1 = v50;
  *(_WORD *)(v31 + 32) = v37;
  *(unsigned char *)(v31 + 34) = v46;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v47 + 16))((v10 + 35 + v31) & ~v10, (v10 + 35 + v32) & ~v10, v49);
  *(unsigned char *)(((v10 + 35 + v31) & ~v10) + v48) = *(unsigned char *)(((v10 + 35 + v32) & ~v10) + v48);
  *(unsigned char *)(v15 + v19) = 1;
  return a1;
}

uint64_t ButtonStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v15 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 24))(a1, v4, v3, v10);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, AssociatedTypeWitness);
}

uint64_t destroy for WrappedButtonStyleBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v7 = (unsigned __int8 *)((((v4 + a1 + (v6 | 7)) | v6 | 7) + 2) & ~(v6 | 7));
  uint64_t v8 = *(void *)(*(void *)(v5 - 8) + 64) + ((v6 + 75) & ~v6);
  if ((unint64_t)(v8 + 1) > 0x30) {
    uint64_t v9 = v8 + 1;
  }
  else {
    uint64_t v9 = 48;
  }
  unsigned int v10 = v7[v9];
  unsigned int v11 = v10 - 3;
  if (v10 >= 3)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *v7;
        goto LABEL_13;
      case 2:
        int v13 = *(unsigned __int16 *)v7;
        goto LABEL_13;
      case 3:
        int v13 = *(unsigned __int16 *)v7 | (v7[2] << 16);
        goto LABEL_13;
      case 4:
        int v13 = *(_DWORD *)v7;
LABEL_13:
        int v14 = (v13 | (v11 << (8 * v9))) + 3;
        unsigned int v10 = v13 + 3;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (v10 == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v7, *((void *)v7 + 1), v7[16]);
  }
  else if (v10 == 1)
  {
    uint64_t v18 = *(void *)(v5 - 8);
    outlined consume of Environment<OpenURLAction>.Content(*(void *)v7, *((void *)v7 + 1), *((void *)v7 + 2), *((void *)v7 + 3), *((_WORD *)v7 + 16), v7[34]);
    unint64_t v15 = (unint64_t)(v7 + 42) & 0xFFFFFFFFFFFFFFF8;
    outlined consume of Environment<OpenURLAction>.Content(*(void *)v15, *(void *)(v15 + 8), *(void *)(v15 + 16), *(void *)(v15 + 24), *(_WORD *)(v15 + 32), *(unsigned char *)(v15 + 34));
    uint64_t v16 = *(uint64_t (**)(unint64_t, uint64_t))(v18 + 8);
    return v16((v6 + v15 + 35) & ~v6, v5);
  }

  return swift_release();
}

uint64_t destroy for WrappingLabelStyleView(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(unsigned char *)(a1 + 24);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t destroy for DefaultListNavigationLinkStyle.ListLink(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v4, *(void *)(v4 + 8), *(void *)(v4 + 16), *(void *)(v4 + 24), *(_WORD *)(v4 + 32), *(unsigned char *)(v4 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v4 + 40), *(void *)(v4 + 48), *(void *)(v4 + 56), *(void *)(v4 + 64), *(_WORD *)(v4 + 72), *(unsigned char *)(v4 + 74));
  uint64_t v6 = v4 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v7 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
LABEL_8:
  uint64_t v8 = a1 + a2[5];
  outlined consume of Environment<HoverEffectContext?>.Content(*(void *)v8, *(void *)(v8 + 8), *(void *)(v8 + 16), *(void *)(v8 + 24), *(unsigned char *)(v8 + 32));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + a2[6]), *(unsigned char *)(a1 + a2[6] + 8));
  uint64_t v9 = a1 + a2[7];
  uint64_t v10 = *(void *)v9;
  char v11 = *(unsigned char *)(v9 + 8);

  return outlined consume of Environment<Bool>.Content(v10, v11);
}

uint64_t WrappedButtonStyleBody.init(style:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = type metadata accessor for WrappedButtonStyleBody();
  return outlined init with take of PrimitiveButtonStyleConfiguration(a2, a4 + *(int *)(v6 + 36), type metadata accessor for PrimitiveButtonStyleConfiguration);
}

uint64_t outlined init with take of PrimitiveButtonStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWObTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI33PrimitiveButtonStyleConfigurationVWObTm_2(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t destroy for OnPlatformContainerSelectionModifier(uint64_t a1)
{
  if (*(void *)a1) {
    swift_release();
  }
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  outlined consume of Environment<KeyboardShortcut?>.Content(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned __int8 *)(a1 + 64), *(unsigned char *)(a1 + 65));
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 80);

  return outlined consume of Environment<Bool?>.Content(v2, v3);
}

uint64_t destroy for BorderlessButtonStyleBase(uint64_t a1)
{
  outlined consume of Environment<KeyboardShortcut?>.Content(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), *(unsigned char *)(a1 + 25));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
  uint64_t v2 = *(void *)(a1 + 48);
  char v3 = *(unsigned char *)(a1 + 56);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t outlined consume of Environment<KeyboardShortcut?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    return swift_bridgeObjectRelease();
  }
  else {
    return swift_release();
  }
}

uint64_t DividerStyleModifier.styleBody(configuration:)(char *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = &v15[-v11];
  char v16 = *a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 24))(&v16, v4, v3, v10);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  int v13 = *(void (**)(unsigned char *, uint64_t))(v6 + 8);
  v13(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(unsigned char *, uint64_t))v13)(v12, AssociatedTypeWitness);
}

uint64_t destroy for InsetListLabelStyle.StyleView(uint64_t a1)
{
  return outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t NavigationLinkButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v184 = (char *)a1;
  uint64_t v180 = a3;
  uint64_t v179 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v177 = v3;
  uint64_t v178 = (char *)&v134 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v190 = v4;
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 24);
  uint64_t v188 = *(void *)(v4 + 16);
  unint64_t v187 = v5;
  uint64_t v176 = type metadata accessor for NavigationLinkButtonStyle.Payload();
  uint64_t v185 = type metadata accessor for Optional();
  uint64_t v181 = *(void *)(v185 - 8);
  MEMORY[0x1F4188790](v185);
  uint64_t v173 = (char *)&v134 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v161 = (char *)&v134 - v8;
  uint64_t v9 = type metadata accessor for ContentListItemNavigationLinkStyle();
  uint64_t v191 = *(uint64_t (**)(uint64_t))(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v162 = (uint64_t)&v134 - v10;
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v147 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v151 = (char *)&v134 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v155 = (uint64_t)&v134 - v14;
  unint64_t v15 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F410E8];
  type metadata accessor for StyleContextAcceptsPredicate<PlainListStyleContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<PlainListStyleContext>, (uint64_t)&type metadata for PlainListStyleContext, MEMORY[0x1E4F410E8]);
  uint64_t v17 = v16;
  uint64_t v156 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v18 = type metadata accessor for PrimitiveButtonStyleContainerModifier();
  uint64_t v19 = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<PlainListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<PlainListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<PlainListStyleContext>, (uint64_t)&type metadata for PlainListStyleContext);
  uint64_t v217 = v17;
  uint64_t v218 = v18;
  uint64_t v20 = MEMORY[0x1E4F3F740];
  uint64_t v219 = MEMORY[0x1E4F3F740];
  uint64_t v220 = v19;
  uint64_t v175 = type metadata accessor for StaticIf();
  uint64_t v21 = type metadata accessor for ModifiedContent();
  uint64_t v160 = *(void *)(v21 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v182 = (uint64_t)&v134 - v22;
  type metadata accessor for StyleContextAcceptsPredicate<PlainListStyleContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetListStyleContext>, (uint64_t)&type metadata for InsetListStyleContext, v15);
  uint64_t v24 = v23;
  uint64_t v25 = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<PlainListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<InsetListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetListStyleContext>, (uint64_t)&type metadata for InsetListStyleContext);
  uint64_t v217 = v24;
  uint64_t v218 = v18;
  uint64_t v219 = v20;
  uint64_t v220 = v25;
  type metadata accessor for StaticIf();
  uint64_t v139 = v21;
  uint64_t v26 = type metadata accessor for ModifiedContent();
  uint64_t v154 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v150 = (uint64_t)&v134 - v27;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  uint64_t v141 = v26;
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v153 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  uint64_t v148 = (uint64_t)&v134 - v29;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  uint64_t v143 = v28;
  uint64_t v30 = type metadata accessor for ModifiedContent();
  uint64_t v171 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  uint64_t v146 = (char *)&v134 - v31;
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(255, &lazy cache variable for type metadata for _BindingActionModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F409F0]);
  uint64_t v32 = type metadata accessor for ModifiedContent();
  uint64_t v174 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v186 = (char *)&v134 - v33;
  type metadata accessor for StyleContextAcceptsPredicate<PlainListStyleContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310], v15);
  uint64_t v170 = v34;
  unint64_t v35 = lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
  unint64_t v137 = v35;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v37 = MEMORY[0x1E4F3F738];
  uint64_t v215 = v36;
  uint64_t v216 = MEMORY[0x1E4F3F738];
  uint64_t v38 = swift_getWitnessTable();
  unint64_t v213 = v35;
  uint64_t v214 = v38;
  uint64_t v39 = swift_getWitnessTable();
  uint64_t v138 = v39;
  uint64_t v211 = v36;
  uint64_t v212 = v37;
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v209 = v39;
  uint64_t v210 = v40;
  uint64_t v41 = swift_getWitnessTable();
  uint64_t v140 = v41;
  unint64_t v42 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v207 = v41;
  unint64_t v208 = v42;
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v142 = v43;
  unint64_t v44 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v205 = v43;
  unint64_t v206 = v44;
  uint64_t v172 = v30;
  uint64_t v45 = swift_getWitnessTable();
  unint64_t v46 = lazy protocol witness table accessor for type _BindingActionModifier<Bool> and conformance _BindingActionModifier<A>();
  uint64_t v149 = v45;
  uint64_t v203 = v45;
  unint64_t v204 = v46;
  uint64_t v163 = swift_getWitnessTable();
  uint64_t v157 = type metadata accessor for AccessibilityNavigationLinkButtonModifier.Representable();
  uint64_t v47 = type metadata accessor for ModifiedContent();
  uint64_t v175 = v32;
  uint64_t v48 = type metadata accessor for ModifiedContent();
  uint64_t v49 = lazy protocol witness table accessor for type StyleContextAcceptsPredicate<PlainListStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>, MEMORY[0x1E4F41310]);
  uint64_t v217 = v170;
  uint64_t v218 = v47;
  uint64_t v158 = v47;
  uint64_t v159 = v48;
  uint64_t v219 = v48;
  uint64_t v220 = v49;
  uint64_t v50 = type metadata accessor for StaticIf();
  uint64_t v168 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v166 = (char *)&v134 - v51;
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(255, &lazy cache variable for type metadata for KeyboardShortcutBindingBehavior<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for KeyboardShortcutBindingBehavior);
  uint64_t v170 = v50;
  uint64_t v169 = type metadata accessor for ModifiedContent();
  uint64_t v167 = *(void *)(v169 - 8);
  MEMORY[0x1F4188790](v169);
  uint64_t v164 = (uint64_t)&v134 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v53);
  uint64_t v165 = (char *)&v134 - v54;
  uint64_t v55 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v56 = v55 - 8;
  uint64_t v144 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55);
  long long v58 = (char *)&v134 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = v57;
  MEMORY[0x1F4188790](v59);
  uint64_t v61 = (char *)&v134 - v60;
  uint64_t v62 = v190;
  uint64_t v63 = v189;
  NavigationLinkButtonStyle.reconfiguration(from:)((uint64_t)v184, v190, (uint64_t)&v134 - v60);
  uint64_t v184 = v61;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_7((uint64_t)v61, (uint64_t)v58, type metadata accessor for PrimitiveButtonStyleConfiguration);
  char v64 = v58[1];
  uint64_t v65 = (uint64_t)v151;
  *uint64_t v151 = *v58;
  *(unsigned char *)(v65 + 1) = v64;
  uint64_t v66 = v147;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_7((uint64_t)&v58[*(int *)(v56 + 32)], v65 + *(int *)(v147 + 36), (uint64_t (*)(void))type metadata accessor for ButtonAction);
  long long v152 = v58;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_2((uint64_t)v58, type metadata accessor for PrimitiveButtonStyleConfiguration);
  uint64_t v67 = v155;
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>(v65, v155);
  uint64_t v135 = v63 + *(int *)(v62 + 36);
  CGRect v68 = (unsigned char *)(v181 + 16);
  uint64_t v136 = *(void (**)(char *))(v181 + 16);
  uint64_t v69 = (uint64_t)v161;
  uint64_t v70 = v185;
  v136(v161);
  uint64_t v151 = v68;
  uint64_t v71 = v162;
  ContentListItemNavigationLinkStyle.init(payload:)(v69, v162);
  unint64_t v72 = lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext();
  uint64_t v73 = v66;
  uint64_t v74 = v156;
  View.buttonStyle<A, B>(_:in:)(v71, v75, v73, v156, (uint64_t)&type metadata for PlainListStyleContext, v137, v72, v182);
  unint64_t v76 = (void (*)(uint64_t, uint64_t))*((void *)v191 + 1);
  uint64_t v191 = (uint64_t (*)(uint64_t))((char *)v191 + 8);
  v76(v71, v74);
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>(v67);
  uint64_t v77 = v135;
  uint64_t v78 = v70;
  unint64_t v79 = (void (*)(char *, uint64_t, uint64_t))v136;
  ((void (*)(uint64_t, uint64_t, uint64_t))v136)(v69, v135, v78);
  ContentListItemNavigationLinkStyle.init(payload:)(v69, v71);
  unint64_t v80 = lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext();
  uint64_t v81 = v150;
  uint64_t v82 = v139;
  uint64_t v83 = v182;
  View.buttonStyle<A, B>(_:in:)(v71, v84, v139, v74, (uint64_t)&type metadata for InsetListStyleContext, v138, v80, v150);
  uint64_t v85 = v173;
  v76(v71, v74);
  uint64_t v86 = (uint64_t)v146;
  (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v83, v82);
  lazy protocol witness table accessor for type DefaultListNavigationLinkStyle and conformance DefaultListNavigationLinkStyle();
  unint64_t v87 = lazy protocol witness table accessor for type AnyListStyleContext and conformance AnyListStyleContext();
  uint64_t v88 = v148;
  uint64_t v89 = v141;
  View.buttonStyle<A, B>(_:in:)(v87, v90, v141, (uint64_t)&unk_1ED458DC8, (uint64_t)&type metadata for AnyListStyleContext, v140, v87, v148);
  (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v81, v89);
  unint64_t v91 = lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext();
  uint64_t v92 = v143;
  uint64_t v93 = v176;
  View.buttonStyle<A, B>(_:in:)(v91, v94, v143, (uint64_t)&unk_1ED458DC8, (uint64_t)&type metadata for GroupedFormStyleContext, v142, v91, v86);
  (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v88, v92);
  uint64_t v95 = v185;
  v79(v85, v77, v185);
  uint64_t v96 = *(void *)(v93 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v85, 1, v93) == 1)
  {
    (*(void (**)(char *, uint64_t))(v181 + 8))(v85, v95);
    LOBYTE(v200) = 0;
    static Binding.constant(_:)();
    uint64_t v97 = v217;
    uint64_t v98 = v218;
    char v99 = v219;
  }
  else
  {
    uint64_t v97 = NavigationLinkButtonStyle.Payload.deprecated_isActive.getter(v93);
    uint64_t v98 = v100;
    char v102 = v101;
    (*(void (**)(char *, uint64_t))(v96 + 8))(v85, v93);
    uint64_t v217 = v97;
    uint64_t v218 = v98;
    char v99 = v102 & 1;
    LOBYTE(v219) = v102 & 1;
  }
  uint64_t v200 = v97;
  uint64_t v201 = v98;
  char v202 = v99;
  uint64_t v103 = v179;
  uint64_t v104 = v178;
  uint64_t v105 = v190;
  (*(void (**)(char *, uint64_t, uint64_t))(v179 + 16))(v178, v189, v190);
  unint64_t v106 = (*(unsigned __int8 *)(v103 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
  uint64_t v107 = swift_allocObject();
  unint64_t v108 = v187;
  *(void *)(v107 + 16) = v188;
  *(void *)(v107 + 24) = v108;
  (*(void (**)(unint64_t, char *, uint64_t))(v103 + 32))(v107 + v106, v104, v105);
  uint64_t v109 = v172;
  View._onBindingChange<A>(_:perform:)();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v171 + 8))(v86, v109);
  uint64_t v191 = type metadata accessor for PrimitiveButtonStyleConfiguration;
  uint64_t v110 = (uint64_t)v152;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_7((uint64_t)v184, (uint64_t)v152, type metadata accessor for PrimitiveButtonStyleConfiguration);
  uint64_t v111 = *(unsigned __int8 *)(v144 + 80);
  uint64_t v189 = ((v111 + 16) & ~v111) + v145;
  uint64_t v112 = (v111 + 16) & ~v111;
  uint64_t v190 = v112;
  uint64_t v188 = v111 | 7;
  uint64_t v113 = swift_allocObject();
  unint64_t v187 = type metadata accessor for PrimitiveButtonStyleConfiguration;
  outlined init with take of ButtonAction(v110, v113 + v112, type metadata accessor for PrimitiveButtonStyleConfiguration);
  uint64_t v114 = v175;
  uint64_t v115 = v163;
  AccessibilityNavigationLinkButtonModifier.init(trigger:label:)((uint64_t)partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:), v113, &v217);
  uint64_t v200 = v217;
  uint64_t v201 = v218;
  uint64_t v116 = type metadata accessor for AccessibilityNavigationLinkButtonModifier();
  uint64_t v117 = swift_getWitnessTable();
  uint64_t v118 = swift_getWitnessTable();
  uint64_t v198 = v115;
  uint64_t v199 = v118;
  uint64_t v119 = swift_getWitnessTable();
  uint64_t v196 = v115;
  unsigned __int8 v197 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v120 = swift_getWitnessTable();
  uint64_t v194 = v119;
  uint64_t v195 = v120;
  uint64_t v121 = v170;
  uint64_t v122 = swift_getWitnessTable();
  uint64_t v123 = v166;
  uint64_t v124 = v116;
  objc_super v125 = v186;
  View.accessibilityConfiguration<A>(_:)((uint64_t)&v200, v114, v124, v115, v117);
  swift_release();
  (*(void (**)(char *, uint64_t))(v174 + 8))(v125, v114);
  uint64_t v126 = (uint64_t)v184;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_7((uint64_t)v184, v110, v191);
  uint64_t v127 = swift_allocObject();
  uint64_t v128 = outlined init with take of ButtonAction(v110, v127 + v190, v187);
  MEMORY[0x1F4188790](v128);
  *(&v134 - 2) = v126;
  uint64_t v129 = v164;
  View.keyboardShortcutBindingBehavior<A>(action:label:)((uint64_t)partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:), v127, (void (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, v121, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, v122, v164);
  swift_release();
  (*(void (**)(char *, uint64_t))(v168 + 8))(v123, v121);
  uint64_t v192 = v122;
  uint64_t v193 = &protocol witness table for KeyboardShortcutBindingBehavior<A>;
  uint64_t v130 = v169;
  swift_getWitnessTable();
  unint64_t v131 = v165;
  static ViewBuilder.buildExpression<A>(_:)(v129);
  uint64_t v132 = *(void (**)(uint64_t, uint64_t))(v167 + 8);
  v132(v129, v130);
  static ViewBuilder.buildExpression<A>(_:)(v131);
  v132((uint64_t)v131, v130);
  return _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_2(v126, type metadata accessor for PrimitiveButtonStyleConfiguration);
}

uint64_t destroy for KeyboardShortcutBindingBehavior(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t outlined init with take of ButtonAction(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t View.buttonStyle<A, B>(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v37 = a6;
  uint64_t v33 = a2;
  uint64_t v34 = a7;
  uint64_t v35 = a8;
  uint64_t v36 = a3;
  uint64_t v30 = a1;
  uint64_t v32 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for PrimitiveButtonStyleContainerModifier();
  uint64_t v31 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v29 - v18;
  uint64_t v20 = type metadata accessor for StyleContextAcceptsPredicate();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v40 = (char *)v20;
  uint64_t v41 = v17;
  uint64_t v42 = MEMORY[0x1E4F3F740];
  uint64_t v43 = WitnessTable;
  uint64_t v22 = type metadata accessor for StaticIf();
  uint64_t v23 = *(void *)(v22 - 8);
  double v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v29 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v30, a4, v24);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v19, v16, a4);
  uint64_t v27 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v11, v33, a5);
  uint64_t v39 = a5;
  uint64_t v40 = v11;
  swift_getWitnessTable();
  uint64_t v38 = v34;
  ViewModifier.requiring<A>(_:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v17);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v11, a5);
  MEMORY[0x18C113660](v26, v36, v22, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v26, v22);
}

uint64_t destroy for ContentListItemNavigationLinkStyle(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  unint64_t v6 = ((v4 + 17) & ~v4) + v5;
  if (((((((((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 > v6)
    unint64_t v6 = ((((((((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24;
  unsigned int v7 = *(unsigned __int8 *)(result + v6);
  if (v7 <= 1)
  {
    uint64_t v8 = result;
    if (v7 == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(result, v2);
      unint64_t v9 = (v8 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t result = swift_release();
      if (*(void *)(((v9 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
      {
        swift_release();
        uint64_t result = swift_release();
      }
      unint64_t v10 = *(void *)(((v9 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
      if (v10 >= 0xFFFFFFFF) {
        LODWORD(v10) = -1;
      }
      if ((int)v10 - 1 < 0)
      {
        swift_weakDestroy();
        swift_release();
        return swift_release();
      }
    }
    else
    {
      uint64_t v12 = *(void *)(*(void *)(a2 + 16) - 8);
      swift_release();
      swift_release();
      uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 8);
      return v11((v8 + v4 + 17) & ~v4, v2);
    }
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<PlainListStyleContext> and conformance StyleContextAcceptsPredicate<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for StyleContextAcceptsPredicate<PlainListStyleContext>(255, a2, a3, MEMORY[0x1E4F410E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  if (!*a2)
  {
    type metadata accessor for StyleContextAcceptsPredicate<PlainListStyleContext>(255, a3, a4, MEMORY[0x1E4F410E8]);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultListNavigationLinkStyle and conformance DefaultListNavigationLinkStyle, (uint64_t)&unk_1ED458DC8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<PlainListStyleContext> and conformance StyleContextAcceptsPredicate<A>(a5, a3, a4);
    unint64_t v9 = type metadata accessor for StaticIf();
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

__n128 NavigationLinkButtonStyle.PayloadV4.init(destination:presentedValue:modifierID:shouldTargetSourceColumn:deprecated_isActive:authority:listKey:stackKey:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, __n128 a11, unint64_t a12, uint64_t a13)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a13 - 8) + 32))(a9, a1, a13);
  uint64_t v21 = (int *)type metadata accessor for NavigationLinkButtonStyle.PayloadV4();
  *(void *)(a9 + v21[9]) = a2;
  *(void *)(a9 + v21[10]) = a3;
  *(unsigned char *)(a9 + v21[11]) = a4;
  uint64_t v22 = a9 + v21[12];
  *(void *)uint64_t v22 = a5;
  *(void *)(v22 + 8) = a6;
  *(unsigned char *)(v22 + 16) = a7;
  uint64_t v23 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  outlined init with take of NavigationState.ListKey?(a8, a9 + v21[13], &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);
  outlined init with take of NavigationState.ListKey?(a10, a9 + v21[14], &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, v23);
  double v24 = (__n128 *)(a9 + v21[15]);
  __n128 result = a11;
  *double v24 = a11;
  v24[1].n128_u64[0] = a12;
  return result;
}

uint64_t outlined init with take of NavigationState.ListKey?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  type metadata accessor for StyleContextAcceptsPredicate<PlainListStyleContext>(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

void type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for StyleContextAcceptsPredicate();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void type metadata accessor for StyleContextAcceptsPredicate<PlainListStyleContext>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t type metadata accessor for NavigationLinkButtonStyle.PayloadV4()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ContentListItemNavigationLinkStyle.init(payload:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for NavigationLinkButtonStyle.Payload();
  uint64_t v4 = type metadata accessor for Optional();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

unint64_t lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>;
  if (!lazy protocol witness table cache variable for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>);
  }
  return result;
}

uint64_t closure #1 in Section<>.internalBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  void v17[2] = a1;
  void v17[3] = a4;
  v17[1] = type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityTraitsModifier.ChildModifier();
  type metadata accessor for ModifiedContent();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v17 - v11;
  uint64_t v19 = 2;
  protocol witness for OptionSet.init(rawValue:) in conformance UIRectEdge(&v19, &v18);
  uint64_t v13 = type metadata accessor for AccessibilityTraitsModifier();
  uint64_t WitnessTable = swift_getWitnessTable();
  v17[8] = a3;
  v17[9] = &protocol witness table for CaptureViewRespondersModifier;
  v17[6] = swift_getWitnessTable();
  v17[7] = &protocol witness table for AccessibilityTraitsModifier<A>.ChildModifier;
  v17[4] = swift_getWitnessTable();
  v17[5] = &protocol witness table for IgnoreViewRespondersModifier;
  swift_getWitnessTable();
  View.accessibilityConfiguration<A>(_:)((uint64_t)&v18, a2, v13, a3, WitnessTable);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v15)(v12, v6);
}

uint64_t View.accessibilityConfiguration<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a5 + 40))(v5, a3, a5);
}

void *protocol witness for OptionSet.init(rawValue:) in conformance UIRectEdge@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t type metadata accessor for AccessibilityTraitsModifier()
{
  return __swift_instantiateGenericMetadata();
}

void AccessibilityTraitsModifier.body(content:)()
{
  uint64_t v0 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v0);
  type metadata accessor for AccessibilityTraitsModifier.ChildModifier();
  uint64_t v1 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v1);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v2);
  MEMORY[0x1F4188790](v3);
  View.accessibilityCaptureViewResponders()();
}

void sub_18734A538()
{
  *(void *)(v4 - 104) = v3;
  *(void *)(v4 - 96) = &protocol witness table for CaptureViewRespondersModifier;
  *(void *)(v4 - 88) = v0;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](v4 - 88, v1, *(void *)(v4 - 184), WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 152) + 8))(v2, v1);
  *(void *)(v4 - 120) = WitnessTable;
  *(void *)(v4 - 112) = &protocol witness table for AccessibilityTraitsModifier<A>.ChildModifier;
  swift_getWitnessTable();
  View.accessibilityIgnoreViewResponders()();
}

uint64_t sub_18734A5DC()
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 168) + 8))(v5, v2);
  *(void *)(v6 - 136) = v1;
  *(void *)(v6 - 128) = &protocol witness table for IgnoreViewRespondersModifier;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v4);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 160) + 8);
  v7(v4, v0);
  static ViewBuilder.buildExpression<A>(_:)(v3);
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(v3, v0);
}

void View.accessibilityCaptureViewResponders()()
{
}

void View.accessibilityIgnoreViewResponders()()
{
}

uint64_t type metadata accessor for ContentListItemNavigationLinkStyle()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, &lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
    lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle> and conformance PrimitiveButtonStyleContainerModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _BindingActionModifier<Bool> and conformance _BindingActionModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _BindingActionModifier<Bool> and conformance _BindingActionModifier<A>;
  if (!lazy protocol witness table cache variable for type _BindingActionModifier<Bool> and conformance _BindingActionModifier<A>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(255, &lazy cache variable for type metadata for _BindingActionModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F409F0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _BindingActionModifier<Bool> and conformance _BindingActionModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultListNavigationLinkStyle and conformance DefaultListNavigationLinkStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultListNavigationLinkStyle and conformance DefaultListNavigationLinkStyle;
  if (!lazy protocol witness table cache variable for type DefaultListNavigationLinkStyle and conformance DefaultListNavigationLinkStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultListNavigationLinkStyle and conformance DefaultListNavigationLinkStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GroupedFormStyleContext and conformance GroupedFormStyleContext()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupedFormStyleContext and conformance GroupedFormStyleContext;
  if (!lazy protocol witness table cache variable for type GroupedFormStyleContext and conformance GroupedFormStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupedFormStyleContext and conformance GroupedFormStyleContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GroupedFormStyleContext and conformance GroupedFormStyleContext;
  if (!lazy protocol witness table cache variable for type GroupedFormStyleContext and conformance GroupedFormStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupedFormStyleContext and conformance GroupedFormStyleContext);
  }
  return result;
}

uint64_t View.keyboardShortcutBindingBehavior<A>(action:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v22 = a6;
  uint64_t v20 = a7;
  uint64_t v21 = a4;
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for KeyboardShortcutBindingBehavior();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v20 - v16;
  uint64_t v18 = swift_retain();
  a3(v18);
  *(void *)uint64_t v17 = a1;
  *((void *)v17 + 1) = a2;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v17[*(int *)(v14 + 36)], v13, a5);
  MEMORY[0x18C113660](v17, v21, v14, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t type metadata accessor for KeyboardShortcutBindingBehavior()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityNavigationLinkButtonModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AccessibilityNavigationLinkButtonModifier.init(trigger:label:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

unint64_t lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext()
{
  unint64_t result = lazy protocol witness table cache variable for type PlainListStyleContext and conformance PlainListStyleContext;
  if (!lazy protocol witness table cache variable for type PlainListStyleContext and conformance PlainListStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainListStyleContext and conformance PlainListStyleContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlainListStyleContext and conformance PlainListStyleContext;
  if (!lazy protocol witness table cache variable for type PlainListStyleContext and conformance PlainListStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainListStyleContext and conformance PlainListStyleContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext()
{
  unint64_t result = lazy protocol witness table cache variable for type InsetListStyleContext and conformance InsetListStyleContext;
  if (!lazy protocol witness table cache variable for type InsetListStyleContext and conformance InsetListStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetListStyleContext and conformance InsetListStyleContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type InsetListStyleContext and conformance InsetListStyleContext;
  if (!lazy protocol witness table cache variable for type InsetListStyleContext and conformance InsetListStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InsetListStyleContext and conformance InsetListStyleContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyListStyleContext and conformance AnyListStyleContext()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyListStyleContext and conformance AnyListStyleContext;
  if (!lazy protocol witness table cache variable for type AnyListStyleContext and conformance AnyListStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyListStyleContext and conformance AnyListStyleContext);
  }
  return result;
}

uint64_t destroy for NavigationLinkButtonStyle.Payload(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  unint64_t v7 = ((v5 + 17) & ~v5) + v6;
  if (((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
     + 24 > v7)
    unint64_t v7 = ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 55) & 0xFFFFFFFFFFFFFFF8)
       + 24;
  unsigned int v8 = a1[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        goto LABEL_12;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v11 = *(_DWORD *)a1;
LABEL_12:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 1)
  {
    (*(void (**)(unsigned __int8 *, uint64_t))(v4 + 8))(a1, v3);
    unint64_t v13 = (unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8;
    uint64_t result = swift_release();
    if (*(void *)(((v13 + 31) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
    {
      swift_release();
      uint64_t result = swift_release();
    }
    unint64_t v15 = *(void *)(((v13 + 55) & 0xFFFFFFFFFFFFFFF8) + 8);
    if (v15 >= 0xFFFFFFFF) {
      LODWORD(v15) = -1;
    }
    if ((int)v15 - 1 < 0)
    {
      swift_weakDestroy();
      swift_release();
      return swift_release();
    }
  }
  else
  {
    uint64_t v17 = *(void *)(*(void *)(a2 + 16) - 8);
    swift_release();
    swift_release();
    uint64_t v16 = *(uint64_t (**)(unint64_t, uint64_t))(v17 + 8);
    return v16((unint64_t)&a1[v5 + 17] & ~v5, v3);
  }
  return result;
}

__n128 __swift_memcpy73_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance PlainButtonStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PlainButtonStyle.makeBody(configuration:)(a1, a2);
}

uint64_t protocol witness for DividerStyle.makeBody(configuration:) in conformance DefaultDividerStyle@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

double protocol witness for DividerStyle.makeBody(configuration:) in conformance PlainDividerStyle@<D0>(uint64_t a1@<X8>)
{
  return PlainDividerStyle.makeBody(configuration:)(*(void *)v1, *(unsigned char *)(v1 + 8), a1);
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance DefaultButtonStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultButtonStyle.makeBody(configuration:)(a1, a2);
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance ConditionallyBorderedStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return ConditionallyBorderedStyle.makeBody(configuration:)(a1, *(void *)v2, *(unsigned char *)(v2 + 8), a2);
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, &lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, DetachedGeometryModifier>, AccessibilityRepresentableStyleModifier>, EnableDeferredAccessibilityAttachmentModifier>, _HiddenModifier>);
    }
  }
}

uint64_t protocol witness for AccessibilityConfigurationModifier.body(content:) in conformance AccessibilitySidebarListModifier<A>(uint64_t a1, uint64_t a2)
{
  return AccessibilitySidebarListModifier.body(content:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t AccessibilitySidebarListModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unsigned int v8 = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v14 - v10;
  if (one-time initialization token for sidebar != -1) {
    swift_once();
  }
  View.accessibilityLabel(_:)(static Text.Accessibility.sidebar, *(uint64_t *)algn_1E90FC0D8, byte_1E90FC0E0, qword_1E90FC0E8, a2, a3);
  v14[1] = a3;
  _OWORD v14[2] = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  int v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v8, v5);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v12)(v11, v5);
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance BorderedProminentButtonStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return BorderedProminentButtonStyle.makeBody(configuration:)(a1, a2);
}

unint64_t lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle> and conformance PrimitiveButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle> and conformance PrimitiveButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle> and conformance PrimitiveButtonStyleContainerModifier<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultListNavigationLinkStyle and conformance DefaultListNavigationLinkStyle, (uint64_t)&unk_1ED458DC8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator()
{
  unint64_t result = lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator;
  if (!lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator;
  if (!lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator;
  if (!lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator;
  if (!lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator;
  if (!lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator);
  }
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance PickerStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static PickerStyleWriter._makeInputs(modifier:inputs:)(a1, a2, *(void *)(a3 + 16));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PickerStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for PickerStyleWriter<A>);
}

uint64_t partial apply for closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter(*(unsigned char *)(v1 + 16), v1 + 24, a1);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter(a1, *(unsigned __int8 *)(v2 + 16), v2 + 24, a2);
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in closure #2 in closure #1 in closure #1 in ListLabelStyle.Implementation.v6Layout.getter(a1, *(_OWORD **)(v2 + 16), *(unsigned char *)(v2 + 24), a2);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance AdaptiveStack<A>()
{
  return static AdaptiveStack._makeView(view:inputs:)();
}

ValueMetadata *type metadata accessor for ResetContentMarginModifier()
{
  return &type metadata for ResetContentMarginModifier;
}

id static UIViewPlatformViewDefinition.setIgnoresEvents(_:of:)(char a1, id a2)
{
  return objc_msgSend(a2, sel_setUserInteractionEnabled_, (a1 & 1) == 0);
}

uint64_t initializeWithCopy for SharingPickerHostModifier(uint64_t a1, uint64_t a2)
{
  long long v4 = (_OWORD *)(a2 + 112);
  uint64_t v5 = *(void *)(a2 + 112);
  if (v5 != 1)
  {
    uint64_t v10 = *(void *)(a2 + 72);
    if (v10 == 1)
    {
      long long v11 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v11;
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      long long v12 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v12;
      long long v13 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v13;
      if (!v5) {
        goto LABEL_12;
      }
LABEL_9:
      uint64_t v26 = *(void *)(a2 + 120);
      *(void *)(a1 + 112) = v5;
      *(void *)(a1 + 120) = v26;
      swift_retain();
      goto LABEL_13;
    }
    uint64_t v14 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    uint64_t v15 = *(void *)(a2 + 16);
    uint64_t v16 = *(void *)(a2 + 24);
    uint64_t v17 = *(void *)(a2 + 32);
    char v18 = *(unsigned char *)(a2 + 40);
    outlined copy of AnyShareConfiguration.Storage(v14, v15, v16, v17, v18);
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v15;
    *(void *)(a1 + 24) = v16;
    *(void *)(a1 + 32) = v17;
    *(unsigned char *)(a1 + 40) = v18;
    if (v10)
    {
      uint64_t v19 = *(void *)(a2 + 48);
      uint64_t v20 = *(void *)(a2 + 56);
      char v21 = *(unsigned char *)(a2 + 64);
      outlined copy of Text.Storage(v19, v20, v21);
      *(void *)(a1 + 48) = v19;
      *(void *)(a1 + 56) = v20;
      *(unsigned char *)(a1 + 64) = v21;
      *(void *)(a1 + 72) = v10;
      swift_bridgeObjectRetain();
      uint64_t v22 = *(void *)(a2 + 104);
      if (v22) {
        goto LABEL_8;
      }
    }
    else
    {
      long long v27 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = v27;
      uint64_t v22 = *(void *)(a2 + 104);
      if (v22)
      {
LABEL_8:
        uint64_t v23 = *(void *)(a2 + 80);
        uint64_t v24 = *(void *)(a2 + 88);
        char v25 = *(unsigned char *)(a2 + 96);
        outlined copy of Text.Storage(v23, v24, v25);
        *(void *)(a1 + 80) = v23;
        *(void *)(a1 + 88) = v24;
        *(unsigned char *)(a1 + 96) = v25;
        *(void *)(a1 + 104) = v22;
        swift_bridgeObjectRetain();
        if (v5) {
          goto LABEL_9;
        }
LABEL_12:
        *(_OWORD *)(a1 + 112) = *v4;
        goto LABEL_13;
      }
    }
    long long v28 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v28;
    if (v5) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  long long v9 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v9;
LABEL_13:
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  return a1;
}

__n128 protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListRowInsetsKey@<Q0>(void *a1@<X2>, __n128 *a2@<X3>, __n128 *a3@<X4>, __n128 *a4@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  __n128 result = *a2;
  __n128 v8 = *a3;
  *a4 = *a2;
  a4[1] = v8;
  return result;
}

uint64_t base witness table accessor for MultiViewModifier in CustomButtonMenuStyleWriter<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in CustomButtonMenuStyleWriter<A>()
{
  return swift_getWitnessTable();
}

_WORD *destructiveProjectEnumData for AnyNavigationSplitVisibility.Kind(_WORD *result)
{
  *result &= 0x3FFFu;
  return result;
}

void *type metadata accessor for ButtonSpringLoadedInteraction()
{
  return &unk_1ED4556C0;
}

ValueMetadata *type metadata accessor for SpringLoadingBehavior.HasCustomSpringLoadedBehavior()
{
  return &type metadata for SpringLoadingBehavior.HasCustomSpringLoadedBehavior;
}

void *type metadata accessor for ButtonRepeatModifier()
{
  return &unk_1ED42FF50;
}

ValueMetadata *type metadata accessor for ButtonRepeatBehavior.HasCustomRepeatBehavior()
{
  return &type metadata for ButtonRepeatBehavior.HasCustomRepeatBehavior;
}

ValueMetadata *type metadata accessor for AnyListStyleContext()
{
  return &type metadata for AnyListStyleContext;
}

uint64_t base witness table accessor for _AttributeBody in InvalidatableLeafLayoutComputer<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in PlatformViewDisplayList<A>()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for DocumentSceneRootBoxModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 104);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance UINavigationItemAdaptorKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static UINavigationItemAdaptorKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t initializeBufferWithCopyOfBuffer for SubscriptionView.Subscriber(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t partial apply for closure #1 in View.scrollClipDisabled(_:)(uint64_t result)
{
  *(unsigned char *)(result + 1) &= ~*(unsigned char *)(v1 + 16) & 1;
  return result;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void @objc UIHostingContentView.frame.setter(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  UIHostingContentView.frame.setter(a2, a3, a4, a5);
}

uint64_t ModernNavigationBridge.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for PPTTestCase()
{
  return &type metadata for PPTTestCase;
}

uint64_t initializeWithCopy for MatchedTransitionSourceSourceMarkingEffect(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 136) = *(unsigned char *)(a2 + 136);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for ToolbarRole(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BorderedProminentButtonStyle()
{
  return &type metadata for BorderedProminentButtonStyle;
}

uint64_t storeEnumTagSinglePayload for ToolbarPlacement.Role(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFF9)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)__n128 result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)__n128 result = a2 - 2147483641;
    if (a3 >= 0x7FFFFFF9) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFF9) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2 + 6;
    }
  }
  return result;
}

void static ResolvedShadowView._makeView(view:inputs:)(int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  int v4 = *a1;
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 24);
  int v9 = *(_DWORD *)(a2 + 28);
  int v11 = *(_DWORD *)(a2 + 32);
  int v10 = *(_DWORD *)(a2 + 36);
  int v17 = *(_DWORD *)(a2 + 80);
  uint64_t v12 = type metadata accessor for ResolvedShadowView();
  v30[0] = v4;
  uint64_t v19 = v5;
  int v20 = v6;
  uint64_t v21 = v7;
  int v22 = v8;
  int v23 = v9;
  int v24 = v11;
  int v25 = v10;
  swift_getWitnessTable();
  long long v15 = *(_OWORD *)(a2 + 40);
  *(void *)&long long v26 = *(void *)(a2 + 40);
  long long v16 = *(_OWORD *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 72);
  static Animatable.makeAnimatable(value:inputs:)();
  _GraphValue.init(_:)();
  uint64_t v19 = v5;
  int v20 = v6;
  uint64_t v21 = v7;
  int v22 = v8;
  int v23 = v9;
  int v24 = v11;
  int v25 = v10;
  long long v26 = v15;
  long long v27 = v16;
  uint64_t v28 = v13;
  int v29 = v17;
  uint64_t WitnessTable = swift_getWitnessTable();
  static SizeDependentLeafView.makeLeafView(view:inputs:)(v30, &v19, v12, WitnessTable, a3);
}

double static SizeDependentLeafView.makeLeafView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v58 = a4;
  uint64_t v61 = a3;
  uint64_t v59 = a5;
  uint64_t v60 = 0;
  uint64_t v96 = *MEMORY[0x1E4F143B8];
  int v57 = *a1;
  uint64_t v65 = *a2;
  int v71 = *((_DWORD *)a2 + 2);
  unint64_t v68 = a2[2];
  int v6 = *((_DWORD *)a2 + 6);
  int v5 = *((_DWORD *)a2 + 7);
  int v7 = *((_DWORD *)a2 + 8);
  int v73 = *((_DWORD *)a2 + 9);
  uint64_t v8 = a2[6];
  uint64_t v72 = a2[5];
  int v9 = *((_DWORD *)a2 + 14);
  int v10 = *((_DWORD *)a2 + 15);
  int v11 = *((_DWORD *)a2 + 16);
  int v12 = *((_DWORD *)a2 + 17);
  int v13 = *((_DWORD *)a2 + 18);
  int v63 = *((_DWORD *)a2 + 19);
  int v14 = *((_DWORD *)a2 + 20);
  _ViewOutputs.init()();
  uint64_t v69 = v8;
  *(void *)&long long v81 = v8;
  int v76 = v9;
  DWORD2(v81) = v9;
  int v67 = v6;
  int v70 = v5;
  int v66 = v7;
  int v64 = v11;
  int v62 = v12;
  int v75 = v13;
  int v74 = v14;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    _DisplayList_Identity.init()();
    int v55 = v81;
    int v56 = v10;
    LODWORD(v79) = v81;
    _ViewInputs.pushIdentity(_:)();
    type metadata accessor for _GraphValue();
    unsigned int v54 = _GraphValue.value.getter();
    unsigned int v53 = _ViewInputs.animatedPosition()();
    int v52 = _ViewInputs.animatedSize()();
    unsigned int v51 = _ViewInputs.containerPosition.getter();
    int v15 = v63;
    unsigned int v50 = _ViewInputs.transform.getter();
    int v49 = _ViewInputs.environment.getter();
    swift_getKeyPath();
    int v48 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    BYTE1(v86) = BYTE1(v73);
    uint64_t v16 = v72;
    uint64_t v87 = v72;
    uint64_t v88 = v69;
    int v89 = v76;
    int v90 = v56;
    int v91 = v64;
    int v92 = v62;
    int v93 = v75;
    int v94 = v63;
    int v95 = v74;
    int v17 = _ViewInputs.safeAreaInsets.getter();
    swift_retain();
    unint64_t v18 = v68;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v19 = swift_release();
    *(void *)((char *)&v81 + 4) = __PAIR64__(v53, v54);
    HIDWORD(v81) = v52;
    unint64_t v82 = __PAIR64__(v50, v51);
    int v83 = v49;
    int v84 = v48;
    int v85 = v17;
    LOBYTE(v86) = v65;
    HIWORD(v86) = 0;
    MEMORY[0x1F4188790](v19);
    uint64_t v46 = type metadata accessor for LeafDisplayList();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<DisplayList>();
    uint64_t v20 = v60;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v81, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v45, v46, MEMORY[0x1E4FBC248], v21, MEMORY[0x1E4FBC278], v22);
    uint64_t v60 = v20;
    LOBYTE(v81) = 0;
    _ViewOutputs.subscript.setter();
    int v23 = v73;
    int v24 = v56;
    int v25 = v15;
  }
  else
  {
    unint64_t v18 = v68;
    int v23 = v73;
    uint64_t v16 = v72;
    int v24 = v10;
    int v25 = v63;
  }
  *(void *)&long long v81 = v69;
  DWORD2(v81) = v76;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    LODWORD(v81) = v57;
    type metadata accessor for _GraphValue();
    int v57 = _GraphValue.value.getter();
    *(void *)&long long v81 = v65;
    uint64_t v26 = v65;
    int v27 = v71;
    DWORD2(v81) = v71;
    unint64_t v82 = v18;
    int v28 = v67;
    int v83 = v67;
    int v84 = v70;
    int v85 = v66;
    int v86 = v23;
    uint64_t v87 = v16;
    uint64_t v88 = v69;
    uint64_t v29 = v69;
    int v89 = v76;
    int v90 = v24;
    int v30 = v76;
    int v31 = v64;
    int v32 = v25;
    int v91 = v64;
    int v92 = v62;
    int v33 = v62;
    int v93 = v75;
    int v94 = v32;
    int v95 = v74;
    int v55 = _ViewInputs.animatedSize()();
    *(void *)&long long v81 = v26;
    DWORD2(v81) = v27;
    unint64_t v82 = v18;
    LODWORD(v26) = v70;
    int v83 = v28;
    int v84 = v70;
    int v34 = v66;
    int v35 = v73;
    int v85 = v66;
    int v86 = v73;
    uint64_t v87 = v72;
    uint64_t v88 = v29;
    int v89 = v30;
    int v90 = v24;
    int v91 = v31;
    int v92 = v33;
    int v36 = v75;
    int v37 = v63;
    int v93 = v75;
    int v94 = v63;
    int v38 = v74;
    int v95 = v74;
    _ViewInputs.animatedPosition()();
    *(void *)&long long v81 = v65;
    DWORD2(v81) = v71;
    unint64_t v82 = v68;
    int v83 = v67;
    int v84 = v26;
    int v85 = v34;
    int v86 = v35;
    uint64_t v87 = v72;
    uint64_t v88 = v29;
    int v89 = v76;
    int v90 = v24;
    int v91 = v64;
    int v92 = v62;
    int v93 = v36;
    int v94 = v37;
    int v95 = v38;
    _ViewInputs.transform.getter();
    uint64_t v39 = LeafResponderFilter.init(data:size:position:transform:)();
    long long v79 = v81;
    unint64_t v80 = v82;
    MEMORY[0x1F4188790](v39);
    uint64_t v40 = type metadata accessor for LeafResponderFilter();
    uint64_t v46 = v40;
    uint64_t WitnessTable = swift_getWitnessTable();
    _sSay7SwiftUI13ViewResponderCGMaTm_1(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v79, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)v45, v40, MEMORY[0x1E4FBC248], v41, MEMORY[0x1E4FBC278], v42);
    swift_release();
    LOBYTE(v81) = 0;
    _ViewOutputs.subscript.setter();
  }
  uint64_t v43 = v59;
  *(void *)uint64_t v59 = v77;
  double result = v78;
  v43[1] = v78;
  return result;
}

uint64_t type metadata accessor for LeafDisplayList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static _ShadowView._makeView(view:inputs:)()
{
  return swift_release();
}

uint64_t Shape.fillShadow(color:radius:x:y:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>)
{
  uint64_t v13 = *(void *)(a2 - 8);
  double v14 = MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v6, a2, v14);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a3, v16, a2);
  uint64_t v17 = a3 + *(int *)(type metadata accessor for _ShadowView() + 36);
  *(void *)uint64_t v17 = a1;
  *(double *)(v17 + 8) = a4;
  *(double *)(v17 + 16) = a5;
  *(double *)(v17 + 24) = a6;
  return swift_retain();
}

uint64_t ShadowChild.updateValue()(uint64_t a1)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v47 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](a1);
  int v49 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = v3;
  uint64_t v4 = *(void *)(v3 + 24);
  uint64_t v56 = type metadata accessor for ResolvedShadowView();
  uint64_t v53 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  uint64_t v51 = (uint64_t)&v42 - v5;
  uint64_t v50 = v1;
  uint64_t v48 = v4;
  uint64_t v6 = type metadata accessor for _ShadowView();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v55 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  int v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  int v12 = (char *)&v42 - v11;
  uint64_t v58 = v13;
  uint64_t v14 = *(int *)(v13 + 48);
  uint64_t Value = AGGraphGetValue();
  LOBYTE(v4) = v16;
  uint64_t v17 = *(void *)(v6 - 8);
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v46(v12, Value, v6);
  int v57 = v4 & 1;
  v12[v14] = v4 & 1;
  unint64_t v18 = (uint64_t *)AGGraphGetValue();
  uint64_t v20 = *v18;
  uint64_t v54 = v18[1];
  if ((v4 & 1) != 0 || (char v21 = v19, !AGGraphGetOutputValue()))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    swift_retain();
    swift_retain();
    if ((v21 & 1) == 0
      || (swift_retain(), char v22 = PropertyList.Tracker.hasDifferentUsedValues(_:)(), swift_release(), (v22 & 1) == 0))
    {
      (*(void (**)(char *, uint64_t))(v55 + 8))(v12, v58);
      swift_release();
      return swift_release();
    }
  }
  PropertyList.Tracker.reset()();
  uint64_t v24 = *(int *)(v58 + 48);
  int v25 = v12;
  unint64_t v44 = v12;
  uint64_t v26 = v58;
  uint64_t v45 = v20;
  int v27 = (void (*)(char *, char *, uint64_t))v46;
  v46(v9, (uint64_t)v25, v6);
  v9[v24] = v57;
  uint64_t v43 = *(void (**)(char *, uint64_t))(v17 + 8);
  int v28 = v43;
  swift_retain();
  v28(v9, v6);
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  uint64_t v65 = v67;
  uint64_t v66 = v68;
  _ShadowEffect.resolve(in:)();
  swift_release();
  swift_release();
  swift_release();
  long long v42 = v61;
  uint64_t v29 = v62;
  int v30 = v63;
  char v31 = v64;
  uint64_t v32 = v59;
  uint64_t v33 = v60;
  uint64_t v34 = *(int *)(v26 + 48);
  int v35 = v44;
  v27(v9, v44, v6);
  v9[v34] = v57;
  uint64_t v36 = (uint64_t)v49;
  uint64_t v37 = v50;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v49, v9, v50);
  v43(v9, v6);
  uint64_t v59 = v32;
  uint64_t v60 = v33;
  long long v61 = v42;
  uint64_t v62 = v29;
  int v63 = v30;
  char v64 = v31;
  uint64_t v38 = v51;
  ResolvedShadowView.init(shape:style:)(v36, (uint64_t)&v59, v37, v51);
  MEMORY[0x1F4188790](v39);
  *((void *)&v42 - 2) = v52;
  *((void *)&v42 - 1) = swift_getWitnessTable();
  uint64_t v40 = v56;
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v38, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v42 - 2), v56, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v41);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v38, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v35, v58);
}

uint64_t initializeWithCopy for _ShadowView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  *(_OWORD *)(v7 + 16) = *(_OWORD *)(v8 + 16);
  swift_retain();
  return a1;
}

uint64_t destroy for TableOutlineGroupContent(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_release();
}

uint64_t type metadata accessor for _ShadowView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ResolvedShadowView()
{
  return __swift_instantiateGenericMetadata();
}

__n128 ResolvedShadowView.init(shape:style:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  __n128 v11 = *(__n128 *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  int v7 = *(_DWORD *)(a2 + 40);
  char v8 = *(unsigned char *)(a2 + 44);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v9 = a4 + *(int *)(type metadata accessor for ResolvedShadowView() + 36);
  __n128 result = v11;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
  *(__n128 *)(v9 + 16) = v11;
  *(void *)(v9 + 32) = v6;
  *(_DWORD *)(v9 + 40) = v7;
  *(unsigned char *)(v9 + 44) = v8;
  return result;
}

uint64_t type metadata accessor for ShadowChild()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<DisplayList>()
{
  if (!lazy cache variable for type metadata for Attribute<DisplayList>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<DisplayList>);
    }
  }
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance AccessibilityHidesLabelIcon()
{
  lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon();
  PropertyList.subscript.getter();
  if (v3)
  {
    char v0 = 0;
  }
  else
  {
    lazy protocol witness table accessor for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    char v0 = v2 ^ 1;
  }
  return v0 & 1;
}

unint64_t lazy protocol witness table accessor for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput()
{
  unint64_t result = lazy protocol witness table cache variable for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput;
  if (!lazy protocol witness table cache variable for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput;
  if (!lazy protocol witness table cache variable for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsPlatformItemListSourceInput and conformance IsPlatformItemListSourceInput);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon;
  if (!lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon;
  if (!lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon;
  if (!lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon;
  if (!lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon;
  if (!lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.menuOrder : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuOrderKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<MenuOrderKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<MenuOrderKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<MenuOrderKey>);
    }
  }
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance BarItemViewGraph()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PlatformDynamicHiddenRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemListDynamicHiddenRepresentable()
{
  return PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1;
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance CellViewGraph()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for ViewGraphFeature.modifyViewInputs(inputs:graph:) in conformance ItemHostingViewGraph()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PlatformTextRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemListTextRepresentable(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 48);
  char v1 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t result = 0;
  if (v1)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (v3 >> 2) & 1;
  }
  return result;
}

uint64_t static PlatformItemListGeneratingViewModifier._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  int v36 = *a1;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  unsigned int v10 = *((_DWORD *)a2 + 6);
  unsigned int v11 = *((_DWORD *)a2 + 7);
  unsigned int v12 = *((_DWORD *)a2 + 8);
  unsigned int v13 = *((_DWORD *)a2 + 9);
  uint64_t v14 = a2[5];
  uint64_t v15 = a2[6];
  unsigned int v17 = *((_DWORD *)a2 + 14);
  unsigned int v16 = *((_DWORD *)a2 + 15);
  unsigned int v18 = *((_DWORD *)a2 + 16);
  unsigned int v19 = *((_DWORD *)a2 + 17);
  unsigned int v20 = *((_DWORD *)a2 + 18);
  unsigned int v21 = *((_DWORD *)a2 + 19);
  int v22 = *((_DWORD *)a2 + 20);
  uint64_t v79 = *a2;
  unsigned int v45 = v10;
  int v46 = v8;
  int v80 = v8;
  uint64_t v81 = v9;
  *(void *)&long long v82 = __PAIR64__(v11, v10);
  unsigned int v43 = v12;
  unsigned int v44 = v11;
  *((void *)&v82 + 1) = __PAIR64__(v13, v12);
  unsigned int v41 = v16;
  unsigned int v42 = v13;
  uint64_t v83 = v14;
  uint64_t v84 = v15;
  *(void *)&long long v85 = __PAIR64__(v16, v17);
  unsigned int v39 = v19;
  unsigned int v40 = v18;
  *((void *)&v85 + 1) = __PAIR64__(v19, v18);
  unsigned int v37 = v21;
  unsigned int v38 = v20;
  unint64_t v86 = __PAIR64__(v21, v20);
  int v87 = v22;
  uint64_t v49 = v79;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.pushStableIndex(_:)(0);
  uint64_t v70 = v79;
  LODWORD(v71) = v80;
  long long v73 = v82;
  uint64_t v72 = v9;
  uint64_t v74 = v14;
  uint64_t v75 = v15;
  long long v76 = v85;
  unsigned int v23 = v17;
  unint64_t v77 = v86;
  int v78 = v22;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v24 = swift_bridgeObjectRetain();
  a3(&v60, v24, &v70);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v25 = v60;
  int v55 = v61;
  int v53 = v62;
  uint64_t v70 = v15;
  LODWORD(v71) = v23;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    uint64_t v34 = a8;
LABEL_11:
    *(void *)uint64_t v34 = v25;
    *(_DWORD *)(v34 + 8) = v55;
    *(_DWORD *)(v34 + 12) = v53;
    return result;
  }
  uint64_t v35 = v25;
  lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v26 = v70;
  uint64_t v27 = (*(uint64_t (**)(void))(a6 + 8))();
  if ((v27 & ~v26) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    uint64_t v34 = a8;
    uint64_t v25 = v35;
    goto LABEL_11;
  }
  MEMORY[0x1F4188790](v27);
  LODWORD(v60) = v36;
  uint64_t v70 = a4;
  uint64_t v71 = a5;
  uint64_t v72 = a6;
  *(void *)&long long v73 = a7;
  type metadata accessor for PlatformItemListGeneratingViewModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  uint64_t v60 = v49;
  int v61 = v46;
  uint64_t v63 = v9;
  *(void *)&long long v64 = __PAIR64__(v44, v45);
  *((void *)&v64 + 1) = __PAIR64__(v42, v43);
  uint64_t v65 = v14;
  uint64_t v66 = v15;
  *(void *)&long long v67 = __PAIR64__(v41, v23);
  *((void *)&v67 + 1) = __PAIR64__(v39, v40);
  unint64_t v68 = __PAIR64__(v37, v38);
  int v69 = v22;
  _ViewInputs.withoutGeometryDependencies.getter();
  _GraphInputs.pushStableIndex(_:)(1);
  PreferencesInputs.remove<A>(_:)();
  _GraphValue.init(_:)();
  uint64_t v60 = v70;
  int v61 = v71;
  uint64_t v63 = v72;
  long long v64 = v73;
  uint64_t v65 = v74;
  uint64_t v66 = v75;
  long long v67 = v76;
  unint64_t v68 = v77;
  int v69 = v78;
  static View.makeDebuggableView(view:inputs:)();
  uint64_t v56 = v35;
  int v57 = v55;
  swift_bridgeObjectRetain();
  PairwisePreferenceCombinerVisitor.init(outputs:)();
  uint64_t v58 = v15;
  uint64_t v59 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      int v28 = (void (*)(uint64_t *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v28(&v56, 0);
      uint64_t v29 = v59;
      uint64_t v56 = v58;
      swift_bridgeObjectRetain();
      uint64_t result = PreferenceKeys.endIndex.getter();
      if (v29 < 0 || v29 >= result) {
        break;
      }
      uint64_t v31 = v29 + 1;
      uint64_t v59 = v31;
      swift_bridgeObjectRelease();
      static PreferenceKey.visitKey<A>(_:)();
      if (v31 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
    *(_DWORD *)(a8 + 12) = v53;
    uint64_t v32 = *((void *)&v64 + 1);
    int v33 = v65;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    *(void *)a8 = v32;
    *(_DWORD *)(a8 + 8) = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t protocol witness for static PlatformSpacerRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemListSpacerRepresentable(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 48);
  char v1 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t result = 0;
  if (v1)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (v3 >> 3) & 1;
  }
  return result;
}

uint64_t protocol witness for static PlatformImageRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemListImageRepresentable(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 48);
  char v1 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t result = 0;
  if (v1)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (v3 >> 1) & 1;
  }
  return result;
}

uint64_t protocol witness for static PlatformNamedImageRepresentable.shouldMakeRepresentation(inputs:) in conformance PlatformItemListNamedImageRepresentable(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 48);
  char v1 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t result = 0;
  if (v1)
  {
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    return (v3 >> 5) & 1;
  }
  return result;
}

double static _HoverRegionModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, double *a4@<X8>)
{
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  uint64_t v6 = *(void *)a2;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 24);
  int v10 = *(_DWORD *)(a2 + 28);
  int v11 = *(_DWORD *)(a2 + 32);
  int v12 = *(_DWORD *)(a2 + 36);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v13 = *(void *)(a2 + 48);
  int v15 = *(_DWORD *)(a2 + 56);
  int v16 = *(_DWORD *)(a2 + 60);
  int v17 = *(_DWORD *)(a2 + 64);
  int v18 = *(_DWORD *)(a2 + 68);
  int v19 = *(_DWORD *)(a2 + 72);
  int v20 = *(_DWORD *)(a2 + 76);
  int v21 = *(_DWORD *)(a2 + 80);
  uint64_t v60 = *(void *)a2;
  int v52 = v7;
  LODWORD(v61) = v7;
  uint64_t v62 = v8;
  int v51 = v9;
  int v63 = v9;
  int v64 = v10;
  int v50 = v10;
  int v49 = v11;
  int v65 = v11;
  int v66 = v12;
  int v48 = v12;
  uint64_t v67 = v14;
  uint64_t v68 = v13;
  int v53 = v15;
  int v69 = v15;
  int v70 = v16;
  int v47 = v16;
  int v22 = v17;
  int v71 = v17;
  int v72 = v18;
  int v43 = v19;
  int v73 = v19;
  int v74 = v20;
  int v45 = v20;
  int v44 = v21;
  int v75 = v21;
  a3(&v54);
  type metadata accessor for ViewGraph();
  uint64_t v23 = MEMORY[0x18C114EE0]() + 200;
  swift_beginAccess();
  uint64_t v24 = MEMORY[0x18C119DF0](v23);
  swift_release();
  if (v24)
  {
    int v46 = v5;
    swift_getObjectType();
    uint64_t v25 = swift_conformsToProtocol2();
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    if (v25) {
      uint64_t v27 = v24;
    }
    else {
      uint64_t v27 = 0;
    }
    if (v27)
    {
      unsigned int v42 = a4;
      uint64_t ObjectType = swift_getObjectType();
      unint64_t v29 = type metadata accessor for EventGraphHost();
      (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, uint64_t))(*(void *)(v26 + 8)
                                                                                                 + 16))(&v60, v29, v29, ObjectType);
      swift_unknownObjectRelease();
      if (v60)
      {
        double v30 = v61;
        uint64_t v31 = swift_getObjectType();
        (*(void (**)(uint64_t, double))(*(void *)&v30 + 8))(v31, COERCE_DOUBLE(*(void *)&v30));
        swift_unknownObjectRelease();
        uint64_t v60 = v13;
        LODWORD(v61) = v53;
        if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
        {
          uint64_t v60 = v6;
          LODWORD(v61) = v52;
          uint64_t v62 = v8;
          int v63 = v51;
          int v64 = v50;
          int v65 = v49;
          int v66 = v48;
          uint64_t v67 = v14;
          uint64_t v68 = v13;
          int v69 = v53;
          int v70 = v47;
          int v71 = v22;
          int v72 = v18;
          int v73 = v43;
          int v74 = v45;
          int v75 = v44;
          type metadata accessor for HoverResponder();
          swift_allocObject();
          swift_retain();
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v41 = HoverResponder.init(inputs:)();
          LODWORD(v60) = v46;
          type metadata accessor for _GraphValue<PointerHoverEffectModifier>(0, &lazy cache variable for type metadata for _GraphValue<_HoverRegionModifier>, (uint64_t)&type metadata for _HoverRegionModifier, MEMORY[0x1E4F3F590]);
          swift_retain();
          LODWORD(v60) = _GraphValue.value.getter();
          protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
          lazy protocol witness table accessor for type _HoverRegionModifier.Callback and conformance _HoverRegionModifier.Callback();
          int v40 = Attribute.init<A>(body:value:flags:update:)();
          uint64_t v60 = v54;
          double v61 = v55;
          int v39 = _ViewOutputs.viewResponders()();
          uint64_t v60 = v6;
          LODWORD(v61) = v52;
          uint64_t v62 = v8;
          int v63 = v51;
          int v64 = v50;
          int v65 = v49;
          int v66 = v48;
          uint64_t v67 = v14;
          uint64_t v68 = v13;
          int v69 = v53;
          int v70 = v47;
          int v71 = v22;
          int v72 = v18;
          int v73 = v43;
          int v74 = v45;
          int v75 = v44;
          int v38 = _ViewInputs.animatedPosition()();
          uint64_t v60 = v6;
          LODWORD(v61) = v52;
          uint64_t v62 = v8;
          int v63 = v51;
          int v64 = v50;
          int v65 = v49;
          int v66 = v48;
          uint64_t v67 = v14;
          uint64_t v68 = v13;
          int v69 = v53;
          int v70 = v47;
          int v71 = v22;
          int v72 = v18;
          int v73 = v43;
          int v74 = v45;
          int v75 = v44;
          int v37 = _ViewInputs.transform.getter();
          uint64_t v60 = v6;
          LODWORD(v61) = v52;
          uint64_t v62 = v8;
          int v63 = v51;
          int v64 = v50;
          int v65 = v49;
          int v66 = v48;
          uint64_t v67 = v14;
          uint64_t v68 = v13;
          int v69 = v53;
          int v70 = v47;
          int v71 = v22;
          int v72 = v18;
          int v73 = v43;
          int v74 = v45;
          int v75 = v44;
          int v36 = _ViewInputs.animatedSize()();
          uint64_t v60 = v6;
          LODWORD(v61) = v52;
          uint64_t v62 = v8;
          int v63 = v51;
          int v64 = v50;
          int v65 = v49;
          int v66 = v48;
          uint64_t v67 = v14;
          uint64_t v68 = v13;
          int v69 = v53;
          int v70 = v47;
          int v71 = v22;
          int v72 = v18;
          int v73 = v43;
          int v74 = v45;
          int v75 = v44;
          swift_getKeyPath();
          int v32 = _ViewInputs.mapEnvironment<A>(_:)();
          swift_release();
          uint64_t v56 = 1;
          long long v57 = 0u;
          long long v58 = 0u;
          char v59 = 2;
          int v5 = v46;
          outlined init with copy of CoordinateSpace((uint64_t)&v56, (uint64_t)&v61);
          BYTE1(v68) = 0;
          swift_release();
          uint64_t v60 = v41;
          HIDWORD(v68) = v40;
          int v69 = v39;
          int v70 = v38;
          int v71 = v37;
          int v72 = v36;
          int v73 = v32;
          outlined destroy of CoordinateSpace((uint64_t)&v56);
          protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
          _sSay7SwiftUI13ViewResponderCGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
          lazy protocol witness table accessor for type HoverResponderChild and conformance HoverResponderChild();
          Attribute.init<A>(body:value:flags:update:)();
          outlined destroy of HoverResponderChild((uint64_t)&v60);
          static AGAttributeFlags.removable.getter();
          AGGraphGetFlags();
          AGGraphSetFlags();
          LOBYTE(v60) = 0;
          _ViewOutputs.subscript.setter();
          swift_release();
          a4 = v42;
          goto LABEL_16;
        }
        swift_release();
      }
      a4 = v42;
    }
    else
    {
      swift_unknownObjectRelease();
    }
    int v5 = v46;
  }
LABEL_16:
  lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v60)
  {
    LODWORD(v60) = v5;
    type metadata accessor for _GraphValue<PointerHoverEffectModifier>(0, &lazy cache variable for type metadata for _GraphValue<_HoverRegionModifier>, (uint64_t)&type metadata for _HoverRegionModifier, MEMORY[0x1E4F3F590]);
    uint64_t v33 = _GraphValue.value.getter();
    MEMORY[0x1F4188790](v33);
    uint64_t v60 = v13;
    LODWORD(v61) = v53;
    MEMORY[0x1F4188790](v34);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  *(void *)a4 = v54;
  double result = v55;
  a4[1] = v55;
  return result;
}

double static PlatformItemListTransformModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  int v9 = *a1;
  int v10 = *(_DWORD *)(a2 + 8);
  uint64_t v11 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 40);
  unint64_t v12 = *(void *)(a2 + 48);
  int v14 = *(_DWORD *)(a2 + 80);
  unint64_t v28 = *(void *)a2;
  LODWORD(v29) = v10;
  uint64_t v30 = v11;
  long long v31 = *(_OWORD *)(a2 + 24);
  uint64_t v32 = v13;
  unint64_t v33 = v12;
  long long v25 = *(_OWORD *)(a2 + 56);
  long long v34 = v25;
  uint64_t v35 = *(void *)(a2 + 72);
  int v36 = v14;
  a3(&v26);
  lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v15 = v28;
  if (((*(unsigned int (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5) & ~v15) == 0)
  {
    unint64_t v28 = v12;
    LODWORD(v29) = v25;
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LODWORD(v28) = v9;
      type metadata accessor for PlatformItemListTransformModifier();
      type metadata accessor for _GraphValue();
      unsigned int v16 = _GraphValue.value.getter();
      unint64_t v28 = v26;
      double v29 = v27;
      uint64_t v17 = _ViewOutputs.subscript.getter();
      unsigned int v18 = *MEMORY[0x1E4F4E7A0];
      if ((v17 & 0x100000000) == 0) {
        unsigned int v18 = v17;
      }
      unint64_t v28 = __PAIR64__(v18, v16);
      MEMORY[0x1F4188790](v17);
      uint64_t v23 = type metadata accessor for PlatformItemListTransformModifier.Transform();
      uint64_t WitnessTable = swift_getWitnessTable();
      _s7SwiftUI5ImageVAAE8ResolvedVSgMaTm_0(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v28, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_18, (uint64_t)&v22, v23, MEMORY[0x1E4FBC248], v19, MEMORY[0x1E4FBC278], v20);
      LOBYTE(v28) = 0;
      _ViewOutputs.subscript.setter();
    }
  }
  *(void *)a6 = v26;
  double result = v27;
  a6[1] = v27;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance AccessibilityLargeContentViewHitTestingTransform()
{
  return 8;
}

unint64_t lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput;
  if (!lazy protocol witness table cache variable for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput;
  if (!lazy protocol witness table cache variable for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput);
  }
  return result;
}

uint64_t type metadata accessor for PlatformItemListTransformModifier.Transform()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _HoverRegionModifier.Callback and conformance _HoverRegionModifier.Callback()
{
  unint64_t result = lazy protocol witness table cache variable for type _HoverRegionModifier.Callback and conformance _HoverRegionModifier.Callback;
  if (!lazy protocol witness table cache variable for type _HoverRegionModifier.Callback and conformance _HoverRegionModifier.Callback)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _HoverRegionModifier.Callback and conformance _HoverRegionModifier.Callback);
  }
  return result;
}

uint64_t type metadata accessor for HoverResponder()
{
  uint64_t result = type metadata singleton initialization cache for HoverResponder;
  if (!type metadata singleton initialization cache for HoverResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t HoverResponder.init(inputs:)()
{
  swift_retain();
  ContentResponderHelper.init()();
  *(void *)(v0 + 448) = 0;
  *(void *)(v0 + 456) = 0;
  *(_WORD *)(v0 + 464) = 257;
  *(void *)(v0 + 216) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(void *)(v0 + 224) = 0;
  *(unsigned char *)(v0 + 232) = 1;
  ViewTransform.init()();
  *(void *)(v0 + 240) = v4;
  *(_OWORD *)(v0 + 248) = v5;
  *(_OWORD *)(v0 + 264) = v6;
  static CGSize.invalidValue.getter();
  *(void *)(v0 + 280) = v1;
  *(void *)(v0 + 288) = v2;
  *(void *)(v0 + 296) = 1;
  *(_OWORD *)(v0 + 304) = 0u;
  *(_OWORD *)(v0 + 320) = 0u;
  *(unsigned char *)(v0 + 336) = 2;
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t outlined destroy of HoverResponderChild(uint64_t a1)
{
  return a1;
}

uint64_t destroy for HoverResponderChild(uint64_t a1)
{
  uint64_t result = swift_release();
  if ((*(unsigned char *)(a1 + 49) & 1) == 0 && !*(unsigned char *)(a1 + 48))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HoverResponderChild and conformance HoverResponderChild()
{
  unint64_t result = lazy protocol witness table cache variable for type HoverResponderChild and conformance HoverResponderChild;
  if (!lazy protocol witness table cache variable for type HoverResponderChild and conformance HoverResponderChild)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverResponderChild and conformance HoverResponderChild);
  }
  return result;
}

uint64_t outlined init with copy of CoordinateSpace(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t type metadata accessor for EventGraphHost()
{
  unint64_t result = lazy cache variable for type metadata for EventGraphHost;
  if (!lazy cache variable for type metadata for EventGraphHost)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for EventGraphHost);
  }
  return result;
}

uint64_t protocol witness for static PlatformItemListFlags.flags.getter in conformance TextPlatformItemListFlags()
{
  return 4;
}

uint64_t protocol witness for static PlatformItemListFlags.flags.getter in conformance LabelPlatformItemListFlags()
{
  return 22;
}

uint64_t protocol witness for Rule.value.getter in conformance PlatformItemListNamedImageRepresentable.NamedResolvedRule@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, void *a3@<X8>)
{
  int v7 = *v3;
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = v7;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = v8;
  *a3 = a2;
  a3[1] = result;
  return result;
}

void *@objc PlatformViewHost._traitCollection(forChildEnvironment:)(void *a1, uint64_t a2, uint64_t a3)
{
  swift_unknownObjectRetain();
  id v5 = a1;
  long long v6 = PlatformViewHost._traitCollection(forChildEnvironment:)(a3);
  swift_unknownObjectRelease();

  return v6;
}

void *PlatformViewHost._traitCollection(forChildEnvironment:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  id v5 = (void *)MEMORY[0x1E4FBC8C8];
  if (((*(uint64_t (**)(void))(*(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x58) + 128))() & 1) == 0) {
    goto LABEL_4;
  }
  v21.id receiver = v1;
  v21.Class super_class = ObjectType;
  id v5 = objc_msgSendSuper2(&v21, sel__traitCollectionForChildEnvironment_, a1);
  if (!v5)
  {
    __break(1u);
LABEL_4:
    id v6 = objc_msgSend(v1, sel_traitCollection);
    int v7 = (void *)((char *)v2 + *(void *)((*v5 & *v2) + 0x68));
    swift_beginAccess();
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    int v10 = *(_DWORD *)((char *)v2 + *(void *)((*v5 & *v2) + 0x70));
    uint64_t v11 = (char *)v2 + *(void *)((*v5 & *v2) + 0x90);
    uint64_t v12 = *(void *)v11;
    char v13 = v11[8];
    int v14 = *((_DWORD *)v11 + 3);
    int v15 = (objc_class *)type metadata accessor for EnvironmentWrapper();
    unsigned int v16 = (char *)objc_allocWithZone(v15);
    uint64_t v17 = &v16[OBJC_IVAR___SwiftUIEnvironmentWrapper_environment];
    *(void *)uint64_t v17 = v8;
    *((void *)v17 + 1) = v9;
    *(_DWORD *)&v16[OBJC_IVAR___SwiftUIEnvironmentWrapper_phase] = v10;
    unsigned int v18 = &v16[OBJC_IVAR___SwiftUIEnvironmentWrapper_focusedValues];
    *(void *)unsigned int v18 = v12;
    v18[8] = v13;
    *((_DWORD *)v18 + 3) = v14;
    v22.id receiver = v16;
    v22.Class super_class = v15;
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    id v19 = objc_msgSendSuper2(&v22, sel_init);
    MEMORY[0x1F4188790](v19);
    id v5 = (void *)UITraitCollection._modifyingTraits(environmentWrapper:mutations:)();
    swift_release();
    swift_release();
    swift_release();
  }
  return v5;
}

uint64_t protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key()
{
  return 1;
}

Swift::Void __swiftcall UIHostingController._commonInit()()
{
  uint64_t v1 = v0;
  id v2 = (id)specialized UIHostingController.host.getter();
  uint64_t v3 = v1;
  specialized _UIHostingView.viewController.setter();

  MEMORY[0x18C113CA0]();
  uint64_t v4 = *(void *)&v3[direct field offset for UIHostingController.dialogBridge];
  swift_unknownObjectWeakAssign();
  specialized UIHostingController.host.getter();
  type metadata accessor for _UIHostingView();
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)(v4 + 32) = WitnessTable;
  swift_unknownObjectWeakAssign();
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  if (specialized UIHostingController.alwaysOnBridge.getter()) {
    swift_unknownObjectWeakAssign();
  }
  if (specialized UIHostingController.alwaysOnBridge.getter())
  {
    specialized UIHostingController.host.getter();
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    swift_retain();
    specialized AlwaysOnBridge.addPreferences(to:)();
    swift_release();
    swift_release();
  }
  uint64_t v6 = *(void *)&v3[direct field offset for UIHostingController.fileImportExportBridge];
  specialized UIHostingController.host.getter();
  *(void *)(v6 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host + 8) = WitnessTable;
  swift_unknownObjectWeakAssign();
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  specialized UIHostingController.host.getter();
  uint64_t ObjectType = swift_getObjectType();
  if (((*(uint64_t (**)(void))(ObjectType + 1200))() & 1) == 0)
  {
    type metadata accessor for UIKitInspectorV3Bridge();
    id v8 = PencilEventsBridge.__allocating_init()();
    specialized UIHostingController.host.getter();
    swift_unknownObjectWeakAssign();
    specialized UIHostingController.host.getter();
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    specialized UIKitInspectorV3Bridge.addPreferences(to:)();
    swift_release();
    id v9 = (id)specialized UIHostingController.host.getter();
    id v10 = v8;
    _UIHostingView.inspectorBridge.setter((uint64_t)v8);
  }
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  uint64_t v11 = swift_retain();
  UIHostingController.addScreenEdgesSystemGesturePreferences(to:)(v11);
  swift_release();
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  uint64_t v12 = swift_retain();
  UIHostingController.addPersistentSystemOverlaysPreferences(to:)(v12);
  swift_release();
  if (one-time initialization token for isEnabled != -1) {
    swift_once();
  }
  if (static ValidTestCasesFeature.isEnabled == 1)
  {
    type metadata accessor for PPTTestBridge();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 24) = 0;
    swift_unknownObjectWeakInit();
    *(unsigned char *)(v13 + 32) = 0;
    *(_OWORD *)(v13 + 40) = xmmword_18834BB90;
    *(void *)(v13 + 64) = 0;
    *(void *)(v13 + 72) = 0;
    *(void *)(v13 + 56) = 0;
    *(_DWORD *)(v13 + 80) = 0;
    UIHostingController.testBridge.setter(v13);
    uint64_t v14 = specialized UIHostingController.testBridge.getter();
    if (v14)
    {
      uint64_t v15 = v14;
      specialized UIHostingController.host.getter();
      *(void *)(v15 + 24) = WitnessTable;
      swift_unknownObjectWeakAssign();
    }
  }
  uint64_t v16 = *(void *)&v3[direct field offset for UIHostingController.backgroundBridge];
  swift_unknownObjectWeakAssign();
  specialized UIHostingController.host.getter();
  *(void *)(v16 + 72) = WitnessTable;
  swift_unknownObjectWeakAssign();
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  if (*(unsigned char *)(v16 + 137) != 5)
  {
    uint64_t v17 = swift_retain();
    ContainerBackgroundKind.Builtin.addPreference(to:)(v17);
    swift_release();
  }
  type metadata accessor for SharingActivityPickerBridge();
  SharingActivityPickerBridge.__allocating_init()();
  specialized UIHostingController.host.getter();
  swift_unknownObjectWeakAssign();
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  specialized SharingActivityPickerBridge.addPreferences(to:)();
  swift_release();
  id v18 = (id)specialized UIHostingController.host.getter();
  uint64_t v19 = swift_retain();
  _UIHostingView.sharingActivityPickerBridge.setter(v19);

  type metadata accessor for ShareConfigurationBridge();
  ShareConfigurationBridge.__allocating_init()();
  specialized UIHostingController.host.getter();
  swift_unknownObjectWeakAssign();
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  specialized ShareConfigurationBridge.addPreferences(to:)();
  swift_release();
  id v20 = (id)specialized UIHostingController.host.getter();
  uint64_t v21 = swift_retain();
  _UIHostingView.shareConfigurationBridge.setter(v21);

  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.addPreference<A>(_:)();
  swift_release();
  swift_release();
  swift_release();

  static Update.end()();
}

uint64_t UIHostingController.resolveRequiredBridges(in:allowedActions:)(uint64_t *a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  MEMORY[0x18C113CA0]();
  uint64_t v7 = v5;
  uint64_t v8 = v6;
  if (v6 == 1)
  {
    specialized UIHostingController.host.getter();
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    GraphHost.environment.getter();
    swift_release();
    uint64_t v8 = v35;
    uint64_t v7 = v36;
  }
  if (v8)
  {
    if ((a2 & 3) != 0)
    {
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = UIHostingController.requiredBridges.getter();
      uint64_t v32 = v9;
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBridgesKey, MEMORY[0x1E4F40930]);
      outlined copy of EnvironmentValues?(v6);
      if (v7)
      {
        lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBridgesKey);
        swift_retain_n();
        swift_retain_n();
        PropertyList.Tracker.value<A>(_:for:)();
        swift_release_n();
      }
      else
      {
        uint64_t v7 = 0;
        lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBridgesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBridgesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBridgesKey);
        swift_retain_n();
        PropertyList.subscript.getter();
      }
      swift_release_n();
      char v11 = v35;
      uint64_t v12 = (uint64_t)objc_msgSend(v3, sel_navigationController);
      char v34 = v35;
      if (!v12)
      {
        UIHostingController.overrides.getter((uint64_t)&v35);
        char v11 = v34;
        uint64_t v12 = MEMORY[0x18C119DF0](&v37);
        outlined destroy of HostingControllerOverrides((uint64_t)&v35);
      }
      unint64_t v33 = (unint64_t)objc_msgSend(v3, sel_tabBarController);
      if (v12)
      {
        if ((v11 & 4) == 0)
        {
          update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(4, objc_msgSend((id)v12, sel__supportsDataDrivenNavigation) ^ 1, a2 & 1, v9, (a2 & 2) != 0);
          goto LABEL_24;
        }
      }
      else if (specialized UIHostingController.navigationBridge.getter())
      {
        swift_retain();
        BOOL v13 = UIKitNavigationBridge.isInTransientPop.getter();
        swift_release();
        if (v13)
        {
          char v14 = 1;
LABEL_22:
          update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(4, v14, a2 & 1, v32, (a2 & 2) != 0);
          if (!(v12 | v33))
          {
            uint64_t v15 = (void *)specialized UIHostingController.host.getter();
            type metadata accessor for _UIHostingView();
            id v16 = v15;
            swift_getWitnessTable();
            char v17 = ViewRendererHost.isRootHost.getter();

            if ((v17 & 1) == 0)
            {
              char v19 = 0;
              char v18 = v34;
LABEL_25:
              update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(1, v19, a2 & 1, v32, (a2 & 2) != 0);
              static Semantics.v3.getter();
              char v20 = isLinkedOnOrAfter(_:)();
              update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(16, v20 & ((v18 & 0x10) == 0), a2 & 1, v32, (a2 & 2) != 0);
              uint64_t v21 = (void *)specialized UIHostingController.host.getter();
              type metadata accessor for _UIHostingView();
              id v22 = v21;
              swift_getWitnessTable();
              char v23 = ViewRendererHost.isRootHost.getter();

              if ((v23 & 1) != 0
                && (id v24 = objc_msgSend((id)specialized UIHostingController.host.getter(), sel_window)) != 0)
              {

                char v25 = 1;
              }
              else
              {
                char v25 = 0;
              }
              update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(2, v25, a2 & 1, v32, (a2 & 2) != 0);
              id v26 = (id)specialized UIHostingController.host.getter();
              char v27 = ViewRendererHost.isRootHost.getter();

              if ((v27 & 1) != 0
                && (id v28 = objc_msgSend((id)specialized UIHostingController.host.getter(), sel_window)) != 0)
              {

                char v29 = 1;
              }
              else
              {
                char v29 = 0;
              }
              update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(32, v29, a2 & 1, v32, (a2 & 2) != 0);
              if (v34 < 0)
              {
                char v31 = 0;
              }
              else
              {
                specialized UIHostingController.host.getter();
                uint64_t ObjectType = swift_getObjectType();
                char v31 = (*(uint64_t (**)(void))(ObjectType + 1200))() ^ 1;
              }
              update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(128, v31 & 1, a2 & 1, v32, (a2 & 2) != 0);
              swift_beginAccess();
              UIHostingController.requiredBridges.setter(*(void *)(v32 + 16));
              swift_release();

              v38[0] = v8;
              v38[1] = v7;
              UIHostingController.resolveBarAppearanceBehavior(in:)((uint64_t)v38);
              swift_release();
              swift_release();
              return static Update.end()();
            }
          }
LABEL_24:
          char v18 = v34;
          char v19 = (v34 & 1) == 0;
          goto LABEL_25;
        }
      }
      char v14 = 0;
      goto LABEL_22;
    }
    outlined copy of EnvironmentValues?(v6);
    uint64_t v35 = v8;
    uint64_t v36 = v7;
    UIHostingController.resolveBarAppearanceBehavior(in:)((uint64_t)&v35);
    swift_release();
  }
  else
  {
    outlined copy of EnvironmentValues?(v6);
  }
  swift_release();

  return static Update.end()();
}

uint64_t update #1 <A>(bridge:isNeeded:) in UIHostingController.resolveRequiredBridges(in:allowedActions:)(uint64_t result, char a2, char a3, uint64_t a4, char a5)
{
  uint64_t v5 = result;
  uint64_t v6 = (uint64_t *)(a4 + 16);
  if (a2)
  {
    if (a3)
    {
      uint64_t result = swift_beginAccess();
      if ((v5 & ~*v6) != 0)
      {
        uint64_t v7 = *v6 | v5;
LABEL_8:
        *uint64_t v6 = v7;
      }
    }
  }
  else if (a5)
  {
    uint64_t result = swift_beginAccess();
    if ((*v6 & v5) != 0)
    {
      uint64_t v7 = *v6 & ~v5;
      goto LABEL_8;
    }
  }
  return result;
}

unint64_t UIHostingController._childForStatusBarHidden.getter()
{
  unint64_t v1 = (unint64_t)v0;
  specialized UIHostingController.host.getter();
  if (_UIHostingView.prefersStatusBarHidden.getter() != 2) {
    return 0;
  }
  specialized UIHostingController.host.getter();
  if ((_UIHostingView.shouldDeferToChildViewControllerForStatusBar.getter() & 1) == 0) {
    return 0;
  }
  id v2 = objc_msgSend(v0, sel_childViewControllers);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    uint64_t v4 = *(char **)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v4) {
      goto LABEL_11;
    }
LABEL_5:
    uint64_t v5 = v4 - 1;
    if (__OFSUB__(v4, 1))
    {
      __break(1u);
    }
    else if ((v3 & 0xC000000000000001) == 0)
    {
      if (((unint64_t)v5 & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if ((unint64_t)v5 < *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        uint64_t v6 = (char *)*(id *)(v3 + 8 * (void)v5 + 32);
LABEL_10:
        uint64_t v4 = v6;
        goto LABEL_11;
      }
      __break(1u);
      goto LABEL_26;
    }
    uint64_t v6 = (char *)MEMORY[0x18C117680](v5, v3);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = (char *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v4) {
    goto LABEL_5;
  }
LABEL_11:
  swift_bridgeObjectRelease();
  id v7 = objc_msgSend(v4, sel_childViewControllerForStatusBarHidden);

  if (v7) {
    return (unint64_t)v7;
  }
  id v8 = objc_msgSend(v0, sel_childViewControllers);
  unint64_t v1 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v1 >> 62))
  {
    uint64_t v9 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_14;
    }
    goto LABEL_27;
  }
LABEL_26:
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9)
  {
LABEL_27:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_14:
  unint64_t result = v9 - 1;
  if (__OFSUB__(v9, 1))
  {
    __break(1u);
    goto LABEL_31;
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_31:
    id v11 = (id)MEMORY[0x18C117680](result, v1);
    goto LABEL_19;
  }
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (result < *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v11 = *(id *)(v1 + 8 * result + 32);
LABEL_19:
    id v7 = v11;
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  __break(1u);
  return result;
}

uint64_t specialized UIHostingController.host.getter()
{
  return *(void *)(v0 + direct field offset for UIHostingController.host);
}

uint64_t _UIHostingView.shouldDeferToChildViewControllerForStatusBar.getter()
{
  return *(unsigned __int8 *)(specialized _UIHostingView.statusBarBridge.getter() + 17);
}

uint64_t _UIHostingView.prefersStatusBarHidden.getter()
{
  return *(unsigned __int8 *)(specialized _UIHostingView.statusBarBridge.getter() + 16);
}

uint64_t specialized _UIHostingView.statusBarBridge.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130));
}

uint64_t UIHostingController.requiredBridges.getter()
{
  return *(void *)(v0 + direct field offset for UIHostingController.requiredBridges);
}

Swift::Void __swiftcall UIHostingController.didChangeRequiredBridges(from:to:)(SwiftUI::HostingControllerBridges from, SwiftUI::HostingControllerBridges to)
{
  if (to.rawValue != from.rawValue)
  {
    unint64_t v3 = v2;
    rawuint64_t Value = from.rawValue;
    MEMORY[0x18C113CA0]();
    char v5 = rawValue & ~UIHostingController.requiredBridges.getter();
    char v6 = UIHostingController.requiredBridges.getter() & ~rawValue;
    if ((v5 & 2) != 0)
    {
      uint64_t v8 = specialized UIHostingController.keyboardShortcutBridge.getter();
      if (v8)
      {
        uint64_t v9 = (void *)v8;
        specialized UIHostingController.host.getter();
        specialized _UIHostingView.viewGraph.getter();
        id v10 = v9;
        swift_retain();
        GraphHost.removePreference<A>(_:)();
        v10[OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_isObservingPreferences] = 0;

        swift_release();
      }
      uint64_t v11 = specialized UIHostingController.keyboardShortcutBridge.getter();
      if (v11)
      {
        uint64_t v12 = (void *)v11;
        v32[3] = type metadata accessor for UIHostingController();
        v32[4] = &protocol witness table for UIHostingController<A>;
        v32[0] = v3;
        id v13 = v12;
        id v14 = v3;
        KeyboardShortcutBridge.flushKeyCommands(_:)((uint64_t)v32);

        outlined destroy of KeyboardShortcutSource?((uint64_t)v32);
      }
      id v7 = 0;
    }
    else
    {
      if ((v6 & 2) == 0) {
        goto LABEL_11;
      }
      id v7 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for KeyboardShortcutBridge()), sel_init);
    }
    UIHostingController.keyboardShortcutBridge.setter((uint64_t)v7);
LABEL_11:
    if ((v5 & 4) != 0)
    {
      if (specialized UIHostingController.navigationBridge.getter())
      {
        specialized UIHostingController.host.getter();
        specialized _UIHostingView.viewGraph.getter();
        swift_retain();
        swift_retain();
        specialized UIKitNavigationBridge.removePreferences(from:)();
        swift_release();
        swift_release();
      }
      UIHostingController.navigationBridge.setter(0);
      if ((v5 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_39;
    }
    if ((v6 & 4) != 0)
    {
      type metadata accessor for NavigationBridge_PhoneTV();
      uint64_t v15 = NavigationBridge_PhoneTV.__allocating_init()();
      UIHostingController.navigationBridge.setter(v15);
      if (specialized UIHostingController.navigationBridge.getter())
      {
        swift_unknownObjectWeakAssign();
        if (specialized UIHostingController.navigationBridge.getter())
        {
          specialized UIHostingController.host.getter();
          specialized _UIHostingView.viewGraph.getter();
          swift_retain();
          swift_retain();
          specialized UIKitNavigationBridge.addPreferences(to:)();
          swift_release();
          swift_release();
          goto LABEL_16;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_55;
    }
LABEL_16:
    if ((v5 & 1) == 0)
    {
LABEL_17:
      if ((v6 & 1) == 0) {
        goto LABEL_20;
      }
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>(0, (unint64_t *)&lazy cache variable for type metadata for ToolbarBridge<UIKitToolbarStrategy>, (uint64_t)&type metadata for UIKitToolbarStrategy, (uint64_t)&protocol witness table for UIKitToolbarStrategy, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for ToolbarBridge);
      UIHostingController.toolbarBridge.setter((uint64_t)objc_msgSend(objc_allocWithZone(v16), sel_init));
      uint64_t v17 = specialized UIHostingController.toolbarBridge.getter();
      if (v17)
      {
        char v18 = (void *)v17;
        specialized UIHostingController.host.getter();
        specialized _UIHostingView.viewGraph.getter();
        id v19 = v18;
        swift_retain();
        GraphHost.addPreference<A>(_:)();
        GraphHost.addPreference<A>(_:)();
        GraphHost.addPreference<A>(_:)();
        GraphHost.addPreference<A>(_:)();

        swift_release();
LABEL_20:
        if ((v5 & 0x10) == 0) {
          goto LABEL_21;
        }
        goto LABEL_42;
      }
LABEL_55:
      __break(1u);
      goto LABEL_56;
    }
LABEL_39:
    uint64_t v26 = specialized UIHostingController.toolbarBridge.getter();
    if (v26)
    {
      char v27 = (void *)v26;
      specialized UIHostingController.host.getter();
      specialized _UIHostingView.viewGraph.getter();
      id v28 = v27;
      swift_retain();
      GraphHost.removePreference<A>(_:)();
      GraphHost.removePreference<A>(_:)();
      GraphHost.removePreference<A>(_:)();
      GraphHost.removePreference<A>(_:)();

      swift_release();
    }
    UIHostingController.toolbarBridge.setter(0);
    if ((v5 & 0x10) == 0)
    {
LABEL_21:
      if ((v6 & 0x10) == 0) {
        goto LABEL_25;
      }
      type metadata accessor for UIKitContentScrollViewBridge();
      uint64_t v20 = swift_allocObject();
      swift_unknownObjectWeakInit();
      *(_DWORD *)(v20 + 24) = -1;
      *(void *)(v20 + 32) = MEMORY[0x1E4FBC868];
      *(void *)(v20 + 40) = 0;
      *(void *)(v20 + 48) = 0x3FF0000000000000;
      UIHostingController.contentScrollViewBridge.setter(v20);
      if (specialized UIHostingController.contentScrollViewBridge.getter())
      {
        swift_unknownObjectWeakAssign();
        if (specialized UIHostingController.contentScrollViewBridge.getter())
        {
          specialized UIHostingController.host.getter();
          specialized _UIHostingView.viewGraph.getter();
          swift_retain();
          swift_retain();
          GraphHost.addPreference<A>(_:)();
          swift_release();
          swift_release();
LABEL_25:
          if ((v5 & 0x20) == 0) {
            goto LABEL_26;
          }
          goto LABEL_45;
        }
LABEL_57:
        __break(1u);
        goto LABEL_58;
      }
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }
LABEL_42:
    if (specialized UIHostingController.contentScrollViewBridge.getter())
    {
      specialized UIHostingController.host.getter();
      specialized _UIHostingView.viewGraph.getter();
      swift_retain();
      swift_retain();
      GraphHost.removePreference<A>(_:)();
      swift_release();
      swift_release();
    }
    UIHostingController.contentScrollViewBridge.setter(0);
    if ((v5 & 0x20) == 0)
    {
LABEL_26:
      if ((v6 & 0x20) == 0) {
        goto LABEL_30;
      }
      type metadata accessor for AlwaysOnBridge();
      uint64_t v21 = AlwaysOnBridge.__allocating_init()();
      UIHostingController.alwaysOnBridge.setter(v21);
      if (specialized UIHostingController.alwaysOnBridge.getter())
      {
        swift_unknownObjectWeakAssign();
        if (specialized UIHostingController.alwaysOnBridge.getter())
        {
          specialized UIHostingController.host.getter();
          specialized _UIHostingView.viewGraph.getter();
          swift_retain();
          swift_retain();
          specialized AlwaysOnBridge.addPreferences(to:)();
          swift_release();
          swift_release();
LABEL_30:
          if ((v5 & 0x80) == 0)
          {
LABEL_31:
            if (v6 < 0)
            {
              type metadata accessor for UIKitInspectorBridgeV5();
              id v22 = PencilEventsBridge.__allocating_init()();
              UIHostingController.inspectorBridgeV5.setter((uint64_t)v22);
              if (specialized UIHostingController.inspectorBridgeV5.getter())
              {
                specialized UIHostingController.host.getter();
                specialized SheetBridge.host.setter();
              }
              uint64_t v23 = specialized UIHostingController.inspectorBridgeV5.getter();
              if (v23)
              {
                id v24 = (void *)v23;
                specialized UIHostingController.host.getter();
                specialized _UIHostingView.viewGraph.getter();
                id v25 = v24;
                swift_retain();
                specialized UIKitInspectorBridgeV5.addPreferences(to:)();

                swift_release();
              }
            }
LABEL_51:
            static Update.end()();
            return;
          }
LABEL_48:
          uint64_t v29 = specialized UIHostingController.inspectorBridgeV5.getter();
          if (v29)
          {
            uint64_t v30 = (void *)v29;
            specialized UIHostingController.host.getter();
            specialized _UIHostingView.viewGraph.getter();
            id v31 = v30;
            swift_retain();
            specialized UIKitInspectorBridgeV5.removePreferences(from:)();

            swift_release();
          }
          UIHostingController.inspectorBridgeV5.setter(0);
          goto LABEL_51;
        }
LABEL_59:
        __break(1u);
        return;
      }
LABEL_58:
      __break(1u);
      goto LABEL_59;
    }
LABEL_45:
    if (specialized UIHostingController.alwaysOnBridge.getter())
    {
      specialized UIHostingController.host.getter();
      specialized _UIHostingView.viewGraph.getter();
      swift_retain();
      swift_retain();
      specialized AlwaysOnBridge.removePreferences(from:)();
      swift_release();
      swift_release();
    }
    UIHostingController.alwaysOnBridge.setter(0);
    if ((v5 & 0x80) == 0) {
      goto LABEL_31;
    }
    goto LABEL_48;
  }
}

void UIHostingController.requiredBridges.setter(uint64_t a1)
{
  v2.rawuint64_t Value = *(void *)(v1 + direct field offset for UIHostingController.requiredBridges);
  *(void *)(v1 + direct field offset for UIHostingController.requiredBridges) = a1;
  UIHostingController.didChangeRequiredBridges(from:to:)(v2, *(SwiftUI::HostingControllerBridges *)(v1 + direct field offset for UIHostingController.requiredBridges));
}

void UIHostingController.resolveBarAppearanceBehavior(in:)(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ManagedBarAppearancesKey>, (uint64_t)&type metadata for EnvironmentValues.ManagedBarAppearancesKey, (uint64_t)&protocol witness table for EnvironmentValues.ManagedBarAppearancesKey);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v1 = UIHostingController.allowedBehaviors.getter();
  uint64_t v2 = specialized UIHostingController.barAppearanceBridge.getter();
  if (*(void *)(v17 + 16))
  {
    if (v2) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v2)
    {
      if (v1) {
        goto LABEL_14;
      }
      uint64_t v3 = specialized UIHostingController.barAppearanceBridge.getter();
      if (v3)
      {
        uint64_t v4 = (void *)v3;
        specialized UIHostingController.host.getter();
        specialized _UIHostingView.viewGraph.getter();
        id v5 = v4;
        swift_retain();
        GraphHost.removePreference<A>(_:)();
        GraphHost.removePreference<A>(_:)();

        swift_release();
        UIHostingController.barAppearanceBridge.setter(0);
        goto LABEL_14;
      }
LABEL_21:
      __break(1u);
      return;
    }
    if ((v1 & 1) == 0) {
      goto LABEL_14;
    }
  }
  id v6 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BarAppearanceBridge()), sel_init);
  UIHostingController.barAppearanceBridge.setter((uint64_t)v6);
  uint64_t v7 = specialized UIHostingController.barAppearanceBridge.getter();
  if (!v7)
  {
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v8 = (void *)v7;
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  id v9 = v8;
  swift_retain();
  BarAppearanceBridge.addPreferences(to:)();

  swift_release();
LABEL_14:
  uint64_t v10 = specialized UIHostingController.barAppearanceBridge.getter();
  if (v10)
  {
    uint64_t v11 = (void *)v10;
    specialized UIHostingController.host.getter();
    uint64_t v12 = specialized _UIHostingView.viewGraph.getter();
    id v13 = v11;
    swift_retain();
    BarAppearanceBridge.updateAllowedBars(_:viewGraph:)(v17, v12);
    swift_release();
    uint64_t v14 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage;
    if (v1)
    {
      v13[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage] = *(void *)(v17 + 16) != 0;
      uint64_t v16 = *(void *)(v17 + 16);
      swift_bridgeObjectRelease();
      BOOL v15 = v16 == 0;
    }
    else
    {
      v13[OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage] = 1;
      swift_bridgeObjectRelease();
      BOOL v15 = 0;
    }
    v13[v14 + 16] = v15;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
}

uint64_t specialized UIHostingController.barAppearanceBridge.getter()
{
  return *(void *)(v0 + direct field offset for UIHostingController.barAppearanceBridge);
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.WithCurrentHostingControllerKey>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t BarAppearanceBridge.updateAllowedBars(_:viewGraph:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars;
  uint64_t v7 = *(void *)(v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars);
  if (*(void *)(a1 + 16) <= *(void *)(v7 + 16) >> 3)
  {
    swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(a1);
    uint64_t v8 = v7;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v8 = specialized _NativeSet.subtracting<A>(_:)(a1, v7);
  }
  if (*(void *)(*(void *)(v3 + v6) + 16) <= *(void *)(a1 + 16) >> 3)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = swift_bridgeObjectRetain();
    specialized Set._subtract<A>(_:)(v11);
    swift_bridgeObjectRelease();
    uint64_t v10 = a1;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = swift_bridgeObjectRetain();
    uint64_t v10 = specialized _NativeSet.subtracting<A>(_:)(v9, a1);
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = (char **)(v3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_seedTracker);
  swift_beginAccess();
  Set<>.updatePreferences(viewGraph:tracker:isAdding:)(a2, v12, 0, v8);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  Set<>.updatePreferences(viewGraph:tracker:isAdding:)(a2, v12, 1, v10);
  swift_endAccess();
  swift_bridgeObjectRelease();
  *(void *)(v3 + v6) = a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t Set<>.updatePreferences(viewGraph:tracker:isAdding:)(uint64_t a1, char **a2, char a3, uint64_t a4)
{
  uint64_t v8 = a4 + 56;
  uint64_t v9 = 1 << *(unsigned char *)(a4 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a4 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v17 >= v12) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v14;
    if (!v18)
    {
      int64_t v14 = v17 + 1;
      if (v17 + 1 >= v12) {
        return swift_release();
      }
      unint64_t v18 = *(void *)(v8 + 8 * v14);
      if (!v18)
      {
        int64_t v14 = v17 + 2;
        if (v17 + 2 >= v12) {
          return swift_release();
        }
        unint64_t v18 = *(void *)(v8 + 8 * v14);
        if (!v18) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v11 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v14 << 6);
LABEL_5:
    outlined init with copy of ToolbarPlacement.Role(*(void *)(a4 + 48) + 40 * v16, (uint64_t)v20);
    ToolbarPlacement.Role.updatePreference(viewGraph:tracker:isAdding:)(a1, a2, a3 & 1);
    uint64_t result = outlined destroy of ToolbarPlacement.Role((uint64_t)v20);
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v12) {
    return swift_release();
  }
  unint64_t v18 = *(void *)(v8 + 8 * v19);
  if (v18)
  {
    int64_t v14 = v19;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v14 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v14 >= v12) {
      return swift_release();
    }
    unint64_t v18 = *(void *)(v8 + 8 * v14);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  v51[5] = *MEMORY[0x1E4F143B8];
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  v51[0] = a1;
  v51[1] = a1 + 56;
  uint64_t v36 = a1 + 56;
  uint64_t v37 = a1;
  uint64_t v34 = ~v3;
  v51[2] = ~v3;
  uint64_t v6 = a2 + 56;
  unint64_t v7 = (unint64_t)(63 - v3) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  int64_t v35 = v7;
  unint64_t v9 = v7 - 6;
  uint64_t v10 = v37;
  uint64_t v32 = v37 + 104;
  unint64_t v33 = v9;
  while (1)
  {
    if (v5)
    {
      uint64_t v11 = (v5 - 1) & v5;
      unint64_t v12 = __clz(__rbit64(v5)) | (v8 << 6);
      uint64_t v13 = v8;
    }
    else
    {
      int64_t v14 = v8 + 1;
      if (__OFADD__(v8, 1)) {
        __break(1u);
      }
      if (v14 >= v35)
      {
LABEL_64:
        memset(v42, 0, sizeof(v42));
        long long v43 = xmmword_188382690;
LABEL_65:
        outlined consume of Set<UIPress>.Iterator._Variant();
        outlined destroy of ToolbarPlacement.Role?((uint64_t)v42, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
        return v2;
      }
      unint64_t v15 = *(void *)(v36 + 8 * v14);
      uint64_t v13 = v8 + 1;
      if (!v15)
      {
        uint64_t v13 = v8 + 2;
        if (v8 + 2 >= v35) {
          goto LABEL_64;
        }
        unint64_t v15 = *(void *)(v36 + 8 * v13);
        if (!v15)
        {
          uint64_t v13 = v8 + 3;
          if (v8 + 3 >= v35) {
            goto LABEL_64;
          }
          unint64_t v15 = *(void *)(v36 + 8 * v13);
          if (!v15)
          {
            uint64_t v13 = v8 + 4;
            if (v8 + 4 >= v35) {
              goto LABEL_64;
            }
            unint64_t v15 = *(void *)(v36 + 8 * v13);
            if (!v15)
            {
              uint64_t v13 = v8 + 5;
              if (v8 + 5 >= v35) {
                goto LABEL_64;
              }
              unint64_t v15 = *(void *)(v36 + 8 * v13);
              if (!v15)
              {
                uint64_t v16 = v8;
                do
                {
                  if (v33 == v16) {
                    goto LABEL_64;
                  }
                  unint64_t v15 = *(void *)(v32 + 8 * v16++);
                }
                while (!v15);
                uint64_t v13 = v16 + 5;
              }
            }
          }
        }
      }
      uint64_t v11 = (v15 - 1) & v15;
      unint64_t v12 = __clz(__rbit64(v15)) + (v13 << 6);
    }
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v10 + 48) + 40 * v12, (uint64_t)v42);
    if ((void)v43 == 7) {
      goto LABEL_65;
    }
    outlined init with take of ToolbarPlacement.Role((uint64_t)v42, (uint64_t)v50);
    Hasher.init(_seed:)();
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v50, (uint64_t)&v47);
    switch(*((void *)&v48 + 1))
    {
      case 0:
        Swift::UInt v17 = 0;
        goto LABEL_35;
      case 1:
        Swift::UInt v17 = 1;
        goto LABEL_35;
      case 2:
        Swift::UInt v17 = 2;
        goto LABEL_35;
      case 3:
        Swift::UInt v17 = 3;
        goto LABEL_35;
      case 4:
        Swift::UInt v17 = 4;
        goto LABEL_35;
      case 5:
        Swift::UInt v17 = 5;
        goto LABEL_35;
      case 6:
        Swift::UInt v17 = 7;
LABEL_35:
        Hasher._combine(_:)(v17);
        break;
      default:
        v40[0] = v47;
        v40[1] = v48;
        uint64_t v41 = v49;
        Hasher._combine(_:)(6uLL);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v40);
        break;
    }
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(v2 + 32);
    unint64_t v20 = v18 & ~v19;
    if ((*(void *)(v6 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20)) {
      break;
    }
LABEL_6:
    outlined destroy of ToolbarPlacement.Role((uint64_t)v50);
    uint64_t v8 = v13;
    unint64_t v5 = v11;
    uint64_t v10 = v37;
  }
  uint64_t v21 = ~v19;
  while (2)
  {
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v2 + 48) + 40 * v20, (uint64_t)&v47);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)&v47, (uint64_t)v42);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v50, (uint64_t)&v44);
    switch((uint64_t)v43)
    {
      case 0:
        if (!*((void *)&v45 + 1)) {
          goto LABEL_59;
        }
        goto LABEL_54;
      case 1:
        if (*((void *)&v45 + 1) == 1) {
          goto LABEL_59;
        }
        goto LABEL_54;
      case 2:
        if (*((void *)&v45 + 1) == 2) {
          goto LABEL_59;
        }
        goto LABEL_54;
      case 3:
        if (*((void *)&v45 + 1) == 3) {
          goto LABEL_59;
        }
        goto LABEL_54;
      case 4:
        if (*((void *)&v45 + 1) == 4) {
          goto LABEL_59;
        }
        goto LABEL_54;
      case 5:
        if (*((void *)&v45 + 1) == 5) {
          goto LABEL_59;
        }
        goto LABEL_54;
      case 6:
        if (*((void *)&v45 + 1) != 6) {
          goto LABEL_54;
        }
        goto LABEL_59;
      default:
        outlined init with copy of ToolbarPlacement.Role((uint64_t)v42, (uint64_t)v40);
        if (*((void *)&v45 + 1) < 7uLL)
        {
          outlined destroy of AnyHashable((uint64_t)v40);
LABEL_54:
          outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v42);
          goto LABEL_55;
        }
        v38[0] = v44;
        v38[1] = v45;
        uint64_t v39 = v46;
        char v22 = MEMORY[0x18C1174E0](v40, v38);
        outlined destroy of AnyHashable((uint64_t)v38);
        outlined destroy of AnyHashable((uint64_t)v40);
        if ((v22 & 1) == 0)
        {
          outlined destroy of ToolbarPlacement.Role((uint64_t)v42);
LABEL_55:
          outlined destroy of ToolbarPlacement.Role((uint64_t)&v47);
          unint64_t v20 = (v20 + 1) & v21;
          if (((*(void *)(v6 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
            goto LABEL_6;
          }
          continue;
        }
LABEL_59:
        void v51[3] = v13;
        v51[4] = v11;
        outlined destroy of ToolbarPlacement.Role((uint64_t)v42);
        outlined destroy of ToolbarPlacement.Role((uint64_t)&v47);
        uint64_t isStackAllocationSafe = outlined destroy of ToolbarPlacement.Role((uint64_t)v50);
        char v24 = *(unsigned char *)(v2 + 32);
        unint64_t v25 = (unint64_t)((1 << v24) + 63) >> 6;
        size_t v26 = 8 * v25;
        if ((v24 & 0x3Fu) <= 0xD
          || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), isStackAllocationSafe))
        {
          MEMORY[0x1F4188790](isStackAllocationSafe);
          memcpy((char *)&v31 - ((v26 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v26);
          uint64_t v27 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)&v31 - ((v26 + 15) & 0x3FFFFFFFFFFFFFF0), v25, v2, v20, v51);
          swift_release();
          outlined consume of Set<UIPress>.Iterator._Variant();
          return v27;
        }
        else
        {
          id v28 = (void *)swift_slowAlloc();
          memcpy(v28, (const void *)(v2 + 56), v26);
          uint64_t v29 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v28, v25, v2, v20, v51);
          swift_release();
          outlined consume of Set<UIPress>.Iterator._Variant();
          MEMORY[0x18C119C60](v28, -1, -1);
          return v29;
        }
    }
  }
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  unint64_t v33 = (unint64_t *)result;
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v47 = v7 - 1;
  uint64_t v8 = a3 + 56;
LABEL_3:
  while (1)
  {
    uint64_t v9 = *a5;
    uint64_t v10 = a5[1];
    uint64_t v11 = a5[2];
    int64_t v12 = a5[3];
    unint64_t v13 = a5[4];
    if (!v13) {
      break;
    }
    uint64_t v14 = (v13 - 1) & v13;
    unint64_t v15 = __clz(__rbit64(v13)) | (v12 << 6);
LABEL_15:
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v9 + 48) + 40 * v15, (uint64_t)v38);
    uint64_t v21 = v39;
    *a5 = v9;
    a5[1] = v10;
    a5[2] = v11;
    a5[3] = v12;
    a5[4] = v14;
    if (v21 == 7) {
      goto LABEL_62;
    }
    outlined init with take of ToolbarPlacement.Role((uint64_t)v38, (uint64_t)v46);
    Hasher.init(_seed:)();
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v46, (uint64_t)&v43);
    switch(*((void *)&v44 + 1))
    {
      case 0:
        Swift::UInt v22 = 0;
        goto LABEL_25;
      case 1:
        Swift::UInt v22 = 1;
        goto LABEL_25;
      case 2:
        Swift::UInt v22 = 2;
        goto LABEL_25;
      case 3:
        Swift::UInt v22 = 3;
        goto LABEL_25;
      case 4:
        Swift::UInt v22 = 4;
        goto LABEL_25;
      case 5:
        Swift::UInt v22 = 5;
        goto LABEL_25;
      case 6:
        Swift::UInt v22 = 7;
LABEL_25:
        Hasher._combine(_:)(v22);
        break;
      default:
        v36[0] = v43;
        v36[1] = v44;
        uint64_t v37 = v45;
        Hasher._combine(_:)(6uLL);
        AnyHashable.hash(into:)();
        outlined destroy of AnyHashable((uint64_t)v36);
        break;
    }
    Swift::Int v23 = Hasher._finalize()();
    uint64_t v24 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v25 = v23 & ~v24;
    if (((*(void *)(v8 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
    {
LABEL_2:
      uint64_t result = outlined destroy of ToolbarPlacement.Role((uint64_t)v46);
      continue;
    }
    uint64_t v26 = ~v24;
    while (2)
    {
      outlined init with copy of ToolbarPlacement.Role(*(void *)(a3 + 48) + 40 * v25, (uint64_t)&v43);
      outlined init with copy of ToolbarPlacement.Role((uint64_t)&v43, (uint64_t)v38);
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v46, (uint64_t)&v40);
      switch((uint64_t)v39)
      {
        case 0:
          if (*((void *)&v41 + 1)) {
            goto LABEL_44;
          }
          goto LABEL_49;
        case 1:
          if (*((void *)&v41 + 1) == 1) {
            goto LABEL_49;
          }
          goto LABEL_44;
        case 2:
          if (*((void *)&v41 + 1) == 2) {
            goto LABEL_49;
          }
          goto LABEL_44;
        case 3:
          if (*((void *)&v41 + 1) == 3) {
            goto LABEL_49;
          }
          goto LABEL_44;
        case 4:
          if (*((void *)&v41 + 1) == 4) {
            goto LABEL_49;
          }
          goto LABEL_44;
        case 5:
          if (*((void *)&v41 + 1) == 5) {
            goto LABEL_49;
          }
          goto LABEL_44;
        case 6:
          if (*((void *)&v41 + 1) != 6) {
            goto LABEL_44;
          }
          goto LABEL_49;
        default:
          outlined init with copy of ToolbarPlacement.Role((uint64_t)v38, (uint64_t)v36);
          if (*((void *)&v41 + 1) < 7uLL)
          {
            outlined destroy of AnyHashable((uint64_t)v36);
LABEL_44:
            outlined destroy of (ToolbarPlacement.Role, ToolbarPlacement.Role)((uint64_t)v38);
            goto LABEL_45;
          }
          v34[0] = v40;
          v34[1] = v41;
          uint64_t v35 = v42;
          char v27 = MEMORY[0x18C1174E0](v36, v34);
          outlined destroy of AnyHashable((uint64_t)v34);
          outlined destroy of AnyHashable((uint64_t)v36);
          if ((v27 & 1) == 0)
          {
            outlined destroy of ToolbarPlacement.Role((uint64_t)v38);
LABEL_45:
            outlined destroy of ToolbarPlacement.Role((uint64_t)&v43);
            unint64_t v25 = (v25 + 1) & v26;
            if (((*(void *)(v8 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
              goto LABEL_2;
            }
            continue;
          }
LABEL_49:
          outlined destroy of ToolbarPlacement.Role((uint64_t)v38);
          outlined destroy of ToolbarPlacement.Role((uint64_t)&v43);
          uint64_t result = outlined destroy of ToolbarPlacement.Role((uint64_t)v46);
          uint64_t v28 = (v25 >> 3) & 0x1FFFFFFFFFFFFFF8;
          uint64_t v29 = *(unint64_t *)((char *)v33 + v28);
          *(unint64_t *)((char *)v33 + v28) = v29 & ~(1 << v25);
          if ((v29 & (1 << v25)) == 0) {
            goto LABEL_3;
          }
          uint64_t v30 = v47 - 1;
          if (__OFSUB__(v47, 1)) {
            goto LABEL_64;
          }
          --v47;
          if (!v30) {
            return MEMORY[0x1E4FBC870];
          }
          break;
      }
      break;
    }
  }
  int64_t v16 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    int64_t v17 = (unint64_t)(v11 + 64) >> 6;
    int64_t v18 = a5[3];
    if (v16 >= v17) {
      goto LABEL_61;
    }
    unint64_t v19 = *(void *)(v10 + 8 * v16);
    if (v19) {
      goto LABEL_14;
    }
    int64_t v20 = v12 + 2;
    int64_t v18 = v12 + 1;
    if (v12 + 2 >= v17) {
      goto LABEL_61;
    }
    unint64_t v19 = *(void *)(v10 + 8 * v20);
    if (!v19)
    {
      int64_t v18 = v12 + 2;
      if (v12 + 3 >= v17) {
        goto LABEL_61;
      }
      unint64_t v19 = *(void *)(v10 + 8 * (v12 + 3));
      if (v19)
      {
        int64_t v16 = v12 + 3;
        goto LABEL_14;
      }
      int64_t v20 = v12 + 4;
      int64_t v18 = v12 + 3;
      if (v12 + 4 >= v17) {
        goto LABEL_61;
      }
      unint64_t v19 = *(void *)(v10 + 8 * v20);
      if (!v19)
      {
        int64_t v16 = v12 + 5;
        int64_t v18 = v12 + 4;
        if (v12 + 5 >= v17)
        {
LABEL_61:
          memset(v38, 0, sizeof(v38));
          long long v39 = xmmword_188382690;
          *a5 = v9;
          a5[1] = v10;
          a5[2] = v11;
          a5[3] = v18;
          a5[4] = 0;
LABEL_62:
          outlined destroy of ToolbarPlacement.Role?((uint64_t)v38, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
          swift_retain();
          return specialized _NativeSet.extractSubset(using:count:)(v33, a2, v47, a3);
        }
        unint64_t v19 = *(void *)(v10 + 8 * v16);
        if (!v19)
        {
          int64_t v18 = v17 - 1;
          int64_t v31 = v12 + 6;
          do
          {
            if (v17 == v31) {
              goto LABEL_61;
            }
            unint64_t v19 = *(void *)(v10 + 8 * v31++);
          }
          while (!v19);
          int64_t v16 = v31 - 1;
        }
        goto LABEL_14;
      }
    }
    int64_t v16 = v20;
LABEL_14:
    uint64_t v14 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v16 << 6);
    int64_t v12 = v16;
    goto LABEL_15;
  }
  __break(1u);
LABEL_64:
  __break(1u);
  return result;
}

uint64_t EstimationCache.merge(_:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  *uint64_t v2 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  char v6 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = v2[1];
  v2[1] = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a2, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, v6, &v8);
  v2[1] = v8;

  return swift_bridgeObjectRelease();
}

unint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v7 = specialized LazyMapSequence.Iterator.next()();
  if (v9) {
    goto LABEL_24;
  }
  uint64_t v10 = v7;
  uint64_t v11 = v8;
  double v12 = *(double *)&v7;
  unint64_t v13 = (void *)*a5;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(double *)&v7);
  uint64_t v16 = v13[2];
  BOOL v17 = (v15 & 1) == 0;
  BOOL v18 = __OFADD__(v16, v17);
  uint64_t v19 = v16 + v17;
  if (v18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  char v20 = v15;
  if (v13[3] < v19)
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v12);
    if ((v20 & 1) == (v21 & 1)) {
      goto LABEL_7;
    }
LABEL_5:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  if (a4)
  {
LABEL_7:
    Swift::UInt v22 = (void *)*a5;
    if (v20) {
      goto LABEL_8;
    }
    goto LABEL_12;
  }
  unint64_t v25 = result;
  specialized _NativeDictionary.copy()();
  unint64_t result = v25;
  Swift::UInt v22 = (void *)*a5;
  if (v20)
  {
LABEL_8:
    Swift::Int v23 = (void *)(v22[7] + 8 * result);
    uint64_t v24 = *v23 + v11;
    if (__OFADD__(*v23, v11))
    {
LABEL_23:
      __break(1u);
      goto LABEL_24;
    }
LABEL_13:
    *Swift::Int v23 = v24;
    uint64_t v28 = specialized LazyMapSequence.Iterator.next()();
    if ((v30 & 1) == 0)
    {
      uint64_t v10 = v28;
      uint64_t v11 = v29;
      char v20 = 1;
      do
      {
        uint64_t v37 = (void *)*a5;
        unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(double *)&v10);
        uint64_t v39 = v37[2];
        BOOL v40 = (v38 & 1) == 0;
        BOOL v18 = __OFADD__(v39, v40);
        uint64_t v41 = v39 + v40;
        if (v18) {
          goto LABEL_25;
        }
        a4 = v38;
        if (v37[3] < v41)
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, 1);
          unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(*(double *)&v10);
          if ((a4 & 1) != (v42 & 1)) {
            goto LABEL_5;
          }
        }
        long long v43 = (void *)*a5;
        if (a4)
        {
          uint64_t v32 = (void *)(v43[7] + 8 * result);
          uint64_t v34 = *v32 + v11;
          if (__OFADD__(*v32, v11)) {
            goto LABEL_23;
          }
        }
        else
        {
          v43[(result >> 6) + 8] |= 1 << result;
          uint64_t v31 = 8 * result;
          *(void *)(v43[6] + v31) = v10;
          *(void *)(v43[7] + v31) = v11;
          uint64_t v33 = v43[2];
          uint64_t v32 = v43 + 2;
          uint64_t v34 = v33 + 1;
          if (__OFADD__(v33, 1)) {
            goto LABEL_26;
          }
        }
        *uint64_t v32 = v34;
        uint64_t v10 = specialized LazyMapSequence.Iterator.next()();
        uint64_t v11 = v35;
      }
      while ((v36 & 1) == 0);
    }
LABEL_24:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return swift_release();
  }
LABEL_12:
  v22[(result >> 6) + 8] |= 1 << result;
  uint64_t v26 = 8 * result;
  *(void *)(v22[6] + v26) = v10;
  *(void *)(v22[7] + v26) = v11;
  uint64_t v27 = v22[2];
  Swift::Int v23 = v22 + 2;
  uint64_t v24 = v27 + 1;
  if (!__OFADD__(v27, 1)) {
    goto LABEL_13;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t EstimationCache.add(length:spacing:count:)(uint64_t a1, char a2, uint64_t a3, double a4)
{
  char v6 = v4;
  LOBYTE(v8) = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = *v4;
  uint64_t v58 = v12;
  *char v6 = 0x8000000000000000;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_36;
  }
  char v5 = v13;
  if (*(void *)(v12 + 24) >= v17)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_37;
    }
  }
  else
  {
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, isUniquelyReferenced_nonNull_native);
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a4);
    if ((v5 & 1) != (v19 & 1)) {
      goto LABEL_41;
    }
    unint64_t v14 = v18;
  }
  while (1)
  {
    *char v6 = v12;
    swift_bridgeObjectRelease();
    char v20 = (void *)*v6;
    if ((v5 & 1) == 0) {
      specialized _NativeDictionary._insert(at:key:value:)(v14, 0, (void *)*v6, a4);
    }
    uint64_t v21 = v20[7];
    uint64_t v22 = *(void *)(v21 + 8 * v14);
    BOOL v23 = __OFADD__(v22, a3);
    uint64_t v24 = v22 + a3;
    if (!v23) {
      break;
    }
LABEL_36:
    __break(1u);
LABEL_37:
    specialized _NativeDictionary.copy()();
    uint64_t v12 = v58;
  }
  *(void *)(v21 + 8 * v14) = v24;
  if ((v8 & 1) == 0)
  {
    double v25 = *(double *)&a1;
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v27 = v6[1];
    uint64_t v59 = v27;
    v6[1] = 0x8000000000000000;
    unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(*(double *)&a1);
    uint64_t v30 = *(void *)(v27 + 16);
    BOOL v31 = (v28 & 1) == 0;
    uint64_t v32 = v30 + v31;
    if (__OFADD__(v30, v31))
    {
      __break(1u);
      goto LABEL_39;
    }
    LOBYTE(v8) = v28;
    if (*(void *)(v27 + 24) >= v32)
    {
      if ((v26 & 1) == 0) {
        goto LABEL_40;
      }
      goto LABEL_16;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, v26);
    unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v25);
    if ((v8 & 1) == (v34 & 1))
    {
      unint64_t v29 = v33;
      while (1)
      {
LABEL_16:
        v6[1] = v27;
        swift_bridgeObjectRelease();
        char v36 = (void *)v6[1];
        swift_bridgeObjectRetain();
        if ((v8 & 1) == 0) {
          specialized _NativeDictionary._insert(at:key:value:)(v29, 0, v36, v25);
        }
        uint64_t v8 = v36[7];
        swift_bridgeObjectRelease();
        uint64_t v37 = *(void *)(v8 + 8 * v29);
        BOOL v23 = __OFADD__(v37, a3);
        uint64_t v38 = v37 + a3;
        if (!v23) {
          break;
        }
LABEL_39:
        __break(1u);
LABEL_40:
        specialized _NativeDictionary.copy()();
        uint64_t v27 = v59;
      }
      *(void *)(v8 + 8 * v29) = v38;
      uint64_t v35 = protocol witness for SetAlgebra.init() in conformance UIRectEdge;
      goto LABEL_20;
    }
LABEL_41:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  uint64_t v35 = 0;
LABEL_20:
  if (*(void *)(*v6 + 16) >= 0x1AuLL)
  {
    uint64_t v39 = swift_bridgeObjectRetain();
    uint64_t v40 = specialized Sequence.min(by:)(v39);
    char v42 = v41;
    swift_bridgeObjectRelease();
    if ((v42 & 1) == 0)
    {
      unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(*(double *)&v40);
      if (v44)
      {
        unint64_t v45 = v43;
        char v46 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v47 = *v6;
        uint64_t v60 = *v6;
        *char v6 = 0x8000000000000000;
        if ((v46 & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v47 = v60;
        }
        specialized _NativeDictionary._delete(at:)(v45, v47);
        *char v6 = v47;
        swift_bridgeObjectRelease();
      }
    }
  }
  if (*(void *)(v6[1] + 16) >= 0x1AuLL)
  {
    uint64_t v48 = swift_bridgeObjectRetain();
    uint64_t v49 = specialized Sequence.min(by:)(v48);
    char v51 = v50;
    swift_bridgeObjectRelease();
    if ((v51 & 1) == 0)
    {
      unint64_t v52 = specialized __RawDictionaryStorage.find<A>(_:)(*(double *)&v49);
      if (v53)
      {
        unint64_t v54 = v52;
        char v55 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v56 = v6[1];
        v6[1] = 0x8000000000000000;
        if ((v55 & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
        specialized _NativeDictionary._delete(at:)(v54, v56);
        v6[1] = v56;
        swift_bridgeObjectRelease();
      }
    }
  }

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v35);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(double a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();

  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v2, a1);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, double a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a1 & ~v4;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v6 = *(void *)(v2 + 48);
    if (*(double *)(v6 + 8 * result) != a2)
    {
      uint64_t v7 = ~v4;
      for (unint64_t result = (result + 1) & v7;
            ((*(void *)(v3 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v7)
      {
        if (*(double *)(v6 + 8 * result) == a2) {
          break;
        }
      }
    }
  }
  return result;
}

uint64_t outlined consume of Set<UIPress>.Iterator._Variant()
{
  return swift_release();
}

void type metadata accessor for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _DictionaryStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _DictionaryStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_1(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _DictionaryStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t specialized LazyMapSequence.Iterator.next()()
{
  void (*v9)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  void v18[2];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = *(void *)(*(void *)(v1 + 48) + 8 * v6);
    uint64_t v8 = *(void *)(*(void *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    char v9 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v18[0] = v7;
    v18[1] = v8;
    v9(&v17, v18);
    return v17;
  }
  uint64_t v11 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v12 = (unint64_t)(v0[2] + 64) >> 6;
    if (v11 < v12)
    {
      char v13 = v0[1];
      unint64_t v14 = *(void *)(v13 + 8 * v11);
      if (v14)
      {
LABEL_7:
        uint64_t v5 = (v14 - 1) & v14;
        unint64_t v6 = __clz(__rbit64(v14)) + (v11 << 6);
        int64_t v4 = v11;
        goto LABEL_3;
      }
      uint64_t v15 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v12)
      {
        unint64_t v14 = *(void *)(v13 + 8 * v15);
        if (v14)
        {
LABEL_10:
          uint64_t v11 = v15;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v12)
        {
          unint64_t v14 = *(void *)(v13 + 8 * (v3 + 3));
          if (v14)
          {
            uint64_t v11 = v3 + 3;
            goto LABEL_7;
          }
          uint64_t v15 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v12)
          {
            unint64_t v14 = *(void *)(v13 + 8 * v15);
            if (v14) {
              goto LABEL_10;
            }
            uint64_t v11 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v12)
            {
              unint64_t v14 = *(void *)(v13 + 8 * v11);
              if (v14) {
                goto LABEL_7;
              }
              int64_t v4 = v12 - 1;
              BOOL v16 = v3 + 6;
              while (v12 != v16)
              {
                unint64_t v14 = *(void *)(v13 + 8 * v16++);
                if (v14)
                {
                  uint64_t v11 = v16 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    unint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  void *v0;
  unint64_t v1;
  int64_t v2;
  int64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t *__return_ptr, uint64_t *);
  uint64_t result;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;

  unint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  int64_t v3 = v2;
  if (v1)
  {
    int64_t v4 = (v1 - 1) & v1;
    uint64_t v5 = __clz(__rbit64(v1)) | (v2 << 6);
LABEL_3:
    unint64_t v6 = *(void *)(*(void *)(*v0 + 56) + 8 * v5);
    v0[3] = v3;
    v0[4] = v4;
    uint64_t v7 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[5];
    BOOL v16 = v6;
    swift_bridgeObjectRetain();
    v7(&v15, &v16);
    swift_bridgeObjectRelease();
    return v15;
  }
  char v9 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v10 = (unint64_t)(v0[2] + 64) >> 6;
    if (v9 < v10)
    {
      uint64_t v11 = v0[1];
      uint64_t v12 = *(void *)(v11 + 8 * v9);
      if (v12)
      {
LABEL_7:
        int64_t v4 = (v12 - 1) & v12;
        uint64_t v5 = __clz(__rbit64(v12)) + (v9 << 6);
        int64_t v3 = v9;
        goto LABEL_3;
      }
      char v13 = v2 + 2;
      int64_t v3 = v2 + 1;
      if (v2 + 2 < v10)
      {
        uint64_t v12 = *(void *)(v11 + 8 * v13);
        if (v12)
        {
LABEL_10:
          char v9 = v13;
          goto LABEL_7;
        }
        int64_t v3 = v2 + 2;
        if (v2 + 3 < v10)
        {
          uint64_t v12 = *(void *)(v11 + 8 * (v2 + 3));
          if (v12)
          {
            char v9 = v2 + 3;
            goto LABEL_7;
          }
          char v13 = v2 + 4;
          int64_t v3 = v2 + 3;
          if (v2 + 4 < v10)
          {
            uint64_t v12 = *(void *)(v11 + 8 * v13);
            if (v12) {
              goto LABEL_10;
            }
            char v9 = v2 + 5;
            int64_t v3 = v2 + 4;
            if (v2 + 5 < v10)
            {
              uint64_t v12 = *(void *)(v11 + 8 * v9);
              if (v12) {
                goto LABEL_7;
              }
              int64_t v3 = v10 - 1;
              unint64_t v14 = v2 + 6;
              while (v10 != v14)
              {
                uint64_t v12 = *(void *)(v11 + 8 * v14++);
                if (v12)
                {
                  char v9 = v14 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    unint64_t result = 0;
    v0[3] = v3;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v7)(uint64_t *__return_ptr, uint64_t *);
  long long v8;
  uint64_t result;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (void (*)(uint64_t *__return_ptr, uint64_t *))v0[5];
    uint64_t v8 = *(_OWORD *)(*(void *)(v1 + 56) + 16 * v6);
    uint64_t v17 = *(void *)(*(void *)(v1 + 48) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    unint64_t v18 = v8;
    swift_retain();
    v7(&v16, &v17);
    swift_release();
    return v16;
  }
  uint64_t v10 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = (unint64_t)(v0[2] + 64) >> 6;
    if (v10 < v11)
    {
      uint64_t v12 = v0[1];
      char v13 = *(void *)(v12 + 8 * v10);
      if (v13)
      {
LABEL_7:
        uint64_t v5 = (v13 - 1) & v13;
        unint64_t v6 = __clz(__rbit64(v13)) + (v10 << 6);
        int64_t v4 = v10;
        goto LABEL_3;
      }
      unint64_t v14 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v11)
      {
        char v13 = *(void *)(v12 + 8 * v14);
        if (v13)
        {
LABEL_10:
          uint64_t v10 = v14;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v11)
        {
          char v13 = *(void *)(v12 + 8 * (v3 + 3));
          if (v13)
          {
            uint64_t v10 = v3 + 3;
            goto LABEL_7;
          }
          unint64_t v14 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v11)
          {
            char v13 = *(void *)(v12 + 8 * v14);
            if (v13) {
              goto LABEL_10;
            }
            uint64_t v10 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v11)
            {
              char v13 = *(void *)(v12 + 8 * v10);
              if (v13) {
                goto LABEL_7;
              }
              int64_t v4 = v11 - 1;
              uint64_t v15 = v3 + 6;
              while (v11 != v15)
              {
                char v13 = *(void *)(v12 + 8 * v15++);
                if (v13)
                {
                  uint64_t v10 = v15 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    unint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  void (*v7)(uint64_t *__return_ptr, int *);
  long long v8;
  uint64_t result;
  int64_t v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  int64_t v15;
  uint64_t v16;
  int v17;
  long long v18;

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = (void (*)(uint64_t *__return_ptr, int *))v0[5];
    uint64_t v8 = *(_OWORD *)(*(void *)(v1 + 56) + 16 * v6);
    uint64_t v17 = *(_DWORD *)(*(void *)(v1 + 48) + 4 * v6);
    v0[3] = v4;
    v0[4] = v5;
    unint64_t v18 = v8;
    swift_retain();
    v7(&v16, &v17);
    swift_release();
    return v16;
  }
  uint64_t v10 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v11 = (unint64_t)(v0[2] + 64) >> 6;
    if (v10 < v11)
    {
      uint64_t v12 = v0[1];
      char v13 = *(void *)(v12 + 8 * v10);
      if (v13)
      {
LABEL_7:
        uint64_t v5 = (v13 - 1) & v13;
        unint64_t v6 = __clz(__rbit64(v13)) + (v10 << 6);
        int64_t v4 = v10;
        goto LABEL_3;
      }
      unint64_t v14 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v11)
      {
        char v13 = *(void *)(v12 + 8 * v14);
        if (v13)
        {
LABEL_10:
          uint64_t v10 = v14;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v11)
        {
          char v13 = *(void *)(v12 + 8 * (v3 + 3));
          if (v13)
          {
            uint64_t v10 = v3 + 3;
            goto LABEL_7;
          }
          unint64_t v14 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v11)
          {
            char v13 = *(void *)(v12 + 8 * v14);
            if (v13) {
              goto LABEL_10;
            }
            uint64_t v10 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v11)
            {
              char v13 = *(void *)(v12 + 8 * v10);
              if (v13) {
                goto LABEL_7;
              }
              int64_t v4 = v11 - 1;
              uint64_t v15 = v3 + 6;
              while (v11 != v15)
              {
                char v13 = *(void *)(v12 + 8 * v15++);
                if (v13)
                {
                  uint64_t v10 = v15 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    unint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  void v19[2];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 8 * v6;
    uint64_t v8 = *(void *)(*(void *)(v1 + 48) + 8 * v6);
    char v9 = *(void *)(*(void *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v10 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v19[0] = v8;
    v19[1] = v9;
    swift_retain();
    v10(&v18, v19);
    swift_release();
    return v18;
  }
  uint64_t v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    char v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      unint64_t v14 = v0[1];
      uint64_t v15 = *(void *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        uint64_t v5 = (v15 - 1) & v15;
        unint64_t v6 = __clz(__rbit64(v15)) + (v12 << 6);
        int64_t v4 = v12;
        goto LABEL_3;
      }
      BOOL v16 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        uint64_t v15 = *(void *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          uint64_t v12 = v16;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          uint64_t v15 = *(void *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            uint64_t v12 = v3 + 3;
            goto LABEL_7;
          }
          BOOL v16 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            uint64_t v15 = *(void *)(v14 + 8 * v16);
            if (v15) {
              goto LABEL_10;
            }
            uint64_t v12 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              uint64_t v15 = *(void *)(v14 + 8 * v12);
              if (v15) {
                goto LABEL_7;
              }
              int64_t v4 = v13 - 1;
              uint64_t v17 = v3 + 6;
              while (v13 != v17)
              {
                uint64_t v15 = *(void *)(v14 + 8 * v17++);
                if (v15)
                {
                  uint64_t v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    unint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  void v19[2];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 8 * v6;
    uint64_t v8 = *(void *)(*(void *)(v1 + 48) + 8 * v6);
    char v9 = *(void *)(*(void *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v10 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v19[0] = v8;
    v19[1] = v9;
    swift_retain();
    v10(&v18, v19);
    swift_release();
    return v18;
  }
  uint64_t v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    char v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      unint64_t v14 = v0[1];
      uint64_t v15 = *(void *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        uint64_t v5 = (v15 - 1) & v15;
        unint64_t v6 = __clz(__rbit64(v15)) + (v12 << 6);
        int64_t v4 = v12;
        goto LABEL_3;
      }
      BOOL v16 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        uint64_t v15 = *(void *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          uint64_t v12 = v16;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          uint64_t v15 = *(void *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            uint64_t v12 = v3 + 3;
            goto LABEL_7;
          }
          BOOL v16 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            uint64_t v15 = *(void *)(v14 + 8 * v16);
            if (v15) {
              goto LABEL_10;
            }
            uint64_t v12 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              uint64_t v15 = *(void *)(v14 + 8 * v12);
              if (v15) {
                goto LABEL_7;
              }
              int64_t v4 = v13 - 1;
              uint64_t v17 = v3 + 6;
              while (v13 != v17)
              {
                uint64_t v15 = *(void *)(v14 + 8 * v17++);
                if (v15)
                {
                  uint64_t v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    unint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t *__return_ptr, void *);
  uint64_t result;
  int64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  uint64_t v18;
  void v19[2];

  uint64_t v1 = *v0;
  int64_t v3 = v0[3];
  unint64_t v2 = v0[4];
  int64_t v4 = v3;
  if (v2)
  {
    uint64_t v5 = (v2 - 1) & v2;
    unint64_t v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    uint64_t v7 = 8 * v6;
    uint64_t v8 = *(void *)(*(void *)(v1 + 48) + 8 * v6);
    char v9 = *(void *)(*(void *)(v1 + 56) + v7);
    v0[3] = v4;
    v0[4] = v5;
    uint64_t v10 = (void (*)(uint64_t *__return_ptr, void *))v0[5];
    v19[0] = v8;
    v19[1] = v9;
    swift_bridgeObjectRetain();
    v10(&v18, v19);
    swift_bridgeObjectRelease();
    return v18;
  }
  uint64_t v12 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    char v13 = (unint64_t)(v0[2] + 64) >> 6;
    if (v12 < v13)
    {
      unint64_t v14 = v0[1];
      uint64_t v15 = *(void *)(v14 + 8 * v12);
      if (v15)
      {
LABEL_7:
        uint64_t v5 = (v15 - 1) & v15;
        unint64_t v6 = __clz(__rbit64(v15)) + (v12 << 6);
        int64_t v4 = v12;
        goto LABEL_3;
      }
      BOOL v16 = v3 + 2;
      int64_t v4 = v3 + 1;
      if (v3 + 2 < v13)
      {
        uint64_t v15 = *(void *)(v14 + 8 * v16);
        if (v15)
        {
LABEL_10:
          uint64_t v12 = v16;
          goto LABEL_7;
        }
        int64_t v4 = v3 + 2;
        if (v3 + 3 < v13)
        {
          uint64_t v15 = *(void *)(v14 + 8 * (v3 + 3));
          if (v15)
          {
            uint64_t v12 = v3 + 3;
            goto LABEL_7;
          }
          BOOL v16 = v3 + 4;
          int64_t v4 = v3 + 3;
          if (v3 + 4 < v13)
          {
            uint64_t v15 = *(void *)(v14 + 8 * v16);
            if (v15) {
              goto LABEL_10;
            }
            uint64_t v12 = v3 + 5;
            int64_t v4 = v3 + 4;
            if (v3 + 5 < v13)
            {
              uint64_t v15 = *(void *)(v14 + 8 * v12);
              if (v15) {
                goto LABEL_7;
              }
              int64_t v4 = v13 - 1;
              uint64_t v17 = v3 + 6;
              while (v13 != v17)
              {
                uint64_t v15 = *(void *)(v14 + 8 * v17++);
                if (v15)
                {
                  uint64_t v12 = v17 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    unint64_t result = 0;
    v0[3] = v4;
    v0[4] = 0;
  }
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, void *a3, double a4)
{
  a3[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(double *)(a3[6] + v4) = a4;
  *(void *)(a3[7] + v4) = a2;
  uint64_t v5 = a3[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a3[2] = v7;
  }
  return result;
}

double specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<D0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  double result = *(double *)a1;
  uint64_t v3 = *(void *)(a1 + 8);
  *a2 = *(void *)a1;
  a2[1] = v3;
  return result;
}

void *specialized _NativeDictionary.copy()()
{
  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<CGFloat, Int>, (void (*)(void))lazy protocol witness table accessor for type CGFloat and conformance CGFloat);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, Transaction>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    double result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  void *__src;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int64_t v38;
  __int16 v39;
  char v40;
  char v41;
  unsigned char v42[40];

  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, ToolbarAppearanceConfiguration>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  uint64_t v32 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  char v36 = v2;
  if (!*(void *)(v1 + 16))
  {
    double result = (void *)swift_release();
    BOOL v31 = v36;
    uint64_t v30 = v0;
LABEL_28:
    *uint64_t v30 = v31;
    return result;
  }
  uint64_t v3 = v2;
  double result = (void *)(v2 + 64);
  uint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  __src = (void *)(v1 + 64);
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5)
  {
    double result = memmove(result, __src, 8 * v5);
    uint64_t v3 = v36;
  }
  unint64_t v7 = 0;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
  int64_t v9 = -1;
  if (v8 < 64) {
    int64_t v9 = ~(-1 << v8);
  }
  uint64_t v10 = v9 & *(void *)(v1 + 64);
  char v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v35 = v1;
  while (1)
  {
    if (v10)
    {
      uint64_t v37 = (v10 - 1) & v10;
      uint64_t v38 = v7;
      uint64_t v11 = __clz(__rbit64(v10)) | (v7 << 6);
      unint64_t v12 = v35;
      goto LABEL_12;
    }
    char v26 = v7 + 1;
    unint64_t v12 = v35;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v26 >= v34) {
      goto LABEL_26;
    }
    uint64_t v27 = *((void *)__src + v26);
    char v28 = v7 + 1;
    if (!v27)
    {
      char v28 = v7 + 2;
      if (v7 + 2 >= v34) {
        goto LABEL_26;
      }
      uint64_t v27 = *((void *)__src + v28);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    uint64_t v37 = (v27 - 1) & v27;
    uint64_t v38 = v28;
    uint64_t v11 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_12:
    int64_t v13 = 5 * v11;
    unint64_t v14 = 40 * v11;
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v12 + 48) + 40 * v11, (uint64_t)v42);
    unint64_t v15 = 16 * v13;
    uint64_t v16 = *(void *)(v12 + 56) + 16 * v13;
    uint64_t v17 = *(unsigned char *)v16;
    int64_t v18 = *(void *)(v16 + 8);
    unint64_t v19 = *(void *)(v16 + 16);
    int64_t v20 = *(void *)(v16 + 32);
    unint64_t v21 = *(unsigned char *)(v16 + 40);
    uint64_t v22 = *(void *)(v16 + 48);
    uint64_t v40 = *(unsigned char *)(v16 + 56);
    char v41 = *(unsigned char *)(v16 + 24);
    uint64_t v39 = *(_WORD *)(v16 + 57);
    BOOL v23 = *(void *)(v16 + 64);
    uint64_t v24 = *(void *)(v36 + 48) + v14;
    LOBYTE(v14) = *(unsigned char *)(v16 + 72);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v42, v24);
    double v25 = *(void *)(v36 + 56) + v15;
    *(unsigned char *)double v25 = v17;
    *(void *)(v25 + 8) = v18;
    *(void *)(v25 + 16) = v19;
    *(unsigned char *)(v25 + 24) = v41;
    *(void *)(v25 + 32) = v20;
    *(unsigned char *)(v25 + 40) = v21;
    *(void *)(v25 + 48) = v22;
    *(unsigned char *)(v25 + 56) = v40;
    *(_WORD *)(v25 + 57) = v39;
    *(void *)(v25 + 64) = v23;
    *(unsigned char *)(v25 + 72) = v14;
    swift_retain();
    swift_retain();
    double result = (void *)swift_retain();
    uint64_t v10 = v37;
    unint64_t v7 = v38;
  }
  unint64_t v29 = v7 + 3;
  if (v7 + 3 >= v34)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v30 = v32;
    BOOL v31 = v36;
    goto LABEL_28;
  }
  uint64_t v27 = *((void *)__src + v29);
  if (v27)
  {
    char v28 = v7 + 3;
    goto LABEL_25;
  }
  while (1)
  {
    char v28 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v28 >= v34) {
      goto LABEL_26;
    }
    uint64_t v27 = *((void *)__src + v28);
    ++v29;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  _OWORD v27[6];
  _OWORD v28[2];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, [WeakBox<DocumentViewController>]>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      double v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    outlined init with copy of IdentifiedDocumentGroupConfiguration(*(void *)(v2 + 48) + (v15 << 7), (uint64_t)v27);
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v17 = (_OWORD *)(*(void *)(v4 + 48) + (v15 << 7));
    unint64_t v19 = v27[5];
    int64_t v18 = v28[0];
    int64_t v20 = v27[4];
    *(_OWORD *)((char *)v17 + 105) = *(_OWORD *)((char *)v28 + 9);
    v17[5] = v19;
    v17[6] = v18;
    v17[4] = v20;
    unint64_t v21 = v27[0];
    uint64_t v22 = v27[1];
    BOOL v23 = v27[3];
    void v17[2] = v27[2];
    void v17[3] = v23;
    *uint64_t v17 = v21;
    v17[1] = v22;
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    double result = (void *)swift_bridgeObjectRetain();
  }
  char v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  double v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t __dst[39];

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.StackContent.Key, NavigationColumnState>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    double result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  double v25 = v1;
  double result = (void *)(v3 + 64);
  uint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v6) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v6);
  }
  char v26 = v2 + 64;
  uint64_t v8 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  uint64_t v11 = v10 & *(void *)(v2 + 64);
  unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      int64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v12) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v26 + 8 * v22);
    ++v8;
    if (!v23)
    {
      uint64_t v8 = v22 + 1;
      if (v22 + 1 >= v12) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v26 + 8 * v8);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    uint64_t v11 = (v23 - 1) & v23;
    unint64_t v14 = __clz(__rbit64(v23)) + (v8 << 6);
LABEL_12:
    unint64_t v15 = 24 * v14;
    uint64_t v16 = *(void *)(v2 + 48) + 24 * v14;
    uint64_t v17 = *(void *)v16;
    int64_t v18 = *(unsigned char *)(v16 + 8);
    unint64_t v19 = *(void *)(v16 + 16);
    int64_t v20 = 304 * v14;
    memcpy(__dst, (const void *)(*(void *)(v2 + 56) + 304 * v14), 0x12BuLL);
    unint64_t v21 = *(void *)(v4 + 48) + v15;
    *(void *)unint64_t v21 = v17;
    *(unsigned char *)(v21 + 8) = v18;
    *(void *)(v21 + 16) = v19;
    memcpy((void *)(*(void *)(v4 + 56) + v20), __dst, 0x12BuLL);
    double result = outlined retain of NavigationColumnState(__dst);
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v12)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  BOOL v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    uint64_t v8 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v8 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v26 + 8 * v8);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unsigned char v20[16];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<HashableWeakBox<UIViewController>, ScenePhase>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    outlined init with copy of TabViewCustomization(*(void *)(v2 + 48) + 16 * v15, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for HashableWeakBox<UIViewController>);
    uint64_t v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    double result = (void *)outlined init with take of TabSidebarCustomization((uint64_t)v20, *(void *)(v4 + 48) + 16 * v15, (uint64_t (*)(void))type metadata accessor for HashableWeakBox<UIViewController>);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  unint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  int64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<String, String>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      char v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    unint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    BOOL v23 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    double result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  char v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  long long *v21;
  void *v22;
  long long v23;
  long long v24;
  _OWORD *v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, RawPanGesture.StateType.EventInfo>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    uint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v29 = __clz(__rbit64(v27));
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = v29 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = 32 * v15;
    unint64_t v21 = (long long *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    BOOL v23 = *v21;
    uint64_t v24 = v21[1];
    *uint64_t v22 = v19;
    v22[1] = v18;
    double v25 = (_OWORD *)(*(void *)(v4 + 56) + v20);
    *double v25 = v23;
    v25[1] = v24;
  }
  char v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  uint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, NavigationDestinationResolverBase>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    double result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unsigned char v22[48];

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TableRowID, Int>, (void (*)(void))lazy protocol witness table accessor for type TableRowID and conformance TableRowID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 48 * v15;
    outlined init with copy of TableRowID(*(void *)(v2 + 48) + 48 * v15, (uint64_t)v22);
    uint64_t v17 = 8 * v15;
    int64_t v18 = *(void *)(*(void *)(v2 + 56) + v17);
    double result = (void *)outlined init with take of TableRowID((uint64_t)v22, *(void *)(v4 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v17) = v18;
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *result;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  long long v33;
  unsigned char v34[48];

  type metadata accessor for _DictionaryStorage<TableRowID, (Int, (CountingIndex<Int>, CountingIndex<Int>))>();
  char v28 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _DictionaryStorage.copy(original:)();
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
    double result = (void *)swift_release();
    uint64_t v27 = v0;
LABEL_28:
    *uint64_t v27 = v3;
    return result;
  }
  double result = (void *)(v2 + 64);
  uint64_t v5 = (unint64_t)((1 << *(unsigned char *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)result >= v1 + 64 + 8 * v5) {
    double result = memmove(result, (const void *)(v1 + 64), 8 * v5);
  }
  unint64_t v7 = 0;
  BOOL v31 = v3;
  uint64_t v32 = v1;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v8 = 1 << *(unsigned char *)(v1 + 32);
  int64_t v9 = -1;
  if (v8 < 64) {
    int64_t v9 = ~(-1 << v8);
  }
  uint64_t v10 = v9 & *(void *)(v1 + 64);
  unint64_t v29 = v1 + 64;
  uint64_t v30 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v3;
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      int64_t v13 = v12 | (v7 << 6);
      unint64_t v14 = v32;
      goto LABEL_12;
    }
    uint64_t v24 = v7 + 1;
    unint64_t v14 = v32;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v30) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v29 + 8 * v24);
    ++v7;
    if (!v25)
    {
      unint64_t v7 = v24 + 1;
      if (v24 + 1 >= v30) {
        goto LABEL_26;
      }
      double v25 = *(void *)(v29 + 8 * v7);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    uint64_t v10 = (v25 - 1) & v25;
    int64_t v13 = __clz(__rbit64(v25)) + (v7 << 6);
LABEL_12:
    unint64_t v15 = 48 * v13;
    outlined init with copy of TableRowID(*(void *)(v14 + 48) + 48 * v13, (uint64_t)v34);
    uint64_t v16 = 56 * v13;
    uint64_t v17 = *(void *)(v14 + 56) + v16;
    unint64_t v33 = *(_OWORD *)v17;
    int64_t v18 = *(void *)(v17 + 16);
    unint64_t v19 = *(unsigned char *)(v17 + 24);
    int64_t v20 = *(void *)(v17 + 32);
    unint64_t v21 = *(void *)(v17 + 40);
    uint64_t v22 = *(unsigned char *)(v17 + 48);
    double result = (void *)outlined init with take of TableRowID((uint64_t)v34, *(void *)(v11 + 48) + v15);
    BOOL v23 = *(void *)(v11 + 56) + v16;
    *(_OWORD *)BOOL v23 = v33;
    *(void *)(v23 + 16) = v18;
    *(unsigned char *)(v23 + 24) = v19;
    *(void *)(v23 + 32) = v20;
    *(void *)(v23 + 40) = v21;
    *(unsigned char *)(v23 + 48) = v22;
  }
  char v26 = v24 + 2;
  if (v26 >= v30)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v27 = v28;
    uint64_t v3 = v31;
    goto LABEL_28;
  }
  double v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    unint64_t v7 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v7 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v7 >= v30) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v29 + 8 * v7);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  long long v22[2];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, AnyAccessibilityPropertiesEntry>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_27:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v19 >= v13) {
      goto LABEL_27;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_27;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20)
      {
        int64_t v9 = v19 + 2;
        if (v19 + 2 >= v13) {
          goto LABEL_27;
        }
        int64_t v20 = *(void *)(v6 + 8 * v9);
        if (!v20)
        {
          int64_t v9 = v19 + 3;
          if (v19 + 3 >= v13) {
            goto LABEL_27;
          }
          int64_t v20 = *(void *)(v6 + 8 * v9);
          unint64_t v21 = v19 + 3;
          if (!v20) {
            break;
          }
        }
      }
    }
LABEL_26:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 40 * v15;
    outlined init with copy of TableColumnList(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    double result = (void *)outlined init with take of OptionalBinaryInteger(v22, *(void *)(v4 + 56) + v18);
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_27;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_26;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int64_t v25;
  uint64_t v26;
  _OWORD v27[2];

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CodingUserInfoKey();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<CodingUserInfoKey, Any>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<CodingUserInfoKey, Any>, MEMORY[0x1E4FBBC50]);
  uint64_t v6 = *v0;
  unint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    double result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v8;
    return result;
  }
  BOOL v23 = v1;
  double result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    double result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  uint64_t v24 = v6 + 64;
  unint64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  int64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  unint64_t v14 = -1;
  if (v13 < 64) {
    unint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  double v25 = (unint64_t)(v13 + 63) >> 6;
  char v26 = v3 + 16;
  while (1)
  {
    if (v15)
    {
      uint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v25) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v20);
    ++v12;
    if (!v21)
    {
      unint64_t v12 = v20 + 1;
      if (v20 + 1 >= v25) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v24 + 8 * v12);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v15 = (v21 - 1) & v21;
    uint64_t v17 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_12:
    int64_t v18 = *(void *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v18, v2);
    unint64_t v19 = 32 * v17;
    outlined init with copy of Any(*(void *)(v6 + 56) + v19, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v18, v5, v2);
    double result = outlined init with take of Any(v27, (_OWORD *)(*(void *)(v8 + 56) + v19));
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v25)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v1 = v23;
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v24 + 8 * v22);
  if (v21)
  {
    unint64_t v12 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v12 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v12 >= v25) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v24 + 8 * v12);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t i;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24[8];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, WeakBox<Swift.AnyObject>>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    double result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v22 = v1;
  double result = (void *)(v3 + 64);
  uint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v6) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v6);
  }
  BOOL v23 = v2 + 64;
  uint64_t v8 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  uint64_t v11 = v10 & *(void *)(v2 + 64);
  unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
  for (uint64_t i = MEMORY[0x1E4FBC838] + 8;
        ;
        double result = (void *)_s7SwiftUI7WeakBoxVyyXlGWObTm_0((uint64_t)v24, *(void *)(v4 + 56) + v16, (uint64_t)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, i, v18, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [TabCustomizationID]))
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v8 << 6);
      goto LABEL_12;
    }
    unint64_t v19 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v12) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v23 + 8 * v19);
    ++v8;
    if (!v20)
    {
      uint64_t v8 = v19 + 1;
      if (v19 + 1 >= v12) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v23 + 8 * v8);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    uint64_t v11 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v8 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = MEMORY[0x1E4F41720];
    outlined init with copy of WeakBox<Swift.AnyObject>(*(void *)(v2 + 56) + 8 * v15, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, i, MEMORY[0x1E4F41720]);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v12)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_28;
  }
  int64_t v20 = *(void *)(v23 + 8 * v21);
  if (v20)
  {
    uint64_t v8 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v8 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v23 + 8 * v8);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.Relationship, [AccessibilityNode]>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    double result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  int64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  long long v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[3];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.Key, [AccessibilityRelationshipScope.Relationship : [AccessibilityNode]]>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    outlined init with copy of AccessibilityRelationshipScope.Key(*(void *)(v2 + 48) + 48 * v15, (uint64_t)v23);
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v17 = (_OWORD *)(*(void *)(v4 + 48) + 48 * v15);
    int64_t v18 = v23[0];
    unint64_t v19 = v23[2];
    v17[1] = v23[1];
    void v17[2] = v19;
    *uint64_t v17 = v18;
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    double result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  _OWORD *v19;
  long long v20;
  long long v21;
  long long v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  _OWORD v26[4];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<AGAttribute, (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode])>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    BOOL v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    uint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    int64_t v18 = v15 << 6;
    double result = (void *)outlined init with copy of TabViewCustomization(*(void *)(v2 + 56) + (v15 << 6), (uint64_t)v26, (uint64_t (*)(void))type metadata accessor for (key: AccessibilityRelationshipScope.Key, relationship: AccessibilityRelationshipScope.Relationship, nodes: [AccessibilityNode]));
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t v19 = (_OWORD *)(*(void *)(v4 + 56) + v18);
    unint64_t v21 = v26[2];
    int64_t v20 = v26[3];
    uint64_t v22 = v26[1];
    *unint64_t v19 = v26[0];
    v19[1] = v22;
    _OWORD v19[2] = v21;
    v19[3] = v20;
  }
  double v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<AccessibilityRelationshipScope.NodeRelation, Set<AccessibilityRelationshipScope.Key>>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 16 * v15;
    int64_t v18 = *(void *)v17;
    LOBYTE(v17) = *(unsigned char *)(v17 + 8);
    unint64_t v19 = 8 * v15;
    int64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = *(void *)(v4 + 48) + v16;
    *(void *)unint64_t v21 = v18;
    *(unsigned char *)(v21 + 8) = v17;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    double result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<String, Any>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    double result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  double v25 = v1;
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of Any(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    double result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<AnyHashable, DisplayList.Version>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    double result = (void *)outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v17 = *(void *)(v4 + 48) + 40 * v15;
    int64_t v18 = v23[0];
    unint64_t v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  long long v26[2];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<EventID, EventType>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    double result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  double v25 = v1;
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v18 = *v17;
    unint64_t v19 = v17[1];
    int64_t v20 = 40 * v15;
    outlined init with copy of TableColumnList(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v18;
    v21[1] = v19;
    double result = (void *)outlined init with take of OptionalBinaryInteger(v26, *(void *)(v4 + 56) + v20);
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<SceneID, PlatformSceneCache.Info>, (void (*)(void))lazy protocol witness table accessor for type SceneID and conformance SceneID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      double v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    int64_t v18 = *(void *)v17;
    unint64_t v19 = *(void *)(v17 + 8);
    int64_t v20 = *(unsigned char *)(v17 + 16);
    unint64_t v21 = 8 * v15;
    uint64_t v22 = *(void *)(*(void *)(v2 + 56) + v21);
    BOOL v23 = *(void *)(v4 + 48) + v16;
    *(void *)BOOL v23 = *(void *)v17;
    *(void *)(v23 + 8) = v19;
    *(unsigned char *)(v23 + 16) = v20;
    *(void *)(*(void *)(v4 + 56) + v21) = v22;
    outlined copy of SceneID(v18, v19, v20);
    double result = (void *)swift_bridgeObjectRetain();
  }
  char v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  double v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  long long v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, AnyListSelection>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      double v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 48 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 48 * v15;
    int64_t v18 = *(unsigned char *)(v17 + 32);
    unint64_t v19 = 8 * v15;
    int64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = *(void *)(v17 + 40);
    uint64_t v22 = *(void *)(v4 + 48) + v16;
    BOOL v23 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v17;
    *(_OWORD *)(v22 + 16) = v23;
    *(unsigned char *)(v22 + 32) = v18;
    *(void *)(v22 + 40) = v21;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    double result = (void *)swift_retain();
  }
  char v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  double v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  long long v26;
  long long v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, NavigationListState.Selection>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13) {
      goto LABEL_26;
    }
    uint64_t v30 = *(void *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      int64_t v9 = v29 + 1;
      if (v29 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v30 = *(void *)(v6 + 8 * v9);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v30 - 1) & v30;
    unint64_t v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 48 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 48 * v15;
    int64_t v18 = *(unsigned char *)(v17 + 32);
    unint64_t v19 = *(void *)(v17 + 40);
    int64_t v20 = 40 * v15;
    unint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    BOOL v23 = *(void *)(v21 + 8);
    uint64_t v24 = *(void *)(v21 + 32);
    double v25 = *(void *)(v4 + 48) + v16;
    char v26 = *(_OWORD *)(v17 + 16);
    uint64_t v27 = *(_OWORD *)(v21 + 16);
    *(_OWORD *)double v25 = *(_OWORD *)v17;
    *(_OWORD *)(v25 + 16) = v26;
    *(unsigned char *)(v25 + 32) = v18;
    *(void *)(v25 + 40) = v19;
    char v28 = *(void *)(v4 + 56) + v20;
    *(void *)char v28 = v22;
    *(void *)(v28 + 8) = v23;
    *(_OWORD *)(v28 + 16) = v27;
    *(void *)(v28 + 32) = v24;
    swift_retain();
    swift_retain();
    double result = (void *)swift_retain();
  }
  BOOL v31 = v29 + 2;
  if (v31 >= v13) {
    goto LABEL_26;
  }
  uint64_t v30 = *(void *)(v6 + 8 * v31);
  if (v30)
  {
    int64_t v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v30 = *(void *)(v6 + 8 * v9);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationState.ListKey, Bool>, (void (*)(void))lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    double v25 = __clz(__rbit64(v23));
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = v25 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 48) + 48 * v15;
    uint64_t v17 = *(unsigned char *)(v16 + 32);
    int64_t v18 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    unint64_t v19 = *(void *)(v16 + 40);
    int64_t v20 = *(void *)(v4 + 48) + 48 * v15;
    unint64_t v21 = *(_OWORD *)(v16 + 16);
    *(_OWORD *)int64_t v20 = *(_OWORD *)v16;
    *(_OWORD *)(v20 + 16) = v21;
    *(unsigned char *)(v20 + 32) = v17;
    *(void *)(v20 + 40) = v19;
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v18;
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  long long v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<NavigationState.ListKey, [Binding<Bool>]>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      double v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 48 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 48 * v15;
    int64_t v18 = *(unsigned char *)(v17 + 32);
    unint64_t v19 = 8 * v15;
    int64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = *(void *)(v17 + 40);
    uint64_t v22 = *(void *)(v4 + 48) + v16;
    BOOL v23 = *(_OWORD *)(v17 + 16);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v17;
    *(_OWORD *)(v22 + 16) = v23;
    *(unsigned char *)(v22 + 32) = v18;
    *(void *)(v22 + 40) = v21;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    double result = (void *)swift_bridgeObjectRetain();
  }
  char v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  double v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  long long v25;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationLinkSelectionIdentifier, Int>, (void (*)(void))lazy protocol witness table accessor for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 32 * v15;
    int64_t v18 = *(void *)(v17 + 8);
    unint64_t v19 = 8 * v15;
    int64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = *(void *)(v4 + 48) + v16;
    double v25 = *(_OWORD *)(v17 + 16);
    *(void *)unint64_t v21 = *(void *)v17;
    *(void *)(v21 + 8) = v18;
    *(_OWORD *)(v21 + 16) = v25;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_retain();
    double result = (void *)outlined copy of Text.LineStyle?(v18, v25);
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(void))type metadata accessor for _DictionaryStorage<Int, [ObjectIdentifier]>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  long long v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<String, Decodable & Encodable.Type>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    uint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = 24 * v15;
    unint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)(v21 + 16);
    BOOL v23 = (void *)(*(void *)(v4 + 48) + v16);
    uint64_t v24 = *(_OWORD *)v21;
    *BOOL v23 = v19;
    v23[1] = v18;
    double v25 = *(void *)(v4 + 56) + v20;
    *(_OWORD *)double v25 = v24;
    *(void *)(v25 + 16) = v22;
    double result = (void *)swift_bridgeObjectRetain();
  }
  char v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  uint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t v17;
  long long v18;
  long long v19;
  long long v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[4];
  char v25;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationSplitColumn, NavigationState.StackContent.PositionedView>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitColumn and conformance NavigationSplitColumn);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    double result = (void *)outlined init with copy of NavigationState.StackContent.PositionedView(*(void *)(v2 + 56) + 72 * v15, (uint64_t)v24);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = v16;
    uint64_t v17 = *(void *)(v4 + 56) + 72 * v15;
    *(_OWORD *)uint64_t v17 = v24[0];
    int64_t v18 = v24[1];
    unint64_t v19 = v24[2];
    int64_t v20 = v24[3];
    *(unsigned char *)(v17 + 64) = v25;
    *(_OWORD *)(v17 + 32) = v19;
    *(_OWORD *)(v17 + 48) = v20;
    *(_OWORD *)(v17 + 16) = v18;
  }
  BOOL v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<UUID, PlatformItemList>();
  uint64_t v24 = v0;
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v24 = v7;
    return result;
  }
  double result = (void *)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    double result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  uint64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  double v25 = v5 + 64;
  char v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v2 + 32;
  char v28 = v2 + 16;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v16 = v15 | (v11 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v20);
    ++v11;
    if (!v21)
    {
      uint64_t v11 = v20 + 1;
      if (v20 + 1 >= v26) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v25 + 8 * v11);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v14 = (v21 - 1) & v21;
    uint64_t v16 = __clz(__rbit64(v21)) + (v11 << 6);
LABEL_12:
    uint64_t v17 = *(void *)(v2 + 72) * v16;
    (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v4, *(void *)(v5 + 48) + v17, v1);
    int64_t v18 = 8 * v16;
    unint64_t v19 = *(void *)(*(void *)(v5 + 56) + 8 * v16);
    (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(*(void *)(v7 + 48) + v17, v4, v1);
    *(void *)(*(void *)(v7 + 56) + v18) = v19;
    double result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v26) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v25 + 8 * v22);
  if (v21)
  {
    uint64_t v11 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v11 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v11 >= v26) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v25 + 8 * v11);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<KeyCommandID, ()>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 16 * v15;
    unint64_t v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    double result = (void *)swift_retain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<GridIndex, Int>, (void (*)(void))lazy protocol witness table accessor for type GridIndex and conformance GridIndex);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ObjectIdentifier, PropertyList>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    double result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<VerticalEdge, Double>, (void (*)(void))lazy protocol witness table accessor for type VerticalEdge and conformance VerticalEdge);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    int64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
  }
  unint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  int64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unsigned char v22[40];

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, PlatformBarUpdates>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v22);
    uint64_t v17 = 2 * v15;
    int64_t v18 = *(_WORD *)(*(void *)(v2 + 56) + v17);
    double result = (void *)outlined init with take of ToolbarPlacement.Role((uint64_t)v22, *(void *)(v4 + 48) + v16);
    *(_WORD *)(*(void *)(v4 + 56) + v17) = v18;
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(void))type metadata accessor for _DictionaryStorage<ObjectIdentifier, Int>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  uint64_t v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  int64_t v45;
  unint64_t v46;
  int64_t v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  uint64_t v63;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, AlertStorage>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v45 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v45 >= v13) {
      goto LABEL_26;
    }
    char v46 = *(void *)(v6 + 8 * v45);
    ++v9;
    if (!v46)
    {
      int64_t v9 = v45 + 1;
      if (v45 + 1 >= v13) {
        goto LABEL_26;
      }
      char v46 = *(void *)(v6 + 8 * v9);
      if (!v46) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v46 - 1) & v46;
    unint64_t v15 = __clz(__rbit64(v46)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    uint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    int64_t v18 = 248 * v15;
    unint64_t v19 = *(void *)(v2 + 56) + v18;
    int64_t v20 = *(_OWORD *)(v19 + 112);
    uint64_t v22 = *(_OWORD *)(v19 + 64);
    unint64_t v21 = *(_OWORD *)(v19 + 80);
    unint64_t v54 = *(_OWORD *)(v19 + 96);
    char v55 = v20;
    unint64_t v52 = v22;
    char v53 = v21;
    BOOL v23 = *(_OWORD *)(v19 + 176);
    double v25 = *(_OWORD *)(v19 + 128);
    uint64_t v24 = *(_OWORD *)(v19 + 144);
    uint64_t v58 = *(_OWORD *)(v19 + 160);
    uint64_t v59 = v23;
    uint64_t v56 = v25;
    long long v57 = v24;
    uint64_t v27 = *(_OWORD *)(v19 + 208);
    char v26 = *(_OWORD *)(v19 + 224);
    char v28 = *(_OWORD *)(v19 + 192);
    int v63 = *(void *)(v19 + 240);
    double v61 = v27;
    uint64_t v62 = v26;
    uint64_t v60 = v28;
    uint64_t v30 = *(_OWORD *)v19;
    unint64_t v29 = *(_OWORD *)(v19 + 16);
    BOOL v31 = *(_OWORD *)(v19 + 48);
    char v50 = *(_OWORD *)(v19 + 32);
    char v51 = v31;
    uint64_t v48 = v30;
    uint64_t v49 = v29;
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v32 = *(void *)(v4 + 56) + v18;
    unint64_t v33 = v48;
    char v34 = v49;
    uint64_t v35 = v51;
    *(_OWORD *)(v32 + 32) = v50;
    *(_OWORD *)(v32 + 48) = v35;
    *(_OWORD *)uint64_t v32 = v33;
    *(_OWORD *)(v32 + 16) = v34;
    char v36 = v52;
    uint64_t v37 = v53;
    uint64_t v38 = v55;
    *(_OWORD *)(v32 + 96) = v54;
    *(_OWORD *)(v32 + 112) = v38;
    *(_OWORD *)(v32 + 64) = v36;
    *(_OWORD *)(v32 + 80) = v37;
    uint64_t v39 = v56;
    uint64_t v40 = v57;
    char v41 = v59;
    *(_OWORD *)(v32 + 160) = v58;
    *(_OWORD *)(v32 + 176) = v41;
    *(_OWORD *)(v32 + 128) = v39;
    *(_OWORD *)(v32 + 144) = v40;
    char v42 = v60;
    unint64_t v43 = v61;
    char v44 = v62;
    *(void *)(v32 + 240) = v63;
    *(_OWORD *)(v32 + 208) = v43;
    *(_OWORD *)(v32 + 224) = v44;
    *(_OWORD *)(v32 + 192) = v42;
    double result = outlined retain of AlertStorage(&v48);
  }
  uint64_t v47 = v45 + 2;
  if (v47 >= v13) {
    goto LABEL_26;
  }
  char v46 = *(void *)(v6 + 8 * v47);
  if (v46)
  {
    int64_t v9 = v47;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v47 + 1;
    if (__OFADD__(v47, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v46 = *(void *)(v6 + 8 * v9);
    ++v47;
    if (v46) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t *v22;
  unsigned char v23[192];

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, ConfirmationDialog>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    double result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  uint64_t v22 = v1;
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    uint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    int64_t v18 = 184 * v15;
    outlined init with copy of ConfirmationDialog(*(void *)(v2 + 56) + 184 * v15, (uint64_t)v23);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    double result = (void *)outlined init with take of ConfirmationDialog((uint64_t)v23, *(void *)(v4 + 56) + v18);
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v1 = v22;
    goto LABEL_28;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(void))type metadata accessor for _DictionaryStorage<UInt, ObjectIdentifier>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<String, [Any]>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    int64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    double result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  long long v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<String, TabItemGroup.HostCache>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    char v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      char v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v18 = *v17;
    unint64_t v19 = v17[1];
    int64_t v20 = 32 * v15;
    unint64_t v21 = *(void *)(v2 + 56) + v20;
    BOOL v23 = *(void *)v21;
    uint64_t v22 = *(void *)(v21 + 8);
    uint64_t v24 = (void *)(*(void *)(v4 + 48) + v16);
    double v25 = *(_OWORD *)(v21 + 16);
    *uint64_t v24 = v18;
    v24[1] = v19;
    char v26 = *(void *)(v4 + 56) + v20;
    *(void *)char v26 = v23;
    *(void *)(v26 + 8) = v22;
    *(_OWORD *)(v26 + 16) = v25;
    swift_retain();
    swift_retain();
    swift_retain();
    double result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  char v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<String, Int>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    BOOL v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = 8 * v15;
    unint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    double result = (void *)swift_bridgeObjectRetain();
  }
  double v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<AnyHashable, Int>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    double result = (void *)outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v17 = *(void *)(v4 + 48) + 40 * v15;
    int64_t v18 = v23[0];
    unint64_t v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    BOOL v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 2 * v15;
    uint64_t v17 = 24 * v15;
    int64_t v18 = *(void *)(v2 + 48) + v17;
    unint64_t v19 = *(void *)v18;
    int64_t v20 = *(void *)(v18 + 8);
    unint64_t v21 = *(unsigned char *)(v18 + 16);
    LOWORD(v18) = *(_WORD *)(*(void *)(v2 + 56) + v16);
    uint64_t v22 = *(void *)(v4 + 48) + v17;
    *(void *)uint64_t v22 = v19;
    *(void *)(v22 + 8) = v20;
    *(unsigned char *)(v22 + 16) = v21;
    *(_WORD *)(*(void *)(v4 + 56) + v16) = v18;
    double result = (void *)outlined copy of TabCustomizationID.Base();
  }
  double v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<TabCustomizationID, TabSectionCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TabCustomizationID and conformance TabCustomizationID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    BOOL v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 24 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 24 * v15;
    int64_t v18 = *(void *)(v17 + 8);
    unint64_t v19 = *(unsigned char *)(v17 + 16);
    int64_t v20 = 8 * v15;
    unint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v22 = *(void *)v17;
    *(void *)(v22 + 8) = v18;
    *(unsigned char *)(v22 + 16) = v19;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    outlined copy of TabCustomizationID.Base();
    double result = (void *)swift_bridgeObjectRetain();
  }
  double v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UInt32, ScrollViewCommitInfo>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    BOOL v31 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v31 >= v13) {
      goto LABEL_26;
    }
    uint64_t v32 = *(void *)(v6 + 8 * v31);
    ++v9;
    if (!v32)
    {
      int64_t v9 = v31 + 1;
      if (v31 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v32 = *(void *)(v6 + 8 * v9);
      if (!v32) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v32 - 1) & v32;
    unint64_t v15 = __clz(__rbit64(v32)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    uint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    int64_t v18 = 80 * v15;
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 56) + v18);
    int64_t v20 = *v19;
    unint64_t v21 = v19[1];
    uint64_t v22 = v19[2];
    BOOL v23 = v19[3];
    uint64_t v24 = v19[4];
    double v25 = v19[5];
    char v26 = v19[6];
    uint64_t v27 = v19[7];
    unint64_t v29 = v19[8];
    char v28 = v19[9];
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v30 = (uint64_t *)(*(void *)(v4 + 56) + v18);
    *uint64_t v30 = v20;
    v30[1] = v21;
    v30[2] = v22;
    int v30[3] = v23;
    v30[4] = v24;
    v30[5] = v25;
    v30[6] = v26;
    v30[7] = v27;
    v30[8] = v29;
    v30[9] = v28;
    double result = (void *)outlined copy of ScrollViewCommitInfo(v20, v21, v22, v23, v24, v25, v26, v27, v29);
  }
  unint64_t v33 = v31 + 2;
  if (v33 >= v13) {
    goto LABEL_26;
  }
  uint64_t v32 = *(void *)(v6 + 8 * v33);
  if (v32)
  {
    int64_t v9 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v32 = *(void *)(v6 + 8 * v9);
    ++v33;
    if (v32) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<_ViewList_ID.Canonical, LazyLayoutCacheItem>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    int64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_retain();
    double result = (void *)swift_retain();
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<_ViewList_ID.Canonical, Int>, (void (*)(void))lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    int64_t v18 = v17[1];
    unint64_t v19 = 8 * v15;
    int64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    double result = (void *)swift_retain();
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t *v27;
  long long v28;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CommandGroupPlacementBox(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<CommandGroupPlacementBox, CommandAccumulator>();
  uint64_t v6 = *v0;
  unint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    double result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v8;
    return result;
  }
  uint64_t v27 = v1;
  double result = (void *)(v7 + 64);
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v11) {
    double result = memmove(result, (const void *)(v6 + 64), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v14 = 1 << *(unsigned char *)(v6 + 32);
  unint64_t v15 = -1;
  if (v14 < 64) {
    unint64_t v15 = ~(-1 << v14);
  }
  uint64_t v16 = v15 & *(void *)(v6 + 64);
  uint64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      int64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    BOOL v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v17) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v10 + 8 * v23);
    ++v13;
    if (!v24)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v17) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v10 + 8 * v13);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    uint64_t v16 = (v24 - 1) & v24;
    unint64_t v19 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_12:
    int64_t v20 = *(void *)(v3 + 72) * v19;
    outlined init with copy of TabViewCustomization(*(void *)(v6 + 48) + v20, (uint64_t)v5, type metadata accessor for CommandGroupPlacementBox);
    unint64_t v21 = 16 * v19;
    uint64_t v22 = *(void *)(v8 + 48) + v20;
    char v28 = *(_OWORD *)(*(void *)(v6 + 56) + v21);
    outlined init with take of TabSidebarCustomization((uint64_t)v5, v22, type metadata accessor for CommandGroupPlacementBox);
    *(_OWORD *)(*(void *)(v8 + 56) + v21) = v28;
    swift_retain();
    double result = (void *)swift_bridgeObjectRetain();
  }
  double v25 = v23 + 2;
  if (v25 >= v17)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v1 = v27;
    goto LABEL_28;
  }
  uint64_t v24 = *(void *)(v10 + 8 * v25);
  if (v24)
  {
    int64_t v13 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v10 + 8 * v13);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v19;
  long long v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<AnyHashable, Any>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    int64_t v18 = *(void *)(v4 + 48) + v16;
    unint64_t v19 = v25[0];
    int64_t v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)int64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    double result = outlined init with take of Any(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  BOOL v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, EventBinding>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    BOOL v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = 8 * v15;
    unint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    double result = (void *)swift_retain();
  }
  double v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _OWORD v20[2];

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<_ViewDebug.Property, Any>, (void (*)(void))lazy protocol witness table accessor for type _ViewDebug.Property and conformance _ViewDebug.Property);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = v16;
    double result = outlined init with take of Any(v20, (_OWORD *)(*(void *)(v4 + 56) + 32 * v15));
  }
  unint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  int64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  long long v17;
  id v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<DisplayList.Index.ID, DisplayList.AccessibilityUpdater.CacheValue>, (void (*)(void))lazy protocol witness table accessor for type DisplayList.Index.ID and conformance DisplayList.Index.ID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = *(_OWORD *)(*(void *)(v2 + 56) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 56) + v16) = v17;
    int64_t v18 = (id)v17;
    double result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<AccessibilityAttachmentToken, DisplayList.Version>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityAttachmentToken and conformance AccessibilityAttachmentToken);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    double v25 = __clz(__rbit64(v23));
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = v25 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 12 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 12 * v15;
    int64_t v18 = *(void *)v17;
    LOBYTE(v17) = *(unsigned char *)(v17 + 8);
    unint64_t v19 = 8 * v15;
    int64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = *(void *)(v4 + 48) + v16;
    *(void *)unint64_t v21 = v18;
    *(unsigned char *)(v21 + 8) = v17;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(void))type metadata accessor for _DictionaryStorage<Int, Int>);
}

{
  return specialized _NativeDictionary.copy()((void (*)(void))type metadata accessor for _DictionaryStorage<String, MainMenuItemCoordinator>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unsigned char v22[40];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ToolbarPlacement.Role, BarEnvironmentViewModel>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v22);
    uint64_t v17 = 8 * v15;
    int64_t v18 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v22, *(void *)(v4 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v17) = v18;
    double result = (void *)swift_retain();
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unsigned char v22[40];

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<ToolbarPlacement.Role, AnyShapeStyle>, (void (*)(void))lazy protocol witness table accessor for type ToolbarPlacement.Role and conformance ToolbarPlacement.Role);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v22);
    uint64_t v17 = 8 * v15;
    int64_t v18 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    outlined init with take of ToolbarPlacement.Role((uint64_t)v22, *(void *)(v4 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v17) = v18;
    double result = (void *)swift_retain();
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<ViewIdentity, (_:)>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    uint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    int64_t v18 = 16 * v15;
    unint64_t v19 = *(_OWORD *)(*(void *)(v2 + 56) + v18);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(void *)(v4 + 56) + v18) = v19;
    double result = (void *)swift_retain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<AnyHashable, [AnyHashable : PassthroughSubject<Any, Never>]>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v17 = *(void *)(v4 + 48) + 40 * v15;
    int64_t v18 = v23[0];
    unint64_t v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    double result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<AnyHashable, PassthroughSubject<Any, Never>>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v17 = *(void *)(v4 + 48) + 40 * v15;
    int64_t v18 = v23[0];
    unint64_t v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    double result = (void *)swift_retain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, TouchEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v34 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v34 >= v13) {
      goto LABEL_26;
    }
    uint64_t v35 = *(void *)(v6 + 8 * v34);
    ++v9;
    if (!v35)
    {
      int64_t v9 = v34 + 1;
      if (v34 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v35 = *(void *)(v6 + 8 * v9);
      if (!v35) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v35 - 1) & v35;
    unint64_t v15 = __clz(__rbit64(v35)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = 112 * v15;
    unint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    BOOL v23 = *(unsigned char *)(v21 + 8);
    uint64_t v24 = *(void *)(v21 + 16);
    double v25 = *(void *)(v21 + 72);
    char v26 = *(void *)(v21 + 80);
    uint64_t v27 = *(unsigned char *)(v21 + 104);
    char v28 = (void *)(*(void *)(v4 + 48) + v16);
    unint64_t v29 = *(_OWORD *)(v21 + 24);
    uint64_t v30 = *(_OWORD *)(v21 + 40);
    BOOL v31 = *(_OWORD *)(v21 + 56);
    uint64_t v32 = *(_OWORD *)(v21 + 88);
    *char v28 = v19;
    v28[1] = v18;
    unint64_t v33 = *(void *)(v4 + 56) + v20;
    *(void *)unint64_t v33 = v22;
    *(unsigned char *)(v33 + 8) = v23;
    *(void *)(v33 + 16) = v24;
    *(_OWORD *)(v33 + 24) = v29;
    *(_OWORD *)(v33 + 40) = v30;
    *(_OWORD *)(v33 + 56) = v31;
    *(void *)(v33 + 72) = v25;
    *(void *)(v33 + 80) = v26;
    *(_OWORD *)(v33 + 88) = v32;
    *(unsigned char *)(v33 + 104) = v27;
    double result = (void *)swift_retain();
  }
  char v36 = v34 + 2;
  if (v36 >= v13) {
    goto LABEL_26;
  }
  uint64_t v35 = *(void *)(v6 + 8 * v36);
  if (v35)
  {
    int64_t v9 = v36;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v35 = *(void *)(v6 + 8 * v9);
    ++v36;
    if (v35) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<EventID, PhysicalButtonEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    char v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      char v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = 32 * v15;
    unint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    BOOL v23 = *(unsigned char *)(v21 + 8);
    uint64_t v24 = *(void *)(v21 + 16);
    LOBYTE(v21) = *(unsigned char *)(v21 + 24);
    double v25 = (void *)(*(void *)(v4 + 48) + v16);
    *double v25 = v19;
    v25[1] = v18;
    char v26 = *(void *)(v4 + 56) + v20;
    *(void *)char v26 = v22;
    *(unsigned char *)(v26 + 8) = v23;
    *(void *)(v26 + 16) = v24;
    *(unsigned char *)(v26 + 24) = v21;
    double result = (void *)swift_retain();
  }
  unint64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  char v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  long long v18;
  long long v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationSplitColumn, NavigationSplitViewColumnWidth>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitColumn and conformance NavigationSplitColumn);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    uint64_t v24 = __clz(__rbit64(v22));
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = v24 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(void *)(v2 + 56) + 40 * v15;
    uint64_t v17 = *(unsigned char *)(v16 + 32);
    int64_t v18 = *(_OWORD *)v16;
    unint64_t v19 = *(_OWORD *)(v16 + 16);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    int64_t v20 = *(void *)(v4 + 56) + 40 * v15;
    *(_OWORD *)int64_t v20 = v18;
    *(_OWORD *)(v20 + 16) = v19;
    *(unsigned char *)(v20 + 32) = v17;
  }
  BOOL v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<TableColumnCustomizationID, TableColumnCustomizationEntry>, (void (*)(void))lazy protocol witness table accessor for type TableColumnCustomizationID and conformance TableColumnCustomizationID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v29 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v29 >= v13) {
      goto LABEL_26;
    }
    uint64_t v30 = *(void *)(v6 + 8 * v29);
    ++v9;
    if (!v30)
    {
      int64_t v9 = v29 + 1;
      if (v29 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v30 = *(void *)(v6 + 8 * v9);
      if (!v30) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v30 - 1) & v30;
    unint64_t v15 = __clz(__rbit64(v30)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 40 * v15;
    int64_t v18 = *(void *)v17;
    unint64_t v19 = *(void *)(v17 + 8);
    int64_t v20 = *(void *)(v17 + 16);
    unint64_t v21 = *(void *)(v17 + 24);
    uint64_t v22 = *(unsigned char *)(v17 + 32);
    BOOL v23 = 16 * v15;
    uint64_t v24 = *(void *)(v2 + 56) + v23;
    double v25 = *(void *)v24;
    char v26 = *(unsigned char *)(v24 + 8);
    LOBYTE(v24) = *(unsigned char *)(v24 + 9);
    uint64_t v27 = *(void *)(v4 + 48) + v16;
    *(void *)uint64_t v27 = v18;
    *(void *)(v27 + 8) = v19;
    *(void *)(v27 + 16) = v20;
    *(void *)(v27 + 24) = v21;
    *(unsigned char *)(v27 + 32) = v22;
    char v28 = *(void *)(v4 + 56) + v23;
    *(void *)char v28 = v25;
    *(unsigned char *)(v28 + 8) = v26;
    *(unsigned char *)(v28 + 9) = v24;
    double result = (void *)outlined copy of TableColumnCustomizationID.Base(v18, v19, v20, v21, v22);
  }
  BOOL v31 = v29 + 2;
  if (v31 >= v13) {
    goto LABEL_26;
  }
  uint64_t v30 = *(void *)(v6 + 8 * v31);
  if (v30)
  {
    int64_t v9 = v31;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v30 = *(void *)(v6 + 8 * v9);
    ++v31;
    if (v30) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  long long v25;
  long long v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<SpatialEventCollection.Event.ID, SpatialEventCollection.Event>, (void (*)(void))lazy protocol witness table accessor for type SpatialEventCollection.Event.ID and conformance SpatialEventCollection.Event.ID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    BOOL v31 = __clz(__rbit64(v29));
    unint64_t v12 = (v29 - 1) & v29;
    unint64_t v15 = v31 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 80 * v15;
    unint64_t v19 = *(void *)(v2 + 56) + v18;
    int64_t v20 = *(void *)v19;
    unint64_t v21 = *(void *)(v19 + 8);
    uint64_t v22 = *(unsigned char *)(v19 + 16);
    BOOL v23 = *(unsigned char *)(v19 + 40);
    double result = *(void **)(v19 + 64);
    uint64_t v24 = *(unsigned char *)(v19 + 72);
    double v25 = *(_OWORD *)(v19 + 24);
    char v26 = *(_OWORD *)(v19 + 48);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v27 = *(void *)(v4 + 56) + v18;
    *(void *)uint64_t v27 = v20;
    *(void *)(v27 + 8) = v21;
    *(unsigned char *)(v27 + 16) = v22;
    *(_OWORD *)(v27 + 24) = v25;
    *(unsigned char *)(v27 + 40) = v23;
    *(_OWORD *)(v27 + 48) = v26;
    *(void *)(v27 + 64) = result;
    *(unsigned char *)(v27 + 72) = v24;
  }
  uint64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    int64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  uint64_t v9;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for SystemSegmentItem();
  char v26 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<SystemSegmentItem, Int>();
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    double result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v7;
    return result;
  }
  double v25 = v1;
  double result = (void *)(v6 + 64);
  int64_t v9 = v5 + 64;
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v10) {
    double result = memmove(result, (const void *)(v5 + 64), 8 * v10);
  }
  unint64_t v12 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  int64_t v13 = 1 << *(unsigned char *)(v5 + 32);
  unint64_t v14 = -1;
  if (v13 < 64) {
    unint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v5 + 64);
  uint64_t v16 = (unint64_t)(v13 + 63) >> 6;
  while (1)
  {
    if (v15)
    {
      uint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      int64_t v18 = v17 | (v12 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v16) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v9 + 8 * v22);
    ++v12;
    if (!v23)
    {
      unint64_t v12 = v22 + 1;
      if (v22 + 1 >= v16) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v9 + 8 * v12);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v15 = (v23 - 1) & v23;
    int64_t v18 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    unint64_t v19 = *(void *)(v26 + 72) * v18;
    outlined init with copy of TabViewCustomization(*(void *)(v5 + 48) + v19, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    int64_t v20 = 8 * v18;
    unint64_t v21 = *(void *)(*(void *)(v5 + 56) + v20);
    double result = (void *)outlined init with take of TabSidebarCustomization((uint64_t)v4, *(void *)(v7 + 48) + v19, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    *(void *)(*(void *)(v7 + 56) + v20) = v21;
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v16)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  BOOL v23 = *(void *)(v9 + 8 * v24);
  if (v23)
  {
    unint64_t v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v12 >= v16) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v9 + 8 * v12);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  long long *v16;
  long long v17;
  long long v18;
  _OWORD *v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<Axis, FocusableFillerBounds.Metrics>, (void (*)(void))lazy protocol witness table accessor for type Axis and conformance Axis);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    BOOL v23 = __clz(__rbit64(v21));
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = v23 + (v9 << 6);
LABEL_12:
    uint64_t v16 = (long long *)(*(void *)(v2 + 56) + 32 * v15);
    uint64_t v17 = *v16;
    int64_t v18 = v16[1];
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    unint64_t v19 = (_OWORD *)(*(void *)(v4 + 56) + 32 * v15);
    *unint64_t v19 = v17;
    v19[1] = v18;
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  _OWORD v29[7];
  uint64_t v30;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ViewIdentity, InspectorStorage>, (void (*)(void))lazy protocol witness table accessor for type ViewIdentity and conformance ViewIdentity);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13) {
      goto LABEL_26;
    }
    uint64_t v27 = *(void *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      int64_t v9 = v26 + 1;
      if (v26 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v27 = *(void *)(v6 + 8 * v9);
      if (!v27) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v27 - 1) & v27;
    unint64_t v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    uint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    int64_t v18 = 120 * v15;
    double result = (void *)outlined init with copy of InspectorStorage(*(void *)(v2 + 56) + 120 * v15, (uint64_t)v29);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t v19 = *(void *)(v4 + 56) + v18;
    int64_t v20 = v29[3];
    unint64_t v21 = v29[1];
    uint64_t v22 = v29[0];
    *(_OWORD *)(v19 + 32) = v29[2];
    *(_OWORD *)(v19 + 48) = v20;
    *(_OWORD *)unint64_t v19 = v22;
    *(_OWORD *)(v19 + 16) = v21;
    BOOL v23 = v29[4];
    uint64_t v24 = v29[5];
    double v25 = v29[6];
    *(void *)(v19 + 112) = v30;
    *(_OWORD *)(v19 + 80) = v24;
    *(_OWORD *)(v19 + 96) = v25;
    *(_OWORD *)(v19 + 64) = v23;
  }
  char v28 = v26 + 2;
  if (v28 >= v13) {
    goto LABEL_26;
  }
  uint64_t v27 = *(void *)(v6 + 8 * v28);
  if (v27)
  {
    int64_t v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v27 = *(void *)(v6 + 8 * v9);
    ++v28;
    if (v27) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  uint64_t v32;
  int64_t v33;
  unint64_t v34;
  int64_t v35;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, OrnamentPresentation>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v33 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v33 >= v13) {
      goto LABEL_26;
    }
    char v34 = *(void *)(v6 + 8 * v33);
    ++v9;
    if (!v34)
    {
      int64_t v9 = v33 + 1;
      if (v33 + 1 >= v13) {
        goto LABEL_26;
      }
      char v34 = *(void *)(v6 + 8 * v9);
      if (!v34) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v34 - 1) & v34;
    unint64_t v15 = __clz(__rbit64(v34)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 120 * v15;
    unint64_t v19 = *(void *)(v2 + 56) + v18;
    unint64_t v21 = *(void *)v19;
    int64_t v20 = *(void *)(v19 + 8);
    uint64_t v22 = *(unsigned char *)(v19 + 16);
    BOOL v23 = *(unsigned char *)(v19 + 56);
    uint64_t v24 = *(void *)(v19 + 64);
    double v25 = *(unsigned char *)(v19 + 72);
    char v26 = *(unsigned char *)(v19 + 73);
    uint64_t v27 = *(void *)(v19 + 112);
    char v28 = *(_OWORD *)(v19 + 24);
    unint64_t v29 = *(_OWORD *)(v19 + 40);
    uint64_t v30 = *(_OWORD *)(v19 + 80);
    BOOL v31 = *(_OWORD *)(v19 + 96);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v32 = *(void *)(v4 + 56) + v18;
    *(void *)uint64_t v32 = v21;
    *(void *)(v32 + 8) = v20;
    *(unsigned char *)(v32 + 16) = v22;
    *(_OWORD *)(v32 + 24) = v28;
    *(_OWORD *)(v32 + 40) = v29;
    *(unsigned char *)(v32 + 56) = v23;
    *(void *)(v32 + 64) = v24;
    *(unsigned char *)(v32 + 72) = v25;
    *(unsigned char *)(v32 + 73) = v26;
    *(_OWORD *)(v32 + 80) = v30;
    *(_OWORD *)(v32 + 96) = v31;
    *(void *)(v32 + 112) = v27;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    double result = (void *)swift_retain();
  }
  uint64_t v35 = v33 + 2;
  if (v35 >= v13) {
    goto LABEL_26;
  }
  char v34 = *(void *)(v6 + 8 * v35);
  if (v34)
  {
    int64_t v9 = v35;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v35 + 1;
    if (__OFADD__(v35, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v34 = *(void *)(v6 + 8 * v9);
    ++v35;
    if (v34) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  long long v22[2];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Selector, CommandAction>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 40 * v15;
    outlined init with copy of TableColumnList(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    double result = (void *)outlined init with take of OptionalBinaryInteger(v22, *(void *)(v4 + 56) + v18);
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ContainerBackgroundKeys.AnyCustomKey, AnyView>, (void (*)(void))lazy protocol witness table accessor for type ContainerBackgroundKeys.AnyCustomKey and conformance ContainerBackgroundKeys.AnyCustomKey);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = *(void *)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 56) + v16) = v17;
    double result = (void *)swift_retain();
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unsigned char v22[96];

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<Namespace.ID, NavigationDestinationPresentation>, (void (*)(void))lazy protocol witness table accessor for type Namespace.ID and conformance Namespace.ID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 96 * v15;
    outlined init with copy of NavigationDestinationPresentation(*(void *)(v2 + 56) + 96 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    double result = (void *)outlined init with take of NavigationDestinationPresentation((uint64_t)v22, *(void *)(v4 + 56) + v18);
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  _OWORD v23[2];
  uint64_t v24;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<AnyHashable, Anchor<CGRect?>>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v23);
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v17 = *(void *)(v4 + 48) + 40 * v15;
    int64_t v18 = v23[0];
    unint64_t v19 = v23[1];
    *(void *)(v17 + 32) = v24;
    *(_OWORD *)uint64_t v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
    double result = (void *)swift_retain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  long long v26;
  unsigned char v27[168];

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationLinkSelectionIdentifier, UpdateViewDestinationRequest>, (void (*)(void))lazy protocol witness table accessor for type NavigationLinkSelectionIdentifier and conformance NavigationLinkSelectionIdentifier);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    double result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  double v25 = v1;
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 32 * v15;
    int64_t v18 = *(void *)v17;
    unint64_t v19 = *(void *)(v17 + 8);
    char v26 = *(_OWORD *)(v17 + 16);
    int64_t v20 = 160 * v15;
    outlined init with copy of UpdateViewDestinationRequest(*(void *)(v2 + 56) + 160 * v15, (uint64_t)v27);
    unint64_t v21 = *(void *)(v4 + 48) + v16;
    *(void *)unint64_t v21 = v18;
    *(void *)(v21 + 8) = v19;
    *(_OWORD *)(v21 + 16) = v26;
    outlined init with take of UpdateViewDestinationRequest((uint64_t)v27, *(void *)(v4 + 56) + v20);
    swift_retain();
    double result = (void *)outlined copy of Text.LineStyle?(v19, v26);
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  long long *v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t v30;
  _OWORD *v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  unsigned char v48[28];

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest>, (void (*)(void))lazy protocol witness table accessor for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v38 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v38 >= v13) {
      goto LABEL_26;
    }
    uint64_t v39 = *(void *)(v6 + 8 * v38);
    ++v9;
    if (!v39)
    {
      int64_t v9 = v38 + 1;
      if (v38 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v39 = *(void *)(v6 + 8 * v9);
      if (!v39) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v39 - 1) & v39;
    unint64_t v15 = __clz(__rbit64(v39)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 48 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 48 * v15;
    int64_t v18 = *(unsigned char *)(v17 + 16);
    unint64_t v19 = *(unsigned char *)(v17 + 40);
    int64_t v20 = 144 * v15;
    unint64_t v21 = (long long *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = *(_OWORD *)v17;
    BOOL v23 = *(_OWORD *)(v17 + 24);
    double v25 = v21[1];
    uint64_t v24 = v21[2];
    char v26 = v21[4];
    char v44 = v21[3];
    unint64_t v45 = v26;
    char v28 = v21[6];
    uint64_t v27 = v21[7];
    unint64_t v29 = v21[5];
    *(_OWORD *)&v48[12] = *(long long *)((char *)v21 + 124);
    uint64_t v47 = v28;
    *(_OWORD *)uint64_t v48 = v27;
    char v46 = v29;
    char v41 = *v21;
    char v42 = v25;
    unint64_t v43 = v24;
    uint64_t v30 = *(void *)(v4 + 48) + v16;
    *(_OWORD *)uint64_t v30 = v22;
    *(unsigned char *)(v30 + 16) = v18;
    *(_OWORD *)(v30 + 24) = v23;
    *(unsigned char *)(v30 + 40) = v19;
    BOOL v31 = (_OWORD *)(*(void *)(v4 + 56) + v20);
    *BOOL v31 = v41;
    uint64_t v32 = v42;
    unint64_t v33 = v43;
    char v34 = v45;
    v31[3] = v44;
    v31[4] = v34;
    v31[1] = v32;
    v31[2] = v33;
    uint64_t v35 = v46;
    char v36 = v47;
    uint64_t v37 = *(_OWORD *)v48;
    *(_OWORD *)((char *)v31 + 124) = *(_OWORD *)&v48[12];
    v31[6] = v36;
    v31[7] = v37;
    v31[5] = v35;
    double result = (void *)outlined retain of NavigationRequest((uint64_t)&v41);
  }
  uint64_t v40 = v38 + 2;
  if (v40 >= v13) {
    goto LABEL_26;
  }
  uint64_t v39 = *(void *)(v6 + 8 * v40);
  if (v39)
  {
    int64_t v9 = v40;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v39 = *(void *)(v6 + 8 * v9);
    ++v40;
    if (v39) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(void))type metadata accessor for _DictionaryStorage<ObjectIdentifier, [AnyConnectionOptionActionBox]>);
}

{
  return specialized _NativeDictionary.copy()((void (*)(void))type metadata accessor for _DictionaryStorage<AccessibilityTechnology, [AccessibilityFocus.Match : Set<UniqueID>]>);
}

{
  return specialized _NativeDictionary.copy()((void (*)(void))type metadata accessor for _DictionaryStorage<AccessibilityFocus.Match, Set<UniqueID>>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Match>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    int64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  unint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  int64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.copy()((void (*)(void))type metadata accessor for _DictionaryStorage<String, SceneStorageValues.AnyEntry>);
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  uint64_t v10;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  uint64_t *v34;
  _OWORD v35[11];

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<DisplayList.HostedViewState.Key, DisplayList.HostedViewState.ViewInfo>();
  uint64_t v6 = *v0;
  unint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    double result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v8;
    return result;
  }
  char v34 = v1;
  double result = (void *)(v7 + 64);
  uint64_t v10 = v6 + 64;
  uint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v11) {
    double result = memmove(result, (const void *)(v6 + 64), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v14 = 1 << *(unsigned char *)(v6 + 32);
  unint64_t v15 = -1;
  if (v14 < 64) {
    unint64_t v15 = ~(-1 << v14);
  }
  uint64_t v16 = v15 & *(void *)(v6 + 64);
  uint64_t v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      int64_t v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    BOOL v31 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v31 >= v17) {
      goto LABEL_26;
    }
    uint64_t v32 = *(void *)(v10 + 8 * v31);
    ++v13;
    if (!v32)
    {
      int64_t v13 = v31 + 1;
      if (v31 + 1 >= v17) {
        goto LABEL_26;
      }
      uint64_t v32 = *(void *)(v10 + 8 * v13);
      if (!v32) {
        break;
      }
    }
LABEL_25:
    uint64_t v16 = (v32 - 1) & v32;
    unint64_t v19 = __clz(__rbit64(v32)) + (v13 << 6);
LABEL_12:
    int64_t v20 = *(void *)(v3 + 72) * v19;
    outlined init with copy of TabViewCustomization(*(void *)(v6 + 48) + v20, (uint64_t)v5, type metadata accessor for DisplayList.HostedViewState.Key);
    unint64_t v21 = 176 * v19;
    outlined init with copy of DisplayList.HostedViewState.ViewInfo(*(void *)(v6 + 56) + v21, (uint64_t)v35);
    double result = (void *)outlined init with take of TabSidebarCustomization((uint64_t)v5, *(void *)(v8 + 48) + v20, type metadata accessor for DisplayList.HostedViewState.Key);
    uint64_t v22 = (_OWORD *)(*(void *)(v8 + 56) + v21);
    BOOL v23 = v35[7];
    uint64_t v24 = v35[8];
    double v25 = v35[10];
    v22[9] = v35[9];
    v22[10] = v25;
    v22[7] = v23;
    v22[8] = v24;
    char v26 = v35[3];
    uint64_t v27 = v35[4];
    char v28 = v35[6];
    v22[5] = v35[5];
    void v22[6] = v28;
    v22[3] = v26;
    v22[4] = v27;
    unint64_t v29 = v35[2];
    uint64_t v30 = v35[1];
    *uint64_t v22 = v35[0];
    v22[1] = v30;
    void v22[2] = v29;
  }
  unint64_t v33 = v31 + 2;
  if (v33 >= v17)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v1 = v34;
    goto LABEL_28;
  }
  uint64_t v32 = *(void *)(v10 + 8 * v33);
  if (v32)
  {
    int64_t v13 = v33;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v13 >= v17) {
      goto LABEL_26;
    }
    uint64_t v32 = *(void *)(v10 + 8 * v13);
    ++v33;
    if (v32) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<_DisplayList_Identity, DisplayList>, (void (*)(void))lazy protocol witness table accessor for type _DisplayList_Identity and conformance _DisplayList_Identity);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    BOOL v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    uint64_t v17 = *(_DWORD *)(*(void *)(v2 + 48) + 4 * v15);
    int64_t v18 = 16 * v15;
    unint64_t v19 = *(void *)(v2 + 56) + v18;
    int64_t v20 = *(void *)v19;
    unint64_t v21 = *(_WORD *)(v19 + 8);
    LOBYTE(v19) = *(unsigned char *)(v19 + 10);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v22 = *(void *)(v4 + 56) + v18;
    *(void *)uint64_t v22 = v20;
    *(_WORD *)(v22 + 8) = v21;
    *(unsigned char *)(v22 + 10) = v19;
    double result = (void *)swift_bridgeObjectRetain();
  }
  double v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  unsigned char v26[280];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<String, TabEntry>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    double result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  double v25 = v1;
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = 272 * v15;
    outlined init with copy of TabEntry(*(void *)(v2 + 56) + 272 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v21 = v19;
    v21[1] = v18;
    outlined init with take of TabEntry((uint64_t)v26, *(void *)(v4 + 56) + v20);
    double result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  long long v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, (uiKitHostIndex: Int, swiftuiHostIndex: Int, platformIdentifier: String)>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      double v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = __clz(__rbit64(v25)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 32 * v15;
    unint64_t v19 = *(void *)(v2 + 56) + v18;
    unint64_t v21 = *(void *)(v19 + 16);
    int64_t v20 = *(void *)(v19 + 24);
    uint64_t v22 = *(_OWORD *)v19;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    BOOL v23 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)BOOL v23 = v22;
    *(void *)(v23 + 16) = v21;
    *(void *)(v23 + 24) = v20;
    double result = (void *)swift_bridgeObjectRetain();
  }
  char v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  double v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long *v19;
  long long v20;
  long long v21;
  long long v22;
  _OWORD *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, DragReorderableLayoutCoordinator.ChildFrame>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      double v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    uint64_t v27 = __clz(__rbit64(v25));
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = v27 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 48 * v15;
    unint64_t v19 = (long long *)(*(void *)(v2 + 56) + v18);
    int64_t v20 = *v19;
    unint64_t v21 = v19[1];
    uint64_t v22 = v19[2];
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    BOOL v23 = (_OWORD *)(*(void *)(v4 + 56) + v18);
    *BOOL v23 = v20;
    v23[1] = v21;
    v23[2] = v22;
  }
  char v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  double v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  _OWORD v22[2];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<CodingUserInfoKey, Any>(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<PartialKeyPath<UISplitViewController>, Any>, (void (*)(uint64_t))type metadata accessor for PartialKeyPath<UISplitViewController>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      int64_t v9 = v19 + 1;
      if (v19 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v20 = *(void *)(v6 + 8 * v9);
      if (!v20) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 32 * v15;
    outlined init with copy of Any(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v22);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    outlined init with take of Any(v22, (_OWORD *)(*(void *)(v4 + 56) + v18));
    double result = (void *)swift_retain();
  }
  unint64_t v21 = v19 + 2;
  if (v21 >= v13) {
    goto LABEL_26;
  }
  int64_t v20 = *(void *)(v6 + 8 * v21);
  if (v20)
  {
    int64_t v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v20 = *(void *)(v6 + 8 * v9);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  long long v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarStorage.ID, Int>, (void (*)(void))lazy protocol witness table accessor for type ToolbarStorage.ID and conformance ToolbarStorage.ID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      char v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 48 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 48 * v15;
    int64_t v18 = *(void *)(v17 + 8);
    int64_t v20 = *(void *)(v17 + 32);
    unint64_t v19 = *(void *)(v17 + 40);
    unint64_t v21 = 8 * v15;
    uint64_t v22 = *(void *)(*(void *)(v2 + 56) + v21);
    BOOL v23 = *(void *)(v4 + 48) + v16;
    uint64_t v24 = *(_OWORD *)(v17 + 16);
    *(void *)BOOL v23 = *(void *)v17;
    *(void *)(v23 + 8) = v18;
    *(_OWORD *)(v23 + 16) = v24;
    *(void *)(v23 + 32) = v20;
    *(void *)(v23 + 40) = v19;
    *(void *)(*(void *)(v4 + 56) + v21) = v22;
    swift_bridgeObjectRetain();
    double result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  char v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  long long v24;
  unsigned char v25[40];

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<Toolbar.BarLocation, Toolbar.LocationStorage>, (void (*)(void))lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    unint64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    outlined init with copy of Toolbar.BarLocation(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 24 * v15;
    int64_t v18 = *(void *)(v2 + 56) + 24 * v15;
    unint64_t v19 = *(void *)(v18 + 16);
    uint64_t v24 = *(_OWORD *)v18;
    outlined init with take of Toolbar.BarLocation((uint64_t)v25, *(void *)(v4 + 48) + v16);
    int64_t v20 = *(void *)(v4 + 56) + v17;
    *(_OWORD *)int64_t v20 = v24;
    *(void *)(v20 + 16) = v19;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    double result = (void *)swift_bridgeObjectRetain();
  }
  BOOL v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  uint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  id v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<String, Toolbar.VendedItem>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      char v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    int64_t v18 = *v17;
    unint64_t v19 = v17[1];
    int64_t v20 = *(void *)(v2 + 56) + v16;
    unint64_t v21 = *(void **)v20;
    LOBYTE(v20) = *(unsigned char *)(v20 + 8);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = v18;
    v22[1] = v19;
    BOOL v23 = *(void *)(v4 + 56) + v16;
    *(void *)BOOL v23 = v21;
    *(unsigned char *)(v23 + 8) = v20;
    uint64_t v24 = v21;
    double result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  char v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<AGAttribute, AGAttribute>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19) {
        break;
      }
    }
LABEL_25:
    unint64_t v21 = __clz(__rbit64(v19));
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = v21 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 4 * v15;
    uint64_t v17 = *(_DWORD *)(*(void *)(v2 + 56) + v16);
    *(_DWORD *)(*(void *)(v4 + 48) + v16) = *(_DWORD *)(*(void *)(v2 + 48) + v16);
    *(_DWORD *)(*(void *)(v4 + 56) + v16) = v17;
  }
  int64_t v20 = v18 + 2;
  if (v20 >= v13) {
    goto LABEL_26;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UINavigationController, Set<NavigationStackHostingController<AnyView>>>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    int64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    unint64_t v19 = v17;
    double result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *result;
  unint64_t v9;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v30 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<String, ToolbarStorage.Entry>();
  uint64_t v5 = *v0;
  uint64_t v6 = static _DictionaryStorage.copy(original:)();
  unint64_t v7 = v6;
  if (!*(void *)(v5 + 16))
  {
    double result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v7;
    return result;
  }
  char v28 = v1;
  double result = (void *)(v6 + 64);
  int64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v5 || (unint64_t)result >= v5 + 64 + 8 * v9) {
    double result = memmove(result, (const void *)(v5 + 64), 8 * v9);
  }
  unint64_t v29 = v5 + 64;
  uint64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v5 + 16);
  unint64_t v12 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v13 = -1;
  if (v12 < 64) {
    int64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v5 + 64);
  unint64_t v15 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      uint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      uint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    uint64_t v24 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v24 >= v15) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v29 + 8 * v24);
    ++v11;
    if (!v25)
    {
      uint64_t v11 = v24 + 1;
      if (v24 + 1 >= v15) {
        goto LABEL_26;
      }
      double v25 = *(void *)(v29 + 8 * v11);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v14 = (v25 - 1) & v25;
    uint64_t v17 = __clz(__rbit64(v25)) + (v11 << 6);
LABEL_12:
    int64_t v18 = 16 * v17;
    unint64_t v19 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
    int64_t v20 = *v19;
    unint64_t v21 = v19[1];
    uint64_t v22 = *(void *)(v30 + 72) * v17;
    outlined init with copy of TabViewCustomization(*(void *)(v5 + 56) + v22, (uint64_t)v4, type metadata accessor for ToolbarStorage.Entry);
    BOOL v23 = (void *)(*(void *)(v7 + 48) + v18);
    *BOOL v23 = v20;
    v23[1] = v21;
    outlined init with take of TabSidebarCustomization((uint64_t)v4, *(void *)(v7 + 56) + v22, type metadata accessor for ToolbarStorage.Entry);
    double result = (void *)swift_bridgeObjectRetain();
  }
  char v26 = v24 + 2;
  if (v26 >= v15)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v1 = v28;
    goto LABEL_28;
  }
  double v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    uint64_t v11 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v11 >= v15) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v29 + 8 * v11);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  _OWORD v25[5];
  char v26;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ToolbarStorage.Entry.ID, Int>, (void (*)(void))lazy protocol witness table accessor for type ToolbarStorage.Entry.ID and conformance ToolbarStorage.Entry.ID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    double result = (void *)outlined init with copy of ToolbarStorage.Entry.ID(*(void *)(v2 + 48) + 88 * v15, (uint64_t)v25);
    uint64_t v16 = *(void *)(*(void *)(v2 + 56) + 8 * v15);
    uint64_t v17 = *(void *)(v4 + 48) + 88 * v15;
    int64_t v18 = v25[4];
    unint64_t v19 = v25[3];
    int64_t v20 = v25[2];
    *(unsigned char *)(v17 + 80) = v26;
    *(_OWORD *)(v17 + 48) = v19;
    *(_OWORD *)(v17 + 64) = v18;
    *(_OWORD *)(v17 + 32) = v20;
    unint64_t v21 = v25[1];
    *(_OWORD *)uint64_t v17 = v25[0];
    *(_OWORD *)(v17 + 16) = v21;
    *(void *)(*(void *)(v4 + 56) + 8 * v15) = v16;
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  BOOL v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  char v20[8];

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AccessibilityTechnology, AccessibilityFocus.Target>, (void (*)(void))lazy protocol witness table accessor for type AccessibilityTechnology and conformance AccessibilityTechnology);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    outlined init with copy of AccessibilityFocus.Target(*(void *)(v2 + 56) + 8 * v15, (uint64_t)v20);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = v16;
    double result = (void *)outlined init with take of AccessibilityFocus.Target((uint64_t)v20, *(void *)(v4 + 56) + 8 * v15);
  }
  unint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  int64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Character, String>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      char v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    unint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    BOOL v23 = (void *)(*(void *)(v4 + 48) + v16);
    *BOOL v23 = v19;
    v23[1] = v18;
    uint64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    *uint64_t v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    double result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  char v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  long long v25;
  uint64_t v26;
  id v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  long long v31;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<KeyboardShortcut, KeyboardShortcutBridge.Shortcut>, (void (*)(void))lazy protocol witness table accessor for type KeyboardShortcut and conformance KeyboardShortcut);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v29 - 1) & v29;
    unint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 32 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 32 * v15;
    unint64_t v19 = *(void *)v17;
    int64_t v18 = *(void *)(v17 + 8);
    int64_t v20 = *(void *)(v17 + 16);
    LOBYTE(v17) = *(unsigned char *)(v17 + 24);
    unint64_t v21 = 24 * v15;
    uint64_t v22 = *(void *)(v2 + 56) + v21;
    BOOL v23 = *(void *)(v22 + 16);
    uint64_t v24 = *(void *)(v4 + 48) + v16;
    BOOL v31 = *(_OWORD *)v22;
    double v25 = *(_OWORD *)v22;
    *(void *)uint64_t v24 = v19;
    *(void *)(v24 + 8) = v18;
    *(void *)(v24 + 16) = v20;
    *(unsigned char *)(v24 + 24) = v17;
    char v26 = *(void *)(v4 + 56) + v21;
    *(_OWORD *)char v26 = v25;
    *(void *)(v26 + 16) = v23;
    swift_bridgeObjectRetain();
    uint64_t v27 = (id)v31;
    double result = (void *)swift_retain();
  }
  uint64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    int64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  long long v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<KeyboardShortcutBinding, Int>, (void (*)(void))lazy protocol witness table accessor for type KeyboardShortcutBinding and conformance KeyboardShortcutBinding);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v27 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v27 >= v13) {
      goto LABEL_26;
    }
    char v28 = *(void *)(v6 + 8 * v27);
    ++v9;
    if (!v28)
    {
      int64_t v9 = v27 + 1;
      if (v27 + 1 >= v13) {
        goto LABEL_26;
      }
      char v28 = *(void *)(v6 + 8 * v9);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v28 - 1) & v28;
    unint64_t v15 = __clz(__rbit64(v28)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = v15 << 6;
    uint64_t v17 = *(void *)(v2 + 48) + (v15 << 6);
    int64_t v18 = *(void *)(v17 + 8);
    unint64_t v19 = *(void *)(v17 + 16);
    int64_t v20 = *(unsigned char *)(v17 + 24);
    uint64_t v22 = *(void *)(v17 + 48);
    unint64_t v21 = *(void *)(v17 + 56);
    BOOL v23 = 8 * v15;
    uint64_t v24 = *(void *)(*(void *)(v2 + 56) + v23);
    double v25 = *(void *)(v4 + 48) + v16;
    char v26 = *(_OWORD *)(v17 + 32);
    *(void *)double v25 = *(void *)v17;
    *(void *)(v25 + 8) = v18;
    *(void *)(v25 + 16) = v19;
    *(unsigned char *)(v25 + 24) = v20;
    *(_OWORD *)(v25 + 32) = v26;
    *(void *)(v25 + 48) = v22;
    *(void *)(v25 + 56) = v21;
    *(void *)(*(void *)(v4 + 56) + v23) = v24;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    double result = (void *)swift_retain();
  }
  unint64_t v29 = v27 + 2;
  if (v29 >= v13) {
    goto LABEL_26;
  }
  char v28 = *(void *)(v6 + 8 * v29);
  if (v28)
  {
    int64_t v9 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v28 = *(void *)(v6 + 8 * v9);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *result;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  uint64_t v39 = type metadata accessor for UTType();
  uint64_t v1 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v38 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<UTType, String?>();
  unint64_t v33 = v0;
  uint64_t v3 = *v0;
  uint64_t v4 = static _DictionaryStorage.copy(original:)();
  uint64_t v5 = *(void *)(v3 + 16);
  char v41 = v4;
  if (!v5)
  {
    double result = (void *)swift_release();
    BOOL v31 = v41;
    uint64_t v30 = v33;
LABEL_28:
    *uint64_t v30 = v31;
    return result;
  }
  uint64_t v6 = v4;
  double result = (void *)(v4 + 64);
  uint64_t v8 = (unint64_t)((1 << *(unsigned char *)(v6 + 32)) + 63) >> 6;
  if (v6 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
  {
    double result = memmove(result, (const void *)(v3 + 64), 8 * v8);
    uint64_t v6 = v41;
  }
  uint64_t v10 = 0;
  *(void *)(v6 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v40 = v3;
  unint64_t v12 = -1;
  if (v11 < 64) {
    unint64_t v12 = ~(-1 << v11);
  }
  int64_t v13 = v12 & *(void *)(v3 + 64);
  char v34 = v3 + 64;
  uint64_t v35 = (unint64_t)(v11 + 63) >> 6;
  char v36 = v1 + 32;
  uint64_t v37 = v1 + 16;
  unint64_t v15 = v38;
  unint64_t v14 = v39;
  uint64_t v16 = v41;
  while (1)
  {
    if (v13)
    {
      uint64_t v17 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      int64_t v18 = v17 | (v10 << 6);
      unint64_t v19 = v40;
      goto LABEL_12;
    }
    uint64_t v27 = v10 + 1;
    unint64_t v19 = v40;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v27 >= v35) {
      goto LABEL_26;
    }
    char v28 = *(void *)(v34 + 8 * v27);
    ++v10;
    if (!v28)
    {
      uint64_t v10 = v27 + 1;
      if (v27 + 1 >= v35) {
        goto LABEL_26;
      }
      char v28 = *(void *)(v34 + 8 * v10);
      if (!v28) {
        break;
      }
    }
LABEL_25:
    int64_t v13 = (v28 - 1) & v28;
    int64_t v18 = __clz(__rbit64(v28)) + (v10 << 6);
LABEL_12:
    int64_t v20 = *(void *)(v1 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v15, *(void *)(v19 + 48) + v20, v14);
    unint64_t v21 = *(void *)(v19 + 56);
    uint64_t v22 = 16 * v18;
    BOOL v23 = (uint64_t *)(v21 + 16 * v18);
    uint64_t v24 = *v23;
    double v25 = v23[1];
    (*(void (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v16 + 48) + v20, v15, v14);
    char v26 = (void *)(*(void *)(v16 + 56) + v22);
    *char v26 = v24;
    v26[1] = v25;
    double result = (void *)swift_bridgeObjectRetain();
  }
  unint64_t v29 = v27 + 2;
  if (v29 >= v35)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v30 = v33;
    BOOL v31 = v41;
    goto LABEL_28;
  }
  char v28 = *(void *)(v34 + 8 * v29);
  if (v28)
  {
    uint64_t v10 = v29;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v10 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v10 >= v35) {
      goto LABEL_26;
    }
    char v28 = *(void *)(v34 + 8 * v10);
    ++v29;
    if (v28) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  unint64_t v6;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  char v27[8];
  _OWORD v28[6];
  _OWORD v29[2];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<IdentifiedDocumentGroupConfiguration, WeakBox<PlatformDocument>>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    double result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v6) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v6);
  }
  char v26 = v2 + 64;
  uint64_t v8 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  int64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  uint64_t v11 = v10 & *(void *)(v2 + 64);
  unint64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      int64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }
    BOOL v23 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v23 >= v12) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v26 + 8 * v23);
    ++v8;
    if (!v24)
    {
      uint64_t v8 = v23 + 1;
      if (v23 + 1 >= v12) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v26 + 8 * v8);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    uint64_t v11 = (v24 - 1) & v24;
    unint64_t v14 = __clz(__rbit64(v24)) + (v8 << 6);
LABEL_12:
    outlined init with copy of IdentifiedDocumentGroupConfiguration(*(void *)(v2 + 48) + (v14 << 7), (uint64_t)v28);
    unint64_t v15 = MEMORY[0x1E4F41720];
    outlined init with copy of Binding<TabSidebarCustomization>?(*(void *)(v2 + 56) + 8 * v14, (uint64_t)v27, (unint64_t *)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t (*)(uint64_t))type metadata accessor for PlatformDocument, MEMORY[0x1E4F41720]);
    uint64_t v16 = (_OWORD *)(*(void *)(v4 + 48) + (v14 << 7));
    uint64_t v17 = v28[4];
    int64_t v18 = v28[5];
    unint64_t v19 = v29[0];
    *(_OWORD *)((char *)v16 + 105) = *(_OWORD *)((char *)v29 + 9);
    void v16[5] = v18;
    v16[6] = v19;
    long long v16[4] = v17;
    int64_t v20 = v28[0];
    unint64_t v21 = v28[1];
    uint64_t v22 = v28[3];
    void v16[2] = v28[2];
    v16[3] = v22;
    *uint64_t v16 = v20;
    v16[1] = v21;
    double result = (void *)_s7SwiftUI7WeakBoxVyyXlGWObTm_0((uint64_t)v27, *(void *)(v4 + 56) + 8 * v14, (uint64_t)&lazy cache variable for type metadata for WeakBox<PlatformDocument>, (uint64_t)type metadata accessor for PlatformDocument, v15, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<TabSidebarCustomization>?);
  }
  double v25 = v23 + 2;
  if (v25 >= v12)
  {
LABEL_26:
    double result = (void *)swift_release();
    goto LABEL_28;
  }
  uint64_t v24 = *(void *)(v26 + 8 * v25);
  if (v24)
  {
    uint64_t v8 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v8 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v26 + 8 * v8);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UIMenuIdentifier, [UIMenuElement]>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    int64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    unint64_t v19 = v17;
    double result = (void *)swift_bridgeObjectRetain();
  }
  uint64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(unint64_t, char *, uint64_t);
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  int64_t v27;
  uint64_t v28;
  long long v29;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _DictionaryStorage<UUID, (_:)>();
  uint64_t v6 = *v0;
  unint64_t v7 = static _DictionaryStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    double result = (void *)swift_release();
LABEL_28:
    *uint64_t v1 = v8;
    return result;
  }
  double v25 = v1;
  double result = (void *)(v7 + 64);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  if (v8 != v6 || (unint64_t)result >= v6 + 64 + 8 * v10) {
    double result = memmove(result, (const void *)(v6 + 64), 8 * v10);
  }
  char v26 = v6 + 64;
  unint64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  int64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  unint64_t v14 = -1;
  if (v13 < 64) {
    unint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & *(void *)(v6 + 64);
  uint64_t v27 = (unint64_t)(v13 + 63) >> 6;
  char v28 = v3 + 16;
  while (1)
  {
    if (v15)
    {
      uint64_t v16 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      uint64_t v17 = v16 | (v12 << 6);
      goto LABEL_12;
    }
    uint64_t v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v27) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v26 + 8 * v22);
    ++v12;
    if (!v23)
    {
      unint64_t v12 = v22 + 1;
      if (v22 + 1 >= v27) {
        goto LABEL_26;
      }
      BOOL v23 = *(void *)(v26 + 8 * v12);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v15 = (v23 - 1) & v23;
    uint64_t v17 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_12:
    int64_t v18 = *(void *)(v3 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v18, v2);
    unint64_t v19 = 16 * v17;
    int64_t v20 = *(void *)(v8 + 48) + v18;
    unint64_t v21 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
    unint64_t v29 = *(_OWORD *)(*(void *)(v6 + 56) + v19);
    v21(v20, v5, v2);
    *(_OWORD *)(*(void *)(v8 + 56) + v19) = v29;
    double result = (void *)swift_retain();
  }
  uint64_t v24 = v22 + 2;
  if (v24 >= v27)
  {
LABEL_26:
    double result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  BOOL v23 = *(void *)(v26 + 8 * v24);
  if (v23)
  {
    unint64_t v12 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    unint64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v12 >= v27) {
      goto LABEL_26;
    }
    BOOL v23 = *(void *)(v26 + 8 * v12);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  long long v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, (Int, CountingIndex<Int>)>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      double v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    uint64_t v27 = __clz(__rbit64(v25));
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = v27 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 32 * v15;
    unint64_t v19 = *(void *)(v2 + 56) + v18;
    int64_t v20 = *(void *)(v19 + 16);
    unint64_t v21 = *(unsigned char *)(v19 + 24);
    uint64_t v22 = *(_OWORD *)v19;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    BOOL v23 = *(void *)(v4 + 56) + v18;
    *(_OWORD *)BOOL v23 = v22;
    *(void *)(v23 + 16) = v20;
    *(unsigned char *)(v23 + 24) = v21;
  }
  char v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  double v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void *v25;
  long long v26;
  uint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<EventID, HoverEvent>, (void (*)(void))lazy protocol witness table accessor for type EventID and conformance EventID);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    char v28 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v28 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v28);
    ++v9;
    if (!v29)
    {
      int64_t v9 = v28 + 1;
      if (v28 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v29 = *(void *)(v6 + 8 * v9);
      if (!v29) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v29 - 1) & v29;
    unint64_t v15 = __clz(__rbit64(v29)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = 40 * v15;
    unint64_t v21 = *(void *)(v2 + 56) + v20;
    uint64_t v22 = *(void *)v21;
    BOOL v23 = *(unsigned char *)(v21 + 8);
    uint64_t v24 = *(void *)(v21 + 16);
    double v25 = (void *)(*(void *)(v4 + 48) + v16);
    char v26 = *(_OWORD *)(v21 + 24);
    *double v25 = v19;
    v25[1] = v18;
    uint64_t v27 = *(void *)(v4 + 56) + v20;
    *(void *)uint64_t v27 = v22;
    *(unsigned char *)(v27 + 8) = v23;
    *(void *)(v27 + 16) = v24;
    *(_OWORD *)(v27 + 24) = v26;
    double result = (void *)swift_retain();
  }
  uint64_t v30 = v28 + 2;
  if (v30 >= v13) {
    goto LABEL_26;
  }
  unint64_t v29 = *(void *)(v6 + 8 * v30);
  if (v29)
  {
    int64_t v9 = v30;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v29 = *(void *)(v6 + 8 * v9);
    ++v30;
    if (v29) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<EventID, [KeyPress.Handler]>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    BOOL v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      int64_t v9 = v23 + 1;
      if (v23 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v24 = *(void *)(v6 + 8 * v9);
      if (!v24) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v24 - 1) & v24;
    unint64_t v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    unint64_t v19 = *v17;
    int64_t v18 = v17[1];
    int64_t v20 = 8 * v15;
    unint64_t v21 = *(void *)(*(void *)(v2 + 56) + v20);
    uint64_t v22 = (void *)(*(void *)(v4 + 48) + v16);
    *uint64_t v22 = v19;
    v22[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v20) = v21;
    double result = (void *)swift_bridgeObjectRetain();
  }
  double v25 = v23 + 2;
  if (v25 >= v13) {
    goto LABEL_26;
  }
  uint64_t v24 = *(void *)(v6 + 8 * v25);
  if (v24)
  {
    int64_t v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v24 = *(void *)(v6 + 8 * v9);
    ++v25;
    if (v24) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  long long v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  unint64_t v27;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, &lazy cache variable for type metadata for _DictionaryStorage<NavigationStackViewPosition, VersionSeed>, (void (*)(void))lazy protocol witness table accessor for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v24 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v24);
    ++v9;
    if (!v25)
    {
      int64_t v9 = v24 + 1;
      if (v24 + 1 >= v13) {
        goto LABEL_26;
      }
      double v25 = *(void *)(v6 + 8 * v9);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    uint64_t v27 = __clz(__rbit64(v25));
    unint64_t v12 = (v25 - 1) & v25;
    unint64_t v15 = v27 + (v9 << 6);
LABEL_12:
    uint64_t v16 = 48 * v15;
    uint64_t v17 = *(void *)(v2 + 48) + 48 * v15;
    int64_t v18 = *(unsigned char *)(v17 + 16);
    unint64_t v19 = 4 * v15;
    int64_t v20 = *(_DWORD *)(*(void *)(v2 + 56) + v19);
    unint64_t v21 = *(unsigned char *)(v17 + 40);
    uint64_t v22 = *(void *)(v4 + 48) + v16;
    BOOL v23 = *(_OWORD *)(v17 + 24);
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v17;
    *(unsigned char *)(v22 + 16) = v18;
    *(_OWORD *)(v22 + 24) = v23;
    *(unsigned char *)(v22 + 40) = v21;
    *(_DWORD *)(*(void *)(v4 + 56) + v19) = v20;
  }
  char v26 = v24 + 2;
  if (v26 >= v13) {
    goto LABEL_26;
  }
  double v25 = *(void *)(v6 + 8 * v26);
  if (v25)
  {
    int64_t v9 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    double v25 = *(void *)(v6 + 8 * v9);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  uint64_t v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  _OWORD v52[2];

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<Int, Image.Resolved>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v39 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v39 >= v13) {
      goto LABEL_26;
    }
    uint64_t v40 = *(void *)(v6 + 8 * v39);
    ++v9;
    if (!v40)
    {
      int64_t v9 = v39 + 1;
      if (v39 + 1 >= v13) {
        goto LABEL_26;
      }
      uint64_t v40 = *(void *)(v6 + 8 * v9);
      if (!v40) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v40 - 1) & v40;
    unint64_t v15 = __clz(__rbit64(v40)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 184 * v15;
    unint64_t v19 = *(void *)(v2 + 56) + v18;
    int64_t v20 = *(_OWORD *)(v19 + 112);
    uint64_t v22 = *(_OWORD *)(v19 + 64);
    unint64_t v21 = *(_OWORD *)(v19 + 80);
    uint64_t v48 = *(_OWORD *)(v19 + 96);
    uint64_t v49 = v20;
    char v46 = v22;
    uint64_t v47 = v21;
    uint64_t v24 = *(_OWORD *)(v19 + 144);
    BOOL v23 = *(_OWORD *)(v19 + 160);
    double v25 = *(_OWORD *)(v19 + 128);
    *(_DWORD *)((char *)v52 + 15) = *(_DWORD *)(v19 + 175);
    char v51 = v24;
    v52[0] = v23;
    char v50 = v25;
    uint64_t v27 = *(_OWORD *)v19;
    char v26 = *(_OWORD *)(v19 + 16);
    char v28 = *(_OWORD *)(v19 + 48);
    char v44 = *(_OWORD *)(v19 + 32);
    unint64_t v45 = v28;
    char v42 = v27;
    unint64_t v43 = v26;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    unint64_t v29 = *(void *)(v4 + 56) + v18;
    uint64_t v30 = v42;
    BOOL v31 = v43;
    uint64_t v32 = v45;
    *(_OWORD *)(v29 + 32) = v44;
    *(_OWORD *)(v29 + 48) = v32;
    *(_OWORD *)unint64_t v29 = v30;
    *(_OWORD *)(v29 + 16) = v31;
    unint64_t v33 = v46;
    char v34 = v47;
    uint64_t v35 = v49;
    *(_OWORD *)(v29 + 96) = v48;
    *(_OWORD *)(v29 + 112) = v35;
    *(_OWORD *)(v29 + 64) = v33;
    *(_OWORD *)(v29 + 80) = v34;
    char v36 = v50;
    uint64_t v37 = v51;
    uint64_t v38 = v52[0];
    *(_DWORD *)(v29 + 175) = *(_DWORD *)((char *)v52 + 15);
    *(_OWORD *)(v29 + 144) = v37;
    *(_OWORD *)(v29 + 160) = v38;
    *(_OWORD *)(v29 + 128) = v36;
    double result = (void *)outlined retain of Image.Resolved((uint64_t)&v42);
  }
  char v41 = v39 + 2;
  if (v41 >= v13) {
    goto LABEL_26;
  }
  uint64_t v40 = *(void *)(v6 + 8 * v41);
  if (v40)
  {
    int64_t v9 = v41;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v41 + 1;
    if (__OFADD__(v41, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    uint64_t v40 = *(void *)(v6 + 8 * v9);
    ++v41;
    if (v40) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  uint64_t v1 = v0;
  _ss18_DictionaryStorageCy7SwiftUI4AxisOAC21FocusableFillerBoundsV7MetricsVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AdaptableTabBarPlacement, Visibility>, (void (*)(void))lazy protocol witness table accessor for type AdaptableTabBarPlacement and conformance AdaptableTabBarPlacement);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    uint64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      int64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    int64_t v20 = __clz(__rbit64(v18));
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = v20 + (v9 << 6);
LABEL_12:
    uint64_t v16 = *(unsigned char *)(*(void *)(v2 + 56) + v15);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    *(unsigned char *)(*(void *)(v4 + 56) + v15) = v16;
  }
  unint64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  int64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    int64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<UniqueID, (_ViewList_ID.Canonical, AccessibilitySectionContext?)>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      char v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    uint64_t v17 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
    int64_t v18 = 24 * v15;
    unint64_t v19 = *(void *)(v2 + 56) + v18;
    int64_t v20 = *(void *)(v19 + 8);
    unint64_t v21 = *(_DWORD *)(v19 + 16);
    uint64_t v22 = *(_WORD *)(v19 + 20);
    BOOL v23 = *(void *)v19;
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t v24 = *(void *)(v4 + 56) + v18;
    *(void *)uint64_t v24 = v23;
    *(void *)(v24 + 8) = v20;
    *(_WORD *)(v24 + 20) = v22;
    *(_DWORD *)(v24 + 16) = v21;
    double result = (void *)swift_retain();
  }
  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  char v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  uint64_t v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  _OWORD v28[2];
  uint64_t v29;

  uint64_t v1 = v0;
  type metadata accessor for _DictionaryStorage<AnyHashable, _ScrollableLayoutProxy.SizeRecord>();
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    double result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }
  double result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    double result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    double v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      char v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    double result = (void *)outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v28);
    uint64_t v17 = *(void *)(v2 + 56) + v16;
    int64_t v18 = *(_DWORD *)v17;
    unint64_t v19 = *(void *)(v4 + 48) + v16;
    int64_t v20 = *(_OWORD *)(v17 + 8);
    unint64_t v21 = *(_OWORD *)(v17 + 24);
    uint64_t v22 = v28[0];
    BOOL v23 = v28[1];
    *(void *)(v19 + 32) = v29;
    *(_OWORD *)unint64_t v19 = v22;
    *(_OWORD *)(v19 + 16) = v23;
    uint64_t v24 = *(void *)(v4 + 56) + v16;
    *(_DWORD *)uint64_t v24 = v18;
    *(_OWORD *)(v24 + 8) = v20;
    *(_OWORD *)(v24 + 24) = v21;
  }
  uint64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  char v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    char v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t UIHostingController.allowedBehaviors.getter()
{
  return *(void *)(v0 + direct field offset for UIHostingController.allowedBehaviors);
}

uint64_t _SwiftUIIsAppleInternalBuild()
{
  if (_SwiftUIIsAppleInternalBuild_once != -1) {
    dispatch_once(&_SwiftUIIsAppleInternalBuild_once, &__block_literal_global_0);
  }
  return _SwiftUIIsAppleInternalBuild_isInternal;
}

uint64_t static NavigationStackHostingController.HostingView.ignoresPresentations.getter()
{
  return isLinkedOnOrAfter(_:)() & 1;
}

void ToolbarPlacement.Role.updatePreference(viewGraph:tracker:isAdding:)(uint64_t a1, char **a2, char a3)
{
  outlined init with copy of ToolbarPlacement.Role(v3, (uint64_t)v56);
  switch(v57)
  {
    case 0:
      if (a3)
      {
        uint64_t v6 = &type metadata for NavigationBarAppearanceKey;
        GraphHost.addPreference<A>(_:)();
        unint64_t v7 = *a2;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        unint64_t v8 = *((void *)v7 + 2);
        unint64_t v9 = *((void *)v7 + 3);
        unint64_t v10 = v8 + 1;
        if (v8 >= v9 >> 1)
        {
          unint64_t v49 = v8 + 1;
          char v28 = v7;
          unint64_t v29 = *((void *)v7 + 2);
          uint64_t v30 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v8 + 1, 1, v28);
          unint64_t v8 = v29;
          unint64_t v10 = v49;
          unint64_t v7 = v30;
        }
        *((void *)v7 + 2) = v10;
        uint64_t v11 = &protocol witness table for NavigationBarAppearanceKey;
        goto LABEL_44;
      }
      GraphHost.removePreference<A>(_:)();
      specialized VersionSeedSetTracker.removePreference<A>(_:)();
      break;
    case 1:
      if (a3)
      {
        uint64_t v6 = &type metadata for WindowToolbarItemsAppearanceKey;
        GraphHost.addPreference<A>(_:)();
        unint64_t v7 = *a2;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        unint64_t v8 = *((void *)v7 + 2);
        unint64_t v14 = *((void *)v7 + 3);
        unint64_t v15 = v8 + 1;
        if (v8 >= v14 >> 1)
        {
          unint64_t v51 = v8 + 1;
          char v34 = v7;
          unint64_t v35 = *((void *)v7 + 2);
          char v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v8 + 1, 1, v34);
          unint64_t v8 = v35;
          unint64_t v15 = v51;
          unint64_t v7 = v36;
        }
        *((void *)v7 + 2) = v15;
        uint64_t v11 = &protocol witness table for WindowToolbarItemsAppearanceKey;
        goto LABEL_44;
      }
      GraphHost.removePreference<A>(_:)();
      specialized VersionSeedSetTracker.removePreference<A>(_:)();
      break;
    case 2:
      if (a3)
      {
        uint64_t v6 = &type metadata for WindowToolbarAppearanceKey;
        GraphHost.addPreference<A>(_:)();
        unint64_t v7 = *a2;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        unint64_t v8 = *((void *)v7 + 2);
        unint64_t v12 = *((void *)v7 + 3);
        unint64_t v13 = v8 + 1;
        if (v8 >= v12 >> 1)
        {
          unint64_t v50 = v8 + 1;
          BOOL v31 = v7;
          unint64_t v32 = *((void *)v7 + 2);
          unint64_t v33 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v8 + 1, 1, v31);
          unint64_t v8 = v32;
          unint64_t v13 = v50;
          unint64_t v7 = v33;
        }
        *((void *)v7 + 2) = v13;
        uint64_t v11 = &protocol witness table for WindowToolbarAppearanceKey;
        goto LABEL_44;
      }
      GraphHost.removePreference<A>(_:)();
      specialized VersionSeedSetTracker.removePreference<A>(_:)();
      break;
    case 3:
      if (a3)
      {
        uint64_t v6 = &type metadata for BottomBarAppearanceKey;
        GraphHost.addPreference<A>(_:)();
        unint64_t v7 = *a2;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        unint64_t v8 = *((void *)v7 + 2);
        unint64_t v16 = *((void *)v7 + 3);
        unint64_t v17 = v8 + 1;
        if (v8 >= v16 >> 1)
        {
          unint64_t v52 = v8 + 1;
          uint64_t v37 = v7;
          unint64_t v38 = *((void *)v7 + 2);
          uint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v8 + 1, 1, v37);
          unint64_t v8 = v38;
          unint64_t v17 = v52;
          unint64_t v7 = v39;
        }
        *((void *)v7 + 2) = v17;
        uint64_t v11 = &protocol witness table for BottomBarAppearanceKey;
        goto LABEL_44;
      }
      GraphHost.removePreference<A>(_:)();
      specialized VersionSeedSetTracker.removePreference<A>(_:)();
      break;
    case 4:
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      break;
    case 5:
      if (a3)
      {
        uint64_t v6 = &type metadata for TabBarAppearanceKey;
        GraphHost.addPreference<A>(_:)();
        unint64_t v7 = *a2;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        unint64_t v8 = *((void *)v7 + 2);
        unint64_t v23 = *((void *)v7 + 3);
        unint64_t v24 = v8 + 1;
        if (v8 >= v23 >> 1)
        {
          unint64_t v54 = v8 + 1;
          unint64_t v43 = v7;
          unint64_t v44 = *((void *)v7 + 2);
          unint64_t v45 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v8 + 1, 1, v43);
          unint64_t v8 = v44;
          unint64_t v24 = v54;
          unint64_t v7 = v45;
        }
        *((void *)v7 + 2) = v24;
        uint64_t v11 = &protocol witness table for TabBarAppearanceKey;
        goto LABEL_44;
      }
      GraphHost.removePreference<A>(_:)();
      specialized VersionSeedSetTracker.removePreference<A>(_:)();
      break;
    case 6:
      if (a3)
      {
        uint64_t v6 = &type metadata for BottomOrnamentAppearanceKey;
        GraphHost.addPreference<A>(_:)();
        unint64_t v7 = *a2;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
        }
        unint64_t v8 = *((void *)v7 + 2);
        unint64_t v25 = *((void *)v7 + 3);
        unint64_t v26 = v8 + 1;
        if (v8 >= v25 >> 1)
        {
          unint64_t v55 = v8 + 1;
          char v46 = v7;
          unint64_t v47 = *((void *)v7 + 2);
          uint64_t v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v25 > 1), v8 + 1, 1, v46);
          unint64_t v8 = v47;
          unint64_t v26 = v55;
          unint64_t v7 = v48;
        }
        *((void *)v7 + 2) = v26;
        uint64_t v11 = &protocol witness table for BottomOrnamentAppearanceKey;
LABEL_44:
        uint64_t v27 = &v7[24 * v8];
        *((void *)v27 + 4) = v6;
        *((void *)v27 + 5) = v11;
        *((_DWORD *)v27 + 12) = -1;
        *a2 = v7;
      }
      else
      {
        GraphHost.removePreference<A>(_:)();
        specialized VersionSeedSetTracker.removePreference<A>(_:)();
      }
      break;
    default:
      if (a3)
      {
        GraphHost.addPreference<A>(_:)();
        int64_t v18 = *a2;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int64_t v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v18 + 2) + 1, 1, v18);
        }
        unint64_t v19 = *((void *)v18 + 2);
        unint64_t v20 = *((void *)v18 + 3);
        unint64_t v21 = v19 + 1;
        if (v19 >= v20 >> 1)
        {
          unint64_t v53 = v19 + 1;
          uint64_t v40 = v18;
          unint64_t v41 = *((void *)v18 + 2);
          char v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v19 + 1, 1, v40);
          unint64_t v19 = v41;
          unint64_t v21 = v53;
          int64_t v18 = v42;
        }
        *((void *)v18 + 2) = v21;
        uint64_t v22 = &v18[24 * v19];
        *((void *)v22 + 4) = &type metadata for AccessoryBarAppearanceKey;
        *((void *)v22 + 5) = &protocol witness table for AccessoryBarAppearanceKey;
        *((_DWORD *)v22 + 12) = -1;
        *a2 = v18;
      }
      else
      {
        GraphHost.removePreference<A>(_:)();
        specialized VersionSeedSetTracker.removePreference<A>(_:)();
      }
      outlined destroy of ToolbarPlacement.Role((uint64_t)v56);
      break;
  }
}

uint64_t type metadata accessor for SharingActivityPickerBridge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ShareConfigurationBridge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PPTTestBridge()
{
  return self;
}

uint64_t type metadata accessor for UIKitInspectorV3Bridge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SharingActivityPickerBridge.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  SharingActivityPickerBridge.init()();
  return v0;
}

uint64_t SharingActivityPickerBridge.init()()
{
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 24) = 0;
  *(unsigned char *)(v0 + 32) = 1;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  _s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOi0_((uint64_t)v2);
  outlined init with take of SharingActivityPickerPresentation?((uint64_t)v2, v0 + 56);
  *(void *)(v0 + 208) = 0;
  *(_DWORD *)(v0 + 216) = 0;
  *(void *)(v0 + 224) = 0;
  *(unsigned char *)(v0 + 232) = 0;
  return v0;
}

double _s7SwiftUI33SharingActivityPickerPresentation33_ED8966F32E79CAE8636A59B86DBA4A31LLVSgWOi0_(uint64_t a1)
{
  *(_DWORD *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t specialized SharingActivityPickerBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t ShareConfigurationBridge.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_DWORD *)(v0 + 24) = -1;
  return v0;
}

uint64_t specialized ShareConfigurationBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t specialized UIKitInspectorV3Bridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t add #1 <A><A1>(preference:) in UIHostingController.addScreenEdgesSystemGesturePreferences(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return VersionSeedSetTracker.addPreference<A>(_:)(a1, a4, a5);
}

uint64_t UIHostingController.addScreenEdgesSystemGesturePreferences(to:)(uint64_t a1)
{
  return add #1 <A><A1>(preference:) in UIHostingController.addScreenEdgesSystemGesturePreferences(to:)((uint64_t)&type metadata for ScreenEdgesSystemGestureKey, a1, v1, (uint64_t)&type metadata for ScreenEdgesSystemGestureKey, (uint64_t)&protocol witness table for ScreenEdgesSystemGestureKey);
}

uint64_t add #1 <A><A1>(preference:) in UIHostingController.addPersistentSystemOverlaysPreferences(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return VersionSeedSetTracker.addPreference<A>(_:)(a1, a4, a5);
}

uint64_t UIHostingController.addPersistentSystemOverlaysPreferences(to:)(uint64_t a1)
{
  return add #1 <A><A1>(preference:) in UIHostingController.addPersistentSystemOverlaysPreferences(to:)((uint64_t)&type metadata for PersistentSystemOverlaysKey, a1, v1, (uint64_t)&type metadata for PersistentSystemOverlaysKey, (uint64_t)&protocol witness table for PersistentSystemOverlaysKey);
}

uint64_t _UIHostingView.sharingActivityPickerBridge.setter(uint64_t a1)
{
  *(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x120)) = a1;
  return swift_release();
}

uint64_t _UIHostingView.shareConfigurationBridge.setter(uint64_t a1)
{
  *(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x128)) = a1;
  return swift_release();
}

void _UIHostingView.inspectorBridge.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x108);
  uint64_t v3 = *(void **)((char *)v1 + v2);
  *(void *)((char *)v1 + v2) = a1;
}

void specialized _UIHostingView.viewController.setter()
{
  swift_unknownObjectWeakAssign();

  _UIHostingView.updateBackgroundColor()();
}

uint64_t type metadata accessor for UIKitContentScrollViewBridge()
{
  return self;
}

uint64_t UIHostingController.contentScrollViewBridge.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for UIHostingController.contentScrollViewBridge) = a1;
  return swift_release();
}

void UIHostingController.barAppearanceBridge.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + direct field offset for UIHostingController.barAppearanceBridge);
  *(void *)(v1 + direct field offset for UIHostingController.barAppearanceBridge) = a1;
}

uint64_t type metadata accessor for BarAppearanceBridge()
{
  return self;
}

uint64_t BarAppearanceBridge.addPreferences(to:)()
{
  GraphHost.addPreference<A>(_:)();
  uint64_t v1 = (char **)(v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_seedTracker);
  swift_beginAccess();
  uint64_t v2 = *v1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
    *uint64_t v1 = v2;
  }
  unint64_t v5 = *((void *)v2 + 2);
  unint64_t v4 = *((void *)v2 + 3);
  if (v5 >= v4 >> 1)
  {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1, v2);
    *uint64_t v1 = v2;
  }
  *((void *)v2 + 2) = v5 + 1;
  uint64_t v6 = &v2[24 * v5];
  *((void *)v6 + 4) = &type metadata for NavigationTitleKey;
  *((void *)v6 + 5) = &protocol witness table for NavigationTitleKey;
  *((_DWORD *)v6 + 12) = -1;
  GraphHost.addPreference<A>(_:)();
  unint64_t v7 = *v1;
  char v8 = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v7;
  if ((v8 & 1) == 0)
  {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v7 + 2) + 1, 1, v7);
    *uint64_t v1 = v7;
  }
  unint64_t v10 = *((void *)v7 + 2);
  unint64_t v9 = *((void *)v7 + 3);
  if (v10 >= v9 >> 1)
  {
    unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v7);
    *uint64_t v1 = v7;
  }
  *((void *)v7 + 2) = v10 + 1;
  uint64_t v11 = &v7[24 * v10];
  *((void *)v11 + 4) = &type metadata for ToolbarRoleKey;
  *((void *)v11 + 5) = &protocol witness table for ToolbarRoleKey;
  *((_DWORD *)v11 + 12) = -1;
  GraphHost.addPreference<A>(_:)();
  uint64_t v12 = (uint64_t)*v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = (char *)v12;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v12 + 16) + 1, 1, (char *)v12);
    uint64_t v12 = result;
    *uint64_t v1 = (char *)result;
  }
  unint64_t v15 = *(void *)(v12 + 16);
  unint64_t v14 = *(void *)(v12 + 24);
  if (v15 >= v14 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1, (char *)v12);
    uint64_t v12 = result;
    *uint64_t v1 = (char *)result;
  }
  *(void *)(v12 + 16) = v15 + 1;
  unint64_t v16 = v12 + 24 * v15;
  *(void *)(v16 + 32) = &type metadata for NavigationBarBackButtonHiddenKey;
  *(void *)(v16 + 40) = &protocol witness table for NavigationBarBackButtonHiddenKey;
  *(_DWORD *)(v16 + 48) = -1;
  uint64_t v17 = (uint64_t)*v1;
  unint64_t v19 = *((void *)*v1 + 2);
  unint64_t v18 = *((void *)*v1 + 3);
  if (v19 >= v18 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, (char *)v17);
    uint64_t v17 = result;
    *uint64_t v1 = (char *)result;
  }
  *(void *)(v17 + 16) = v19 + 1;
  unint64_t v20 = v17 + 24 * v19;
  *(void *)(v20 + 32) = &type metadata for ToolbarKey;
  *(void *)(v20 + 40) = &protocol witness table for ToolbarKey;
  *(_DWORD *)(v20 + 48) = -1;
  uint64_t v21 = (uint64_t)*v1;
  unint64_t v23 = *((void *)*v1 + 2);
  unint64_t v22 = *((void *)*v1 + 3);
  if (v23 >= v22 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, (char *)v21);
    uint64_t v21 = result;
    *uint64_t v1 = (char *)result;
  }
  *(void *)(v21 + 16) = v23 + 1;
  unint64_t v24 = v21 + 24 * v23;
  *(void *)(v24 + 32) = &type metadata for SearchKey;
  *(void *)(v24 + 40) = &protocol witness table for SearchKey;
  *(_DWORD *)(v24 + 48) = -1;
  return result;
}

void UIHostingController.toolbarBridge.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + direct field offset for UIHostingController.toolbarBridge);
  *(void *)(v1 + direct field offset for UIHostingController.toolbarBridge) = a1;
}

id @objc ToolbarBridge.init()()
{
  return ToolbarBridge.init()();
}

void UIHostingController.keyboardShortcutBridge.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + direct field offset for UIHostingController.keyboardShortcutBridge);
  *(void *)(v1 + direct field offset for UIHostingController.keyboardShortcutBridge) = a1;
}

uint64_t UIHostingController.alwaysOnBridge.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for UIHostingController.alwaysOnBridge) = a1;
  return swift_release();
}

uint64_t type metadata accessor for UIKitInspectorBridgeV5()
{
  return __swift_instantiateGenericMetadata();
}

id @objc UIKitInspectorBridgeV5.init()()
{
  return SwiftUIGlue.init()();
}

uint64_t specialized UIKitInspectorBridgeV5.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

void UIHostingController.inspectorBridgeV5.setter(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + direct field offset for UIHostingController.inspectorBridgeV5);
  *(void *)(v1 + direct field offset for UIHostingController.inspectorBridgeV5) = a1;
}

uint64_t type metadata accessor for KeyboardShortcutBridge()
{
  return self;
}

uint64_t type metadata accessor for AlwaysOnBridge()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AlwaysOnBridge.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(_DWORD *)(v0 + 44) = 0;
  *(void *)(v0 + 24) = 0;
  *(void *)(v0 + 32) = 0;
  *(_WORD *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = MEMORY[0x1E4FBC860];
  return v0;
}

uint64_t specialized AlwaysOnBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t UIHostingController.navigationBridge.setter(uint64_t a1)
{
  *(void *)(v1 + direct field offset for UIHostingController.navigationBridge) = a1;
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type NavigationStackViewPosition and conformance NavigationStackViewPosition()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationStackViewPosition and conformance NavigationStackViewPosition;
  if (!lazy protocol witness table cache variable for type NavigationStackViewPosition and conformance NavigationStackViewPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationStackViewPosition and conformance NavigationStackViewPosition;
  if (!lazy protocol witness table cache variable for type NavigationStackViewPosition and conformance NavigationStackViewPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationStackViewPosition and conformance NavigationStackViewPosition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key;
  if (!lazy protocol witness table cache variable for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key;
  if (!lazy protocol witness table cache variable for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationState.StackContent.Key and conformance NavigationState.StackContent.Key);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationState.ListKey and conformance NavigationState.ListKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationState.ListKey and conformance NavigationState.ListKey;
  if (!lazy protocol witness table cache variable for type NavigationState.ListKey and conformance NavigationState.ListKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationState.ListKey and conformance NavigationState.ListKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationState.ListKey and conformance NavigationState.ListKey;
  if (!lazy protocol witness table cache variable for type NavigationState.ListKey and conformance NavigationState.ListKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationState.ListKey and conformance NavigationState.ListKey);
  }
  return result;
}

uint64_t type metadata accessor for NavigationBridge_PhoneTV()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t NavigationBridge_PhoneTV.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  uint64_t v1 = specialized UIKitNavigationBridge.init()(v0);
  swift_release();
  return v1;
}

uint64_t specialized UIKitNavigationBridge.addPreferences(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t outlined destroy of KeyboardShortcutSource?(uint64_t a1)
{
  type metadata accessor for KeyboardShortcutSource?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for KeyboardShortcutSource?()
{
  if (!lazy cache variable for type metadata for KeyboardShortcutSource?)
  {
    type metadata accessor for KeyboardShortcutSource();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyboardShortcutSource?);
    }
  }
}

uint64_t KeyboardShortcutBridge.flushKeyCommands(_:)(uint64_t a1)
{
  uint64_t v2 = (void *)(v1 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_shortcutMap);
  swift_beginAccess();
  unint64_t v24 = v2;
  uint64_t v26 = *v2 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(*v2 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(*v2 + 64);
  int64_t v27 = (unint64_t)(v3 + 63) >> 6;
  uint64_t v29 = *v2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  if (v5) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v13 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v13 < v27)
    {
      unint64_t v14 = *(void *)(v26 + 8 * v13);
      ++v7;
      if (v14) {
        goto LABEL_22;
      }
      int64_t v7 = v13 + 1;
      if (v13 + 1 >= v27) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v26 + 8 * v7);
      if (v14) {
        goto LABEL_22;
      }
      int64_t v7 = v13 + 2;
      if (v13 + 2 >= v27) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v26 + 8 * v7);
      if (v14) {
        goto LABEL_22;
      }
      int64_t v7 = v13 + 3;
      if (v13 + 3 >= v27) {
        goto LABEL_26;
      }
      unint64_t v14 = *(void *)(v26 + 8 * v7);
      if (v14)
      {
LABEL_22:
        unint64_t v5 = (v14 - 1) & v14;
        for (unint64_t i = __clz(__rbit64(v14)) + (v7 << 6); ; unint64_t i = v11 | (v7 << 6))
        {
          uint64_t v16 = *(void *)(v29 + 56) + 24 * i;
          unint64_t v18 = *(void **)v16;
          uint64_t v17 = *(void *)(v16 + 8);
          uint64_t v19 = *(void *)(v16 + 16);
          outlined init with copy of KeyboardShortcutSource?(a1, (uint64_t)v30);
          uint64_t v20 = v31;
          if (v31)
          {
            uint64_t v8 = v32;
            __swift_project_boxed_opaque_existential_1(v30, v31);
            unint64_t v9 = *(void (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16);
            id v10 = v18;
            swift_retain();
            v9(v10, v17, v19, v20, v8);
            swift_release();

            uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
            if (!v5) {
              goto LABEL_7;
            }
          }
          else
          {
            uint64_t result = outlined destroy of KeyboardShortcutSource?((uint64_t)v30);
            if (!v5) {
              goto LABEL_7;
            }
          }
LABEL_6:
          unint64_t v11 = __clz(__rbit64(v5));
          v5 &= v5 - 1;
        }
      }
      int64_t v15 = v13 + 4;
      if (v15 < v27)
      {
        unint64_t v14 = *(void *)(v26 + 8 * v15);
        if (v14)
        {
          int64_t v7 = v15;
          goto LABEL_22;
        }
        while (1)
        {
          int64_t v7 = v15 + 1;
          if (__OFADD__(v15, 1)) {
            goto LABEL_28;
          }
          if (v7 >= v27) {
            break;
          }
          unint64_t v14 = *(void *)(v26 + 8 * v7);
          ++v15;
          if (v14) {
            goto LABEL_22;
          }
        }
      }
    }
LABEL_26:
    swift_release();
    *unint64_t v24 = MEMORY[0x1E4FBC868];
    swift_bridgeObjectRelease();
    uint64_t v21 = v25 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_currentBindings;
    uint64_t v22 = MEMORY[0x1E4FBC860];
    *(void *)uint64_t v21 = MEMORY[0x1E4FBC860];
    *(_DWORD *)(v21 + 8) = -1;
    swift_bridgeObjectRelease();
    uint64_t v23 = v25 + OBJC_IVAR____TtC7SwiftUI22KeyboardShortcutBridge_updatedBindings;
    *(void *)uint64_t v23 = v22;
    *(_DWORD *)(v23 + 8) = -1;
    return swift_bridgeObjectRelease();
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t specialized AlwaysOnBridge.removePreferences(from:)()
{
  return GraphHost.removePreference<A>(_:)();
}

uint64_t specialized UIKitNavigationBridge.removePreferences(from:)()
{
  return GraphHost.removePreference<A>(_:)();
}

unint64_t lazy protocol witness table accessor for type VerticalEdge and conformance VerticalEdge()
{
  unint64_t result = lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge;
  if (!lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalEdge and conformance VerticalEdge);
  }
  return result;
}

unint64_t type metadata accessor for KeyboardShortcutSource()
{
  unint64_t result = lazy cache variable for type metadata for KeyboardShortcutSource;
  if (!lazy cache variable for type metadata for KeyboardShortcutSource)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for KeyboardShortcutSource);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitColumn and conformance NavigationSplitColumn()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitColumn and conformance NavigationSplitColumn;
  if (!lazy protocol witness table cache variable for type NavigationSplitColumn and conformance NavigationSplitColumn)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitColumn and conformance NavigationSplitColumn);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitColumn and conformance NavigationSplitColumn;
  if (!lazy protocol witness table cache variable for type NavigationSplitColumn and conformance NavigationSplitColumn)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitColumn and conformance NavigationSplitColumn);
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchFieldConfiguration.Suggestions()
{
  return &type metadata for SearchFieldConfiguration.Suggestions;
}

ValueMetadata *type metadata accessor for PlatformItemCollection()
{
  return &type metadata for PlatformItemCollection;
}

void @objc PlatformViewHost._setHostsLayoutEngine(_:)(void *a1, uint64_t a2, Swift::Bool a3)
{
  id v4 = a1;
  PlatformViewHost._setHostsLayoutEngine(_:)(a3);
}

Swift::Void __swiftcall PlatformViewHost._setHostsLayoutEngine(_:)(Swift::Bool a1)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  int v5 = -1;
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    || (lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature(),
        (static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0))
  {
    v4.id receiver = v1;
    v4.Class super_class = ObjectType;
    objc_msgSendSuper2(&v4, sel__setHostsLayoutEngine_, a1);
  }
}

uint64_t partial apply for closure #1 in ViewLeafView.sizeThatFits(in:environment:context:)()
{
  return closure #1 in ViewLeafView.sizeThatFits(in:environment:context:)(*(void *)(v0 + 32), *(_DWORD *)(v0 + 40), *(unsigned int *)(v0 + 44), *(void *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(void *)(v0 + 64), *(unsigned __int8 *)(v0 + 72), *(uint64_t **)(v0 + 80), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v160 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = type metadata accessor for ViewLeafView();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v121 = (uint64_t)&v118 - v8;
  unint64_t v9 = (int *)type metadata accessor for PlatformViewChild();
  uint64_t v138 = *((void *)v9 - 1);
  MEMORY[0x1F4188790](v9);
  uint64_t v128 = (char *)&v118 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v120 = (char *)&v118 - v12;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v141 = type metadata accessor for Optional();
  uint64_t v140 = *(void *)(v141 - 8);
  MEMORY[0x1F4188790](v141);
  uint64_t v127 = (char *)&v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  unint64_t v131 = (char *)&v118 - v15;
  MEMORY[0x1F4188790](v16);
  unint64_t v18 = (char *)&v118 - v17;
  uint64_t v152 = a3;
  uint64_t v143 = type metadata accessor for PlatformViewRepresentableContext();
  uint64_t v146 = *(void *)(v143 - 8);
  MEMORY[0x1F4188790](v143);
  uint64_t v20 = (char *)&v118 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v119 = (uint64_t)&v118 - v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v148 = (char *)&v118 - v24;
  uint64_t v25 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v126 = (char *)&v118 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v118 - v29;
  uint64_t Value = AGGraphGetValue();
  uint64_t v145 = v32;
  uint64_t v135 = v25;
  unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  uint64_t v149 = v30;
  uint64_t v125 = v25 + 16;
  uint64_t v124 = v33;
  v33(v30, Value, a2);
  char v34 = (unsigned int *)AGGraphGetValue();
  uint64_t v139 = v35;
  unsigned int v36 = *v34;
  uint64_t v37 = (uint64_t *)AGGraphGetValue();
  uint64_t v134 = v38;
  uint64_t v39 = *v37;
  uint64_t v150 = v37[1];
  uint64_t v151 = v39;
  int v40 = *(_DWORD *)(a1 + 28);
  LODWORD(v39) = *MEMORY[0x1E4F4E7A0];
  uint64_t v147 = v9;
  uint64_t v122 = v7;
  if (v40 == v39)
  {
    int v130 = 0;
    uint64_t v129 = 0;
    uint64_t v133 = 0;
    uint64_t v144 = 0;
  }
  else
  {
    unsigned int v41 = v36;
    uint64_t v42 = AGGraphGetValue();
    char v44 = v43;
    uint64_t v45 = *(void *)v42;
    uint64_t v133 = *(unsigned __int8 *)(v42 + 8);
    uint64_t v46 = *(unsigned int *)(v42 + 12);
    swift_retain();
    uint64_t v144 = v45;
    if (v45 == 1)
    {
      int v130 = 0;
      uint64_t v129 = 0;
      uint64_t v133 = 0;
      uint64_t v144 = 0;
    }
    else
    {
      int v130 = v44 & 1;
      uint64_t v129 = v46 << 32;
    }
    unsigned int v36 = v41;
    unint64_t v9 = v147;
  }
  uint64_t v47 = v9[22];
  if (v36 >> 1 == *(_DWORD *)(a1 + v47))
  {
    swift_retain();
    uint64_t v48 = swift_retain();
  }
  else
  {
    uint64_t v155 = *(void *)(a1 + 56);
    uint64_t v156 = *(void *)(a1 + 64);
    swift_retain();
    swift_retain();
    _DynamicPropertyBuffer.reset()();
    PlatformViewChild.resetPlatformView()();
    *(_DWORD *)(a1 + v47) = v36 >> 1;
  }
  MEMORY[0x1F4188790](v48);
  uint64_t v49 = v152;
  *(&v118 - 4) = a2;
  *(&v118 - 3) = v49;
  uint64_t v116 = a1;
  LODWORD(v117) = v36;
  uint64_t v50 = (uint64_t)v149;
  _ss24withUnsafeMutablePointer2to_q0_xz_q0_SpyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v149, (uint64_t)partial apply for closure #1 in closure #1 in PlatformViewChild.updateValue(), (uint64_t)(&v118 - 6), a2, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBC278], v51);
  uint64_t v136 = 0;
  LODWORD(v137) = v36;
  if (v153)
  {
    char v52 = 1;
  }
  else
  {
    Outputuint64_t Value = AGGraphGetOutputValue();
    char v52 = 1;
    if (OutputValue && (v145 & 1) == 0 && (v139 & 1) == 0) {
      char v52 = AGGraphCurrentAttributeWasModified();
    }
  }
  char v153 = v52;
  AGGraphClearUpdate();
  closure #2 in closure #1 in PlatformViewChild.updateValue()(a1, v50, a2, v152, &v155);
  AGGraphSetUpdate();
  uint64_t v145 = v155;
  uint64_t v158 = v151;
  uint64_t v159 = v150;
  swift_retain();
  swift_retain();
  swift_retain();
  EnvironmentValues.preferenceBridge.setter();
  uint64_t v132 = v9[21];
  unint64_t v54 = *(void **)(a1 + v132);
  uint64_t v123 = v6;
  if (v54)
  {
    char v55 = (char)v134;
    if (v134)
    {
      uint64_t v56 = (uint64_t)v20;
      swift_retain();
      id v57 = v54;
      swift_retain();
      char v58 = PropertyList.Tracker.hasDifferentUsedValues(_:)();
      swift_release();
      swift_release();
      if (v58)
      {
        swift_retain();
        PropertyList.Tracker.reset()();
        swift_release();
        char v153 = 1;
      }
    }
    else
    {
      uint64_t v56 = (uint64_t)v20;
      id v75 = v54;
    }
    uint64_t v76 = a2;
    if (PlatformViewHost.isPlatformFocusContainerHost.getter())
    {
      uint64_t v155 = 0;
      LOWORD(v156) = 1;
      type metadata accessor for EnvironmentPropertyKey<FocusGroupIDKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<FocusGroupIDKey>, (uint64_t)&type metadata for FocusGroupIDKey, (uint64_t)&protocol witness table for FocusGroupIDKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<FocusGroupIDKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v159)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
      char v55 = (char)v134;
    }
    char v77 = v139 & 1;
    int v78 = v147;
    swift_retain();
    swift_retain();
    EnvironmentValues.init(_:tracker:)();
    uint64_t v80 = v155;
    uint64_t v79 = v156;
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    closure #3 in closure #1 in PlatformViewChild.updateValue()(v77, v55 & 1, (uint64_t)v54, v80, v79, v137, v130, v144, v133 | v129, (v133 | (unint64_t)v129) >> 32);
    AGGraphSetUpdate();
    uint64_t v81 = a1 + v78[20];
    long long v82 = v131;
    uint64_t v134 = *(void (**)(char *, uint64_t, uint64_t))(v140 + 16);
    v134(v131, v81, v141);
    uint64_t v133 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v133 + 48))(v82, 1);
    if (result == 1)
    {
      __break(1u);
      goto LABEL_59;
    }

    uint64_t v83 = *(void *)(a1 + 40);
    uint64_t v155 = v80;
    uint64_t v156 = v79;
    uint64_t v139 = v79;
    char v157 = 0;
    uint64_t v84 = (uint64_t)v82;
    uint64_t v85 = v76;
    PlatformViewRepresentableContext.init(coordinator:preferenceBridge:transaction:environmentStorage:)(v84, v83, v145, &v155, v56);
    uint64_t v86 = v143;
    (*(void (**)(char *, uint64_t, uint64_t))(v146 + 32))(v148, v56, v143);
    swift_retain();
    swift_retain();
    uint64_t v87 = (uint64_t)v149;
LABEL_41:
    if (v153 != 1)
    {
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
LABEL_57:
      (*(void (**)(char *, uint64_t))(v146 + 8))(v148, v86);
      swift_release();
      swift_release();
      return (*(uint64_t (**)(uint64_t, uint64_t))(v135 + 8))(v87, v85);
    }
    type metadata accessor for ViewGraph();
    uint64_t v95 = MEMORY[0x18C114EE0]() + 200;
    swift_beginAccess();
    uint64_t v96 = MEMORY[0x18C119DF0](v95);
    swift_release();
    uint64_t v137 = v80;
    if (v96)
    {
      swift_getObjectType();
      uint64_t v97 = swift_conformsToProtocol2();
      if (v97) {
        uint64_t v98 = v97;
      }
      else {
        uint64_t v98 = 0;
      }
      if (v97) {
        uint64_t v99 = v96;
      }
      else {
        uint64_t v99 = 0;
      }
      if (v99)
      {
LABEL_54:
        uint64_t v100 = v138;
        char v101 = v128;
        char v102 = v147;
        uint64_t v103 = (*(uint64_t (**)(char *, uint64_t, int *))(v138 + 16))(v128, a1, v147);
        MEMORY[0x1F4188790](v103);
        uint64_t v104 = v152;
        *(&v118 - 8) = v85;
        *(&v118 - 7) = v104;
        uint64_t v152 = v99;
        *(&v118 - 6) = v99;
        *(&v118 - 5) = v98;
        uint64_t v105 = v148;
        uint64_t v106 = (uint64_t)v149;
        *(&v118 - 4) = a1;
        *(&v118 - 3) = (uint64_t)v105;
        uint64_t v116 = v106;
        uint64_t WitnessTable = swift_getWitnessTable();
        StatefulRule.withObservation<A>(do:)();
        uint64_t result = (*(uint64_t (**)(char *, int *))(v100 + 8))(v101, v102);
        unint64_t v108 = *(void **)(a1 + v132);
        if (v108)
        {
          uint64_t v109 = (uint64_t)v126;
          v124(v126, v106, v85);
          uint64_t v110 = (uint64_t)v127;
          v134(v127, a1 + v102[20], v141);
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v133 + 48))(v110, 1);
          if (result != 1)
          {
            uint64_t v111 = v121;
            uint64_t v112 = ViewLeafView.init(content:platformView:coordinator:)(v109, v108, v110, v121);
            MEMORY[0x1F4188790](v112);
            uint64_t v116 = (uint64_t)v102;
            uint64_t v117 = WitnessTable;
            uint64_t v113 = v108;
            uint64_t v114 = v123;
            _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v111, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v118 - 4), v123, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v115);
            swift_release();
            swift_release();

            swift_release();
            swift_unknownObjectRelease();
            swift_release();
            swift_release();
            swift_release();
            (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v111, v114);
            uint64_t v86 = v143;
            uint64_t v87 = (uint64_t)v149;
            goto LABEL_57;
          }
          goto LABEL_60;
        }
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
        goto LABEL_61;
      }
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v99 = 0;
    }
    uint64_t v98 = 0;
    goto LABEL_54;
  }
  char v153 = 1;
  swift_retain();
  PropertyList.Tracker.reset()();
  swift_release();
  swift_retain();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  uint64_t v60 = v155;
  uint64_t v59 = v156;
  double v61 = *(void (**)(char *, uint64_t, uint64_t))(v140 + 16);
  v61(v18, a1 + v9[20], v141);
  uint64_t v62 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v62 + 48))(v18, 1);
  if (result != 1)
  {
    uint64_t v64 = *(void *)(a1 + 40);
    uint64_t v155 = v60;
    uint64_t v156 = v59;
    char v157 = 0;
    uint64_t v65 = v119;
    PlatformViewRepresentableContext.init(coordinator:preferenceBridge:transaction:environmentStorage:)((uint64_t)v18, v64, v145, &v155, v119);
    (*(void (**)(char *, uint64_t, uint64_t))(v146 + 32))(v148, v65, v143);
    type metadata accessor for ViewGraph();
    swift_retain();
    uint64_t v66 = v60;
    swift_retain_n();
    uint64_t v139 = v59;
    swift_retain_n();
    uint64_t v67 = swift_retain();
    uint64_t v68 = MEMORY[0x18C114EE0](v67) + 200;
    swift_beginAccess();
    uint64_t v69 = MEMORY[0x18C119DF0](v68);
    swift_release();
    uint64_t v134 = v61;
    uint64_t v133 = v62;
    if (v69)
    {
      swift_getObjectType();
      uint64_t v70 = swift_conformsToProtocol2();
      if (v70) {
        uint64_t v71 = v70;
      }
      else {
        uint64_t v71 = 0;
      }
      uint64_t v72 = a2;
      if (v70) {
        uint64_t v73 = v69;
      }
      else {
        uint64_t v73 = 0;
      }
      if (v73)
      {
        uint64_t v74 = v73;
LABEL_40:
        uint64_t v88 = v120;
        int v89 = v147;
        uint64_t v90 = (*(uint64_t (**)(char *, uint64_t, int *))(v138 + 16))(v120, a1, v147);
        unint64_t v131 = (char *)&v118;
        MEMORY[0x1F4188790](v90);
        uint64_t v91 = v152;
        *(&v118 - 10) = v72;
        *(&v118 - 9) = v91;
        uint64_t v92 = (uint64_t)v149;
        *(&v118 - 8) = (uint64_t)v148;
        *(&v118 - 7) = v92;
        *(&v118 - 6) = v74;
        *(&v118 - 5) = v71;
        uint64_t v80 = v66;
        *(&v118 - 4) = v66;
        *(&v118 - 3) = v139;
        LODWORD(v116) = v137;
        uint64_t v117 = a1;
        type metadata accessor for PlatformViewHost();
        type metadata accessor for Optional();
        swift_getWitnessTable();
        uint64_t v87 = v92;
        StatefulRule.withObservation<A>(do:)();
        swift_release();
        swift_release();
        int v93 = v89;
        uint64_t v85 = v72;
        (*(void (**)(char *, int *))(v138 + 8))(v88, v93);
        swift_unknownObjectRelease();
        int v94 = *(void **)(a1 + v132);
        *(void *)(a1 + v132) = v154;

        uint64_t v86 = v143;
        goto LABEL_41;
      }
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v72 = a2;
    }
    uint64_t v74 = 0;
    uint64_t v71 = 0;
    goto LABEL_40;
  }
LABEL_61:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for PlatformViewChild()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for PlatformViewChild(uint64_t a1)
{
  unint64_t v1 = ((((((((((((((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
               + 7) & 0xFFFFFFFFFFFFFFFCLL)
             + 7) & 0xFFFFFFFFFFFFFFFCLL)
           + 7) & 0xFFFFFFFFFFFFFFFCLL)
         + 7) & 0xFFFFFFFFFFFFFFFCLL)
       + 11) & 0xFFFFFFFFFFFFFFF8)
     + 15;
  swift_release();
  swift_release();
  unint64_t v2 = ((v1 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v5 = (v2 + *(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v5, 1, AssociatedTypeWitness)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v5, AssociatedTypeWitness);
  }
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  if (!*(_DWORD *)(v4 + 84)) {
    ++v6;
  }

  return swift_release();
}

_DWORD *initializeWithCopy for PlatformViewChild(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  unint64_t v5 = (_DWORD *)(((unint64_t)v3 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v5 = *v6;
  uint64_t v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v7 = *v8;
  unint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v9 = *v10;
  uint64_t v11 = (_DWORD *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v12 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v11 = *v12;
  uint64_t v13 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v14 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v13 = *v14;
  uint64_t v15 = (_DWORD *)(((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v16 = (_DWORD *)(((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v15 = *v16;
  uint64_t v17 = (_DWORD *)(((unint64_t)v15 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v18 = (_DWORD *)(((unint64_t)v16 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v17 = *v18;
  uint64_t v19 = (void *)(((unint64_t)v17 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)(((unint64_t)v18 + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v19 = *v20;
  uint64_t v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v22 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v21 = *v22;
  uint64_t v23 = (_OWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = (_OWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v23 = *v24;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v27 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v28 = (void *)(((unint64_t)v23 + v27 + 16) & ~v27);
  uint64_t v29 = (const void *)(((unint64_t)v24 + v27 + 16) & ~v27);
  uint64_t v30 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48);
  swift_retain();
  swift_retain();
  if (v30(v29, 1, AssociatedTypeWitness))
  {
    int v31 = *(_DWORD *)(v26 + 84);
    uint64_t v32 = *(void *)(v26 + 64);
    if (v31) {
      size_t v33 = *(void *)(v26 + 64);
    }
    else {
      size_t v33 = v32 + 1;
    }
    memcpy(v28, v29, v33);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v28, v29, AssociatedTypeWitness);
    uint64_t v35 = *(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56);
    uint64_t v34 = v26 + 56;
    v35(v28, 0, 1, AssociatedTypeWitness);
    int v31 = *(_DWORD *)(v34 + 28);
    uint64_t v32 = *(void *)(v34 + 8);
  }
  if (v31) {
    uint64_t v36 = v32;
  }
  else {
    uint64_t v36 = v32 + 1;
  }
  uint64_t v37 = (void *)(((unint64_t)v28 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v38 = (void **)(((unint64_t)v29 + v36 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v39 = *v38;
  *uint64_t v37 = *v38;
  int v40 = (_DWORD *)(((unint64_t)v37 + 11) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v41 = (_DWORD *)(((unint64_t)v38 + 11) & 0xFFFFFFFFFFFFFFF8);
  *int v40 = *v41;
  *(void *)(((unint64_t)v40 + 11) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v41 + 11) & 0xFFFFFFFFFFFFFFF8);
  id v42 = v39;
  swift_retain();
  return a1;
}

uint64_t PlatformViewRepresentableAdaptor.sizeThatFits(_:provider:context:)(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v26 = a5;
  uint64_t v21 = a6;
  int v22 = a2;
  int v23 = a4;
  uint64_t v24 = a1;
  uint64_t v25 = a3;
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for PlatformViewRepresentableContext();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)(a7 + 24);
  uint64_t v13 = type metadata accessor for UIViewRepresentableContext();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  uint64_t v17 = (char *)&v21 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, v21, v8, v15);
  UIViewRepresentableContext.init<A>(_:)((uint64_t)v11, (uint64_t)v17);
  unint64_t v18 = *(uint64_t (**)(uint64_t))(v12 + 80);
  char v28 = v22 & 1;
  char v27 = v23 & 1;
  uint64_t v19 = v18(v24);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  return v19;
}

uint64_t UIViewRepresentableContext.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PlatformViewRepresentableContext();
  uint64_t v5 = a1 + *(int *)(v4 + 36);
  uint64_t v6 = a2 + *(int *)(type metadata accessor for UIViewRepresentableContext() + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v6, v5, AssociatedTypeWitness);
  uint64_t v8 = protocol witness for ArchivedViewHostStates.count.getter in conformance _ArchivedViewHost<A, B>.LegacyStates();
  uint64_t v9 = specialized ReferenceFileDocumentConfiguration.document.getter();
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v10, v11, v12);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = v10;
  *(void *)(a2 + 24) = v11;
  *(unsigned char *)(a2 + 32) = v12;
  return result;
}

uint64_t destroy for PlatformViewRepresentableContext(uint64_t a1)
{
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(uint64_t (**)(unint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = AssociatedTypeWitness;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v3 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);

  return v4(v6, v5);
}

uint64_t outlined consume of RepresentableContextValues.EnvironmentStorage(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t type metadata accessor for UIViewRepresentableContext()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized ReferenceFileDocumentConfiguration.document.getter()
{
  return *(void *)(v0 + 8);
}

uint64_t protocol witness for ArchivedViewHostStates.count.getter in conformance _ArchivedViewHost<A, B>.LegacyStates()
{
  return *(void *)v0;
}

uint64_t initializeWithCopy for PlatformViewRepresentableContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  swift_retain();
  swift_retain();
  outlined copy of RepresentableContextValues.EnvironmentStorage(v5, v6, v7);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((*(unsigned __int8 *)(v9 + 80) + 33 + a1) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 33 + a2) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t outlined copy of RepresentableContextValues.EnvironmentStorage(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t destroy for UIViewRepresentableContext(uint64_t a1)
{
  swift_release();
  swift_release();
  outlined consume of RepresentableContextValues.EnvironmentStorage(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(uint64_t (**)(unint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = AssociatedTypeWitness;
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v3 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);

  return v4(v6, v5);
}

uint64_t closure #1 in ViewLeafView.sizeThatFits(in:environment:context:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  uint64_t v59 = a8;
  int v63 = a7;
  uint64_t v62 = a6;
  int v61 = a5;
  uint64_t v57 = a3;
  LODWORD(v56) = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v64 = AssociatedTypeWitness;
  uint64_t v65 = v13;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  double v15 = (char *)&v51 - v14;
  uint64_t v16 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v51 - v18;
  uint64_t v60 = type metadata accessor for PlatformViewRepresentableContext();
  uint64_t v58 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v21 = (char *)&v51 - v20;
  uint64_t v22 = type metadata accessor for ViewLeafView();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a1 + *(int *)(v22 + 40), v16);
  unsigned long long v70 = v56 | (unsigned __int128)(unint64_t)(v57 << 32);
  LOBYTE(v71) = 1;
  PlatformViewRepresentableContext.init(coordinator:preferenceBridge:transaction:environmentStorage:)((uint64_t)v19, 0, 0, (uint64_t *)&v70, (uint64_t)v21);
  uint64_t v57 = a4;
  *(void *)&unsigned long long v70 = a4;
  BYTE8(v70) = v61 & 1;
  uint64_t v71 = v62;
  LOBYTE(v72) = v63 & 1;
  uint64_t v23 = ProposedViewSize.init(_:)();
  LOBYTE(v16) = v24;
  LOBYTE(v17) = v25;
  uint64_t v54 = v22;
  ViewLeafView.representedViewProvider.getter(v22, (uint64_t)v15);
  uint64_t v26 = *(uint64_t (**)(uint64_t))(a10 + 96);
  LOBYTE(v70) = v16 & 1;
  LOBYTE(v66) = v17 & 1;
  uint64_t v55 = a9;
  uint64_t v27 = v26(v23);
  uint64_t v29 = v28;
  LOBYTE(v17) = v30;
  int v31 = *(void (**)(char *, uint64_t))(v65 + 8);
  uint64_t v56 = v15;
  v65 += 8;
  v31(v15, v64);
  if (v17)
  {
    char v52 = (void (*)(uint64_t, uint64_t))v31;
    unint64_t v53 = v21;
    uint64_t v34 = v58;
    uint64_t v35 = v59;
    LODWORD(v70) = -1;
    if ((isLinkedOnOrAfter(_:)() & 1) != 0
      || (lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature(),
          (static UserDefaultKeyedFeature.isEnabled.getter() & 1) != 0))
    {
      uint64_t v36 = v57;
      *(void *)&unsigned long long v70 = v57;
      char v37 = v61;
      BYTE8(v70) = v61 & 1;
      uint64_t v38 = v62;
      uint64_t v71 = v62;
      char v39 = v63;
      LOBYTE(v72) = v63 & 1;
      uint64_t v40 = v54;
      ViewLeafView.unifiedLayoutSize(in:)((uint64_t *)&v70, v54);
    }
    else
    {
      uint64_t v40 = v54;
      ViewLeafView.layoutTraits()(v54, &v70);
      unsigned long long v43 = v70;
      uint64_t v44 = v71;
      uint64_t v45 = v72;
      uint64_t v46 = v73;
      uint64_t v47 = v74;
      uint64_t v36 = v57;
      uint64_t v66 = v57;
      char v37 = v61;
      char v67 = v61 & 1;
      uint64_t v38 = v62;
      uint64_t v68 = v62;
      char v39 = v63;
      char v69 = v63 & 1;
      _LayoutTraits.idealSize.getter();
      _ProposedSize.fixingUnspecifiedDimensions(at:)((CGSize)__PAIR128__(v49, v48));
      unsigned long long v70 = v43;
      uint64_t v71 = v44;
      uint64_t v72 = v45;
      uint64_t v73 = v46;
      uint64_t v74 = v47;
      CGSize.clamped(to:)();
    }
    *uint64_t v35 = v41;
    v35[1] = v42;
    *(void *)&unsigned long long v70 = v36;
    BYTE8(v70) = v37 & 1;
    uint64_t v71 = v38;
    LOBYTE(v72) = v39 & 1;
    uint64_t v50 = (uint64_t)v56;
    ViewLeafView.representedViewProvider.getter(v40, (uint64_t)v56);
    (*(void (**)(uint64_t *, unsigned long long *, uint64_t, uint64_t, uint64_t))(a10 + 104))(v35, &v70, v50, v55, a10);
    v52(v50, v64);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v53, v60);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v21, v60);
    size_t v33 = v59;
    *uint64_t v59 = v27;
    v33[1] = v29;
  }
  return result;
}

uint64_t ViewLeafView.representedViewProvider.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)(v2 + *(int *)(a1 + 36));
  uint64_t v5 = (char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x78);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  char v7 = *(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v7(a2, v5, AssociatedTypeWitness);
}

uint64_t PlatformViewRepresentableContext.init(coordinator:preferenceBridge:transaction:environmentStorage:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *a4;
  uint64_t v10 = a4[1];
  char v11 = *((unsigned char *)a4 + 16);
  uint64_t v12 = a5 + *(int *)(type metadata accessor for PlatformViewRepresentableContext() + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v12, a1, AssociatedTypeWitness);
  *(void *)a5 = a2;
  *(void *)(a5 + 8) = a3;
  *(void *)(a5 + 16) = v9;
  *(void *)(a5 + 24) = v10;
  *(unsigned char *)(a5 + 32) = v11;
  return result;
}

uint64_t type metadata accessor for PlatformViewRepresentableContext()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature;
  if (!lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableUnifiedLayoutFeature and conformance EnableUnifiedLayoutFeature);
  }
  return result;
}

uint64_t protocol witness for PlatformViewRepresentable.sizeThatFits(_:provider:context:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  return PlatformViewRepresentableAdaptor.sizeThatFits(_:provider:context:)(a1, a2 & 1, a3, a4 & 1, *a5, a6, a7);
}

uint64_t ViewLeafView.layoutTraits()@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  AGGraphClearUpdate();
  closure #1 in ViewLeafView.layoutTraits()(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);

  return AGGraphSetUpdate();
}

double closure #1 in ViewLeafView.layoutTraits()@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)v13 - v8;
  uint64_t v10 = type metadata accessor for ViewLeafView();
  PlatformViewHost.layoutTraits()(v13);
  ViewLeafView.representedViewProvider.getter(v10, (uint64_t)v9);
  (*(void (**)(_OWORD *, char *, uint64_t, uint64_t))(a2 + 112))(v13, v9, a1, a2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  long long v11 = v13[1];
  *a3 = v13[0];
  a3[1] = v11;
  double result = *(double *)&v14;
  a3[2] = v14;
  return result;
}

uint64_t PlatformViewHost.layoutTraits()@<X0>(void *a1@<X8>)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xD0);
  if (v3[48])
  {
    uint64_t result = PlatformViewHost.intrinsicLayoutTraits()();
    uint64_t v6 = v11;
    uint64_t v5 = v12;
    uint64_t v8 = v13;
    uint64_t v7 = v14;
    uint64_t v10 = v15;
    uint64_t v9 = v16;
    *(void *)uint64_t v3 = v11;
    *((void *)v3 + 1) = v12;
    *((void *)v3 + 2) = v13;
    *((void *)v3 + 3) = v14;
    *((void *)v3 + 4) = v15;
    *((void *)v3 + 5) = v16;
    v3[48] = 0;
  }
  else
  {
    uint64_t v10 = *((void *)v3 + 4);
    uint64_t v9 = *((void *)v3 + 5);
    uint64_t v8 = *((void *)v3 + 2);
    uint64_t v7 = *((void *)v3 + 3);
    uint64_t v6 = *(void *)v3;
    uint64_t v5 = *((void *)v3 + 1);
  }
  *a1 = v6;
  a1[1] = v5;
  a1[2] = v8;
  a1[3] = v7;
  a1[4] = v10;
  a1[5] = v9;
  return result;
}

uint64_t protocol witness for PlatformViewRepresentable.overrideSizeThatFits(_:in:platformView:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  return PlatformViewRepresentableAdaptor.overrideSizeThatFits(_:in:platformView:)(a1, a2, *a3, a4);
}

uint64_t protocol witness for PlatformViewRepresentable.overrideLayoutTraits(_:for:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return PlatformViewRepresentableAdaptor.overrideLayoutTraits(_:for:)(a1, *a2, a3);
}

uint64_t PlatformViewRepresentableAdaptor.overrideSizeThatFits(_:in:platformView:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = a2[2];
  char v6 = *((unsigned char *)a2 + 24);
  uint64_t v8 = *a2;
  char v9 = v4;
  uint64_t v10 = v5;
  char v11 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, void))(*(void *)(a4 + 24) + 88))(a1, &v8, a3, *(void *)(a4 + 16));
}

uint64_t PlatformViewRepresentableAdaptor.overrideLayoutTraits(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)(a3 + 24) + 96))(a1, a2, *(void *)(a3 + 16));
}

uint64_t closure #2 in closure #1 in PlatformViewChild.updateValue()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = a1;
  uint64_t v29 = a5;
  uint64_t v8 = *(void *)(a3 - 8);
  uint64_t v26 = a2;
  uint64_t v27 = v8;
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v24 - v17;
  uint64_t v19 = *(int *)(type metadata accessor for PlatformViewChild() + 80);
  uint64_t v28 = v7;
  uint64_t v20 = *(void (**)(char *))(v13 + 16);
  uint64_t v25 = v7 + v19;
  v20(v18);
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  LODWORD(v7) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v18, 1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  if (v7 == 1)
  {
    uint64_t v22 = v27;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v10, v26, a3);
    (*(void (**)(uint64_t, uint64_t))(a4 + 80))(a3, a4);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v10, a3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v15, 0, 1, AssociatedTypeWitness);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 40))(v25, v15, v12);
  }
  *uint64_t v29 = *(void *)AGGraphGetValue();
  return swift_retain();
}

uint64_t type metadata accessor for PlatformViewHost()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for UIKitButtonAdaptorContent.sizeThatFits(_:uiButton:) in conformance PlatformItemContent()
{
  return 0;
}

void closure #3 in closure #1 in PlatformViewChild.updateValue()(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, char a7, uint64_t a8, char a9, int a10)
{
  if (a1 & 1) != 0 || (a2)
  {
    uint64_t v13 = a4;
    uint64_t v14 = 0;
    int v12 = a6;
    swift_retain();
    PlatformViewHost.updateEnvironment(_:viewPhase:)(&v13, &v12);
    swift_release();
  }
  if (a7)
  {
    uint64_t v13 = a8;
    LOBYTE(v14) = a9;
    HIDWORD(v14) = a10;
    swift_retain();
    PlatformViewHost.focusedValues.setter((uint64_t)&v13);
  }
}

void PlatformViewHost.updateEnvironment(_:viewPhase:)(uint64_t *a1, int *a2)
{
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  int v6 = *a2;
  uint64_t v7 = &v2[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v2) + 0x68)];
  swift_beginAccess();
  long long v10 = *(_OWORD *)v7;
  EnvironmentValues.colorScheme.getter();
  swift_endAccess();
  uint64_t v12 = v4;
  uint64_t v13 = v5;
  EnvironmentValues.colorScheme.getter();
  char v8 = v11 ^ v10;
  swift_beginAccess();
  *(void *)uint64_t v7 = v4;
  *((void *)v7 + 1) = v5;
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  *(_DWORD *)&v2[*(void *)((*v3 & *(void *)v2) + 0x70)] = v6;
  PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)((uint64_t)&v10, v8 & 1);
  *(void *)&long long v10 = v4;
  *((void *)&v10 + 1) = v5;
  uint64_t v9 = (void *)(*(uint64_t (**)(char *))(*(void *)((*v3 & *(void *)v2) + 0x58) + 72))(&v2[*(void *)((*v3 & *(void *)v2) + 0x78)]);
  UIView.adoptEnvironment(_:hostedSubview:)((uint64_t)&v10, v9);
}

void UIView.adoptEnvironment(_:hostedSubview:)(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  char v5 = EnvironmentValues.isEnabled.getter();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v3;
  *(unsigned char *)(v6 + 24) = v5 & 1;
  *(void *)(v6 + 32) = a2;
  id v7 = v3;
  id v8 = a2;
  static Update.enqueueAction(_:)();
  swift_release();
  EnvironmentValues.layoutDirection.getter();
  if (v12) {
    uint64_t v9 = 4;
  }
  else {
    uint64_t v9 = 3;
  }
  if (objc_msgSend(v8, sel_semanticContentAttribute) != (id)v9) {
    objc_msgSend(v8, sel_setSemanticContentAttribute_, v9);
  }
  if (static SemanticFeature.isEnabled.getter())
  {
    swift_retain();
    swift_retain();
    if (EnvironmentValues.tintColor.getter() || EnvironmentValues.accentColor.getter())
    {
      dispatch thunk of AnyColorBox.resolve(in:)();
      swift_release();
      swift_release();
LABEL_12:
      swift_release();
      Color.Resolved.kitColor.getter();
      self;
      uint64_t v10 = swift_dynamicCastObjCClassUnconditional();
      goto LABEL_15;
    }
    swift_release();
    swift_release();
  }
  else if (EnvironmentValues.accentColor.getter())
  {
    dispatch thunk of AnyColorBox.resolve(in:)();
    goto LABEL_12;
  }
  uint64_t v10 = 0;
LABEL_15:
  objc_msgSend(v7, sel_setTintColor_, v10);
}

void PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  char v5 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v6 = *MEMORY[0x1E4FBC8C8] & *(void *)v2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(unsigned char *, char *, uint64_t, double))(v10 + 16))(&v35[-v9], &v3[*(void *)(v6 + 120)], AssociatedTypeWitness, v8);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
  if (swift_dynamicCast())
  {
    id v11 = v38;
    char v12 = &v3[*(void *)((*v5 & *(void *)v3) + 0x80)];
    if (MEMORY[0x18C119DF0](v12)
      && (uint64_t v13 = *((void *)v12 + 1),
          uint64_t ObjectType = swift_getObjectType(),
          uint64_t v15 = (void *)ViewRendererHost.uiViewController.getter(ObjectType, v13),
          swift_unknownObjectRelease(),
          v15))
    {
      id v16 = objc_msgSend(v3, sel_traitCollection);
      uint64_t v17 = &v3[*(void *)((*v5 & *(void *)v3) + 0x68)];
      swift_beginAccess();
      uint64_t v18 = *(void *)v17;
      uint64_t v19 = *((void *)v17 + 1);
      int v20 = *(_DWORD *)&v3[*(void *)((*v5 & *(void *)v3) + 0x70)];
      uint64_t v21 = &v3[*(void *)((*v5 & *(void *)v3) + 0x90)];
      uint64_t v22 = *(void *)v21;
      char v23 = v21[8];
      int v36 = a2;
      int v24 = *((_DWORD *)v21 + 3);
      uint64_t v25 = (objc_class *)type metadata accessor for EnvironmentWrapper();
      uint64_t v26 = (char *)objc_allocWithZone(v25);
      uint64_t v27 = &v26[OBJC_IVAR___SwiftUIEnvironmentWrapper_environment];
      *(void *)uint64_t v27 = v18;
      *((void *)v27 + 1) = v19;
      *(_DWORD *)&v26[OBJC_IVAR___SwiftUIEnvironmentWrapper_phase] = v20;
      uint64_t v28 = &v26[OBJC_IVAR___SwiftUIEnvironmentWrapper_focusedValues];
      *(void *)uint64_t v28 = v22;
      v28[8] = v23;
      *((_DWORD *)v28 + 3) = v24;
      v37.id receiver = v26;
      v37.Class super_class = v25;
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      id v29 = objc_msgSendSuper2(&v37, sel_init);
      MEMORY[0x1F4188790](v29);
      *(void *)&v35[-32] = v18;
      *(void *)&v35[-24] = v19;
      v35[-16] = 0;
      char v30 = (void *)UITraitCollection._modifyingTraits(environmentWrapper:mutations:)();
      swift_release();
      swift_release();
      swift_release();

      uint64_t v31 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v32 = swift_allocObject();
      *(void *)(v32 + 16) = v31;
      *(void *)(v32 + 24) = v30;
      *(void *)(v32 + 32) = v11;
      *(unsigned char *)(v32 + 40) = v36 & 1;
      swift_retain();
      id v33 = v30;
      id v34 = v11;
      static Update.enqueueAction(_:)();

      swift_release();
      swift_release();
    }
    else
    {
    }
  }
  else
  {
    objc_msgSend(v3, sel__noteTraitsDidChangeRecursively);
  }
}

uint64_t ViewRendererHost.uiViewController.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ContainerBackgroundHost(0, (unint64_t *)&lazy cache variable for type metadata for UIViewControllerProvider);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)(a2 + 8) + 16))(v9, v4, v4, a1);
  if (!v9[0]) {
    return 0;
  }
  uint64_t v5 = v9[1];
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
  swift_unknownObjectRelease();
  return v7;
}

BOOL PlatformViewHost.isPlatformFocusContainerHost.getter()
{
  id v1 = v0;
  swift_unknownObjectWeakInit();

  uint64_t v2 = type metadata accessor for PlatformViewHost.UnarySubtreeSequence();
  swift_getWitnessTable();
  Sequence.first(where:)();
  (*(void (**)(unsigned char *, uint64_t))(*(void *)(v2 - 8) + 8))(v5, v2);
  id v3 = v6;
  if (v6) {

  }
  return v3 != 0;
}

uint64_t type metadata accessor for PlatformViewHost.UnarySubtreeSequence()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ViewLeafView.init(content:platformView:coordinator:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)(*(void *)((*MEMORY[0x1E4FBC8C8] & *a2) + 0x50) - 8)
                                                   + 32))(a4, a1, *(void *)((*MEMORY[0x1E4FBC8C8] & *a2) + 0x50));
  uint64_t v7 = type metadata accessor for ViewLeafView();
  *(void *)(a4 + *(int *)(v7 + 36)) = a2;
  uint64_t v8 = a4 + *(int *)(v7 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);

  return v10(v8, a3, AssociatedTypeWitness);
}

id protocol witness for static PlatformViewRepresentable.platformView(for:) in conformance PlatformViewControllerRepresentableAdaptor<A>(void **a1)
{
  return static PlatformViewRepresentable<>.platformView(for:)(*a1);
}

id static PlatformViewRepresentable<>.platformView(for:)(void *a1)
{
  id result = objc_msgSend(a1, sel_view);
  if (!result) {
    __break(1u);
  }
  return result;
}

uint64_t PlatformViewHost.intrinsicLayoutTraits()()
{
  double v0 = PlatformViewHost.intrinsicContentSize.getter();
  double v1 = *MEMORY[0x1E4FB30D8];
  if (v0 != *MEMORY[0x1E4FB30D8])
  {
    PlatformViewHost.contentCompressionResistancePriority(for:)(0, (SEL *)&selRef_contentCompressionResistancePriorityForAxis_);
    PlatformViewHost.contentCompressionResistancePriority(for:)(0, (SEL *)&selRef_contentHuggingPriorityForAxis_);
  }
  _LayoutTraits.Dimension.init(min:ideal:max:)();
  PlatformViewHost.intrinsicContentSize.getter();
  if (v2 != v1)
  {
    PlatformViewHost.contentCompressionResistancePriority(for:)(1, (SEL *)&selRef_contentCompressionResistancePriorityForAxis_);
    PlatformViewHost.contentCompressionResistancePriority(for:)(1, (SEL *)&selRef_contentHuggingPriorityForAxis_);
  }
  _LayoutTraits.Dimension.init(min:ideal:max:)();
  return _LayoutTraits.init(width:height:)();
}

double PlatformViewHost.intrinsicContentSize.getter()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  double v2 = (void *)MEMORY[0x1E4FBC8C8];
  if ((*(uint64_t (**)(void))(*(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58) + 128))())
  {
    v8.id receiver = v0;
    v8.Class super_class = ObjectType;
    objc_msgSendSuper2(&v8, sel_intrinsicContentSize);
    return v3;
  }
  else
  {
    uint64_t v5 = (void *)(*(uint64_t (**)(char *))(*(void *)((*v2 & *v0) + 0x58) + 72))((char *)v0 + *(void *)((*v2 & *v0) + 0x78));
    objc_msgSend(v5, sel_intrinsicContentSize);
    double v4 = v6;
  }
  return v4;
}

void PlatformViewHost.contentCompressionResistancePriority(for:)(uint64_t a1, SEL *a2)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  double v6 = (void *)MEMORY[0x1E4FBC8C8];
  if ((*(uint64_t (**)(void))(*(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x58) + 128))())
  {
    v8.id receiver = v2;
    v8.Class super_class = ObjectType;
    objc_msgSendSuper2(&v8, *a2, a1);
  }
  else
  {
    uint64_t v7 = (void *)(*(uint64_t (**)(char *))(*(void *)((*v6 & *v2) + 0x58) + 72))((char *)v2 + *(void *)((*v6 & *v2) + 0x78));
    objc_msgSend(v7, *a2, a1);
  }
}

id protocol witness for static PlatformViewRepresentable.platformView(for:) in conformance ListRepresentable<A, B>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v4 = (void *)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*a1, a2, a3, a4);

  return v4;
}

id protocol witness for PlatformViewRepresentable.overrideLayoutTraits(_:for:) in conformance PlatformViewControllerRepresentableAdaptor<A>(int a1, id *a2)
{
  return specialized PlatformViewControllerRepresentableAdaptor.overrideLayoutTraits(_:for:)(a1, *a2);
}

uint64_t protocol witness for PlatformViewRepresentable.sizeThatFits(_:provider:context:) in conformance PlatformViewControllerRepresentableAdaptor<A>(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  return PlatformViewControllerRepresentableAdaptor.sizeThatFits(_:provider:context:)(a1, a2 & 1, a3, a4 & 1, *a5, a6, a7);
}

id specialized PlatformViewControllerRepresentableAdaptor.overrideLayoutTraits(_:for:)(int a1, id a2)
{
  id result = objc_msgSend(a2, sel_preferredContentSize);
  double v5 = v4;
  if (v3 > 0.0)
  {
    double v6 = v3;
    uint64_t v7 = (uint64_t (*)(unsigned char *, void))_LayoutTraits.idealSize.modify();
    double *v8 = v6;
    id result = (id)v7(v11, 0);
  }
  if (v5 > 0.0)
  {
    uint64_t v9 = (uint64_t (*)(unsigned char *, void))_LayoutTraits.idealSize.modify();
    *(double *)(v10 + 8) = v5;
    return (id)v9(v11, 0);
  }
  return result;
}

uint64_t PlatformViewRepresentableAdaptor.makeCoordinator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))(*(void *)(a1 + 16));
}

__n128 __swift_memcpy44_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t PlatformViewControllerRepresentableAdaptor.makeCoordinator()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 64))(*(void *)(a1 + 16));
}

uint64_t protocol witness for PlatformViewRepresentable.sizeThatFits(_:provider:context:) in conformance ListRepresentable<A, B>(uint64_t a1, char a2, uint64_t a3, char a4, char **a5, long long *a6, uint64_t *a7)
{
  return specialized ListRepresentable.sizeThatFits(_:provider:context:)(a1, a2 & 1, a3, a4 & 1, *a5, a6, a7[2], a7[3], a7[4], a7[5]);
}

uint64_t specialized ListRepresentable.sizeThatFits(_:provider:context:)(uint64_t a1, char a2, uint64_t a3, char a4, char *a5, long long *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  char v14 = *((unsigned char *)a6 + 32);
  long long v15 = a6[1];
  long long v32 = *a6;
  long long v33 = v15;
  char v34 = v14;
  uint64_t v28 = a7;
  uint64_t v29 = a8;
  uint64_t v30 = a9;
  uint64_t v31 = a10;
  type metadata accessor for ListRepresentable();
  uint64_t v16 = type metadata accessor for PlatformViewRepresentableContext();
  PlatformViewRepresentableContext.environment.getter(v16, &v28);
  if (v29)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v17 = v32;
  uint64_t v18 = BYTE8(v32);
  int v19 = BYTE9(v32);
  if (BYTE9(v32) == 1 && !((unint64_t)v32 | BYTE8(v32))) {
    return 0;
  }
  if (a2)
  {
    double v21 = 10.0;
    if (a4) {
      double v22 = 10.0;
    }
    else {
      double v22 = *(double *)&a3;
    }
    if (!BYTE9(v32)) {
      goto LABEL_16;
    }
  }
  else
  {
    if ((a4 & 1) == 0) {
      return 0;
    }
    double v21 = *(double *)&a1;
    double v22 = 10.0;
    if (!BYTE9(v32)) {
      goto LABEL_16;
    }
  }
  if ((unint64_t)v32 > 1) {
    goto LABEL_24;
  }
LABEL_16:
  char v23 = (double *)&a5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize];
  if (a5[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_cachedIdealSize + 16] != 1
    || (AGGraphClearUpdate(),
        closure #1 in UpdateCoalescingCollectionView.idealSize(in:)(a5, v21, v22),
        uint64_t result = AGGraphSetUpdate(),
        ((_BYTE)v23[2] & 1) == 0))
  {
    double v24 = *v23;
    if ((a2 & 1) == 0) {
      double v24 = v21;
    }
    if ((a4 & 1) == 0 || !v19 || v17 | v18) {
      return *(void *)&v24;
    }
    LODWORD(v26) = 0;
    uint64_t v25 = 540;
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_24:
    objc_msgSend(a5, sel_contentSize, v25, v26);
    if ((a2 & 1) == 0) {
      double v24 = v21;
    }
    return *(void *)&v24;
  }
  __break(1u);
  return result;
}

void PlatformViewHost.focusedValues.setter(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 12);
  double v4 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x90);
  *(void *)double v4 = *(void *)a1;
  v4[8] = v2;
  *((_DWORD *)v4 + 3) = v3;
  swift_release();
  PlatformViewHost.updateNestedHosts(_:colorSchemeChanged:)((uint64_t)v5, 0);
}

uint64_t partial apply for closure #1 in GeometryActionBinder.updateValue()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[5];
  long long v4 = *(_OWORD *)(v3 + 16);
  v6[0] = *(_OWORD *)v3;
  v6[1] = v4;
  v6[2] = *(_OWORD *)(v3 + 32);
  int v7 = *(_DWORD *)(v3 + 48);
  return (*(uint64_t (**)(_OWORD *, uint64_t))(v2 + 24))(v6, v1);
}

uint64_t protocol witness for GeometryActionProvider.value(geometry:) in conformance _GeometryActionModifier<A>(uint64_t a1)
{
  return _GeometryActionModifier.value(geometry:)(a1, *v1);
}

uint64_t _GeometryActionModifier.value(geometry:)(uint64_t a1, uint64_t (*a2)(_OWORD *))
{
  int v2 = *(_DWORD *)(a1 + 48);
  long long v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  char v5[2] = *(_OWORD *)(a1 + 32);
  int v6 = v2;
  return a2(v5);
}

uint64_t closure #1 in LazyPageTabModifier.body(content:)@<X0>(long long *a1@<X0>, BOOL *a2@<X8>)
{
  int v3 = *((_DWORD *)a1 + 12);
  long long v4 = a1[1];
  long long v8 = *a1;
  long long v9 = v4;
  long long v10 = a1[2];
  int v11 = v3;
  static CoordinateSpaceProtocol<>.scrollView.getter();
  GeometryProxy.bounds(of:)();
  outlined destroy of NamedCoordinateSpace((uint64_t)&v7);
  uint64_t result = outlined init with take of CGRect?((uint64_t)v12, (uint64_t)&v8);
  BOOL v6 = (v10 & 1) != 0 || fabs(*(double *)&v8) <= *(double *)&v9 * 0.5;
  *a2 = v6;
  return result;
}

uint64_t outlined init with take of CGRect?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CGRect?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of NamedCoordinateSpace(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for MenuActionDismissBehavior()
{
  return &type metadata for MenuActionDismissBehavior;
}

ValueMetadata *type metadata accessor for PaletteSelectionEffect()
{
  return &type metadata for PaletteSelectionEffect;
}

uint64_t LazyViewPhase.value.getter@<X0>(unsigned int *a1@<X8>)
{
  int v2 = *(_DWORD *)AGGraphGetValue();
  uint64_t Value = (_DWORD *)AGGraphGetValue();
  unsigned int v4 = *Value + (v2 & 0xFFFFFFFE);
  int v5 = *Value | v2;
  uint64_t result = AGGraphGetValue();
  unsigned int v7 = v4 + 2 * *(_DWORD *)result;
  int v8 = v7 | 1;
  unsigned int v9 = v7 & 0xFFFFFFFE | v5 & 1;
  if (*(unsigned char *)(result + 4) == 2) {
    unsigned int v9 = v8;
  }
  *a1 = v9;
  return result;
}

uint64_t partial apply for closure #1 in RepresentableContextValues.environment.getter@<X0>(void *a1@<X8>)
{
  return closure #1 in RepresentableContextValues.environment.getter(a1);
}

uint64_t closure #1 in RepresentableContextValues.environment.getter@<X0>(void *a1@<X8>)
{
  Inputuint64_t Value = (uint64_t *)AGGraphGetInputValue();
  uint64_t v4 = *InputValue;
  uint64_t v3 = InputValue[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();
  return swift_retain();
}

Swift::Void __swiftcall _UIHostingView.updateSize()()
{
  double v0 = _UIHostingView.base.getter();
  uint64_t v1 = (void *)MEMORY[0x18C119DF0](v0 + 2);
  if (v1)
  {
    id v4 = v1;
    objc_msgSend(v1, sel_bounds);
    ViewGraph.setProposedSize(_:)((CGSize)__PAIR128__(v3, v2));
    swift_release();
  }
  else
  {
    swift_release();
  }
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance WrappedButtonStyleBody<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41003C8](a1, a2, a3, WitnessTable);
}

void DisplayList.HostedViewState.updateViews(in:index:archive:position:state:)(_WORD *a1, void *a2, uint64_t a3, void *a4, double a5, double a6)
{
  unsigned int v7 = v6;
  char v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v234 = (uint64_t)v207 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v238 = (uint64_t)v207 - v18;
  MEMORY[0x1F4188790](v19);
  uint64_t v226 = (uint64_t)v207 - v20;
  _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], v14);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v220 = (char *)v207 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  v224 = (char *)v207 - v24;
  uint64_t v228 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  uint64_t v230 = *(void *)(v228 - 8);
  MEMORY[0x1F4188790](v228);
  uint64_t v223 = (uint64_t)v207 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  uint64_t v219 = (Swift::UInt32 *)((char *)v207 - v27);
  MEMORY[0x1F4188790](v28);
  uint64_t v227 = (uint64_t)v207 - v29;
  MEMORY[0x1F4188790](v30);
  MEMORY[0x1F4188790](v31);
  v225 = (Swift::UInt32 *)((char *)v207 - v32);
  MEMORY[0x1F4188790](v33);
  uint64_t v229 = (void *)((char *)v207 - v34);
  MEMORY[0x1F4188790](v35);
  uint64_t v232 = (uint64_t)v207 - v37;
  if ((a1[4] & 2) != 0)
  {
    uint64_t v38 = *(void *)a1;
    uint64_t v240 = *(void *)(*(void *)a1 + 16);
    if (v240)
    {
      uint64_t v237 = v7;
      uint64_t v239 = v38 + 32;
      v207[1] = a4 + 5;
      uint64_t v217 = (char *)&v254 + 8;
      uint64_t v218 = v36;
      uint64_t v215 = &v258;
      uint64_t v216 = (char *)&v256 + 8;
      uint64_t v214 = v259;
      swift_bridgeObjectRetain();
      unint64_t v39 = 0;
      double v221 = a6;
      uint64_t v243 = v38;
      v244 = a2;
      uint64_t v241 = a4;
      uint64_t v236 = a3;
      while (2)
      {
        if (v39 >= *(void *)(v38 + 16))
        {
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
LABEL_74:
          KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
        }
        else
        {
          uint64_t v41 = v239 + 72 * v39;
          uint64_t v42 = *(void *)v41;
          uint64_t v43 = *(void *)(v41 + 8);
          uint64_t v44 = *(void *)(v41 + 16);
          uint64_t v45 = *(void *)(v41 + 24);
          uint64_t v46 = *(void *)(v41 + 32);
          uint64_t v47 = *(void *)(v41 + 40);
          unint64_t v48 = *(void *)(v41 + 48);
          uint64_t v49 = *(void *)(v41 + 56);
          int v50 = *(unsigned __int8 *)(v41 + 66);
          int v51 = *(unsigned __int16 *)(v41 + 64);
          int v52 = *(_DWORD *)(v41 + 68);
          unint64_t v247 = v39 + 1;
          LODWORD(v283) = v52;
          unsigned int v249 = v51 | (v50 << 16);
          outlined copy of DisplayList.Item.Value(v47, v48);
          DisplayList.Index.enter(identity:)();
          long long v246 = v251;
          int v245 = v252;
          *(void *)&long long v251 = v42;
          *((void *)&v251 + 1) = v43;
          *(void *)&long long v252 = v44;
          *((void *)&v252 + 1) = v45;
          uint64_t v242 = v46;
          *(void *)&long long v253 = v46;
          *((void *)&v253 + 1) = v47;
          unint64_t v248 = v47;
          unint64_t v54 = v48;
          *(void *)&long long v254 = v48;
          *((void *)&v254 + 1) = v49;
          uint64_t v250 = v49;
          BYTE2(v255) = v50;
          LOWORD(v255) = v51;
          DWORD1(v255) = v52;
          DisplayList.Item.frame.getter();
          double v57 = v55 + a5;
          double v58 = v56 + a6;
          unint64_t v53 = v48 >> 62;
          uint64_t v59 = v241;
          unint64_t v40 = v48;
          uint64_t v60 = v248;
          uint64_t v38 = v243;
          switch(v53)
          {
            case 1uLL:
              unint64_t v67 = HIDWORD(v40);
              uint64_t v68 = v238;
              outlined init with copy of DisplayList.ArchiveIDs?(v236, v238, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478]);
              LODWORD(v69) = HIWORD(v249);
              unint64_t v235 = v54;
              switch(BYTE4(v40))
              {
                case 1:
                  uint64_t v70 = v68;
                  uint64_t v71 = swift_projectBox();
                  outlined copy of DisplayList.Item.Value(v60, v40);
                  outlined copy of DisplayList.Effect(v60, v40, 1);
                  swift_bridgeObjectRetain();
                  outlined assign with copy of DisplayList.ArchiveIDs?(v71, v70);
                  uint64_t v72 = v70;
                  uint64_t v233 = 0;
                  uint64_t v73 = 0;
                  uint64_t v242 = 1;
                  goto LABEL_30;
                case 7:
                  __int16 v136 = *(_WORD *)(v60 + 24);
                  char v137 = *(unsigned char *)(v60 + 26);
                  *(void *)&long long v251 = *(void *)(v60 + 16);
                  WORD4(v251) = v136;
                  BYTE10(v251) = v137;
                  uint64_t v242 = MEMORY[0x1E4F3F478];
                  uint64_t v138 = v234;
                  outlined init with copy of DisplayList.ArchiveIDs?(v68, v234, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478]);
                  outlined copy of DisplayList.Item.Value(v60, v54);
                  outlined copy of DisplayList.Effect(v60, v54, 7);
                  swift_bridgeObjectRetain();
                  DisplayList.HostedViewState.updateViews(in:index:archive:position:state:)(&v251, v244, v138, v59, v57, v58);
                  uint64_t v139 = v138;
                  uint64_t v140 = v238;
                  unint64_t v40 = v54;
                  outlined destroy of DisplayList.ArchiveIDs?(v139, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, v242, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
                  uint64_t v72 = v140;
                  uint64_t v233 = 0;
                  uint64_t v73 = 0;
                  uint64_t v242 = 1;
                  LOBYTE(v85) = v67;
                  uint64_t v86 = 1;
                  uint64_t v87 = 0;
                  uint64_t v88 = 0;
                  uint64_t v89 = 0;
                  goto LABEL_31;
                case 8:
                  unsigned int v231 = HIWORD(v249);
                  unint64_t v222 = HIDWORD(v40);
                  uint64_t v91 = *(void *)(v60 + 16);
                  uint64_t v90 = *(void *)(v60 + 24);
                  uint64_t v92 = *(void *)(v60 + 40);
                  *(void *)&long long v211 = *(void *)(v60 + 32);
                  *((void *)&v211 + 1) = v92;
                  uint64_t v93 = *(void *)(v60 + 48);
                  uint64_t v94 = *(void *)(v60 + 64);
                  uint64_t v212 = *(void *)(v60 + 56);
                  *(void *)&long long v213 = v94;
                  *((void *)&v213 + 1) = *(void *)(v60 + 72);
                  unint64_t v208 = *(void *)(v60 + 80);
                  uint64_t v209 = v93;
                  uint64_t v95 = *(unsigned __int8 *)(v60 + 88);
                  uint64_t v96 = *v59;
                  uint64_t v73 = v59[1];
                  uint64_t v87 = v59[2];
                  uint64_t v88 = v59[3];
                  uint64_t v89 = v59[4];
                  outlined copy of DisplayList.Item.Value(v60, v40);
                  outlined copy of DisplayList.Effect(v60, v40, 8);
                  uint64_t v210 = v96;
                  swift_retain();
                  swift_bridgeObjectRetain();
                  ViewTransform.resetPosition(_:)((CGPoint)__PAIR128__(*(unint64_t *)&v58, *(unint64_t *)&v57));
                  uint64_t v97 = v91;
                  *(void *)&long long v251 = v91;
                  *((void *)&v251 + 1) = v90;
                  v207[0] = v90;
                  unint64_t v69 = v208;
                  uint64_t v98 = v209;
                  long long v252 = v211;
                  *(void *)&long long v253 = v209;
                  *((void *)&v253 + 1) = v212;
                  long long v254 = v213;
                  *(void *)&long long v255 = v208;
                  BYTE8(v255) = v95;
                  DisplayList.Transform.affineTransform.getter();
                  outlined init with take of CGAffineTransform?((uint64_t)v291, (uint64_t)&v292);
                  if (v293)
                  {
                    uint64_t v233 = 0;
                    double v58 = 0.0;
                    uint64_t v242 = 1;
                    unint64_t v99 = v69;
                    double v57 = 0.0;
                    unint64_t v40 = v235;
                    LOBYTE(v85) = v222;
                    LOBYTE(v69) = v231;
                    uint64_t v86 = v210;
                    uint64_t v72 = v238;
                    uint64_t v100 = v59;
                    switch(v95)
                    {
                      case 1:
                        uint64_t v101 = v97;
                        uint64_t v102 = v207[0];
                        uint64_t v104 = *((void *)&v211 + 1);
                        uint64_t v103 = v211;
                        uint64_t v105 = v98;
                        uint64_t v106 = v212;
                        uint64_t v108 = *((void *)&v213 + 1);
                        uint64_t v107 = v213;
                        unint64_t v109 = v99;
                        goto LABEL_67;
                      case 3:
                        *(void *)&long long v251 = v97;
                        *((void *)&v251 + 1) = v207[0];
                        long long v252 = v211;
                        *(void *)&long long v253 = v98;
                        *((void *)&v253 + 1) = v212;
                        long long v254 = v213;
                        *(void *)&long long v255 = v99;
                        _Rotation3DEffect.Data.transform.getter();
                        uint64_t v101 = v291[7];
                        uint64_t v102 = v291[8];
                        uint64_t v103 = v291[9];
                        uint64_t v104 = v291[10];
                        uint64_t v105 = v291[11];
                        uint64_t v106 = v291[12];
                        uint64_t v107 = v291[13];
                        uint64_t v108 = v291[14];
                        unint64_t v109 = v291[15];
LABEL_67:
                        uint64_t v295 = v101;
                        uint64_t v296 = v102;
                        uint64_t v297 = v103;
                        uint64_t v298 = v104;
                        uint64_t v299 = v105;
                        uint64_t v300 = v106;
                        uint64_t v301 = v107;
                        uint64_t v302 = v108;
                        unint64_t v303 = v109;
                        uint64_t v100 = v59;
                        ViewTransform.appendProjectionTransform(_:inverse:)();
                        uint64_t v233 = 0;
                        uint64_t v242 = 1;
                        unint64_t v40 = v235;
                        LOBYTE(v69) = v231;
                        uint64_t v86 = v210;
                        LOBYTE(v85) = v222;
                        uint64_t v72 = v238;
                        break;
                      default:
                        goto LABEL_32;
                    }
                  }
                  else
                  {
                    CGAffineTransform v294 = v292;
                    ViewTransform.appendAffineTransform(_:inverse:)(&v294, 1);
                    uint64_t v233 = 0;
                    double v58 = 0.0;
                    uint64_t v242 = 1;
                    double v57 = 0.0;
                    uint64_t v72 = v238;
                    unint64_t v40 = v235;
                    LOBYTE(v85) = v222;
                    LOBYTE(v69) = v231;
                    uint64_t v86 = v210;
LABEL_31:
                    uint64_t v100 = v59;
                  }
                  goto LABEL_32;
                case 0xB:
                  unsigned int v231 = HIWORD(v249);
                  uint64_t v141 = *(void *)(v60 + 16);
                  uint64_t v142 = *(unsigned __int8 *)(v60 + 28);
                  uint64_t v143 = *(unsigned int *)(v60 + 24);
                  uint64_t v233 = v143 | (v142 << 32);
                  char v144 = *(unsigned char *)(v60 + 30);
                  char v145 = *(unsigned char *)(v60 + 31);
                  unint64_t v69 = *(void *)(v60 + 32);
                  int v146 = *(_DWORD *)(v60 + 40);
                  uint64_t v147 = v59[6];
                  uint64_t v242 = v59[5];
                  char v148 = *(unsigned char *)(v60 + 29);
                  *(void *)&long long v251 = v141;
                  BYTE12(v251) = v142;
                  DWORD2(v251) = v143;
                  BYTE13(v251) = v148;
                  BYTE14(v251) = v144;
                  HIBYTE(v251) = v145;
                  *(void *)&long long v252 = v69;
                  DWORD2(v252) = v146;
                  outlined copy of DisplayList.Item.Value(v60, v40);
                  outlined copy of DisplayList.Effect(v60, v40, 11);
                  swift_bridgeObjectRetain();
                  outlined copy of ContentTransition.Storage(v141, v233, v148);
                  uint64_t v233 = v147;
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  EnvironmentValues.contentTransitionState.setter();
                  uint64_t v72 = v238;
                  LOBYTE(v69) = v231;
                  uint64_t v73 = 0;
LABEL_30:
                  unint64_t v85 = HIDWORD(v40);
                  uint64_t v86 = 1;
                  uint64_t v87 = 0;
                  uint64_t v88 = 0;
                  uint64_t v89 = 0;
                  goto LABEL_31;
                case 0xC:
                  unsigned int v231 = HIWORD(v249);
                  outlined init with copy of TableColumnList(v60 + 16, (uint64_t)v290);
                  uint64_t v155 = *v244;
                  uint64_t v156 = type metadata accessor for DisplayList.ArchiveIDs();
                  int v157 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v156 - 8) + 48))(v68, 1, v156);
                  unint64_t v222 = HIDWORD(v40);
                  if (v157)
                  {
                    uint64_t v158 = type metadata accessor for UUID();
                    uint64_t v159 = (uint64_t)v220;
                    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 56))(v220, 1, 1, v158);
                    outlined copy of DisplayList.Item.Value(v60, v40);
                    outlined copy of DisplayList.Effect(v60, v40, 12);
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    outlined copy of DisplayList.Item.Value(v60, v40);
                    outlined copy of DisplayList.Effect(v60, v40, 12);
                    swift_bridgeObjectRetain();
                    uint64_t v159 = (uint64_t)v220;
                    DisplayList.ArchiveIDs.uuid.getter();
                    uint64_t v158 = type metadata accessor for UUID();
                    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v158 - 8) + 56))(v159, 0, 1, v158);
                  }
                  uint64_t v174 = v237;
                  uint64_t v175 = v229;
                  uint64_t v176 = (uint64_t)v229 + *(int *)(v228 + 24);
                  type metadata accessor for UUID();
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 56))(v176, 1, 1, v158);
                  void *v175 = v155;
                  outlined assign with take of UUID?(v159, v176);
                  uint64_t v177 = v227;
                  outlined init with take of DisplayList.HostedViewState.Key((uint64_t)v175, v227, type metadata accessor for DisplayList.HostedViewState.Key);
                  long long v178 = v174[5];
                  long long v179 = v174[3];
                  long long v287 = v174[4];
                  long long v288 = v178;
                  long long v180 = v174[5];
                  v289[0] = v174[6];
                  *(_OWORD *)((char *)v289 + 12) = *(_OWORD *)((char *)v174 + 108);
                  long long v181 = v174[1];
                  long long v283 = *v174;
                  long long v284 = v181;
                  long long v182 = v174[3];
                  long long v184 = *v174;
                  long long v183 = v174[1];
                  long long v285 = v174[2];
                  long long v286 = v182;
                  long long v280 = v287;
                  long long v281 = v180;
                  v282[0] = v174[6];
                  *(_OWORD *)((char *)v282 + 12) = *(_OWORD *)((char *)v174 + 108);
                  long long v276 = v184;
                  long long v277 = v183;
                  long long v278 = v285;
                  long long v279 = v179;
                  uint64_t v185 = v219;
                  outlined init with copy of DisplayList.HostedViewState.Key(v177, (uint64_t)v219, type metadata accessor for DisplayList.HostedViewState.Key);
                  uint64_t v265 = v42;
                  uint64_t v266 = v43;
                  uint64_t v267 = v44;
                  uint64_t v268 = v45;
                  uint64_t v269 = v242;
                  unint64_t v270 = v248;
                  unint64_t v271 = v40;
                  uint64_t v272 = v250;
                  char v274 = v231;
                  __int16 v273 = v249;
                  int v275 = v52;
                  uint64_t v186 = *v59;
                  uint64_t v187 = v59[5];
                  uint64_t v188 = v59[6];
                  long long v261 = *(_OWORD *)(v59 + 1);
                  long long v262 = *(_OWORD *)(v59 + 3);
                  uint64_t v260 = v186;
                  uint64_t v263 = v187;
                  uint64_t v264 = v188;
                  outlined retain of DisplayList.HostedViewState((uint64_t)&v283);
                  swift_retain();
                  swift_retain();
                  swift_retain();
                  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                  *(void *)&long long v251 = *((void *)v174 + 13);
                  uint64_t v190 = v251;
                  *((void *)v174 + 13) = 0x8000000000000000;
                  unint64_t v192 = specialized __RawDictionaryStorage.find<A>(_:)(v185);
                  uint64_t v193 = *(void *)(v190 + 16);
                  BOOL v194 = (v191 & 1) == 0;
                  uint64_t v195 = v193 + v194;
                  if (__OFADD__(v193, v194)) {
                    goto LABEL_72;
                  }
                  char v196 = v191;
                  if (*(void *)(v190 + 24) >= v195)
                  {
                    a6 = v221;
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    {
                      specialized _NativeDictionary.copy()();
                      uint64_t v190 = v251;
                    }
                  }
                  else
                  {
                    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v195, isUniquelyReferenced_nonNull_native);
                    uint64_t v190 = v251;
                    unint64_t v197 = specialized __RawDictionaryStorage.find<A>(_:)(v185);
                    a6 = v221;
                    if ((v196 & 1) != (v198 & 1)) {
                      goto LABEL_74;
                    }
                    unint64_t v192 = v197;
                  }
                  *((void *)v174 + 13) = v190;
                  swift_bridgeObjectRelease();
                  uint64_t v199 = (void *)*((void *)v174 + 13);
                  if (v196)
                  {
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    *(void *)&long long v251 = 0;
                    DWORD2(v251) = 0;
                    *((void *)&v253 + 1) = MEMORY[0x1E4F3FCC8];
                    *(void *)&long long v254 = MEMORY[0x1E4F3FCC0];
                    swift_bridgeObjectRetain();
                    static ViewSize.zero.getter();
                    ViewTransform.init()();
                    EnvironmentValues.init()();
                    uint64_t v200 = v214;
                    *uint64_t v214 = 0u;
                    v200[1] = 0u;
                    uint64_t v201 = (uint64_t)v229;
                    outlined init with copy of DisplayList.HostedViewState.Key((uint64_t)v185, (uint64_t)v229, type metadata accessor for DisplayList.HostedViewState.Key);
                    specialized _NativeDictionary._insert(at:key:value:)(v192, v201, &v251, v199);
                  }
                  uint64_t v202 = v199[7];
                  swift_bridgeObjectRelease();
                  uint64_t v203 = v202 + 176 * v192;
                  uint64_t v204 = v227;
                  DisplayList.HostedViewState.updateView(_:key:factory:item:position:state:)(v203, v227, v290, &v265, &v260, v57, v58);
                  swift_release();
                  swift_release();
                  swift_release();
                  long long v255 = v280;
                  long long v256 = v281;
                  v257[0] = v282[0];
                  *(_OWORD *)((char *)v257 + 12) = *(_OWORD *)((char *)v282 + 12);
                  long long v251 = v276;
                  long long v252 = v277;
                  long long v253 = v278;
                  long long v254 = v279;
                  outlined release of DisplayList.HostedViewState((uint64_t)&v251);
                  outlined destroy of DisplayList.HostedViewState.Key((uint64_t)v185, type metadata accessor for DisplayList.HostedViewState.Key);
                  outlined init with copy of DisplayList.HostedViewState.Key(v204, v223, type metadata accessor for DisplayList.HostedViewState.Key);
                  uint64_t v205 = (void *)*((void *)v174 + 14);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                    uint64_t v205 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v205[2] + 1, 1, v205);
                  }
                  uint64_t v100 = v241;
                  unint64_t v69 = v205[2];
                  unint64_t v206 = v205[3];
                  if (v69 >= v206 >> 1) {
                    uint64_t v205 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v206 > 1, v69 + 1, 1, v205);
                  }
                  v205[2] = v69 + 1;
                  outlined init with take of DisplayList.HostedViewState.Key(v223, (uint64_t)v205+ ((*(unsigned __int8 *)(v230 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v230 + 80))+ *(void *)(v230 + 72) * v69, type metadata accessor for DisplayList.HostedViewState.Key);
                  *((void *)v174 + 14) = v205;
                  outlined destroy of DisplayList.HostedViewState.Key(v227, type metadata accessor for DisplayList.HostedViewState.Key);
                  __swift_destroy_boxed_opaque_existential_1((uint64_t)v290);
                  uint64_t v233 = 0;
                  uint64_t v73 = 0;
                  uint64_t v242 = 1;
                  uint64_t v86 = 1;
                  uint64_t v87 = 0;
                  uint64_t v88 = 0;
                  uint64_t v89 = 0;
                  uint64_t v72 = v238;
                  unint64_t v40 = v235;
                  LOBYTE(v85) = v222;
                  LOBYTE(v69) = v231;
LABEL_32:
                  *(void *)&long long v251 = v250;
                  WORD4(v251) = v249;
                  BYTE10(v251) = v69;
                  uint64_t v149 = MEMORY[0x1E4F3F478];
                  uint64_t v150 = v234;
                  char v151 = v85;
                  outlined init with copy of DisplayList.ArchiveIDs?(v72, v234, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478]);
                  DisplayList.HostedViewState.updateViews(in:index:archive:position:state:)(&v251, v244, v150, v100, v57, v58);
                  uint64_t v152 = v248;
                  outlined consume of DisplayList.Effect(v248, v40, v151);
                  outlined consume of DisplayList.Item.Value(v152, v40);
                  outlined destroy of DisplayList.ArchiveIDs?(v150, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, v149, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
                  swift_bridgeObjectRelease();
                  uint64_t v60 = v152;
                  if (v86 != 1)
                  {
                    swift_release();
                    *uint64_t v100 = v86;
                    v100[1] = v73;
                    v100[2] = v87;
                    v100[3] = v88;
                    v100[4] = v89;
                  }
                  uint64_t v153 = v242;
                  uint64_t v38 = v243;
                  if (v242 != 1)
                  {
                    swift_release();
                    swift_release();
                    uint64_t v154 = v233;
                    v100[5] = v153;
                    v100[6] = v154;
                  }
                  outlined destroy of DisplayList.ArchiveIDs?(v238, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
                  unint64_t v40 = v235;
                  break;
                default:
                  outlined copy of DisplayList.Item.Value(v60, v40);
                  outlined copy of DisplayList.Effect(v60, v40, SBYTE4(v40));
                  swift_bridgeObjectRetain();
                  uint64_t v233 = 0;
                  uint64_t v73 = 0;
                  uint64_t v242 = 1;
                  unint64_t v85 = HIDWORD(v40);
                  uint64_t v86 = 1;
                  uint64_t v87 = 0;
                  uint64_t v88 = 0;
                  uint64_t v89 = 0;
                  uint64_t v72 = v68;
                  goto LABEL_31;
              }
              goto LABEL_5;
            case 2uLL:
              uint64_t v74 = *(void *)(v248 + 16);
              if (!v74) {
                goto LABEL_5;
              }
              outlined copy of DisplayList.Item.Value(v248, v40);
              id v75 = (unsigned char *)(v60 + 66);
              uint64_t v76 = v236;
              char v77 = v244;
              do
              {
                uint64_t v78 = *(void *)(v75 - 10);
                __int16 v79 = *((_WORD *)v75 - 1);
                char v80 = *v75;
                v75 += 40;
                *(void *)&long long v251 = v78;
                WORD4(v251) = v79;
                BYTE10(v251) = v80;
                DisplayList.HostedViewState.updateViews(in:index:archive:position:state:)(&v251, v77, v76, v59, v57, v58);
                --v74;
              }
              while (v74);
              uint64_t v81 = v60;
              unint64_t v82 = v40;
              goto LABEL_49;
            case 3uLL:
              goto LABEL_5;
            default:
              if (v248 >> 60 == 9)
              {
                __int16 v83 = *(_WORD *)((v248 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
                char v84 = *(unsigned char *)((v248 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
                *(void *)&long long v251 = *(void *)((v248 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
                WORD4(v251) = v83;
                BYTE10(v251) = v84;
                DisplayList.HostedViewState.updateViews(in:index:archive:position:state:)(&v251, v244, v236, v241, v55 + a5, v56 + a6);
              }
              else if (v248 >> 60 == 11)
              {
                outlined init with copy of TableColumnList((v248 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)v290);
                uint64_t v61 = *v244;
                uint64_t v62 = v226;
                outlined init with copy of DisplayList.ArchiveIDs?(v236, v226, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478]);
                uint64_t v63 = type metadata accessor for DisplayList.ArchiveIDs();
                int v64 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 48))(v62, 1, v63);
                outlined copy of DisplayList.Item.Value(v60, v40);
                outlined copy of DisplayList.Item.Value(v60, v40);
                outlined copy of DisplayList.Item.Value(v60, v40);
                if (v64 == 1)
                {
                  outlined destroy of DisplayList.ArchiveIDs?(v62, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
                  uint64_t v65 = type metadata accessor for UUID();
                  uint64_t v66 = (uint64_t)v224;
                  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v224, 1, 1, v65);
                }
                else
                {
                  uint64_t v66 = (uint64_t)v224;
                  DisplayList.ArchiveIDs.uuid.getter();
                  outlined destroy of DisplayList.HostedViewState.Key(v62, MEMORY[0x1E4F3F478]);
                  uint64_t v65 = type metadata accessor for UUID();
                  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v66, 0, 1, v65);
                }
                uint64_t v110 = v242;
                uint64_t v111 = v229;
                uint64_t v112 = (uint64_t)v229 + *(int *)(v228 + 24);
                type metadata accessor for UUID();
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56))(v112, 1, 1, v65);
                *uint64_t v111 = v61;
                outlined assign with take of UUID?(v66, v112);
                uint64_t v113 = v232;
                outlined init with take of DisplayList.HostedViewState.Key((uint64_t)v111, v232, type metadata accessor for DisplayList.HostedViewState.Key);
                uint64_t v114 = v237;
                long long v115 = v237[5];
                long long v116 = v237[3];
                long long v287 = v237[4];
                long long v288 = v115;
                long long v117 = v237[5];
                v289[0] = v237[6];
                *(_OWORD *)((char *)v289 + 12) = *(_OWORD *)((char *)v237 + 108);
                long long v118 = v237[1];
                long long v283 = *v237;
                long long v284 = v118;
                long long v119 = v237[3];
                long long v121 = *v237;
                long long v120 = v237[1];
                long long v285 = v237[2];
                long long v286 = v119;
                long long v280 = v287;
                long long v281 = v117;
                v282[0] = v237[6];
                *(_OWORD *)((char *)v282 + 12) = *(_OWORD *)((char *)v237 + 108);
                long long v276 = v121;
                long long v277 = v120;
                long long v278 = v285;
                long long v279 = v116;
                uint64_t v122 = v225;
                outlined init with copy of DisplayList.HostedViewState.Key(v113, (uint64_t)v225, type metadata accessor for DisplayList.HostedViewState.Key);
                uint64_t v265 = v42;
                uint64_t v266 = v43;
                uint64_t v267 = v44;
                uint64_t v268 = v45;
                uint64_t v269 = v110;
                unint64_t v270 = v248;
                unint64_t v40 = v54;
                unint64_t v271 = v54;
                uint64_t v272 = v250;
                char v274 = BYTE2(v249);
                __int16 v273 = v249;
                int v275 = v52;
                uint64_t v123 = *v59;
                uint64_t v124 = v59[5];
                uint64_t v125 = v59[6];
                long long v261 = *(_OWORD *)(v59 + 1);
                long long v262 = *(_OWORD *)(v59 + 3);
                uint64_t v260 = v123;
                uint64_t v263 = v124;
                uint64_t v264 = v125;
                outlined retain of DisplayList.HostedViewState((uint64_t)&v283);
                swift_retain();
                swift_retain();
                swift_retain();
                char v126 = swift_isUniquelyReferenced_nonNull_native();
                *(void *)&long long v251 = *((void *)v114 + 13);
                uint64_t v127 = v251;
                *((void *)v114 + 13) = 0x8000000000000000;
                unint64_t v129 = specialized __RawDictionaryStorage.find<A>(_:)(v122);
                uint64_t v130 = *(void *)(v127 + 16);
                BOOL v131 = (v128 & 1) == 0;
                uint64_t v132 = v130 + v131;
                if (__OFADD__(v130, v131)) {
                  goto LABEL_71;
                }
                char v133 = v128;
                if (*(void *)(v127 + 24) >= v132)
                {
                  a6 = v221;
                  if ((v126 & 1) == 0)
                  {
                    specialized _NativeDictionary.copy()();
                    uint64_t v127 = v251;
                  }
                }
                else
                {
                  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v132, v126);
                  uint64_t v127 = v251;
                  unint64_t v134 = specialized __RawDictionaryStorage.find<A>(_:)(v122);
                  a6 = v221;
                  if ((v133 & 1) != (v135 & 1)) {
                    goto LABEL_74;
                  }
                  unint64_t v129 = v134;
                }
                *((void *)v114 + 13) = v127;
                swift_bridgeObjectRelease();
                uint64_t v160 = (void *)*((void *)v114 + 13);
                if (v133)
                {
                  swift_bridgeObjectRetain();
                }
                else
                {
                  *(void *)&long long v251 = 0;
                  DWORD2(v251) = 0;
                  *((void *)&v253 + 1) = MEMORY[0x1E4F3FCC8];
                  *(void *)&long long v254 = MEMORY[0x1E4F3FCC0];
                  swift_bridgeObjectRetain();
                  static ViewSize.zero.getter();
                  ViewTransform.init()();
                  EnvironmentValues.init()();
                  uint64_t v161 = v214;
                  *uint64_t v214 = 0u;
                  v161[1] = 0u;
                  v160[(v129 >> 6) + 8] |= 1 << v129;
                  outlined init with copy of DisplayList.HostedViewState.Key((uint64_t)v122, v160[6] + *(void *)(v230 + 72) * v129, type metadata accessor for DisplayList.HostedViewState.Key);
                  uint64_t v162 = (_OWORD *)(v160[7] + 176 * v129);
                  *uint64_t v162 = v251;
                  v162[1] = v252;
                  v162[2] = v253;
                  v162[6] = v257[0];
                  v162[5] = v256;
                  v162[4] = v255;
                  v162[3] = v254;
                  v162[10] = v259[1];
                  v162[9] = v259[0];
                  v162[8] = v258;
                  v162[7] = v257[1];
                  uint64_t v163 = v160[2];
                  BOOL v164 = __OFADD__(v163, 1);
                  uint64_t v165 = v163 + 1;
                  if (v164) {
                    goto LABEL_73;
                  }
                  v160[2] = v165;
                }
                uint64_t v166 = v160[7];
                swift_bridgeObjectRelease();
                uint64_t v167 = v166 + 176 * v129;
                uint64_t v168 = v232;
                DisplayList.HostedViewState.updateView(_:key:factory:item:position:state:)(v167, v232, v290, &v265, &v260, v57, v58);
                swift_release();
                swift_release();
                swift_release();
                long long v255 = v280;
                long long v256 = v281;
                v257[0] = v282[0];
                *(_OWORD *)((char *)v257 + 12) = *(_OWORD *)((char *)v282 + 12);
                long long v251 = v276;
                long long v252 = v277;
                long long v253 = v278;
                long long v254 = v279;
                outlined release of DisplayList.HostedViewState((uint64_t)&v251);
                outlined destroy of DisplayList.HostedViewState.Key((uint64_t)v122, type metadata accessor for DisplayList.HostedViewState.Key);
                uint64_t v169 = v218;
                outlined init with copy of DisplayList.HostedViewState.Key(v168, v218, type metadata accessor for DisplayList.HostedViewState.Key);
                uint64_t v170 = (void *)*((void *)v114 + 14);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  uint64_t v170 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v170[2] + 1, 1, v170);
                }
                unint64_t v172 = v170[2];
                unint64_t v171 = v170[3];
                if (v172 >= v171 >> 1) {
                  uint64_t v170 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v171 > 1, v172 + 1, 1, v170);
                }
                v170[2] = v172 + 1;
                outlined init with take of DisplayList.HostedViewState.Key(v169, (uint64_t)v170+ ((*(unsigned __int8 *)(v230 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v230 + 80))+ *(void *)(v230 + 72) * v172, type metadata accessor for DisplayList.HostedViewState.Key);
                uint64_t v173 = v248;
                outlined consume of DisplayList.Item.Value(v248, v54);
                outlined consume of DisplayList.Item.Value(v173, v54);
                *((void *)v114 + 14) = v170;
                uint64_t v60 = v173;
                outlined destroy of DisplayList.HostedViewState.Key(v232, type metadata accessor for DisplayList.HostedViewState.Key);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v290);
                uint64_t v81 = v173;
                unint64_t v82 = v54;
LABEL_49:
                outlined consume of DisplayList.Item.Value(v81, v82);
                uint64_t v38 = v243;
              }
LABEL_5:
              long long v251 = v246;
              LOBYTE(v252) = v245;
              DisplayList.Index.leave(index:)();
              outlined consume of DisplayList.Item.Value(v60, v40);
              unint64_t v39 = v247;
              if (v247 != v240) {
                continue;
              }
              swift_bridgeObjectRelease();
              break;
          }
        }
        break;
      }
    }
  }
}

void @objc PlatformViewHost._layoutMetricsInvalidatedForHostedView()(void *a1)
{
  id v1 = a1;
  PlatformViewHost._layoutMetricsInvalidatedForHostedView()();
}

uint64_t LeafDisplayList.updateValue()(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  LODWORD(v31) = v2[5];
  v30[1] = v2[6];
  int v8 = v2[8];
  uint64_t Value = AGGraphGetValue();
  int v11 = v10;
  uint64_t v32 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, Value, v4);
  char v12 = (uint64_t *)AGGraphGetValue();
  int v14 = v13;
  uint64_t v15 = *v12;
  uint64_t v16 = v12[1];
  uint64_t v17 = v12[2];
  uint64_t v18 = v12[3];
  DisplayList.Version.init(forUpdate:)();
  unint64_t v19 = v44;
  int CurrentAttribute = AGGraphGetCurrentAttribute();
  int v21 = *MEMORY[0x1E4F4E7A0];
  if (CurrentAttribute == *MEMORY[0x1E4F4E7A0]) {
    __break(1u);
  }
  v30[0] = v11 | v14;
  LOBYTE(v44) = v8 == v21;
  uint64_t v22 = GeometryProxy.init(owner:size:environment:transform:position:safeAreaInsets:seed:)();
  MEMORY[0x1F4188790](v22);
  uint64_t v23 = *(void *)(a1 + 24);
  *(void *)&v30[-16] = v4;
  *(void *)&v30[-14] = v23;
  uint64_t v31 = v7;
  *(void *)&v30[-12] = v7;
  *(void *)&v30[-10] = v15;
  *(void *)&v30[-8] = v16;
  *(void *)&v30[-6] = v17;
  *(void *)&v30[-4] = v18;
  type metadata accessor for (DisplayList.Content.Value, CGRect)();
  GeometryProxy.asCurrent<A>(do:)();
  unint64_t v24 = v35;
  int v25 = *v2;
  char v26 = *((unsigned char *)v2 + 36);
  LOWORD(v8) = *((_WORD *)v2 + 19);
  long long v34 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  long long v34 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  if (v30[0])
  {
    if (v19) {
      int v8 = (2 * ((33 * (v19 >> 16)) ^ v19)) | 1;
    }
    else {
      LOWORD(v8) = 0;
    }
    *((_WORD *)v2 + 19) = v8;
  }
  *(void *)&long long v35 = v24;
  *((void *)&v35 + 1) = (unsigned __int16)v8;
  *(void *)&long long v36 = 0;
  BYTE10(v36) = 0;
  WORD4(v36) = 0;
  int v33 = v25;
  *(void *)&long long v34 = v19;
  outlined copy of DisplayList.Content.Value(v24);
  DisplayList.Item.init(_:frame:identity:version:)();
  LOBYTE(v35) = v26;
  DisplayList.Item.canonicalize(options:)();
  uint64_t v27 = v47;
  unint64_t v28 = v48;
  long long v35 = v44;
  long long v36 = v45;
  uint64_t v37 = v46;
  uint64_t v38 = v47;
  unint64_t v39 = v48;
  uint64_t v40 = v49;
  char v42 = v51;
  __int16 v41 = v50;
  int v43 = v52;
  outlined copy of DisplayList.Item.Value(v47, v48);
  DisplayList.init(_:)();
  *(void *)&long long v35 = v34;
  WORD4(v35) = WORD4(v34);
  BYTE10(v35) = BYTE10(v34);
  AGGraphSetOutputValue();
  outlined consume of DisplayList.Content.Value(v24);
  swift_bridgeObjectRelease();
  outlined consume of DisplayList.Item.Value(v27, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v31, v4);
}

uint64_t PlatformViewDisplayList.updateValue()(uint64_t a1)
{
  unint64_t v2 = (int *)v1;
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v46 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *(void *)&long long v50 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v6 = (char *)&v46 - v5;
  uint64_t v7 = type metadata accessor for ViewLeafView();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  int v10 = (char *)&v46 - v9;
  DisplayList.Version.init(forUpdate:)();
  uint64_t v52 = v66;
  int v49 = *((_DWORD *)v1 + 4);
  uint64_t Value = AGGraphGetValue();
  char v13 = v12;
  uint64_t v48 = v8;
  uint64_t v47 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v47(v10, Value, v7);
  if (v13)
  {
    if (v52) {
      __int16 v14 = (2 * ((33 * WORD1(v52)) ^ v52)) | 1;
    }
    else {
      __int16 v14 = 0;
    }
    *((_WORD *)v1 + 16) = v14;
  }
  uint64_t v15 = (long long *)AGGraphGetValue();
  long long v66 = *v15;
  MEMORY[0x18C10C240](v15);
  uint64_t v16 = (long long *)AGGraphGetValue();
  long long v66 = *v16;
  MEMORY[0x18C10C240](v16);
  uint64_t v17 = (long long *)AGGraphGetValue();
  long long v18 = v17[1];
  long long v66 = *v17;
  long long v67 = v18;
  MEMORY[0x18C114450](v17);
  uint64_t v20 = v19;
  ViewLeafView.representedViewProvider.getter(v7, (uint64_t)v6);
  (*(void (**)(long long *__return_ptr, char *, uint64_t, uint64_t))(v3 + 144))(&v66, v6, v4, v3);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v6, AssociatedTypeWitness);
  if ((v66 & 4) != 0)
  {
    if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E4F4E7A0]) {
      __break(1u);
    }
    unsigned int v22 = *((_DWORD *)v1 + 4);
    unsigned int v23 = *((_DWORD *)v1 + 5);
    unsigned int v24 = *((_DWORD *)v1 + 6);
    unsigned int v25 = *((_DWORD *)v1 + 7);
    __int16 v26 = *((_WORD *)v1 + 16);
    uint64_t AssociatedTypeWitness = v20;
    uint64_t v27 = *v1;
    *(void *)&long long v21 = v1[1];
    long long v50 = v21;
    _PositionAwarePlacementContext.init(context:size:environment:transform:position:safeAreaInsets:)();
    _PositionAwarePlacementContext.safeAreaInsets(matching:)();
    CGFloat v29 = v28;
    double v31 = v30;
    CGFloat v33 = v32;
    double v35 = v34;
    *(void *)&long long v66 = v27;
    *((void *)&v66 + 1) = v50;
    *(void *)&long long v67 = __PAIR64__(v23, v22);
    *((void *)&v67 + 1) = __PAIR64__(v25, v24);
    LOWORD(v68) = v26;
    PlatformViewDisplayList.environment.getter(&v57);
    long long v66 = v57;
    EnvironmentValues.layoutDirection.getter();
    swift_release();
    swift_release();
    if (LOBYTE(v75.value.top)) {
      CGFloat v36 = v31;
    }
    else {
      CGFloat v36 = v35;
    }
    if (LOBYTE(v75.value.top)) {
      CGFloat v37 = v35;
    }
    else {
      CGFloat v37 = v31;
    }
    uint64_t v38 = *(void **)&v10[*(int *)(v7 + 36)];
    v75.value.top = v29;
    v75.value.left = v37;
    v75.value.bottom = v33;
    v75.value.right = v36;
    v75.is_nil = 0;
    id v39 = v38;
    PlatformViewHost.updateSafeAreaInsets(_:)(&v75);
  }
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 40) = v7;
  *(void *)(v40 + 48) = swift_getWitnessTable();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v40 + 16));
  v47((char *)boxed_opaque_existential_1, (uint64_t)v10, v7);
  uint64_t v42 = *((unsigned __int16 *)v2 + 16);
  *(void *)&long long v57 = v40 | 0x6000000000000000;
  *((void *)&v57 + 1) = v42;
  *(void *)&long long v58 = 0;
  BYTE10(v58) = 0;
  WORD4(v58) = 0;
  int v56 = *v2;
  uint64_t v53 = v52;
  DisplayList.Item.init(_:frame:identity:version:)();
  LOBYTE(v57) = 0;
  DisplayList.Item.canonicalize(options:)();
  uint64_t v43 = v69;
  unint64_t v44 = v70;
  long long v57 = v66;
  long long v58 = v67;
  uint64_t v59 = v68;
  uint64_t v60 = v69;
  unint64_t v61 = v70;
  uint64_t v62 = v71;
  char v64 = v73;
  __int16 v63 = v72;
  int v65 = v74;
  outlined copy of DisplayList.Item.Value(v69, v70);
  DisplayList.init(_:)();
  *(void *)&long long v57 = v53;
  WORD4(v57) = v54;
  BYTE10(v57) = v55;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  outlined consume of DisplayList.Item.Value(v43, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v10, v7);
}

unint64_t outlined copy of DisplayList.Content.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t outlined consume of DisplayList.Content.Value(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined consume of DisplayList.Item.Value(uint64_t result, unint64_t a2)
{
  unint64_t v3 = a2 >> 62;
  if (a2 >> 62 != 2)
  {
    if (v3 != 1)
    {
      if (!v3)
      {
        return outlined consume of DisplayList.Content.Value(result);
      }
      return result;
    }
    outlined consume of DisplayList.Effect(result, a2, SBYTE4(a2));
  }
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall PlatformViewHost._layoutMetricsInvalidatedForHostedView()()
{
  id v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  unint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *v0;
  v7.id receiver = v1;
  v7.Class super_class = ObjectType;
  objc_msgSendSuper2(&v7, sel__layoutMetricsInvalidatedForHostedView);
  (*(void (**)(objc_super *__return_ptr, char *))(*(void *)(v4 + 88) + 144))(&v8, (char *)v1 + *(void *)((*v3 & *v1) + 0x78));
  if (((uint64_t)v8.receiver & 1) != 0 && (*((unsigned char *)v1 + *(void *)((*v3 & *v1) + 0xB0)) & 1) == 0)
  {
    uint64_t v5 = (objc_class *)swift_getObjectType();
    v8.id receiver = v1;
    v8.Class super_class = v5;
    id v6 = objc_msgSendSuper2(&v8, sel_hostedView);
    if (v6)
    {

      PlatformViewHost.enqueueLayoutInvalidation()();
    }
  }
}

uint64_t protocol witness for static PlatformViewRepresentable.layoutOptions(_:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2)
{
  return static PlatformViewRepresentableAdaptor.layoutOptions(_:)(*a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t static PlatformViewRepresentableAdaptor.layoutOptions(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 112))();
}

void static UIViewRepresentable._layoutOptions(_:)(void *a1@<X8>)
{
  *a1 = qword_1ED42ED30;
}

Swift::Void __swiftcall PlatformViewHost.enqueueLayoutInvalidation()()
{
  id v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (void *)(*MEMORY[0x1E4FBC8C8] & *v0);
  uint64_t v3 = (uint64_t)v0 + v2[24];
  swift_beginAccess();
  outlined init with copy of PlatformViewLayoutInvalidator?(v3, (uint64_t)v9);
  LOBYTE(v3) = v9[16];
  outlined destroy of PlatformViewLayoutInvalidator?((uint64_t)v9);
  if (v3)
  {
    uint64_t v4 = (char *)v0 + *(void *)((*v1 & *v0) + 0xD0);
    *(_OWORD *)uint64_t v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    v4[48] = 1;
  }
  else
  {
    uint64_t v5 = *(void *)((*v1 & *v0) + 0xC8);
    if ((*((unsigned char *)v0 + v5) & 1) == 0)
    {
      *((unsigned char *)v0 + v5) = 1;
      if (one-time initialization token for defaultUseSetNeedsLayout != -1) {
        swift_once();
      }
      int v6 = static UIKitUpdateCycle.defaultUseSetNeedsLayout;
      uint64_t v7 = swift_allocObject();
      swift_unknownObjectWeakInit();
      objc_super v8 = (void *)swift_allocObject();
      void v8[2] = v2[10];
      v8[3] = v2[11];
      v8[4] = v7;
      swift_retain();
      if (v6 == 1) {
        static Update.enqueueAction(_:)();
      }
      else {
        onNextMainRunLoop(do:)();
      }
      swift_release();
      swift_release();
    }
  }
}

uint64_t outlined destroy of PlatformViewLayoutInvalidator?(uint64_t a1)
{
  type metadata accessor for PlatformViewLayoutInvalidator?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for PlatformViewLayoutInvalidator?()
{
  if (!lazy cache variable for type metadata for PlatformViewLayoutInvalidator?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewLayoutInvalidator?);
    }
  }
}

uint64_t outlined init with copy of PlatformViewLayoutInvalidator?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PlatformViewLayoutInvalidator?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance CircularUIKitProgressView(void *a1@<X8>)
{
  *a1 = qword_1ED42EAB0;
}

void type metadata accessor for (DisplayList.Content.Value, CGRect)()
{
  if (!lazy cache variable for type metadata for (DisplayList.Content.Value, CGRect))
  {
    type metadata accessor for CGRect(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (DisplayList.Content.Value, CGRect));
    }
  }
}

uint64_t protocol witness for static PlatformViewRepresentable.layoutOptions(_:) in conformance PlatformViewControllerRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2)
{
  return static PlatformViewControllerRepresentableAdaptor.layoutOptions(_:)(*a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t static PlatformViewControllerRepresentableAdaptor.layoutOptions(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 88))();
}

void static UIViewControllerRepresentable._layoutOptions(_:)(void *a1@<X8>)
{
  *a1 = qword_1ED457900;
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance NavigationSplitRepresentable(void *a1@<X8>)
{
  *a1 = qword_1ED457838;
}

uint64_t PlatformViewDisplayList.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

uint64_t protocol witness for static PlatformViewRepresentable.layoutOptions(_:) in conformance ListRepresentable<A, B>@<X0>(uint64_t *a1@<X8>)
{
  return static ListRepresentable.layoutOptions(_:)(a1);
}

{
  return static ListRepresentable.layoutOptions(_:)(a1);
}

uint64_t static ListRepresentable.layoutOptions(_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = qword_1ED4239D8;
  uint64_t v4 = qword_1ED4239D8;
  static Semantics.v3_2.getter();
  uint64_t result = isLinkedOnOrAfter(_:)();
  if (result)
  {
    lazy protocol witness table accessor for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions();
    uint64_t result = OptionSet<>.insert(_:)();
    uint64_t v2 = v4;
  }
  *a1 = v2;
  return result;
}

{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  uint64_t v2 = qword_1ED423958;
  uint64_t v4 = qword_1ED423958;
  static Semantics.v3_2.getter();
  uint64_t result = isLinkedOnOrAfter(_:)();
  if (result)
  {
    lazy protocol witness table accessor for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions();
    uint64_t result = OptionSet<>.insert(_:)();
    uint64_t v2 = v4;
  }
  *a1 = v2;
  return result;
}

unint64_t lazy protocol witness table accessor for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions;
  if (!lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions;
  if (!lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions;
  if (!lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions;
  if (!lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions;
  if (!lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PlatformViewRepresentableLayoutOptions and conformance _PlatformViewRepresentableLayoutOptions);
  }
  return result;
}

Swift::Void __swiftcall PlatformViewHost.updateSafeAreaInsets(_:)(UIEdgeInsets_optional *a1)
{
  uint64_t ObjectType = swift_getObjectType();
  UIView.SafeAreaHelper.updateSafeAreaInsets<A>(_:delegate:)((uint64_t)a1, v1, ObjectType, (uint64_t)&protocol witness table for PlatformViewHost<A>);
}

void UIView.SafeAreaHelper.updateSafeAreaInsets<A>(_:delegate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  outlined init with take of UIEdgeInsets?(a1, (uint64_t)v25);
  float64x2_t v23 = (float64x2_t)v25[0];
  float64x2_t v24 = (float64x2_t)v25[1];
  if (*(unsigned char *)(v4 + 48))
  {
    outlined init with take of UIEdgeInsets?(a1, (uint64_t)v27);
    if (v28) {
      return;
    }
  }
  else
  {
    float64x2_t v21 = *(float64x2_t *)(v4 + 32);
    float64x2_t v22 = *(float64x2_t *)(v4 + 16);
    outlined init with take of UIEdgeInsets?(a1, (uint64_t)v27);
    if (v28 != 1
      && (~vaddv_s16((int16x4_t)vand_s8((int8x8_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_f64(v22, v23), (int32x4_t)vceqq_f64(v21, v24))), 0xFuLL)), (int8x8_t)0x8000400020001)) & 0xF) == 0)
    {
      return;
    }
  }
  double v8 = (*(double (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  double v10 = v9;
  double v12 = v11;
  double v14 = v13;
  outlined init with take of UIEdgeInsets?(a1, (uint64_t)v26);
  if ((v26[32] & 1) == 0
    && (v8 == v23.f64[0] ? (BOOL v15 = v10 == v23.f64[1]) : (BOOL v15 = 0),
        v15 ? (BOOL v16 = v12 == v24.f64[0]) : (BOOL v16 = 0),
        v16 ? (BOOL v17 = v14 == v24.f64[1]) : (BOOL v17 = 0),
        v17))
  {
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(unsigned char *)(v4 + 48) = 1;
  }
  else
  {
    outlined init with take of UIEdgeInsets?(a1, v4 + 16);
    long long v18 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a3, a4);
    id v19 = objc_msgSend(v18, sel_superview);

    if (v19)
    {
      id v20 = objc_msgSend(v19, sel_layer);

      objc_msgSend(v20, sel_setNeedsLayout);
    }
  }
}

uint64_t outlined init with take of UIEdgeInsets?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UIEdgeInsets?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for UIEdgeInsets?()
{
  if (!lazy cache variable for type metadata for UIEdgeInsets?)
  {
    type metadata accessor for UIEdgeInsets(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIEdgeInsets?);
    }
  }
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance NavigationStackRepresentable(void *a1@<X8>)
{
  *a1 = qword_1ED457860;
}

void protocol witness for static UIViewRepresentable._layoutOptions(_:) in conformance Switch(void *a1@<X8>)
{
  *a1 = qword_1ED42ED08;
}

void @objc PlatformViewHost._updateSafeAreaInsets()(void *a1)
{
  id v1 = a1;
  PlatformViewHost._updateSafeAreaInsets()();
}

double @objc PlatformViewHost.safeAreaInsets.getter(void *a1)
{
  id v1 = a1;
  PlatformViewHost.safeAreaInsets.getter();
  double v3 = v2;

  return v3;
}

uint64_t PlatformViewHost.safeAreaInsets.getter()
{
  uint64_t ObjectType = swift_getObjectType();

  return specialized UIView.SafeAreaHelper.resolvedSafeAreaInsets<A>(delegate:)(v0, ObjectType, (uint64_t)&protocol witness table for PlatformViewHost<A>);
}

Swift::Void __swiftcall PlatformViewHost._updateSafeAreaInsets()()
{
  id v1 = v0;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  double v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *(void *)v0;
  specialized UIView.SafeAreaHelper.resolvedSafeAreaInsets<A>(delegate:)((uint64_t)v0, (uint64_t)ObjectType, (uint64_t)&protocol witness table for PlatformViewHost<A>);
  double v6 = v5;
  double v8 = v7;
  double v10 = v9;
  double v12 = v11;
  double v13 = UIView.SafeAreaHelper.prepareForSafeAreaPropagation<A>(delegate:)((uint64_t)v0, (uint64_t)ObjectType, (uint64_t)&protocol witness table for PlatformViewHost<A>);
  v24.id receiver = v0;
  v24.Class super_class = ObjectType;
  objc_msgSendSuper2(&v24, sel__updateSafeAreaInsets, v13);
  uint64_t v14 = swift_getObjectType();
  specialized UIView.SafeAreaHelper.resolvedSafeAreaInsets<A>(delegate:)((uint64_t)v0, v14, (uint64_t)&protocol witness table for PlatformViewHost<A>);
  if (v6 != v18 || v8 != v15 || v10 != v16 || v12 != v17)
  {
    if ((*(uint64_t (**)(void))(*(void *)(v4 + 88) + 128))())
    {
      float64x2_t v22 = (void *)(*(uint64_t (**)(char *))(*(void *)((*v3 & *(void *)v0) + 0x58) + 72))(&v0[*(void *)((*v3 & *(void *)v0) + 0x78)]);
      objc_msgSend(v22, sel__setViewDelegateContentOverlayInsetsAreClean_, 0);
    }
    float64x2_t v23 = (void *)(*(uint64_t (**)(char *))(*(void *)((*v3 & *(void *)v1) + 0x58) + 72))(&v1[*(void *)((*v3 & *(void *)v1) + 0x78)]);
    objc_msgSend(v23, sel__updateSafeAreaInsets);
  }
}

uint64_t specialized UIView.SafeAreaHelper.resolvedSafeAreaInsets<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double v5 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  if (((double (*)(uint64_t, uint64_t))v5)(a2, a3) == 1.79769313e308
    && v6 == 1.79769313e308
    && v7 == 1.79769313e308
    && v8 == 1.79769313e308)
  {
    return (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  }
  else
  {
    return v5(a2, a3);
  }
}

double PlatformViewHost._safeAreaInsets.getter()
{
  return *(double *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8));
}

id protocol witness for SafeAreaHelperDelegate.defaultSafeAreaInsets.getter in conformance HostingScrollView.PlatformContainer()
{
  v2.id receiver = v0;
  v2.Class super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_safeAreaInsets);
}

double UIView.SafeAreaHelper.prepareForSafeAreaPropagation<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  UIView.SafeAreaHelper.adjustSafeAreaIfNeeded<A>(delegate:)(a1, a2, a3);
  if ((*(unsigned char *)(v3 + 48) & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, double, double, double, double))(a3 + 16))(a2, a3, *(double *)(v3 + 16), *(double *)(v3 + 24), *(double *)(v3 + 32), *(double *)(v3 + 40));
    double result = 0.0;
    *(_OWORD *)(v3 + 16) = 0u;
    *(_OWORD *)(v3 + 32) = 0u;
    *(unsigned char *)(v3 + 48) = 1;
  }
  return result;
}

void UIView.SafeAreaHelper.adjustSafeAreaIfNeeded<A>(delegate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  double v7 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 40);
  double v8 = (void *)v7(a2, a3);
  id v9 = objc_msgSend(v8, sel_superview);

  if (v9)
  {
    objc_msgSend(v9, sel_safeAreaInsets);
    double v11 = v10;
    double v13 = v12;
    double v15 = v14;
    double v17 = v16;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 48))(a2, a3) & 1) != 0 && (*(unsigned char *)(v3 + 88) & 1) == 0)
    {
      double v18 = (unsigned char *)(v3 + 88);
      double v19 = *(double *)(v3 + 72);
      double v20 = *(double *)(v3 + 80);
      double v21 = *(double *)(v3 + 56);
      double v22 = *(double *)(v3 + 64);
      if (*(unsigned char *)(v3 + 48))
      {
        float64x2_t v23 = *(double (**)(uint64_t, uint64_t))(a3 + 8);
        if (v23(a2, a3) == 1.79769313e308 && v24 == 1.79769313e308 && v25 == 1.79769313e308 && v26 == 1.79769313e308)
        {
        }
        else
        {
          double v30 = v23(a2, a3);
          double v104 = v31;
          double v106 = v30;
          double v100 = v32;
          double v102 = v33;
          double v34 = (void *)v7(a2, a3);
          objc_msgSend(v34, sel_frame);
          double v116 = v20;
          double v119 = v19;
          CGFloat v36 = v35;
          CGFloat v38 = v37;
          double v108 = v22;
          double v112 = v21;
          CGFloat v40 = v39;
          CGFloat v42 = v41;

          objc_msgSend(v9, sel_bounds);
          double v96 = v43;
          double v98 = v44;
          v122.origin.CGFloat x = v36;
          v122.origin.CGFloat y = v38;
          v122.size.width = v40;
          v122.size.CGFloat height = v42;
          double MinX = CGRectGetMinX(v122);
          double v121 = v15;
          double v46 = v17;
          double v47 = 0.0;
          BOOL v48 = fabs(v13) < 0.25 || MinX > 0.0;
          double v49 = v13 - v108;
          if (v48) {
            double v49 = 0.0;
          }
          double v109 = v49;
          v123.origin.CGFloat x = v36;
          v123.origin.CGFloat y = v38;
          v123.size.width = v40;
          v123.size.CGFloat height = v42;
          double MinY = CGRectGetMinY(v123);
          BOOL v51 = fabs(v11) < 0.25 || MinY > 0.0;
          double v52 = v11 - v112;
          if (v51) {
            double v52 = 0.0;
          }
          double v94 = v52;
          v124.origin.CGFloat x = v36;
          v124.origin.CGFloat y = v38;
          v124.size.width = v40;
          v124.size.CGFloat height = v42;
          CGFloat MaxX = CGRectGetMaxX(v124);
          double v113 = v46;
          double v54 = v46 - v116;
          double v15 = v121;
          if (v96 <= MaxX) {
            double v47 = v54;
          }
          v125.origin.CGFloat x = v36;
          v125.origin.CGFloat y = v38;
          v125.size.width = v40;
          v125.size.CGFloat height = v42;
          if (v98 > CGRectGetMaxY(v125)) {
            double v60 = 0.0;
          }
          else {
            double v60 = v121 - v119;
          }
          v59.n128_u64[0] = *(void *)(MEMORY[0x1E4FB2848] + 24);
          BOOL v61 = v94 == *MEMORY[0x1E4FB2848] && v109 == *(double *)(MEMORY[0x1E4FB2848] + 8);
          v56.n128_f64[0] = v100;
          v57.n128_f64[0] = v102;
          BOOL v62 = v61 && v60 == *(double *)(MEMORY[0x1E4FB2848] + 16);
          v58.n128_f64[0] = v104;
          v55.n128_f64[0] = v106;
          if (!v62 || v47 != v59.n128_f64[0])
          {
            v55.n128_f64[0] = v106 + v94;
            v58.n128_f64[0] = v104 + v47;
            v57.n128_f64[0] = v102 + v60;
            v56.n128_f64[0] = v100 + v109;
          }
          (*(void (**)(uint64_t, uint64_t, __n128, __n128, __n128, __n128, __n128))(a3 + 16))(a2, a3, v55, v56, v57, v58, v59);

          double v17 = v113;
        }
      }
      else
      {
        double v99 = *(double *)(v3 + 32);
        double v101 = *(double *)(v3 + 40);
        double v95 = *(double *)(v3 + 16);
        double v97 = *(double *)(v3 + 24);
        char v64 = (void *)v7(a2, a3);
        objc_msgSend(v64, sel_frame);
        double v117 = v20;
        double v120 = v19;
        CGFloat v66 = v65;
        CGFloat v68 = v67;
        double v110 = v22;
        double v114 = v21;
        CGFloat v70 = v69;
        CGFloat v72 = v71;

        objc_msgSend(v9, sel_bounds);
        double v105 = v73;
        double v107 = v74;
        v126.origin.CGFloat x = v66;
        v126.origin.CGFloat y = v68;
        v126.size.width = v70;
        v126.size.CGFloat height = v72;
        double v75 = CGRectGetMinX(v126);
        BOOL v76 = fabs(v13) < 0.25 || v75 > 0.0;
        double v77 = v13 - v110;
        if (v76) {
          double v77 = 0.0;
        }
        double v111 = v77;
        v127.origin.CGFloat x = v66;
        v127.origin.CGFloat y = v68;
        v127.size.width = v70;
        v127.size.CGFloat height = v72;
        double v78 = CGRectGetMinY(v127);
        BOOL v79 = fabs(v11) < 0.25 || v78 > 0.0;
        double v80 = v11 - v114;
        if (v79) {
          double v80 = 0.0;
        }
        double v103 = v80;
        v128.origin.CGFloat x = v66;
        v128.origin.CGFloat y = v68;
        v128.size.width = v70;
        v128.size.CGFloat height = v72;
        if (v105 > CGRectGetMaxX(v128)) {
          double v81 = 0.0;
        }
        else {
          double v81 = v17 - v117;
        }
        double v115 = v17;
        double v118 = v81;
        v129.origin.CGFloat x = v66;
        v129.origin.CGFloat y = v68;
        v129.size.width = v70;
        v129.size.CGFloat height = v72;
        if (v107 > CGRectGetMaxY(v129)) {
          double v82 = 0.0;
        }
        else {
          double v82 = v15 - v120;
        }
        double v83 = *MEMORY[0x1E4FB2848];
        double v84 = *(double *)(MEMORY[0x1E4FB2848] + 8);
        double v85 = *(double *)(MEMORY[0x1E4FB2848] + 16);
        double v86 = *(double *)(MEMORY[0x1E4FB2848] + 24);

        if (v103 == v83 && v111 == v84 && v82 == v85 && v118 == v86)
        {
          double v17 = v115;
          double v92 = v99;
          double v91 = v101;
          double v90 = v95;
          double v93 = v97;
        }
        else
        {
          double v90 = v95 + v103;
          double v91 = v101 + v118;
          double v92 = v99 + v82;
          double v93 = v97 + v111;
          double v17 = v115;
        }
        *(double *)(v4 + 16) = v90;
        *(double *)(v4 + 24) = v93;
        *(double *)(v4 + 32) = v92;
        *(double *)(v4 + 40) = v91;
        *(unsigned char *)(v4 + 48) = 0;
      }
      *(double *)(v4 + 56) = v11;
      *(double *)(v4 + 64) = v13;
    }
    else
    {

      *(double *)(v3 + 56) = v11;
      *(double *)(v3 + 64) = v13;
      double v18 = (unsigned char *)(v3 + 88);
    }
    *(double *)(v4 + 72) = v15;
    *(double *)(v4 + 80) = v17;
    *double v18 = 0;
  }
}

id protocol witness for SafeAreaHelperDelegate.containerView.getter in conformance PlatformViewHost<A>()
{
  swift_getObjectType();
  uint64_t v0 = (void *)FocusStoreLocation.id.getter();

  return v0;
}

uint64_t FocusStoreLocation.id.getter()
{
  return v0;
}

uint64_t PlatformViewHost.shouldEagerlyUpdateSafeArea.getter()
{
  return (*(uint64_t (**)(char *))(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v0) + 0x58) + 136))(&v0[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v0) + 0x78)]) & 1;
}

uint64_t protocol witness for static PlatformViewRepresentable.shouldEagerlyUpdateSafeArea(_:) in conformance ListRepresentable<A, B>(char **a1)
{
  return static ListRepresentable.shouldEagerlyUpdateSafeArea(_:)(*a1);
}

{
  return static ListRepresentable.shouldEagerlyUpdateSafeArea(_:)(*a1);
}

uint64_t static ListRepresentable.shouldEagerlyUpdateSafeArea(_:)(char *a1)
{
  if ((objc_msgSend(a1, sel_isTracking) & 1) != 0
    || (objc_msgSend(a1, sel_isDecelerating) & 1) != 0
    || (objc_msgSend(a1, sel_isScrollAnimating) & 1) != 0)
  {
    return 1;
  }
  uint64_t v3 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI30UpdateCoalescingCollectionView_safeAreaTransitionState + 8];
  uint64_t ObjectType = swift_getObjectType();
  double v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  swift_unknownObjectRetain();
  LOBYTE(v3) = v5(ObjectType, v3);
  swift_unknownObjectRelease();
  return v3 & 1;
}

{
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t (*v5)(uint64_t, uint64_t);

  if ((objc_msgSend(a1, sel_isTracking) & 1) != 0
    || (objc_msgSend(a1, sel_isDecelerating) & 1) != 0
    || (objc_msgSend(a1, sel_isScrollAnimating) & 1) != 0)
  {
    return 1;
  }
  uint64_t v3 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_safeAreaTransitionState + 8];
  uint64_t ObjectType = swift_getObjectType();
  double v5 = *(uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  swift_unknownObjectRetain();
  LOBYTE(v3) = v5(ObjectType, v3);
  swift_unknownObjectRelease();
  return v3 & 1;
}

void PlatformViewHost._safeAreaInsets.setter(double a1, double a2, double a3, double a4)
{
  double v5 = (double *)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0xA8));
  *double v5 = a1;
  v5[1] = a2;
  char v5[2] = a3;
  _OWORD v5[3] = a4;
}

uint64_t ScrollViewLayoutComputer.updateValue()()
{
  AGGraphGetValue();
  AGGraphGetValue();
  EdgeInsets.adding(_:)();
  if (*(_DWORD *)(v0 + 8) != *MEMORY[0x1E4F4E7A0])
  {
    AGGraphGetValue();
    swift_retain();
  }
  default argument 0 of ViewSizeCache.init(cache:)();
  ViewSizeCache.init(cache:)();
  lazy protocol witness table accessor for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer();
  lazy protocol witness table accessor for type ScrollViewLayoutComputer.Engine and conformance ScrollViewLayoutComputer.Engine();
  lazy protocol witness table accessor for type ScrollViewLayoutComputer.Engine and conformance ScrollViewLayoutComputer.Engine();
  StatefulRule<>.updateIfNotEqual<A>(to:)();
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer;
  if (!lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewLayoutComputer and conformance ScrollViewLayoutComputer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollViewLayoutComputer.Engine and conformance ScrollViewLayoutComputer.Engine()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollViewLayoutComputer.Engine and conformance ScrollViewLayoutComputer.Engine;
  if (!lazy protocol witness table cache variable for type ScrollViewLayoutComputer.Engine and conformance ScrollViewLayoutComputer.Engine)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewLayoutComputer.Engine and conformance ScrollViewLayoutComputer.Engine);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ScrollViewLayoutComputer.Engine and conformance ScrollViewLayoutComputer.Engine;
  if (!lazy protocol witness table cache variable for type ScrollViewLayoutComputer.Engine and conformance ScrollViewLayoutComputer.Engine)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollViewLayoutComputer.Engine and conformance ScrollViewLayoutComputer.Engine);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.isInExpandedSplitView : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isInExpandedSplitView.getter();
  *a1 = result & 1;
  return result;
}

uint64_t EnvironmentValues.isInExpandedSplitView.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ExpandedSplitViewKey>, (uint64_t)&type metadata for ExpandedSplitViewKey, (uint64_t)&protocol witness table for ExpandedSplitViewKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ExpandedSplitViewKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<ExpandedSplitViewKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t protocol witness for Rule.value.getter in conformance InternalModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return InternalModifier.value.getter(*(void *)(a1 + 16), a2);
}

uint64_t protocol witness for Rule.value.getter in conformance BaseModifier<A>.Child@<X0>(uint64_t a1@<X8>)
{
  return BaseModifier.Child.value.getter(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t destroy for LazyState(unsigned __int8 *a1, uint64_t a2)
{
  if (*(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v2 = 16;
  }
  else {
    uint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  }
  unsigned int v3 = a1[v2];
  unsigned int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_13;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_13;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_13;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_13:
        int v7 = (v6 | (v4 << (8 * v2))) + 2;
        unsigned int v3 = v6 + 2;
        if (v2 < 4) {
          unsigned int v3 = v7;
        }
        break;
      default:
        break;
    }
  }
  if (v3 == 1) {
    (*(void (**)(unsigned __int8 *))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(a1);
  }
  else {
    swift_release();
  }

  return swift_release();
}

uint64_t base witness table accessor for AnyViewFactory in ViewLeafView<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ButtonActionModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

ValueMetadata *type metadata accessor for CompositeNavigationSplitViewVisibility()
{
  return &type metadata for CompositeNavigationSplitViewVisibility;
}

ValueMetadata *type metadata accessor for SectionStyleConfiguration.RawContent()
{
  return &type metadata for SectionStyleConfiguration.RawContent;
}

ValueMetadata *type metadata accessor for NavigationSplitParameters()
{
  return &type metadata for NavigationSplitParameters;
}

void *type metadata accessor for DefaultListNavigationLinkStyle()
{
  return &unk_1ED458DC8;
}

ProtocolDescriptor *_toolbarContentProtocolDescriptor()
{
  return &protocol descriptor for ToolbarContent;
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ConfirmationDialog.PreferenceKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static ConfirmationDialog.PreferenceKey.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedLabeledContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedLabeledContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

unint64_t lazy protocol witness table accessor for type ResolvedLabeledContent and conformance ResolvedLabeledContent()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedLabeledContent and conformance ResolvedLabeledContent;
  if (!lazy protocol witness table cache variable for type ResolvedLabeledContent and conformance ResolvedLabeledContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedLabeledContent and conformance ResolvedLabeledContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedLabeledContent and conformance ResolvedLabeledContent;
  if (!lazy protocol witness table cache variable for type ResolvedLabeledContent and conformance ResolvedLabeledContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedLabeledContent and conformance ResolvedLabeledContent);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SPRotation3D(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TextInputDictation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)unint64_t result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)unint64_t result = a2 + 1;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance NavigationSelectionModifier<A>()
{
  return NavigationSelectionModifier.body(content:)();
}

uint64_t destroy for PositionedNavigationDestination.Storage.SeededRequest(uint64_t a1)
{
  outlined consume of NavigationRequest.Action(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));

  return swift_release();
}

double storeEnumTagSinglePayload for AccessibilityLargeContentViewTree(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 216) = 0u;
    *(_OWORD *)(a1 + 200) = 0u;
    *(_OWORD *)(a1 + 184) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 232) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 233) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)(a1 + 160) = 0u;
      *(_OWORD *)(a1 + 176) = 0u;
      *(_OWORD *)(a1 + 128) = 0u;
      *(_OWORD *)(a1 + 144) = 0u;
      *(_OWORD *)(a1 + 96) = 0u;
      *(_OWORD *)(a1 + 112) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 192) = (unint64_t)-a2 << 24;
      *(_OWORD *)(a1 + 200) = 0u;
      *(_OWORD *)(a1 + 216) = 0u;
      *(unsigned char *)(a1 + 232) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 233) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityProxyModifier<A>.GeometryTransformModifier@<D0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void (*a3)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, double *a4@<X8>)
{
  return static AccessibilityProxyModifier.GeometryTransformModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4);
}

uint64_t destroy for RBDrawingView.State(uint64_t a1)
{
  outlined consume of PlatformDrawableContent.Storage(*(void **)a1, *(id *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));

  return swift_release();
}

uint64_t RBDrawingView.draw(inDisplayList:)()
{
  objc_msgSend(v0, sel_bounds);

  return specialized RBDrawingView.draw(in:size:)();
}

uint64_t initializeWithCopy for RBDrawingView.State(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  char v9 = *(unsigned char *)(a2 + 40);
  outlined copy of PlatformDrawableContent.Storage(*(id *)a2, v5, v6, v7, v8, v9);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  return a1;
}

uint64_t specialized RBDrawingView.draw(in:size:)()
{
  uint64_t v2 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI13RBDrawingView__state];
  type metadata accessor for AtomicBox<RBDrawingView.State>();
  swift_retain();
  AtomicBox.access<A>(_:)();
  swift_release();
  AtomicBox.wrappedValue.getter();
  outlined copy of PlatformDrawableContent.Storage(v2, v3, v4, v5, v6, v7);
  outlined consume of PlatformDrawableContent.Storage(v2, v3, v4, v5, v6, v7);
  swift_release();
  objc_msgSend(v0, sel_bounds);
  PlatformDrawableContent.draw(in:size:state:)();
  outlined consume of PlatformDrawableContent.Storage(v2, v3, v4, v5, v6, v7);
  swift_retain();
  AtomicBox.access<A>(_:)();
  swift_release();
  return swift_release();
}

uint64_t RBDrawingView.update(content:required:)(uint64_t a1, char a2)
{
  int v3 = v2;
  uint64_t v4 = *(void **)a1;
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  int v9 = *(unsigned __int8 *)(a1 + 40);
  if ((a2 & 1) == 0 && (v2[OBJC_IVAR____TtC7SwiftUI13RBDrawingView_options + 12] & 4) != 0)
  {
    id v10 = objc_msgSend(v2, sel_layer);
    unsigned int v11 = objc_msgSend(v10, sel_isDrawableAvailable);

    if (!v11) {
      return 0;
    }
  }
  if (v9 != 255)
  {
    uint64_t v23 = *(void *)&v3[OBJC_IVAR____TtC7SwiftUI13RBDrawingView__state];
    outlined copy of PlatformDrawableContent?(v4, v5, v6, v7, v8, v9);
    outlined copy of PlatformDrawableContent?(v4, v5, v6, v7, v8, v9);
    swift_retain();
    type metadata accessor for AtomicBox<RBDrawingView.State>();
    double v12 = (void (*)(char *, void))AtomicBox.wrappedValue.modify();
    double v14 = *(void **)v13;
    double v15 = *(void **)(v13 + 8);
    uint64_t v16 = *(void *)(v13 + 16);
    uint64_t v17 = *(void *)(v13 + 24);
    uint64_t v18 = *(void *)(v13 + 32);
    *(void *)uint64_t v13 = v4;
    *(void *)(v13 + 8) = v5;
    *(void *)(v13 + 16) = v6;
    *(void *)(v13 + 24) = v7;
    *(void *)(v13 + 32) = v8;
    char v19 = *(unsigned char *)(v13 + 40);
    *(unsigned char *)(v13 + 40) = v9;
    outlined consume of PlatformDrawableContent.Storage(v14, v15, v16, v17, v18, v19);
    v12(v22, 0);
    swift_release();
    outlined consume of PlatformDrawableContent?(v4, v5, v6, v7, v8, v9);
  }
  id v20 = objc_msgSend(v3, sel_layer);
  objc_msgSend(v20, sel_setNeedsDisplay);

  return 1;
}

uint64_t protocol witness for PlatformDrawable.update(content:required:) in conformance CGDrawingView(uint64_t a1)
{
  uint64_t v2 = v1;
  int v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  int v8 = *(unsigned __int8 *)(a1 + 40);
  int v9 = (char *)objc_msgSend(v2, sel_layer);
  id v10 = v9;
  if (v8 != 255)
  {
    unsigned int v11 = &v9[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content];
    double v12 = *(void **)&v9[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 8];
    uint64_t v13 = *(void *)&v9[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 16];
    uint64_t v17 = *(void *)&v9[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 24];
    uint64_t v18 = *(void **)&v9[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content];
    uint64_t v16 = *(void *)&v9[OBJC_IVAR____TtC7SwiftUIP33_65A81BD07F0108B0485D2E15DE104A7514CGDrawingLayer_content + 32];
    *(void *)unsigned int v11 = v3;
    *((void *)v11 + 1) = v4;
    *((void *)v11 + 2) = v5;
    *((void *)v11 + 3) = v6;
    *((void *)v11 + 4) = v7;
    char v14 = v11[40];
    v11[40] = v8;
    outlined copy of PlatformDrawableContent.Storage(v3, v4, v5, v6, v7, v8);
    outlined consume of PlatformDrawableContent.Storage(v18, v12, v13, v17, v16, v14);
  }
  objc_msgSend(v10, sel_setNeedsDisplay);

  return 1;
}

void outlined consume of PlatformDrawableContent.Storage(void *a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
      swift_release();
      break;
    case 2:
      swift_bridgeObjectRelease();
      break;
    case 3:
      swift_unknownObjectRelease();
      break;
    case 4:

      break;
    default:
      return;
  }
}

id outlined copy of PlatformDrawableContent.Storage(id result, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  switch(a6)
  {
    case 0:
    case 1:
      double result = (id)swift_retain();
      break;
    case 2:
      double result = (id)swift_bridgeObjectRetain();
      break;
    case 3:
      double result = (id)swift_unknownObjectRetain();
      break;
    case 4:
      double result = result;
      break;
    default:
      return result;
  }
  return result;
}

id outlined copy of PlatformDrawableContent?(id result, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 != -1) {
    return outlined copy of PlatformDrawableContent.Storage(result, a2, a3, a4, a5, a6);
  }
  return result;
}

void type metadata accessor for AtomicBox<RBDrawingView.State>()
{
  if (!lazy cache variable for type metadata for AtomicBox<RBDrawingView.State>)
  {
    unint64_t v0 = type metadata accessor for AtomicBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AtomicBox<RBDrawingView.State>);
    }
  }
}

void outlined consume of PlatformDrawableContent?(void *a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a6 != -1) {
    outlined consume of PlatformDrawableContent.Storage(a1, a2, a3, a4, a5, a6);
  }
}

ValueMetadata *type metadata accessor for GroupedFormStyleContext()
{
  return &type metadata for GroupedFormStyleContext;
}

ValueMetadata *type metadata accessor for AccessibilityLargeContentViewBehavior()
{
  return &type metadata for AccessibilityLargeContentViewBehavior;
}

ValueMetadata *type metadata accessor for NavigationLinkSelectionIdentifier()
{
  return &type metadata for NavigationLinkSelectionIdentifier;
}

ValueMetadata *type metadata accessor for NavigationEventHandlers()
{
  return &type metadata for NavigationEventHandlers;
}

uint64_t partial apply for closure #1 in View.onTest(_:handler:)(uint64_t *a1)
{
  return closure #1 in View.onTest(_:handler:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t *initializeBufferWithCopyOfBuffer for ViewLeafView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  unsigned int v11 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (((v10 + ((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v10)
      + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18
      ? (BOOL v12 = v11 > 7)
      : (BOOL v12 = 1),
        v12))
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + (((v11 | 7) + 16) & ~(unint64_t)(v11 | 7)));
    swift_retain();
  }
  else
  {
    uint64_t v13 = AssociatedTypeWitness;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    char v14 = (void *)(((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    double v15 = (void **)(((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = *v15;
    *char v14 = *v15;
    uint64_t v17 = ((unint64_t)v14 + v10 + 8) & ~v10;
    uint64_t v18 = ((unint64_t)v15 + v10 + 8) & ~v10;
    char v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    id v20 = v16;
    v19(v17, v18, v13);
  }
  return a1;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance SystemScrollViewContainer<A>.InertPaddingLayoutRequired()
{
  return static CoreSheetPresentationModifier._tracksEnvironmentDependencies.getter();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SystemScrollViewContainer<A>.EnvironmentAxesModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for SystemScrollViewContainer<A>.EnvironmentAxesModifier);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance SystemScrollView<A>@<X0>(long long *a1@<X1>, _OWORD *a2@<X8>)
{
  return static SystemScrollView._makeView(view:inputs:)(a1, a2);
}

_UNKNOWN **base witness table accessor for ViewModifier in UpdateViewDestinationRequestProcessor<A, B>()
{
  return &protocol witness table for UpdateViewDestinationRequestProcessor<A, B>;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityRepresentationModifier<A>()
{
  return &protocol witness table for AccessibilityRepresentationModifier<A>;
}

ValueMetadata *type metadata accessor for LabeledContentStyleConfiguration.Label()
{
  return &type metadata for LabeledContentStyleConfiguration.Label;
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityChildrenModifier<A>()
{
  return &protocol witness table for AccessibilityChildrenModifier<A>;
}

void DropPlaceholderListModifier.DropPlaceholderList.traitKeys.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
}

_UNKNOWN **base witness table accessor for ViewModifier in _ContentShapeKindModifier<A>()
{
  return &protocol witness table for _ContentShapeKindModifier<A>;
}

ValueMetadata *type metadata accessor for SectionStyleConfiguration.Header()
{
  return &type metadata for SectionStyleConfiguration.Header;
}

ValueMetadata *type metadata accessor for SectionStyleConfiguration.Footer()
{
  return &type metadata for SectionStyleConfiguration.Footer;
}

void destroy for UserDefaultPropertyBox(uint64_t a1)
{
}

uint64_t type metadata completion function for ListCollectionViewCell()
{
  return swift_initClassMetadata2();
}

_UNKNOWN **base witness table accessor for ViewModifier in LazyContainerModifier()
{
  return &protocol witness table for LazyContainerModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in RelationshipModifier<A>()
{
  return &protocol witness table for RelationshipModifier<A>;
}

_DWORD *initializeWithCopy for TableViewListCore.UpdateBridgedState(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t destroy for DisplayList.AccessibilityUpdater.CacheValue(id *a1)
{
  return swift_bridgeObjectRelease();
}

_UNKNOWN **base witness table accessor for ViewModifier in UpdateViewDestinationViewModifier<A>()
{
  return &protocol witness table for UpdateViewDestinationViewModifier<A>;
}

uint64_t SwiftUIGlue2Class()
{
  return type metadata accessor for SwiftUIGlue2(0);
}

uint64_t storeEnumTagSinglePayload for PPTTestCase(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 44) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = (a2 - 1);
      *(void *)(result + 8) = 1;
      return result;
    }
    *(unsigned char *)(result + 44) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t protocol witness for ViewGraphFeature.modifyViewOutputs(outputs:inputs:graph:) in conformance PlatformItemListViewGraph()
{
  PreferencesOutputs.subscript.getter();
  uint64_t result = AGCreateWeakAttribute();
  *unint64_t v0 = result;
  return result;
}

BOOL specialized static EnvironmentKey<>._valuesEqual(_:_:)(char a1, char a2)
{
  BOOL v3 = a2 != 5 && a2 == a1;
  if (a1 == 5) {
    return a2 == 5;
  }
  else {
    return v3;
  }
}

{
  BOOL v3;

  BOOL v3 = a2 != 4 && a2 == a1;
  if (a1 == 4) {
    return a2 == 4;
  }
  else {
    return v3;
  }
}

uint64_t protocol witness for static AccessibilityPropertiesKey.defaultValue.getter in conformance AccessibilityProperties.ActionsKey@<X0>(void *a1@<X8>)
{
  return protocol witness for static PreferenceKey.defaultValue.getter in conformance FocusableBounds.Key(&one-time initialization token for defaultValue, &static AccessibilityProperties.ActionsKey.defaultValue, a1);
}

uint64_t storeEnumTagSinglePayload for ButtonInteractionPhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 65282;
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v4 = 2;
  }
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFE) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v7 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 254;
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = v7;
        break;
      case 2:
        *(_WORD *)(result + 2) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 2) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *(unsigned char *)uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t destroy for HelpView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ViewResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  return a1;
}

ValueMetadata *type metadata accessor for AnimationCompletionCriteria()
{
  return &type metadata for AnimationCompletionCriteria;
}

ValueMetadata *type metadata accessor for InsetGroupedListStyle()
{
  return &type metadata for InsetGroupedListStyle;
}

uint64_t UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)()
{
  return 0;
}

ValueMetadata *type metadata accessor for ToolbarItemPlacement.Role()
{
  return &type metadata for ToolbarItemPlacement.Role;
}

ValueMetadata *type metadata accessor for InheritedTraitCollectionKey()
{
  return &type metadata for InheritedTraitCollectionKey;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ContentScrollViewPreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t assignWithCopy for ButtonSpringLoadedInteraction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in ButtonStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void *initializeWithCopy for LazyState(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    (*(void (**)(void *, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1, a2);
    char v11 = 1;
  }
  else
  {
    uint64_t v12 = *((void *)a2 + 1);
    *a1 = *(void *)a2;
    a1[1] = v12;
    swift_retain();
    char v11 = 0;
  }
  *((unsigned char *)a1 + v5) = v11;
  *(void *)(((unint64_t)a1 + v5 + 8) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v5 + 8] & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

id ViewLeafView.updatePlatformView(_:)(void *a1, uint64_t a2)
{
  swift_unknownObjectRelease();
  uint64_t v5 = *(void **)(v2 + *(int *)(a2 + 36));
  *a1 = v5;

  return v5;
}

uint64_t getEnumTagSinglePayload for ScrollViewBehavior(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t assignWithCopy for ButtonBehavior(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = a2[7];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = v7;
  swift_retain();
  swift_release();
  uint64_t v8 = a2[8];
  if (!*(void *)(a1 + 64))
  {
    if (v8)
    {
      uint64_t v10 = a2[9];
      *(void *)(a1 + 64) = v8;
      *(void *)(a1 + 72) = v10;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    goto LABEL_8;
  }
  if (!v8)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v9 = a2[9];
  *(void *)(a1 + 64) = v8;
  *(void *)(a1 + 72) = v9;
  swift_retain();
  swift_release();
LABEL_8:
  *(_WORD *)(a1 + 80) = *((_WORD *)a2 + 40);
  *(unsigned char *)(a1 + 82) = *((unsigned char *)a2 + 82);
  *(void *)(a1 + 88) = a2[11];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t static AccessibilityChildBehavior.contain.getter@<X0>(void *a1@<X8>)
{
  return static HoverEffect.automatic.getter(&one-time initialization token for contain, &static AccessibilityChildBehavior.contain, a1);
}

void *assignWithCopy for KeyboardShortcutBindingBehavior(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance ResetTabViewEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  return specialized static ResetTabViewEnvironmentModifier.makeEnvironment(modifier:environment:)(a2);
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance ResetSearchEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  return specialized static ResetSearchEnvironmentModifier.makeEnvironment(modifier:environment:)(a2);
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance ResetFormEnvironmentModifier(uint64_t a1, uint64_t a2)
{
  return specialized static ResetFormEnvironmentModifier.makeEnvironment(modifier:environment:)(a2);
}

BOOL ScrollEventState.isScrolling.getter()
{
  return *v0 != 0;
}

ValueMetadata *type metadata accessor for NavigationSplitViewColumn()
{
  return &type metadata for NavigationSplitViewColumn;
}

Swift::Bool __swiftcall SwiftUIGlue.hasTestHost()()
{
  uint64_t v0 = static _TestApp.host.getter();
  if (v0) {
    swift_unknownObjectRelease();
  }
  return v0 != 0;
}

uint64_t associated type witness table accessor for View.Body : View in Button<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t storeEnumTagSinglePayload for SharingPickerHostModifier.Model(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 128) = 0;
    }
    if (a2) {
      *(void *)(result + 112) = a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for MatchedTransitionSourceSourceMarkingEffect(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 137)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t base witness table accessor for _AttributeBody in AccessibilityBridgedPlatformView<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in PlatformViewIdentifiedViews<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ViewResponderFilter<A>()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for NavigationColumnModifier()
{
  return &type metadata for NavigationColumnModifier;
}

uint64_t getEnumTagSinglePayload for DialogActionContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187BBE0CC);
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance EditModeScopeModifier.TransformModifier()
{
  uint64_t result = AGGraphGetValue();
  if (*(unsigned char *)result == 1)
  {
    uint64_t v2 = *(void *)(result + 8);
    uint64_t v1 = *(void *)(result + 16);
    uint64_t v3 = *(unsigned __int8 *)(result + 24);
    swift_retain();
    swift_retain();
    specialized EnvironmentValues.subscript.setter(v2, v1, v3, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EditModeKey>, (uint64_t)&type metadata for EditModeKey, (uint64_t)&protocol witness table for EditModeKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EditModeKey> and conformance EnvironmentPropertyKey<A>);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t specialized EnvironmentValues.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t a6, unint64_t *a7)
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a4);
  outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(a7, a4);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v7 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance AlwaysOnTimelinesKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static AlwaysOnTimelinesKey.defaultValue;

  return swift_bridgeObjectRetain();
}

ValueMetadata *type metadata accessor for InferredToolbarUserDefaultFeature()
{
  return &type metadata for InferredToolbarUserDefaultFeature;
}

ValueMetadata *type metadata accessor for ToolbarScopeModifier()
{
  return &type metadata for ToolbarScopeModifier;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t partial apply for closure #1 in FocusStoreLocation.findFocusedEntry()(uint64_t a1, BOOL *a2)
{
  return closure #1 in FocusStoreLocation.findFocusedEntry()(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t partial apply for implicit closure #1 in makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ToolbarKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = *((void *)&static ToolbarKey.defaultValue + 1);
  uint64_t v3 = qword_1EB308398;
  uint64_t v4 = unk_1EB3083A0;
  uint64_t v5 = qword_1EB3083A8;
  uint64_t v6 = unk_1EB3083B0;
  char v7 = byte_1EB3083B8;
  uint64_t v8 = qword_1EB3083C0;
  *(void *)a1 = static ToolbarKey.defaultValue;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v3, v4);
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t ToolbarBridge.updateStorage(newStorage:barContext:updateContext:strategy:)(long long *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v36 = *MEMORY[0x1E4FBC8C8] & *v5;
  unsigned __int8 v34 = a2[1];
  unsigned __int8 v35 = *a2;
  unsigned __int8 v32 = a2[3];
  unsigned __int8 v33 = a2[2];
  unsigned __int8 v30 = a2[5];
  unsigned __int8 v31 = a2[4];
  unsigned __int8 v29 = a2[6];
  lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation();
  uint64_t v7 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v47 = v7;
  long long v8 = a1[1];
  long long v43 = *a1;
  long long v44 = v8;
  long long v9 = a1[3];
  long long v45 = a1[2];
  long long v46 = v9;
  outlined retain of ToolbarStorage((uint64_t)a1);
  ToolbarStorage.removeRequestedDefaultItems()();
  *(void *)&v48[0] = specialized static Toolbar.BarLocation.allCases.getter();
  uint64_t v10 = swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v10);
  uint64_t v11 = *(void *)(*(void *)&v48[0] + 16);
  if (v11)
  {
    CGFloat v38 = v5;
    uint64_t v12 = (void *)((char *)v5 + direct field offset for ToolbarBridge.allowedLocations);
    uint64_t v13 = *(void *)&v48[0] + 32;
    swift_beginAccess();
    char v28 = v12;
    do
    {
      outlined init with copy of Toolbar.BarLocation(v13, (uint64_t)v42);
      uint64_t v14 = *v12;
      swift_bridgeObjectRetain();
      char v15 = specialized Set.contains(_:)((uint64_t)v42, v14);
      swift_bridgeObjectRelease();
      if (v15)
      {
        v48[0] = v43;
        v48[1] = v44;
        v48[2] = v45;
        v48[3] = v46;
        v40[0] = v35;
        v40[1] = v34;
        _OWORD v40[2] = v33;
        v40[3] = v32;
        unsigned char v40[4] = v31;
        v40[5] = v30;
        v40[6] = v29;
        outlined retain of ToolbarStorage((uint64_t)v48);
        uint64_t v16 = *(void *)(v36 + 80);
        uint64_t v17 = *(void *)(v36 + 88);
        uint64_t v39 = v16;
        uint64_t v18 = specialized ToolbarBridge.filterAndSortMatchingItems(in:newStorage:context:)((uint64_t)v42, (uint64_t)v48, v40);
        outlined release of ToolbarStorage((uint64_t)v48);
        char v19 = (void *)(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v17 + 88))(v42, v18, v16, v17);
        uint64_t v20 = ToolbarBridge.makeStorage(in:from:strategy:)((uint64_t)v42, v19, a4);
        uint64_t v22 = v21;
        uint64_t v24 = v23;
        swift_bridgeObjectRelease();
        v41[0] = v20;
        v41[1] = v22;
        v41[2] = v24;
        (*(void (**)(void *, unsigned char *, uint64_t, uint64_t, uint64_t))(v17 + 120))(v41, v42, v18, v39, v17);
        swift_bridgeObjectRelease();
        outlined init with copy of Toolbar.BarLocation((uint64_t)v42, (uint64_t)v40);
        uint64_t v12 = v28;
        type metadata accessor for [Toolbar.BarLocation : Toolbar.LocationStorage]();
        Dictionary.subscript.setter();
      }
      outlined destroy of Toolbar.BarLocation((uint64_t)v42);
      v13 += 40;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    uint64_t v7 = v47;
    uint64_t v5 = v38;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  long long v25 = v44;
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v25, *((uint64_t *)&v25 + 1));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  double v26 = (void *)((char *)v5 + direct field offset for ToolbarBridge.storageByLocation);
  swift_beginAccess();
  *double v26 = v7;
  return swift_bridgeObjectRelease();
}

void outlined copy of NavigationState.Base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int16 a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,unint64_t a38,uint64_t a39)
{
  if (a38 >> 62 == 2)
  {
    swift_bridgeObjectRetain();
    outlined copy of NavigationSplitViewState?(a2, a3, a4, a5, a6, a7, a8, a9, a10, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
  }
  else if (a38 >> 62 == 1)
  {
    outlined copy of NavigationListState?(a6, a7);
    outlined copy of Binding<AnyNavigationPath>?(a12, a13);
    outlined copy of NavigationColumnState.ColumnContent(a15, a16, a17, a18, a19, a20, a21, a22);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined copy of ResolvedNavigationDestinations?(a39);
  }
}

void outlined copy of NavigationSplitViewState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 a9, void (*a10)(uint64_t, uint64_t, uint64_t), void (*a11)(uint64_t, uint64_t))
{
  if (a3 != 1)
  {
    a10(a2, a3, a4);
    a11(a5, a6);
    a10(a7, a8, a9);
  }
}

uint64_t outlined retain of ToolbarStorage(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for BaseModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  uint64_t v7 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v8 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  void *v8 = *v7;
  unint64_t v9 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v11 = *(unsigned __int8 *)(v10 + 17);
  swift_retain();
  if (v11 >= 2) {
    unsigned int v11 = *(_DWORD *)v10 + 2;
  }
  if (v11 == 1)
  {
    *(void *)unint64_t v9 = *(void *)v10;
    *(void *)(v9 + 8) = *(void *)(v10 + 8);
    *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
    swift_retain();
    char v12 = 1;
  }
  else
  {
    char v12 = 0;
    *(unsigned char *)unint64_t v9 = *(unsigned char *)v10;
    *(void *)(v9 + 8) = *(void *)(v10 + 8);
  }
  swift_retain();
  *(unsigned char *)(v9 + 17) = v12;
  unint64_t v13 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(unsigned char *)(v13 + 9) = *(unsigned char *)(v14 + 9);
  unint64_t v15 = (((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 10;
  unint64_t v16 = (a1 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (a2 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v18 = *(_OWORD *)v17;
  *(void *)(v16 + 16) = *(void *)(v17 + 16);
  *(_OWORD *)unint64_t v16 = v18;
  char v19 = (_OWORD *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (long long *)((v17 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v21 = *v20;
  long long v22 = v20[2];
  v19[1] = v20[1];
  _OWORD v19[2] = v22;
  *char v19 = v21;
  unint64_t v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = ((unint64_t)v20 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = *(void *)(v24 + 8);
  if (v25 >= 0xFFFFFFFF) {
    LODWORD(v25) = -1;
  }
  if ((int)v25 - 1 < 0)
  {
    swift_weakCopyInit();
    *(void *)(v23 + 8) = *(void *)(v24 + 8);
    *(void *)(v23 + 16) = *(void *)(v24 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v26 = *(_OWORD *)v24;
    *(void *)(v23 + 16) = *(void *)(v24 + 16);
    *(_OWORD *)unint64_t v23 = v26;
  }
  *(unsigned char *)(v23 + 24) = *(unsigned char *)(v24 + 24);
  unint64_t v27 = ((unint64_t)v19 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = ((unint64_t)v20 + 87) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v27 = *(unsigned char *)v28;
  *(void *)(v27 + 8) = *(void *)(v28 + 8);
  unint64_t v29 = (v27 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (v28 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v31 = *(void *)v30;
  uint64_t v32 = *(void *)(v30 + 8);
  char v33 = *(unsigned char *)(v30 + 17);
  uint64_t v34 = *(unsigned __int8 *)(v30 + 16);
  swift_retain();
  outlined copy of Environment<Binding<EditMode>?>.Content(v31, v32, v34, v33);
  *(void *)unint64_t v29 = v31;
  *(void *)(v29 + 8) = v32;
  *(unsigned char *)(v29 + 16) = v34;
  *(unsigned char *)(v29 + 17) = v33;
  unint64_t v35 = (v29 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v30 + 25) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = *(void *)v36;
  LOBYTE(v32) = *(unsigned char *)(v36 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v36, v32);
  *(void *)unint64_t v35 = v37;
  *(unsigned char *)(v35 + 8) = v32;
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  long long *v19;
  long long v20;
  long long v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  long long v26;
  unint64_t v27;
  unint64_t v28;

  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = v6 + a1;
  long long v8 = v6 + a2;
  unint64_t v9 = (v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  unsigned int v11 = (void *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8);
  char v12 = (void *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v11 = *v12;
  unint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  unint64_t v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = *(void *)(v16 + 16);
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
  *(void *)(v15 + 16) = v17;
  long long v18 = (_OWORD *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  char v19 = (long long *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = v19[2];
  long long v21 = *v19;
  v18[1] = v19[1];
  _OWORD v18[2] = v20;
  *long long v18 = v21;
  long long v22 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = *(void *)(v23 + 8);
  if (v24 >= 0xFFFFFFFF) {
    LODWORD(v24) = -1;
  }
  unint64_t v25 = v24 - 1;
  swift_retain();
  swift_retain();
  if (v25 < 0)
  {
    swift_weakCopyInit();
    *(void *)(v22 + 8) = *(void *)(v23 + 8);
    *(void *)(v22 + 16) = *(void *)(v23 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v26 = *(_OWORD *)v23;
    *(void *)(v22 + 16) = *(void *)(v23 + 16);
    *(_OWORD *)long long v22 = v26;
  }
  unint64_t v27 = (v22 + 27) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = (v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  return a1;
}

uint64_t outlined copy of Environment<Binding<EditMode>?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a4) {
    return outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
  }
  return swift_retain();
}

uint64_t outlined copy of Binding<NavigationSplitViewColumn>?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined release of ToolbarStorage(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  swift_bridgeObjectRelease();
  outlined consume of Binding<NavigationSplitViewColumn>?(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t protocol witness for ToolbarStrategy.makeEntries(in:from:) in conformance UIKitToolbarStrategy(uint64_t a1, uint64_t a2)
{
  return specialized ToolbarStrategy.makeEntries(in:from:)(a1, a2);
}

uint64_t specialized ToolbarStrategy.makeEntries(in:from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ToolbarStorage.Entry(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  char v12 = (char *)v23 - v11;
  uint64_t v13 = MEMORY[0x1E4FBC860];
  uint64_t v25 = MEMORY[0x1E4FBC860];
  uint64_t v14 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v14)
  {
    unint64_t v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v16 = a2;
    uint64_t v17 = *(void *)(v7 + 72);
    v23[1] = v16;
    unint64_t v24 = v15;
    uint64_t v18 = v16 + v15;
    uint64_t v19 = MEMORY[0x1E4FBC860];
    do
    {
      outlined init with copy of ToolbarStorage.Entry.Kind(v18, (uint64_t)v12, type metadata accessor for ToolbarStorage.Entry);
      outlined init with copy of ToolbarStorage.Entry.Kind((uint64_t)v12, (uint64_t)v5, type metadata accessor for ToolbarStorage.Entry.Kind);
      if (swift_getEnumCaseMultiPayload() > 1)
      {
        outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v12, type metadata accessor for ToolbarStorage.Entry);
      }
      else
      {
        outlined destroy of ToolbarStorage.NavigationProperties((uint64_t)v5, type metadata accessor for ToolbarStorage.Entry.Kind);
        outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v12, (uint64_t)v9, type metadata accessor for ToolbarStorage.Entry);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v19 + 16) + 1, 1);
        }
        uint64_t v19 = v25;
        unint64_t v21 = *(void *)(v25 + 16);
        unint64_t v20 = *(void *)(v25 + 24);
        if (v21 >= v20 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
          uint64_t v19 = v25;
        }
        *(void *)(v19 + 16) = v21 + 1;
        outlined init with take of ToolbarStorage.NavigationProperties((uint64_t)v9, v19 + v24 + v21 * v17, type metadata accessor for ToolbarStorage.Entry);
      }
      v18 += v17;
      --v14;
    }
    while (v14);
    uint64_t v13 = v25;
  }
  swift_bridgeObjectRelease();
  return v13;
}

void type metadata accessor for ToolbarStorage.SearchItem?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI14ToolbarStorageV10SearchItemVSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for ToolbarStorage.Entry(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ToolbarStorage.Entry);
}

uint64_t type metadata accessor for ToolbarStorage.Entry.Kind(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ToolbarStorage.Entry.Kind);
}

uint64_t type metadata accessor for ToolbarStorage.Item(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for ToolbarStorage.Item);
}

uint64_t type metadata accessor for ToolbarStorage.GroupItem(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ToolbarStorage.GroupItem);
}

void type metadata accessor for (ToolbarStorage.Entry, Int)()
{
  if (!lazy cache variable for type metadata for (ToolbarStorage.Entry, Int))
  {
    type metadata accessor for ToolbarStorage.Entry(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ToolbarStorage.Entry, Int));
    }
  }
}

uint64_t specialized _ArrayProtocol.filter(_:)(uint64_t a1)
{
  uint64_t v53 = type metadata accessor for ToolbarStorage.GroupItem(0);
  uint64_t v2 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v47 = (uint64_t)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ToolbarStorage.GroupItem?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v52 = (uint64_t)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v6);
  unint64_t v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  __n128 v57 = (char *)&v46 - v10;
  type metadata accessor for ToolbarStorage.Item?(0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v56 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ToolbarStorage.Entry(0) - 8;
  MEMORY[0x1F4188790](v13);
  unint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v58 = (uint64_t)&v46 - v17;
  MEMORY[0x1F4188790](v18);
  unint64_t v21 = (char *)&v46 - v20;
  uint64_t result = MEMORY[0x1E4FBC860];
  uint64_t v59 = MEMORY[0x1E4FBC860];
  uint64_t v23 = *(void *)(a1 + 16);
  if (v23)
  {
    uint64_t v24 = *(void *)(v19 + 72);
    unint64_t v54 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
    uint64_t v55 = v6;
    uint64_t v25 = a1 + v54;
    BOOL v48 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
    double v49 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
    uint64_t v26 = (uint64_t)v57;
    uint64_t v50 = v24;
    BOOL v51 = v8;
    while (1)
    {
      _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0(v25, (uint64_t)v21, type metadata accessor for ToolbarStorage.Entry);
      _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0((uint64_t)v21, v26, type metadata accessor for ToolbarStorage.Entry.Kind);
      if (!swift_getEnumCaseMultiPayload()) {
        break;
      }
      unint64_t v27 = v15;
      outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v26, type metadata accessor for ToolbarStorage.Entry.Kind);
      uint64_t v28 = type metadata accessor for ToolbarStorage.Item(0);
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v30 = v56;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 56))(v56, 1, 1, v28);
      outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v30, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.Item?);
      uint64_t v31 = v58;
      _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0((uint64_t)v21, v58, type metadata accessor for ToolbarStorage.Entry);
      uint64_t v32 = v31;
      uint64_t v33 = (uint64_t)v51;
      _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0(v32, (uint64_t)v51, type metadata accessor for ToolbarStorage.Entry.Kind);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v34 = v47;
        _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0(v33, v47, type metadata accessor for ToolbarStorage.GroupItem);
        uint64_t result = v34;
        unint64_t v35 = *(void **)(v34 + 72);
        unint64_t v15 = v27;
        uint64_t v24 = v50;
        if (v35[2] == 1)
        {
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v35 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v35);
          }
          uint64_t result = v47;
          if (!v35[2])
          {
            __break(1u);
            return result;
          }
          *((unsigned char *)v35
          + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))
          + *(int *)(v28 + 60)) = 1;
          *(void *)(result + 72) = v35;
        }
        uint64_t v36 = v52;
        _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0(result, v52, type metadata accessor for ToolbarStorage.GroupItem);
        uint64_t v37 = 0;
      }
      else
      {
        outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v33, type metadata accessor for ToolbarStorage.Entry.Kind);
        uint64_t v37 = 1;
        uint64_t v36 = v52;
        unint64_t v15 = v27;
        uint64_t v24 = v50;
      }
      uint64_t v42 = v53;
      (*v49)(v36, v37, 1, v53);
      outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v58, type metadata accessor for ToolbarStorage.Entry);
      LODWORD(v42) = (*v48)(v36, 1, v42);
      outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v36, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.GroupItem?);
      if (v42 != 1) {
        goto LABEL_16;
      }
      outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v21, type metadata accessor for ToolbarStorage.Entry);
LABEL_4:
      v25 += v24;
      --v23;
      uint64_t v26 = (uint64_t)v57;
      if (!v23) {
        return v59;
      }
    }
    uint64_t v38 = v26;
    uint64_t v39 = v56;
    _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0(v38, v56, type metadata accessor for ToolbarStorage.Item);
    uint64_t v40 = type metadata accessor for ToolbarStorage.Item(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 0, 1, v40);
    outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v39, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.Item?);
    uint64_t v41 = v58;
    _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0((uint64_t)v21, v58, type metadata accessor for ToolbarStorage.Entry);
    outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(v41, type metadata accessor for ToolbarStorage.Entry);
LABEL_16:
    _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v21, (uint64_t)v15, type metadata accessor for ToolbarStorage.Entry);
    uint64_t v43 = v59;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v43 + 16) + 1, 1);
      uint64_t v43 = v59;
    }
    unint64_t v45 = *(void *)(v43 + 16);
    unint64_t v44 = *(void *)(v43 + 24);
    if (v45 >= v44 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
      uint64_t v43 = v59;
    }
    *(void *)(v43 + 16) = v45 + 1;
    _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v15, v43 + v54 + v45 * v24, type metadata accessor for ToolbarStorage.Entry);
    goto LABEL_4;
  }
  return result;
}

{
  return specialized _ArrayProtocol.filter(_:)(a1);
}

void type metadata accessor for ToolbarStorage.Item?(uint64_t a1)
{
}

void type metadata accessor for ToolbarStorage.GroupItem?(uint64_t a1)
{
}

uint64_t outlined init with copy of ToolbarStorage.Entry.Kind(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI14ToolbarStorageV5EntryV4KindOWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of ToolbarStorage.Entry(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = a5;
  uint64_t v9 = *MEMORY[0x1E4FBC8C8] & *a2;
  type metadata accessor for PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(0);
  uint64_t v11 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PreferenceValues.Value<ToolbarStorage.SearchItem?>(0);
  uint64_t v15 = v14;
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a2;
  uint64_t v37 = a4;
  swift_beginAccess();
  specialized VersionSeedTracker.didChange(_:action:)(a3, (void (*)(void *))partial apply for closure #1 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:));
  swift_endAccess();
  uint64_t result = ToolbarBridge.allowsUpdates.getter();
  if (result)
  {
    uint64_t v33 = v11;
    uint64_t v34 = v9;
    uint64_t v19 = v35;
    uint64_t v20 = (_DWORD *)((char *)a2 + direct field offset for ToolbarBridge.searchTracker);
    swift_beginAccess();
    uint64_t v38 = a3;
    PreferenceValues.subscript.getter();
    int v21 = *(_DWORD *)&v17[*(int *)(v15 + 28)];
    if (*v20 == -1 || (v21 != -1 ? (BOOL v22 = *v20 == v21) : (BOOL v22 = 0), !v22))
    {
      *uint64_t v20 = v21;
      closure #2 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)((uint64_t)v17, a2, a1, (uint64_t *)a4);
    }
    outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for PreferenceValues.Value<ToolbarStorage.SearchItem?>);
    uint64_t v23 = swift_endAccess();
    MEMORY[0x1F4188790](v23);
    *(&v32 - 6) = (uint64_t)a2;
    *(&v32 - 5) = a1;
    *(&v32 - 4) = a3;
    *(&v32 - 3) = v19;
    *(&v32 - 2) = a4;
    swift_beginAccess();
    specialized VersionSeedTracker.didChange(_:action:)(a3, (void (*)(void *))partial apply for closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:));
    swift_endAccess();
    uint64_t v24 = (_DWORD *)((char *)a2 + direct field offset for ToolbarBridge.titleTracker);
    swift_beginAccess();
    uint64_t v38 = a3;
    PreferenceValues.subscript.getter();
    int v25 = *(_DWORD *)&v13[*(int *)(v33 + 28)];
    if (*v24 == -1 || v25 == -1 || *v24 != v25)
    {
      *uint64_t v24 = v25;
      closure #4 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)((uint64_t)v13, a2, a4);
    }
    outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PreferenceValues.Value<ToolbarStorage.NavigationProperties?>);
    swift_endAccess();
    uint64_t v27 = *(void *)(v34 + 80);
    uint64_t v26 = *(void *)(v34 + 88);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t))(v26 + 128);
    if (*(unsigned char *)(a4 + 9)) {
      int v29 = 256;
    }
    else {
      int v29 = 0;
    }
    uint64_t v30 = v29 | *(unsigned __int8 *)(a4 + 8) | (*(unsigned __int8 *)(a4 + 10) << 16);
    uint64_t v31 = swift_bridgeObjectRetain();
    v28(v31, v30, v39, v27, v26);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined destroy of PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for PreferenceValues.Value<ToolbarStorage.NavigationProperties?>(uint64_t a1)
{
}

void type metadata accessor for PreferenceValues.Value<ToolbarStorage.SearchItem?>(uint64_t a1)
{
}

uint64_t protocol witness for ToolbarStrategy.willReturnUpdates(_:preferences:) in conformance UIKitToolbarStrategy()
{
  return specialized ToolbarStrategy.withUpdate<A>(_:)((void (*)(void))partial apply for closure #1 in UIKitToolbarStrategy.willReturnUpdates(_:preferences:));
}

uint64_t specialized VersionSeedTracker.didChange(_:action:)(uint64_t a1, void (*a2)(void *))
{
  v7[0] = a1;
  PreferenceValues.subscript.getter();
  if (*v2 != -1 && v8 != -1 && *v2 == v8) {
    return swift_bridgeObjectRelease();
  }
  *uint64_t v2 = v8;
  v7[0] = v7[1];
  swift_bridgeObjectRetain();
  a2(v7);
  return swift_bridgeObjectRelease_n();
}

{
  _DWORD *v2;
  uint64_t v6;
  uint64_t v7;
  void v9[6];
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  int v20;

  v9[0] = a1;
  PreferenceValues.subscript.getter();
  if (*v2 != -1 && v20 != -1 && *v2 == v20)
  {
    swift_bridgeObjectRelease();
    outlined consume of Binding<NavigationSplitViewColumn>?(v14, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    *uint64_t v2 = v20;
    uint64_t v6 = v14;
    uint64_t v7 = v15;
    v9[0] = v12;
    v9[1] = v13;
    void v9[2] = v14;
    void v9[3] = v15;
    void v9[4] = v16;
    v9[5] = v17;
    uint64_t v10 = v18;
    uint64_t v11 = v19;
    swift_bridgeObjectRetain();
    outlined copy of Binding<NavigationSplitViewColumn>?(v14, v15);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2(v9);
    swift_bridgeObjectRelease();
    outlined consume of Binding<NavigationSplitViewColumn>?(v6, v7);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of Binding<NavigationSplitViewColumn>?(v6, v7);
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with take of ToolbarItemPlacement.Role(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 __swift_memcpy41_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

char *initializeWithTake for ToolbarStorage.Entry(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    long long v19 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v19;
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    a1[57] = a2[57];
    *((_WORD *)a1 + 29) = *((_WORD *)a2 + 29);
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    uint64_t v20 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
    int v21 = &a1[v20];
    BOOL v22 = &a2[v20];
    uint64_t v23 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        long long v41 = *((_OWORD *)v22 + 1);
        *(_OWORD *)int v21 = *(_OWORD *)v22;
        *((_OWORD *)v21 + 1) = v41;
        v21[32] = v22[32];
        uint64_t v42 = *((void *)v22 + 6);
        *((void *)v21 + 5) = *((void *)v22 + 5);
        *((void *)v21 + 6) = v42;
        v21[56] = v22[56];
        long long v43 = *((_OWORD *)v22 + 13);
        *((_OWORD *)v21 + 12) = *((_OWORD *)v22 + 12);
        *((_OWORD *)v21 + 13) = v43;
        *((_OWORD *)v21 + 14) = *((_OWORD *)v22 + 14);
        *(_DWORD *)(v21 + 239) = *(_DWORD *)(v22 + 239);
        long long v44 = *((_OWORD *)v22 + 9);
        *((_OWORD *)v21 + 8) = *((_OWORD *)v22 + 8);
        *((_OWORD *)v21 + 9) = v44;
        long long v45 = *((_OWORD *)v22 + 11);
        *((_OWORD *)v21 + 10) = *((_OWORD *)v22 + 10);
        *((_OWORD *)v21 + 11) = v45;
        long long v46 = *((_OWORD *)v22 + 5);
        *((_OWORD *)v21 + 4) = *((_OWORD *)v22 + 4);
        *((_OWORD *)v21 + 5) = v46;
        long long v47 = *((_OWORD *)v22 + 7);
        *((_OWORD *)v21 + 6) = *((_OWORD *)v22 + 6);
        *((_OWORD *)v21 + 7) = v47;
        *(_OWORD *)(v21 + 248) = *(_OWORD *)(v22 + 248);
        long long v48 = *(_OWORD *)(v22 + 280);
        *(_OWORD *)(v21 + 264) = *(_OWORD *)(v22 + 264);
        *(_OWORD *)(v21 + 280) = v48;
        long long v49 = *(_OWORD *)(v22 + 376);
        *(_OWORD *)(v21 + 360) = *(_OWORD *)(v22 + 360);
        *(_OWORD *)(v21 + 376) = v49;
        *((void *)v21 + 49) = *((void *)v22 + 49);
        long long v50 = *(_OWORD *)(v22 + 312);
        *(_OWORD *)(v21 + 296) = *(_OWORD *)(v22 + 296);
        *(_OWORD *)(v21 + 312) = v50;
        long long v51 = *(_OWORD *)(v22 + 344);
        *(_OWORD *)(v21 + 328) = *(_OWORD *)(v22 + 328);
        *(_OWORD *)(v21 + 344) = v51;
        long long v52 = *((_OWORD *)v22 + 28);
        *((_OWORD *)v21 + 27) = *((_OWORD *)v22 + 27);
        *((_OWORD *)v21 + 28) = v52;
        v21[464] = v22[464];
        long long v53 = *((_OWORD *)v22 + 26);
        *((_OWORD *)v21 + 25) = *((_OWORD *)v22 + 25);
        *((_OWORD *)v21 + 26) = v53;
        *(_OWORD *)(v21 + 472) = *(_OWORD *)(v22 + 472);
        *(_OWORD *)(v21 + 481) = *(_OWORD *)(v22 + 481);
        uint64_t v54 = *((void *)v22 + 63);
        if (v54)
        {
          uint64_t v55 = *((void *)v22 + 64);
          *((void *)v21 + 63) = v54;
          *((void *)v21 + 64) = v55;
        }
        else
        {
          *(_OWORD *)(v21 + 504) = *(_OWORD *)(v22 + 504);
        }
        *((_WORD *)v21 + 260) = *((_WORD *)v22 + 260);
        *((_OWORD *)v21 + 33) = *((_OWORD *)v22 + 33);
        *((void *)v21 + 68) = *((void *)v22 + 68);
        *((void *)v21 + 71) = *((void *)v22 + 71);
        *(_OWORD *)(v21 + 552) = *(_OWORD *)(v22 + 552);
        *((void *)v21 + 72) = *((void *)v22 + 72);
        *(_OWORD *)(v21 + 584) = *(_OWORD *)(v22 + 584);
        *(_OWORD *)(v21 + 600) = *(_OWORD *)(v22 + 600);
        *((void *)v21 + 77) = *((void *)v22 + 77);
        *((void *)v21 + 78) = *((void *)v22 + 78);
        v21[632] = v22[632];
        *(_WORD *)(v21 + 633) = *(_WORD *)(v22 + 633);
        uint64_t v74 = type metadata accessor for PlatformItemList.Item();
        uint64_t v75 = *(int *)(v74 + 112);
        double v100 = (int *)v74;
        __dsta = &v21[v75];
        BOOL v76 = &v22[v75];
        uint64_t v77 = type metadata accessor for CommandOperation();
        uint64_t v78 = *(void *)(v77 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v78 + 48))(v76, 1, v77))
        {
          _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
          memcpy(__dsta, v76, *(void *)(*(void *)(v79 - 8) + 64));
        }
        else
        {
          double v96 = v76;
          uint64_t v98 = v78;
          char *__dsta = *v76;
          uint64_t v80 = *(int *)(v77 + 20);
          double v81 = v76;
          double v82 = &__dsta[v80];
          double v83 = &v81[v80];
          long long v84 = *(_OWORD *)&v81[v80 + 16];
          *(_OWORD *)double v82 = *(_OWORD *)&v81[v80];
          *((_OWORD *)v82 + 1) = v84;
          uint64_t v85 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          double v94 = &v82[v85];
          double v86 = &v83[v85];
          uint64_t v87 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v87 - 8) + 32))(v94, v86, v87);
          uint64_t v88 = *(int *)(v77 + 24);
          uint64_t v89 = &__dsta[v88];
          double v90 = (uint64_t *)&v96[v88];
          uint64_t v91 = *v90;
          if (*v90)
          {
            uint64_t v92 = v90[1];
            *(void *)uint64_t v89 = v91;
            *((void *)v89 + 1) = v92;
          }
          else
          {
            *(_OWORD *)uint64_t v89 = *(_OWORD *)v90;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(__dsta, 0, 1, v77);
        }
        v21[v100[29]] = v22[v100[29]];
        v21[v100[30]] = v22[v100[30]];
        v21[v100[31]] = v22[v100[31]];
        v21[v100[32]] = v22[v100[32]];
        *(void *)&v21[v100[33]] = *(void *)&v22[v100[33]];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v21, v22, *(void *)(v24 + 64));
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    goto LABEL_32;
  }
  if (!EnumCaseMultiPayload)
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v7;
    long long v8 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v8;
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
    *((void *)a1 + 12) = *((void *)a2 + 12);
    long long v9 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v9;
    long long v10 = *(_OWORD *)(a2 + 136);
    long long v11 = *(_OWORD *)(a2 + 152);
    long long v12 = *(_OWORD *)(a2 + 168);
    *((void *)a1 + 23) = *((void *)a2 + 23);
    *(_OWORD *)(a1 + 168) = v12;
    *(_OWORD *)(a1 + 152) = v11;
    *(_OWORD *)(a1 + 136) = v10;
    uint64_t v13 = (int *)type metadata accessor for ToolbarStorage.Item(0);
    uint64_t v14 = v13[12];
    uint64_t v15 = &a1[v14];
    uint64_t v16 = &a2[v14];
    uint64_t v17 = (int *)type metadata accessor for PlatformItemList.Item();
    __dst = (void (**)(char *, void, uint64_t, int *))*((void *)v17 - 1);
    if (((unsigned int (*)(char *, uint64_t, int *))__dst[6])(v16, 1, v17))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      long long v26 = *((_OWORD *)v16 + 1);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v26;
      v15[32] = v16[32];
      uint64_t v27 = *((void *)v16 + 6);
      *((void *)v15 + 5) = *((void *)v16 + 5);
      *((void *)v15 + 6) = v27;
      v15[56] = v16[56];
      long long v28 = *((_OWORD *)v16 + 13);
      *((_OWORD *)v15 + 12) = *((_OWORD *)v16 + 12);
      *((_OWORD *)v15 + 13) = v28;
      *((_OWORD *)v15 + 14) = *((_OWORD *)v16 + 14);
      *(_DWORD *)(v15 + 239) = *(_DWORD *)(v16 + 239);
      long long v29 = *((_OWORD *)v16 + 9);
      *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
      *((_OWORD *)v15 + 9) = v29;
      long long v30 = *((_OWORD *)v16 + 11);
      *((_OWORD *)v15 + 10) = *((_OWORD *)v16 + 10);
      *((_OWORD *)v15 + 11) = v30;
      long long v31 = *((_OWORD *)v16 + 5);
      *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
      *((_OWORD *)v15 + 5) = v31;
      long long v32 = *((_OWORD *)v16 + 7);
      *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
      *((_OWORD *)v15 + 7) = v32;
      *(_OWORD *)(v15 + 248) = *(_OWORD *)(v16 + 248);
      long long v33 = *(_OWORD *)(v16 + 280);
      *(_OWORD *)(v15 + 264) = *(_OWORD *)(v16 + 264);
      *(_OWORD *)(v15 + 280) = v33;
      long long v34 = *(_OWORD *)(v16 + 376);
      *(_OWORD *)(v15 + 360) = *(_OWORD *)(v16 + 360);
      *(_OWORD *)(v15 + 376) = v34;
      *((void *)v15 + 49) = *((void *)v16 + 49);
      long long v35 = *(_OWORD *)(v16 + 312);
      *(_OWORD *)(v15 + 296) = *(_OWORD *)(v16 + 296);
      *(_OWORD *)(v15 + 312) = v35;
      long long v36 = *(_OWORD *)(v16 + 344);
      *(_OWORD *)(v15 + 328) = *(_OWORD *)(v16 + 328);
      *(_OWORD *)(v15 + 344) = v36;
      long long v37 = *((_OWORD *)v16 + 28);
      *((_OWORD *)v15 + 27) = *((_OWORD *)v16 + 27);
      *((_OWORD *)v15 + 28) = v37;
      v15[464] = v16[464];
      long long v38 = *((_OWORD *)v16 + 26);
      *((_OWORD *)v15 + 25) = *((_OWORD *)v16 + 25);
      *((_OWORD *)v15 + 26) = v38;
      *(_OWORD *)(v15 + 472) = *(_OWORD *)(v16 + 472);
      *(_OWORD *)(v15 + 481) = *(_OWORD *)(v16 + 481);
      uint64_t v39 = *((void *)v16 + 63);
      if (v39)
      {
        uint64_t v40 = *((void *)v16 + 64);
        *((void *)v15 + 63) = v39;
        *((void *)v15 + 64) = v40;
      }
      else
      {
        *(_OWORD *)(v15 + 504) = *(_OWORD *)(v16 + 504);
      }
      *((_WORD *)v15 + 260) = *((_WORD *)v16 + 260);
      *((_OWORD *)v15 + 33) = *((_OWORD *)v16 + 33);
      *((void *)v15 + 68) = *((void *)v16 + 68);
      *((void *)v15 + 71) = *((void *)v16 + 71);
      *(_OWORD *)(v15 + 552) = *(_OWORD *)(v16 + 552);
      *((void *)v15 + 72) = *((void *)v16 + 72);
      *(_OWORD *)(v15 + 584) = *(_OWORD *)(v16 + 584);
      *(_OWORD *)(v15 + 600) = *(_OWORD *)(v16 + 600);
      *((void *)v15 + 77) = *((void *)v16 + 77);
      *((void *)v15 + 78) = *((void *)v16 + 78);
      v15[632] = v16[632];
      *(_WORD *)(v15 + 633) = *(_WORD *)(v16 + 633);
      uint64_t v56 = v17[28];
      double v99 = &v15[v56];
      __n128 v57 = &v16[v56];
      uint64_t v58 = type metadata accessor for CommandOperation();
      uint64_t v59 = *(void *)(v58 - 8);
      double v97 = v57;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
        memcpy(v99, v57, *(void *)(*(void *)(v60 - 8) + 64));
      }
      else
      {
        uint64_t v95 = v59;
        char *v99 = *v57;
        uint64_t v61 = *(int *)(v58 + 20);
        BOOL v62 = &v99[v61];
        __int16 v63 = &v57[v61];
        long long v64 = *(_OWORD *)&v97[v61 + 16];
        *(_OWORD *)BOOL v62 = *(_OWORD *)&v97[v61];
        *((_OWORD *)v62 + 1) = v64;
        uint64_t v65 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        CGFloat v66 = &v62[v65];
        double v67 = &v63[v65];
        uint64_t v68 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 32))(v66, v67, v68);
        uint64_t v69 = *(int *)(v58 + 24);
        CGFloat v70 = &v99[v69];
        double v71 = (uint64_t *)&v97[v69];
        uint64_t v72 = *v71;
        if (*v71)
        {
          uint64_t v73 = v71[1];
          *(void *)CGFloat v70 = v72;
          *((void *)v70 + 1) = v73;
        }
        else
        {
          *(_OWORD *)CGFloat v70 = *(_OWORD *)v71;
        }
        (*(void (**)(void))(v95 + 56))();
      }
      v15[v17[29]] = v16[v17[29]];
      v15[v17[30]] = v16[v17[30]];
      v15[v17[31]] = v16[v17[31]];
      v15[v17[32]] = v16[v17[32]];
      *(void *)&v15[v17[33]] = *(void *)&v16[v17[33]];
      __dst[7](v15, 0, 1, v17);
    }
    swift_weakTakeInit();
    a1[v13[14]] = a2[v13[14]];
    a1[v13[15]] = a2[v13[15]];
LABEL_32:
    swift_storeEnumTagMultiPayload();
    goto LABEL_33;
  }
  memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
LABEL_33:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

unint64_t lazy protocol witness table accessor for type Toolbar.BarLocation and conformance Toolbar.BarLocation()
{
  unint64_t result = lazy protocol witness table cache variable for type Toolbar.BarLocation and conformance Toolbar.BarLocation;
  if (!lazy protocol witness table cache variable for type Toolbar.BarLocation and conformance Toolbar.BarLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Toolbar.BarLocation and conformance Toolbar.BarLocation;
  if (!lazy protocol witness table cache variable for type Toolbar.BarLocation and conformance Toolbar.BarLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Toolbar.BarLocation and conformance Toolbar.BarLocation);
  }
  return result;
}

char *specialized static Toolbar.BarLocation.allCases.getter()
{
  long long v8 = (char *)MEMORY[0x1E4FBC860];
  type metadata accessor for [Toolbar.BarLocation](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Toolbar.BarLocation>, (uint64_t)&type metadata for Toolbar.BarLocation, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_188357320;
  *(_OWORD *)(inited + 32) = 0u;
  *(_OWORD *)(inited + 48) = 0u;
  *(_OWORD *)(inited + 64) = 0u;
  *(_OWORD *)(inited + 80) = 0u;
  *(void *)(inited + 96) = 2;
  *(_OWORD *)(inited + 104) = 0u;
  *(_OWORD *)(inited + 120) = 0u;
  *(_OWORD *)(inited + 136) = xmmword_188382680;
  specialized Array.append<A>(contentsOf:)(inited);
  uint64_t v1 = swift_initStackObject();
  *(_OWORD *)(v1 + 16) = xmmword_1883CCC30;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 1;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(void *)(v1 + 96) = 5;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_OWORD *)(v1 + 120) = 0u;
  *(void *)(v1 + 136) = 10;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(void *)(v1 + 176) = 11;
  *(_OWORD *)(v1 + 184) = 0u;
  *(_OWORD *)(v1 + 200) = 0u;
  *(_OWORD *)(v1 + 216) = xmmword_18838A9F0;
  specialized Array.append<A>(contentsOf:)(v1);
  memset(v6, 0, sizeof(v6));
  long long v7 = xmmword_188395C10;
  uint64_t v2 = v8;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
  }
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  outlined init with take of Toolbar.BarLocation((uint64_t)v6, (uint64_t)&v2[40 * v4 + 32]);
  return v2;
}

void type metadata accessor for [Toolbar.BarLocation](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.Item(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187DCC808);
}

Swift::Void __swiftcall ToolbarStorage.removeRequestedDefaultItems()()
{
  int64_t v1 = 0;
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v2 + 56);
  uint64_t v3 = v2 + 56;
  uint64_t v4 = v5;
  uint64_t v6 = 1 << *(unsigned char *)(v3 - 24);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  uint64_t v8 = v7 & v4;
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (!v8)
    {
      int64_t v10 = v1 + 1;
      if (__OFADD__(v1, 1))
      {
        __break(1u);
        goto LABEL_22;
      }
      if (v10 >= v9) {
        return;
      }
      uint64_t v8 = *(void *)(v3 + 8 * v10);
      ++v1;
      if (!v8)
      {
        int64_t v1 = v10 + 1;
        if (v10 + 1 >= v9) {
          return;
        }
        uint64_t v8 = *(void *)(v3 + 8 * v1);
        if (!v8)
        {
          int64_t v1 = v10 + 2;
          if (v10 + 2 >= v9) {
            return;
          }
          uint64_t v8 = *(void *)(v3 + 8 * v1);
          if (!v8) {
            break;
          }
        }
      }
    }
LABEL_5:
    v8 &= v8 - 1;
  }
  int64_t v11 = v10 + 3;
  if (v11 >= v9) {
    return;
  }
  uint64_t v8 = *(void *)(v3 + 8 * v11);
  if (v8)
  {
    int64_t v1 = v11;
    goto LABEL_5;
  }
  while (1)
  {
    int64_t v1 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v1 >= v9) {
      return;
    }
    uint64_t v8 = *(void *)(v3 + 8 * v1);
    ++v11;
    if (v8) {
      goto LABEL_5;
    }
  }
LABEL_22:
  __break(1u);
}

uint64_t partial apply for closure #1 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(void *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)(v2 + direct field offset for ToolbarBridge.navigationAdaptor) = *a1;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)(v3 + 9) = 1;
  return result;
}

uint64_t partial apply for closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1)
{
  return closure #3 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t Toolbar.BarLocation.priority(for:context:)(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  int v5 = a2[1];
  int v6 = a2[2];
  unsigned __int8 v7 = a2[3];
  outlined init with copy of Toolbar.BarLocation(v2, (uint64_t)&v46);
  uint64_t result = 0;
  switch(*((void *)&v47 + 1))
  {
    case 0:
      *(void *)long long v38 = 1;
      memset(&v38[8], 0, 32);
      LOBYTE(v39) = 2;
      char v9 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)(a1, (uint64_t)v38);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v38);
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v38);
      if (v9)
      {
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)v38);
        return 1;
      }
      *(void *)long long v33 = 17;
      memset(&v33[8], 0, 32);
      char v34 = 2;
      char v14 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v38, (uint64_t)v33);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v33);
      goto LABEL_49;
    case 1:
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v38);
      if (v39 != 2) {
        goto LABEL_46;
      }
      if (!(*(void *)&v38[24] | *(void *)&v38[32] | *(void *)v38 | *(void *)&v38[16] | *(void *)&v38[8]))
      {
        if (v4) {
          return 10;
        }
        else {
          return 0;
        }
      }
      if (*(void *)v38 == 3
        && !(*(void *)&v38[24] | *(void *)&v38[32] | *(void *)&v38[16] | *(void *)&v38[8]))
      {
        return 20;
      }
      goto LABEL_46;
    case 2:
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v38);
      if (!(_BYTE)v39) {
        return 30;
      }
      if (v39 != 2) {
        goto LABEL_46;
      }
      if (!(*(void *)&v38[24] | *(void *)&v38[32] | *(void *)v38 | *(void *)&v38[16] | *(void *)&v38[8])) {
        return 0;
      }
      uint64_t v10 = *(void *)&v38[24] | *(void *)&v38[32] | *(void *)&v38[16] | *(void *)&v38[8];
      if (*(void *)v38 == 2 && !v10)
      {
        if (v6 ^ 1 | v5) {
          return 0;
        }
        else {
          return 20;
        }
      }
      if ((*(void *)v38 & 0xFFFFFFFFFFFFFFFDLL) == 5 && !v10) {
        return 40;
      }
      BOOL v32 = *(void *)v38 == 21 || *(void *)v38 == 10;
      if (v32 && !v10) {
        return 10;
      }
      if (*(void *)v38 == 23 && !v10) {
        return 35;
      }
      goto LABEL_46;
    case 3:
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v38);
      if (v39 != 2) {
        goto LABEL_46;
      }
      int8x16_t v11 = vorrq_s8(*(int8x16_t *)&v38[8], *(int8x16_t *)&v38[24]);
      int8x8_t v12 = vorr_s8(*(int8x8_t *)v11.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
      if (*(void *)v38 != 2 || *(void *)&v12 != 0)
      {
        if (*(void *)v38 == 6 && !*(void *)&v12) {
          return 20;
        }
        if (*(void *)v38 != 9 || *(void *)&v12)
        {
          if (*(void *)v38 == 18 && !*(void *)&v12) {
            return (v7 & 1) == 0;
          }
          if (*(void *)v38 != 22 || *(void *)&v12)
          {
LABEL_46:
            outlined destroy of ToolbarItemPlacement.Role((uint64_t)v38);
            return 0;
          }
        }
        return 10;
      }
      if (((v6 ^ 1 | v5) & 1) == 0) {
        return 0;
      }
      return 30;
    case 4:
    case 6:
    case 7:
    case 9:
    case 0xCLL:
    case 0xDLL:
    case 0xELL:
      return result;
    case 5:
      *(void *)long long v38 = 12;
      memset(&v38[8], 0, 32);
      LOBYTE(v39) = 2;
      char v14 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)(a1, (uint64_t)v38);
LABEL_49:
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v38);
      return v14 & 1;
    case 8:
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v38);
      if (v39 != 2) {
        goto LABEL_46;
      }
      int8x16_t v15 = vorrq_s8(*(int8x16_t *)&v38[8], *(int8x16_t *)&v38[24]);
      int8x8_t v16 = vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
      BOOL v17 = *(void *)v38 == 15;
      goto LABEL_42;
    case 0xALL:
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v38);
      if (v39 != 2) {
        goto LABEL_46;
      }
      BOOL v18 = *(void *)v38 == 11 || *(void *)v38 == 4;
      int8x16_t v19 = vorrq_s8(*(int8x16_t *)&v38[8], *(int8x16_t *)&v38[24]);
      int8x8_t v20 = vorr_s8(*(int8x8_t *)v19.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL));
      if (!v18 || *(void *)&v20 != 0) {
        goto LABEL_46;
      }
      return 1;
    case 0xBLL:
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v38);
      if (v39 != 2) {
        goto LABEL_46;
      }
      int8x16_t v22 = vorrq_s8(*(int8x16_t *)&v38[8], *(int8x16_t *)&v38[24]);
      int8x8_t v16 = vorr_s8(*(int8x8_t *)v22.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
      BOOL v17 = *(void *)v38 == 8;
LABEL_42:
      if (!v17 || *(void *)&v16 != 0) {
        goto LABEL_46;
      }
      return 1;
    default:
      *(_OWORD *)long long v33 = v46;
      *(_OWORD *)&v33[16] = v47;
      *(void *)&v33[32] = v48;
      outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)v38);
      if (v39 == 1)
      {
        long long v43 = *(_OWORD *)v38;
        long long v44 = *(_OWORD *)&v38[16];
        uint64_t v45 = *(void *)&v38[32];
      }
      else
      {
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)v38);
        long long v43 = 0u;
        long long v44 = 0u;
        uint64_t v45 = 0;
      }
      outlined init with copy of AnyHashable((uint64_t)v33, (uint64_t)v42);
      uint64_t v24 = MEMORY[0x1E4FBB960];
      uint64_t v25 = MEMORY[0x1E4FBB718];
      _s7SwiftUI010_ViewList_C0VSgWOcTm_0((uint64_t)&v43, (uint64_t)v38, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [Toolbar.BarLocation]);
      _s7SwiftUI010_ViewList_C0VSgWOcTm_0((uint64_t)v42, (uint64_t)&v39, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, v24, v25, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [Toolbar.BarLocation]);
      if (*(void *)&v38[24])
      {
        _s7SwiftUI010_ViewList_C0VSgWOcTm_0((uint64_t)v38, (uint64_t)v37, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [Toolbar.BarLocation]);
        if (*((void *)&v40 + 1))
        {
          v35[0] = v39;
          v35[1] = v40;
          uint64_t v36 = v41;
          char v26 = MEMORY[0x18C1174E0](v37, v35);
          outlined destroy of AnyHashable((uint64_t)v35);
          uint64_t v27 = MEMORY[0x1E4FBB718];
          outlined destroy of _ViewList_View?((uint64_t)v42, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, v24, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [Toolbar.BarLocation]);
          outlined destroy of _ViewList_View?((uint64_t)&v43, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, v24, v27, (uint64_t (*)(void))type metadata accessor for [Toolbar.BarLocation]);
          outlined destroy of AnyHashable((uint64_t)v33);
          outlined destroy of AnyHashable((uint64_t)v37);
          outlined destroy of _ViewList_View?((uint64_t)v38, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, v24, v27, (uint64_t (*)(void))type metadata accessor for [Toolbar.BarLocation]);
          return (v26 & 1) != 0;
        }
        uint64_t v30 = MEMORY[0x1E4FBB960];
        uint64_t v31 = MEMORY[0x1E4FBB718];
        outlined destroy of _ViewList_View?((uint64_t)v42, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [Toolbar.BarLocation]);
        outlined destroy of _ViewList_View?((uint64_t)&v43, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, v30, v31, (uint64_t (*)(void))type metadata accessor for [Toolbar.BarLocation]);
        outlined destroy of AnyHashable((uint64_t)v33);
        outlined destroy of AnyHashable((uint64_t)v37);
      }
      else
      {
        uint64_t v28 = MEMORY[0x1E4FBB960];
        uint64_t v29 = MEMORY[0x1E4FBB718];
        outlined destroy of _ViewList_View?((uint64_t)v42, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [Toolbar.BarLocation]);
        outlined destroy of _ViewList_View?((uint64_t)&v43, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, v28, v29, (uint64_t (*)(void))type metadata accessor for [Toolbar.BarLocation]);
        outlined destroy of AnyHashable((uint64_t)v33);
        if (!*((void *)&v40 + 1))
        {
          outlined destroy of _ViewList_View?((uint64_t)v38, (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for [Toolbar.BarLocation]);
          return 1;
        }
      }
      _s7SwiftUI7ToolbarO11BarLocationO_AEtWOhTm_0((uint64_t)v38, (uint64_t (*)(void))type metadata accessor for (AnyHashable?, AnyHashable?));
      return 0;
  }
}

unsigned char *closure #1 in View.transformToolbarRole(_:isEnabled:)(unsigned char *result, char a2, char a3)
{
  if ((a2 & 1) != 0 && *result == 3) {
    *uint64_t result = a3;
  }
  return result;
}

uint64_t partial apply for specialized closure #1 in _NavigationSplitReader.PreparedColumn.updateValue()(uint64_t a1)
{
  return specialized closure #1 in _NavigationSplitReader.PreparedColumn.updateValue()(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t AsyncImagePhase.image.getter()
{
  if (*v0 >> 62) {
    return 0;
  }
  else {
    return swift_retain();
  }
}

uint64_t partial apply for implicit closure #7 in static SystemScrollView._makeView(view:inputs:)()
{
  return implicit closure #7 in static SystemScrollView._makeView(view:inputs:)();
}

uint64_t base witness table accessor for PropertyKey in RepresentablePreferredFocusableViewInput<A>()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for NavigationPresentationAdaptorModifier()
{
  return &type metadata for NavigationPresentationAdaptorModifier;
}

uint64_t FalseSafeAreaTransitionState.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for EnvironmentValues.SearchField()
{
  return &type metadata for EnvironmentValues.SearchField;
}

ValueMetadata *type metadata accessor for ListStyleContent()
{
  return &type metadata for ListStyleContent;
}

ValueMetadata *type metadata accessor for NavigationEnabled()
{
  return &type metadata for NavigationEnabled;
}

void type metadata completion function for UICollectionViewListCoordinatorBase()
{
  type metadata accessor for ShadowListUpdateRecorder();
  if (v0 <= 0x3F)
  {
    type metadata accessor for ListCoreBatchUpdates();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Optional();
      if (v2 <= 0x3F)
      {
        _s10Foundation9IndexPathVSgMaTm_1(319, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Binding();
          type metadata accessor for Optional();
          if (v4 <= 0x3F) {
            swift_initClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t closure #3 in ScrollActionDispatcher.updateValue()(uint64_t (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t result = a1();
  if (a3)
  {
    swift_beginAccess();
    uint64_t result = MEMORY[0x18C119DF0](a3 + 200);
    if (result)
    {
      uint64_t v5 = *(void *)(a3 + 208);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t, double))(v5 + 32))(ObjectType, v5, 0.0);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed () -> (@out ())()
{
  return thunk for @escaping @callee_guaranteed () -> (@out ())(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t _sytIegr_Ieg_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@out ())(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t partial apply for closure #1 in OnScrollPhaseContextChangeModifier.PhaseContextActionProvider.makeAction(oldOutput:newOutput:)()
{
  return closure #1 in OnScrollPhaseContextChangeModifier.PhaseContextActionProvider.makeAction(oldOutput:newOutput:)((long long *)(v0 + 16), *(unsigned __int8 *)(v0 + 128), *(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(v0 + 152), *(void *)(v0 + 160), *(unsigned __int8 *)(v0 + 168));
}

uint64_t closure #1 in OnScrollPhaseContextChangeModifier.PhaseContextActionProvider.makeAction(oldOutput:newOutput:)(long long *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _OWORD *), uint64_t a4, uint64_t a5)
{
  long long v17 = a1[1];
  long long v18 = *a1;
  long long v15 = a1[3];
  long long v16 = a1[2];
  long long v13 = a1[5];
  long long v14 = a1[4];
  uint64_t v8 = *((void *)a1 + 12);
  uint64_t v9 = *((void *)a1 + 13);
  ScrollPhaseState.velocity.getter();
  char v25 = 0;
  v19[0] = v18;
  v19[1] = v17;
  _OWORD v19[2] = v16;
  v19[3] = v15;
  v19[4] = v14;
  v19[5] = v13;
  uint64_t v20 = v8;
  uint64_t v21 = v9;
  uint64_t v22 = v10;
  uint64_t v23 = v11;
  char v24 = 0;
  return a3(a5, a2, v19);
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned UnsafeMutableRawPointer?, @unowned Double, @unowned UnsafePointer<_UIUpdateTiming>) -> ()(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  unsigned __int8 v7 = *(void (**)(uint64_t, uint64_t, double))(a1 + 32);
  swift_retain();
  v7(a2, a3, a4);

  return swift_release();
}

uint64_t closure #1 in static UIKitUpdateCycle.addPreCommitObserver(_:)()
{
  uint64_t v0 = (void *)MEMORY[0x1E4FBC860];
  while (1)
  {
    if (one-time initialization token for observerActions != -1) {
      swift_once();
    }
    uint64_t result = swift_beginAccess();
    unint64_t v2 = (char *)static UIKitUpdateCycle.observerActions;
    uint64_t v3 = *((void *)static UIKitUpdateCycle.observerActions + 2);
    if (!v3) {
      break;
    }
    static UIKitUpdateCycle.observerActions = v0;
    MEMORY[0x18C113CA0](result);
    unint64_t v4 = v2 + 40;
    do
    {
      uint64_t v5 = (void (*)(uint64_t))*((void *)v4 - 1);
      uint64_t v6 = swift_retain();
      v5(v6);
      swift_release();
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    static Update.end()();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t vars8;

  unint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  unint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  return closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t partial apply for closure #1 in UIKitSearchScopeCoordinating<>.onChange(selectedScope:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)(uint64_t (*a1)(void))
{
  return a1();
}

double partial apply for closure #1 in UIHostingViewBase.withMainThreadRender(wasAsync:_:)()
{
  unint64_t v1 = *(double **)(v0 + 16);
  (*(void (**)(double *__return_ptr))(v0 + 24))(&v3);
  double result = v3;
  *unint64_t v1 = v3;
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in _UIHostingView.beginTransaction()()
{
  return static Update.ensure<A>(_:)();
}

uint64_t partial apply for closure #1 in UIHostingViewBase.didMoveToWindow()()
{
  return closure #1 in UIHostingViewBase.didMoveToWindow()();
}

uint64_t closure #1 in UIHostingViewBase.didMoveToWindow()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    UIHostingViewBase.renderForPreferences(updateDisplayList:)(0);
    *(unsigned char *)(v1 + 218) = 0;
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall UIHostingViewBase.renderForPreferences(updateDisplayList:)(Swift::Bool updateDisplayList)
{
  if (MEMORY[0x18C119DF0](v1 + 24))
  {
    if (*(unsigned char *)(v1 + 216) == 1)
    {
      *(CFTimeInterval *)(v1 + 184) = CACurrentMediaTime();
      UIAnimationDragCoefficient();
      swift_getObjectType();
      ViewRendererHost.render(interval:updateDisplayList:targetTimestamp:)();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

uint64_t partial apply for closure #1 in OnScrollGeometryChangeModifier.GeometryActionProvider.makeAction(oldOutput:newOutput:)()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 32))(v0 + ((v1 + 48) & ~v1), v0 + ((*(void *)(*(void *)(*(void *)(v0 + 16) - 8) + 64) + v1 + ((v1 + 48) & ~v1)) & ~v1));
}

void performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:)(void *a1, void *a2, int a3)
{
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v63 = *MEMORY[0x1E4FBC8C8] & *a1;
  uint64_t v7 = v63;
  uint64_t v8 = *(void **)(v63 + 96);
  uint64_t v69 = type metadata accessor for Optional();
  uint64_t v67 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  uint64_t v68 = (char *)&v58 - v9;
  uint64_t v70 = *(v8 - 1);
  MEMORY[0x1F4188790](v10);
  BOOL v62 = (char *)&v58 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = v11;
  MEMORY[0x1F4188790](v12);
  CGFloat v66 = (char *)&v58 - v13;
  uint64_t v60 = *(void *)(v7 + 112);
  double v71 = v8;
  long long v14 = (int *)type metadata accessor for ListCoreBatchUpdates();
  uint64_t v15 = *((void *)v14 - 1);
  MEMORY[0x1F4188790](v14);
  long long v17 = (char *)&v58 - v16;
  _s10Foundation9IndexPathVSgMaTm_1(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v58 - v19;
  *((unsigned char *)a1 + *(void *)(v7 + 208)) = 1;
  LOBYTE(v8) = UICollectionViewListCoordinatorBase.isAnimated.getter();
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a2;
  *(void *)(v21 + 24) = a1;
  *(unsigned char *)(v21 + 32) = v8 & 1;
  uint64_t v74 = v21;
  *(unsigned char *)(v21 + 33) = a3;
  id v22 = a2;
  uint64_t v23 = a1;
  int v72 = a3;
  if (a3) {
    UICollectionViewListCoordinatorBase.updateEditingState(_:)(v22);
  }
  id v73 = v22;
  uint64_t v24 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v20, 1, 1, v24);
  uint64_t v25 = (uint64_t)v23 + *(void *)((*v6 & *v23) + 0xD8);
  swift_beginAccess();
  outlined assign with take of IndexPath?((uint64_t)v20, v25);
  swift_endAccess();
  char v26 = (char *)v23 + *(void *)((*v6 & *v23) + 0xB0);
  swift_beginAccess();
  long long v64 = *(void (**)(char *, char *, int *))(v15 + 16);
  v64(v17, v26, v14);
  LOBYTE(v25) = ListCoreBatchUpdates.isEmpty.getter(v14);
  uint64_t v27 = v6;
  uint64_t v28 = *(void (**)(char *, int *))(v15 + 8);
  uint64_t v65 = v15 + 8;
  v28(v17, v14);
  if ((v25 & 1) == 0)
  {
    uint64_t v59 = v28;
    uint64_t v29 = (char *)v23 + *(void *)((*v27 & *v23) + 0xC8);
    swift_beginAccess();
    uint64_t v30 = v67;
    uint64_t isEscapingClosureAtFileLocation = (uint64_t)v68;
    uint64_t v32 = v69;
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v68, v29, v69);
    uint64_t v33 = v70;
    char v34 = v71;
    if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v70 + 48))(isEscapingClosureAtFileLocation, 1, v71) != 1)
    {
LABEL_11:
      uint64_t v42 = *(void (**)(char *, uint64_t, void *))(v33 + 32);
      long long v43 = v66;
      v42(v66, isEscapingClosureAtFileLocation, v34);
      long long v44 = v62;
      (*(void (**)(char *, char *, void *))(v33 + 16))(v62, v43, v34);
      uint64_t v45 = v34;
      unint64_t v46 = (*(unsigned __int8 *)(v33 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
      unint64_t v47 = (v61 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v48 = v33;
      long long v49 = (char *)swift_allocObject();
      *((void *)v49 + 2) = v45;
      uint64_t v50 = v63;
      uint64_t v51 = v60;
      *((void *)v49 + 3) = *(void *)(v63 + 104);
      *((void *)v49 + 4) = v51;
      *((void *)v49 + 5) = *(void *)(v50 + 120);
      *((void *)v49 + 6) = v23;
      v42(&v49[v46], (uint64_t)v44, v45);
      id v52 = v73;
      *(void *)&v49[v47] = v73;
      uint64_t v53 = swift_allocObject();
      *(void *)(v53 + 16) = partial apply for closure #2 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
      *(void *)(v53 + 24) = v49;
      uint64_t v79 = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
      uint64_t v80 = v53;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v76 = 1107296256;
      uint64_t v77 = thunk for @escaping @callee_guaranteed () -> ();
      uint64_t v78 = &block_descriptor_39_1;
      uint64_t v54 = _Block_copy(&aBlock);
      id v55 = v52;
      uint64_t v56 = v23;
      swift_release();
      uint64_t v79 = (uint64_t (*)())partial apply for closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
      uint64_t v80 = v74;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v76 = 1107296256;
      uint64_t v77 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
      uint64_t v78 = &block_descriptor_42_0;
      __n128 v57 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v55, sel_performBatchUpdates_completion_, v54, v57);
      _Block_release(v57);
      _Block_release(v54);
      swift_release();
      (*(void (**)(char *, void *))(v48 + 8))(v66, v45);
      swift_release();
      return;
    }
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(isEscapingClosureAtFileLocation, v32);
    uint64_t v28 = v59;
  }
  if (v72)
  {
    v64(v17, v26, v14);
    char v35 = ListCoreBatchUpdates.isEmpty.getter(v14);
    v28(v17, v14);
    if (v35)
    {
      uint64_t v79 = (uint64_t (*)())partial apply for closure #1 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
      uint64_t v80 = v74;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v76 = 1107296256;
      uint64_t v77 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
      uint64_t v78 = &block_descriptor_29;
      uint64_t v36 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v73, sel_performBatchUpdates_completion_, 0, v36);
      swift_release();
      _Block_release(v36);
      return;
    }
  }
  char v34 = self;
  uint64_t v33 = swift_allocObject();
  id v37 = v73;
  *(void *)(v33 + 16) = v73;
  *(void *)(v33 + 24) = v23;
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = partial apply for closure #3 in performUpdates #1 <A, B>() in UICollectionViewListCoordinatorBase.update(_:to:transaction:performDiff:);
  *(void *)(v38 + 24) = v33;
  uint64_t v79 = partial apply for thunk for @callee_guaranteed () -> ();
  uint64_t v80 = v38;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v76 = 1107296256;
  uint64_t v77 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v78 = &block_descriptor_42;
  long long v39 = _Block_copy(&aBlock);
  id v40 = v37;
  uint64_t v41 = v23;
  swift_retain();
  swift_release();
  objc_msgSend(v34, sel_performWithoutAnimation_, v39);
  swift_release();
  _Block_release(v39);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_11;
  }
}