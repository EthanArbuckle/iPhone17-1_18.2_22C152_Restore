uint64_t closure #1 in PagingCollectionView.apply(changes:newIDs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v33;
  int64_t v34;
  unint64_t v35;
  unint64_t v36;
  int64_t v37;
  int64_t v38;
  int64_t v39;
  unsigned char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  Class isa;
  int v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int64_t v60;
  uint64_t v61;
  unsigned char *v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  void *v69;
  unint64_t v70;
  unint64_t v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int64_t v87;
  int64_t v88;
  int64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void *v100;
  Class v101;
  Swift::String v102;
  Swift::String v103;
  Swift::String v104;
  Swift::String v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;

  v117 = type metadata accessor for IndexPath();
  v108 = *(void *)(v117 - 8);
  MEMORY[0x1F4188790](v117);
  v107 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  v110 = (char *)&v106 - v9;
  MEMORY[0x1F4188790](v10);
  v12 = (char *)&v106 - v11;
  swift_beginAccess();
  v114 = a1 + 16;
  v13 = (void *)MEMORY[0x18C119DF0](a1 + 16);
  if (v13)
  {
    v3 = (unint64_t)v13;
    v14 = objc_msgSend(v13, sel_dataSource);

    if (v14)
    {
      type metadata accessor for Coordinator();
      v15 = swift_dynamicCastClass();
      if (v15)
      {
        v3 = *(void *)(v15 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastIDs);
        *(void *)(v15 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastIDs) = a2;
        swift_bridgeObjectRetain();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
  }
  v16 = specialized CollectionChanges.Projection.init(kind:changes:)(0, a3);
  v20 = v17;
  v106 = a3;
  if (v18 != v19)
  {
    v33 = v16;
    v3 = v18;
    v34 = v19;
    v115 = v17 + 32;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v22 = v108;
    v116 = v108 + 32;
    v21 = MEMORY[0x1E4FBC870];
    v109 = v20 + 104;
    v112 = v20;
    v113 = v34;
    LODWORD(v111) = v33;
    while (1)
    {
      if ((v3 & 0x8000000000000000) != 0) {
        goto LABEL_124;
      }
      v35 = *(void *)(v20 + 16);
      if (v3 >= v35)
      {
LABEL_125:
        __break(1u);
LABEL_126:
        __break(1u);
LABEL_127:
        __break(1u);
LABEL_128:
        __break(1u);
LABEL_129:
        __break(1u);
        goto LABEL_130;
      }
      v36 = v115 + 40 * v3;
      if (*(unsigned __int8 *)(v36 + 32) >= 2u) {
        goto LABEL_138;
      }
      v38 = *(void *)v36;
      v37 = *(void *)(v36 + 8);
      v39 = v34;
      if ((uint64_t)(v3 + 1) < v34) {
        break;
      }
LABEL_29:
      if (v38 != v37)
      {
        if (v37 < v38) {
          goto LABEL_132;
        }
        v44 = v38;
        if (v38 >= v37) {
          goto LABEL_133;
        }
        do
        {
          v46 = v21 + 56;
          while (1)
          {
            v3 = v44++;
            v47 = static Hasher._hash(seed:_:)();
            v48 = -1 << *(unsigned char *)(v21 + 32);
            v49 = v47 & ~v48;
            if (((*(void *)(v46 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
              break;
            }
            v50 = *(void *)(v21 + 48);
            if (*(void *)(v50 + 8 * v49) != v3)
            {
              v51 = ~v48;
              do
              {
                v49 = (v49 + 1) & v51;
                if (((*(void *)(v46 + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
                  goto LABEL_43;
                }
              }
              while (*(void *)(v50 + 8 * v49) != v3);
            }
            if (v44 == v37) {
              goto LABEL_30;
            }
          }
LABEL_43:
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v121 = v21;
          specialized _NativeSet.insertNew(_:at:isUnique:)(v3, v49, isUniquelyReferenced_nonNull_native);
          v21 = v121;
          swift_bridgeObjectRelease();
        }
        while (v44 != v37);
      }
LABEL_30:
      v41 = v37 - v38;
      if (__OFSUB__(v37, v38)) {
        goto LABEL_126;
      }
      if (v41)
      {
        v121 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v41 & ~(v41 >> 63), 0);
        if (v37 >= v38 && (v41 & 0x8000000000000000) == 0)
        {
          v42 = v121;
          v34 = v113;
          while (1)
          {
            MEMORY[0x18C10A880](v38, 0);
            v121 = v42;
            v3 = *(void *)(v42 + 16);
            v43 = *(void *)(v42 + 24);
            if (v3 >= v43 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v3 + 1, 1);
              v42 = v121;
            }
            *(void *)(v42 + 16) = v3 + 1;
            (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v42+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v3, v12, v117);
            if (v37 == v38) {
              break;
            }
            if (v37 == ++v38) {
              goto LABEL_53;
            }
          }
          __break(1u);
LABEL_119:
          __break(1u);
          goto LABEL_120;
        }
LABEL_130:
        __break(1u);
LABEL_131:
        __break(1u);
LABEL_132:
        __break(1u);
LABEL_133:
        __break(1u);
LABEL_134:
        __break(1u);
LABEL_135:
        v121 = 0;
        v122 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease();
        v121 = 0xD000000000000015;
        v122 = 0x800000018832DE70;
        v118 = v3;
        v102._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v102);
        swift_bridgeObjectRelease();
        goto LABEL_137;
      }
      v34 = v113;
LABEL_53:
      v52 = MEMORY[0x18C119DF0](v114);
      if (v52)
      {
        v53 = (void *)v52;
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v53, sel_deleteItemsAtIndexPaths_, isa);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v20 = v112;
      LOBYTE(v33) = v111;
      v3 = v39;
      if (v39 == v34) {
        goto LABEL_8;
      }
    }
    if (v3 + 1 != v35)
    {
      v40 = (unsigned char *)(v109 + 40 * v3);
      v39 = v3 + 1;
      while (v39 < (uint64_t)v35)
      {
        if (*v40)
        {
          if (*v40 == 1)
          {
            if (v33 == 1) {
              goto LABEL_29;
            }
          }
          else if (v33 == 2)
          {
            goto LABEL_29;
          }
        }
        else if (!(_BYTE)v33)
        {
          goto LABEL_29;
        }
        ++v39;
        v40 += 40;
        if (v35 == v39) {
          goto LABEL_135;
        }
      }
LABEL_120:
      __break(1u);
      goto LABEL_121;
    }
    goto LABEL_135;
  }
  swift_bridgeObjectRetain();
  v21 = MEMORY[0x1E4FBC870];
  v22 = v108;
LABEL_8:
  swift_bridgeObjectRelease();
  v23 = specialized CollectionChanges.Projection.init(kind:changes:)(1, v106);
  v27 = v24;
  if (v25 != v26)
  {
    v55 = v23;
    v56 = v25;
    v57 = v26;
    v115 = v24 + 32;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v109 = v27 + 104;
    v111 = v27;
    v112 = v57;
    LODWORD(v113) = v55;
    while (1)
    {
      if ((v56 & 0x8000000000000000) != 0) {
        goto LABEL_127;
      }
      v58 = *(void *)(v27 + 16);
      if (v56 >= v58) {
        goto LABEL_128;
      }
      v59 = v115 + 40 * v56;
      if (*(unsigned __int8 *)(v59 + 32) >= 2u) {
        break;
      }
      v3 = *(void *)v59;
      v60 = *(void *)(v59 + 8);
      v61 = v57;
      if ((uint64_t)(v56 + 1) < v57)
      {
        if (v56 + 1 != v58)
        {
          v62 = (unsigned char *)(v109 + 40 * v56);
          v61 = v56 + 1;
          while (v61 < v58)
          {
            if (*v62)
            {
              if (*v62 == 1)
              {
                if (v55 == 1) {
                  goto LABEL_72;
                }
              }
              else if (v55 == 2)
              {
                goto LABEL_72;
              }
            }
            else if (!(_BYTE)v55)
            {
              goto LABEL_72;
            }
            ++v61;
            v62 += 40;
            if (v58 == v61) {
              goto LABEL_136;
            }
          }
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
          goto LABEL_125;
        }
LABEL_136:
        v118 = 0;
        v119 = 0xE000000000000000;
        swift_bridgeObjectRetain();
        _StringGuts.grow(_:)(23);
        swift_bridgeObjectRelease();
        v118 = 0xD000000000000015;
        v119 = 0x800000018832DE70;
        v120 = v56;
        v103._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v103);
        swift_bridgeObjectRelease();
        while (1)
        {
LABEL_137:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_138:
          v121 = 0;
          v122 = 0xE000000000000000;
          _StringGuts.grow(_:)(17);
          swift_bridgeObjectRelease();
          v121 = 0x2064696C61766E69;
          v122 = 0xEF203A7865646E69;
          v118 = v3;
          v104._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v104);
          swift_bridgeObjectRelease();
        }
      }
LABEL_72:
      v63 = v60 - v3;
      if (__OFSUB__(v60, v3)) {
        goto LABEL_129;
      }
      if (v63)
      {
        v118 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v63 & ~(v63 >> 63), 0);
        if (v60 < (uint64_t)v3 || v63 < 0) {
          goto LABEL_131;
        }
        v64 = v118;
        v65 = v110;
        do
        {
          MEMORY[0x18C10A880](v3, 0);
          v118 = v64;
          v67 = *(void *)(v64 + 16);
          v66 = *(void *)(v64 + 24);
          if (v67 >= v66 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v66 > 1, v67 + 1, 1);
            v64 = v118;
          }
          *(void *)(v64 + 16) = v67 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v64+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v67, v65, v117);
          if (v60 == v3) {
            goto LABEL_119;
          }
          ++v3;
        }
        while (v60 != v3);
        v27 = v111;
      }
      v68 = MEMORY[0x18C119DF0](v114);
      if (v68)
      {
        v69 = (void *)v68;
        v3 = (unint64_t)Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v69, sel_insertItemsAtIndexPaths_, v3);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v56 = v61;
      v57 = v112;
      LOBYTE(v55) = v113;
      if (v61 == v112) {
        goto LABEL_10;
      }
    }
    v118 = 0;
    v119 = 0xE000000000000000;
    _StringGuts.grow(_:)(17);
    swift_bridgeObjectRelease();
    v118 = 0x2064696C61766E69;
    v119 = 0xEF203A7865646E69;
    v120 = v56;
    v105._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v105);
    swift_bridgeObjectRelease();
    goto LABEL_137;
  }
  swift_bridgeObjectRetain();
LABEL_10:
  swift_bridgeObjectRelease();
  LODWORD(v110) = specialized CollectionChanges.Projection.init(kind:changes:)(2, v106);
  v112 = v28;
  v30 = v29;
  v3 = v31;
  swift_bridgeObjectRetain();
  v111 = v30;
  if (v30 != v3)
  {
    swift_beginAccess();
    v70 = v21 + 56;
    v115 = v22 + 32;
    v71 = v111;
    v109 = v3;
    v116 = v21;
    do
    {
      v72 = (char)v110;
      v74 = v111;
      v73 = v112;
      v75 = specialized CollectionChanges.Projection.subscript.getter(v71, v110, v112);
      v77 = v76;
      swift_bridgeObjectRetain();
      v113 = specialized CollectionChanges.Projection.index(after:)(v71, v72, v73, v74, v3);
      swift_bridgeObjectRelease();
      v78 = MEMORY[0x1E4FBC860];
      if (v75 != v77)
      {
        v86 = v75;
        if (v77 < v75) {
          goto LABEL_134;
        }
        v87 = v75;
        do
        {
          v88 = v87;
          if (v77 <= v87) {
            v89 = v87;
          }
          else {
            v89 = v77;
          }
          v3 = v87;
          while (1)
          {
            if (v88 < v86) {
              goto LABEL_122;
            }
            if (v3 == v89) {
              goto LABEL_123;
            }
            v87 = v3 + 1;
            if (!*(void *)(v116 + 16)) {
              goto LABEL_110;
            }
            v90 = v116;
            v91 = static Hasher._hash(seed:_:)();
            v92 = -1 << *(unsigned char *)(v90 + 32);
            v93 = v91 & ~v92;
            if (((*(void *)(v70 + ((v93 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v93) & 1) == 0) {
              goto LABEL_110;
            }
            v94 = *(void *)(v116 + 48);
            if (*(void *)(v94 + 8 * v93) != v3) {
              break;
            }
LABEL_100:
            ++v3;
            if (v87 == v77) {
              goto LABEL_88;
            }
          }
          v95 = ~v92;
          while (1)
          {
            v93 = (v93 + 1) & v95;
            if (((*(void *)(v70 + ((v93 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v93) & 1) == 0) {
              break;
            }
            if (*(void *)(v94 + 8 * v93) == v3) {
              goto LABEL_100;
            }
          }
LABEL_110:
          v96 = swift_isUniquelyReferenced_nonNull_native();
          v120 = v78;
          if ((v96 & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v78 + 16) + 1, 1);
            v78 = v120;
          }
          v98 = *(void *)(v78 + 16);
          v97 = *(void *)(v78 + 24);
          if (v98 >= v97 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v97 > 1), v98 + 1, 1);
            v78 = v120;
          }
          *(void *)(v78 + 16) = v98 + 1;
          *(void *)(v78 + 8 * v98 + 32) = v3;
        }
        while (v87 != v77);
      }
LABEL_88:
      v79 = *(void *)(v78 + 16);
      if (v79)
      {
        v120 = MEMORY[0x1E4FBC860];
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v79, 0);
        v80 = 0;
        v81 = v120;
        v82 = v107;
        v83 = v108;
        do
        {
          MEMORY[0x18C10A880](*(void *)(v78 + 8 * v80 + 32), 0);
          v120 = v81;
          v85 = *(void *)(v81 + 16);
          v84 = *(void *)(v81 + 24);
          if (v85 >= v84 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v84 > 1, v85 + 1, 1);
            v81 = v120;
          }
          ++v80;
          *(void *)(v81 + 16) = v85 + 1;
          (*(void (**)(unint64_t, char *, uint64_t))(v83 + 32))(v81+ ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80))+ *(void *)(v83 + 72) * v85, v82, v117);
        }
        while (v79 != v80);
      }
      swift_release();
      v99 = MEMORY[0x18C119DF0](v114);
      v71 = v113;
      if (v99)
      {
        v100 = (void *)v99;
        v101 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        objc_msgSend(v100, sel_reloadItemsAtIndexPaths_, v101);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v3 = v109;
    }
    while (v71 != v109);
  }
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void closure #2 in PagingCollectionView.apply(changes:newIDs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  v3 = (void *)MEMORY[0x18C119DF0](v2);
  if (v3)
  {
    v4 = v3;
    if (objc_msgSend(v3, sel_dataSource))
    {
      type metadata accessor for Coordinator();
      if (swift_dynamicCastClass()) {
        Coordinator.updateContents(_:)(v4);
      }
      swift_unknownObjectRelease();
    }
  }
}

uint64_t PagingCollectionView.layoutSubviews()()
{
  v1 = v0;
  type metadata accessor for IndexPath?(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v39 = (uint64_t)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  v6 = (char *)&v38 - v5;
  MEMORY[0x1F4188790](v7);
  v9 = (char *)&v38 - v8;
  uint64_t v10 = type metadata accessor for IndexPath();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  v38 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x1F4188790](v13);
  v16 = (char *)&v38 - v15;
  v17 = &v0[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastLayoutSize];
  double v18 = *(double *)&v0[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastLayoutSize];
  double v19 = *(double *)&v0[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastLayoutSize
                     + 8];
  char v20 = v0[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastLayoutSize + 16];
  objc_msgSend(v1, sel_bounds, v14);
  if ((v20 & 1) != 0 || (v18 == v21 ? (BOOL v23 = v19 == v22) : (BOOL v23 = 0), !v23))
  {
    id v24 = objc_msgSend(v1, sel_collectionViewLayout);
    objc_msgSend(v24, sel_invalidateLayout);
  }
  v25 = (objc_class *)type metadata accessor for PagingCollectionView();
  v40.receiver = v1;
  v40.super_class = v25;
  objc_msgSendSuper2(&v40, sel_layoutSubviews);
  uint64_t v26 = (uint64_t)v1
      + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_pendingIndexPath;
  swift_beginAccess();
  outlined init with copy of IndexPath?(v26, (uint64_t)v9);
  v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v27((uint64_t)v9, 1, v10) == 1)
  {
    _s7SwiftUI7BindingVys11AnyHashableVGWOhTm_0((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IndexPath?);
    uint64_t v28 = (uint64_t)v1
        + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastScrolledIndexPath;
    swift_beginAccess();
    uint64_t v29 = v39;
    outlined init with copy of IndexPath?(v28, v39);
    if (v27(v29, 1, v10) == 1)
    {
      return _s7SwiftUI7BindingVys11AnyHashableVGWOhTm_0(v29, (uint64_t)&lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for IndexPath?);
    }
    else
    {
      v32 = v38;
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v38, v29, v10);
      objc_msgSend(v1, sel_bounds);
      if ((v17[16] & 1) != 0 || v33 != *(double *)v17 || v34 != *((double *)v17 + 1))
      {
        objc_msgSend(v1, sel_bounds);
        *(void *)v17 = v35;
        *((void *)v17 + 1) = v36;
        v17[16] = 0;
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v1, sel_scrollToItemAtIndexPath_atScrollPosition_animated_, isa, 16, 0);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v32, v10);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v16, v9, v10);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6, 1, 1, v10);
    swift_beginAccess();
    outlined assign with take of IndexPath?((uint64_t)v6, v26);
    swift_endAccess();
    Class v31 = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v1, sel_scrollToItemAtIndexPath_atScrollPosition_animated_, v31, 16, 0);

    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  }
}

id PagingCollectionView.scrollToItem(at:at:animated:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  type metadata accessor for IndexPath?(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  double v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v22 - v10;
  id result = objc_msgSend(v4, sel_dataSource, v9);
  if (result)
  {
    type metadata accessor for Coordinator();
    uint64_t v13 = swift_dynamicCastClass();
    if (v13)
    {
      uint64_t v14 = *(void *)(v13 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastIDs);
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease();
      uint64_t v15 = *(void *)(v14 + 16);
      id result = (id)swift_bridgeObjectRelease();
      if (v15)
      {
        uint64_t v16 = type metadata accessor for IndexPath();
        uint64_t v17 = *(void *)(v16 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v11, a1, v16);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v11, 0, 1, v16);
        uint64_t v18 = (uint64_t)v4
            + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF020PagingCollectionView_lastScrolledIndexPath;
        swift_beginAccess();
        outlined assign with take of IndexPath?((uint64_t)v11, v18);
        swift_endAccess();
        uint64_t v19 = a3 & 1;
        objc_msgSend(v4, sel_setPagingEnabled_, v19);
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        double v21 = (objc_class *)type metadata accessor for PagingCollectionView();
        v23.receiver = v4;
        v23.super_class = v21;
        objc_msgSendSuper2(&v23, sel_scrollToItemAtIndexPath_atScrollPosition_animated_, isa, a2, v19);

        return objc_msgSend(v4, sel_setPagingEnabled_, 1);
      }
    }
    else
    {
      return (id)swift_unknownObjectRelease();
    }
  }
  return result;
}

id PagingCollectionView.__deallocating_deinit()
{
  return Coordinator.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for PagingCollectionView);
}

id Coordinator.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t ObjC metadata update function for PagingCollectionView()
{
  return type metadata accessor for PagingCollectionView();
}

uint64_t type metadata accessor for PagingCollectionView()
{
  uint64_t result = type metadata singleton initialization cache for PagingCollectionView;
  if (!type metadata singleton initialization cache for PagingCollectionView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for PagingCollectionView()
{
  type metadata accessor for IndexPath?(319, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t type metadata accessor for PageViewWrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1879A8550()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1879A8588()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PagingCollectionView.apply(changes:newIDs:)()
{
  return closure #1 in PagingCollectionView.apply(changes:newIDs:)(v0[2], v0[3], v0[4]);
}

uint64_t sub_1879A85DC()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in PagingCollectionView.apply(changes:newIDs:)(uint64_t a1)
{
  closure #2 in PagingCollectionView.apply(changes:newIDs:)(a1, v1);
}

uint64_t _s7SwiftUI7BindingVys11AnyHashableVGWOhTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void partial apply for closure #1 in Coordinator.updateSelectedIndex(newIndex:)()
{
  closure #1 in Coordinator.updateSelectedIndex(newIndex:)(v0);
}

void type metadata accessor for _UIHostingView<_ViewList_View>()
{
  if (!lazy cache variable for type metadata for _UIHostingView<_ViewList_View>)
  {
    unint64_t v0 = type metadata accessor for _UIHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<_ViewList_View>);
    }
  }
}

uint64_t outlined assign with take of _ViewList_View(uint64_t a1, uint64_t a2)
{
  return a2;
}

id specialized Coordinator.init(selectedIndex:children:layoutDirection:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5)
{
  char v10 = *a5;
  *(void *)&v5[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_collectionView] = 0;
  uint64_t v11 = &v5[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSeenIndex];
  *(void *)uint64_t v11 = 0;
  v11[8] = 1;
  uint64_t v12 = &v5[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_pendingSelectedIndex];
  *(void *)uint64_t v12 = 0;
  v12[8] = 1;
  outlined init with copy of _VariadicView_Children(a4, (uint64_t)&v5[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_children]);
  uint64_t v13 = &v5[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex];
  *(void *)uint64_t v13 = a1;
  *((void *)v13 + 1) = a2;
  *((void *)v13 + 2) = a3;
  v21[0] = a1;
  v21[1] = a2;
  v21[2] = a3;
  _s7SwiftUI7BindingVySiGMaTm_0(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
  uint64_t v15 = v14;
  uint64_t v16 = v5;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v22, v15);
  *(void *)&v16[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastSeenIndex] = v22;
  outlined init with copy of _VariadicView_Children(a4, (uint64_t)v21);
  uint64_t v17 = _ViewList_Backing.ids.getter();
  outlined destroy of _ViewList_Backing((uint64_t)v21);
  *(void *)&v16[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_lastIDs] = v17;
  v16[OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_layoutDirection] = v10;

  v20.receiver = v16;
  v20.super_class = (Class)type metadata accessor for Coordinator();
  id v18 = objc_msgSendSuper2(&v20, sel_init);
  outlined destroy of _VariadicView_Children(a4);
  return v18;
}

void specialized Coordinator.collectionView(_:willDisplay:forItemAt:)(void *a1)
{
  type metadata accessor for UIKitPagingCell();
  uint64_t v2 = swift_dynamicCastClass();
  if (v2)
  {
    objc_super v3 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF015UIKitPagingCell_host);
    if (v3)
    {
      uint64_t v4 = *(void *)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x68));
      if (*(unsigned char *)(v4 + 220) == 1)
      {
        *(unsigned char *)(v4 + 220) = 0;
        id v5 = a1;
        uint64_t v6 = v3;
        UIHostingViewBase.updateRemovedState(uiView:)(0);
      }
    }
  }
}

void specialized Coordinator.collectionView(_:didEndDisplaying:forItemAt:)(void *a1)
{
  type metadata accessor for UIKitPagingCell();
  uint64_t v2 = swift_dynamicCastClass();
  if (v2)
  {
    objc_super v3 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF015UIKitPagingCell_host);
    if (v3)
    {
      uint64_t v4 = *(void *)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x68));
      if ((*(unsigned char *)(v4 + 220) & 1) == 0)
      {
        *(unsigned char *)(v4 + 220) = 1;
        id v5 = a1;
        uint64_t v6 = v3;
        UIHostingViewBase.updateRemovedState(uiView:)(0);
      }
    }
  }
}

uint64_t specialized Coordinator.collectionView(_:targetContentOffsetForProposedContentOffset:)(void *a1)
{
  objc_msgSend(a1, sel_bounds);
  CGRectGetWidth(v10);
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex + 16);
  long long v8 = *(_OWORD *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_selectedIndex);
  uint64_t v9 = v3;
  _s7SwiftUI7BindingVySiGMaTm_0(0, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
  uint64_t result = (uint64_t)MEMORY[0x18C113DA0](v7);
  if (*(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_layoutDirection) == 1)
  {
    objc_msgSend(a1, sel_bounds);
    CGRectGetWidth(v11);
    uint64_t v5 = v1 + OBJC_IVAR____TtC7SwiftUIP33_8825076C2763A50452A210CBE1FA4AF011Coordinator_children;
    swift_beginAccess();
    outlined init with copy of _VariadicView_Children(v5, (uint64_t)&v8);
    uint64_t v6 = _VariadicView_Children.endIndex.getter();
    uint64_t result = _VariadicView_Children.endIndex.getter();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t result = _VariadicView_Children.endIndex.getter();
      if ((v6 & 0x8000000000000000) == 0 && result >= v6) {
        return outlined destroy of _VariadicView_Children((uint64_t)&v8);
      }
    }
    __break(1u);
  }
  return result;
}

unint64_t type metadata accessor for UICollectionViewLayoutAttributes()
{
  unint64_t result = lazy cache variable for type metadata for UICollectionViewLayoutAttributes;
  if (!lazy cache variable for type metadata for UICollectionViewLayoutAttributes)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewLayoutAttributes);
  }
  return result;
}

uint64_t type metadata completion function for PageViewWrapper()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PageViewWrapper(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  int v7 = *(_DWORD *)(v5 + 84);
  uint64_t v8 = v6;
  unint64_t v9 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  size_t v10 = ((v8 + 16) & ~v8) + *(void *)(v5 + 64);
  int v11 = v6 & 0x100000;
  if (v8 <= 7 && v11 == 0 && v10 + (v9 & (v8 + 104)) + 1 <= 0x18)
  {
    uint64_t v33 = *(void *)(a3 + 16);
    long long v15 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v15;
    int v34 = v7;
    (**(void (***)(uint64_t, uint64_t *))(v15 - 8))(a1, a2);
    v4[5] = a2[5];
    uint64_t v16 = (void *)(((unint64_t)v4 + 55) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v17 = (void *)(((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v18 = v17[3];
    v16[3] = v18;
    v16[4] = v17[4];
    uint64_t v19 = **(void (***)(void *, void *, uint64_t))(v18 - 8);
    swift_retain();
    v19(v16, v17, v18);
    objc_super v20 = (void *)v17[5];
    v16[5] = v20;
    v16[6] = v17[6];
    double v21 = (void *)(v9 & ((unint64_t)v16 + 63));
    uint64_t v22 = (void *)(v9 & ((unint64_t)v17 + 63));
    objc_super v23 = (uint64_t *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
    id v24 = v20;
    swift_bridgeObjectRetain();
    if (v34 < 0)
    {
      int v27 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v23 + v8 + 8) & ~v8);
      uint64_t v26 = ~v8;
      if (v27)
      {
LABEL_14:
        memcpy(v21, v22, v10);
LABEL_17:
        *((unsigned char *)v21 + v10) = *((unsigned char *)v22 + v10);
        return v4;
      }
    }
    else
    {
      uint64_t v25 = *v23;
      if ((unint64_t)*v23 >= 0xFFFFFFFF) {
        LODWORD(v25) = -1;
      }
      uint64_t v26 = ~v8;
      if (v25 != -1) {
        goto LABEL_14;
      }
    }
    *double v21 = *v22;
    uint64_t v28 = (void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v28 = *v23;
    uint64_t v29 = ((unint64_t)v28 + v8 + 8) & v26;
    uint64_t v30 = ((unint64_t)v23 + v8 + 8) & v26;
    Class v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v31(v29, v30, v33);
    goto LABEL_17;
  }
  uint64_t v14 = *a2;
  void *v4 = *a2;
  uint64_t v4 = (void *)(v14 + (v9 & (v8 + 16)));
  swift_retain();
  return v4;
}

uint64_t destroy for PageViewWrapper(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  unint64_t v4 = (a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v4);

  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v4 + (v8 | 7) + 56) & ~(v8 | 7);
  uint64_t v10 = ~v8;
  int v11 = (uint64_t *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
  {
    uint64_t v15 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v11 + v8 + 8) & v10);
    uint64_t v7 = v15;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v12 = *v11;
  if ((unint64_t)*v11 >= 0xFFFFFFFF) {
    LODWORD(v12) = -1;
  }
  uint64_t result = (v12 + 1);
  if (v12 == -1)
  {
LABEL_7:
    uint64_t v16 = v7;
    swift_release();
    swift_release();
    uint64_t v14 = *(uint64_t (**)(unint64_t, uint64_t))(v16 + 8);
    return v14(((unint64_t)v11 + v8 + 8) & v10, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PageViewWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v7 = (void *)((a1 + 55) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((a2 + 55) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[3];
  void v7[3] = v9;
  v7[4] = v8[4];
  uint64_t v10 = **(void (***)(void *, void *, uint64_t))(v9 - 8);
  swift_retain();
  v10(v7, v8, v9);
  int v11 = (void *)v8[5];
  v7[5] = v11;
  v7[6] = v8[6];
  uint64_t v12 = *(void *)(a3 + 16);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int *)(v13 + 84);
  uint64_t v15 = *(_DWORD *)(v13 + 80);
  unint64_t v16 = *(_DWORD *)(v13 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  __dst = (void *)(((unint64_t)v7 + v15 + 56) & v16);
  uint64_t v17 = (void *)(((unint64_t)v8 + v15 + 56) & v16);
  uint64_t v18 = ~v15;
  size_t v19 = ((v15 + 16) & ~v15) + *(void *)(v13 + 64);
  objc_super v20 = (uint64_t *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
  id v21 = v11;
  swift_bridgeObjectRetain();
  if ((v14 & 0x80000000) == 0)
  {
    uint64_t v22 = *v20;
    if ((unint64_t)*v20 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    if (v22 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    objc_super v23 = __dst;
    void *__dst = *v17;
    id v24 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v30 = v12;
    *id v24 = *v20;
    uint64_t v25 = v15 + 8;
    uint64_t v26 = ((unint64_t)v24 + v15 + 8) & v18;
    unint64_t v27 = ((unint64_t)v20 + v25) & v18;
    uint64_t v28 = *(void (**)(uint64_t, unint64_t, uint64_t))(v13 + 16);
    swift_retain();
    swift_retain();
    v28(v26, v27, v30);
    goto LABEL_8;
  }
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v13 + 48))(((unint64_t)v20 + v15 + 8) & v18, v14, v12))goto LABEL_7; {
LABEL_5:
  }
  objc_super v23 = __dst;
  memcpy(__dst, v17, v19);
LABEL_8:
  *((unsigned char *)v23 + v19) = *((unsigned char *)v17 + v19);
  return a1;
}

uint64_t *assignWithCopy for PageViewWrapper(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  a1[5] = a2[5];
  swift_retain();
  swift_release();
  long long v6 = (uint64_t *)(((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = (uint64_t *)(((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8);
  __swift_assign_boxed_opaque_existential_1(v6, v7);
  uint64_t v8 = (void *)v7[5];
  uint64_t v9 = (void *)v6[5];
  v6[5] = (uint64_t)v8;
  id v10 = v8;

  v6[6] = v7[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(a3 + 16);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned int *)(v12 + 84);
  uint64_t v14 = *(_DWORD *)(v12 + 80);
  unint64_t v15 = *(_DWORD *)(v12 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (void *)(((unint64_t)v6 + v14 + 56) & v15);
  uint64_t v17 = (void *)(((unint64_t)v7 + v14 + 56) & v15);
  uint64_t v18 = ~v14;
  uint64_t v19 = *(void *)(v12 + 64);
  size_t v20 = ((v14 + 16) & ~v14) + v19;
  id v21 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = ~v14;
  uint64_t v32 = v11;
  if ((v13 & 0x80000000) != 0)
  {
    size_t v30 = ((v14 + 16) & ~v14) + v19;
    uint64_t v25 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v12 + 48);
    int v29 = v25(((unint64_t)v21 + v14 + 8) & v18, v13, v11);
    uint64_t v26 = v11;
    uint64_t v22 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v24 = v25(((unint64_t)v22 + v14 + 8) & v18, v13, v26);
    size_t v20 = v30;
    if (!v29)
    {
LABEL_5:
      if (!v24)
      {
        void *v16 = *v17;
        swift_retain();
        swift_release();
        *id v21 = *v22;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 24))(((unint64_t)v21 + v14 + 8) & v31, ((unint64_t)v22 + v14 + 8) & v31, v32);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v12 + 8))(((unint64_t)v21 + v14 + 8) & v31, v32);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v22 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v23 = *v22;
    if (*v22 >= 0xFFFFFFFFuLL) {
      LODWORD(v23) = -1;
    }
    int v24 = v23 + 1;
    if (*v21 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v24)
  {
    void *v16 = *v17;
    *id v21 = *v22;
    unint64_t v27 = *(void (**)(unint64_t, unint64_t, uint64_t))(v12 + 16);
    swift_retain();
    swift_retain();
    v27(((unint64_t)v21 + v14 + 8) & v31, ((unint64_t)v22 + v14 + 8) & v31, v32);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v16, v17, v20);
LABEL_12:
  *((unsigned char *)v16 + v20) = *((unsigned char *)v17 + v20);
  return a1;
}

_OWORD *initializeWithTake for PageViewWrapper(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  unint64_t v5 = ((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = ((unint64_t)a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  long long v7 = *(_OWORD *)v6;
  long long v8 = *(_OWORD *)(v6 + 16);
  long long v9 = *(_OWORD *)(v6 + 32);
  *(void *)(v5 + 48) = *(void *)(v6 + 48);
  *(_OWORD *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = v9;
  *(_OWORD *)unint64_t v5 = v7;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  unint64_t v13 = *(_DWORD *)(v11 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = (void *)((v12 + 56 + v5) & v13);
  unint64_t v15 = (void *)((v12 + 56 + v6) & v13);
  uint64_t v16 = ~v12;
  size_t v17 = ((v12 + 16) & ~v12) + *(void *)(v11 + 64);
  uint64_t v18 = (uint64_t *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v11 + 84) & 0x80000000) == 0)
  {
    uint64_t v19 = *v18;
    if ((unint64_t)*v18 >= 0xFFFFFFFF) {
      LODWORD(v19) = -1;
    }
    if (v19 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v14 = *v15;
    size_t v20 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    *size_t v20 = *v18;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 32))(((unint64_t)v20 + v12 + 8) & v16, ((unint64_t)v18 + v12 + 8) & v16, v10);
    goto LABEL_8;
  }
  if (!(*(unsigned int (**)(unint64_t))(v11 + 48))(((unint64_t)v18 + v12 + 8) & v16)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v14, v15, v17);
LABEL_8:
  *((unsigned char *)v14 + v17) = *((unsigned char *)v15 + v17);
  return a1;
}

uint64_t assignWithTake for PageViewWrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_release();
  unint64_t v8 = (a1 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (a2 + 55) & 0xFFFFFFFFFFFFFFF8;
  __swift_destroy_boxed_opaque_existential_1(v8);
  long long v10 = *(_OWORD *)v9;
  long long v11 = *(_OWORD *)(v9 + 16);
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  *(_OWORD *)unint64_t v8 = v10;
  *(_OWORD *)(v8 + 16) = v11;
  uint64_t v12 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = *(void *)(v9 + 40);

  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned int *)(v14 + 84);
  uint64_t v16 = *(_DWORD *)(v14 + 80);
  unint64_t v17 = *(_DWORD *)(v14 + 80) & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = (void *)((v16 + 56 + v8) & v17);
  uint64_t v19 = (void *)((v16 + 56 + v9) & v17);
  uint64_t v20 = *(void *)(v14 + 64);
  size_t v21 = ((v16 + 16) & ~v16) + v20;
  uint64_t v22 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v31 = ~v16;
  if ((v15 & 0x80000000) != 0)
  {
    size_t v30 = v19;
    size_t v29 = ((v16 + 16) & ~v16) + v20;
    uint64_t v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v14 + 48);
    int v28 = v26(((unint64_t)v22 + v16 + 8) & ~v16, v15, v13);
    uint64_t v23 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v25 = v26(((unint64_t)v23 + v16 + 8) & ~v16, v15, v13);
    size_t v21 = v29;
    uint64_t v19 = v30;
    if (!v28)
    {
LABEL_5:
      if (!v25)
      {
        *uint64_t v18 = *v19;
        swift_release();
        *uint64_t v22 = *v23;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 40))(((unint64_t)v22 + v16 + 8) & v31, ((unint64_t)v23 + v16 + 8) & v31, v13);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v14 + 8))(((unint64_t)v22 + v16 + 8) & v31, v13);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v23 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v24 = *v23;
    if (*v23 >= 0xFFFFFFFFuLL) {
      LODWORD(v24) = -1;
    }
    int v25 = v24 + 1;
    if (*v22 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v25)
  {
    *uint64_t v18 = *v19;
    *uint64_t v22 = *v23;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v14 + 32))(((unint64_t)v22 + v16 + 8) & v31, ((unint64_t)v23 + v16 + 8) & v31, v13);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v18, v19, v21);
LABEL_12:
  *((unsigned char *)v18 + v21) = *((unsigned char *)v19 + v21);
  return a1;
}

uint64_t getEnumTagSinglePayload for PageViewWrapper(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    int v6 = 0x7FFFFFFF;
  }
  else {
    int v6 = *(_DWORD *)(v4 + 84);
  }
  unsigned int v7 = v6 - 1;
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v7;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v10 = v8 | 7;
  int v11 = a2 - v9;
  if (a2 <= v9) {
    goto LABEL_26;
  }
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v8 + 16) & ~v8) + ((v8 + 104) & ~v10) + 1;
  char v13 = 8 * v12;
  if (v12 <= 3)
  {
    unsigned int v16 = ((v11 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v16))
    {
      int v14 = *(_DWORD *)((char *)a1 + v12);
      if (!v14) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v16 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v12);
      if (!*(unsigned __int16 *)((char *)a1 + v12)) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v16 < 2)
    {
LABEL_26:
      if ((v7 & 0x80000000) != 0)
      {
        uint64_t v19 = (unint64_t *)(((((((unint64_t)a1 + 55) & 0xFFFFFFFFFFFFFFF8) + v10 + 56) & ~v10) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v5 & 0x80000000) != 0)
        {
          unsigned int v21 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v19 + v8 + 8) & ~v8);
        }
        else
        {
          unint64_t v20 = *v19;
          if (v20 >= 0xFFFFFFFF) {
            LODWORD(v20) = -1;
          }
          unsigned int v21 = v20 + 1;
        }
        if (v21 >= 2) {
          return v21 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v18 = *((void *)a1 + 3);
        if (v18 >= 0xFFFFFFFF) {
          LODWORD(v18) = -1;
        }
        return (v18 + 1);
      }
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v12);
  if (!*((unsigned char *)a1 + v12)) {
    goto LABEL_26;
  }
LABEL_18:
  int v17 = (v14 - 1) << v13;
  if (v12 > 3) {
    int v17 = 0;
  }
  if (*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)
     + ((v8 + 16) & ~v8)
     + ((v8 + 104) & ~v10) != -1)
  {
    if (v12 > 3) {
      LODWORD(v12) = 4;
    }
    switch((int)v12)
    {
      case 2:
        LODWORD(v12) = *a1;
        break;
      case 3:
        LODWORD(v12) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v12) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v12) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v9 + (v12 | v17) + 1;
}

void storeEnumTagSinglePayload for PageViewWrapper(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  if (v8 - 1 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v8 - 1;
  }
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  size_t v12 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v13 = v12 + ((v11 + 104) & ~(v11 | 7)) + 1;
  BOOL v14 = a3 >= v10;
  unsigned int v15 = a3 - v10;
  if (v15 != 0 && v14)
  {
    if (v13 <= 3)
    {
      unsigned int v19 = ((v15 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
      if (HIWORD(v19))
      {
        int v16 = 4;
      }
      else if (v19 >= 0x100)
      {
        int v16 = 2;
      }
      else
      {
        int v16 = v19 > 1;
      }
    }
    else
    {
      int v16 = 1;
    }
  }
  else
  {
    int v16 = 0;
  }
  if (v10 < a2)
  {
    unsigned int v17 = ~v10 + a2;
    if (v13 < 4)
    {
      int v18 = (v17 >> (8 * v13)) + 1;
      if (v12 + ((v11 + 104) & ~(v11 | 7)) != -1)
      {
        int v20 = v17 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v20;
          a1[2] = BYTE2(v20);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v20;
        }
        else
        {
          *a1 = v20;
        }
      }
    }
    else
    {
      bzero(a1, v13);
      *(_DWORD *)a1 = v17;
      int v18 = 1;
    }
    switch(v16)
    {
      case 1:
        a1[v13] = v18;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v18;
        return;
      case 3:
        goto LABEL_71;
      case 4:
        *(_DWORD *)&a1[v13] = v18;
        return;
      default:
        return;
    }
  }
  switch(v16)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_71:
      __break(1u);
      JUMPOUT(0x1879AA054);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if ((v9 & 0x80000000) != 0)
        {
          unsigned int v21 = (unsigned char *)((((unint64_t)(a1 + 55) & 0xFFFFFFFFFFFFFFF8) + (v11 | 7) + 56) & ~(v11 | 7));
          if (v9 >= a2)
          {
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                unint64_t v27 = (void *)((unint64_t)(v21 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  int v28 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v29 = a2 + 1;
                  v28(((unint64_t)v27 + v11 + 8) & ~v11, v29);
                }
                else if (((a2 + 1) & 0x80000000) != 0)
                {
                  *unint64_t v27 = a2 - 0x7FFFFFFF;
                }
                else
                {
                  *unint64_t v27 = a2;
                }
              }
            }
            else
            {
              if (v12 <= 3) {
                int v25 = ~(-1 << (8 * v12));
              }
              else {
                int v25 = -1;
              }
              if (v12)
              {
                int v23 = v25 & (a2 - v8);
                if (v12 <= 3) {
                  int v26 = v12;
                }
                else {
                  int v26 = 4;
                }
                bzero(v21, v12);
                switch(v26)
                {
                  case 2:
LABEL_65:
                    *(_WORD *)unsigned int v21 = v23;
                    break;
                  case 3:
LABEL_64:
                    *(_WORD *)unsigned int v21 = v23;
                    v21[2] = BYTE2(v23);
                    break;
                  case 4:
LABEL_66:
                    *(_DWORD *)unsigned int v21 = v23;
                    break;
                  default:
LABEL_52:
                    *unsigned int v21 = v23;
                    break;
                }
              }
            }
          }
          else
          {
            if (v12 <= 3) {
              int v22 = ~(-1 << (8 * v12));
            }
            else {
              int v22 = -1;
            }
            if (v12)
            {
              int v23 = v22 & (a2 - v8);
              if (v12 <= 3) {
                int v24 = v12;
              }
              else {
                int v24 = 4;
              }
              bzero(v21, v12);
              switch(v24)
              {
                case 2:
                  goto LABEL_65;
                case 3:
                  goto LABEL_64;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *((void *)a1 + 5) = 0;
          *(_OWORD *)(a1 + 24) = 0u;
          *(_OWORD *)(a1 + 8) = 0u;
          *(void *)a1 = a2 ^ 0x80000000;
        }
        else
        {
          *((void *)a1 + 3) = a2 - 1;
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for View.Body : View in PageViewWrapper<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>)
  {
    type metadata accessor for ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>();
    type metadata accessor for StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>()
{
  if (!lazy cache variable for type metadata for ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>)
  {
    type metadata accessor for TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>(255);
    lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)> and conformance TupleView<A>, type metadata accessor for TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>);
    unint64_t v0 = type metadata accessor for ZStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>);
    }
  }
}

void type metadata accessor for TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>(uint64_t a1)
{
}

void type metadata accessor for (UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)()
{
  if (!lazy cache variable for type metadata for (UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>))
  {
    type metadata accessor for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>));
    }
  }
}

void type metadata accessor for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>()
{
  if (!lazy cache variable for type metadata for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)
  {
    type metadata accessor for IndexPath?(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type IndexViewPlacementModifier.IsAutomaticPredicate and conformance IndexViewPlacementModifier.IsAutomaticPredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>)
  {
    _s7SwiftUI7BindingVySiGMaTm_0(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PageIndexDisplayMode>, (uint64_t)&type metadata for PageIndexDisplayMode, MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type IndexViewPlacementModifier.IsAutomaticPredicate and conformance IndexViewPlacementModifier.IsAutomaticPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexViewPlacementModifier.IsAutomaticPredicate and conformance IndexViewPlacementModifier.IsAutomaticPredicate;
  if (!lazy protocol witness table cache variable for type IndexViewPlacementModifier.IsAutomaticPredicate and conformance IndexViewPlacementModifier.IsAutomaticPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewPlacementModifier.IsAutomaticPredicate and conformance IndexViewPlacementModifier.IsAutomaticPredicate);
  }
  return result;
}

void type metadata accessor for StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>)
  {
    type metadata accessor for ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>();
    lazy protocol witness table accessor for type IndexViewPlacementModifier.IsToolbarPredicate and conformance IndexViewPlacementModifier.IsToolbarPredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>);
    }
  }
}

void type metadata accessor for ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>()
{
  if (!lazy cache variable for type metadata for ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>)
  {
    type metadata accessor for IndexPath?(255, &lazy cache variable for type metadata for TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>, (uint64_t (*)(uint64_t))type metadata accessor for ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for TupleToolbarContent);
    unint64_t v0 = type metadata accessor for ToolbarModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>);
    }
  }
}

void type metadata accessor for ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>()
{
  if (!lazy cache variable for type metadata for ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>)
  {
    type metadata accessor for IndexPath?(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for ToolbarItemGroup();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>? and conformance <A> A?)
  {
    type metadata accessor for IndexPath?(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>(255);
    lazy protocol witness table accessor for type ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, (void (*)(void))lazy protocol witness table accessor for type IndexView and conformance IndexView, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PageIndexDisplayMode> and conformance _EnvironmentKeyWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexView and conformance IndexView()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexView and conformance IndexView;
  if (!lazy protocol witness table cache variable for type IndexView and conformance IndexView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexView and conformance IndexView);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PageIndexDisplayMode> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<PageIndexDisplayMode> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<PageIndexDisplayMode> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    _s7SwiftUI7BindingVySiGMaTm_0(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PageIndexDisplayMode>, (uint64_t)&type metadata for PageIndexDisplayMode, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<PageIndexDisplayMode> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IndexViewPlacementModifier.IsToolbarPredicate and conformance IndexViewPlacementModifier.IsToolbarPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexViewPlacementModifier.IsToolbarPredicate and conformance IndexViewPlacementModifier.IsToolbarPredicate;
  if (!lazy protocol witness table cache variable for type IndexViewPlacementModifier.IsToolbarPredicate and conformance IndexViewPlacementModifier.IsToolbarPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewPlacementModifier.IsToolbarPredicate and conformance IndexViewPlacementModifier.IsToolbarPredicate);
  }
  return result;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for IndexPath?(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of IndexView(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of IndexView(uint64_t a1)
{
  return a1;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TabBarPlacement?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    _s7SwiftUI7BindingVySiGMaTm_0(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_1879AAC1C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t outlined init with copy of UIKitPagingView(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of UIKitPagingView(uint64_t a1)
{
  return a1;
}

ValueMetadata *type metadata accessor for UIKitPagingView()
{
  return &type metadata for UIKitPagingView;
}

uint64_t sub_1879AACDC()
{
  return lazy protocol witness table accessor for type ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<TabBarPlacement?>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<TabBarPlacement?>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<TabBarPlacement?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<TabBarPlacement?>>)
  {
    type metadata accessor for ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<TabBarPlacement?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TabBarPlacement?>, &lazy cache variable for type metadata for TabBarPlacement?, (uint64_t)&type metadata for TabBarPlacement, MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>, _EnvironmentKeyWritingModifier<TabBarPlacement?>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>, StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>> and conformance ZStack<A>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>> and conformance ZStack<A>()
{
  return lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>> and conformance ZStack<A>, (void (*)(uint64_t))type metadata accessor for ZStack<TupleView<(UIKitPagingView, StaticIf<IndexViewPlacementModifier.IsAutomaticPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>, _PaddingLayout>?, EmptyView>)>>);
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<_ViewList_View> and conformance _UIHostingView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IndexViewPlacementModifier.IsToolbarPredicate, ToolbarModifier<(), TupleToolbarContent<ToolbarItemGroup<ModifiedContent<ModifiedContent<ModifiedContent<IndexView, _EnvironmentKeyWritingModifier<PageIndexDisplayMode>>, _SafeAreaRegionsIgnoringLayout>, AccessibilityAttachmentModifier>?>>>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<TabBarPlacement?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TabBarPlacement?>, &lazy cache variable for type metadata for TabBarPlacement?, (uint64_t)&type metadata for TabBarPlacement, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t outlined assign with take of _VariadicView_Children(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t LeadingAlignedDisclosureGroupStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = v3;
  swift_retain();

  return swift_retain();
}

uint64_t protocol witness for DisclosureGroupStyle.makeBody(configuration:) in conformance LeadingAlignedDisclosureGroupStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  char v3 = *(unsigned char *)(a1 + 16);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = v3;
  swift_retain();

  return swift_retain();
}

uint64_t closure #1 in StyledView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v61 = a4;
  type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>();
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (_WORD *)((char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>;
  type metadata accessor for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v58 = (uint64_t)&v52 - v12;
  type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v57 = (uint64_t)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
  uint64_t v59 = v15 - 8;
  MEMORY[0x1F4188790](v15 - 8);
  v56 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v55 = (uint64_t)&v52 - v18;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  *(unsigned char *)(v19 + 32) = a3;
  *uint64_t v10 = 256;
  int v20 = (uint64_t (**)())((char *)v10 + *(int *)(v8 + 44));
  *int v20 = partial apply for implicit closure #2 in implicit closure #1 in closure #1 in StyledView.body.getter;
  v20[1] = (uint64_t (*)())v19;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  unsigned int v21 = (char *)v10 + *(int *)(v8 + 48);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v53 = static VerticalAlignment.center.getter();
  uint64_t v63 = a1;
  uint64_t v64 = a2;
  uint64_t v54 = a2;
  char v22 = a3;
  char v65 = a3;
  _s7SwiftUI7BindingVySbGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  uint64_t v24 = v23;
  MEMORY[0x18C113DA0](v77);
  char v25 = v77[0];
  uint64_t v26 = static VerticalAlignment.center.getter();
  uint64_t v63 = a1;
  uint64_t v64 = a2;
  char v65 = v22;
  LOBYTE(a2) = v22;
  MEMORY[0x18C113DA0](v77, v24);
  char v27 = v77[0];
  LOBYTE(v8) = static Edge.Set.vertical.getter();
  EdgeInsets.init(_all:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v35 = v34;
  swift_release();
  HIBYTE(v77[0]) = 0;
  char v74 = 1;
  char v72 = 1;
  char v70 = 1;
  char v66 = 0;
  *(void *)unsigned int v21 = v53;
  *((void *)v21 + 1) = 0x4010000000000000;
  v21[16] = 0;
  *(_DWORD *)(v21 + 17) = v77[0];
  *((_DWORD *)v21 + 5) = *(_DWORD *)((char *)v77 + 3);
  v21[24] = 0;
  v21[25] = v25;
  uint64_t v36 = (uint64_t)v56;
  *(_DWORD *)(v21 + 26) = v75;
  *((_WORD *)v21 + 15) = v76;
  *((void *)v21 + 4) = 0;
  v21[40] = v74;
  *(_DWORD *)(v21 + 41) = *(_DWORD *)v73;
  *((_DWORD *)v21 + 11) = *(_DWORD *)&v73[3];
  *((void *)v21 + 6) = v26;
  *((void *)v21 + 7) = 0;
  v21[64] = v72;
  *(_DWORD *)(v21 + 65) = *(_DWORD *)v71;
  *((_DWORD *)v21 + 17) = *(_DWORD *)&v71[3];
  *((void *)v21 + 9) = 0;
  v21[80] = v70;
  v21[81] = 1;
  v21[82] = v27;
  v21[87] = v69;
  *(_DWORD *)(v21 + 83) = v68;
  v21[88] = v8;
  *((_DWORD *)v21 + 23) = *(_DWORD *)&v67[3];
  *(_DWORD *)(v21 + 89) = *(_DWORD *)v67;
  *((void *)v21 + 12) = v29;
  *((void *)v21 + 13) = v31;
  *((void *)v21 + 14) = v33;
  *((void *)v21 + 15) = v35;
  v21[128] = v66;
  uint64_t v37 = v54;
  uint64_t v63 = a1;
  uint64_t v64 = v54;
  char v65 = a2;
  MEMORY[0x18C113DA0](&v62, v24);
  uint64_t v38 = v58;
  specialized AccessibilityDisclosureModifier.body(content:)(v62, v58);
  outlined destroy of Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>);
  uint64_t v39 = v57;
  outlined init with copy of ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>(v38, v57);
  _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_0(v38, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, (uint64_t)v60, (uint64_t)&type metadata for AccessibilityAttachmentModifier, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v41 = swift_getKeyPath();
  outlined init with copy of ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>(v39, v36, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
  uint64_t v42 = v36 + *(int *)(v59 + 44);
  *(void *)uint64_t v42 = KeyPath;
  *(unsigned char *)(v42 + 8) = 0;
  *(void *)(v42 + 16) = v41;
  *(unsigned char *)(v42 + 24) = 0;
  outlined destroy of Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>(v39, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
  uint64_t v43 = v55;
  outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(v36, v55);
  uint64_t v63 = a1;
  uint64_t v64 = v37;
  char v65 = a2;
  MEMORY[0x18C113DA0](&v62, v24);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  if (v62 == 1)
  {
    uint64_t v44 = static HorizontalAlignment.center.getter();
    lazy protocol witness table accessor for type VerticalDisclosureTransition and conformance VerticalDisclosureTransition();
    uint64_t v46 = AnyTransition.init<A>(_:)();
    uint64_t v45 = 1;
  }
  uint64_t v47 = v43;
  outlined init with copy of ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>(v43, v36, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  uint64_t v48 = v61;
  outlined init with copy of ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>(v36, v61, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)();
  v50 = (uint64_t *)(v48 + *(int *)(v49 + 48));
  uint64_t *v50 = v44;
  v50[1] = 0;
  v50[2] = v45;
  v50[3] = v46;
  swift_retain();
  outlined destroy of Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>(v47, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
  swift_release();
  return outlined destroy of Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>(v36, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
}

uint64_t implicit closure #2 in implicit closure #1 in closure #1 in StyledView.body.getter()
{
  swift_retain();
  swift_retain();
  specialized static RotatingDisclosureIndicator.toggle(_:)();
  swift_release();

  return swift_release();
}

uint64_t protocol witness for View.body.getter in conformance StyledView@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = static HorizontalAlignment.center.getter();
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>();
  return closure #1 in StyledView.body.getter(v3, v4, v5, a1 + *(int *)(v6 + 44));
}

uint64_t one-time initialization function for verticalDisclosure()
{
  lazy protocol witness table accessor for type VerticalDisclosureTransition and conformance VerticalDisclosureTransition();
  uint64_t result = AnyTransition.init<A>(_:)();
  static AnyTransition.verticalDisclosure = result;
  return result;
}

uint64_t static AnyTransition.verticalDisclosure.getter()
{
  if (one-time initialization token for verticalDisclosure != -1) {
    swift_once();
  }

  return swift_retain();
}

uint64_t associated type witness table accessor for DisclosureGroupStyle.Body : View in LeadingAlignedDisclosureGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for LeadingAlignedDisclosureGroupStyle()
{
  return &type metadata for LeadingAlignedDisclosureGroupStyle;
}

unint64_t lazy protocol witness table accessor for type StyledView and conformance StyledView()
{
  unint64_t result = lazy protocol witness table cache variable for type StyledView and conformance StyledView;
  if (!lazy protocol witness table cache variable for type StyledView and conformance StyledView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyledView and conformance StyledView);
  }
  return result;
}

void *type metadata accessor for StyledView()
{
  return &unk_1ED40D650;
}

uint64_t associated type witness table accessor for View.Body : View in StyledView()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?), MEMORY[0x1E4F41850]);
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>);
    }
  }
}

void type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>(255, &lazy cache variable for type metadata for ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>();
    type metadata accessor for PrimitiveButtonStyleContainerModifier<PlainButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyle and conformance BorderlessButtonStyle, (uint64_t)&type metadata for BorderlessButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>);
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>()
{
  if (!lazy cache variable for type metadata for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>)
  {
    type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>(255);
    lazy protocol witness table accessor for type ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>> and conformance <> StaticIf<A, B, C>);
    unint64_t v0 = type metadata accessor for Button();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>);
    }
  }
}

void type metadata accessor for ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>)
  {
    type metadata accessor for InterfaceIdiomPredicate<MacInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], MEMORY[0x1E4F40C60]);
    type metadata accessor for HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>(255);
    type metadata accessor for HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>(255);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>);
    }
  }
}

void type metadata accessor for HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>(uint64_t a1)
{
}

void type metadata accessor for TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>()
{
  if (!lazy cache variable for type metadata for TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>)
  {
    type metadata accessor for (RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)(255, &lazy cache variable for type metadata for (RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer));
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>);
    }
  }
}

void type metadata accessor for HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>(uint64_t a1)
{
}

void type metadata accessor for HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)> and conformance TupleView<A>(a4, a5);
    unint64_t v8 = type metadata accessor for HStack();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>()
{
  if (!lazy cache variable for type metadata for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>)
  {
    type metadata accessor for (RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)(255, &lazy cache variable for type metadata for (DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator));
    unint64_t v0 = type metadata accessor for TupleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>);
    }
  }
}

void type metadata accessor for (RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v4) {
      atomic_store(TupleTypeMetadata3, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)> and conformance TupleView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>();
    lazy protocol witness table accessor for type TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>> and conformance HStack<A>, type metadata accessor for HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>);
    lazy protocol witness table accessor for type TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>> and conformance HStack<A>, type metadata accessor for HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>)
  {
    type metadata accessor for InterfaceIdiomPredicate<MacInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>, MEMORY[0x1E4F40158], MEMORY[0x1E4F40150], MEMORY[0x1E4F40C60]);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<PlainButtonStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t)&type metadata for PlainButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>)
  {
    type metadata accessor for InterfaceIdiomPredicate<MacInterfaceIdiom>(255, &lazy cache variable for type metadata for VStack<DisclosureGroupStyleConfiguration.Content>, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Content, (uint64_t)&protocol witness table for DisclosureGroupStyleConfiguration.Content, MEMORY[0x1E4F415E8]);
    type metadata accessor for InterfaceIdiomPredicate<MacInterfaceIdiom>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TransitionTraitKey>, MEMORY[0x1E4F40358], MEMORY[0x1E4F40350], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>);
    }
  }
}

void type metadata accessor for InterfaceIdiomPredicate<MacInterfaceIdiom>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_1879AC2F8()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in StyledView.body.getter()
{
  return implicit closure #2 in implicit closure #1 in closure #1 in StyledView.body.getter();
}

double protocol witness for Transition.body(content:phase:) in conformance VerticalDisclosureTransition@<D0>(uint64_t a1@<X8>)
{
  static Alignment.top.getter();
  _FrameLayout.init(width:height:alignment:)();
  *(_WORD *)a1 = 256;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  double result = *(double *)&v7;
  *(_OWORD *)(a1 + 40) = v7;
  *(_WORD *)(a1 + 56) = 0;
  return result;
}

uint64_t protocol witness for Transition._makeContentTransition(transition:) in conformance VerticalDisclosureTransition(uint64_t result)
{
  if (*(unsigned char *)result == 3)
  {
    uint64_t v1 = result;
    double result = outlined consume of _Transition_ContentTransition.Result(*(void *)(result + 24), *(unsigned char *)(result + 32));
    *(void *)(v1 + 24) = 0;
    *(unsigned char *)(v1 + 32) = 0;
  }
  return result;
}

uint64_t specialized AccessibilityDisclosureModifier.body(content:)@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  type metadata accessor for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>);
  MEMORY[0x1F4188790](v4 - 8);
  char v6 = &v8[-v5];
  v8[0] = a1;
  lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  AccessibilityValueStorage.init<A>(_:description:)();
  outlined init with copy of AccessibilityValueStorage((uint64_t)v9, (uint64_t)v8);
  specialized View.accessibility<A>(_:_:isEnabled:)((uint64_t)v8, 1, (uint64_t)v6);
  _s7SwiftUI25AccessibilityValueStorageVSgWOhTm_0((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s7SwiftUI7BindingVySbGMaTm_1);
  outlined destroy of AccessibilityValueStorage((uint64_t)v9);
  return outlined init with take of ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>((uint64_t)v6, a2);
}

uint64_t outlined init with copy of ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type VerticalDisclosureTransition and conformance VerticalDisclosureTransition()
{
  unint64_t result = lazy protocol witness table cache variable for type VerticalDisclosureTransition and conformance VerticalDisclosureTransition;
  if (!lazy protocol witness table cache variable for type VerticalDisclosureTransition and conformance VerticalDisclosureTransition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalDisclosureTransition and conformance VerticalDisclosureTransition);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue;
  if (!lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue);
  }
  return result;
}

uint64_t outlined init with take of ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, (void (*)(uint64_t))type metadata accessor for Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *type metadata accessor for VerticalDisclosureTransition()
{
  return &unk_1ED455070;
}

uint64_t sub_1879AC91C()
{
  return lazy protocol witness table accessor for type TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>);
}

void type metadata accessor for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?), MEMORY[0x1E4F41850]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)> and conformance TupleView<A>();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?), MEMORY[0x1E4F41850]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<ModifiedContent<ModifiedContent<Button<ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout>>, AccessibilityAttachmentModifier>, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, EmptyModifier>>, PrimitiveButtonStyleContainerModifier<BorderlessButtonStyle>>, ModifiedContent<VStack<DisclosureGroupStyleConfiguration.Content>, _TraitWritingModifier<TransitionTraitKey>>?)> and conformance TupleView<A>);
  }
  return result;
}

uint64_t associated type witness table accessor for Transition.Body : View in VerticalDisclosureTransition()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>>();
    lazy protocol witness table accessor for type ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>(255);
    type metadata accessor for PrimitiveButtonStyleContainerModifier<PlainButtonStyle>(255, (unint64_t *)&lazy cache variable for type metadata for _ClipEffect<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E4F41830], MEMORY[0x1E4F3F580]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>, _ClipEffect<Rectangle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, _FrameLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>)
  {
    _s7SwiftUI7BindingVySbGMaTm_1(255, &lazy cache variable for type metadata for PlaceholderContentView<VerticalDisclosureTransition>, (uint64_t)&unk_1ED455070, MEMORY[0x1E4F40988]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>);
    }
  }
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<PlainButtonStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, HStack<TupleView<(RotatingDisclosureIndicator, DisclosureGroupStyleConfiguration.Label, Spacer)>>, HStack<TupleView<(DisclosureGroupStyleConfiguration.Label, Spacer, RotatingDisclosureIndicator)>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<PlaceholderContentView<VerticalDisclosureTransition>, _FixedSizeLayout>, (void (*)(void))lazy protocol witness table accessor for type PlaceholderContentView<VerticalDisclosureTransition> and conformance PlaceholderContentView<A>);
}

unint64_t lazy protocol witness table accessor for type PlaceholderContentView<VerticalDisclosureTransition> and conformance PlaceholderContentView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PlaceholderContentView<VerticalDisclosureTransition> and conformance PlaceholderContentView<A>;
  if (!lazy protocol witness table cache variable for type PlaceholderContentView<VerticalDisclosureTransition> and conformance PlaceholderContentView<A>)
  {
    _s7SwiftUI7BindingVySbGMaTm_1(255, &lazy cache variable for type metadata for PlaceholderContentView<VerticalDisclosureTransition>, (uint64_t)&unk_1ED455070, MEMORY[0x1E4F40988]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlaceholderContentView<VerticalDisclosureTransition> and conformance PlaceholderContentView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>;
  if (!lazy protocol witness table cache variable for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<PlainButtonStyle>(255, (unint64_t *)&lazy cache variable for type metadata for _ClipEffect<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E4F41830], MEMORY[0x1E4F3F580]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ClipEffect<Rectangle> and conformance _ClipEffect<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.layoutDirection : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.layoutDirection.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for EnvironmentValues.layoutDirection : EnvironmentValues()
{
  return EnvironmentValues.layoutDirection.setter();
}

uint64_t sub_1879ACF48@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.layoutDirection.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_1879ACF8C()
{
  return EnvironmentValues.layoutDirection.setter();
}

unsigned char *_LayoutDirectionBehaviorEffect.init(behavior:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t View.layoutDirectionBehavior(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4 = *a1;
  return MEMORY[0x18C113660](&v4, a2, &type metadata for _LayoutDirectionBehaviorEffect, a3);
}

void _LayoutDirectionBehaviorEffect.behavior.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *_LayoutDirectionBehaviorEffect.behavior.setter(unsigned char *result)
{
  unsigned char *v1 = *result;
  return result;
}

uint64_t (*_LayoutDirectionBehaviorEffect.behavior.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void protocol witness for ViewModifier.body(content:) in conformance _LayoutDirectionBehaviorEffect()
{
}

uint64_t protocol witness for Rule.value.getter in conformance FlipForRTLEnvironment@<X0>(void *a1@<X8>)
{
  return FlipForRTLEnvironment.value.getter(a1);
}

double protocol witness for static Rule.initialValue.getter in conformance FlipForRTLTransform@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

void protocol witness for Rule.value.getter in conformance FlipForRTLTransform(uint64_t a1@<X8>)
{
}

unsigned char *protocol witness for Rule.value.getter in conformance FlipForRTLFrame@<X0>(void *a1@<X8>)
{
  return FlipForRTLFrame.value.getter(a1);
}

__n128 protocol witness for Rule.value.getter in conformance FlipForRTLContainerPosition@<Q0>(__n128 *a1@<X8>)
{
  int v2 = *(unsigned __int8 *)AGGraphGetValue();
  if (v2 == 2 || ((v2 & 1) == 0) == *(unsigned char *)AGGraphGetValue())
  {
    Value = (__n128 *)AGGraphGetValue();
    __n128 result = *Value;
    *a1 = *Value;
  }
  else
  {
    ViewOrigin.init()();
  }
  return result;
}

void protocol witness for static Rule.initialValue.getter in conformance FlipForRTLDisplayList(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 10) = 0;
  *(_WORD *)(a1 + 8) = 0;
}

_UNKNOWN **base witness table accessor for ViewModifier in _LayoutDirectionBehaviorEffect()
{
  return &protocol witness table for _LayoutDirectionBehaviorEffect;
}

unsigned char *storeEnumTagSinglePayload for _LayoutDirectionBehaviorEffect(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1879AD230);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _LayoutDirectionBehaviorEffect()
{
  return &type metadata for _LayoutDirectionBehaviorEffect;
}

uint64_t sub_1879AD268()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for FlipForRTLDisplayList()
{
  return &unk_1ED474B38;
}

void *type metadata accessor for FlipForRTLContainerPosition()
{
  return &unk_1ED44F3D0;
}

void *type metadata accessor for FlipForRTLFrame()
{
  return &unk_1ED419EE8;
}

void *type metadata accessor for FlipForRTLTransform()
{
  return &unk_1ED42BD48;
}

void *type metadata accessor for FlipForRTLEnvironment()
{
  return &unk_1ED434CB8;
}

uint64_t sub_1879AD31C()
{
  return swift_deallocObject();
}

_UNKNOWN **base witness table accessor for ViewModifier in ArchivesInteractiveControlsEffect()
{
  return &protocol witness table for ArchivesInteractiveControlsEffect;
}

void protocol witness for _RendererEffect.effectValue(size:) in conformance ArchivesInteractiveControlsEffect(uint64_t a1@<X8>)
{
  *(void *)a1 = 8;
  *(_DWORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 12) = 2;
}

void protocol witness for _RendererEffect.scrapeableContent.getter in conformance ArchivesInteractiveControlsEffect(void *a1@<X8>)
{
  *a1 = 0xF000000000000007;
}

unint64_t lazy protocol witness table accessor for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect;
  if (!lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect;
  if (!lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect;
  if (!lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect;
  if (!lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect;
  if (!lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivesInteractiveControlsEffect and conformance ArchivesInteractiveControlsEffect);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ArchivesInteractiveControlsEffect()
{
  return static RendererEffect.makeRendererEffect(effect:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance ArchivesInteractiveControlsEffect()
{
}

void SwiftUISearchController.customAccessoryRecoveryGesture.didset(void *a1)
{
  int v2 = v1;
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryRecoveryGesture;
  unsigned int v4 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryRecoveryGesture];
  if (!a1)
  {
    if (!v4) {
      return;
    }
    goto LABEL_7;
  }
  id v5 = a1;
  if (!v4
    || (type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UITapGestureRecognizer), v6 = v4, id v5 = v5, v7 = static NSObject.== infix(_:_:)(), v5, v6, (v7 & 1) == 0))
  {
    id v8 = v5;
    id v9 = objc_msgSend(v2, sel_searchBar);
    id v10 = objc_msgSend(v9, sel_searchTextField);

    objc_msgSend(v10, sel_removeGestureRecognizer_, v8);
    unsigned int v4 = *(void **)&v2[v3];
    if (v4)
    {
LABEL_7:
      id v11 = v4;
      id v12 = objc_msgSend(v2, sel_searchBar);
      id v13 = objc_msgSend(v12, sel_searchTextField);

      objc_msgSend(v13, sel_addGestureRecognizer_, v11);
    }
  }
}

void @objc SwiftUISearchController.viewDidAppear(_:)(void *a1, uint64_t a2, uint64_t a3, const char **a4, void (*a5)(id))
{
  v11.receiver = a1;
  v11.super_class = (Class)type metadata accessor for SwiftUISearchController(0);
  id v8 = *a4;
  id v9 = v11.receiver;
  id v10 = objc_msgSendSuper2(&v11, v8, a3);
  a5(v10);
}

Swift::Void __swiftcall SwiftUISearchController.handleCustomAccessoryRecoveryGesture()()
{
  uint64_t v1 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  id v6 = (char *)&v19 - v5;
  type metadata accessor for ToolbarStorage.SearchItem?(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v7);
  id v10 = (char *)&v19 - v9;
  uint64_t v11 = MEMORY[0x1E4FBB718];
  type metadata accessor for ToolbarStorage.SearchItem?(0, (unint64_t *)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v19 - v13;
  uint64_t v15 = v0 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_searchItem;
  swift_beginAccess();
  outlined init with copy of Toolbar.UpdateContext?(v15, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, v11, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  uint64_t v16 = type metadata accessor for ToolbarStorage.SearchItem(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v14, 1, v16) != 1)
  {
    outlined init with copy of Toolbar.UpdateContext?((uint64_t)v14, (uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
    MEMORY[0x18C113DA0](v8);
    if (*v6 != 2)
    {
      int v17 = v6[2];
      _s7SwiftUI24SearchFieldConfigurationVWOcTm_0((uint64_t)v6, (uint64_t)v3, type metadata accessor for SearchFieldState);
      if (v17 == 2)
      {
        int v18 = v3[3];
        _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v3, type metadata accessor for SearchFieldState);
        if (v18 == 2 || (v18 & 1) == 0) {
          goto LABEL_7;
        }
      }
      else
      {
        _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v3, type metadata accessor for SearchFieldState);
        if ((v17 & 1) == 0) {
          goto LABEL_7;
        }
      }
      char *v6 = 1;
    }
LABEL_7:
    dispatch thunk of AnyLocation.set(_:transaction:)();
    _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v6, type metadata accessor for SearchFieldState);
    outlined destroy of Toolbar.UpdateContext?((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638], (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
    _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v14, type metadata accessor for ToolbarStorage.SearchItem);
    return;
  }
  __break(1u);
}

void closure #1 in SwiftUISearchController.enqueueIsActiveUpdate(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess();
  uint64_t v3 = MEMORY[0x18C119DF0](v2);
  if (v3)
  {
    uint64_t v4 = (void *)v3;
    SwiftUISearchController.flushPendingIsActive()();
  }
}

Swift::Void __swiftcall SwiftUISearchController.viewDidLayoutSubviews()()
{
  uint64_t v1 = v0;
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for SwiftUISearchController(0);
  objc_msgSendSuper2(&v7, sel_viewDidLayoutSubviews);
  uint64_t v2 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActiveAnimated;
  int v3 = v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActiveAnimated];
  if (v3 != 2)
  {
    int v4 = v3 & 1;
    uint64_t v5 = SwiftUISearchController._searchBar.getter();
    int v6 = v5[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_isActive];
    v5[OBJC_IVAR____TtC7SwiftUI14UIKitSearchBar_isActive] = v4;
    if (v4 != v6) {
      UIKitSearchBar.updateCustomScopeBarIsActive(_:isAnimated:)(v4, 1);
    }
  }
  v1[v2] = 2;
}

uint64_t closure #1 in SwiftUISearchController.searchController(_:willChangeTo:)(uint64_t a1, char a2)
{
  char v2 = a2 & 1;
  uint64_t v3 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ToolbarStorage.SearchItem?(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0]();
  v5[1] = v2;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  return _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v5, type metadata accessor for SearchFieldState);
}

Swift::Void __swiftcall SwiftUISearchController.willPresentSearchController(_:)(UISearchController *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AttributedString();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v44 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ToolbarStorage.SearchItem?(0, (unint64_t *)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v45 = (uint64_t)&v44 - v15;
  *(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActiveAnimated) = 1;
  uint64_t v16 = [(UISearchController *)a1 searchBar];
  int v17 = [(UISearchBar *)v16 searchTextField];

  id v18 = [(UISearchTextField *)v17 text];
  if (!v18) {
    goto LABEL_6;
  }
  uint64_t v19 = v18;
  uint64_t v20 = v8;
  unsigned int v21 = v7;
  uint64_t v22 = v5;
  uint64_t v23 = v17;
  uint64_t v24 = v4;
  char v25 = v12;
  uint64_t v26 = v2;
  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v29 = v28;

  swift_bridgeObjectRelease();
  uint64_t v30 = HIBYTE(v29) & 0xF;
  uint64_t v31 = v27 & 0xFFFFFFFFFFFFLL;
  uint64_t v2 = v26;
  uint64_t v12 = v25;
  uint64_t v4 = v24;
  int v17 = v23;
  uint64_t v5 = v22;
  uint64_t v7 = v21;
  uint64_t v8 = v20;
  if ((v29 & 0x2000000000000000) == 0) {
    uint64_t v30 = v31;
  }
  if (v30)
  {
    char v32 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v33 = v2 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_searchItem;
    swift_beginAccess();
    uint64_t v34 = v45;
    outlined init with copy of Toolbar.UpdateContext?(v33, v45, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
    uint64_t v35 = type metadata accessor for ToolbarStorage.SearchItem(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v34, 1, v35) == 1)
    {
      __break(1u);
      goto LABEL_22;
    }
    type metadata accessor for ToolbarStorage.SearchItem?(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v36 = v44;
    MEMORY[0x18C113DA0]();
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, &v36[*(int *)(v8 + 36)], v4);
    _s7SwiftUI16SearchFieldStateVWOhTm_2(v34, type metadata accessor for ToolbarStorage.SearchItem);
    LOBYTE(v36) = AttributedString.isEmpty.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    char v32 = v36 ^ 1;
  }
  uint64_t v37 = [(UISearchTextField *)v17 tokens];
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISearchToken);
  unint64_t v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v38 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v39 = *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (v39)
  {

    if ((v32 & 1) == 0) {
      return;
    }
    goto LABEL_12;
  }
  uint64_t v40 = v2 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_searchItem;
  swift_beginAccess();
  outlined init with copy of Toolbar.UpdateContext?(v40, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  uint64_t v41 = type metadata accessor for ToolbarStorage.SearchItem(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v12, 1, v41) == 1)
  {
LABEL_22:
    __break(1u);
    return;
  }

  uint64_t v42 = *(void *)&v12[*(int *)(v41 + 20)];
  if (v42)
  {
    swift_bridgeObjectRetain();
    _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v12, type metadata accessor for ToolbarStorage.SearchItem);
    uint64_t v43 = *(void *)(v42 + 16);
    swift_bridgeObjectRelease();
    if (!(v32 & 1 | (v43 != 0))) {
      return;
    }
LABEL_12:
    *(unsigned char *)(*(void *)(v2 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_coordinator)
             + OBJC_IVAR____TtC7SwiftUI25UIKitSearchBarCoordinator_needsStateRestoration) = 1;
    return;
  }
  _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v12, type metadata accessor for ToolbarStorage.SearchItem);
  if (v32) {
    goto LABEL_12;
  }
}

id SwiftUISearchController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SwiftUISearchController(0);
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

BOOL protocol witness for UIKitSearchBarCoordinatorDelegate.coordinatorIsAnimating(_:) in conformance UISearchController()
{
  id v1 = objc_msgSend(v0, sel_transitionCoordinator);
  if (v1) {
    swift_unknownObjectRelease();
  }
  return v1 != 0;
}

uint64_t ObjC metadata update function for SwiftUISearchController()
{
  return type metadata accessor for SwiftUISearchController(0);
}

Swift::Void __swiftcall SwiftUISearchController.presentationControllerWillDismiss(_:)(UIPresentationController a1)
{
  uint64_t v2 = v1;
  type metadata accessor for ToolbarStorage.SearchItem?(0, &lazy cache variable for type metadata for SearchFieldConfiguration?, type metadata accessor for SearchFieldConfiguration, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v20 - v5;
  uint64_t v7 = type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void **)(v2 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryHost);
  if (v12)
  {
    id v13 = objc_msgSend(v12, sel_popoverPresentationController, v9);
    if (v13)
    {
      double v14 = v13;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIPresentationController);
      uint64_t v15 = a1.super.isa;
      id v21 = v14;
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
        uint64_t v17 = v2 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_configuration;
        swift_beginAccess();
        outlined init with copy of Toolbar.UpdateContext?(v17, (uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
        {

          outlined destroy of Toolbar.UpdateContext?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for SearchFieldConfiguration?, (uint64_t)type metadata accessor for SearchFieldConfiguration, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
        }
        else
        {
          uint64_t v19 = outlined init with take of ToolbarStorage.SearchItem((uint64_t)v6, (uint64_t)v11, type metadata accessor for SearchFieldConfiguration);
          MEMORY[0x1F4188790](v19);
          *(&v20 - 2) = (uint64_t)v11;
          static Animation.default.getter();
          withAnimation<A>(_:_:)();

          swift_release();
          _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v11, type metadata accessor for SearchFieldConfiguration);
        }
      }
      else
      {
        id v18 = v21;
      }
    }
  }
}

uint64_t closure #1 in SwiftUISearchController.presentationControllerWillDismiss(_:)()
{
  uint64_t v0 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (unsigned __int8 *)v7 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (unsigned __int8 *)v7 - v4;
  type metadata accessor for ToolbarStorage.SearchItem?(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0]();
  _s7SwiftUI24SearchFieldConfigurationVWOcTm_0((uint64_t)v5, (uint64_t)v2, type metadata accessor for SearchFieldState);
  if (*v2 != 2) {
    *uint64_t v2 = 0;
  }
  if ((specialized static SearchFieldState.== infix(_:_:)(v5, v2) & 1) == 0) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v2, type metadata accessor for SearchFieldState);
  return _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v5, type metadata accessor for SearchFieldState);
}

uint64_t UIKitSearchSuggestion.iconImage.getter()
{
  uint64_t v1 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v14 - v5;
  _s7SwiftUI24SearchFieldConfigurationVWOcTm_0(v0 + OBJC_IVAR____TtC7SwiftUI21UIKitSearchSuggestion_platformItem, (uint64_t)&v14 - v5, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  uint64_t v7 = MEMORY[0x1E4F41550];
  uint64_t v8 = MEMORY[0x1E4FBB718];
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_0((uint64_t)(v6 + 64), (uint64_t)v27, (uint64_t)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Toolbar.UpdateContext?);
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_0((uint64_t)v27, (uint64_t)&v28, (uint64_t)&lazy cache variable for type metadata for Image.Resolved?, v7, v8, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Toolbar.UpdateContext?);
  uint64_t v9 = 0;
  if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v28) != 1)
  {
    if (v40)
    {
      outlined release of Image.Resolved?((uint64_t)v27, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
      swift_unknownObjectRetain();
      self;
      uint64_t v9 = swift_dynamicCastObjCClassUnconditional();
      _s7SwiftUI24SearchFieldConfigurationVWOcTm_0((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      if (v9)
      {
        outlined release of Image.Resolved?((uint64_t)v27, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
LABEL_7:
        _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        goto LABEL_8;
      }
    }
    else
    {
      _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_0((uint64_t)v27, (uint64_t)&v15, (uint64_t)&lazy cache variable for type metadata for Image.Resolved?, MEMORY[0x1E4F41550], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Toolbar.UpdateContext?);
      outlined retain of Image.Resolved((uint64_t)&v15);
      _s7SwiftUI24SearchFieldConfigurationVWOcTm_0((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    }
    id v10 = v28;
    char v11 = v29;
    id v15 = v28;
    char v16 = v29;
    long long v17 = v30;
    uint64_t v18 = v31;
    char v19 = v32;
    long long v20 = v33;
    char v21 = v34;
    long long v22 = v35;
    long long v23 = v36;
    char v24 = v37;
    char v25 = v38;
    __int16 v26 = v39;
    uint64_t v12 = *((void *)v3 + 6);
    outlined copy of GraphicsImage.Contents?(v28, v29);
    uint64_t v9 = (uint64_t)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v12);
    outlined release of Image.Resolved?((uint64_t)v27, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
    outlined consume of GraphicsImage.Contents?(v10, v11);
    goto LABEL_7;
  }
LABEL_8:
  _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
  return v9;
}

uint64_t ObjC metadata update function for UIKitSearchSuggestion()
{
  return type metadata accessor for UIKitSearchSuggestion(0);
}

uint64_t type metadata accessor for UIKitSearchSuggestion(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, type metadata singleton initialization cache for UIKitSearchSuggestion);
}

uint64_t type metadata completion function for UIKitSearchSuggestion()
{
  uint64_t result = type metadata accessor for PlatformItemList.Item();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t outlined release of Image.Resolved?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))
{
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(unsigned __int16 *)(a1 + 176) | (*(unsigned __int8 *)(a1 + 178) << 16));
  return a1;
}

uint64_t partial apply for closure #1 in SwiftUISearchController.presentationControllerWillDismiss(_:)()
{
  return closure #1 in SwiftUISearchController.presentationControllerWillDismiss(_:)();
}

uint64_t sub_1879AF53C()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void partial apply for closure #1 in SwiftUISearchController.enqueueIsActiveUpdate(_:)(uint64_t a1)
{
  closure #1 in SwiftUISearchController.enqueueIsActiveUpdate(_:)(a1, v1);
}

uint64_t specialized SwiftUISearchController.searchController(_:willChangeTo:)(uint64_t a1)
{
  uint64_t v2 = v1;
  type metadata accessor for ToolbarStorage.SearchItem?(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v5 = v4;
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v32 + 64);
  MEMORY[0x1F4188790](v4);
  uint64_t v33 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v34 = (uint64_t)&v32 - v8;
  uint64_t v9 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v9 - 8);
  char v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ToolbarStorage.SearchItem?(0, (unint64_t *)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  long long v17 = (char *)&v32 - v16;
  uint64_t result = static SemanticFeature.isEnabled.getter();
  if ((result & 1) == 0)
  {
LABEL_4:
    uint64_t v19 = v5;
    int v20 = 1;
    goto LABEL_5;
  }
  if (a1 != 1)
  {
    if (a1 != 2) {
      return result;
    }
    goto LABEL_4;
  }
  uint64_t v19 = v5;
  int v20 = 0;
LABEL_5:
  uint64_t v21 = v2 + OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_searchItem;
  swift_beginAccess();
  outlined init with copy of Toolbar.UpdateContext?(v21, (uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  uint64_t v22 = type metadata accessor for ToolbarStorage.SearchItem(0);
  long long v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48);
  uint64_t result = v23(v17, 1, v22);
  if (result == 1)
  {
    __break(1u);
    goto LABEL_12;
  }
  MEMORY[0x18C113DA0](v19);
  int v24 = v11[1];
  _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v11, type metadata accessor for SearchFieldState);
  uint64_t result = _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v17, type metadata accessor for ToolbarStorage.SearchItem);
  if (v20 == v24) {
    return result;
  }
  char v25 = v20;
  outlined init with copy of Toolbar.UpdateContext?(v21, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  uint64_t result = v23(v14, 1, v22);
  if (result == 1)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  uint64_t v26 = MEMORY[0x1E4F41638];
  uint64_t v27 = v34;
  outlined init with copy of Toolbar.UpdateContext?((uint64_t)v14, v34, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  _s7SwiftUI16SearchFieldStateVWOhTm_2((uint64_t)v14, type metadata accessor for ToolbarStorage.SearchItem);
  uint64_t v28 = v33;
  outlined init with copy of Toolbar.UpdateContext?(v27, v33, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, v26, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  unint64_t v29 = (*(unsigned __int8 *)(v32 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  uint64_t v30 = v29 + v6;
  uint64_t v31 = swift_allocObject();
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_0(v28, v31 + v29, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, v26, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ToolbarStorage.SearchItem?);
  *(unsigned char *)(v31 + v30) = v25;
  static Update.enqueueAction(_:)();
  swift_release();
  return outlined destroy of Toolbar.UpdateContext?(v27, (uint64_t)&lazy cache variable for type metadata for Binding<SearchFieldState>, (uint64_t)type metadata accessor for SearchFieldState, v26, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
}

void specialized SwiftUISearchController.init(coder:)()
{
  uint64_t v1 = &v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_searchItem];
  uint64_t v2 = type metadata accessor for ToolbarStorage.SearchItem(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController____lazy_storage____searchBar] = 0;
  swift_unknownObjectWeakInit();
  v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActive] = 2;
  v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_pendingIsActiveAnimated] = 2;
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_coordinator;
  *(void *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for UIKitSearchBarCoordinator(0)), sel_init);
  uint64_t v4 = &v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_suggestions];
  *(void *)uint64_t v4 = 0;
  v4[8] = -1;
  uint64_t v5 = &v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_configuration];
  uint64_t v6 = type metadata accessor for SearchFieldConfiguration(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryHost] = 0;
  *(void *)&v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryRecoveryGesture] = 0;
  uint64_t v7 = &v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_customAccessoryContent];
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((void *)v7 + 10) = 0;
  v0[OBJC_IVAR____TtC7SwiftUI23SwiftUISearchController_allowsSecureDrawing] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t sub_1879AFC40()
{
  type metadata accessor for ToolbarStorage.SearchItem?(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v2 = v1 - 8;
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v4 = v0 + ((v3 + 16) & ~v3);
  swift_release();
  swift_release();
  uint64_t v5 = *(int *)(v2 + 40);
  uint64_t v6 = v4 + v5 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
  uint64_t v7 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SwiftUISearchController.searchController(_:willChangeTo:)()
{
  type metadata accessor for ToolbarStorage.SearchItem?(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  char v4 = *(unsigned char *)(v0 + v3 + *(void *)(v2 + 64));

  return closure #1 in SwiftUISearchController.searchController(_:willChangeTo:)(v0 + v3, v4);
}

uint64_t type metadata accessor for AnimatedValueTrack<A>.VectorPath()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnimatedValueTrack<A>.VectorPath.init()()
{
  type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();

  return static Array._allocateUninitialized(_:)();
}

uint64_t AnimatedValueTrack<A>.VectorPath.isEmpty.getter()
{
  return Collection.isEmpty.getter() & 1;
}

uint64_t AnimatedValueTrack<A>.VectorPath.arcLength.getter(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v63 = type metadata accessor for Curve();
  uint64_t v4 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v62 = (uint64_t)&v48 - v5;
  uint64_t v67 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment();
  v51 = *(void (***)(char *, uint64_t))(v67 - 8);
  MEMORY[0x1F4188790](v67);
  uint64_t v61 = (char *)&v48 - v6;
  uint64_t v7 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
  uint64_t v68 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v48 - v8;
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v11);
  v60 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v59 = (char *)&v48 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v58 = (char *)&v48 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v66 = (uint64_t)&v48 - v18;
  MEMORY[0x1F4188790](v19);
  uint64_t v64 = AssociatedConformanceWitness;
  char v69 = (char *)&v48 - v20;
  uint64_t v21 = AssociatedTypeWitness;
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v22 = swift_bridgeObjectRetain();
  uint64_t v70 = v7;
  uint64_t v23 = MEMORY[0x18C115CB0](v22, v7);
  uint64_t v48 = v10;
  if (v23)
  {
    uint64_t v24 = 0;
    uint64_t v25 = a1 + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80));
    uint64_t v54 = v10 + 16;
    uint64_t v55 = (void (**)(char *, char *))(v51 + 4);
    uint64_t v52 = (void (**)(uint64_t, uint64_t))(v4 + 8);
    char v65 = (void (**)(char *, uint64_t))(v10 + 8);
    ++v51;
    v50 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    double v26 = 0.0;
    uint64_t v56 = v25;
    uint64_t v57 = a1;
    uint64_t v53 = v68 + 16;
    uint64_t v49 = v9;
    uint64_t v27 = (void (**)(uint64_t, char *, uint64_t))(v10 + 16);
    while (1)
    {
      uint64_t result = Array._checkSubscript(_:wasNativeTypeChecked:)();
      uint64_t v30 = v24 + 1;
      if (__OFADD__(v24, 1)) {
        break;
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v9, v25 + *(void *)(v68 + 72) * v24, v70);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload)
      {
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v32 = v61;
          uint64_t v33 = v67;
          (*v55)(v61, v9);
          uint64_t v34 = *v27;
          uint64_t v35 = v21;
          (*v27)(v66, v69, v21);
          uint64_t v36 = (uint64_t)v58;
          v34((uint64_t)v58, v32, v35);
          uint64_t v37 = (uint64_t)v59;
          v34((uint64_t)v59, &v32[*(int *)(v33 + 36)], v35);
          uint64_t v38 = (uint64_t)v60;
          v34((uint64_t)v60, &v32[*(int *)(v33 + 40)], v35);
          uint64_t v39 = v62;
          Curve.init(start:end:startTangent:endTangent:)(v66, v36, v37, v38, v35, v62);
          uint64_t v40 = v63;
          Curve.arcLength(at:)(v63, 1.0);
          double v42 = v41;
          uint64_t v43 = v39;
          uint64_t v44 = v40;
          uint64_t v45 = v35;
          uint64_t v46 = v69;
          uint64_t v9 = v49;
          uint64_t v25 = v56;
          (*v52)(v43, v44);
          (*v65)(v46, v45);
          double v26 = v26 + v42;
          uint64_t v47 = v46;
          uint64_t v21 = v45;
          v34((uint64_t)v47, v32, v45);
          a1 = v57;
          (*v51)(v32, v67);
        }
      }
      else
      {
        uint64_t v28 = v69;
        (*v65)(v69, v21);
        (*v50)(v28, v9, v21);
      }
      ++v24;
      if (v30 == MEMORY[0x18C115CB0](a1, v70)) {
        goto LABEL_9;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v69, v21);
  }
  return result;
}

uint64_t Curve.init(start:end:startTangent:endTangent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32);
  v14(a6, a1, a5);
  uint64_t v11 = (int *)type metadata accessor for Curve();
  v14(a6 + v11[9], a2, a5);
  v14(a6 + v11[10], a3, a5);
  uint64_t v12 = a6 + v11[11];

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v12, a4, a5);
}

uint64_t AnimatedValueTrack<A>.VectorPath.value(atArcLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = a1;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v75 = type metadata accessor for Curve();
  v77 = *(void (***)(char *, uint64_t))(v75 - 8);
  MEMORY[0x1F4188790](v75);
  uint64_t v14 = (char *)&v59 - v13;
  uint64_t v78 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment();
  uint64_t v67 = *(void (***)(char *, char *, uint64_t))(v78 - 8);
  MEMORY[0x1F4188790](v78);
  uint64_t v16 = (char *)&v59 - v15;
  uint64_t v17 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
  uint64_t v76 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  v83 = (char *)&v59 - v18;
  uint64_t v69 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v19);
  char v74 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  v73 = (char *)&v59 - v22;
  MEMORY[0x1F4188790](v23);
  char v72 = (char *)&v59 - v24;
  MEMORY[0x1F4188790](v25);
  uint64_t v79 = (uint64_t)&v59 - v26;
  MEMORY[0x1F4188790](v27);
  unint64_t v29 = (char *)&v59 - v28;
  if (AnimatedValueTrack<A>.VectorPath.isEmpty.getter())
  {
    uint64_t v30 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v69 + 56);
    return v30(a4, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v70 = v14;
    uint64_t v60 = a2;
    uint64_t v61 = a3;
    uint64_t v62 = a4;
    uint64_t v71 = AssociatedConformanceWitness;
    uint64_t v32 = AssociatedTypeWitness;
    dispatch thunk of static AdditiveArithmetic.zero.getter();
    uint64_t v33 = swift_bridgeObjectRetain();
    uint64_t v34 = MEMORY[0x18C115CB0](v33, v17);
    uint64_t v35 = v76;
    v82 = v29;
    if (v34)
    {
      uint64_t v36 = 0;
      unint64_t v81 = v11 + ((*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80));
      uint64_t v80 = v76 + 16;
      uint64_t v68 = v67 + 4;
      uint64_t v37 = (void (**)(uint64_t, char *, uint64_t))(v69 + 16);
      uint64_t v64 = (void (**)(uint64_t, uint64_t))(v77 + 1);
      v77 = (void (**)(char *, uint64_t))(v69 + 8);
      char v65 = (void (**)(char *, uint64_t))(v67 + 1);
      uint64_t v66 = v11;
      uint64_t v67 = (void (**)(char *, char *, uint64_t))(v69 + 32);
      uint64_t v63 = v17;
      while (1)
      {
        uint64_t result = Array._checkSubscript(_:wasNativeTypeChecked:)();
        uint64_t v41 = v36 + 1;
        if (__OFADD__(v36, 1)) {
          break;
        }
        double v42 = v83;
        (*(void (**)(char *, unint64_t, uint64_t))(v35 + 16))(v83, v81 + *(void *)(v35 + 72) * v36, v17);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v44 = v32;
            uint64_t v45 = v78;
            (*v68)(v16, v83, v78);
            uint64_t v46 = *v37;
            (*v37)(v79, v82, v44);
            uint64_t v47 = (uint64_t)v72;
            v46((uint64_t)v72, v16, v44);
            uint64_t v48 = (uint64_t)v73;
            v46((uint64_t)v73, &v16[*(int *)(v45 + 36)], v44);
            uint64_t v49 = (uint64_t)v74;
            v46((uint64_t)v74, &v16[*(int *)(v45 + 40)], v44);
            uint64_t v50 = (uint64_t)v70;
            Curve.init(start:end:startTangent:endTangent:)(v79, v47, v48, v49, v44, (uint64_t)v70);
            uint64_t v51 = v75;
            Curve.arcLength(at:)(v75, 1.0);
            if (v52 >= a5)
            {
              swift_bridgeObjectRelease();
              double v57 = Curve.parametricTime(forArcLength:)(v51, a5);
              uint64_t v58 = v62;
              Curve.value(at:)(v51, v62, v57);
              (*v64)(v50, v51);
              (*v65)(v16, v78);
              (*(void (**)(char *, uint64_t))(v69 + 8))(v82, v44);
              return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v69 + 56))(v58, 0, 1, v44);
            }
            double v53 = v52;
            (*v64)(v50, v51);
            uint64_t v54 = v82;
            (*v77)(v82, v44);
            a5 = a5 - v53;
            v46((uint64_t)v54, v16, v44);
            (*v65)(v16, v78);
            uint64_t v11 = v66;
            uint64_t v32 = v44;
            uint64_t v35 = v76;
            uint64_t v17 = v63;
          }
        }
        else
        {
          uint64_t v38 = v16;
          uint64_t v39 = v82;
          (*v77)(v82, v32);
          uint64_t v40 = v39;
          uint64_t v16 = v38;
          (*v67)(v40, v42, v32);
        }
        ++v36;
        if (v41 == MEMORY[0x18C115CB0](v11, v17)) {
          goto LABEL_14;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_14:
      swift_bridgeObjectRelease();
      uint64_t v55 = v11;
      uint64_t v56 = v62;
      AnimatedValueTrack<A>.VectorPath.endValue.getter(v55, v60, v61);
      (*(void (**)(char *, uint64_t))(v69 + 8))(v82, v32);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v69 + 56))(v56, 0, 1, v32);
    }
  }
  return result;
}

__n128 specialized AnimatedValueTrack<A>.VectorPath.endValue.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = (unsigned char *)(a1 + 121);
    __n128 result = 0uLL;
    do
    {
      if (!*v2 || *v2 == 1) {
        __n128 result = *(__n128 *)(v2 - 89);
      }
      v2 += 96;
      --v1;
    }
    while (v1);
  }
  else
  {
    return (__n128)0;
  }
  return result;
}

uint64_t AnimatedValueTrack<A>.VectorPath.endValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = &v11[-v8];
  uint64_t v14 = a1;
  swift_getAssociatedConformanceWitness();
  swift_bridgeObjectRetain();
  dispatch thunk of static AdditiveArithmetic.zero.getter();
  uint64_t v12 = a2;
  uint64_t v13 = a3;
  type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
  type metadata accessor for Array();
  swift_getWitnessTable();
  Sequence.reduce<A>(_:_:)();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, AssociatedTypeWitness);
  return swift_bridgeObjectRelease();
}

uint64_t AnimatedValueTrack<A>.VectorPath.unitVelocityTangent(atArcLength:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v66 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v81 = type metadata accessor for Curve();
  v83 = *(void (***)(char *, uint64_t))(v81 - 8);
  MEMORY[0x1F4188790](v81);
  uint64_t v12 = (char *)&v64 - v11;
  uint64_t v84 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment();
  uint64_t v13 = *(void *)(v84 - 8);
  MEMORY[0x1F4188790](v84);
  uint64_t v15 = (char *)&v64 - v14;
  uint64_t v16 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
  uint64_t v82 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  v88 = (char *)&v64 - v17;
  uint64_t v74 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v80 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v79 = (char *)&v64 - v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v78 = (char *)&v64 - v23;
  MEMORY[0x1F4188790](v24);
  uint64_t v85 = (uint64_t)&v64 - v25;
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v64 - v27;
  if (AnimatedValueTrack<A>.VectorPath.isEmpty.getter())
  {
    unint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56);
    uint64_t v30 = v66;
    return v29(v30, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v76 = v12;
    uint64_t v64 = a2;
    uint64_t v65 = a3;
    uint64_t v77 = AssociatedConformanceWitness;
    dispatch thunk of static AdditiveArithmetic.zero.getter();
    uint64_t v32 = swift_bridgeObjectRetain();
    uint64_t v33 = MEMORY[0x18C115CB0](v32, v16);
    uint64_t v34 = a1;
    uint64_t v35 = AssociatedTypeWitness;
    uint64_t v75 = v15;
    v87 = v28;
    uint64_t v36 = v82;
    if (v33)
    {
      uint64_t v37 = v16;
      uint64_t v38 = 0;
      unint64_t v39 = v34 + ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80));
      char v72 = (void (**)(char *, char *, uint64_t))(v13 + 32);
      uint64_t v40 = (void (**)(uint64_t, char *, uint64_t))(v74 + 16);
      uint64_t v69 = (void (**)(uint64_t, uint64_t))(v83 + 1);
      v83 = (void (**)(char *, uint64_t))(v74 + 8);
      uint64_t v70 = (void (**)(char *, uint64_t))(v13 + 8);
      uint64_t v71 = v34;
      v73 = (void (**)(char *, char *, uint64_t))(v74 + 32);
      unint64_t v68 = v39;
      uint64_t v67 = v82 + 16;
      uint64_t v86 = v37;
      while (1)
      {
        uint64_t result = Array._checkSubscript(_:wasNativeTypeChecked:)();
        uint64_t v42 = v38 + 1;
        if (__OFADD__(v38, 1)) {
          break;
        }
        uint64_t v43 = v88;
        (*(void (**)(char *, unint64_t, uint64_t))(v36 + 16))(v88, v39 + *(void *)(v36 + 72) * v38, v37);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (EnumCaseMultiPayload)
        {
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v45 = v75;
            uint64_t v46 = v84;
            (*v72)(v75, v88, v84);
            uint64_t v47 = *v40;
            (*v40)(v85, v87, v35);
            uint64_t v48 = (uint64_t)v78;
            v47((uint64_t)v78, v45, v35);
            uint64_t v49 = (uint64_t)v79;
            v47((uint64_t)v79, &v45[*(int *)(v46 + 36)], v35);
            uint64_t v50 = &v45[*(int *)(v46 + 40)];
            uint64_t v51 = (uint64_t)v80;
            v47((uint64_t)v80, v50, v35);
            uint64_t v52 = v35;
            uint64_t v53 = (uint64_t)v76;
            Curve.init(start:end:startTangent:endTangent:)(v85, v48, v49, v51, v52, (uint64_t)v76);
            uint64_t v54 = v81;
            uint64_t v55 = v87;
            Curve.arcLength(at:)(v81, 1.0);
            if (v56 >= a5)
            {
              swift_bridgeObjectRelease();
              double v59 = Curve.parametricTime(forArcLength:)(v54, a5);
              uint64_t v60 = v85;
              Curve.velocity(at:)(v54, v85, v59);
              uint64_t v61 = v77;
              double v62 = (*(double (**)(uint64_t, uint64_t))(v77 + 24))(v52, v77);
              (*(void (**)(uint64_t, uint64_t, double))(v61 + 16))(v52, v61, 1.0 / sqrt(v62));
              (*v69)(v53, v54);
              (*v70)(v45, v84);
              (*(void (**)(char *, uint64_t))(v74 + 8))(v55, v52);
              uint64_t v63 = v66;
              (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 32))(v66, v60, v52);
              return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v63, 0, 1, v52);
            }
            double v57 = v56;
            (*v69)(v53, v54);
            (*v83)(v55, v52);
            a5 = a5 - v57;
            v47((uint64_t)v55, v45, v52);
            (*v70)(v45, v84);
            uint64_t v34 = v71;
            uint64_t v35 = v52;
            uint64_t v36 = v82;
            unint64_t v39 = v68;
          }
        }
        else
        {
          uint64_t v41 = v87;
          (*v83)(v87, v35);
          (*v73)(v41, v43, v35);
        }
        uint64_t v37 = v86;
        ++v38;
        if (v42 == MEMORY[0x18C115CB0](v34, v86)) {
          goto LABEL_14;
        }
      }
      __break(1u);
    }
    else
    {
LABEL_14:
      swift_bridgeObjectRelease();
      uint64_t v58 = v66;
      AnimatedValueTrack<A>.VectorPath.endValue.getter(v34, v64, v65);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v87, v35);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v58, 0, 1, v35);
    }
  }
  return result;
}

uint64_t AnimatedValueTrack<A>.VectorPath.Element.end(previousValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v21 - v9;
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v3, a2, v12);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v14, v7);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a3, v10, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    else
    {
      uint64_t v20 = swift_getAssociatedTypeWitness();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(a3, a1, v20);
    }
  }
  else
  {
    uint64_t v19 = swift_getAssociatedTypeWitness();
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(a3, v14, v19);
  }
}

uint64_t AnimatedValueTrack<A>.VectorPath.value(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  double v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v29 - v14;
  if (AnimatedValueTrack<A>.VectorPath.isEmpty.getter())
  {
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
    return v16(a2, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    swift_getAssociatedConformanceWitness();
    dispatch thunk of static AdditiveArithmetic.zero.getter();
    uint64_t v18 = swift_bridgeObjectRetain();
    if (MEMORY[0x18C115CB0](v18, v6))
    {
      uint64_t v37 = v7;
      uint64_t v38 = AssociatedTypeWitness;
      uint64_t v19 = 0;
      uint64_t v34 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      uint64_t v32 = v12;
      uint64_t v33 = v7 + 16;
      uint64_t v20 = (uint64_t)v12;
      uint64_t v35 = (void (**)(char *, uint64_t))(v7 + 8);
      uint64_t v36 = (void (**)(char *, uint64_t))(v31 + 8);
      uint64_t v21 = (void (**)(char *, uint64_t, uint64_t))(v31 + 32);
      uint64_t v29 = (v31 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      uint64_t v30 = a2;
      while (1)
      {
        uint64_t result = Array._checkSubscript(_:wasNativeTypeChecked:)();
        uint64_t v22 = v19 + 1;
        if (__OFADD__(v19, 1)) {
          break;
        }
        (*(void (**)(char *, uint64_t, uint64_t))(v37 + 16))(v9, v34 + *(void *)(v37 + 72) * v19, v6);
        if (a3 < AnimatedValueTrack<A>.VectorPath.Element.duration.getter(v6))
        {
          swift_bridgeObjectRelease();
          uint64_t v27 = v30;
          AnimatedValueTrack<A>.VectorPath.Element.value(at:previousValue:)((uint64_t)v15, v6, v30, a3);
          (*v35)(v9, v6);
          uint64_t v28 = v38;
          (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v38);
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v28);
        }
        a3 = a3 - AnimatedValueTrack<A>.VectorPath.Element.duration.getter(v6);
        AnimatedValueTrack<A>.VectorPath.Element.end(previousValue:)((uint64_t)v15, v6, v20);
        (*v35)(v9, v6);
        uint64_t v23 = a1;
        uint64_t v24 = v38;
        (*v36)(v15, v38);
        uint64_t v25 = *v21;
        uint64_t v26 = v24;
        a1 = v23;
        (*v21)(v15, v20, v26);
        ++v19;
        if (v22 == MEMORY[0x18C115CB0](v23, v6))
        {
          swift_bridgeObjectRelease();
          a2 = v30;
          uint64_t AssociatedTypeWitness = v38;
          goto LABEL_12;
        }
      }
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v31 + 32);
LABEL_12:
      v25((char *)a2, (uint64_t)v15, AssociatedTypeWitness);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(a2, 0, 1, AssociatedTypeWitness);
    }
  }
  return result;
}

double AnimatedValueTrack<A>.VectorPath.Element.duration.getter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v16 - v5;
  double v8 = MEMORY[0x1F4188790](v7);
  uint64_t v10 = (uint64_t *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(void *, uint64_t, uint64_t, double))(v11 + 16))(v10, v1, a1, v8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, void *, uint64_t))(v4 + 32))(v6, v10, v3);
      double v13 = *(double *)&v6[*(int *)(v3 + 44)];
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    }
    else
    {
      return *(double *)v10;
    }
  }
  else
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    (*(void (**)(void *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v10, AssociatedTypeWitness);
    return 0.0;
  }
  return v13;
}

uint64_t AnimatedValueTrack<A>.VectorPath.Element.value(at:previousValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v47 = a1;
  uint64_t v48 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v46 = (char *)&AssociatedConformanceWitness - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v44 = (char *)&AssociatedConformanceWitness - v11;
  MEMORY[0x1F4188790](v12);
  uint64_t v42 = (char *)&AssociatedConformanceWitness - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&AssociatedConformanceWitness - v15;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v45 = type metadata accessor for Curve();
  uint64_t v43 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v18 = (char *)&AssociatedConformanceWitness - v17;
  uint64_t v19 = (int *)type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment();
  uint64_t v20 = *((void *)v19 - 1);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&AssociatedConformanceWitness - v21;
  double v24 = MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&AssociatedConformanceWitness - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v27 + 16))(v26, v4, a2, v24);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v48, v26, AssociatedTypeWitness);
  }
  if (EnumCaseMultiPayload != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v48, v47, AssociatedTypeWitness);
  }
  (*(void (**)(char *, char *, int *))(v20 + 32))(v22, v26, v19);
  double v29 = AnimatedValueTrack<A>.VectorPath.Element.duration.getter(a2);
  uint64_t v30 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 16);
  if (v29 <= 0.0)
  {
    v30(v48, v22, AssociatedTypeWitness);
    return (*(uint64_t (**)(char *, int *))(v20 + 8))(v22, v19);
  }
  else
  {
    v30((uint64_t)v16, (char *)v47, AssociatedTypeWitness);
    uint64_t v47 = v20;
    uint64_t v31 = (uint64_t)v42;
    v30((uint64_t)v42, v22, AssociatedTypeWitness);
    uint64_t v32 = (uint64_t)v44;
    v30((uint64_t)v44, &v22[v19[9]], AssociatedTypeWitness);
    uint64_t v33 = (uint64_t)v46;
    v30((uint64_t)v46, &v22[v19[10]], AssociatedTypeWitness);
    Curve.init(start:end:startTangent:endTangent:)((uint64_t)v16, v31, v32, v33, AssociatedTypeWitness, (uint64_t)v18);
    uint64_t v34 = v19[11];
    uint64_t v35 = &v22[v19[12]];
    char v36 = v35[32];
    long long v37 = *((_OWORD *)v35 + 1);
    long long v49 = *(_OWORD *)v35;
    long long v50 = v37;
    char v51 = v36;
    double v38 = UnitCurve.value(at:)(a4 / *(double *)&v22[v34]);
    uint64_t v39 = v45;
    Curve.value(at:)(v45, v48, v38);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v18, v39);
    return (*(uint64_t (**)(char *, int *))(v47 + 8))(v22, v19);
  }
}

uint64_t AnimatedValueTrack<A>.VectorPath.velocity(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v29 - v14;
  if (AnimatedValueTrack<A>.VectorPath.isEmpty.getter())
  {
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56);
    return v16(a2, 1, 1, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v36 = a1;
    uint64_t v18 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
    dispatch thunk of static AdditiveArithmetic.zero.getter();
    if (a3 >= 0.0)
    {
      uint64_t v29 = v18;
      uint64_t v30 = a2;
      uint64_t v34 = v7;
      uint64_t v35 = AssociatedTypeWitness;
      uint64_t v19 = v36;
      uint64_t v20 = swift_bridgeObjectRetain();
      if (MEMORY[0x18C115CB0](v20, v6))
      {
        uint64_t v21 = 0;
        uint64_t v33 = v19 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
        uint64_t v32 = v34 + 16;
        uint64_t v22 = (void (**)(char *, uint64_t))(v34 + 8);
        uint64_t v23 = (void (**)(char *, uint64_t))(v31 + 8);
        double v24 = (void (**)(char *, char *, uint64_t))(v31 + 32);
        while (1)
        {
          uint64_t result = Array._checkSubscript(_:wasNativeTypeChecked:)();
          uint64_t v25 = v21 + 1;
          if (__OFADD__(v21, 1)) {
            break;
          }
          (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v9, v33 + *(void *)(v34 + 72) * v21, v6);
          if (a3 < AnimatedValueTrack<A>.VectorPath.Element.duration.getter(v6))
          {
            swift_bridgeObjectRelease();
            uint64_t v27 = v30;
            AnimatedValueTrack<A>.VectorPath.Element.velocity(at:previousValue:)(v15, v6, v30, a3);
            (*v22)(v9, v6);
            uint64_t v28 = v35;
            (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v35);
            return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v28);
          }
          a3 = a3 - AnimatedValueTrack<A>.VectorPath.Element.duration.getter(v6);
          AnimatedValueTrack<A>.VectorPath.Element.end(previousValue:)((uint64_t)v15, v6, (uint64_t)v12);
          (*v22)(v9, v6);
          uint64_t v26 = v35;
          (*v23)(v15, v35);
          (*v24)(v15, v12, v26);
          ++v21;
          if (v25 == MEMORY[0x18C115CB0](v36, v6)) {
            goto LABEL_12;
          }
        }
        __break(1u);
      }
      else
      {
LABEL_12:
        swift_bridgeObjectRelease();
        uint64_t v27 = v30;
        uint64_t v28 = v35;
        dispatch thunk of static AdditiveArithmetic.zero.getter();
        (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v28);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v27, 0, 1, v28);
      }
    }
    else
    {
      dispatch thunk of static AdditiveArithmetic.zero.getter();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v15, AssociatedTypeWitness);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(a2, 0, 1, AssociatedTypeWitness);
    }
  }
  return result;
}

uint64_t AnimatedValueTrack<A>.VectorPath.Element.velocity(at:previousValue:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v53 = a3;
  uint64_t v47 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for Curve();
  uint64_t v49 = *(void *)(v7 - 8);
  uint64_t v50 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v48 = (uint64_t)&v45 - v8;
  uint64_t v51 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v45 - v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v45 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v45 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v46 = (uint64_t)&v45 - v22;
  uint64_t v23 = (int *)type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment();
  uint64_t v24 = *((void *)v23 - 1);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v45 - v25;
  double v28 = MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v45 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v31 + 16))(v30, v54, a2, v28);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, int *))(v24 + 32))(v26, v30, v23);
      double v33 = *(double *)&v26[v23[11]];
      uint64_t v34 = *(void (**)(uint64_t, char *, uint64_t))(v51 + 16);
      if (v33 <= 0.0)
      {
        v34(v53, v26, AssociatedTypeWitness);
      }
      else
      {
        uint64_t v54 = v23[11];
        v34((uint64_t)v20, v47, AssociatedTypeWitness);
        v34((uint64_t)v17, v26, AssociatedTypeWitness);
        v34((uint64_t)v14, &v26[v23[9]], AssociatedTypeWitness);
        v34((uint64_t)v11, &v26[v23[10]], AssociatedTypeWitness);
        uint64_t v35 = v48;
        uint64_t v36 = (uint64_t)v14;
        uint64_t v37 = AssociatedConformanceWitness;
        Curve.init(start:end:startTangent:endTangent:)((uint64_t)v20, (uint64_t)v17, v36, (uint64_t)v11, AssociatedTypeWitness, v48);
        double v38 = &v26[v23[12]];
        char v39 = v38[32];
        long long v40 = *((_OWORD *)v38 + 1);
        long long v55 = *(_OWORD *)v38;
        long long v56 = v40;
        char v57 = v39;
        double v41 = UnitCurve.value(at:)(a4 / v33);
        uint64_t v42 = v46;
        uint64_t v43 = v50;
        Curve.velocity(at:)(v50, v46, v41);
        (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v35, v43);
        VectorArithmetic.scaled(by:)(AssociatedTypeWitness, v37, v53, 1.0 / *(double *)&v26[v54]);
        (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v42, AssociatedTypeWitness);
      }
      return (*(uint64_t (**)(char *, int *))(v24 + 8))(v26, v23);
    }
    else
    {
      return dispatch thunk of static AdditiveArithmetic.zero.getter();
    }
  }
  else
  {
    dispatch thunk of static AdditiveArithmetic.zero.getter();
    return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v30, AssociatedTypeWitness);
  }
}

uint64_t AnimatedValueTrack<A>.VectorPath.move(to:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v7 - v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v4, a1, AssociatedTypeWitness);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for Array();
  return Array.append(_:)();
}

uint64_t AnimatedValueTrack<A>.VectorPath.addCurve(to:startTangent:endTangent:duration:timingCurve:)(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4, uint64_t a5, double a6)
{
  uint64_t v33 = a3;
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v8 = *(void *)(a5 + 16);
  uint64_t v29 = *(void *)(a5 + 24);
  uint64_t v30 = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  double v28 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v25 - v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v25 - v16;
  uint64_t v18 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v25 - v19;
  __n128 v27 = *a4;
  unint64_t v21 = a4[1].n128_u64[1];
  unint64_t v26 = a4[1].n128_u64[0];
  LOBYTE(a4) = a4[2].n128_u8[0];
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v22(v17, v31, AssociatedTypeWitness);
  v22(v14, v32, AssociatedTypeWitness);
  uint64_t v23 = (uint64_t)v28;
  v22(v28, v33, AssociatedTypeWitness);
  __n128 v34 = v27;
  unint64_t v35 = v26;
  unint64_t v36 = v21;
  char v37 = (char)a4;
  AnimatedValueTrack<A>.VectorPath.Element.CurveSegment.init(to:startTangent:endTangent:duration:timingCurve:)((uint64_t)v17, (uint64_t)v14, v23, &v34, (uint64_t)v20, a6);
  swift_storeEnumTagMultiPayload();
  type metadata accessor for Array();
  return Array.append(_:)();
}

__n128 AnimatedValueTrack<A>.VectorPath.Element.CurveSegment.init(to:startTangent:endTangent:duration:timingCurve:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  __n128 v19 = *a4;
  unint64_t v17 = a4[1].n128_u64[1];
  unint64_t v18 = a4[1].n128_u64[0];
  unsigned __int8 v11 = a4[2].n128_u8[0];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32);
  v13(a5, a1, AssociatedTypeWitness);
  uint64_t v14 = (int *)type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment();
  v13(a5 + v14[9], a2, AssociatedTypeWitness);
  v13(a5 + v14[10], a3, AssociatedTypeWitness);
  *(double *)(a5 + v14[11]) = a6;
  uint64_t v15 = (__n128 *)(a5 + v14[12]);
  __n128 result = v19;
  *uint64_t v15 = v19;
  v15[1].n128_u64[0] = v18;
  v15[1].n128_u64[1] = v17;
  v15[2].n128_u8[0] = v11;
  return result;
}

double specialized AnimatedValueTrack<A>.VectorPath.addLine(to:duration:timingCurve:)(uint64_t *a1, double a2, double a3, double a4)
{
  uint64_t v9 = *v4;
  *(void *)&double v10 = specialized AnimatedValueTrack<A>.VectorPath.endValue.getter(*v4).n128_u64[0];
  double v12 = v11;
  uint64_t v13 = *a1;
  uint64_t v14 = a1[1];
  uint64_t v15 = a1[2];
  uint64_t v16 = a1[3];
  char v17 = *((unsigned char *)a1 + 32);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1, (char *)v9);
  }
  unint64_t v19 = *(void *)(v9 + 16);
  unint64_t v18 = *(void *)(v9 + 24);
  if (v19 >= v18 >> 1) {
    uint64_t v9 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v18 > 1), v19 + 1, 1, (char *)v9);
  }
  double result = a3 - v12;
  *(void *)(v9 + 16) = v19 + 1;
  uint64_t v21 = v9 + 96 * v19;
  *(double *)(v21 + 32) = a2;
  *(double *)(v21 + 40) = a3;
  *(double *)(v21 + 48) = a2 - v10;
  *(double *)(v21 + 56) = a3 - v12;
  *(double *)(v21 + 64) = a2 - v10;
  *(double *)(v21 + 72) = a3 - v12;
  *(double *)(v21 + 80) = a4;
  *(void *)(v21 + 88) = v13;
  *(void *)(v21 + 96) = v14;
  *(void *)(v21 + 104) = v15;
  *(void *)(v21 + 112) = v16;
  *(unsigned char *)(v21 + 120) = v17;
  *(unsigned char *)(v21 + 121) = 1;
  uint64_t *v4 = v9;
  return result;
}

uint64_t AnimatedValueTrack<A>.VectorPath.addLine(to:duration:timingCurve:)(uint64_t a1, __n128 *a2, uint64_t a3, double a4)
{
  uint64_t v5 = v4;
  uint64_t v29 = a3;
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = &v24[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v15);
  char v17 = &v24[-v16];
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = &v24[-v19];
  __n128 v28 = *a2;
  unint64_t v21 = a2[1].n128_u64[0];
  unint64_t v26 = a2[1].n128_u64[1];
  unint64_t v27 = v21;
  int v25 = a2[2].n128_u8[0];
  AnimatedValueTrack<A>.VectorPath.endValue.getter(*v5, v10, v9);
  swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  __n128 v30 = v28;
  unint64_t v31 = v27;
  unint64_t v32 = v26;
  char v33 = v25;
  AnimatedValueTrack<A>.VectorPath.addCurve(to:startTangent:endTangent:duration:timingCurve:)(a1, (uint64_t)v17, (uint64_t)v14, &v30, v29, a4);
  uint64_t v22 = *(void (**)(unsigned char *, uint64_t))(v12 + 8);
  v22(v14, AssociatedTypeWitness);
  v22(v17, AssociatedTypeWitness);
  return ((uint64_t (*)(unsigned char *, uint64_t))v22)(v20, AssociatedTypeWitness);
}

uint64_t AnimatedValueTrack<A>.VectorPath.hold(for:)(double a1)
{
  uint64_t v2 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
  MEMORY[0x1F4188790](v2);
  *(double *)((char *)&v5 - v3) = a1;
  swift_storeEnumTagMultiPayload();
  type metadata accessor for Array();
  return Array.append(_:)();
}

uint64_t static AnimatedValueTrack<A>.VectorPath.== infix(_:_:)()
{
  type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
  swift_getWitnessTable();

  return static Array<A>.== infix(_:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValueTrack<A><A>.VectorPath()
{
  return static AnimatedValueTrack<A>.VectorPath.== infix(_:_:)();
}

uint64_t AnimatedValueTrack<A>.VectorPath.update(value:mix:at:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, double), double a6, double a7)
{
  double v38 = a5;
  uint64_t v39 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  uint64_t v36 = *(void *)(v13 - 8);
  uint64_t v37 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v34 - v14;
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v34 - v21;
  MEMORY[0x1F4188790](v23);
  int v25 = (char *)&v34 - v24;
  MEMORY[0x1F4188790](v26);
  __n128 v28 = (char *)&v34 - v27;
  v38(a2, a3, a4, a7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v15, v37);
  }
  __n128 v30 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  unint64_t v35 = v28;
  v30(v28, v15, AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  double v38 = *(void (**)(uint64_t, uint64_t, uint64_t, double))(AssociatedConformanceWitness + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  unint64_t v32 = *(void (**)(char *, uint64_t))(v16 + 8);
  v32(v19, AssociatedTypeWitness);
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v25, a6);
  v32(v22, AssociatedTypeWitness);
  char v33 = (void (*)(unsigned char *, void))(*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(a4 + 40))(v40, a3, a4);
  dispatch thunk of static AdditiveArithmetic.+= infix(_:_:)();
  v32(v25, AssociatedTypeWitness);
  v33(v40, 0);
  return ((uint64_t (*)(char *, uint64_t))v32)(v35, AssociatedTypeWitness);
}

uint64_t AnimatedValueTrack<A>.VectorPath.duration.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
  uint64_t v3 = swift_bridgeObjectRetain();
  if (!MEMORY[0x18C115CB0](v3, v2)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v4 = 0;
  double v5 = 0.0;
  while (1)
  {
    uint64_t result = Array._checkSubscript(_:wasNativeTypeChecked:)();
    uint64_t v7 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      break;
    }
    double v5 = v5 + AnimatedValueTrack<A>.VectorPath.Element.duration.getter(v2);
    ++v4;
    if (v7 == MEMORY[0x18C115CB0](a1, v2)) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
  return result;
}

uint64_t static AnimatedValueTrack<A>.VectorPath.Element.CurveSegment.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && (uint64_t v4 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(),
        (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0)
    && (dispatch thunk of static Equatable.== infix(_:_:)() & 1) != 0
    && *(double *)(a1 + *(int *)(v4 + 44)) == *(double *)(a2 + *(int *)(v4 + 44)))
  {
    char v5 = static UnitCurve.== infix(_:_:)();
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t protocol witness for AnimatedValueTrackSource.update(value:mix:at:) in conformance AnimatedValueTrack<A><A>.VectorPath(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return AnimatedValueTrack<A>.VectorPath.update(value:mix:at:)(a1, *v4, *(void *)(a2 + 16), *(void *)(a2 + 24), (void (*)(uint64_t, uint64_t, uint64_t, double))AnimatedValueTrack<A>.VectorPath.value(at:), a3, a4);
}

uint64_t protocol witness for AnimatedValueTrackSource.update(velocity:mix:at:) in conformance AnimatedValueTrack<A><A>.VectorPath(uint64_t a1, uint64_t a2, double a3, double a4)
{
  return AnimatedValueTrack<A>.VectorPath.update(value:mix:at:)(a1, *v4, *(void *)(a2 + 16), *(void *)(a2 + 24), (void (*)(uint64_t, uint64_t, uint64_t, double))AnimatedValueTrack<A>.VectorPath.velocity(at:), a3, a4);
}

uint64_t protocol witness for AnimatedValueTrackSource.duration.getter in conformance AnimatedValueTrack<A><A>.VectorPath()
{
  return AnimatedValueTrack<A>.VectorPath.duration.getter(*v0);
}

uint64_t instantiation function for generic protocol witness table for AnimatedValueTrack<A><A>.VectorPath(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for Curve()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValueTrack<A><A>.VectorPath.Element.CurveSegment(uint64_t a1, uint64_t a2)
{
  return static AnimatedValueTrack<A>.VectorPath.Element.CurveSegment.== infix(_:_:)(a1, a2);
}

uint64_t Curve.value(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v46 = a2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v44 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  double v11 = (char *)&v40 - v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v42 = (char *)&v40 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v45 = (char *)&v40 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v47 = (char *)&v40 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v40 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v40 - v22;
  long long v40 = (char *)&v40 - v22;
  double v25 = MEMORY[0x1F4188790](v24);
  double v26 = v25 * v25;
  double v27 = v25 * v25 * v25;
  __n128 v28 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v43 = (char *)&v40 - v29;
  v28((char *)&v40 - v29, v3, v6);
  v28(v23, v3 + *(int *)(a1 + 40), v6);
  uint64_t v30 = v3 + *(int *)(a1 + 36);
  double v41 = v20;
  v28(v20, v30, v6);
  v28(v47, v3 + *(int *)(a1 + 44), v6);
  uint64_t v31 = *(void *)(a1 + 24);
  VectorArithmetic.scaled(by:)(v6, v31, (uint64_t)v11, v27 + v27 - v26 * 3.0 + 1.0);
  uint64_t v32 = v44;
  VectorArithmetic.scaled(by:)(v6, v31, v44, v26 * 3.0 - (v27 + v27));
  uint64_t v33 = (uint64_t)v42;
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v34(v32, v6);
  v34((uint64_t)v11, v6);
  unint64_t v35 = v40;
  VectorArithmetic.scaled(by:)(v6, v31, (uint64_t)v11, v27 - (v26 + v26) + a3);
  uint64_t v36 = v45;
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v34((uint64_t)v11, v6);
  v34(v33, v6);
  uint64_t v37 = v31;
  double v38 = v47;
  VectorArithmetic.scaled(by:)(v6, v37, v33, v27 - v26);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v34(v33, v6);
  v34((uint64_t)v36, v6);
  v34((uint64_t)v38, v6);
  v34((uint64_t)v41, v6);
  v34((uint64_t)v35, v6);
  return ((uint64_t (*)(char *, uint64_t))v34)(v43, v6);
}

uint64_t Curve.velocity(at:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v50 = a2;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v48 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  double v11 = (char *)&v44 - v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v46 = (char *)&v44 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v49 = (char *)&v44 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v51 = (char *)&v44 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v44 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v44 - v22;
  uint64_t v44 = (char *)&v44 - v22;
  double v25 = MEMORY[0x1F4188790](v24);
  double v26 = v25 * v25;
  double v27 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v47 = (char *)&v44 - v28;
  v27((char *)&v44 - v28, v3, v6);
  v27(v23, v3 + *(int *)(a1 + 40), v6);
  uint64_t v29 = v3 + *(int *)(a1 + 36);
  uint64_t v45 = v20;
  v27(v20, v29, v6);
  v27(v51, v3 + *(int *)(a1 + 44), v6);
  double v30 = v26 * 6.0 - a3 * 6.0;
  double v31 = a3 * 6.0 - v26 * 6.0;
  double v32 = v26 * 3.0;
  double v33 = v26 * 3.0 + a3 * -4.0 + 1.0;
  double v34 = v32 - (a3 + a3);
  uint64_t v35 = *(void *)(a1 + 24);
  VectorArithmetic.scaled(by:)(v6, v35, (uint64_t)v11, v30);
  uint64_t v36 = v48;
  VectorArithmetic.scaled(by:)(v6, v35, v48, v31);
  uint64_t v37 = (uint64_t)v46;
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  double v38 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v38(v36, v6);
  v38((uint64_t)v11, v6);
  uint64_t v39 = v44;
  VectorArithmetic.scaled(by:)(v6, v35, (uint64_t)v11, v33);
  long long v40 = v49;
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v38((uint64_t)v11, v6);
  v38(v37, v6);
  uint64_t v41 = v35;
  uint64_t v42 = v51;
  VectorArithmetic.scaled(by:)(v6, v41, v37, v34);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v38(v37, v6);
  v38((uint64_t)v40, v6);
  v38((uint64_t)v42, v6);
  v38((uint64_t)v45, v6);
  v38((uint64_t)v39, v6);
  return ((uint64_t (*)(char *, uint64_t))v38)(v47, v6);
}

uint64_t static AnimatedValueTrack<A>.VectorPath.Element.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  uint64_t v6 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment();
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v46 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v42 = (char *)&v41 - v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v47 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v48 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v41 - v9;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v11 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (double *)((char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v41 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v50 = (char *)&v41 - v19;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v49 = *(void *)(TupleTypeMetadata2 - 8);
  double v21 = MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v23 = (char *)&v41 - v22;
  double v25 = (double *)((char *)&v41 + *(int *)(v24 + 48) - v22);
  double v26 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v26((char *)&v41 - v22, v51, v11, v21);
  ((void (*)(double *, uint64_t, uint64_t))v26)(v25, v52, v11);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v34 = v47;
    uint64_t v33 = v48;
    ((void (*)(char *, char *, uint64_t))v26)(v50, v23, v11);
    if (!swift_getEnumCaseMultiPayload())
    {
      uint64_t v35 = v34;
      uint64_t v36 = *(void (**)(char *, double *, uint64_t))(v34 + 32);
      uint64_t v37 = v10;
      v36(v10, v25, v33);
      swift_getAssociatedConformanceWitness();
      double v38 = v50;
      char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v39 = *(void (**)(char *, uint64_t))(v35 + 8);
      v39(v37, v33);
      v39(v38, v33);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v50, v33);
    goto LABEL_10;
  }
  if (EnumCaseMultiPayload != 1)
  {
    ((void (*)(double *, char *, uint64_t))v26)(v14, v23, v11);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      char v31 = *v14 == *v25;
      goto LABEL_12;
    }
LABEL_10:
    char v31 = 0;
    uint64_t v12 = v49;
    uint64_t v11 = TupleTypeMetadata2;
    goto LABEL_12;
  }
  ((void (*)(char *, char *, uint64_t))v26)(v17, v23, v11);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v46);
    goto LABEL_10;
  }
  uint64_t v29 = v45;
  uint64_t v28 = v46;
  uint64_t v30 = (uint64_t)v42;
  (*(void (**)(char *, double *, uint64_t))(v45 + 32))(v42, v25, v46);
  char v31 = static AnimatedValueTrack<A>.VectorPath.Element.CurveSegment.== infix(_:_:)((uint64_t)v17, v30);
  double v32 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
  v32(v30, v28);
  v32((uint64_t)v17, v28);
LABEL_12:
  (*(void (**)(char *, uint64_t))(v12 + 8))(v23, v11);
  return v31 & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AnimatedValueTrack<A><A>.VectorPath.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static AnimatedValueTrack<A>.VectorPath.Element.== infix(_:_:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

void closure #1 in AnimatedValueTrack<A>.VectorPath<>.init(path:)(uint64_t a1, double *a2, char **a3, float64x2_t *a4)
{
  outlined init with take of Path.Element(a1, (uint64_t)&v45);
  switch(v48)
  {
    case 1:
      float64_t v8 = v45.f64[1];
      float64_t v7 = v45.f64[0];
      long long v49 = 0u;
      long long v50 = 0u;
      char v51 = 1;
      specialized AnimatedValueTrack<A>.VectorPath.addLine(to:duration:timingCurve:)((uint64_t *)&v49, v45.f64[0], v45.f64[1], 1.0);
      goto LABEL_8;
    case 2:
      float64x2_t v15 = vmulq_f64(v46, (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL));
      float64x2_t v16 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
      __asm { FMOV            V1.2D, #3.0 }
      float64x2_t v40 = vsubq_f64(vaddq_f64(v15, vmulq_f64(*a4, v16)), *a4);
      float64x2_t v42 = _Q1;
      float64x2_t v44 = v45;
      float64x2_t v22 = vsubq_f64(v45, vaddq_f64(vmulq_f64(v45, v16), v15));
      goto LABEL_11;
    case 3:
      __asm { FMOV            V0.2D, #3.0 }
      float64x2_t v40 = vsubq_f64(v46, *a4);
      float64x2_t v42 = _Q0;
      float64x2_t v44 = v45;
      float64x2_t v22 = vsubq_f64(v45, v47);
LABEL_11:
      float64x2_t v38 = v22;
      LOBYTE(v49) = 1;
      uint64_t v24 = *a3;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v24;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v24 + 2) + 1, 1, v24);
        *a3 = v24;
      }
      float64x2_t v26 = vmulq_f64(v40, v42);
      float64x2_t v27 = vmulq_f64(v38, v42);
      unint64_t v28 = *((void *)v24 + 2);
      unint64_t v29 = *((void *)v24 + 3);
      unint64_t v30 = v28 + 1;
      if (v28 >= v29 >> 1)
      {
        unint64_t v43 = v28 + 1;
        uint64_t v34 = v24;
        unint64_t v35 = *((void *)v24 + 2);
        float64x2_t v39 = v27;
        float64x2_t v41 = v26;
        uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v28 + 1, 1, v34);
        float64x2_t v27 = v39;
        float64x2_t v26 = v41;
        unint64_t v28 = v35;
        unint64_t v30 = v43;
        uint64_t v24 = v36;
      }
      *((void *)v24 + 2) = v30;
      char v31 = &v24[96 * v28];
      *((float64x2_t *)v31 + 2) = v44;
      *((float64x2_t *)v31 + 3) = v26;
      *((float64x2_t *)v31 + 4) = v27;
      *((void *)v31 + 10) = 0x3FF0000000000000;
      *(_OWORD *)(v31 + 88) = 0u;
      *(_OWORD *)(v31 + 104) = 0u;
      v31[120] = 1;
      v31[121] = 1;
      *a3 = v24;
      *a4 = v44;
      break;
    case 4:
      double v32 = *a2;
      double v33 = a2[1];
      long long v49 = 0u;
      long long v50 = 0u;
      char v51 = 1;
      specialized AnimatedValueTrack<A>.VectorPath.addLine(to:duration:timingCurve:)((uint64_t *)&v49, v32, v33, 1.0);
      *a4 = *(float64x2_t *)a2;
      break;
    default:
      float64_t v8 = v45.f64[1];
      float64_t v7 = v45.f64[0];
      *a2 = v45.f64[0];
      a2[1] = v8;
      uint64_t v9 = *a3;
      char v10 = swift_isUniquelyReferenced_nonNull_native();
      *a3 = v9;
      if ((v10 & 1) == 0)
      {
        uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
        *a3 = v9;
      }
      unint64_t v12 = *((void *)v9 + 2);
      unint64_t v11 = *((void *)v9 + 3);
      unint64_t v13 = v12 + 1;
      if (v12 >= v11 >> 1)
      {
        uint64_t v37 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v9);
        unint64_t v13 = v12 + 1;
        uint64_t v9 = v37;
      }
      *((void *)v9 + 2) = v13;
      uint64_t v14 = &v9[96 * v12];
      *((float64_t *)v14 + 4) = v7;
      *((float64_t *)v14 + 5) = v8;
      *((_OWORD *)v14 + 3) = 0u;
      *((_OWORD *)v14 + 4) = 0u;
      *((_OWORD *)v14 + 5) = 0u;
      *((_OWORD *)v14 + 6) = 0u;
      *(_OWORD *)(v14 + 106) = 0u;
      *a3 = v9;
LABEL_8:
      a4->f64[0] = v7;
      a4->f64[1] = v8;
      break;
  }
}

uint64_t AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  char v6 = *a2;
  type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
  uint64_t v17 = static Array._allocateUninitialized(_:)();
  v15[6] = a3;
  v15[7] = a4;
  type metadata accessor for AnimatedValueKeyframe();
  type metadata accessor for Dictionary();
  swift_getWitnessTable();
  uint64_t v7 = Sequence.sorted(by:)();
  swift_bridgeObjectRelease();
  uint64_t v16 = v7;
  v15[2] = a3;
  v15[3] = a4;
  swift_getTupleTypeMetadata2();
  uint64_t v8 = type metadata accessor for Array();
  uint64_t v9 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #2 in AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:), (uint64_t)v15, v8, v9, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v11);
  swift_bridgeObjectRelease();
  LOBYTE(v16) = v6;
  uint64_t v13 = type metadata accessor for AnimatedValueTrack<A>.VectorPath();
  AnimatedValueTrack<A>.VectorPath.addKeyframes(_:interpolation:)(v12, (unsigned __int8 *)&v16, v13);
  swift_bridgeObjectRelease();
  return v17;
}

double closure #2 in AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)@<D0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v47 = a4;
  uint64_t v51 = a3;
  uint64_t v6 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters();
  uint64_t v45 = *(void *)(v6 - 8);
  v46.n128_u64[0] = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v56 = (uint64_t)&v40 - v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  uint64_t v49 = a2;
  uint64_t v50 = (uint64_t)&v40 - v9;
  uint64_t v10 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AnimatedValueKeyframe();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v16 = TupleTypeMetadata2 - 8;
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  float64x2_t v44 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  unint64_t v43 = (void (**)(char *, uint64_t))((char *)&v40 - v19);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = *(int *)(v16 + 56);
  uint64_t v23 = (char *)&v40 + v22 - v21;
  char v48 = a1;
  *(void (**)(char *, uint64_t))((char *)&v40 - v21) = *(void (**)(char *, uint64_t))a1;
  uint64_t v24 = *(void *)(v14 - 8);
  float64x2_t v41 = *(void (**)(char *))(v24 + 16);
  float64x2_t v42 = (char *)a1 + v22;
  v41(v23);
  uint64_t v25 = v49;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v23, v49);
  float64x2_t v40 = *(void (**)(char *, uint64_t))(v24 + 8);
  v40(v23, v14);
  (*(void (**)(uint64_t))(v51 + 24))(v25);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v25);
  uint64_t v26 = *(int *)(v16 + 56);
  unint64_t v28 = v42;
  float64x2_t v27 = v43;
  unint64_t v29 = (char *)v43 + v26;
  unint64_t v30 = v48;
  *unint64_t v43 = *(void *)v48;
  char v31 = (void (*)(char *, char *, uint64_t))v41;
  ((void (*)(char *, char *, uint64_t))v41)((char *)v27 + v26, v28, v14);
  (*(void (**)(uint64_t, char *, unint64_t))(v45 + 16))(v56, &v29[*(int *)(v14 + 28)], v46.n128_u64[0]);
  double v32 = v40;
  v40(v29, v14);
  uint64_t v33 = *(int *)(v16 + 56);
  uint64_t v34 = v44;
  unint64_t v35 = &v44[v33];
  *(double *)float64x2_t v44 = *v30;
  v31(&v34[v33], v28, v14);
  uint64_t v36 = (__n128 *)&v35[*(int *)(v14 + 32)];
  __n128 v46 = *v36;
  unint64_t v37 = v36[1].n128_u64[0];
  unint64_t v38 = v36[1].n128_u64[1];
  LOBYTE(v16) = v36[2].n128_u8[0];
  v32(v35, v14);
  __n128 v52 = v46;
  unint64_t v53 = v37;
  unint64_t v54 = v38;
  char v55 = v16;
  *(void *)&double result = AnimatedValueTrack<A>.VectorPath.TimedKeyframe.init(value:interpolation:timingCurve:time:)(v50, v56, &v52, v47, *v48).n128_u64[0];
  return result;
}

__n128 AnimatedValueTrack<A>.VectorPath.TimedKeyframe.init(value:interpolation:timingCurve:time:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  __n128 v18 = *a3;
  unint64_t v9 = a3[1].n128_u64[0];
  unint64_t v10 = a3[1].n128_u64[1];
  unsigned __int8 v11 = a3[2].n128_u8[0];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a4, a1, AssociatedTypeWitness);
  uint64_t v13 = (int *)type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe();
  uint64_t v14 = a4 + v13[9];
  uint64_t v15 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a2, v15);
  uint64_t v16 = (__n128 *)(a4 + v13[10]);
  __n128 result = v18;
  __n128 *v16 = v18;
  v16[1].n128_u64[0] = v9;
  v16[1].n128_u64[1] = v10;
  v16[2].n128_u8[0] = v11;
  *(double *)(a4 + v13[11]) = a5;
  return result;
}

uint64_t AnimatedValueTrack<A>.VectorPath.addKeyframes(_:interpolation:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v80 = a3;
  uint64_t v88 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v85 = (uint64_t)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v89 = (uint64_t)&v72 - v10;
  uint64_t v82 = v5;
  uint64_t v11 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v86 = (uint64_t)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v87 = (uint64_t)&v72 - v15;
  MEMORY[0x1F4188790](v16);
  uint64_t v77 = (char *)&v72 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v72 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v72 - v22;
  double v25 = MEMORY[0x1F4188790](v24);
  float64x2_t v27 = (char *)&v72 - v26;
  int v79 = *a2;
  uint64_t result = MEMORY[0x18C115C50](a1, v11, v25);
  uint64_t v78 = result;
  if (result >= 2)
  {
    Array.subscript.getter();
    uint64_t v83 = a1;
    uint64_t v75 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
    uint64_t v76 = v23;
    uint64_t v29 = v89;
    uint64_t v30 = AssociatedTypeWitness;
    v75(v89, v27, AssociatedTypeWitness);
    uint64_t v84 = v12;
    char v31 = (char *)(v12 + 8);
    double v32 = *(void (**)(char *, uint64_t))(v12 + 8);
    v32(v27, v11);
    AnimatedValueTrack<A>.VectorPath.move(to:)(v29);
    v91 = (char *)v7;
    uint64_t v81 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v81(v29, v30);
    Array.subscript.getter();
    v75(v29, v27, v30);
    v32(v27, v11);
    uint64_t v33 = v76;
    Array.subscript.getter();
    double v34 = *(double *)&v33[*(int *)(v11 + 44)];
    uint64_t v76 = v31;
    uint64_t v75 = (void (*)(uint64_t, char *, uint64_t))v32;
    v32(v33, v11);
    uint64_t v35 = v84;
    uint64_t v36 = v7 + 8;
    uint64_t v37 = (uint64_t)v91;
    __n128 v98 = 0u;
    long long v99 = 0u;
    char v100 = 1;
    AnimatedValueTrack<A>.VectorPath.addLine(to:duration:timingCurve:)(v29, &v98, v80, v34);
    v81(v29, v30);
    uint64_t v96 = v83;
    type metadata accessor for Array();
    swift_getWitnessTable();
    uint64_t v38 = MEMORY[0x1E4FBB590];
    RandomAccessCollection<>.indices.getter();
    __n128 v95 = v98;
    uint64_t v94 = 1;
    type metadata accessor for Range<Int>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB6A0]);
    type metadata accessor for Range<Int>(0, (unint64_t *)&lazy cache variable for type metadata for PartialRangeFrom<Int>, MEMORY[0x1E4FBBC28]);
    unint64_t v39 = lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v92 = v38;
    unint64_t v93 = v39;
    swift_getWitnessTable();
    swift_getWitnessTable();
    uint64_t result = Collection.subscript.getter();
    uint64_t v40 = v96;
    if (v96 != v97)
    {
      if (v97 >= v96)
      {
        if (v96 >= v97)
        {
LABEL_17:
          __break(1u);
          return result;
        }
        v73 = (void (**)(uint64_t, char *, uint64_t))(v35 + 16);
        char v72 = (void (**)(uint64_t, uint64_t, uint64_t))(v37 + 40);
        v91 = v20;
        uint64_t v74 = v97;
        while (1)
        {
          uint64_t result = v40 - 1;
          if (__OFSUB__(v40, 1)) {
            break;
          }
          Array.subscript.getter();
          uint64_t v65 = v77;
          Array.subscript.getter();
          if (v40 >= 2)
          {
            Array.subscript.getter();
          }
          else
          {
            uint64_t v66 = v87;
            (*v73)(v87, v20, v11);
            *(double *)(v66 + *(int *)(v11 + 44)) = *(double *)&v20[*(int *)(v11 + 44)]
                                                  - (*(double *)&v65[*(int *)(v11 + 44)]
                                                   - *(double *)&v20[*(int *)(v11 + 44)]);
            uint64_t v67 = AssociatedTypeWitness;
            swift_getAssociatedConformanceWitness();
            uint64_t v68 = v36;
            uint64_t v69 = v85;
            dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
            uint64_t v70 = v89;
            dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
            uint64_t v71 = v69;
            uint64_t v36 = v68;
            v81(v71, v67);
            (*v72)(v66, v70, v67);
          }
          uint64_t v84 = v40 + 1;
          if (v40 + 1 < v78)
          {
            Array.subscript.getter();
            uint64_t v47 = v82;
            uint64_t v42 = v36;
            uint64_t v48 = (uint64_t)v65;
            uint64_t v51 = v81;
          }
          else
          {
            uint64_t v41 = v86;
            (*v73)(v86, v65, v11);
            *(double *)(v41 + *(int *)(v11 + 44)) = *(double *)&v65[*(int *)(v11 + 44)]
                                                  + *(double *)&v65[*(int *)(v11 + 44)]
                                                  - *(double *)&v20[*(int *)(v11 + 44)];
            uint64_t v42 = v36;
            uint64_t v43 = v85;
            uint64_t v45 = v89;
            uint64_t v44 = AssociatedTypeWitness;
            uint64_t v46 = v41;
            uint64_t v47 = v82;
            swift_getAssociatedConformanceWitness();
            dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
            dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
            uint64_t v48 = (uint64_t)v65;
            uint64_t v49 = v45;
            uint64_t v50 = v46;
            uint64_t v20 = v91;
            uint64_t v51 = v81;
            v81(v43, v44);
            (*v72)(v50, v49, v44);
          }
          unsigned __int8 v52 = v79;
          v98.n128_u8[0] = v79;
          uint64_t v53 = v88;
          uint64_t v54 = v89;
          uint64_t v55 = v87;
          static AnimatedValueTrack<A>.VectorPath.makeStartTangent(before:from:to:interpolation:)(v87, (uint64_t)v20, v48, (char *)&v98, v88, v47, v89);
          v98.n128_u8[0] = v52;
          uint64_t v56 = v85;
          uint64_t v57 = v86;
          static AnimatedValueTrack<A>.VectorPath.makeEndTangent(from:to:after:interpolation:)((uint64_t)v91, v48, v86, (unsigned __int8 *)&v98, v53, v47, v85);
          double v58 = *(double *)(v48 + *(int *)(v11 + 44)) - *(double *)&v91[*(int *)(v11 + 44)];
          uint64_t v59 = v48 + *(int *)(v11 + 40);
          char v60 = *(unsigned char *)(v59 + 32);
          long long v61 = *(_OWORD *)(v59 + 16);
          __n128 v98 = *(__n128 *)v59;
          long long v99 = v61;
          char v100 = v60;
          AnimatedValueTrack<A>.VectorPath.addCurve(to:startTangent:endTangent:duration:timingCurve:)(v48, v54, v56, &v98, v80, v58);
          uint64_t v62 = v56;
          uint64_t v63 = AssociatedTypeWitness;
          uint64_t v20 = v91;
          v51(v62, AssociatedTypeWitness);
          v51(v54, v63);
          uint64_t v64 = (void (*)(char *, uint64_t))v75;
          ((void (*)(uint64_t, uint64_t))v75)(v48, v11);
          v64(v20, v11);
          v64((char *)v57, v11);
          uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v64)(v55, v11);
          uint64_t v40 = v84;
          uint64_t v36 = v42;
          if (v74 == v84) {
            return result;
          }
        }
        __break(1u);
      }
      __break(1u);
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t AnimatedValueTrack<A>.VectorPath.init(duration:keyframes:interpolation:)(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v10 = type metadata accessor for AnimatedValueKeyframe();
  uint64_t v11 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v47 - v12;
  uint64_t v14 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v47 - v16;
  int v18 = *a2;
  uint64_t v52 = a1;
  *(void *)&long long v58 = a1;
  uint64_t v19 = type metadata accessor for Array();
  swift_getWitnessTable();
  if ((Collection.isEmpty.getter() & 1) != 0 || a5 <= 0.0)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
    return static Array._allocateUninitialized(_:)();
  }
  uint64_t v48 = v14;
  int v49 = v18;
  uint64_t v57 = v52;
  *(void *)&long long v58 = v52;
  *(void *)&long long v55 = 1;
  swift_bridgeObjectRetain();
  Collection.suffix(from:)();
  long long v51 = v53;
  long long v55 = v53;
  long long v56 = v54[0];
  uint64_t v20 = type metadata accessor for ArraySlice();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v22 = swift_getWitnessTable();
  zip<A, B>(_:_:)();
  uint64_t v23 = swift_unknownObjectRelease();
  long long v53 = v58;
  *(void *)&v54[0] = v59;
  *(_OWORD *)((char *)v54 + 8) = v60;
  MEMORY[0x1F4188790](v23);
  *(&v47 - 2) = a3;
  *(&v47 - 1) = a4;
  MEMORY[0x1F4188790](v24);
  uint64_t v50 = a3;
  *(&v47 - 4) = a3;
  *(&v47 - 3) = a4;
  *(&v47 - 2) = (uint64_t)partial apply for closure #1 in AnimatedValueTrack<A>.VectorPath.init(duration:keyframes:interpolation:);
  *(&v47 - 1) = v25;
  *(void *)&long long v55 = v19;
  *((void *)&v55 + 1) = v20;
  *(void *)&long long v56 = WitnessTable;
  *((void *)&v56 + 1) = v22;
  uint64_t v26 = type metadata accessor for Zip2Sequence();
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v29 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for thunk for @callee_guaranteed (@in_guaranteed AnimatedValueKeyframe<A>, @in_guaranteed AnimatedValueKeyframe<A>) -> (@unowned Double), (uint64_t)(&v47 - 6), v26, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBC248], v27, MEMORY[0x1E4FBC278], v28);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  uint64_t v30 = *(void *)(v29 + 16);
  if (!v30)
  {
    double v33 = 0.0;
    uint64_t v31 = v50;
    goto LABEL_13;
  }
  uint64_t v31 = v50;
  if (v30 == 1)
  {
    uint64_t v32 = 0;
    double v33 = 0.0;
LABEL_11:
    uint64_t v37 = v30 - v32;
    uint64_t v38 = (double *)(v29 + 8 * v32 + 32);
    do
    {
      double v39 = *v38++;
      double v33 = v33 + v39;
      --v37;
    }
    while (v37);
    goto LABEL_13;
  }
  uint64_t v32 = v30 & 0x7FFFFFFFFFFFFFFELL;
  uint64_t v35 = (double *)(v29 + 40);
  double v33 = 0.0;
  uint64_t v36 = v30 & 0x7FFFFFFFFFFFFFFELL;
  do
  {
    double v33 = v33 + *(v35 - 1) + *v35;
    v35 += 2;
    v36 -= 2;
  }
  while (v36);
  if (v30 != v32) {
    goto LABEL_11;
  }
LABEL_13:
  *(void *)&long long v51 = v29;
  swift_getTupleTypeMetadata2();
  static Array._allocateUninitialized(_:)();
  *(void *)&long long v53 = Dictionary.init(dictionaryLiteral:)();
  *(void *)&long long v55 = v52;
  swift_getWitnessTable();
  uint64_t result = RandomAccessCollection<>.indices.getter();
  uint64_t v40 = *((void *)&v58 + 1);
  unint64_t v41 = v58;
  if ((void)v58 == *((void *)&v58 + 1))
  {
    swift_bridgeObjectRelease();
LABEL_24:
    swift_bridgeObjectRelease();
    LOBYTE(v58) = v49;
    return AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)(v53, (char *)&v58, v31, a4);
  }
  else
  {
    if (*((uint64_t *)&v58 + 1) < (uint64_t)v58) {
      goto LABEL_27;
    }
    if ((uint64_t)v58 < *((uint64_t *)&v58 + 1))
    {
      uint64_t v47 = a4;
      uint64_t v42 = *(void *)(v51 + 16);
      uint64_t v43 = (void (**)(char *, char *, uint64_t))(v48 + 16);
      uint64_t v44 = (void (**)(char *, void, uint64_t, uint64_t))(v48 + 56);
      uint64_t v45 = (void (**)(char *, uint64_t))(v48 + 8);
      double v46 = 0.0;
      while (1)
      {
        Array.subscript.getter();
        (*v43)(v13, v17, v10);
        (*v44)(v13, 0, 1, v10);
        *(double *)&long long v58 = v46;
        type metadata accessor for Dictionary();
        uint64_t result = Dictionary.subscript.setter();
        if ((uint64_t)v41 < v42)
        {
          if ((v41 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_26:
            __break(1u);
LABEL_27:
            __break(1u);
            break;
          }
          if (v41 >= *(void *)(v51 + 16)) {
            goto LABEL_26;
          }
          double v46 = v46 + *(double *)(v51 + 8 * v41 + 32) / v33 * a5;
        }
        ++v41;
        (*v45)(v17, v10);
        if (v40 == v41)
        {
          swift_bridgeObjectRelease();
          a4 = v47;
          uint64_t v31 = v50;
          goto LABEL_24;
        }
      }
    }
    __break(1u);
  }
  return result;
}

double closure #1 in AnimatedValueTrack<A>.VectorPath.init(duration:keyframes:interpolation:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[1] = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v22 - v11;
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v22 - v15;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, double))(a4 + 24);
  v17(a3, a4, v14);
  ((void (*)(uint64_t, uint64_t))v17)(a3, a4);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v9, AssociatedTypeWitness);
  v19(v12, AssociatedTypeWitness);
  double v20 = sqrt((*(double (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 24))(AssociatedTypeWitness, AssociatedConformanceWitness));
  v19(v16, AssociatedTypeWitness);
  return v20;
}

uint64_t static AnimatedValueTrack<A>.VectorPath.makeStartTangent(before:from:to:interpolation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v41 = a3;
  uint64_t v39 = a1;
  uint64_t v43 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v38 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v37 = (char *)&v36 - v15;
  uint64_t v40 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v16);
  int v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (double *)((char *)&v36 - v21);
  char v23 = *a4;
  uint64_t v24 = *(int *)(type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe() + 36);
  uint64_t v42 = a2;
  uint64_t v25 = a2 + v24;
  uint64_t v26 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters();
  (*(void (**)(double *, uint64_t, uint64_t))(v20 + 16))(v22, v25 + *(int *)(v26 + 28), v19);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v31 = v40;
      (*(void (**)(char *, double *, uint64_t))(v40 + 32))(v18, v22, a5);
      (*(void (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      double v33 = v37;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      double v34 = *(void (**)(char *, uint64_t))(v38 + 8);
      v34(v13, AssociatedTypeWitness);
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, v43, 3.0);
      v34(v33, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v18, a5);
    case 2u:
      uint64_t v35 = v40;
      (*(void (**)(char *, double *, uint64_t))(v40 + 32))(v18, v22, a5);
      (*(void (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6);
      return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v18, a5);
    case 3u:
      goto LABEL_6;
    case 4u:
      if (v23)
      {
        double v27 = 0.0;
        double v28 = 0.0;
        double v29 = 0.0;
        return solve #1 <A>(tension:continuity:bias:) in static AnimatedValueTrack<A>.VectorPath.makeStartTangent(before:from:to:interpolation:)(v42, v39, v41, a5, a6, v43, v27, v28, v29);
      }
      else
      {
LABEL_6:
        swift_getAssociatedConformanceWitness();
        return dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      }
    default:
      double v27 = *v22;
      double v28 = v22[1];
      double v29 = v22[2];
      return solve #1 <A>(tension:continuity:bias:) in static AnimatedValueTrack<A>.VectorPath.makeStartTangent(before:from:to:interpolation:)(v42, v39, v41, a5, a6, v43, v27, v28, v29);
  }
}

uint64_t static AnimatedValueTrack<A>.VectorPath.makeEndTangent(from:to:after:interpolation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v37 = a3;
  uint64_t v39 = a1;
  uint64_t v41 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v35 = (char *)&v34 - v15;
  uint64_t v38 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](v16);
  int v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters.Mode();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (double *)((char *)&v34 - v21);
  int v23 = *a4;
  uint64_t v24 = *(int *)(type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe() + 36);
  uint64_t v40 = a2;
  (*(void (**)(double *, uint64_t, uint64_t))(v20 + 16))(v22, a2 + v24, v19);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v29 = v38;
      (*(void (**)(char *, double *, uint64_t))(v38 + 32))(v18, v22, a5);
      (*(void (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6);
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v31 = v35;
      dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      uint64_t v32 = *(void (**)(char *, uint64_t))(v36 + 8);
      v32(v13, AssociatedTypeWitness);
      VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, v41, 3.0);
      v32(v31, AssociatedTypeWitness);
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v18, a5);
    case 2u:
      uint64_t v33 = v38;
      (*(void (**)(char *, double *, uint64_t))(v38 + 32))(v18, v22, a5);
      (*(void (**)(uint64_t, uint64_t))(a6 + 24))(a5, a6);
      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v18, a5);
    case 3u:
      goto LABEL_6;
    case 4u:
      if (v23)
      {
        double v25 = 0.0;
        double v26 = 0.0;
        double v27 = 0.0;
        return solve #1 <A>(tension:continuity:bias:) in static AnimatedValueTrack<A>.VectorPath.makeEndTangent(from:to:after:interpolation:)(v40, v39, v37, a5, a6, v41, v25, v26, v27);
      }
      else
      {
LABEL_6:
        swift_getAssociatedConformanceWitness();
        return dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
      }
    default:
      double v25 = *v22;
      double v26 = v22[1];
      double v27 = v22[2];
      return solve #1 <A>(tension:continuity:bias:) in static AnimatedValueTrack<A>.VectorPath.makeEndTangent(from:to:after:interpolation:)(v40, v39, v37, a5, a6, v41, v25, v26, v27);
  }
}

uint64_t solve #1 <A>(tension:continuity:bias:) in static AnimatedValueTrack<A>.VectorPath.makeStartTangent(before:from:to:interpolation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>)
{
  uint64_t v37 = a6;
  uint64_t v38 = a3;
  uint64_t v34 = a2;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v33 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v33 - v21;
  double v23 = 1.0 - a7;
  double v24 = (1.0 - a7) * (a8 + 1.0) * (a9 + 1.0) * 0.5;
  double v25 = v23 * (1.0 - a8) * (1.0 - a9) * 0.5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v22, v24);
  double v27 = *(void (**)(char *, uint64_t))(v14 + 8);
  v27(v19, AssociatedTypeWitness);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v19, v25);
  v27(v16, AssociatedTypeWitness);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v27(v19, AssociatedTypeWitness);
  v27(v22, AssociatedTypeWitness);
  uint64_t result = type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe();
  uint64_t v29 = *(int *)(result + 44);
  double v30 = *(double *)(a1 + v29);
  double v31 = v30 - *(double *)(v34 + v29);
  if (v31 > 0.0)
  {
    double v32 = *(double *)(v38 + v29) - v30;
    if (v32 > 0.0) {
      return (*(uint64_t (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness, (v32 + v32) / (v31 + v32));
    }
  }
  return result;
}

uint64_t solve #1 <A>(tension:continuity:bias:) in static AnimatedValueTrack<A>.VectorPath.makeEndTangent(from:to:after:interpolation:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>)
{
  uint64_t v37 = a6;
  uint64_t v38 = a3;
  uint64_t v34 = a2;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v33 - v18;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v33 - v21;
  double v23 = 1.0 - a7;
  double v24 = (1.0 - a7) * (1.0 - a8) * (a9 + 1.0) * 0.5;
  double v25 = v23 * (a8 + 1.0) * (1.0 - a9) * 0.5;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v22, v24);
  double v27 = *(void (**)(char *, uint64_t))(v14 + 8);
  v27(v19, AssociatedTypeWitness);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
  VectorArithmetic.scaled(by:)(AssociatedTypeWitness, AssociatedConformanceWitness, (uint64_t)v19, v25);
  v27(v16, AssociatedTypeWitness);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)();
  v27(v19, AssociatedTypeWitness);
  v27(v22, AssociatedTypeWitness);
  uint64_t result = type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe();
  uint64_t v29 = *(int *)(result + 44);
  double v30 = *(double *)(a1 + v29);
  double v31 = v30 - *(double *)(v34 + v29);
  if (v31 > 0.0)
  {
    double v32 = *(double *)(v38 + v29) - v30;
    if (v32 > 0.0) {
      return (*(uint64_t (**)(uint64_t, uint64_t, double))(AssociatedConformanceWitness + 16))(AssociatedTypeWitness, AssociatedConformanceWitness, (v31 + v31) / (v31 + v32));
    }
  }
  return result;
}

double Curve.parametricTime(forArcLength:)(uint64_t a1, double a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Curve.arcLength(at:)(v8, 1.0);
  if (v9 <= 0.0) {
    return 0.0;
  }
  double v10 = a2 / v9;
  Curve.arcLength(at:)(a1, a2 / v9);
  if (vabdd_f64(v11, a2) >= 0.1)
  {
    double v12 = v11 - a2;
    uint64_t v13 = *(void *)(a1 + 24);
    uint64_t v14 = *(double (**)(uint64_t, uint64_t))(v13 + 24);
    uint64_t v15 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v16 = 10;
    do
    {
      Curve.velocity(at:)(a1, (uint64_t)v7, v10);
      double v10 = v10 - v12 / sqrt(v14(v4, v13));
      if ((~*(void *)&v10 & 0x7FF0000000000000) != 0)
      {
        (*v15)(v7, v4);
        if (!--v16) {
          return v10;
        }
      }
      else
      {
        (*v15)(v7, v4);
        if ((*(void *)&v10 & 0xFFFFFFFFFFFFFLL) != 0) {
          return 0.0;
        }
        if (!--v16) {
          return v10;
        }
      }
      Curve.arcLength(at:)(a1, v10);
      double v12 = v17 - a2;
    }
    while (vabdd_f64(v17, a2) >= 0.1);
  }
  return v10;
}

void Curve.arcLength(at:)(uint64_t a1, double a2)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v27 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  double v26 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  double v11 = (char *)&v25 - v10;
  uint64_t v12 = type metadata accessor for Quadrature.Integrator();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (uint64_t *)((char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = type metadata accessor for Quadrature();
  v19.n128_f64[0] = MEMORY[0x1F4188790](v16);
  uint64_t v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 < 0.0)
  {
    if (a2 <= 0.0) {
      goto LABEL_5;
    }
    __break(1u);
  }
  if (a2 < 0.0)
  {
    __break(1u);
    return;
  }
LABEL_5:
  uint64_t v28 = v18;
  uint64_t v29 = v17;
  *uint64_t v15 = 8;
  (*(void (**)(void *, void, uint64_t, __n128))(v13 + 104))(v15, *MEMORY[0x1E4FBAA18], v12, v19);
  uint64_t v22 = Quadrature.init(integrator:absoluteTolerance:relativeTolerance:)();
  MEMORY[0x1F4188790](v22);
  uint64_t v23 = *(void *)(a1 + 24);
  *(&v25 - 4) = v4;
  *(&v25 - 3) = v23;
  *(&v25 - 2) = v30;
  Quadrature.integrate(over:integrand:)();
  outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v11, (uint64_t)v8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    double v24 = v26;
    dispatch thunk of static AdditiveArithmetic.- infix(_:_:)();
    (*(void (**)(uint64_t, uint64_t))(v23 + 24))(v4, v23);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v4);
    outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v11);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v21, v29);
    outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v8);
  }
  else
  {
    outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>((uint64_t)v11);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v21, v29);
  }
}

double closure #1 in Curve.arcLength(at:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Curve();
  Curve.velocity(at:)(v10, (uint64_t)v9, a4);
  double v11 = (*(double (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  return sqrt(v11);
}

void type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>()
{
  if (!lazy cache variable for type metadata for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>)
  {
    type metadata accessor for (integralResult: Double, estimatedAbsoluteError: Double)();
    type metadata accessor for Quadrature.Error();
    lazy protocol witness table accessor for type Quadrature.Error and conformance Quadrature.Error();
    unint64_t v0 = type metadata accessor for Result();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>);
    }
  }
}

void type metadata accessor for (integralResult: Double, estimatedAbsoluteError: Double)()
{
  if (!lazy cache variable for type metadata for (integralResult: Double, estimatedAbsoluteError: Double))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (integralResult: Double, estimatedAbsoluteError: Double));
    }
  }
}

unint64_t lazy protocol witness table accessor for type Quadrature.Error and conformance Quadrature.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type Quadrature.Error and conformance Quadrature.Error;
  if (!lazy protocol witness table cache variable for type Quadrature.Error and conformance Quadrature.Error)
  {
    type metadata accessor for Quadrature.Error();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Quadrature.Error and conformance Quadrature.Error);
  }
  return result;
}

double partial apply for closure #1 in Curve.arcLength(at:)(double a1)
{
  return closure #1 in Curve.arcLength(at:)(v1[4], v1[2], v1[3], a1);
}

uint64_t outlined init with copy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>(uint64_t a1)
{
  type metadata accessor for Result<(integralResult: Double, estimatedAbsoluteError: Double), Quadrature.Error>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in AnimatedValueTrack<A>.VectorPath.endValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element();
  return AnimatedValueTrack<A>.VectorPath.Element.end(previousValue:)(a1, v4, a2);
}

BOOL partial apply for closure #1 in AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)(double *a1, double *a2)
{
  return *a1 < *a2;
}

double partial apply for closure #2 in AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)@<D0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #2 in AnimatedValueTrack<A>.VectorPath.init(keyframes:interpolation:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t type metadata accessor for AnimatedValueTrack<A>.VectorPath.TimedKeyframe()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Range<Int>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

double partial apply for closure #1 in AnimatedValueTrack<A>.VectorPath.init(duration:keyframes:interpolation:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in AnimatedValueTrack<A>.VectorPath.init(duration:keyframes:interpolation:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

void partial apply for thunk for @callee_guaranteed (@in_guaranteed AnimatedValueKeyframe<A>, @in_guaranteed AnimatedValueKeyframe<A>) -> (@unowned Double)(uint64_t a1@<X0>, double *a2@<X8>)
{
  uint64_t v5 = *(double (**)(uint64_t, uint64_t))(v2 + 32);
  type metadata accessor for AnimatedValueKeyframe();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a2 = v5(a1, a1 + *(int *)(TupleTypeMetadata2 + 48));
}

uint64_t type metadata completion function for AnimatedValueTrack<A>.VectorPath.TimedKeyframe()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AnimatedValueKeyframe.InterpolationParameters();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(v5 - 8);
  int v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 & 0xF8 | 7;
  uint64_t v12 = ~v11;
  uint64_t v13 = v8 + v11;
  uint64_t v14 = (v8 + v11) & ~v11;
  if (*(void *)(v9 + 64) <= 0x18uLL) {
    uint64_t v15 = 24;
  }
  else {
    uint64_t v15 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  uint64_t v16 = 1;
  if (v15 > 3)
  {
    uint64_t v17 = 1;
    goto LABEL_13;
  }
  unsigned int v18 = ((1 << (8 * v15)) + 1) >> (8 * v15);
  if (v18 > 0xFFFC)
  {
    uint64_t v16 = 4;
  }
  else
  {
    if (v18 < 0xFD)
    {
      uint64_t v16 = 1;
      uint64_t v17 = 1;
      goto LABEL_13;
    }
    uint64_t v16 = 2;
  }
  BOOL v21 = v18 > 0xFFFC;
  uint64_t v17 = 2;
  if (v21) {
    uint64_t v17 = 4;
  }
LABEL_13:
  unint64_t v19 = ((v15 + v14 + ((v15 + v16 + v11) & v12) + v17 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  int v20 = v10 | *(_DWORD *)(v7 + 80);
  BOOL v21 = (v20 & 0x1000F8) != 0 || v19 > 0x18;
  if (!v21)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v23 = (unint64_t)a1 + v13;
    unint64_t v24 = (unint64_t)a2 + v13;
    uint64_t v25 = (unsigned __int8 *)(((unint64_t)a2 + v13) & v12);
    if (v15 > 3) {
      goto LABEL_22;
    }
    unsigned int v26 = ((1 << (8 * v15)) + 1) >> (8 * v15);
    if (v26 > 0xFFFC)
    {
      unsigned int v27 = *(_DWORD *)&v25[v15];
    }
    else
    {
      if (v26 <= 0xFC)
      {
LABEL_22:
        unsigned int v27 = v25[v15];
        goto LABEL_25;
      }
      unsigned int v27 = *(unsigned __int16 *)&v25[v15];
    }
LABEL_25:
    uint64_t v28 = (_OWORD *)(v23 & v12);
    unsigned int v29 = v27 - 3;
    if (v27 >= 3)
    {
      if (v15 <= 3) {
        uint64_t v30 = v15;
      }
      else {
        uint64_t v30 = 4;
      }
      switch(v30)
      {
        case 1:
          int v31 = *v25;
          goto LABEL_34;
        case 2:
          int v31 = *(unsigned __int16 *)v25;
          goto LABEL_34;
        case 3:
          int v31 = *(unsigned __int16 *)v25 | (v25[2] << 16);
          goto LABEL_34;
        case 4:
          int v31 = *(_DWORD *)v25;
LABEL_34:
          int v32 = (v31 | (v29 << (8 * v15))) + 3;
          unsigned int v27 = v31 + 3;
          if (v15 < 4) {
            unsigned int v27 = v32;
          }
          break;
        default:
          break;
      }
    }
    if (v27 != 2)
    {
      if (v27 != 1)
      {
        if (!v27)
        {
          long long v33 = *(_OWORD *)v25;
          *(void *)((v23 & v12) + 0x10) = *((void *)v25 + 2);
          *uint64_t v28 = v33;
          if (v15 > 3) {
            goto LABEL_40;
          }
          unsigned int v34 = ((1 << (8 * v15)) + 1) >> (8 * v15);
          if (v34 > 0xFFFC)
          {
            *(_DWORD *)((char *)v28 + v15) = 0;
          }
          else
          {
            if (v34 <= 0xFC)
            {
LABEL_40:
              *((unsigned char *)v28 + v15) = 0;
              if (v15 > 3)
              {
LABEL_61:
                uint64_t v40 = 1;
                goto LABEL_72;
              }
              goto LABEL_58;
            }
            *(_WORD *)((char *)v28 + v15) = 0;
          }
LABEL_70:
          BOOL v21 = v34 > 0xFFFC;
          uint64_t v40 = 2;
          if (v21) {
            uint64_t v40 = 4;
          }
          goto LABEL_72;
        }
        if (v15 > 3) {
          goto LABEL_56;
        }
        unsigned int v37 = ((1 << (8 * v15)) + 1) >> (8 * v15);
        uint64_t v38 = 2;
        if (v37 > 0xFFFC) {
          uint64_t v38 = 4;
        }
        if (v37 <= 0xFC) {
LABEL_56:
        }
          uint64_t v38 = 1;
        memcpy((void *)(v23 & v12), v25, v38 + v15);
        if (v15 > 3) {
          goto LABEL_61;
        }
LABEL_58:
        unsigned int v39 = ((1 << (8 * v15)) + 1) >> (8 * v15);
        uint64_t v40 = 2;
        if (v39 > 0xFFFC) {
          uint64_t v40 = 4;
        }
        if (v39 <= 0xFC) {
          goto LABEL_61;
        }
LABEL_72:
        uint64_t v41 = v40 + v15;
        unint64_t v42 = (v23 | v11) + v41;
        uint64_t v43 = (void *)(((v24 | v11) + v41) & v12);
        if (v15 <= 3)
        {
          unsigned int v44 = ((1 << (8 * v15)) + 1) >> (8 * v15);
          if (v44 > 0xFFFC)
          {
            unsigned int v45 = *(_DWORD *)((char *)v43 + v15);
          }
          else
          {
            if (v44 <= 0xFC) {
              goto LABEL_75;
            }
            unsigned int v45 = *(unsigned __int16 *)((char *)v43 + v15);
          }
LABEL_78:
          double v46 = (void *)(v42 & v12);
          unsigned int v47 = v45 - 3;
          if (v45 >= 3)
          {
            if (v15 <= 3) {
              uint64_t v48 = v15;
            }
            else {
              uint64_t v48 = 4;
            }
            switch(v48)
            {
              case 1:
                int v49 = *(unsigned __int8 *)v43;
                goto LABEL_87;
              case 2:
                int v49 = *(unsigned __int16 *)v43;
                goto LABEL_87;
              case 3:
                int v49 = *(unsigned __int16 *)v43 | (*((unsigned __int8 *)v43 + 2) << 16);
                goto LABEL_87;
              case 4:
                int v49 = *(_DWORD *)v43;
LABEL_87:
                int v50 = (v49 | (v47 << (8 * v15))) + 3;
                unsigned int v45 = v49 + 3;
                if (v15 < 4) {
                  unsigned int v45 = v50;
                }
                break;
              default:
                break;
            }
          }
          if (v45 != 2)
          {
            if (v45 != 1)
            {
              if (v45)
              {
                if (v15 > 3) {
                  goto LABEL_106;
                }
                unsigned int v54 = ((1 << (8 * v15)) + 1) >> (8 * v15);
                uint64_t v55 = 2;
                if (v54 > 0xFFFC) {
                  uint64_t v55 = 4;
                }
                if (v54 <= 0xFC) {
LABEL_106:
                }
                  uint64_t v55 = 1;
                memcpy(v46, v43, v55 + v15);
              }
              else
              {
                long long v51 = *(_OWORD *)v43;
                v46[2] = v43[2];
                *(_OWORD *)double v46 = v51;
                if (v15 <= 3)
                {
                  unsigned int v52 = ((1 << (8 * v15)) + 1) >> (8 * v15);
                  if (v52 > 0xFFFC)
                  {
                    *(_DWORD *)((char *)v46 + v15) = 0;
                    uint64_t v56 = 4;
                    goto LABEL_123;
                  }
                  if (v52 > 0xFC)
                  {
                    *(_WORD *)((char *)v46 + v15) = 0;
LABEL_122:
                    uint64_t v56 = 2;
LABEL_123:
                    BOOL v21 = v52 > 0xFFFC;
                    uint64_t v57 = 2;
                    if (v21) {
                      uint64_t v57 = 4;
                    }
                    goto LABEL_125;
                  }
                }
                *((unsigned char *)v46 + v15) = 0;
              }
LABEL_108:
              uint64_t v56 = 1;
              if (v15 > 3)
              {
                uint64_t v57 = 1;
LABEL_125:
                uint64_t v58 = ((v15 + v56 + v11) & v12) + v15 + v57;
                uint64_t v59 = (char *)v28 + v58;
                long long v60 = &v25[v58];
                unint64_t v61 = (unint64_t)(v59 + 7) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v62 = (unint64_t)(v60 + 7) & 0xFFFFFFFFFFFFFFF8;
                long long v63 = *(_OWORD *)v62;
                long long v64 = *(_OWORD *)(v62 + 16);
                *(unsigned char *)(v61 + 32) = *(unsigned char *)(v62 + 32);
                *(_OWORD *)unint64_t v61 = v63;
                *(_OWORD *)(v61 + 16) = v64;
                *(void *)((unint64_t)(v59 + 47) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)(v60 + 47) & 0xFFFFFFFFFFFFFFF8);
                return a1;
              }
              unsigned int v52 = ((1 << (8 * v15)) + 1) >> (8 * v15);
              if (v52 > 0xFFFC)
              {
                uint64_t v56 = 4;
                goto LABEL_123;
              }
              if (v52 < 0xFD)
              {
                uint64_t v56 = 1;
                uint64_t v57 = 1;
                goto LABEL_125;
              }
              goto LABEL_122;
            }
            (*(void (**)(void *))(v9 + 16))(v46);
            if (v15 > 3)
            {
LABEL_101:
              *((unsigned char *)v46 + v15) = 1;
              goto LABEL_108;
            }
            int v53 = 1;
            unsigned int v52 = ((1 << (8 * v15)) + 1) >> (8 * v15);
            if (v52 <= 0xFFFC)
            {
              if (v52 > 0xFC)
              {
                *(_WORD *)((char *)v46 + v15) = 1;
                goto LABEL_122;
              }
              goto LABEL_101;
            }
LABEL_118:
            *(_DWORD *)((char *)v46 + v15) = v53;
            uint64_t v56 = 4;
            goto LABEL_123;
          }
          (*(void (**)(void *))(v9 + 16))(v46);
          if (v15 <= 3)
          {
            unsigned int v52 = ((1 << (8 * v15)) + 1) >> (8 * v15);
            if (v52 > 0xFFFC)
            {
              int v53 = 2;
              goto LABEL_118;
            }
            if (v52 > 0xFC)
            {
              uint64_t v56 = 2;
              *(_WORD *)((char *)v46 + v15) = 2;
              goto LABEL_123;
            }
          }
          *((unsigned char *)v46 + v15) = 2;
          goto LABEL_108;
        }
LABEL_75:
        unsigned int v45 = *((unsigned __int8 *)v43 + v15);
        goto LABEL_78;
      }
      (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v9 + 16))(v23 & v12, v25, v5);
      if (v15 > 3) {
        goto LABEL_49;
      }
      int v36 = 1;
      unsigned int v34 = ((1 << (8 * v15)) + 1) >> (8 * v15);
      if (v34 <= 0xFFFC)
      {
        if (v34 <= 0xFC)
        {
LABEL_49:
          char v35 = 1;
LABEL_50:
          *((unsigned char *)v28 + v15) = v35;
          if (v15 > 3) {
            goto LABEL_61;
          }
          goto LABEL_58;
        }
LABEL_69:
        *(_WORD *)((char *)v28 + v15) = v36;
        goto LABEL_70;
      }
LABEL_66:
      *(_DWORD *)((char *)v28 + v15) = v36;
      goto LABEL_70;
    }
    (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v9 + 16))(v23 & v12, v25, v5);
    if (v15 <= 3)
    {
      unsigned int v34 = ((1 << (8 * v15)) + 1) >> (8 * v15);
      if (v34 > 0xFFFC)
      {
        int v36 = 2;
        goto LABEL_66;
      }
      if (v34 > 0xFC)
      {
        LOWORD(v36) = 2;
        goto LABEL_69;
      }
    }
    char v35 = 2;
    goto LABEL_50;
  }
  uint64_t v22 = *a2;
  *a1 = *a2;
  a1 = (uint64_t *)(v22 + (((v20 & 0xF8 | 7u) + 16) & ~(unint64_t)(v20 & 0xF8 | 7u)));
  swift_retain();
  return a1;
}

unsigned __int8 *destroy for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80) & 0xF8 | 7;
  uint64_t v8 = (unsigned __int8 *)((*(void *)(v5 + 56) + a1 + v7) & ~v7);
  if (*(void *)(v6 + 64) <= 0x18uLL) {
    uint64_t v9 = 24;
  }
  else {
    uint64_t v9 = *(void *)(*(void *)(v3 - 8) + 64);
  }
  char v10 = 8 * v9;
  if (v9 > 3) {
    goto LABEL_5;
  }
  unsigned int v12 = ((1 << v10) + 1) >> v10;
  if (v12 > 0xFFFC)
  {
    unsigned int v11 = *(_DWORD *)&v8[v9];
  }
  else
  {
    if (v12 <= 0xFC)
    {
LABEL_5:
      unsigned int v11 = v8[v9];
      goto LABEL_10;
    }
    unsigned int v11 = *(unsigned __int16 *)&v8[v9];
  }
LABEL_10:
  unsigned int v13 = v11 - 3;
  if (v11 >= 3)
  {
    if (v9 <= 3) {
      uint64_t v14 = v9;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *v8;
        goto LABEL_19;
      case 2:
        int v15 = *(unsigned __int16 *)v8;
        goto LABEL_19;
      case 3:
        int v15 = *(unsigned __int16 *)v8 | (v8[2] << 16);
        goto LABEL_19;
      case 4:
        int v15 = *(_DWORD *)v8;
LABEL_19:
        int v16 = (v15 | (v13 << v10)) + 3;
        unsigned int v11 = v15 + 3;
        if (v9 < 4) {
          unsigned int v11 = v16;
        }
        break;
      default:
        break;
    }
  }
  if (v11 - 1 <= 1)
  {
    uint64_t v27 = *(void *)(v3 - 8);
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v8, v3);
    uint64_t v6 = v27;
  }
  uint64_t v17 = ~v7;
  if (v9 > 3)
  {
    uint64_t v18 = v9 + v7;
LABEL_25:
    uint64_t result = (unsigned __int8 *)((unint64_t)&v8[v18 + 1] & v17);
    unsigned int v20 = result[v9];
    goto LABEL_30;
  }
  unsigned int v21 = ((1 << v10) + 1) >> v10;
  if (v21 > 0xFFFC)
  {
    uint64_t result = (unsigned __int8 *)((unint64_t)&v8[v9 + 4 + v7] & v17);
    unsigned int v20 = *(_DWORD *)&result[v9];
  }
  else
  {
    uint64_t v18 = v9 + v7;
    if (v21 < 0xFD) {
      goto LABEL_25;
    }
    uint64_t result = (unsigned __int8 *)((unint64_t)&v8[v18 + 2] & v17);
    unsigned int v20 = *(unsigned __int16 *)&result[v9];
  }
LABEL_30:
  unsigned int v22 = v20 - 3;
  if (v20 >= 3)
  {
    if (v9 <= 3) {
      uint64_t v23 = v9;
    }
    else {
      uint64_t v23 = 4;
    }
    switch(v23)
    {
      case 1:
        int v24 = *result;
        goto LABEL_39;
      case 2:
        int v24 = *(unsigned __int16 *)result;
        goto LABEL_39;
      case 3:
        int v24 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_39;
      case 4:
        int v24 = *(_DWORD *)result;
LABEL_39:
        int v25 = (v24 | (v22 << v10)) + 3;
        unsigned int v20 = v24 + 3;
        if (v9 < 4) {
          unsigned int v20 = v25;
        }
        break;
      default:
        break;
    }
  }
  if (v20 - 1 <= 1)
  {
    unsigned int v26 = *(uint64_t (**)(void))(v6 + 8);
    return (unsigned __int8 *)v26();
  }
  return result;
}

__n128 initializeWithCopy for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v10 = *(void *)(v7 + 48) + v9;
  uint64_t v11 = v10 + a1;
  uint64_t v12 = v10 + a2;
  unsigned int v13 = (unsigned __int8 *)((v10 + a2) & ~v9);
  if (*(void *)(v8 + 64) <= 0x18uLL) {
    uint64_t v14 = 24;
  }
  else {
    uint64_t v14 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  char v15 = 8 * v14;
  if (v14 > 3) {
    goto LABEL_7;
  }
  unsigned int v16 = ((1 << v15) + 1) >> v15;
  if (v16 > 0xFFFC)
  {
    unsigned int v17 = *(_DWORD *)&v13[v14];
  }
  else
  {
    if (v16 <= 0xFC)
    {
LABEL_7:
      unsigned int v17 = v13[v14];
      goto LABEL_10;
    }
    unsigned int v17 = *(unsigned __int16 *)&v13[v14];
  }
LABEL_10:
  uint64_t v18 = (_OWORD *)(v11 & ~v9);
  unsigned int v19 = v17 - 3;
  if (v17 >= 3)
  {
    if (v14 <= 3) {
      uint64_t v20 = v14;
    }
    else {
      uint64_t v20 = 4;
    }
    switch(v20)
    {
      case 1:
        int v21 = *v13;
        goto LABEL_19;
      case 2:
        int v21 = *(unsigned __int16 *)v13;
        goto LABEL_19;
      case 3:
        int v21 = *(unsigned __int16 *)v13 | (v13[2] << 16);
        goto LABEL_19;
      case 4:
        int v21 = *(_DWORD *)v13;
LABEL_19:
        int v22 = (v21 | (v19 << v15)) + 3;
        unsigned int v17 = v21 + 3;
        if (v14 < 4) {
          unsigned int v17 = v22;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v23 = ~v9;
  switch(v17)
  {
    case 2u:
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 16))(v11 & ~v9, v13, v5);
      if (v14 <= 3)
      {
        unsigned int v25 = ((1 << v15) + 1) >> v15;
        if (v25 > 0xFFFC)
        {
          int v27 = 2;
          goto LABEL_51;
        }
        if (v25 > 0xFC)
        {
          LOWORD(v27) = 2;
          goto LABEL_54;
        }
      }
      char v26 = 2;
      goto LABEL_35;
    case 1u:
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 16))(v11 & ~v9, v13, v5);
      if (v14 > 3)
      {
LABEL_34:
        char v26 = 1;
LABEL_35:
        *((unsigned char *)v18 + v14) = v26;
        if (v14 > 3) {
          goto LABEL_46;
        }
        goto LABEL_43;
      }
      int v27 = 1;
      unsigned int v25 = ((1 << v15) + 1) >> v15;
      if (v25 <= 0xFFFC)
      {
        if (v25 <= 0xFC) {
          goto LABEL_34;
        }
LABEL_54:
        *(_WORD *)((char *)v18 + v14) = v27;
        goto LABEL_55;
      }
LABEL_51:
      *(_DWORD *)((char *)v18 + v14) = v27;
      goto LABEL_55;
    case 0u:
      long long v24 = *(_OWORD *)v13;
      *(void *)((v11 & ~v9) + 0x10) = *((void *)v13 + 2);
      *uint64_t v18 = v24;
      if (v14 > 3) {
        goto LABEL_25;
      }
      unsigned int v25 = ((1 << v15) + 1) >> v15;
      if (v25 > 0xFFFC)
      {
        *(_DWORD *)((char *)v18 + v14) = 0;
      }
      else
      {
        if (v25 <= 0xFC)
        {
LABEL_25:
          *((unsigned char *)v18 + v14) = 0;
          if (v14 > 3)
          {
LABEL_46:
            uint64_t v31 = 1;
            goto LABEL_57;
          }
          goto LABEL_43;
        }
        *(_WORD *)((char *)v18 + v14) = 0;
      }
LABEL_55:
      BOOL v32 = v25 > 0xFFFC;
      uint64_t v31 = 2;
      if (v32) {
        uint64_t v31 = 4;
      }
      goto LABEL_57;
  }
  if (v14 > 3) {
    goto LABEL_41;
  }
  unsigned int v28 = ((1 << v15) + 1) >> v15;
  uint64_t v29 = 2;
  if (v28 > 0xFFFC) {
    uint64_t v29 = 4;
  }
  if (v28 <= 0xFC) {
LABEL_41:
  }
    uint64_t v29 = 1;
  memcpy((void *)(v11 & ~v9), v13, v29 + v14);
  if (v14 > 3) {
    goto LABEL_46;
  }
LABEL_43:
  unsigned int v30 = ((1 << v15) + 1) >> v15;
  uint64_t v31 = 2;
  if (v30 > 0xFFFC) {
    uint64_t v31 = 4;
  }
  if (v30 <= 0xFC) {
    goto LABEL_46;
  }
LABEL_57:
  uint64_t v33 = v31 + v14;
  uint64_t v34 = (v11 | v9) + v33;
  char v35 = (void *)(((v12 | v9) + v33) & v23);
  if (v14 > 3)
  {
LABEL_60:
    unsigned int v37 = *((unsigned __int8 *)v35 + v14);
    goto LABEL_63;
  }
  unsigned int v36 = ((1 << v15) + 1) >> v15;
  if (v36 > 0xFFFC)
  {
    unsigned int v37 = *(_DWORD *)((char *)v35 + v14);
  }
  else
  {
    if (v36 <= 0xFC) {
      goto LABEL_60;
    }
    unsigned int v37 = *(unsigned __int16 *)((char *)v35 + v14);
  }
LABEL_63:
  uint64_t v38 = (void *)(v34 & v23);
  unsigned int v39 = v37 - 3;
  if (v37 >= 3)
  {
    if (v14 <= 3) {
      uint64_t v40 = v14;
    }
    else {
      uint64_t v40 = 4;
    }
    switch(v40)
    {
      case 1:
        int v41 = *(unsigned __int8 *)v35;
        goto LABEL_72;
      case 2:
        int v41 = *(unsigned __int16 *)v35;
        goto LABEL_72;
      case 3:
        int v41 = *(unsigned __int16 *)v35 | (*((unsigned __int8 *)v35 + 2) << 16);
        goto LABEL_72;
      case 4:
        int v41 = *(_DWORD *)v35;
LABEL_72:
        int v42 = (v41 | (v39 << v15)) + 3;
        unsigned int v37 = v41 + 3;
        if (v14 < 4) {
          unsigned int v37 = v42;
        }
        break;
      default:
        break;
    }
  }
  if (v37 == 2)
  {
    (*(void (**)(void *))(v8 + 16))(v38);
    if (v14 <= 3)
    {
      unsigned int v44 = ((1 << v15) + 1) >> v15;
      if (v44 > 0xFFFC)
      {
        int v45 = 2;
        goto LABEL_103;
      }
      if (v44 > 0xFC)
      {
        LOWORD(v45) = 2;
        goto LABEL_106;
      }
    }
    *((unsigned char *)v38 + v14) = 2;
    goto LABEL_93;
  }
  if (v37 == 1)
  {
    (*(void (**)(void *))(v8 + 16))(v38);
    if (v14 > 3)
    {
LABEL_86:
      *((unsigned char *)v38 + v14) = 1;
      goto LABEL_93;
    }
    int v45 = 1;
    unsigned int v44 = ((1 << v15) + 1) >> v15;
    if (v44 <= 0xFFFC)
    {
      if (v44 <= 0xFC) {
        goto LABEL_86;
      }
LABEL_106:
      *(_WORD *)((char *)v38 + v14) = v45;
LABEL_107:
      unsigned int v48 = v44 + 3;
      BOOL v32 = v44 > 0xFFFC;
      uint64_t v50 = 2;
      if (v32) {
        uint64_t v50 = 4;
      }
      goto LABEL_109;
    }
LABEL_103:
    *(_DWORD *)((char *)v38 + v14) = v45;
    goto LABEL_107;
  }
  if (v37)
  {
    if (v14 > 3) {
      goto LABEL_91;
    }
    unsigned int v46 = ((1 << v15) + 1) >> v15;
    uint64_t v47 = 2;
    if (v46 > 0xFFFC) {
      uint64_t v47 = 4;
    }
    if (v46 <= 0xFC) {
LABEL_91:
    }
      uint64_t v47 = 1;
    memcpy(v38, v35, v47 + v14);
    goto LABEL_93;
  }
  long long v43 = *(_OWORD *)v35;
  v38[2] = v35[2];
  *(_OWORD *)uint64_t v38 = v43;
  if (v14 > 3) {
    goto LABEL_78;
  }
  unsigned int v44 = ((1 << v15) + 1) >> v15;
  if (v44 > 0xFFFC)
  {
    *(_DWORD *)((char *)v38 + v14) = 0;
    goto LABEL_107;
  }
  if (v44 > 0xFC)
  {
    *(_WORD *)((char *)v38 + v14) = 0;
    goto LABEL_107;
  }
LABEL_78:
  *((unsigned char *)v38 + v14) = 0;
LABEL_93:
  if (v14 > 3)
  {
    unsigned int v48 = 4;
LABEL_98:
    uint64_t v50 = 1;
    goto LABEL_109;
  }
  unsigned int v49 = ((1 << v15) + 1) >> v15;
  unsigned int v48 = v49 + 3;
  uint64_t v50 = 2;
  if (v49 > 0xFFFC) {
    uint64_t v50 = 4;
  }
  if (v49 <= 0xFC) {
    goto LABEL_98;
  }
LABEL_109:
  uint64_t v51 = (v14 + v9 + v50) & v23;
  uint64_t v52 = 4;
  if (v48 < 0x10000) {
    uint64_t v52 = 2;
  }
  if (v48 < 0x100) {
    uint64_t v53 = 1;
  }
  else {
    uint64_t v53 = v52;
  }
  uint64_t v54 = v53 + v14 + v51;
  uint64_t v55 = (char *)v18 + v54;
  uint64_t v56 = &v13[v54];
  unint64_t v57 = (unint64_t)(v55 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v58 = (unint64_t)(v56 + 7) & 0xFFFFFFFFFFFFFFF8;
  __n128 result = *(__n128 *)v58;
  long long v60 = *(_OWORD *)(v58 + 16);
  *(unsigned char *)(v57 + 32) = *(unsigned char *)(v58 + 32);
  *(__n128 *)unint64_t v57 = result;
  *(_OWORD *)(v57 + 16) = v60;
  *(void *)((unint64_t)(v55 + 47) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)(v56 + 47) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

double assignWithCopy for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v10 = *(void *)(v7 + 40) + v9;
  uint64_t v11 = v10 + a1;
  uint64_t v12 = ~v9;
  unsigned int v13 = (void *)((v10 + a1) & ~v9);
  uint64_t v14 = v10 + a2;
  char v15 = (void *)((v10 + a2) & ~v9);
  if (*(void *)(v8 + 64) <= 0x18uLL) {
    uint64_t v16 = 24;
  }
  else {
    uint64_t v16 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  if (v13 == v15)
  {
LABEL_58:
    if (v16 <= 3) {
      goto LABEL_75;
    }
    goto LABEL_59;
  }
  char v17 = 8 * v16;
  if (v16 > 3) {
    goto LABEL_8;
  }
  unsigned int v18 = ((1 << v17) + 1) >> v17;
  if (v18 > 0xFFFC)
  {
    unsigned int v19 = *(_DWORD *)((char *)v13 + v16);
    unsigned int v20 = v19 - 3;
    if (v19 < 3) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (v18 <= 0xFC)
  {
LABEL_8:
    unsigned int v19 = *((unsigned __int8 *)v13 + v16);
    unsigned int v20 = v19 - 3;
    if (v19 < 3) {
      goto LABEL_23;
    }
LABEL_13:
    if (v16 <= 3) {
      uint64_t v21 = v16;
    }
    else {
      uint64_t v21 = 4;
    }
    switch(v21)
    {
      case 1:
        int v22 = *(unsigned __int8 *)v13;
        goto LABEL_21;
      case 2:
        int v22 = *(unsigned __int16 *)v13;
        goto LABEL_21;
      case 3:
        int v22 = *(unsigned __int16 *)v13 | (*((unsigned __int8 *)v13 + 2) << 16);
        goto LABEL_21;
      case 4:
        int v22 = *(_DWORD *)v13;
LABEL_21:
        int v23 = (v22 | (v20 << v17)) + 3;
        unsigned int v19 = v22 + 3;
        if (v16 < 4) {
          unsigned int v19 = v23;
        }
        break;
      default:
        goto LABEL_23;
    }
    goto LABEL_23;
  }
  unsigned int v19 = *(unsigned __int16 *)((char *)v13 + v16);
  unsigned int v20 = v19 - 3;
  if (v19 >= 3) {
    goto LABEL_13;
  }
LABEL_23:
  if (v19 - 1 <= 1) {
    (*(void (**)(void *, uint64_t))(v8 + 8))(v13, v5);
  }
  if (v16 > 3) {
    goto LABEL_28;
  }
  unsigned int v24 = ((1 << v17) + 1) >> v17;
  if (v24 > 0xFFFC)
  {
    unsigned int v25 = *(_DWORD *)((char *)v15 + v16);
    unsigned int v26 = v25 - 3;
    if (v25 < 3) {
      goto LABEL_43;
    }
    goto LABEL_33;
  }
  if (v24 > 0xFC)
  {
    unsigned int v25 = *(unsigned __int16 *)((char *)v15 + v16);
    unsigned int v26 = v25 - 3;
    if (v25 < 3) {
      goto LABEL_43;
    }
  }
  else
  {
LABEL_28:
    unsigned int v25 = *((unsigned __int8 *)v15 + v16);
    unsigned int v26 = v25 - 3;
    if (v25 < 3) {
      goto LABEL_43;
    }
  }
LABEL_33:
  if (v16 <= 3) {
    uint64_t v27 = v16;
  }
  else {
    uint64_t v27 = 4;
  }
  switch(v27)
  {
    case 1:
      int v28 = *(unsigned __int8 *)v15;
      goto LABEL_41;
    case 2:
      int v28 = *(unsigned __int16 *)v15;
      goto LABEL_41;
    case 3:
      int v28 = *(unsigned __int16 *)v15 | (*((unsigned __int8 *)v15 + 2) << 16);
      goto LABEL_41;
    case 4:
      int v28 = *(_DWORD *)v15;
LABEL_41:
      int v29 = (v28 | (v26 << v17)) + 3;
      unsigned int v25 = v28 + 3;
      if (v16 < 4) {
        unsigned int v25 = v29;
      }
      break;
    default:
      break;
  }
LABEL_43:
  if (v25 == 2)
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v13, v15, v5);
    if (v16 <= 3)
    {
      unsigned int v31 = ((1 << v17) + 1) >> v17;
      if (v31 > 0xFFFC)
      {
        int v32 = 2;
        goto LABEL_71;
      }
      if (v31 > 0xFC)
      {
        LOWORD(v32) = 2;
        goto LABEL_74;
      }
    }
    *((unsigned char *)v13 + v16) = 2;
    if (v16 <= 3) {
      goto LABEL_75;
    }
    goto LABEL_59;
  }
  if (v25 == 1)
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v13, v15, v5);
    if (v16 > 3)
    {
LABEL_57:
      *((unsigned char *)v13 + v16) = 1;
      goto LABEL_58;
    }
    int v32 = 1;
    unsigned int v33 = ((1 << v17) + 1) >> v17;
    if (v33 <= 0xFFFC)
    {
      if (v33 <= 0xFC) {
        goto LABEL_57;
      }
LABEL_74:
      *(_WORD *)((char *)v13 + v16) = v32;
      goto LABEL_75;
    }
LABEL_71:
    *(_DWORD *)((char *)v13 + v16) = v32;
    goto LABEL_75;
  }
  if (v25)
  {
    if (v16 > 3) {
      goto LABEL_64;
    }
    unsigned int v35 = ((1 << v17) + 1) >> v17;
    uint64_t v36 = 2;
    if (v35 > 0xFFFC) {
      uint64_t v36 = 4;
    }
    if (v35 <= 0xFC) {
LABEL_64:
    }
      uint64_t v36 = 1;
    memcpy(v13, v15, v36 + v16);
    if (v16 <= 3) {
      goto LABEL_75;
    }
  }
  else
  {
    long long v30 = *(_OWORD *)v15;
    v13[2] = v15[2];
    *(_OWORD *)unsigned int v13 = v30;
    if (v16 <= 3)
    {
      unsigned int v37 = ((1 << v17) + 1) >> v17;
      if (v37 > 0xFFFC)
      {
        *(_DWORD *)((char *)v13 + v16) = 0;
        goto LABEL_75;
      }
      if (v37 > 0xFC)
      {
        *(_WORD *)((char *)v13 + v16) = 0;
        goto LABEL_75;
      }
    }
    *((unsigned char *)v13 + v16) = 0;
    if (v16 <= 3)
    {
LABEL_75:
      int v34 = 0;
      unsigned int v38 = ((1 << (8 * v16)) + 1) >> (8 * v16);
      uint64_t v39 = 2;
      if (v38 > 0xFFFC) {
        uint64_t v39 = 4;
      }
      if (v38 > 0xFC) {
        goto LABEL_79;
      }
      goto LABEL_78;
    }
  }
LABEL_59:
  int v34 = 1;
LABEL_78:
  uint64_t v39 = 1;
LABEL_79:
  uint64_t v40 = v39 + v16;
  int v41 = (void *)(((v11 | v9) + v40) & v12);
  int v42 = (void *)(((v14 | v9) + v40) & v12);
  char v43 = 8 * v16;
  if (v41 == v42) {
    goto LABEL_133;
  }
  if (v34) {
    goto LABEL_83;
  }
  unsigned int v44 = ((1 << v43) + 1) >> v43;
  if (v44 > 0xFFFC)
  {
    unsigned int v45 = *(_DWORD *)((char *)v41 + v16);
    unsigned int v46 = v45 - 3;
    if (v45 < 3) {
      goto LABEL_98;
    }
    goto LABEL_88;
  }
  if (v44 <= 0xFC)
  {
LABEL_83:
    unsigned int v45 = *((unsigned __int8 *)v41 + v16);
    unsigned int v46 = v45 - 3;
    if (v45 < 3) {
      goto LABEL_98;
    }
LABEL_88:
    if (v34) {
      uint64_t v47 = 4;
    }
    else {
      uint64_t v47 = v16;
    }
    switch(v47)
    {
      case 1:
        int v48 = *(unsigned __int8 *)v41;
        goto LABEL_96;
      case 2:
        int v48 = *(unsigned __int16 *)v41;
        goto LABEL_96;
      case 3:
        int v48 = *(unsigned __int16 *)v41 | (*((unsigned __int8 *)v41 + 2) << 16);
        goto LABEL_96;
      case 4:
        int v48 = *(_DWORD *)v41;
LABEL_96:
        int v49 = (v48 | (v46 << v43)) + 3;
        unsigned int v45 = v48 + 3;
        if (!v34) {
          unsigned int v45 = v49;
        }
        break;
      default:
        goto LABEL_98;
    }
    goto LABEL_98;
  }
  unsigned int v45 = *(unsigned __int16 *)((char *)v41 + v16);
  unsigned int v46 = v45 - 3;
  if (v45 >= 3) {
    goto LABEL_88;
  }
LABEL_98:
  if (v45 - 1 <= 1) {
    (*(void (**)(void *, uint64_t))(v8 + 8))(v41, v5);
  }
  if (v34) {
    goto LABEL_103;
  }
  unsigned int v50 = ((1 << v43) + 1) >> v43;
  if (v50 > 0xFFFC)
  {
    unsigned int v51 = *(_DWORD *)((char *)v42 + v16);
    unsigned int v52 = v51 - 3;
    if (v51 < 3) {
      goto LABEL_118;
    }
    goto LABEL_108;
  }
  if (v50 <= 0xFC)
  {
LABEL_103:
    unsigned int v51 = *((unsigned __int8 *)v42 + v16);
    unsigned int v52 = v51 - 3;
    if (v51 < 3) {
      goto LABEL_118;
    }
  }
  else
  {
    unsigned int v51 = *(unsigned __int16 *)((char *)v42 + v16);
    unsigned int v52 = v51 - 3;
    if (v51 < 3) {
      goto LABEL_118;
    }
  }
LABEL_108:
  if (v34) {
    uint64_t v53 = 4;
  }
  else {
    uint64_t v53 = v16;
  }
  switch(v53)
  {
    case 1:
      int v54 = *(unsigned __int8 *)v42;
      goto LABEL_116;
    case 2:
      int v54 = *(unsigned __int16 *)v42;
      goto LABEL_116;
    case 3:
      int v54 = *(unsigned __int16 *)v42 | (*((unsigned __int8 *)v42 + 2) << 16);
      goto LABEL_116;
    case 4:
      int v54 = *(_DWORD *)v42;
LABEL_116:
      int v55 = (v54 | (v52 << v43)) + 3;
      unsigned int v51 = v54 + 3;
      if (!v34) {
        unsigned int v51 = v55;
      }
      break;
    default:
      break;
  }
LABEL_118:
  if (v51 == 2)
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v41, v42, v5);
    if ((v34 & 1) == 0)
    {
      unsigned int v57 = ((1 << v43) + 1) >> v43;
      if (v57 > 0xFFFC)
      {
        int v58 = 2;
        goto LABEL_150;
      }
      if (v57 > 0xFC)
      {
        LOWORD(v58) = 2;
        goto LABEL_153;
      }
    }
    *((unsigned char *)v41 + v16) = 2;
    if (v34) {
      goto LABEL_134;
    }
LABEL_141:
    unsigned int v62 = ((1 << v43) + 1) >> v43;
    unsigned int v59 = v62 + 3;
    uint64_t v63 = 2;
    if (v62 > 0xFFFC) {
      uint64_t v63 = 4;
    }
    if (v62 > 0xFC)
    {
      uint64_t v64 = ~v9;
      goto LABEL_156;
    }
    goto LABEL_145;
  }
  if (v51 == 1)
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 16))(v41, v42, v5);
    if (v34)
    {
LABEL_132:
      *((unsigned char *)v41 + v16) = 1;
LABEL_133:
      if ((v34 & 1) == 0) {
        goto LABEL_141;
      }
      goto LABEL_134;
    }
    int v58 = 1;
    unsigned int v57 = ((1 << v43) + 1) >> v43;
    if (v57 <= 0xFFFC)
    {
      if (v57 <= 0xFC) {
        goto LABEL_132;
      }
LABEL_153:
      *(_WORD *)((char *)v41 + v16) = v58;
      goto LABEL_154;
    }
LABEL_150:
    *(_DWORD *)((char *)v41 + v16) = v58;
    goto LABEL_154;
  }
  if (v51)
  {
    if (v34) {
      goto LABEL_139;
    }
    unsigned int v60 = ((1 << v43) + 1) >> v43;
    uint64_t v61 = 2;
    if (v60 > 0xFFFC) {
      uint64_t v61 = 4;
    }
    if (v60 <= 0xFC) {
LABEL_139:
    }
      uint64_t v61 = 1;
    memcpy(v41, v42, v61 + v16);
    if (v34) {
      goto LABEL_134;
    }
    goto LABEL_141;
  }
  long long v56 = *(_OWORD *)v42;
  v41[2] = v42[2];
  *(_OWORD *)int v41 = v56;
  if (v34) {
    goto LABEL_122;
  }
  unsigned int v57 = ((1 << v43) + 1) >> v43;
  if (v57 > 0xFFFC)
  {
    *(_DWORD *)((char *)v41 + v16) = 0;
  }
  else
  {
    if (v57 <= 0xFC)
    {
LABEL_122:
      *((unsigned char *)v41 + v16) = 0;
      if ((v34 & 1) == 0) {
        goto LABEL_141;
      }
LABEL_134:
      unsigned int v59 = 4;
LABEL_145:
      uint64_t v64 = ~v9;
      uint64_t v63 = 1;
      goto LABEL_156;
    }
    *(_WORD *)((char *)v41 + v16) = 0;
  }
LABEL_154:
  uint64_t v64 = ~v9;
  unsigned int v59 = v57 + 3;
  BOOL v65 = v57 > 0xFFFC;
  uint64_t v63 = 2;
  if (v65) {
    uint64_t v63 = 4;
  }
LABEL_156:
  uint64_t v66 = (v16 + v9 + v63) & v64;
  uint64_t v67 = 4;
  if (v59 < 0x10000) {
    uint64_t v67 = 2;
  }
  if (v59 < 0x100) {
    uint64_t v68 = 1;
  }
  else {
    uint64_t v68 = v67;
  }
  uint64_t v69 = v68 + v16 + v66;
  uint64_t v70 = (char *)v13 + v69;
  uint64_t v71 = (char *)v15 + v69;
  unint64_t v72 = (unint64_t)(v70 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v73 = (unint64_t)(v71 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v74 = *(_OWORD *)v73;
  long long v75 = *(_OWORD *)(v73 + 16);
  *(unsigned char *)(v72 + 32) = *(unsigned char *)(v73 + 32);
  *(_OWORD *)unint64_t v72 = v74;
  *(_OWORD *)(v72 + 16) = v75;
  uint64_t v76 = (double *)((unint64_t)(v71 + 47) & 0xFFFFFFFFFFFFFFF8);
  double result = *v76;
  *(double *)((unint64_t)(v70 + 47) & 0xFFFFFFFFFFFFFFF8) = *v76;
  return result;
}

__n128 initializeWithTake for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v10 = *(void *)(v7 + 32) + v9;
  uint64_t v11 = v10 + a1;
  uint64_t v12 = v10 + a2;
  unsigned int v13 = (unsigned __int8 *)((v10 + a2) & ~v9);
  if (*(void *)(v8 + 64) <= 0x18uLL) {
    uint64_t v14 = 24;
  }
  else {
    uint64_t v14 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  char v15 = 8 * v14;
  if (v14 > 3) {
    goto LABEL_7;
  }
  unsigned int v16 = ((1 << v15) + 1) >> v15;
  if (v16 > 0xFFFC)
  {
    unsigned int v17 = *(_DWORD *)&v13[v14];
  }
  else
  {
    if (v16 <= 0xFC)
    {
LABEL_7:
      unsigned int v17 = v13[v14];
      goto LABEL_10;
    }
    unsigned int v17 = *(unsigned __int16 *)&v13[v14];
  }
LABEL_10:
  unsigned int v18 = (_OWORD *)(v11 & ~v9);
  unsigned int v19 = v17 - 3;
  if (v17 >= 3)
  {
    if (v14 <= 3) {
      uint64_t v20 = v14;
    }
    else {
      uint64_t v20 = 4;
    }
    switch(v20)
    {
      case 1:
        int v21 = *v13;
        goto LABEL_19;
      case 2:
        int v21 = *(unsigned __int16 *)v13;
        goto LABEL_19;
      case 3:
        int v21 = *(unsigned __int16 *)v13 | (v13[2] << 16);
        goto LABEL_19;
      case 4:
        int v21 = *(_DWORD *)v13;
LABEL_19:
        int v22 = (v21 | (v19 << v15)) + 3;
        unsigned int v17 = v21 + 3;
        if (v14 < 4) {
          unsigned int v17 = v22;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v23 = ~v9;
  switch(v17)
  {
    case 2u:
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 32))(v11 & ~v9, v13, v5);
      if (v14 <= 3)
      {
        unsigned int v25 = ((1 << v15) + 1) >> v15;
        if (v25 > 0xFFFC)
        {
          int v27 = 2;
          goto LABEL_51;
        }
        if (v25 > 0xFC)
        {
          LOWORD(v27) = 2;
          goto LABEL_54;
        }
      }
      char v26 = 2;
      goto LABEL_35;
    case 1u:
      (*(void (**)(uint64_t, unsigned __int8 *, uint64_t))(v8 + 32))(v11 & ~v9, v13, v5);
      if (v14 > 3)
      {
LABEL_34:
        char v26 = 1;
LABEL_35:
        *((unsigned char *)v18 + v14) = v26;
        if (v14 > 3) {
          goto LABEL_46;
        }
        goto LABEL_43;
      }
      int v27 = 1;
      unsigned int v25 = ((1 << v15) + 1) >> v15;
      if (v25 <= 0xFFFC)
      {
        if (v25 <= 0xFC) {
          goto LABEL_34;
        }
LABEL_54:
        *(_WORD *)((char *)v18 + v14) = v27;
        goto LABEL_55;
      }
LABEL_51:
      *(_DWORD *)((char *)v18 + v14) = v27;
      goto LABEL_55;
    case 0u:
      long long v24 = *(_OWORD *)v13;
      *(void *)((v11 & ~v9) + 0x10) = *((void *)v13 + 2);
      *unsigned int v18 = v24;
      if (v14 > 3) {
        goto LABEL_25;
      }
      unsigned int v25 = ((1 << v15) + 1) >> v15;
      if (v25 > 0xFFFC)
      {
        *(_DWORD *)((char *)v18 + v14) = 0;
      }
      else
      {
        if (v25 <= 0xFC)
        {
LABEL_25:
          *((unsigned char *)v18 + v14) = 0;
          if (v14 > 3)
          {
LABEL_46:
            uint64_t v31 = 1;
            goto LABEL_57;
          }
          goto LABEL_43;
        }
        *(_WORD *)((char *)v18 + v14) = 0;
      }
LABEL_55:
      BOOL v32 = v25 > 0xFFFC;
      uint64_t v31 = 2;
      if (v32) {
        uint64_t v31 = 4;
      }
      goto LABEL_57;
  }
  if (v14 > 3) {
    goto LABEL_41;
  }
  unsigned int v28 = ((1 << v15) + 1) >> v15;
  uint64_t v29 = 2;
  if (v28 > 0xFFFC) {
    uint64_t v29 = 4;
  }
  if (v28 <= 0xFC) {
LABEL_41:
  }
    uint64_t v29 = 1;
  memcpy((void *)(v11 & ~v9), v13, v29 + v14);
  if (v14 > 3) {
    goto LABEL_46;
  }
LABEL_43:
  unsigned int v30 = ((1 << v15) + 1) >> v15;
  uint64_t v31 = 2;
  if (v30 > 0xFFFC) {
    uint64_t v31 = 4;
  }
  if (v30 <= 0xFC) {
    goto LABEL_46;
  }
LABEL_57:
  uint64_t v33 = v31 + v14;
  uint64_t v34 = (v11 | v9) + v33;
  unsigned int v35 = (void *)(((v12 | v9) + v33) & v23);
  if (v14 > 3)
  {
LABEL_60:
    unsigned int v37 = *((unsigned __int8 *)v35 + v14);
    goto LABEL_63;
  }
  unsigned int v36 = ((1 << v15) + 1) >> v15;
  if (v36 > 0xFFFC)
  {
    unsigned int v37 = *(_DWORD *)((char *)v35 + v14);
  }
  else
  {
    if (v36 <= 0xFC) {
      goto LABEL_60;
    }
    unsigned int v37 = *(unsigned __int16 *)((char *)v35 + v14);
  }
LABEL_63:
  unsigned int v38 = (void *)(v34 & v23);
  unsigned int v39 = v37 - 3;
  if (v37 >= 3)
  {
    if (v14 <= 3) {
      uint64_t v40 = v14;
    }
    else {
      uint64_t v40 = 4;
    }
    switch(v40)
    {
      case 1:
        int v41 = *(unsigned __int8 *)v35;
        goto LABEL_72;
      case 2:
        int v41 = *(unsigned __int16 *)v35;
        goto LABEL_72;
      case 3:
        int v41 = *(unsigned __int16 *)v35 | (*((unsigned __int8 *)v35 + 2) << 16);
        goto LABEL_72;
      case 4:
        int v41 = *(_DWORD *)v35;
LABEL_72:
        int v42 = (v41 | (v39 << v15)) + 3;
        unsigned int v37 = v41 + 3;
        if (v14 < 4) {
          unsigned int v37 = v42;
        }
        break;
      default:
        break;
    }
  }
  if (v37 == 2)
  {
    (*(void (**)(void *))(v8 + 32))(v38);
    if (v14 <= 3)
    {
      unsigned int v44 = ((1 << v15) + 1) >> v15;
      if (v44 > 0xFFFC)
      {
        int v45 = 2;
        goto LABEL_103;
      }
      if (v44 > 0xFC)
      {
        LOWORD(v45) = 2;
        goto LABEL_106;
      }
    }
    *((unsigned char *)v38 + v14) = 2;
    goto LABEL_93;
  }
  if (v37 == 1)
  {
    (*(void (**)(void *))(v8 + 32))(v38);
    if (v14 > 3)
    {
LABEL_86:
      *((unsigned char *)v38 + v14) = 1;
      goto LABEL_93;
    }
    int v45 = 1;
    unsigned int v44 = ((1 << v15) + 1) >> v15;
    if (v44 <= 0xFFFC)
    {
      if (v44 <= 0xFC) {
        goto LABEL_86;
      }
LABEL_106:
      *(_WORD *)((char *)v38 + v14) = v45;
LABEL_107:
      unsigned int v48 = v44 + 3;
      BOOL v32 = v44 > 0xFFFC;
      uint64_t v50 = 2;
      if (v32) {
        uint64_t v50 = 4;
      }
      goto LABEL_109;
    }
LABEL_103:
    *(_DWORD *)((char *)v38 + v14) = v45;
    goto LABEL_107;
  }
  if (v37)
  {
    if (v14 > 3) {
      goto LABEL_91;
    }
    unsigned int v46 = ((1 << v15) + 1) >> v15;
    uint64_t v47 = 2;
    if (v46 > 0xFFFC) {
      uint64_t v47 = 4;
    }
    if (v46 <= 0xFC) {
LABEL_91:
    }
      uint64_t v47 = 1;
    memcpy(v38, v35, v47 + v14);
    goto LABEL_93;
  }
  long long v43 = *(_OWORD *)v35;
  v38[2] = v35[2];
  *(_OWORD *)unsigned int v38 = v43;
  if (v14 > 3) {
    goto LABEL_78;
  }
  unsigned int v44 = ((1 << v15) + 1) >> v15;
  if (v44 > 0xFFFC)
  {
    *(_DWORD *)((char *)v38 + v14) = 0;
    goto LABEL_107;
  }
  if (v44 > 0xFC)
  {
    *(_WORD *)((char *)v38 + v14) = 0;
    goto LABEL_107;
  }
LABEL_78:
  *((unsigned char *)v38 + v14) = 0;
LABEL_93:
  if (v14 > 3)
  {
    unsigned int v48 = 4;
LABEL_98:
    uint64_t v50 = 1;
    goto LABEL_109;
  }
  unsigned int v49 = ((1 << v15) + 1) >> v15;
  unsigned int v48 = v49 + 3;
  uint64_t v50 = 2;
  if (v49 > 0xFFFC) {
    uint64_t v50 = 4;
  }
  if (v49 <= 0xFC) {
    goto LABEL_98;
  }
LABEL_109:
  uint64_t v51 = (v14 + v9 + v50) & v23;
  uint64_t v52 = 4;
  if (v48 < 0x10000) {
    uint64_t v52 = 2;
  }
  if (v48 < 0x100) {
    uint64_t v53 = 1;
  }
  else {
    uint64_t v53 = v52;
  }
  uint64_t v54 = v53 + v14 + v51;
  int v55 = (char *)v18 + v54;
  long long v56 = &v13[v54];
  unint64_t v57 = (unint64_t)(v55 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v58 = (unint64_t)(v56 + 7) & 0xFFFFFFFFFFFFFFF8;
  __n128 result = *(__n128 *)v58;
  long long v60 = *(_OWORD *)(v58 + 16);
  *(unsigned char *)(v57 + 32) = *(unsigned char *)(v58 + 32);
  *(__n128 *)unint64_t v57 = result;
  *(_OWORD *)(v57 + 16) = v60;
  *(void *)((unint64_t)(v55 + 47) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)(v56 + 47) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

double assignWithTake for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80) & 0xF8 | 7;
  uint64_t v10 = *(void *)(v7 + 24) + v9;
  uint64_t v11 = v10 + a1;
  uint64_t v12 = ~v9;
  unsigned int v13 = (void *)((v10 + a1) & ~v9);
  uint64_t v14 = v10 + a2;
  char v15 = (void *)((v10 + a2) & ~v9);
  if (*(void *)(v8 + 64) <= 0x18uLL) {
    uint64_t v16 = 24;
  }
  else {
    uint64_t v16 = *(void *)(*(void *)(v5 - 8) + 64);
  }
  if (v13 == v15)
  {
LABEL_58:
    if (v16 <= 3) {
      goto LABEL_75;
    }
    goto LABEL_59;
  }
  char v17 = 8 * v16;
  if (v16 > 3) {
    goto LABEL_8;
  }
  unsigned int v18 = ((1 << v17) + 1) >> v17;
  if (v18 > 0xFFFC)
  {
    unsigned int v19 = *(_DWORD *)((char *)v13 + v16);
    unsigned int v20 = v19 - 3;
    if (v19 < 3) {
      goto LABEL_23;
    }
    goto LABEL_13;
  }
  if (v18 <= 0xFC)
  {
LABEL_8:
    unsigned int v19 = *((unsigned __int8 *)v13 + v16);
    unsigned int v20 = v19 - 3;
    if (v19 < 3) {
      goto LABEL_23;
    }
LABEL_13:
    if (v16 <= 3) {
      uint64_t v21 = v16;
    }
    else {
      uint64_t v21 = 4;
    }
    switch(v21)
    {
      case 1:
        int v22 = *(unsigned __int8 *)v13;
        goto LABEL_21;
      case 2:
        int v22 = *(unsigned __int16 *)v13;
        goto LABEL_21;
      case 3:
        int v22 = *(unsigned __int16 *)v13 | (*((unsigned __int8 *)v13 + 2) << 16);
        goto LABEL_21;
      case 4:
        int v22 = *(_DWORD *)v13;
LABEL_21:
        int v23 = (v22 | (v20 << v17)) + 3;
        unsigned int v19 = v22 + 3;
        if (v16 < 4) {
          unsigned int v19 = v23;
        }
        break;
      default:
        goto LABEL_23;
    }
    goto LABEL_23;
  }
  unsigned int v19 = *(unsigned __int16 *)((char *)v13 + v16);
  unsigned int v20 = v19 - 3;
  if (v19 >= 3) {
    goto LABEL_13;
  }
LABEL_23:
  if (v19 - 1 <= 1) {
    (*(void (**)(void *, uint64_t))(v8 + 8))(v13, v5);
  }
  if (v16 > 3) {
    goto LABEL_28;
  }
  unsigned int v24 = ((1 << v17) + 1) >> v17;
  if (v24 > 0xFFFC)
  {
    unsigned int v25 = *(_DWORD *)((char *)v15 + v16);
    unsigned int v26 = v25 - 3;
    if (v25 < 3) {
      goto LABEL_43;
    }
    goto LABEL_33;
  }
  if (v24 > 0xFC)
  {
    unsigned int v25 = *(unsigned __int16 *)((char *)v15 + v16);
    unsigned int v26 = v25 - 3;
    if (v25 < 3) {
      goto LABEL_43;
    }
  }
  else
  {
LABEL_28:
    unsigned int v25 = *((unsigned __int8 *)v15 + v16);
    unsigned int v26 = v25 - 3;
    if (v25 < 3) {
      goto LABEL_43;
    }
  }
LABEL_33:
  if (v16 <= 3) {
    uint64_t v27 = v16;
  }
  else {
    uint64_t v27 = 4;
  }
  switch(v27)
  {
    case 1:
      int v28 = *(unsigned __int8 *)v15;
      goto LABEL_41;
    case 2:
      int v28 = *(unsigned __int16 *)v15;
      goto LABEL_41;
    case 3:
      int v28 = *(unsigned __int16 *)v15 | (*((unsigned __int8 *)v15 + 2) << 16);
      goto LABEL_41;
    case 4:
      int v28 = *(_DWORD *)v15;
LABEL_41:
      int v29 = (v28 | (v26 << v17)) + 3;
      unsigned int v25 = v28 + 3;
      if (v16 < 4) {
        unsigned int v25 = v29;
      }
      break;
    default:
      break;
  }
LABEL_43:
  if (v25 == 2)
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v13, v15, v5);
    if (v16 <= 3)
    {
      unsigned int v31 = ((1 << v17) + 1) >> v17;
      if (v31 > 0xFFFC)
      {
        int v32 = 2;
        goto LABEL_71;
      }
      if (v31 > 0xFC)
      {
        LOWORD(v32) = 2;
        goto LABEL_74;
      }
    }
    *((unsigned char *)v13 + v16) = 2;
    if (v16 <= 3) {
      goto LABEL_75;
    }
    goto LABEL_59;
  }
  if (v25 == 1)
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v13, v15, v5);
    if (v16 > 3)
    {
LABEL_57:
      *((unsigned char *)v13 + v16) = 1;
      goto LABEL_58;
    }
    int v32 = 1;
    unsigned int v33 = ((1 << v17) + 1) >> v17;
    if (v33 <= 0xFFFC)
    {
      if (v33 <= 0xFC) {
        goto LABEL_57;
      }
LABEL_74:
      *(_WORD *)((char *)v13 + v16) = v32;
      goto LABEL_75;
    }
LABEL_71:
    *(_DWORD *)((char *)v13 + v16) = v32;
    goto LABEL_75;
  }
  if (v25)
  {
    if (v16 > 3) {
      goto LABEL_64;
    }
    unsigned int v35 = ((1 << v17) + 1) >> v17;
    uint64_t v36 = 2;
    if (v35 > 0xFFFC) {
      uint64_t v36 = 4;
    }
    if (v35 <= 0xFC) {
LABEL_64:
    }
      uint64_t v36 = 1;
    memcpy(v13, v15, v36 + v16);
    if (v16 <= 3) {
      goto LABEL_75;
    }
  }
  else
  {
    long long v30 = *(_OWORD *)v15;
    v13[2] = v15[2];
    *(_OWORD *)unsigned int v13 = v30;
    if (v16 <= 3)
    {
      unsigned int v37 = ((1 << v17) + 1) >> v17;
      if (v37 > 0xFFFC)
      {
        *(_DWORD *)((char *)v13 + v16) = 0;
        goto LABEL_75;
      }
      if (v37 > 0xFC)
      {
        *(_WORD *)((char *)v13 + v16) = 0;
        goto LABEL_75;
      }
    }
    *((unsigned char *)v13 + v16) = 0;
    if (v16 <= 3)
    {
LABEL_75:
      int v34 = 0;
      unsigned int v38 = ((1 << (8 * v16)) + 1) >> (8 * v16);
      uint64_t v39 = 2;
      if (v38 > 0xFFFC) {
        uint64_t v39 = 4;
      }
      if (v38 > 0xFC) {
        goto LABEL_79;
      }
      goto LABEL_78;
    }
  }
LABEL_59:
  int v34 = 1;
LABEL_78:
  uint64_t v39 = 1;
LABEL_79:
  uint64_t v40 = v39 + v16;
  int v41 = (void *)(((v11 | v9) + v40) & v12);
  int v42 = (void *)(((v14 | v9) + v40) & v12);
  char v43 = 8 * v16;
  if (v41 == v42) {
    goto LABEL_133;
  }
  if (v34) {
    goto LABEL_83;
  }
  unsigned int v44 = ((1 << v43) + 1) >> v43;
  if (v44 > 0xFFFC)
  {
    unsigned int v45 = *(_DWORD *)((char *)v41 + v16);
    unsigned int v46 = v45 - 3;
    if (v45 < 3) {
      goto LABEL_98;
    }
    goto LABEL_88;
  }
  if (v44 <= 0xFC)
  {
LABEL_83:
    unsigned int v45 = *((unsigned __int8 *)v41 + v16);
    unsigned int v46 = v45 - 3;
    if (v45 < 3) {
      goto LABEL_98;
    }
LABEL_88:
    if (v34) {
      uint64_t v47 = 4;
    }
    else {
      uint64_t v47 = v16;
    }
    switch(v47)
    {
      case 1:
        int v48 = *(unsigned __int8 *)v41;
        goto LABEL_96;
      case 2:
        int v48 = *(unsigned __int16 *)v41;
        goto LABEL_96;
      case 3:
        int v48 = *(unsigned __int16 *)v41 | (*((unsigned __int8 *)v41 + 2) << 16);
        goto LABEL_96;
      case 4:
        int v48 = *(_DWORD *)v41;
LABEL_96:
        int v49 = (v48 | (v46 << v43)) + 3;
        unsigned int v45 = v48 + 3;
        if (!v34) {
          unsigned int v45 = v49;
        }
        break;
      default:
        goto LABEL_98;
    }
    goto LABEL_98;
  }
  unsigned int v45 = *(unsigned __int16 *)((char *)v41 + v16);
  unsigned int v46 = v45 - 3;
  if (v45 >= 3) {
    goto LABEL_88;
  }
LABEL_98:
  if (v45 - 1 <= 1) {
    (*(void (**)(void *, uint64_t))(v8 + 8))(v41, v5);
  }
  if (v34) {
    goto LABEL_103;
  }
  unsigned int v50 = ((1 << v43) + 1) >> v43;
  if (v50 > 0xFFFC)
  {
    unsigned int v51 = *(_DWORD *)((char *)v42 + v16);
    unsigned int v52 = v51 - 3;
    if (v51 < 3) {
      goto LABEL_118;
    }
    goto LABEL_108;
  }
  if (v50 <= 0xFC)
  {
LABEL_103:
    unsigned int v51 = *((unsigned __int8 *)v42 + v16);
    unsigned int v52 = v51 - 3;
    if (v51 < 3) {
      goto LABEL_118;
    }
  }
  else
  {
    unsigned int v51 = *(unsigned __int16 *)((char *)v42 + v16);
    unsigned int v52 = v51 - 3;
    if (v51 < 3) {
      goto LABEL_118;
    }
  }
LABEL_108:
  if (v34) {
    uint64_t v53 = 4;
  }
  else {
    uint64_t v53 = v16;
  }
  switch(v53)
  {
    case 1:
      int v54 = *(unsigned __int8 *)v42;
      goto LABEL_116;
    case 2:
      int v54 = *(unsigned __int16 *)v42;
      goto LABEL_116;
    case 3:
      int v54 = *(unsigned __int16 *)v42 | (*((unsigned __int8 *)v42 + 2) << 16);
      goto LABEL_116;
    case 4:
      int v54 = *(_DWORD *)v42;
LABEL_116:
      int v55 = (v54 | (v52 << v43)) + 3;
      unsigned int v51 = v54 + 3;
      if (!v34) {
        unsigned int v51 = v55;
      }
      break;
    default:
      break;
  }
LABEL_118:
  if (v51 == 2)
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v41, v42, v5);
    if ((v34 & 1) == 0)
    {
      unsigned int v57 = ((1 << v43) + 1) >> v43;
      if (v57 > 0xFFFC)
      {
        int v58 = 2;
        goto LABEL_150;
      }
      if (v57 > 0xFC)
      {
        LOWORD(v58) = 2;
        goto LABEL_153;
      }
    }
    *((unsigned char *)v41 + v16) = 2;
    if (v34) {
      goto LABEL_134;
    }
LABEL_141:
    unsigned int v62 = ((1 << v43) + 1) >> v43;
    unsigned int v59 = v62 + 3;
    uint64_t v63 = 2;
    if (v62 > 0xFFFC) {
      uint64_t v63 = 4;
    }
    if (v62 > 0xFC)
    {
      uint64_t v64 = ~v9;
      goto LABEL_156;
    }
    goto LABEL_145;
  }
  if (v51 == 1)
  {
    (*(void (**)(void *, void *, uint64_t))(v8 + 32))(v41, v42, v5);
    if (v34)
    {
LABEL_132:
      *((unsigned char *)v41 + v16) = 1;
LABEL_133:
      if ((v34 & 1) == 0) {
        goto LABEL_141;
      }
      goto LABEL_134;
    }
    int v58 = 1;
    unsigned int v57 = ((1 << v43) + 1) >> v43;
    if (v57 <= 0xFFFC)
    {
      if (v57 <= 0xFC) {
        goto LABEL_132;
      }
LABEL_153:
      *(_WORD *)((char *)v41 + v16) = v58;
      goto LABEL_154;
    }
LABEL_150:
    *(_DWORD *)((char *)v41 + v16) = v58;
    goto LABEL_154;
  }
  if (v51)
  {
    if (v34) {
      goto LABEL_139;
    }
    unsigned int v60 = ((1 << v43) + 1) >> v43;
    uint64_t v61 = 2;
    if (v60 > 0xFFFC) {
      uint64_t v61 = 4;
    }
    if (v60 <= 0xFC) {
LABEL_139:
    }
      uint64_t v61 = 1;
    memcpy(v41, v42, v61 + v16);
    if (v34) {
      goto LABEL_134;
    }
    goto LABEL_141;
  }
  long long v56 = *(_OWORD *)v42;
  v41[2] = v42[2];
  *(_OWORD *)int v41 = v56;
  if (v34) {
    goto LABEL_122;
  }
  unsigned int v57 = ((1 << v43) + 1) >> v43;
  if (v57 > 0xFFFC)
  {
    *(_DWORD *)((char *)v41 + v16) = 0;
  }
  else
  {
    if (v57 <= 0xFC)
    {
LABEL_122:
      *((unsigned char *)v41 + v16) = 0;
      if ((v34 & 1) == 0) {
        goto LABEL_141;
      }
LABEL_134:
      unsigned int v59 = 4;
LABEL_145:
      uint64_t v64 = ~v9;
      uint64_t v63 = 1;
      goto LABEL_156;
    }
    *(_WORD *)((char *)v41 + v16) = 0;
  }
LABEL_154:
  uint64_t v64 = ~v9;
  unsigned int v59 = v57 + 3;
  BOOL v65 = v57 > 0xFFFC;
  uint64_t v63 = 2;
  if (v65) {
    uint64_t v63 = 4;
  }
LABEL_156:
  uint64_t v66 = (v16 + v9 + v63) & v64;
  uint64_t v67 = 4;
  if (v59 < 0x10000) {
    uint64_t v67 = 2;
  }
  if (v59 < 0x100) {
    uint64_t v68 = 1;
  }
  else {
    uint64_t v68 = v67;
  }
  uint64_t v69 = v68 + v16 + v66;
  uint64_t v70 = (char *)v13 + v69;
  uint64_t v71 = (char *)v15 + v69;
  unint64_t v72 = (unint64_t)(v70 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v73 = (unint64_t)(v71 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v74 = *(_OWORD *)v73;
  long long v75 = *(_OWORD *)(v73 + 16);
  *(unsigned char *)(v72 + 32) = *(unsigned char *)(v73 + 32);
  *(_OWORD *)unint64_t v72 = v74;
  *(_OWORD *)(v72 + 16) = v75;
  uint64_t v76 = (double *)((unint64_t)(v71 + 47) & 0xFFFFFFFFFFFFFFF8);
  double result = *v76;
  *(double *)((unint64_t)(v70 + 47) & 0xFFFFFFFFFFFFFFF8) = *v76;
  return result;
}

uint64_t getEnumTagSinglePayload for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(int *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v5 - 8);
  unint64_t v9 = *(void *)(v8 + 64);
  if (v9 <= 0x18) {
    unint64_t v9 = 24;
  }
  char v10 = 8 * v9;
  if (v9 > 3)
  {
    int v11 = 4;
LABEL_5:
    char v12 = 8;
    goto LABEL_6;
  }
  unsigned int v17 = ((1 << v10) + 1) >> v10;
  if (v17 > 0xFFFC)
  {
LABEL_15:
    unsigned int v13 = 0x7FFFFFFF;
    if (v9 > 3) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  int v11 = v17 + 3;
  if (v17 <= 0xFC) {
    goto LABEL_5;
  }
  char v12 = 16;
LABEL_6:
  unsigned int v13 = (1 << v12) - v11;
  if ((v13 & 0x80000000) != 0) {
    goto LABEL_15;
  }
  if (v9 > 3)
  {
LABEL_8:
    int v14 = 4;
    goto LABEL_9;
  }
LABEL_16:
  unsigned int v18 = ((1 << v10) + 1) >> v10;
  if (v18 <= 0xFFFC)
  {
    int v14 = v18 + 3;
    if (v18 > 0xFC)
    {
      char v15 = 16;
LABEL_10:
      unsigned int v16 = (1 << v15) - v14;
      if ((v16 & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
LABEL_9:
    char v15 = 8;
    goto LABEL_10;
  }
LABEL_19:
  unsigned int v16 = 0x7FFFFFFF;
LABEL_20:
  if (v16 > v13) {
    unsigned int v13 = v16;
  }
  if (v13 <= v7) {
    unsigned int v19 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v19 = v13;
  }
  int v20 = *(_DWORD *)(v8 + 80);
  uint64_t v21 = 1;
  if (v9 <= 3)
  {
    unsigned int v23 = ((1 << v10) + 1) >> v10;
    if (v23 > 0xFFFC)
    {
      uint64_t v21 = 4;
    }
    else
    {
      if (v23 < 0xFD)
      {
        uint64_t v21 = 1;
        uint64_t v22 = 1;
        if (!a2) {
          return 0;
        }
        goto LABEL_37;
      }
      uint64_t v21 = 2;
    }
    uint64_t v22 = 4;
    if (v23 <= 0xFFFC) {
      uint64_t v22 = 2;
    }
    if (!a2) {
      return 0;
    }
    goto LABEL_37;
  }
  uint64_t v22 = 1;
  if (!a2) {
    return 0;
  }
LABEL_37:
  uint64_t v24 = v20 & 0xF8 | 7;
  uint64_t v25 = *(void *)(v6 + 64) + v24;
  uint64_t v26 = ~v24;
  if (v19 < a2)
  {
    unint64_t v27 = ((v9 + (v25 & ~v24) + ((v9 + v21 + v24) & v26) + v22 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v28 = v27 & 0xFFFFFFF8;
    if ((v27 & 0xFFFFFFF8) != 0) {
      unsigned int v29 = 2;
    }
    else {
      unsigned int v29 = a2 - v19 + 1;
    }
    if (v29 >= 0x10000) {
      unsigned int v30 = 4;
    }
    else {
      unsigned int v30 = 2;
    }
    if (v29 < 0x100) {
      unsigned int v30 = 1;
    }
    if (v29 >= 2) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = 0;
    }
    switch(v31)
    {
      case 1:
        int v32 = *((unsigned __int8 *)a1 + v27);
        if (!v32) {
          break;
        }
        goto LABEL_53;
      case 2:
        int v32 = *(unsigned __int16 *)((char *)a1 + v27);
        if (v32) {
          goto LABEL_53;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1879BB7DCLL);
      case 4:
        int v32 = *(int *)((char *)a1 + v27);
        if (!v32) {
          break;
        }
LABEL_53:
        int v33 = v32 - 1;
        if (v28)
        {
          int v33 = 0;
          int v34 = *a1;
        }
        else
        {
          int v34 = 0;
        }
        unsigned int v59 = v19 + (v34 | v33);
        return v59 + 1;
      default:
        break;
    }
  }
  if (!v19) {
    return 0;
  }
  if (v9 > 3)
  {
    int v35 = 4;
LABEL_59:
    char v36 = 8;
    goto LABEL_60;
  }
  unsigned int v41 = ((1 << v10) + 1) >> v10;
  if (v41 > 0xFFFC)
  {
LABEL_69:
    unsigned int v37 = 0x7FFFFFFF;
    if (v9 > 3) {
      goto LABEL_62;
    }
    goto LABEL_70;
  }
  int v35 = v41 + 3;
  if (v41 <= 0xFC) {
    goto LABEL_59;
  }
  char v36 = 16;
LABEL_60:
  unsigned int v37 = (1 << v36) - v35;
  if ((v37 & 0x80000000) != 0) {
    goto LABEL_69;
  }
  if (v9 > 3)
  {
LABEL_62:
    int v38 = 4;
    goto LABEL_63;
  }
LABEL_70:
  unsigned int v42 = ((1 << v10) + 1) >> v10;
  if (v42 <= 0xFFFC)
  {
    int v38 = v42 + 3;
    if (v42 > 0xFC)
    {
      char v39 = 16;
LABEL_64:
      unsigned int v40 = (1 << v39) - v38;
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_74;
      }
      goto LABEL_73;
    }
LABEL_63:
    char v39 = 8;
    goto LABEL_64;
  }
LABEL_73:
  unsigned int v40 = 0x7FFFFFFF;
LABEL_74:
  if (v40 > v37) {
    unsigned int v37 = v40;
  }
  if (v37 <= v7) {
    unsigned int v43 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v43 = v37;
  }
  if (v7 < v37)
  {
    if (v9 <= 3)
    {
      unsigned int v49 = ((1 << v10) + 1) >> v10;
      if (v49 > 0xFFFC)
      {
LABEL_91:
        unsigned int v46 = 0x7FFFFFFF;
LABEL_92:
        unint64_t v50 = (unint64_t)a1 + v25;
        if (v9 <= 3)
        {
          unsigned int v54 = ((1 << v10) + 1) >> v10;
          if (v54 > 0xFFFC)
          {
LABEL_100:
            unsigned int v53 = 0x7FFFFFFF;
LABEL_101:
            int v55 = (unsigned __int16 *)(v50 & v26);
            if (v53 > v46) {
              unsigned int v46 = v53;
            }
            uint64_t v56 = 1;
            if (v9 > 3)
            {
              uint64_t v57 = 1;
              goto LABEL_114;
            }
            unsigned int v58 = ((1 << v10) + 1) >> v10;
            if (v58 > 0xFFFC)
            {
              uint64_t v56 = 4;
            }
            else
            {
              if (v58 < 0xFD)
              {
                uint64_t v56 = 1;
                uint64_t v57 = 1;
                goto LABEL_114;
              }
              uint64_t v56 = 2;
            }
            uint64_t v57 = 4;
            if (v58 <= 0xFFFC) {
              uint64_t v57 = 2;
            }
LABEL_114:
            unsigned int v60 = v43 - v46;
            if (v43 <= v46) {
              goto LABEL_132;
            }
            unint64_t v61 = ((v9 + v56 + v24) & v26) + v9 + v57;
            char v62 = 8 * v61;
            if (v61 > 3)
            {
LABEL_116:
              int v63 = *((unsigned __int8 *)v55 + v61);
              goto LABEL_123;
            }
            unsigned int v64 = ((v60 + ~(-1 << v62)) >> v62) + 1;
            if (HIWORD(v64))
            {
              int v63 = *(_DWORD *)((char *)v55 + v61);
            }
            else
            {
              if (v64 <= 0xFF)
              {
                if (v64 < 2) {
                  goto LABEL_132;
                }
                goto LABEL_116;
              }
              int v63 = *(unsigned __int16 *)((char *)v55 + v61);
            }
LABEL_123:
            if (v63)
            {
              int v65 = (v63 - 1) << v62;
              if (v61 > 3) {
                int v65 = 0;
              }
              if (v61)
              {
                if (v61 <= 3) {
                  int v66 = v61;
                }
                else {
                  int v66 = 4;
                }
                switch(v66)
                {
                  case 2:
                    int v67 = *v55;
                    break;
                  case 3:
                    int v67 = *v55 | (*((unsigned __int8 *)v55 + 2) << 16);
                    break;
                  case 4:
                    int v67 = *(_DWORD *)v55;
                    break;
                  default:
                    int v67 = *(unsigned __int8 *)v55;
                    break;
                }
              }
              else
              {
                int v67 = 0;
              }
              unsigned int v59 = v46 + (v67 | v65);
              return v59 + 1;
            }
LABEL_132:
            if (!v46) {
              return 0;
            }
            if (v9 <= 3)
            {
              unsigned int v74 = ((1 << v10) + 1) >> v10;
              if (v74 > 0xFFFC) {
                goto LABEL_145;
              }
              int v68 = v74 + 3;
              if (v74 > 0xFC)
              {
                char v69 = 16;
LABEL_136:
                unsigned int v70 = (1 << v69) - v68;
                if ((v70 & 0x80000000) == 0)
                {
                  if (v9 > 3)
                  {
LABEL_138:
                    int v71 = 4;
                    goto LABEL_139;
                  }
LABEL_146:
                  unsigned int v75 = ((1 << v10) + 1) >> v10;
                  if (v75 > 0xFFFC)
                  {
LABEL_149:
                    unsigned int v73 = 0x7FFFFFFF;
LABEL_150:
                    if (v73 > v70) {
                      unsigned int v70 = v73;
                    }
                    if (v9 <= 3)
                    {
                      unsigned int v80 = ((1 << v10) + 1) >> v10;
                      if (v80 > 0xFFFC) {
                        goto LABEL_162;
                      }
                      int v76 = v80 + 3;
                      if (v80 > 0xFC)
                      {
                        char v77 = 16;
LABEL_155:
                        int v78 = (1 << v77) - v76;
                        if ((v78 & 0x80000000) == 0)
                        {
                          if (v78 == v70) {
                            goto LABEL_157;
                          }
                          goto LABEL_163;
                        }
LABEL_162:
                        if (v70 == 0x7FFFFFFF)
                        {
LABEL_157:
                          if (v9 <= 3)
                          {
                            unsigned int v82 = ((1 << v10) + 1) >> v10;
                            if (v82 > 0xFFFC) {
                              goto LABEL_169;
                            }
                            int v79 = v82 + 3;
                            if (v82 > 0xFC)
                            {
                              char v83 = 16;
LABEL_168:
                              unsigned int v84 = (1 << v83) - v79;
                              if ((v84 & 0x80000000) == 0)
                              {
LABEL_170:
                                if (v9 > 3) {
                                  goto LABEL_174;
                                }
                                unsigned int v85 = ((1 << v10) + 1) >> v10;
                                uint64_t v86 = 2;
                                if (v85 > 0xFFFC) {
                                  uint64_t v86 = 4;
                                }
                                if (v85 <= 0xFC) {
LABEL_174:
                                }
                                  uint64_t v86 = 1;
                                if (!v70) {
                                  return 0;
                                }
                                BOOL v87 = v70 >= v84;
                                unsigned int v88 = v70 - v84;
                                if (v88 == 0 || !v87) {
                                  goto LABEL_230;
                                }
                                unint64_t v89 = v86 + v9;
                                char v90 = 8 * v89;
                                if (v89 > 3) {
                                  goto LABEL_179;
                                }
                                unsigned int v94 = ((v88 + ~(-1 << v90)) >> v90) + 1;
                                if (HIWORD(v94))
                                {
                                  int v91 = *(_DWORD *)((char *)v55 + v89);
                                }
                                else
                                {
                                  if (v94 <= 0xFF)
                                  {
                                    if (v94 < 2) {
                                      goto LABEL_230;
                                    }
LABEL_179:
                                    int v91 = *((unsigned __int8 *)v55 + v89);
                                    goto LABEL_221;
                                  }
                                  int v91 = *(unsigned __int16 *)((char *)v55 + v89);
                                }
LABEL_221:
                                if (v91)
                                {
                                  int v107 = (v91 - 1) << v90;
                                  if (v89 > 3) {
                                    int v107 = 0;
                                  }
                                  if (v89)
                                  {
                                    if (v89 <= 3) {
                                      int v108 = v89;
                                    }
                                    else {
                                      int v108 = 4;
                                    }
                                    switch(v108)
                                    {
                                      case 2:
                                        int v109 = *v55;
                                        break;
                                      case 3:
                                        int v109 = *v55 | (*((unsigned __int8 *)v55 + 2) << 16);
                                        break;
                                      case 4:
                                        int v109 = *(_DWORD *)v55;
                                        break;
                                      default:
                                        int v109 = *(unsigned __int8 *)v55;
                                        break;
                                    }
                                  }
                                  else
                                  {
                                    int v109 = 0;
                                  }
                                  unsigned int v59 = v84 + (v109 | v107);
                                  return v59 + 1;
                                }
LABEL_230:
                                if (v84)
                                {
                                  if (v9 > 3)
                                  {
                                    int v110 = *((unsigned __int8 *)v55 + v9);
LABEL_251:
                                    unsigned int v114 = v110 | 0xFFFFFF00;
                                    unsigned int v118 = v110 ^ 0xFF;
                                    char v119 = 8;
                                    int v112 = 4;
                                    goto LABEL_263;
                                  }
                                  unsigned int v111 = ((1 << v10) + 1) >> v10;
                                  if (v111 <= 0xFFFC)
                                  {
                                    int v112 = v111 + 3;
                                    if (v111 <= 0xFC)
                                    {
                                      int v113 = *((unsigned __int8 *)v55 + v9);
LABEL_256:
                                      unsigned int v114 = v113 | 0xFFFFFF00;
                                      unsigned int v118 = v113 ^ 0xFF;
                                      char v119 = 8;
                                      goto LABEL_263;
                                    }
                                    int v121 = *(unsigned __int16 *)((char *)v55 + v9);
                                    goto LABEL_262;
                                  }
                                  unsigned int v114 = *(_DWORD *)((char *)v55 + v9);
                                  goto LABEL_258;
                                }
                                return 0;
                              }
LABEL_169:
                              unsigned int v84 = 0x7FFFFFFF;
                              goto LABEL_170;
                            }
                          }
                          else
                          {
                            int v79 = 4;
                          }
                          char v83 = 8;
                          goto LABEL_168;
                        }
LABEL_163:
                        if (v9 <= 3)
                        {
                          unsigned int v92 = ((1 << v10) + 1) >> v10;
                          unint64_t v93 = v9 + (v50 | v24);
                          if (v92 > 0xFFFC)
                          {
                            uint64_t v81 = v93 + 4;
                          }
                          else if (v92 > 0xFC)
                          {
                            uint64_t v81 = v93 + 2;
                          }
                          else
                          {
                            uint64_t v81 = v93 + 1;
                          }
                        }
                        else
                        {
                          uint64_t v81 = (uint64_t)v55 + v9 + v24 + 1;
                        }
                        __n128 v95 = (unsigned __int16 *)(v81 & v26);
                        if (v9 <= 3)
                        {
                          unsigned int v97 = ((1 << v10) + 1) >> v10;
                          if (v97 > 0xFFFC) {
                            goto LABEL_202;
                          }
                          int v96 = v97 + 3;
                          if (v97 > 0xFC)
                          {
                            char v98 = 16;
LABEL_201:
                            unsigned int v99 = (1 << v98) - v96;
                            if ((v99 & 0x80000000) == 0)
                            {
LABEL_203:
                              if (v9 > 3) {
                                goto LABEL_207;
                              }
                              unsigned int v100 = ((1 << v10) + 1) >> v10;
                              uint64_t v101 = 2;
                              if (v100 > 0xFFFC) {
                                uint64_t v101 = 4;
                              }
                              if (v100 <= 0xFC) {
LABEL_207:
                              }
                                uint64_t v101 = 1;
                              if (!v70) {
                                return 0;
                              }
                              BOOL v87 = v70 >= v99;
                              unsigned int v102 = v70 - v99;
                              if (v102 == 0 || !v87) {
                                goto LABEL_248;
                              }
                              unint64_t v103 = v101 + v9;
                              char v104 = 8 * v103;
                              if (v103 > 3) {
                                goto LABEL_212;
                              }
                              unsigned int v106 = ((v102 + ~(-1 << v104)) >> v104) + 1;
                              if (HIWORD(v106))
                              {
                                int v105 = *(_DWORD *)((char *)v95 + v103);
                              }
                              else
                              {
                                if (v106 <= 0xFF)
                                {
                                  if (v106 < 2) {
                                    goto LABEL_248;
                                  }
LABEL_212:
                                  int v105 = *((unsigned __int8 *)v95 + v103);
                                  goto LABEL_239;
                                }
                                int v105 = *(unsigned __int16 *)((char *)v95 + v103);
                              }
LABEL_239:
                              if (v105)
                              {
                                int v115 = (v105 - 1) << v104;
                                if (v103 > 3) {
                                  int v115 = 0;
                                }
                                if (v103)
                                {
                                  if (v103 <= 3) {
                                    int v116 = v103;
                                  }
                                  else {
                                    int v116 = 4;
                                  }
                                  switch(v116)
                                  {
                                    case 2:
                                      int v117 = *v95;
                                      break;
                                    case 3:
                                      int v117 = *v95 | (*((unsigned __int8 *)v95 + 2) << 16);
                                      break;
                                    case 4:
                                      int v117 = *(_DWORD *)v95;
                                      break;
                                    default:
                                      int v117 = *(unsigned __int8 *)v95;
                                      break;
                                  }
                                }
                                else
                                {
                                  int v117 = 0;
                                }
                                unsigned int v59 = v99 + (v117 | v115);
                                return v59 + 1;
                              }
LABEL_248:
                              if (v99)
                              {
                                if (v9 > 3)
                                {
                                  int v110 = *((unsigned __int8 *)v95 + v9);
                                  goto LABEL_251;
                                }
                                unsigned int v120 = ((1 << v10) + 1) >> v10;
                                if (v120 <= 0xFFFC)
                                {
                                  int v112 = v120 + 3;
                                  if (v120 <= 0xFC)
                                  {
                                    int v113 = *((unsigned __int8 *)v95 + v9);
                                    goto LABEL_256;
                                  }
                                  int v121 = *(unsigned __int16 *)((char *)v95 + v9);
LABEL_262:
                                  unsigned int v114 = v121 | 0xFFFF0000;
                                  unsigned int v118 = v121 ^ 0xFFFF;
                                  char v119 = 16;
LABEL_263:
                                  unsigned int v122 = (1 << v119) - v112;
                                  if ((v122 & 0x80000000) == 0) {
                                    goto LABEL_265;
                                  }
                                  goto LABEL_264;
                                }
                                unsigned int v114 = *(_DWORD *)((char *)v95 + v9);
LABEL_258:
                                unsigned int v118 = ~v114;
LABEL_264:
                                unsigned int v122 = 0x7FFFFFFF;
LABEL_265:
                                if (v122 > v118) {
                                  return -v114;
                                }
                                else {
                                  return 0;
                                }
                              }
                              return 0;
                            }
LABEL_202:
                            unsigned int v99 = 0x7FFFFFFF;
                            goto LABEL_203;
                          }
                        }
                        else
                        {
                          int v96 = 4;
                        }
                        char v98 = 8;
                        goto LABEL_201;
                      }
                    }
                    else
                    {
                      int v76 = 4;
                    }
                    char v77 = 8;
                    goto LABEL_155;
                  }
                  int v71 = v75 + 3;
                  if (v75 > 0xFC)
                  {
                    char v72 = 16;
LABEL_140:
                    unsigned int v73 = (1 << v72) - v71;
                    if ((v73 & 0x80000000) == 0) {
                      goto LABEL_150;
                    }
                    goto LABEL_149;
                  }
LABEL_139:
                  char v72 = 8;
                  goto LABEL_140;
                }
LABEL_145:
                unsigned int v70 = 0x7FFFFFFF;
                if (v9 > 3) {
                  goto LABEL_138;
                }
                goto LABEL_146;
              }
            }
            else
            {
              int v68 = 4;
            }
            char v69 = 8;
            goto LABEL_136;
          }
          int v51 = v54 + 3;
          if (v54 > 0xFC)
          {
            char v52 = 16;
LABEL_95:
            unsigned int v53 = (1 << v52) - v51;
            if ((v53 & 0x80000000) == 0) {
              goto LABEL_101;
            }
            goto LABEL_100;
          }
        }
        else
        {
          int v51 = 4;
        }
        char v52 = 8;
        goto LABEL_95;
      }
      int v44 = v49 + 3;
      if (v49 > 0xFC)
      {
        char v45 = 16;
LABEL_83:
        unsigned int v46 = (1 << v45) - v44;
        if ((v46 & 0x80000000) == 0) {
          goto LABEL_92;
        }
        goto LABEL_91;
      }
    }
    else
    {
      int v44 = 4;
    }
    char v45 = 8;
    goto LABEL_83;
  }
  uint64_t v47 = *(uint64_t (**)(int *))(v6 + 48);

  return v47(a1);
}

void storeEnumTagSinglePayload for AnimatedValueTrack<A>.VectorPath.TimedKeyframe(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v7 - 8);
  unint64_t v11 = *(void *)(v10 + 64);
  if (v11 <= 0x18) {
    unint64_t v11 = 24;
  }
  if (v11 > 3)
  {
    int v12 = 4;
LABEL_5:
    char v13 = 8;
    goto LABEL_6;
  }
  unsigned int v18 = ((1 << (8 * v11)) + 1) >> (8 * v11);
  if (v18 > 0xFFFC)
  {
LABEL_15:
    unsigned int v14 = 0x7FFFFFFF;
    if (v11 > 3) {
      goto LABEL_8;
    }
    goto LABEL_16;
  }
  int v12 = v18 + 3;
  if (v18 <= 0xFC) {
    goto LABEL_5;
  }
  char v13 = 16;
LABEL_6:
  unsigned int v14 = (1 << v13) - v12;
  if ((v14 & 0x80000000) != 0) {
    goto LABEL_15;
  }
  if (v11 > 3)
  {
LABEL_8:
    int v15 = 4;
    goto LABEL_9;
  }
LABEL_16:
  unsigned int v19 = ((1 << (8 * v11)) + 1) >> (8 * v11);
  if (v19 <= 0xFFFC)
  {
    int v15 = v19 + 3;
    if (v19 > 0xFC)
    {
      char v16 = 16;
LABEL_10:
      unsigned int v17 = (1 << v16) - v15;
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
LABEL_9:
    char v16 = 8;
    goto LABEL_10;
  }
LABEL_19:
  unsigned int v17 = 0x7FFFFFFF;
LABEL_20:
  if (v17 > v14) {
    unsigned int v14 = v17;
  }
  if (v14 <= v9) {
    unsigned int v20 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v20 = v14;
  }
  uint64_t v21 = *(_DWORD *)(v10 + 80) & 0xF8 | 7;
  uint64_t v22 = ~v21;
  uint64_t v23 = *(void *)(v8 + 64) + v21;
  uint64_t v24 = 1;
  if (v11 > 3)
  {
    uint64_t v25 = 1;
    goto LABEL_34;
  }
  unsigned int v26 = ((1 << (8 * v11)) + 1) >> (8 * v11);
  if (v26 > 0xFFFC)
  {
    uint64_t v24 = 4;
  }
  else
  {
    if (v26 < 0xFD)
    {
      uint64_t v24 = 1;
      uint64_t v25 = 1;
      goto LABEL_34;
    }
    uint64_t v24 = 2;
  }
  BOOL v27 = v26 > 0xFFFC;
  uint64_t v25 = 2;
  if (v27) {
    uint64_t v25 = 4;
  }
LABEL_34:
  size_t v28 = ((v11 + (v23 & ~v21) + ((v11 + v24 + v21) & v22) + v25 + 47) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v20 < a3)
  {
    if (((v11
         + (v23 & ~v21)
         + ((v11 + v24 + v21) & v22)
         + v25
         + 47) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v29 = a3 - v20 + 1;
    else {
      unsigned int v29 = 2;
    }
    if (v29 >= 0x10000) {
      int v30 = 4;
    }
    else {
      int v30 = 2;
    }
    if (v29 < 0x100) {
      int v30 = 1;
    }
    if (v29 >= 2) {
      int v31 = v30;
    }
    else {
      int v31 = 0;
    }
    int v32 = a2 - v20;
    if (a2 <= v20) {
      goto LABEL_47;
    }
LABEL_51:
    if (v28) {
      int v33 = 1;
    }
    else {
      int v33 = v32;
    }
    if (v28)
    {
      int v34 = ~v20 + a2;
      bzero(a1, v28);
      *a1 = v34;
    }
    switch(v31)
    {
      case 1:
        *((unsigned char *)a1 + v28) = v33;
        break;
      case 2:
        *(_WORD *)((char *)a1 + v28) = v33;
        break;
      case 3:
LABEL_257:
        __break(1u);
        JUMPOUT(0x1879BC4C8);
      case 4:
        *(_DWORD *)((char *)a1 + v28) = v33;
        break;
      default:
        return;
    }
    return;
  }
  int v31 = 0;
  int v32 = a2 - v20;
  if (a2 > v20) {
    goto LABEL_51;
  }
LABEL_47:
  switch(v31)
  {
    case 1:
      *((unsigned char *)a1 + v28) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_60;
    case 2:
      *(_WORD *)((char *)a1 + v28) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_60;
    case 3:
      goto LABEL_257;
    case 4:
      *(_DWORD *)((char *)a1 + v28) = 0;
      goto LABEL_59;
    default:
LABEL_59:
      if (!a2) {
        return;
      }
LABEL_60:
      if (v11 > 3)
      {
        int v35 = 4;
LABEL_62:
        char v36 = 8;
        goto LABEL_63;
      }
      unsigned int v41 = ((1 << (8 * v11)) + 1) >> (8 * v11);
      if (v41 > 0xFFFC)
      {
LABEL_72:
        unsigned int v37 = 0x7FFFFFFF;
        if (v11 > 3) {
          goto LABEL_65;
        }
        goto LABEL_73;
      }
      int v35 = v41 + 3;
      if (v41 <= 0xFC) {
        goto LABEL_62;
      }
      char v36 = 16;
LABEL_63:
      unsigned int v37 = (1 << v36) - v35;
      if ((v37 & 0x80000000) != 0) {
        goto LABEL_72;
      }
      if (v11 > 3)
      {
LABEL_65:
        int v38 = 4;
LABEL_66:
        char v39 = 8;
        goto LABEL_67;
      }
LABEL_73:
      unsigned int v42 = ((1 << (8 * v11)) + 1) >> (8 * v11);
      if (v42 > 0xFFFC) {
        goto LABEL_76;
      }
      int v38 = v42 + 3;
      if (v42 <= 0xFC) {
        goto LABEL_66;
      }
      char v39 = 16;
LABEL_67:
      unsigned int v40 = (1 << v39) - v38;
      if ((v40 & 0x80000000) == 0) {
        goto LABEL_77;
      }
LABEL_76:
      unsigned int v40 = 0x7FFFFFFF;
LABEL_77:
      if (v40 <= v37) {
        unsigned int v40 = v37;
      }
      if (v40 <= v9) {
        unsigned int v43 = v9;
      }
      else {
        unsigned int v43 = v40;
      }
      if (v9 < v40)
      {
        if (v11 <= 3)
        {
          unsigned int v51 = ((1 << (8 * v11)) + 1) >> (8 * v11);
          if (v51 > 0xFFFC) {
            goto LABEL_102;
          }
          int v44 = v51 + 3;
          if (v51 > 0xFC)
          {
            char v45 = 16;
LABEL_86:
            unsigned int v46 = (1 << v45) - v44;
            if ((v46 & 0x80000000) == 0)
            {
              if (v11 > 3)
              {
LABEL_88:
                int v47 = 4;
                goto LABEL_89;
              }
LABEL_103:
              unsigned int v52 = ((1 << (8 * v11)) + 1) >> (8 * v11);
              if (v52 > 0xFFFC)
              {
LABEL_106:
                unsigned int v49 = 0x7FFFFFFF;
LABEL_107:
                unint64_t v53 = (unint64_t)a1 + v23;
                if (v49 > v46) {
                  unsigned int v46 = v49;
                }
                uint64_t v54 = 1;
                if (v11 > 3)
                {
                  uint64_t v55 = 1;
                  goto LABEL_118;
                }
                unsigned int v56 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                if (v56 > 0xFFFC)
                {
                  uint64_t v54 = 4;
                }
                else
                {
                  if (v56 < 0xFD)
                  {
                    uint64_t v54 = 1;
                    uint64_t v55 = 1;
LABEL_118:
                    uint64_t v57 = (unsigned char *)(v53 & v22);
                    size_t v58 = ((v11 + v54 + v21) & v22) + v11 + v55;
                    BOOL v59 = v43 >= v46;
                    unsigned int v60 = v43 - v46;
                    if (v60 != 0 && v59)
                    {
                      if (v58 <= 3)
                      {
                        unsigned int v64 = ((v60 + ~(-1 << (8 * v58))) >> (8 * v58)) + 1;
                        if (HIWORD(v64))
                        {
                          int v61 = 4;
                        }
                        else if (v64 >= 0x100)
                        {
                          int v61 = 2;
                        }
                        else
                        {
                          int v61 = v64 > 1;
                        }
                      }
                      else
                      {
                        int v61 = 1;
                      }
                    }
                    else
                    {
                      int v61 = 0;
                    }
                    if (v46 < a2)
                    {
                      unsigned int v62 = ~v46 + a2;
                      if (v58 < 4)
                      {
                        int v63 = (v62 >> (8 * v58)) + 1;
                        if (v58)
                        {
                          int v65 = v62 & ~(-1 << (8 * v58));
                          bzero(v57, v58);
                          if (v58 == 3)
                          {
                            *(_WORD *)uint64_t v57 = v65;
                            v57[2] = BYTE2(v65);
                          }
                          else if (v58 == 2)
                          {
                            *(_WORD *)uint64_t v57 = v65;
                          }
                          else
                          {
                            *uint64_t v57 = v65;
                          }
                        }
                      }
                      else
                      {
                        bzero(v57, v58);
                        *(_DWORD *)uint64_t v57 = v62;
                        int v63 = 1;
                      }
                      switch(v61)
                      {
                        case 1:
                          goto LABEL_205;
                        case 2:
                          goto LABEL_254;
                        case 3:
                          goto LABEL_257;
                        case 4:
                          goto LABEL_255;
                        default:
                          return;
                      }
                    }
                    switch(v61)
                    {
                      case 1:
                        v57[v58] = 0;
                        goto LABEL_138;
                      case 2:
                        *(_WORD *)&v57[v58] = 0;
                        goto LABEL_138;
                      case 3:
                        goto LABEL_257;
                      case 4:
                        *(_DWORD *)&v57[v58] = 0;
                        goto LABEL_138;
                      default:
LABEL_138:
                        if (v11 <= 3)
                        {
                          unsigned int v72 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                          if (v72 > 0xFFFC) {
                            goto LABEL_150;
                          }
                          int v66 = v72 + 3;
                          if (v72 > 0xFC)
                          {
                            char v67 = 16;
LABEL_141:
                            unsigned int v68 = (1 << v67) - v66;
                            if ((v68 & 0x80000000) == 0)
                            {
                              if (v11 > 3)
                              {
LABEL_143:
                                int v69 = 4;
LABEL_144:
                                char v70 = 8;
                                goto LABEL_145;
                              }
LABEL_151:
                              unsigned int v73 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                              if (v73 > 0xFFFC) {
                                goto LABEL_154;
                              }
                              int v69 = v73 + 3;
                              if (v73 <= 0xFC) {
                                goto LABEL_144;
                              }
                              char v70 = 16;
LABEL_145:
                              unsigned int v71 = (1 << v70) - v69;
                              if ((v71 & 0x80000000) == 0) {
                                goto LABEL_155;
                              }
LABEL_154:
                              unsigned int v71 = 0x7FFFFFFF;
LABEL_155:
                              if (v71 > v68) {
                                unsigned int v68 = v71;
                              }
                              if (v11 <= 3)
                              {
                                unsigned int v80 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                                if (v80 > 0xFFFC) {
                                  goto LABEL_170;
                                }
                                int v74 = v80 + 3;
                                if (v80 > 0xFC)
                                {
                                  char v75 = 16;
LABEL_160:
                                  int v76 = (1 << v75) - v74;
                                  if ((v76 & 0x80000000) == 0)
                                  {
                                    if (v76 == v68) {
                                      goto LABEL_162;
                                    }
                                    goto LABEL_171;
                                  }
LABEL_170:
                                  if (v68 == 0x7FFFFFFF)
                                  {
LABEL_162:
                                    if (v11 <= 3)
                                    {
                                      unsigned int v82 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                                      if (v82 > 0xFFFC) {
                                        goto LABEL_176;
                                      }
                                      int v77 = v82 + 3;
                                      if (v82 > 0xFC)
                                      {
                                        char v78 = 16;
LABEL_165:
                                        unsigned int v79 = (1 << v78) - v77;
                                        if ((v79 & 0x80000000) == 0)
                                        {
LABEL_177:
                                          if (v11 > 3) {
                                            goto LABEL_181;
                                          }
                                          unsigned int v83 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                                          uint64_t v84 = 2;
                                          if (v83 > 0xFFFC) {
                                            uint64_t v84 = 4;
                                          }
                                          if (v83 <= 0xFC) {
LABEL_181:
                                          }
                                            uint64_t v84 = 1;
                                          size_t v58 = v84 + v11;
                                          if (v68 <= v79)
                                          {
                                            int v85 = 0;
                                          }
                                          else if (v58 <= 3)
                                          {
                                            unsigned int v89 = ((v68 - v79 + ~(-1 << (8 * v58))) >> (8 * v58)) + 1;
                                            if (HIWORD(v89))
                                            {
                                              int v85 = 4;
                                            }
                                            else if (v89 >= 0x100)
                                            {
                                              int v85 = 2;
                                            }
                                            else
                                            {
                                              int v85 = v89 > 1;
                                            }
                                          }
                                          else
                                          {
                                            int v85 = 1;
                                          }
                                          if (v79 < a2)
                                          {
                                            unsigned int v88 = ~v79 + a2;
                                            if (v58 < 4)
                                            {
                                              int v63 = (v88 >> (8 * v58)) + 1;
                                              if (v58)
                                              {
                                                int v90 = v88 & ~(-1 << (8 * v58));
                                                bzero(v57, v58);
                                                if (v58 == 3)
                                                {
                                                  *(_WORD *)uint64_t v57 = v90;
                                                  v57[2] = BYTE2(v90);
                                                }
                                                else if (v58 == 2)
                                                {
                                                  *(_WORD *)uint64_t v57 = v90;
                                                }
                                                else
                                                {
                                                  *uint64_t v57 = v90;
                                                }
                                              }
                                            }
                                            else
                                            {
                                              bzero(v57, v58);
                                              *(_DWORD *)uint64_t v57 = v88;
                                              int v63 = 1;
                                            }
                                            switch(v85)
                                            {
                                              case 1:
                                                goto LABEL_205;
                                              case 2:
                                                goto LABEL_254;
                                              case 3:
                                                goto LABEL_257;
                                              case 4:
                                                goto LABEL_255;
                                              default:
                                                return;
                                            }
                                          }
                                          switch(v85)
                                          {
                                            case 1:
                                              goto LABEL_229;
                                            case 2:
                                              goto LABEL_238;
                                            case 3:
                                              goto LABEL_257;
                                            case 4:
                                              goto LABEL_239;
                                            default:
                                              goto LABEL_240;
                                          }
                                        }
LABEL_176:
                                        unsigned int v79 = 0x7FFFFFFF;
                                        goto LABEL_177;
                                      }
                                    }
                                    else
                                    {
                                      int v77 = 4;
                                    }
                                    char v78 = 8;
                                    goto LABEL_165;
                                  }
LABEL_171:
                                  if (v11 <= 3)
                                  {
                                    unsigned int v86 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                                    unint64_t v87 = v11 + (v53 | v21);
                                    if (v86 > 0xFFFC)
                                    {
                                      uint64_t v81 = v87 + 4;
                                    }
                                    else if (v86 > 0xFC)
                                    {
                                      uint64_t v81 = v87 + 2;
                                    }
                                    else
                                    {
                                      uint64_t v81 = v87 + 1;
                                    }
                                  }
                                  else
                                  {
                                    uint64_t v81 = (uint64_t)&v57[v11 + 1 + v21];
                                  }
                                  uint64_t v57 = (unsigned char *)(v81 & v22);
                                  if (v11 <= 3)
                                  {
                                    unsigned int v94 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                                    if (v94 > 0xFFFC)
                                    {
LABEL_215:
                                      unsigned int v93 = 0x7FFFFFFF;
LABEL_216:
                                      if (v11 > 3) {
                                        goto LABEL_220;
                                      }
                                      unsigned int v95 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                                      uint64_t v96 = 2;
                                      if (v95 > 0xFFFC) {
                                        uint64_t v96 = 4;
                                      }
                                      if (v95 <= 0xFC) {
LABEL_220:
                                      }
                                        uint64_t v96 = 1;
                                      size_t v58 = v96 + v11;
                                      if (v68 <= v93)
                                      {
                                        int v97 = 0;
                                      }
                                      else if (v58 <= 3)
                                      {
                                        unsigned int v99 = ((v68 - v93 + ~(-1 << (8 * v58))) >> (8 * v58)) + 1;
                                        if (HIWORD(v99))
                                        {
                                          int v97 = 4;
                                        }
                                        else if (v99 >= 0x100)
                                        {
                                          int v97 = 2;
                                        }
                                        else
                                        {
                                          int v97 = v99 > 1;
                                        }
                                      }
                                      else
                                      {
                                        int v97 = 1;
                                      }
                                      if (v93 < a2)
                                      {
                                        unsigned int v98 = ~v93 + a2;
                                        if (v58 < 4)
                                        {
                                          int v63 = (v98 >> (8 * v58)) + 1;
                                          if (v58)
                                          {
                                            int v100 = v98 & ~(-1 << (8 * v58));
                                            bzero(v57, v58);
                                            if (v58 == 3)
                                            {
                                              *(_WORD *)uint64_t v57 = v100;
                                              v57[2] = BYTE2(v100);
                                            }
                                            else if (v58 == 2)
                                            {
                                              *(_WORD *)uint64_t v57 = v100;
                                            }
                                            else
                                            {
                                              *uint64_t v57 = v100;
                                            }
                                          }
                                        }
                                        else
                                        {
                                          bzero(v57, v58);
                                          *(_DWORD *)uint64_t v57 = v98;
                                          int v63 = 1;
                                        }
                                        switch(v97)
                                        {
                                          case 1:
LABEL_205:
                                            v57[v58] = v63;
                                            return;
                                          case 2:
LABEL_254:
                                            *(_WORD *)&v57[v58] = v63;
                                            return;
                                          case 3:
                                            goto LABEL_257;
                                          case 4:
LABEL_255:
                                            *(_DWORD *)&v57[v58] = v63;
                                            return;
                                          default:
                                            return;
                                        }
                                      }
                                      switch(v97)
                                      {
                                        case 1:
LABEL_229:
                                          v57[v58] = 0;
                                          goto LABEL_240;
                                        case 2:
LABEL_238:
                                          *(_WORD *)&v57[v58] = 0;
                                          goto LABEL_240;
                                        case 3:
                                          goto LABEL_257;
                                        case 4:
LABEL_239:
                                          *(_DWORD *)&v57[v58] = 0;
                                          goto LABEL_240;
                                        default:
LABEL_240:
                                          int v101 = -(int)a2;
                                          if (v11 > 3) {
                                            goto LABEL_243;
                                          }
                                          unsigned int v102 = ((1 << (8 * v11)) + 1) >> (8 * v11);
                                          if (v102 > 0xFFFC)
                                          {
                                            *(_DWORD *)&v57[v11] = v101;
                                          }
                                          else if (v102 > 0xFC)
                                          {
                                            *(_WORD *)&v57[v11] = v101;
                                          }
                                          else
                                          {
LABEL_243:
                                            v57[v11] = v101;
                                          }
                                          break;
                                      }
                                      return;
                                    }
                                    int v91 = v94 + 3;
                                    if (v94 > 0xFC)
                                    {
                                      char v92 = 16;
LABEL_210:
                                      unsigned int v93 = (1 << v92) - v91;
                                      if ((v93 & 0x80000000) == 0) {
                                        goto LABEL_216;
                                      }
                                      goto LABEL_215;
                                    }
                                  }
                                  else
                                  {
                                    int v91 = 4;
                                  }
                                  char v92 = 8;
                                  goto LABEL_210;
                                }
                              }
                              else
                              {
                                int v74 = 4;
                              }
                              char v75 = 8;
                              goto LABEL_160;
                            }
LABEL_150:
                            unsigned int v68 = 0x7FFFFFFF;
                            if (v11 > 3) {
                              goto LABEL_143;
                            }
                            goto LABEL_151;
                          }
                        }
                        else
                        {
                          int v66 = 4;
                        }
                        char v67 = 8;
                        goto LABEL_141;
                    }
                  }
                  uint64_t v54 = 2;
                }
                BOOL v27 = v56 > 0xFFFC;
                uint64_t v55 = 2;
                if (v27) {
                  uint64_t v55 = 4;
                }
                goto LABEL_118;
              }
              int v47 = v52 + 3;
              if (v52 > 0xFC)
              {
                char v48 = 16;
LABEL_90:
                unsigned int v49 = (1 << v48) - v47;
                if ((v49 & 0x80000000) == 0) {
                  goto LABEL_107;
                }
                goto LABEL_106;
              }
LABEL_89:
              char v48 = 8;
              goto LABEL_90;
            }
LABEL_102:
            unsigned int v46 = 0x7FFFFFFF;
            if (v11 > 3) {
              goto LABEL_88;
            }
            goto LABEL_103;
          }
        }
        else
        {
          int v44 = 4;
        }
        char v45 = 8;
        goto LABEL_86;
      }
      unint64_t v50 = *(void (**)(_DWORD *, uint64_t))(v8 + 56);
      v50(a1, a2);
      return;
  }
}

uint64_t type metadata completion function for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  uint64_t v9 = v6 + 7;
  unint64_t v10 = ((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  if (v7 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v10 > 0x18)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v14 = AssociatedTypeWitness;
    uint64_t v15 = ~v7;
    char v16 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16);
    v16(a1, a2, AssociatedTypeWitness);
    unint64_t v17 = ((unint64_t)a2 + v8) & v15;
    v16((uint64_t *)(((unint64_t)a1 + v8) & v15), (uint64_t *)v17, v14);
    unint64_t v18 = (v8 + v17) & v15;
    v16((uint64_t *)((v8 + (((unint64_t)a1 + v8) & v15)) & v15), (uint64_t *)v18, v14);
    unsigned int v19 = (void *)((v9 + ((v8 + (((unint64_t)a1 + v8) & v15)) & v15)) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v20 = (void *)((v9 + v18) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v19 = *v20;
    unint64_t v21 = ((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    long long v24 = *(_OWORD *)v22;
    long long v23 = *(_OWORD *)(v22 + 16);
    *(unsigned char *)(v21 + 32) = *(unsigned char *)(v22 + 32);
    *(_OWORD *)unint64_t v21 = v24;
    *(_OWORD *)(v21 + 16) = v23;
  }
  return a1;
}

uint64_t destroy for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v9 = v3 + 8;
  v8(a1, AssociatedTypeWitness);
  uint64_t v4 = *(unsigned __int8 *)(v9 + 72);
  uint64_t v5 = *(void *)(v9 + 56) + v4;
  uint64_t v6 = (v5 + a1) & ~v4;
  v8(v6, AssociatedTypeWitness);

  return ((uint64_t (*)(uint64_t, uint64_t))v8)((v5 + v6) & ~v4, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v7 = v5 + 16;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 64);
  uint64_t v10 = (v8 + v9 + a2) & ~v9;
  v6((v8 + v9 + a1) & ~v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v8 + v9 + v10) & ~v9;
  v6((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, AssociatedTypeWitness);
  int v12 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v8 + 7 + ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v13 = *v12;
  unint64_t v14 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v17 = *(_OWORD *)v15;
  long long v16 = *(_OWORD *)(v15 + 16);
  *(unsigned char *)(v14 + 32) = *(unsigned char *)(v15 + 32);
  *(_OWORD *)unint64_t v14 = v17;
  *(_OWORD *)(v14 + 16) = v16;
  return a1;
}

uint64_t assignWithCopy for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  uint64_t v7 = v5 + 24;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 56);
  uint64_t v10 = (v8 + v9 + a2) & ~v9;
  v6((v8 + v9 + a1) & ~v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v8 + v9 + v10) & ~v9;
  v6((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, AssociatedTypeWitness);
  int v12 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v8 + 7 + ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v13 = *v12;
  unint64_t v14 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v17 = *(_OWORD *)v15;
  long long v16 = *(_OWORD *)(v15 + 16);
  *(unsigned char *)(v14 + 32) = *(unsigned char *)(v15 + 32);
  *(_OWORD *)unint64_t v14 = v17;
  *(_OWORD *)(v14 + 16) = v16;
  return a1;
}

uint64_t initializeWithTake for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 32);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 48);
  uint64_t v10 = (v8 + v9 + a2) & ~v9;
  v6((v8 + v9 + a1) & ~v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v8 + v9 + v10) & ~v9;
  v6((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, AssociatedTypeWitness);
  int v12 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v8 + 7 + ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v13 = *v12;
  unint64_t v14 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v17 = *(_OWORD *)v15;
  long long v16 = *(_OWORD *)(v15 + 16);
  *(unsigned char *)(v14 + 32) = *(unsigned char *)(v15 + 32);
  *(_OWORD *)unint64_t v14 = v17;
  *(_OWORD *)(v14 + 16) = v16;
  return a1;
}

uint64_t assignWithTake for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 40);
  uint64_t v7 = v5 + 40;
  v6(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(v7 + 24);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 40);
  uint64_t v10 = (v8 + v9 + a2) & ~v9;
  v6((v8 + v9 + a1) & ~v9, v10, AssociatedTypeWitness);
  uint64_t v11 = (v8 + v9 + v10) & ~v9;
  v6((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9, v11, AssociatedTypeWitness);
  int v12 = (void *)((v8 + 7 + v11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)((v8 + 7 + ((v8 + v9 + ((v8 + v9 + a1) & ~v9)) & ~v9)) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v13 = *v12;
  unint64_t v14 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v17 = *(_OWORD *)v15;
  long long v16 = *(_OWORD *)(v15 + 16);
  *(unsigned char *)(v14 + 32) = *(unsigned char *)(v15 + 32);
  *(_OWORD *)unint64_t v14 = v17;
  *(_OWORD *)(v14 + 16) = v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (!a2) {
    return 0;
  }
  if (v6 < a2)
  {
    unint64_t v7 = ((((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64)
           + ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64)
             + *(unsigned __int8 *)(v5 + 80)
             + ((*(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
           + 7) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 33;
    if (v7 < 4) {
      unsigned int v8 = ((a2 - v6 + 255) >> (8 * v7)) + 1;
    }
    else {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      unsigned int v9 = 4;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v8 < 0x100) {
      unsigned int v9 = 1;
    }
    if (v8 >= 2) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    switch(v10)
    {
      case 1:
        int v11 = a1[v7];
        if (!a1[v7]) {
          break;
        }
        goto LABEL_18;
      case 2:
        int v11 = *(unsigned __int16 *)&a1[v7];
        if (*(_WORD *)&a1[v7]) {
          goto LABEL_18;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1879BCF10);
      case 4:
        int v11 = *(_DWORD *)&a1[v7];
        if (!v11) {
          break;
        }
LABEL_18:
        int v12 = (v11 - 1) << (8 * v7);
        if (v7 >= 4) {
          int v12 = 0;
        }
        if (((((*(_DWORD *)(*(void *)(AssociatedTypeWitness - 8) + 64)
               + ((*(_DWORD *)(*(void *)(AssociatedTypeWitness - 8) + 64)
                 + *(unsigned __int8 *)(v5 + 80)
                 + ((*(_DWORD *)(*(void *)(AssociatedTypeWitness - 8) + 64) + *(unsigned __int8 *)(v5 + 80)) & ~*(unsigned __int8 *)(v5 + 80))) & ~*(unsigned __int8 *)(v5 + 80))
               + 7) & 0xFFFFFFF8)
             + 15) & 0xFFFFFFF8) == 0xFFFFFFE0)
          int v13 = *a1;
        else {
          int v13 = *(_DWORD *)a1;
        }
        return v6 + (v13 | v12) + 1;
      default:
        break;
    }
  }
  if (!v6) {
    return 0;
  }
  unint64_t v14 = *(uint64_t (**)(unsigned __int8 *))(v5 + 48);

  return v14(a1);
}

void storeEnumTagSinglePayload for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = ((((*(void *)(v6 + 64)
         + ((*(void *)(v6 + 64)
           + *(unsigned __int8 *)(v6 + 80)
           + ((*(void *)(v6 + 64) + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 33;
  char v9 = 8 * v8;
  if (v7 >= a3)
  {
    int v12 = 0;
    if (v7 >= a2)
    {
LABEL_14:
      switch(v12)
      {
        case 1:
          a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v8] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_38;
        case 4:
          *(_DWORD *)&a1[v8] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            unint64_t v18 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
            v18(a1, a2);
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (v8 <= 3) {
      unsigned int v10 = ((a3 - v7 + 255) >> v9) + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      int v11 = 4;
    }
    else {
      int v11 = 2;
    }
    if (v10 < 0x100) {
      int v11 = 1;
    }
    if (v10 >= 2) {
      int v12 = v11;
    }
    else {
      int v12 = 0;
    }
    if (v7 >= a2) {
      goto LABEL_14;
    }
  }
  unsigned int v13 = ~v7 + a2;
  unsigned int v14 = v13 >> v9;
  unsigned int v15 = (~(_BYTE)v7 + a2);
  if (v8 < 4) {
    int v16 = v14 + 1;
  }
  else {
    int v16 = 1;
  }
  if (v8 >= 4) {
    unsigned int v17 = v13;
  }
  else {
    unsigned int v17 = v15;
  }
  bzero(a1, v8);
  if (v8 == 1) {
    *a1 = v17;
  }
  else {
    *(_DWORD *)a1 = v17;
  }
  switch(v12)
  {
    case 1:
      a1[v8] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v8] = v16;
      break;
    case 3:
LABEL_38:
      __break(1u);
      JUMPOUT(0x1879BD13CLL);
    case 4:
      *(_DWORD *)&a1[v8] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for Curve()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Curve(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = v7 + v8;
  unint64_t v11 = ((v7 + v8 + ((v7 + v8 + ((v7 + v8) & ~v8)) & ~v8)) & ~v8) + v7;
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v11 > 0x18)
  {
    uint64_t v14 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v14 + ((v8 + 16) & v9));
    swift_retain();
  }
  else
  {
    unsigned int v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16);
    v15(a1, a2, v5);
    unint64_t v16 = ((unint64_t)a2 + v10) & v9;
    v15((uint64_t *)(((unint64_t)v4 + v10) & v9), (uint64_t *)v16, v5);
    unint64_t v17 = (v10 + v16) & v9;
    v15((uint64_t *)((v10 + (((unint64_t)v4 + v10) & v9)) & v9), (uint64_t *)v17, v5);
    v15((uint64_t *)((v10 + ((v10 + (((unint64_t)v4 + v10) & v9)) & v9)) & v9), (uint64_t *)((v10 + v17) & v9), v5);
  }
  return v4;
}

uint64_t destroy for Curve(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v10(a1, v3);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + v5;
  uint64_t v7 = (v6 + a1) & ~v5;
  v10(v7, v3);
  uint64_t v8 = (v6 + v7) & ~v5;
  v10(v8, v3);

  return ((uint64_t (*)(uint64_t, uint64_t))v10)((v6 + v8) & ~v5, v3);
}

uint64_t initializeWithCopy for Curve(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t assignWithCopy for Curve(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 24);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t initializeWithTake for Curve(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t assignWithTake for Curve(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 40);
  v7(a1, a2, v5);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = *(void *)(v6 + 64) + v8;
  uint64_t v10 = (v9 + a2) & ~v8;
  v7((v9 + a1) & ~v8, v10, v5);
  uint64_t v11 = (v9 + v10) & ~v8;
  v7((v9 + ((v9 + a1) & ~v8)) & ~v8, v11, v5);
  v7((v9 + ((v9 + ((v9 + a1) & ~v8)) & ~v8)) & ~v8, (v9 + v11) & ~v8, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for Curve(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  uint64_t v9 = ((v6 + v8 + ((v6 + v8 + ((v6 + v8) & ~v8)) & ~v8)) & ~v8) + v6;
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v12 = ((v7 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v12 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_19;
  }
LABEL_11:
  int v13 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v13 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v9 | v13) + 1;
}

void storeEnumTagSinglePayload for Curve(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((*(void *)(v6 + 64) + v8 + ((*(void *)(v6 + 64) + v8 + ((*(void *)(v6 + 64) + v8) & ~v8)) & ~v8)) & ~v8)
     + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1879BDBACLL);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = *(void (**)(void))(v6 + 56);
        v17();
      }
      return;
  }
}

uint64_t type metadata completion function for AnimatedValueTrack<A>.VectorPath.Element()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for AnimatedValueTrack<A>.VectorPath.Element.CurveSegment();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for AnimatedValueTrack<A>.VectorPath.Element(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  unint64_t v9 = v6 + v7;
  unint64_t v10 = v6 + 7;
  if (((((v6 + 7 + ((v6 + v8 + ((v6 + v8) & ~v8)) & ~v8)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33 > v6) {
    unint64_t v6 = ((((v6
  }
           + 7
           + ((v6 + v7 + ((v6 + v7) & ~(unint64_t)v7)) & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 33;
  if (v6 <= 8) {
    uint64_t v11 = 8;
  }
  else {
    uint64_t v11 = v6;
  }
  BOOL v12 = v7 <= 7u && (v7 & 0x100000) == 0;
  if (v12 && (unint64_t)(v11 + 1) <= 0x18)
  {
    uint64_t v13 = AssociatedTypeWitness;
    unsigned int v14 = a2[v11];
    unsigned int v15 = v14 - 3;
    if (v14 >= 3)
    {
      if (v11 <= 3) {
        uint64_t v16 = v11;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          if (v11 >= 4) {
            goto LABEL_29;
          }
          goto LABEL_21;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          if (v11 < 4) {
            goto LABEL_21;
          }
          goto LABEL_29;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v11 < 4) {
            goto LABEL_21;
          }
          goto LABEL_29;
        case 4:
          int v17 = *(_DWORD *)a2;
          if (v11 < 4)
          {
LABEL_21:
            unsigned int v14 = (v17 | (v15 << (8 * v11))) + 3;
            break;
          }
LABEL_29:
          unsigned int v14 = v17 + 3;
          if (v14 == 2) {
            goto LABEL_30;
          }
          goto LABEL_23;
        default:
          break;
      }
    }
    if (v14 == 2)
    {
LABEL_30:
      *a1 = *(void *)a2;
      char v29 = 2;
      goto LABEL_31;
    }
LABEL_23:
    if (v14 == 1)
    {
      uint64_t v19 = ~v8;
      unsigned int v20 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16);
      v20(a1, a2, AssociatedTypeWitness);
      unint64_t v21 = (unint64_t)&a2[v9] & v19;
      v20((void *)(((unint64_t)a1 + v9) & v19), (unsigned __int8 *)v21, v13);
      unint64_t v22 = (v9 + v21) & v19;
      v20((void *)((v9 + (((unint64_t)a1 + v9) & v19)) & v19), (unsigned __int8 *)v22, v13);
      long long v23 = (void *)((v10 + ((v9 + (((unint64_t)a1 + v9) & v19)) & v19)) & 0xFFFFFFFFFFFFFFF8);
      long long v24 = (void *)((v10 + v22) & 0xFFFFFFFFFFFFFFF8);
      *long long v23 = *v24;
      unint64_t v25 = ((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v26 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
      long long v28 = *(_OWORD *)v26;
      long long v27 = *(_OWORD *)(v26 + 16);
      *(unsigned char *)(v25 + 32) = *(unsigned char *)(v26 + 32);
      *(_OWORD *)unint64_t v25 = v28;
      *(_OWORD *)(v25 + 16) = v27;
      char v29 = 1;
LABEL_31:
      *((unsigned char *)a1 + v11) = v29;
      return a1;
    }
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    *((unsigned char *)a1 + v11) = 0;
  }
  else
  {
    uint64_t v18 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v18 + ((v7 & 0xF8 ^ 0x1F8u) & (v7 + 16)));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for AnimatedValueTrack<A>.VectorPath.Element(unsigned __int8 *a1)
{
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = v5 + v6;
  if (((((v5 + ((v5 + v6 + ((v5 + v6) & ~v6)) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33 > v5) {
    unint64_t v5 = ((((v5 + ((v5 + v6 + ((v5 + v6) & ~v6)) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  }
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  unsigned int v8 = a1[v5];
  unsigned int v9 = v8 - 3;
  if (v8 >= 3)
  {
    if (v5 <= 3) {
      uint64_t v10 = v5;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v11 = *(_DWORD *)a1;
LABEL_14:
        int v12 = (v11 | (v9 << (8 * v5))) + 3;
        unsigned int v8 = v11 + 3;
        if (v5 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 != 2)
  {
    if (v8 == 1)
    {
      uint64_t v13 = ~v6;
      uint64_t v18 = *(void (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      v18(a1, result);
      unint64_t v14 = (unint64_t)&a1[v7] & v13;
      v18((unsigned __int8 *)v14, v3);
      unsigned int v15 = (unsigned __int8 *)((v7 + v14) & v13);
      uint64_t v16 = v3;
      int v17 = (uint64_t (*)(unsigned __int8 *, uint64_t))v18;
    }
    else
    {
      int v17 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      unsigned int v15 = a1;
      uint64_t v16 = v3;
    }
    return v17(v15, v16);
  }
  return result;
}

void *initializeWithCopy for AnimatedValueTrack<A>.VectorPath.Element(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  unint64_t v9 = v6 + 7;
  if (((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33 > v6) {
    unint64_t v6 = ((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  }
  if (v6 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v6;
  }
  unsigned int v11 = a2[v10];
  unsigned int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        goto LABEL_15;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        goto LABEL_15;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_15;
      case 4:
        int v14 = *(_DWORD *)a2;
LABEL_15:
        int v15 = (v14 | (v12 << (8 * v10))) + 3;
        unsigned int v11 = v14 + 3;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 2)
  {
    *a1 = *(void *)a2;
    char v26 = 2;
  }
  else if (v11 == 1)
  {
    uint64_t v16 = ~v7;
    int v17 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16);
    v17(a1, a2, AssociatedTypeWitness);
    unint64_t v18 = (unint64_t)&a2[v8] & v16;
    v17((void *)(((unint64_t)a1 + v8) & v16), (unsigned __int8 *)v18, AssociatedTypeWitness);
    unint64_t v19 = (v8 + v18) & v16;
    v17((void *)((v8 + (((unint64_t)a1 + v8) & v16)) & v16), (unsigned __int8 *)v19, AssociatedTypeWitness);
    unsigned int v20 = (void *)((v9 + v19) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v21 = (void *)((v9 + ((v8 + (((unint64_t)a1 + v8) & v16)) & v16)) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v21 = *v20;
    unint64_t v22 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    long long v25 = *(_OWORD *)v23;
    long long v24 = *(_OWORD *)(v23 + 16);
    *(unsigned char *)(v22 + 32) = *(unsigned char *)(v23 + 32);
    *(_OWORD *)unint64_t v22 = v25;
    *(_OWORD *)(v22 + 16) = v24;
    char v26 = 1;
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    char v26 = 0;
  }
  *((unsigned char *)a1 + v10) = v26;
  return a1;
}

unsigned __int8 *assignWithCopy for AnimatedValueTrack<A>.VectorPath.Element(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v8 = v6 + v7;
    unint64_t v9 = v6 + 7;
    if (((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33 > v6) {
      unint64_t v6 = ((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
    }
         + 33;
    if (v6 <= 8) {
      uint64_t v10 = 8;
    }
    else {
      uint64_t v10 = v6;
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 3;
    if (v11 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          if (v10 < 4) {
            goto LABEL_17;
          }
          goto LABEL_19;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          if (v10 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_17;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v10 < 4) {
            goto LABEL_17;
          }
          goto LABEL_19;
        case 4:
          int v14 = *(_DWORD *)a1;
          if (v10 < 4) {
LABEL_17:
          }
            unsigned int v11 = (v14 | (v12 << (8 * v10))) + 3;
          else {
LABEL_19:
          }
            unsigned int v11 = v14 + 3;
          break;
        default:
          break;
      }
    }
    uint64_t v15 = ~v7;
    if (v11 != 2)
    {
      if (v11 == 1)
      {
        uint64_t v16 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v16(a1, AssociatedTypeWitness);
        v16((unsigned __int8 *)((unint64_t)&a1[v8] & v15), AssociatedTypeWitness);
        v16((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v15)) & v15), AssociatedTypeWitness);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
      }
    }
    unsigned int v17 = a2[v10];
    unsigned int v18 = v17 - 3;
    if (v17 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v19 = v10;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          if (v10 >= 4) {
            goto LABEL_40;
          }
          goto LABEL_34;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          if (v10 >= 4) {
            goto LABEL_40;
          }
          goto LABEL_34;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v10 < 4) {
            goto LABEL_34;
          }
          goto LABEL_40;
        case 4:
          int v20 = *(_DWORD *)a2;
          if (v10 < 4)
          {
LABEL_34:
            unsigned int v17 = (v20 | (v18 << (8 * v10))) + 3;
            break;
          }
LABEL_40:
          unsigned int v17 = v20 + 3;
          if (v17 == 2) {
            goto LABEL_41;
          }
          goto LABEL_36;
        default:
          break;
      }
    }
    if (v17 == 2)
    {
LABEL_41:
      *(void *)a1 = *(void *)a2;
      char v30 = 2;
    }
    else
    {
LABEL_36:
      if (v17 == 1)
      {
        unint64_t v21 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16);
        v21(a1, a2, AssociatedTypeWitness);
        unint64_t v22 = (unint64_t)&a2[v8] & v15;
        v21((unsigned __int8 *)((unint64_t)&a1[v8] & v15), (unsigned __int8 *)v22, AssociatedTypeWitness);
        unint64_t v23 = (v8 + v22) & v15;
        v21((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v15)) & v15), (unsigned __int8 *)v23, AssociatedTypeWitness);
        long long v24 = (void *)((v9 + v23) & 0xFFFFFFFFFFFFFFF8);
        long long v25 = (void *)((v9 + ((v8 + ((unint64_t)&a1[v8] & v15)) & v15)) & 0xFFFFFFFFFFFFFFF8);
        void *v25 = *v24;
        unint64_t v26 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v27 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
        long long v29 = *(_OWORD *)v27;
        long long v28 = *(_OWORD *)(v27 + 16);
        *(unsigned char *)(v26 + 32) = *(unsigned char *)(v27 + 32);
        *(_OWORD *)unint64_t v26 = v29;
        *(_OWORD *)(v26 + 16) = v28;
        char v30 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        char v30 = 0;
      }
    }
    a1[v10] = v30;
  }
  return a1;
}

void *initializeWithTake for AnimatedValueTrack<A>.VectorPath.Element(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  unint64_t v9 = v6 + 7;
  if (((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33 > v6) {
    unint64_t v6 = ((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33;
  }
  if (v6 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v6;
  }
  unsigned int v11 = a2[v10];
  unsigned int v12 = v11 - 3;
  if (v11 >= 3)
  {
    if (v10 <= 3) {
      uint64_t v13 = v10;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a2;
        goto LABEL_15;
      case 2:
        int v14 = *(unsigned __int16 *)a2;
        goto LABEL_15;
      case 3:
        int v14 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_15;
      case 4:
        int v14 = *(_DWORD *)a2;
LABEL_15:
        int v15 = (v14 | (v12 << (8 * v10))) + 3;
        unsigned int v11 = v14 + 3;
        if (v10 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  if (v11 == 2)
  {
    *a1 = *(void *)a2;
    char v26 = 2;
  }
  else if (v11 == 1)
  {
    uint64_t v16 = ~v7;
    unsigned int v17 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 32);
    v17(a1, a2, AssociatedTypeWitness);
    unint64_t v18 = (unint64_t)&a2[v8] & v16;
    v17((void *)(((unint64_t)a1 + v8) & v16), (unsigned __int8 *)v18, AssociatedTypeWitness);
    unint64_t v19 = (v8 + v18) & v16;
    v17((void *)((v8 + (((unint64_t)a1 + v8) & v16)) & v16), (unsigned __int8 *)v19, AssociatedTypeWitness);
    int v20 = (void *)((v9 + v19) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v21 = (void *)((v9 + ((v8 + (((unint64_t)a1 + v8) & v16)) & v16)) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v21 = *v20;
    unint64_t v22 = ((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = ((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    long long v25 = *(_OWORD *)v23;
    long long v24 = *(_OWORD *)(v23 + 16);
    *(unsigned char *)(v22 + 32) = *(unsigned char *)(v23 + 32);
    *(_OWORD *)unint64_t v22 = v25;
    *(_OWORD *)(v22 + 16) = v24;
    char v26 = 1;
  }
  else
  {
    (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
    char v26 = 0;
  }
  *((unsigned char *)a1 + v10) = v26;
  return a1;
}

unsigned __int8 *assignWithTake for AnimatedValueTrack<A>.VectorPath.Element(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v8 = v6 + v7;
    unint64_t v9 = v6 + 7;
    if (((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 33 > v6) {
      unint64_t v6 = ((((v6 + 7 + ((v6 + v7 + ((v6 + v7) & ~v7)) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
    }
         + 33;
    if (v6 <= 8) {
      uint64_t v10 = 8;
    }
    else {
      uint64_t v10 = v6;
    }
    unsigned int v11 = a1[v10];
    unsigned int v12 = v11 - 3;
    if (v11 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v13 = v10;
      }
      else {
        uint64_t v13 = 4;
      }
      switch(v13)
      {
        case 1:
          int v14 = *a1;
          if (v10 < 4) {
            goto LABEL_17;
          }
          goto LABEL_19;
        case 2:
          int v14 = *(unsigned __int16 *)a1;
          if (v10 >= 4) {
            goto LABEL_19;
          }
          goto LABEL_17;
        case 3:
          int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v10 < 4) {
            goto LABEL_17;
          }
          goto LABEL_19;
        case 4:
          int v14 = *(_DWORD *)a1;
          if (v10 < 4) {
LABEL_17:
          }
            unsigned int v11 = (v14 | (v12 << (8 * v10))) + 3;
          else {
LABEL_19:
          }
            unsigned int v11 = v14 + 3;
          break;
        default:
          break;
      }
    }
    uint64_t v15 = ~v7;
    if (v11 != 2)
    {
      if (v11 == 1)
      {
        uint64_t v16 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v16(a1, AssociatedTypeWitness);
        v16((unsigned __int8 *)((unint64_t)&a1[v8] & v15), AssociatedTypeWitness);
        v16((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v15)) & v15), AssociatedTypeWitness);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
      }
    }
    unsigned int v17 = a2[v10];
    unsigned int v18 = v17 - 3;
    if (v17 >= 3)
    {
      if (v10 <= 3) {
        uint64_t v19 = v10;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          if (v10 >= 4) {
            goto LABEL_40;
          }
          goto LABEL_34;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          if (v10 >= 4) {
            goto LABEL_40;
          }
          goto LABEL_34;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v10 < 4) {
            goto LABEL_34;
          }
          goto LABEL_40;
        case 4:
          int v20 = *(_DWORD *)a2;
          if (v10 < 4)
          {
LABEL_34:
            unsigned int v17 = (v20 | (v18 << (8 * v10))) + 3;
            break;
          }
LABEL_40:
          unsigned int v17 = v20 + 3;
          if (v17 == 2) {
            goto LABEL_41;
          }
          goto LABEL_36;
        default:
          break;
      }
    }
    if (v17 == 2)
    {
LABEL_41:
      *(void *)a1 = *(void *)a2;
      char v30 = 2;
    }
    else
    {
LABEL_36:
      if (v17 == 1)
      {
        unint64_t v21 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32);
        v21(a1, a2, AssociatedTypeWitness);
        unint64_t v22 = (unint64_t)&a2[v8] & v15;
        v21((unsigned __int8 *)((unint64_t)&a1[v8] & v15), (unsigned __int8 *)v22, AssociatedTypeWitness);
        unint64_t v23 = (v8 + v22) & v15;
        v21((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v15)) & v15), (unsigned __int8 *)v23, AssociatedTypeWitness);
        long long v24 = (void *)((v9 + v23) & 0xFFFFFFFFFFFFFFF8);
        long long v25 = (void *)((v9 + ((v8 + ((unint64_t)&a1[v8] & v15)) & v15)) & 0xFFFFFFFFFFFFFFF8);
        void *v25 = *v24;
        unint64_t v26 = ((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v27 = ((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8;
        long long v29 = *(_OWORD *)v27;
        long long v28 = *(_OWORD *)(v27 + 16);
        *(unsigned char *)(v26 + 32) = *(unsigned char *)(v27 + 32);
        *(_OWORD *)unint64_t v26 = v29;
        *(_OWORD *)(v26 + 16) = v28;
        char v30 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        char v30 = 0;
      }
    }
    a1[v10] = v30;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AnimatedValueTrack<A>.VectorPath.Element(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  unint64_t v6 = ((((v5
         + ((v5
           + *(unsigned __int8 *)(v4 + 80)
           + ((v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 33;
  if (v6 > v5) {
    unint64_t v5 = v6;
  }
  uint64_t v7 = 8;
  if (v5 > 8) {
    uint64_t v7 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_24;
  }
  uint64_t v8 = v7 + 1;
  char v9 = 8 * (v7 + 1);
  if ((v7 + 1) <= 3)
  {
    unsigned int v12 = ((a2 + ~(-1 << v9) - 253) >> v9) + 1;
    if (HIWORD(v12))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v12 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_24;
      }
      goto LABEL_16;
    }
    if (v12 < 2)
    {
LABEL_24:
      unsigned int v14 = *((unsigned __int8 *)a1 + v7);
      if (v14 >= 3) {
        return (v14 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_24;
  }
LABEL_16:
  int v13 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v13 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v8 | v13) + 254;
}

void storeEnumTagSinglePayload for AnimatedValueTrack<A>.VectorPath.Element(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  unint64_t v8 = ((((v7
         + ((v7
           + *(unsigned __int8 *)(v6 + 80)
           + ((v7 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 33;
  if (v8 > v7) {
    unint64_t v7 = v8;
  }
  if (v7 <= 8) {
    unint64_t v7 = 8;
  }
  size_t v9 = v7 + 1;
  if (a3 < 0xFE)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 253) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v11 = a2 - 254;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v7 != -1)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_36:
        __break(1u);
        JUMPOUT(0x1879BF1ECLL);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_24;
      case 3:
        goto LABEL_36;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_25;
      default:
LABEL_24:
        if (a2) {
LABEL_25:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for AnimatedValueTrack<A>.VectorPath.Element(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  unint64_t v4 = ((((v3
         + ((v3
           + *(unsigned __int8 *)(v2 + 80)
           + ((v3 + *(unsigned __int8 *)(v2 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))
         + 7) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 33;
  if (v4 > v3) {
    unint64_t v3 = v4;
  }
  if (v3 <= 8) {
    unint64_t v3 = 8;
  }
  uint64_t result = a1[v3];
  if (result >= 3)
  {
    if (v3 <= 3) {
      uint64_t v6 = v3;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_14;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_14:
        unsigned int v8 = (v7 | ((result - 3) << (8 * v3))) + 3;
        unsigned int v9 = v7 + 3;
        if (v3 >= 4) {
          uint64_t result = v9;
        }
        else {
          uint64_t result = v8;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void destructiveInjectEnumTag for AnimatedValueTrack<A>.VectorPath.Element(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  unint64_t v6 = ((((v5
         + 7
         + ((v5
           + *(unsigned __int8 *)(v4 + 80)
           + ((v5 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8)
     + 33;
  if (a2 > 2)
  {
    if (v6 > v5) {
      unint64_t v5 = v6;
    }
    if (v5 <= 8) {
      size_t v7 = 8;
    }
    else {
      size_t v7 = v5;
    }
    unsigned int v8 = a2 - 3;
    if (v7 < 4)
    {
      unsigned int v9 = v8 >> (8 * v7);
      int v10 = v8 & ~(-1 << (8 * v7));
      a1[v7] = v9 + 3;
      bzero(a1, v7);
      if (v7 == 3)
      {
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
      }
      else if (v7 == 2)
      {
        *(_WORD *)a1 = v10;
      }
      else
      {
        *a1 = v10;
      }
    }
    else
    {
      a1[v7] = 3;
      bzero(a1, v7);
      *(_DWORD *)a1 = v8;
    }
  }
  else
  {
    if (v6 > v5) {
      unint64_t v5 = v6;
    }
    if (v5 <= 8) {
      unint64_t v5 = 8;
    }
    a1[v5] = a2;
  }
}

unint64_t implicit closure #1 in PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher.updateValue()()
{
  return 0xD00000000000001CLL;
}

unint64_t implicit closure #2 in OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.updateValue()()
{
  return 0xD000000000000019;
}

void protocol witness for ViewModifier.body(content:) in conformance OnScrollVisibilityGeometryAction()
{
}

uint64_t sub_1879BF584()
{
  return swift_getWitnessTable();
}

uint64_t sub_1879BF618()
{
  return swift_getWitnessTable();
}

uint64_t assignWithTake for OnScrollVisibilityChangeModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t partial apply for closure #2 in ScrollTargetVisibilityChangeModifier.body(content:)()
{
  return closure #1 in ScrollTargetVisibilityChangeModifier.body(content:)(v0 + 32);
}

uint64_t partial apply for closure #2 in OnScrollVisibilityChangeModifier.body(content:)()
{
  return closure #1 in OnScrollVisibilityChangeModifier.body(content:)(v0 + 16);
}

uint64_t assignWithTake for PrimitiveTargetVisibilityModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t assignWithTake for OnScrollVisibilityGeometryAction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t sub_1879BF7C0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1879BF904()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier>, _AppearanceActionModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<OnScrollVisibilityChangeModifier>, OnScrollVisibilityGeometryAction>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
}

_UNKNOWN **base witness table accessor for ViewModifier in OnScrollVisibilityGeometryAction()
{
  return &protocol witness table for OnScrollVisibilityGeometryAction;
}

uint64_t sub_1879BF960()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 53)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 52) = 0;
    *(_DWORD *)(result + 48) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 53) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 53) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder()
{
  return &unk_1ED45D148;
}

uint64_t destroy for PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PrimitiveTargetVisibilityModifier.VisibilityActionDispatcher(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 12) = *(void *)(a2 + 12);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1879BFB3C()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t CircularProgressViewStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = KeyPath;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  return result;
}

void static CircularProgressViewStyle.Size.== infix(_:_:)()
{
}

void CircularProgressViewStyle.Size.hash(into:)()
{
}

void CircularProgressViewStyle.Size.hashValue.getter()
{
}

void CircularProgressViewStyle.init(size:)()
{
}

uint64_t CircularProgressViewStyle.init(tint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = KeyPath;
  *(unsigned char *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = result;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = a1;
  return result;
}

uint64_t CircularProgressViewStyle.makeBody(configuration:)(uint64_t a1)
{
  type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>(0);
  MEMORY[0x1F4188790](v3);
  int v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v6 = v1[1];
  long long v10 = *v1;
  long long v11 = v6;
  uint64_t v12 = *((void *)v1 + 4);
  *(void *)int v5 = static HorizontalAlignment.center.getter();
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>();
  closure #1 in CircularProgressViewStyle.makeBody(configuration:)(a1, (uint64_t)&v5[*(int *)(v7 + 44)]);
  Spacing.init()();
  v9[0] = v9[1];
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>> and conformance VStack<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>> and conformance VStack<A>, type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>);
  View.spacing(_:)();
  swift_bridgeObjectRelease();
  return outlined destroy of VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>((uint64_t)v5);
}

unint64_t lazy protocol witness table accessor for type CircularProgressViewStyle.Size and conformance CircularProgressViewStyle.Size()
{
  unint64_t result = lazy protocol witness table cache variable for type CircularProgressViewStyle.Size and conformance CircularProgressViewStyle.Size;
  if (!lazy protocol witness table cache variable for type CircularProgressViewStyle.Size and conformance CircularProgressViewStyle.Size)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularProgressViewStyle.Size and conformance CircularProgressViewStyle.Size);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CircularProgressViewStyle.Size(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1879BFEDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CircularProgressViewStyle.Size()
{
  return &type metadata for CircularProgressViewStyle.Size;
}

uint64_t sub_1879BFF14()
{
  return swift_getOpaqueTypeConformance2();
}

void Toggle<>.init(_:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v18 = *(unsigned char *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = *(void **)(a1 + 72);
  if (v7) {
    uint64_t v9 = *(void *)(a1 + 48);
  }
  else {
    uint64_t v9 = 0;
  }
  if (v7) {
    uint64_t v10 = *(void *)(a1 + 56);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v14 = v10;
  if (v7) {
    uint64_t v11 = *(void *)(a1 + 64) & 1;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v7) {
    uint64_t v12 = *(void *)(a1 + 80);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v17 = v12;
  if (v7) {
    uint64_t v13 = *(void *)(a1 + 88);
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v15 = v9;
  uint64_t v16 = v13;
  swift_retain_n();
  swift_retain_n();
  outlined copy of ToggleStyleConfiguration.Effect(v6, v5, v8, v7);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v6, v5, v8, v7);
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v15, v14, v11, v7);
  swift_release();
  swift_release();
  *(void *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 16) = v18;
  *(void *)(a2 + 24) = v15;
  *(void *)(a2 + 32) = v14;
  *(void *)(a2 + 40) = v11;
  *(void *)(a2 + 48) = v7;
  *(void *)(a2 + 56) = v17;
  *(void *)(a2 + 64) = v16;
  swift_release();
  swift_release();
  outlined consume of ToggleStyleConfiguration.Effect(v15, v14, v11, v7);
}

uint64_t Toggle.init<A>(isOn:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>)
{
  uint64_t v14 = *(void *)(a4 - 8);
  double v15 = MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v20 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v17, a1, v18, v15);
  Toggle.init<A>(toggledOn:label:)((uint64_t)v17, a2, a3, a4, a5, *(void *)(*(void *)(a6 + 8) + 8), a7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a4);
}

uint64_t Toggle.init<A>(sources:isOn:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  uint64_t v26 = a8;
  uint64_t v27 = a7;
  uint64_t v25 = a5;
  int v31 = a3;
  uint64_t v32 = a4;
  uint64_t v33 = a1;
  char v30 = a9;
  uint64_t v29 = *(void *)(*(void *)(a8 + 8) + 8);
  uint64_t v12 = *(void *)(v29 + 8);
  uint64_t v13 = type metadata accessor for LazySequence();
  uint64_t v28 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  double v15 = (char *)&v25 - v14;
  uint64_t v16 = type metadata accessor for LazyMapSequence();
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v25 - v18;
  MEMORY[0x18C115A70](a6, v12, v17);
  uint64_t v20 = (void *)swift_allocObject();
  v20[2] = a5;
  v20[3] = a6;
  uint64_t v21 = v26;
  uint64_t v22 = v27;
  v20[4] = v27;
  v20[5] = v21;
  v20[6] = a2;
  swift_retain();
  swift_getWitnessTable();
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v13);
  uint64_t v34 = v29;
  uint64_t WitnessTable = swift_getWitnessTable();
  Toggle.init<A>(toggledOn:label:)((uint64_t)v19, v31, v25, v16, v22, WitnessTable, v30);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(v33, a6);
}

uint64_t sub_1879C0518()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Toggle.init<A>(sources:isOn:label:)()
{
  return swift_getAtKeyPath();
}

uint64_t closure #2 in Toggle.init<A>(toggledOn:label:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  double v14 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v16 = &v19[-v15];
  int v17 = *a1;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a4, a6, v14);
  dispatch thunk of Sequence.makeIterator()();
  swift_getAssociatedConformanceWitness();
  dispatch thunk of IteratorProtocol.next()();
  while (v20)
  {
    v19[8] = v17 == 0;
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release_n();
    swift_release_n();
    dispatch thunk of IteratorProtocol.next()();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
}

double Toggle<>.init(_:isOn:)@<D0>(uint64_t a1@<X4>, uint64_t a2@<X5>, char a3@<W6>, uint64_t a4@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Binding<Bool>>, MEMORY[0x1E4FBBE00]);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_18834BB80;
  *(void *)(v8 + 32) = a1;
  *(void *)(v8 + 40) = a2;
  *(unsigned char *)(v8 + 48) = a3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v18 = v9;
  uint64_t v11 = v10;
  char v13 = v12;
  double v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v8;
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v8;
  swift_bridgeObjectRetain();
  Binding.init(get:set:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a4 = v19;
  *(void *)(a4 + 8) = v20;
  *(unsigned char *)(a4 + 16) = v21;
  *(void *)(a4 + 24) = v17;
  *(void *)(a4 + 32) = v11;
  *(unsigned char *)(a4 + 40) = v13 & 1;
  *(void *)(a4 + 48) = v18;
  double result = 0.0;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 88) = 0u;
  return result;
}

__n128 Toggle<>.init<A>(_:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Binding<Bool>>, MEMORY[0x1E4FBBE00]);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18834BB80;
  *(void *)(v12 + 32) = a2;
  *(void *)(v12 + 40) = a3;
  *(unsigned char *)(v12 + 48) = a4;
  memset((char *)v28 + 8, 0, 48);
  swift_retain();
  swift_retain();
  closure #1 in Toggle<>.init<A>(_:isOn:)(a1, (uint64_t)v26);
  char v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = v12;
  double v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v12;
  swift_bridgeObjectRetain();
  Binding.init(get:set:)();
  swift_release();
  swift_release();
  uint64_t v15 = v26[0];
  uint64_t v16 = v26[1];
  char v17 = v27;
  long long v21 = v28[1];
  long long v22 = v28[0];
  __n128 v20 = (__n128)v28[2];
  uint64_t v18 = *(void *)&v28[3];
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  *(void *)a6 = v23;
  *(void *)(a6 + 8) = v24;
  *(unsigned char *)(a6 + 16) = v25;
  *(void *)(a6 + 24) = v15;
  *(void *)(a6 + 32) = v16;
  *(unsigned char *)(a6 + 40) = v17;
  *(_OWORD *)(a6 + 48) = v22;
  *(_OWORD *)(a6 + 64) = v21;
  __n128 result = v20;
  *(__n128 *)(a6 + 80) = v20;
  *(void *)(a6 + 96) = v18;
  return result;
}

uint64_t closure #1 in Toggle<>.init<A>(_:isOn:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

__n128 Toggle<>.init<A>(_:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = *(void *)(a6 - 8);
  double v17 = MEMORY[0x1F4188790](a1);
  uint64_t v19 = &v30[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v16 + 16))(v19, v20, v21, v17);
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  char v33 = a3;
  uint64_t v34 = a4;
  Toggle.init<A>(isOn:label:)((uint64_t)v19, (void (*)(void))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), MEMORY[0x1E4F41420], a6, MEMORY[0x1E4F41418], a7, v35);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a5, a6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v22 = v35[1];
  char v23 = v36;
  char v24 = v38;
  uint64_t v25 = v39;
  __n128 result = v37;
  long long v27 = v40;
  long long v28 = v41;
  long long v29 = v42;
  *(void *)a8 = v35[0];
  *(void *)(a8 + 8) = v22;
  *(unsigned char *)(a8 + 16) = v23;
  *(__n128 *)(a8 + 24) = result;
  *(unsigned char *)(a8 + 40) = v24;
  *(void *)(a8 + 48) = v25;
  *(_OWORD *)(a8 + 56) = v27;
  *(_OWORD *)(a8 + 72) = v28;
  *(_OWORD *)(a8 + 88) = v29;
  return result;
}

__n128 Toggle<>.init<A>(_:sources:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v32 = a8;
  uint64_t v17 = *(void *)(a7 - 8);
  double v18 = MEMORY[0x1F4188790](a1);
  uint64_t v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, v21, v22, v18);
  uint64_t v34 = a1;
  uint64_t v35 = a2;
  char v36 = a3;
  uint64_t v37 = a4;
  Toggle.init<A>(sources:isOn:label:)((uint64_t)v20, a6, (void (*)(void))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v33, MEMORY[0x1E4F41420], a7, MEMORY[0x1E4F41418], v32, v38);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a5, a7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = v38[1];
  char v24 = v39;
  char v25 = v41;
  uint64_t v26 = v42;
  __n128 result = v40;
  long long v28 = v43;
  long long v29 = v44;
  long long v30 = v45;
  *(void *)a9 = v38[0];
  *(void *)(a9 + 8) = v23;
  *(unsigned char *)(a9 + 16) = v24;
  *(__n128 *)(a9 + 24) = result;
  *(unsigned char *)(a9 + 40) = v25;
  *(void *)(a9 + 48) = v26;
  *(_OWORD *)(a9 + 56) = v28;
  *(_OWORD *)(a9 + 72) = v29;
  *(_OWORD *)(a9 + 88) = v30;
  return result;
}

__n128 Toggle<>.init<A, B>(_:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = *(void *)(a4 - 8);
  double v15 = MEMORY[0x1F4188790](a1);
  uint64_t v17 = &v26[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, double))(v14 + 16))(v17, v15);
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v30 = a6;
  uint64_t v31 = a1;
  Toggle.init<A>(isOn:label:)((uint64_t)v17, (void (*)(void))partial apply for closure #1 in Toggle<>.init<A, B>(_:isOn:), MEMORY[0x1E4F41420], a4, MEMORY[0x1E4F41418], a6, v32);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  uint64_t v18 = v32[1];
  char v19 = v33;
  char v20 = v35;
  uint64_t v21 = v36;
  __n128 result = v34;
  long long v23 = v37;
  long long v24 = v38;
  long long v25 = v39;
  *(void *)a7 = v32[0];
  *(void *)(a7 + 8) = v18;
  *(unsigned char *)(a7 + 16) = v19;
  *(__n128 *)(a7 + 24) = result;
  *(unsigned char *)(a7 + 40) = v20;
  *(void *)(a7 + 48) = v21;
  *(_OWORD *)(a7 + 56) = v23;
  *(_OWORD *)(a7 + 72) = v24;
  *(_OWORD *)(a7 + 88) = v25;
  return result;
}

__n128 Toggle<>.init<A, B>(_:sources:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16 = *(void *)(a5 - 8);
  double v17 = MEMORY[0x1F4188790](a1);
  char v19 = &v28[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(unsigned char *, double))(v16 + 16))(v19, v17);
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v31 = a6;
  uint64_t v32 = a7;
  uint64_t v33 = a1;
  Toggle.init<A>(sources:isOn:label:)((uint64_t)v19, a3, (void (*)(void))partial apply for closure #1 in Toggle<>.init<A, B>(_:isOn:), (uint64_t)v28, MEMORY[0x1E4F41420], a5, MEMORY[0x1E4F41418], a7, v34);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a2, a5);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
  uint64_t v20 = v34[1];
  char v21 = v35;
  char v22 = v37;
  uint64_t v23 = v38;
  __n128 result = v36;
  long long v25 = v39;
  long long v26 = v40;
  long long v27 = v41;
  *(void *)a8 = v34[0];
  *(void *)(a8 + 8) = v20;
  *(unsigned char *)(a8 + 16) = v21;
  *(__n128 *)(a8 + 24) = result;
  *(unsigned char *)(a8 + 40) = v22;
  *(void *)(a8 + 48) = v23;
  *(_OWORD *)(a8 + 56) = v25;
  *(_OWORD *)(a8 + 72) = v26;
  *(_OWORD *)(a8 + 88) = v27;
  return result;
}

uint64_t closure #1 in Toggle<>.init<A, B>(_:isOn:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

double Toggle<>.init(_:image:isOn:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>)
{
  long long v44 = a5;
  uint64_t v45 = a2;
  uint64_t v37 = a4;
  LODWORD(v41) = a3;
  uint64_t v40 = a1;
  uint64_t v14 = type metadata accessor for ImageResource();
  uint64_t v36 = *(void *)(v14 - 8);
  uint64_t v15 = v36;
  MEMORY[0x1F4188790](v14);
  double v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v35 - v19;
  type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Binding<Bool>>, MEMORY[0x1E4FBBE00]);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_18834BB80;
  uint64_t v42 = a7;
  uint64_t v43 = a6;
  *(void *)(v21 + 32) = a6;
  *(void *)(v21 + 40) = a7;
  *(unsigned char *)(v21 + 48) = a8;
  char v22 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v22(v20, a5, v14);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v40 = v24;
  uint64_t v41 = v23;
  uint64_t v39 = v25;
  LOBYTE(v46) = v26 & 1;
  v22(v17, v20, v14);
  uint64_t v38 = Image.init(_:)();
  long long v27 = *(void (**)(char *, uint64_t))(v36 + 8);
  v27(v20, v14);
  LOBYTE(v17) = v46;
  uint64_t v28 = (void *)swift_allocObject();
  v28[2] = 0;
  v28[3] = 0;
  _OWORD v28[4] = v21;
  uint64_t v29 = (void *)swift_allocObject();
  v29[2] = 0;
  v29[3] = 0;
  v29[4] = v21;
  swift_bridgeObjectRetain();
  Binding.init(get:set:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v30 = v46;
  uint64_t v31 = v47;
  LOBYTE(a7) = v48;
  v27(v44, v14);
  *(void *)a9 = v30;
  *(void *)(a9 + 8) = v31;
  *(unsigned char *)(a9 + 16) = a7;
  uint64_t v32 = v40;
  *(void *)(a9 + 24) = v41;
  *(void *)(a9 + 32) = v32;
  *(unsigned char *)(a9 + 40) = (_BYTE)v17;
  uint64_t v33 = v38;
  *(void *)(a9 + 48) = v39;
  *(void *)(a9 + 56) = v33;
  double result = 0.0;
  *(_OWORD *)(a9 + 64) = 0u;
  *(_OWORD *)(a9 + 80) = 0u;
  *(_OWORD *)(a9 + 96) = 0u;
  return result;
}

__n128 Toggle<>.init<A>(_:image:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<Binding<Bool>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Binding<Bool>>, MEMORY[0x1E4FBBE00]);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_18834BB80;
  *(void *)(v14 + 32) = a3;
  *(void *)(v14 + 40) = a4;
  *(unsigned char *)(v14 + 48) = a5;
  long long v36 = 0u;
  __n128 v35 = 0u;
  long long v34 = 0u;
  swift_retain();
  swift_retain();
  closure #1 in Toggle<>.init<A>(_:image:isOn:)(a1, a2, a6, (uint64_t)v31);
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = 0;
  v15[3] = 0;
  v15[4] = v14;
  uint64_t v16 = (void *)swift_allocObject();
  v16[2] = 0;
  v16[3] = 0;
  v16[4] = v14;
  swift_bridgeObjectRetain();
  Binding.init(get:set:)();
  swift_release();
  swift_release();
  uint64_t v17 = v31[0];
  uint64_t v18 = v31[1];
  char v19 = v32;
  __n128 v24 = v35;
  long long v25 = v34;
  long long v20 = v36;
  uint64_t v21 = type metadata accessor for ImageResource();
  long long v23 = v33;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(a2, v21);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  *(void *)a7 = v28;
  *(void *)(a7 + 8) = v29;
  *(unsigned char *)(a7 + 16) = v30;
  *(void *)(a7 + 24) = v17;
  *(void *)(a7 + 32) = v18;
  *(unsigned char *)(a7 + 40) = v19;
  *(_OWORD *)(a7 + 48) = v23;
  *(_OWORD *)(a7 + 64) = v25;
  __n128 result = v24;
  *(__n128 *)(a7 + 80) = v24;
  *(_OWORD *)(a7 + 96) = v20;
  return result;
}

__n128 closure #1 in Toggle<>.init<A>(_:image:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ImageResource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, a1, a3, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v15, (uint64_t)v11, a3, (uint64_t)&v19);
  char v17 = v20;
  __n128 result = v21;
  *(_OWORD *)a4 = v19;
  *(unsigned char *)(a4 + 16) = v17;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

__n128 Toggle<>.init<A>(_:image:sources:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v37 = a7;
  uint64_t v18 = *(void *)(a8 - 8);
  uint64_t v36 = a10;
  double v19 = MEMORY[0x1F4188790](a1);
  __n128 v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, v22, v23, v19);
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  char v41 = a3;
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  type metadata accessor for Label<Text, Image>();
  uint64_t v25 = v24;
  unint64_t v26 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Toggle.init<A>(sources:isOn:label:)((uint64_t)v21, v37, (void (*)(void))partial apply for closure #1 in Toggle<>.init<A>(_:image:sources:isOn:), (uint64_t)v38, v25, a8, v26, v36, v44);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a6, a8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(a5, v27);
  uint64_t v28 = v44[1];
  char v29 = v45;
  char v30 = v47;
  __n128 result = v46;
  long long v32 = v48;
  long long v33 = v49;
  long long v34 = v50;
  long long v35 = v51;
  *(void *)a9 = v44[0];
  *(void *)(a9 + 8) = v28;
  *(unsigned char *)(a9 + 16) = v29;
  *(__n128 *)(a9 + 24) = result;
  *(unsigned char *)(a9 + 40) = v30;
  *(_OWORD *)(a9 + 48) = v32;
  *(_OWORD *)(a9 + 64) = v33;
  *(_OWORD *)(a9 + 80) = v34;
  *(_OWORD *)(a9 + 96) = v35;
  return result;
}

uint64_t closure #1 in Toggle<>.init<A>(_:image:sources:isOn:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  LODWORD(v25) = a2;
  uint64_t v24 = a1;
  uint64_t v6 = type metadata accessor for ImageResource();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  double v13 = (char *)&v24 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v14((char *)&v24 - v12, a3, v6, v11);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v24 = v16;
  uint64_t v25 = v15;
  uint64_t v18 = v17;
  char v26 = v19 & 1;
  ((void (*)(char *, char *, uint64_t))v14)(v9, v13, v6);
  uint64_t v20 = Image.init(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  char v22 = v26;
  uint64_t v23 = v24;
  *(void *)a4 = v25;
  *(void *)(a4 + 8) = v23;
  *(unsigned char *)(a4 + 16) = v22;
  *(void *)(a4 + 24) = v18;
  *(void *)(a4 + 32) = v20;
  return result;
}

__n128 Toggle<>.init<A, B>(_:image:sources:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v36 = a4;
  uint64_t v17 = *(void *)(a6 - 8);
  double v18 = MEMORY[0x1F4188790](a1);
  uint64_t v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, v21, v22, v18);
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v40 = a7;
  uint64_t v41 = a8;
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  type metadata accessor for Label<Text, Image>();
  uint64_t v24 = v23;
  unint64_t v25 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Toggle.init<A>(sources:isOn:label:)((uint64_t)v20, v36, (void (*)(void))partial apply for closure #1 in Toggle<>.init<A, B>(_:image:sources:isOn:), (uint64_t)v37, v24, a6, v25, a8, v44);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a3, a6);
  uint64_t v26 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(a2, v26);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
  uint64_t v27 = v44[1];
  char v28 = v45;
  char v29 = v47;
  __n128 result = v46;
  long long v31 = v48;
  long long v32 = v49;
  long long v33 = v50;
  long long v34 = v51;
  *(void *)a9 = v44[0];
  *(void *)(a9 + 8) = v27;
  *(unsigned char *)(a9 + 16) = v28;
  *(__n128 *)(a9 + 24) = result;
  *(unsigned char *)(a9 + 40) = v29;
  *(_OWORD *)(a9 + 48) = v31;
  *(_OWORD *)(a9 + 64) = v32;
  *(_OWORD *)(a9 + 80) = v33;
  *(_OWORD *)(a9 + 96) = v34;
  return result;
}

__n128 closure #1 in Toggle<>.init<A, B>(_:image:sources:isOn:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ImageResource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  double v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, a1, a3, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v15, (uint64_t)v11, a3, (uint64_t)&v19);
  char v17 = v20;
  __n128 result = v21;
  *(_OWORD *)a4 = v19;
  *(unsigned char *)(a4 + 16) = v17;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

uint64_t Toggle.init(isOn:lnAction:label:)@<X0>(char a1@<W0>, void *a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X8>)
{
  return Toggle.init(isOn:lnAction:perform:label:)(a1, a2, (uint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, a3, a4);
}

uint64_t Toggle.init(isOn:lnAction:perform:label:)@<X0>(char a1@<W0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9 = a6 + *(int *)(type metadata accessor for Toggle() + 40);
  *(_OWORD *)(v9 + 16) = 0u;
  *(_OWORD *)(v9 + 32) = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  uint64_t KeyPath = swift_getKeyPath();
  id v11 = a2;
  uint64_t v12 = swift_retain();
  a5(v12);
  uint64_t v13 = *(void *)v9;
  uint64_t v14 = *(void *)(v9 + 8);
  uint64_t v16 = *(void *)(v9 + 16);
  uint64_t v15 = *(void **)(v9 + 24);
  id v19 = v11;
  swift_retain();
  swift_retain();
  outlined consume of ToggleStyleConfiguration.Effect(v13, v14, v16, v15);
  *(void *)uint64_t v9 = KeyPath;
  *(void *)(v9 + 8) = 0;
  *(void *)(v9 + 16) = 0;
  *(void *)(v9 + 24) = v11;
  *(void *)(v9 + 32) = a3;
  *(void *)(v9 + 40) = a4;
  type metadata accessor for LocationBox<AppIntentExecutingLocation<ToggleState>>();
  swift_allocObject();
  uint64_t v17 = LocationBox.init(_:)();

  uint64_t result = swift_release();
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = v17;
  *(unsigned char *)(a6 + 16) = (a1 & 1) == 0;
  return result;
}

uint64_t partial apply for specialized closure #1 in Toggle.init<A>(toggledOn:label:)()
{
  return specialized closure #1 in Toggle.init<A>(toggledOn:label:)();
}

uint64_t partial apply for specialized closure #2 in Toggle.init<A>(toggledOn:label:)(unsigned __int8 *a1)
{
  return specialized closure #2 in Toggle.init<A>(toggledOn:label:)(*a1, *(void *)(v1 + 32));
}

uint64_t partial apply for closure #1 in Toggle<>.init<A, B>(_:isOn:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Toggle<>.init<A, B>(_:isOn:)(*(void *)(v1 + 48), a1);
}

uint64_t specialized closure #1 in Toggle.init<A>(toggledOn:label:)()
{
  return static ToggleState.stateFor<A, B>(item:in:)();
}

uint64_t partial apply for closure #1 in Toggle<>.init<A>(_:image:sources:isOn:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Toggle<>.init<A>(_:image:sources:isOn:)(*(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 48), a1);
}

void type metadata accessor for Label<Text, Image>()
{
  if (!lazy cache variable for type metadata for Label<Text, Image>)
  {
    unint64_t v0 = type metadata accessor for Label();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Label<Text, Image>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>;
  if (!lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>)
  {
    type metadata accessor for Label<Text, Image>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Label<Text, Image> and conformance Label<A, B>);
  }
  return result;
}

double partial apply for closure #1 in Toggle<>.init<A, B>(_:image:sources:isOn:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = closure #1 in Toggle<>.init<A, B>(_:image:sources:isOn:)(v1[6], v1[7], v1[2], a1).n128_u64[0];
  return result;
}

void type metadata accessor for LocationBox<AppIntentExecutingLocation<ToggleState>>()
{
  if (!lazy cache variable for type metadata for LocationBox<AppIntentExecutingLocation<ToggleState>>)
  {
    _s7SwiftUI7BindingVySbGMaTm_2(255, &lazy cache variable for type metadata for AppIntentExecutingLocation<ToggleState>, MEMORY[0x1E4F3F540], (uint64_t (*)(void, uint64_t))type metadata accessor for AppIntentExecutingLocation);
    lazy protocol witness table accessor for type AppIntentExecutingLocation<ToggleState> and conformance AppIntentExecutingLocation<A>();
    unint64_t v0 = type metadata accessor for LocationBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LocationBox<AppIntentExecutingLocation<ToggleState>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AppIntentExecutingLocation<ToggleState> and conformance AppIntentExecutingLocation<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AppIntentExecutingLocation<ToggleState> and conformance AppIntentExecutingLocation<A>;
  if (!lazy protocol witness table cache variable for type AppIntentExecutingLocation<ToggleState> and conformance AppIntentExecutingLocation<A>)
  {
    _s7SwiftUI7BindingVySbGMaTm_2(255, &lazy cache variable for type metadata for AppIntentExecutingLocation<ToggleState>, MEMORY[0x1E4F3F540], (uint64_t (*)(void, uint64_t))type metadata accessor for AppIntentExecutingLocation);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AppIntentExecutingLocation<ToggleState> and conformance AppIntentExecutingLocation<A>);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for Toggle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *(void *)a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + ((v6 + 17) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 48 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
  }
  else
  {
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v12 = (a1 + v6 + 17) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 17) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v14(v12, v13, v4);
    unint64_t v15 = (v7 + v12) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = (v7 + v13) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v16 + 24) < 0xFFFFFFFFuLL)
    {
      long long v23 = *(_OWORD *)v16;
      long long v24 = *(_OWORD *)(v16 + 32);
      *(_OWORD *)(v15 + 16) = *(_OWORD *)(v16 + 16);
      *(_OWORD *)(v15 + 32) = v24;
      *(_OWORD *)unint64_t v15 = v23;
      return a1;
    }
    uint64_t v17 = *(void *)v16;
    uint64_t v18 = *(void *)(v16 + 8);
    char v19 = *(unsigned char *)(v16 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v16, v18, v19);
    *(void *)unint64_t v15 = v17;
    *(void *)(v15 + 8) = v18;
    *(unsigned char *)(v15 + 16) = v19;
    char v20 = *(void **)(v16 + 24);
    *(void *)(v15 + 24) = v20;
    uint64_t v21 = *(void *)(v16 + 40);
    *(void *)(v15 + 32) = *(void *)(v16 + 32);
    *(void *)(v15 + 40) = v21;
    id v22 = v20;
  }
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Toggle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 17 + a1) & ~v8;
  uint64_t v10 = (v8 + 17 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40) + 7;
  unint64_t v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = *(void *)(v13 + 24);
  if (*(void *)(v12 + 24) < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      uint64_t v25 = *(void *)v13;
      uint64_t v26 = *(void *)(v13 + 8);
      char v27 = *(unsigned char *)(v13 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v13, v26, v27);
      *(void *)unint64_t v12 = v25;
      *(void *)(v12 + 8) = v26;
      *(unsigned char *)(v12 + 16) = v27;
      char v28 = *(void **)(v13 + 24);
      *(void *)(v12 + 24) = v28;
      uint64_t v29 = *(void *)(v13 + 40);
      *(void *)(v12 + 32) = *(void *)(v13 + 32);
      *(void *)(v12 + 40) = v29;
      id v30 = v28;
      swift_retain();
      return a1;
    }
LABEL_7:
    long long v31 = *(_OWORD *)v13;
    long long v32 = *(_OWORD *)(v13 + 32);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 16);
    *(_OWORD *)(v12 + 32) = v32;
    *(_OWORD *)unint64_t v12 = v31;
    return a1;
  }
  if (v14 < 0xFFFFFFFF)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));

    swift_release();
    goto LABEL_7;
  }
  uint64_t v15 = *(void *)v13;
  uint64_t v16 = *(void *)(v13 + 8);
  char v17 = *(unsigned char *)(v13 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v13, v16, v17);
  uint64_t v18 = *(void *)v12;
  uint64_t v19 = *(void *)(v12 + 8);
  char v20 = *(unsigned char *)(v12 + 16);
  *(void *)unint64_t v12 = v15;
  *(void *)(v12 + 8) = v16;
  *(unsigned char *)(v12 + 16) = v17;
  outlined consume of Environment<AppIntentExecutor?>.Content(v18, v19, v20);
  uint64_t v21 = *(void **)(v13 + 24);
  id v22 = *(void **)(v12 + 24);
  *(void *)(v12 + 24) = v21;
  id v23 = v21;

  uint64_t v24 = *(void *)(v13 + 40);
  *(void *)(v12 + 32) = *(void *)(v13 + 32);
  *(void *)(v12 + 40) = v24;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for Toggle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 17 + a1) & ~v6;
  uint64_t v8 = (v6 + 17 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  uint64_t v10 = (_OWORD *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (_OWORD *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = v11[1];
  long long v12 = v11[2];
  *uint64_t v10 = *v11;
  v10[1] = v13;
  v10[2] = v12;
  return a1;
}

uint64_t assignWithTake for Toggle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 17 + a1) & ~v8;
  uint64_t v10 = (v8 + 17 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 24) + 7;
  unint64_t v12 = (v11 + v9) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v11 + v10) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v12 + 24) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)(v13 + 24) < 0xFFFFFFFFuLL)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v12, *(void *)(v12 + 8), *(unsigned char *)(v12 + 16));

    swift_release();
LABEL_5:
    long long v19 = *(_OWORD *)v13;
    long long v20 = *(_OWORD *)(v13 + 32);
    *(_OWORD *)(v12 + 16) = *(_OWORD *)(v13 + 16);
    *(_OWORD *)(v12 + 32) = v20;
    *(_OWORD *)unint64_t v12 = v19;
    return a1;
  }
  char v14 = *(unsigned char *)(v13 + 16);
  uint64_t v15 = *(void *)v12;
  uint64_t v16 = *(void *)(v12 + 8);
  char v17 = *(unsigned char *)(v12 + 16);
  *(_OWORD *)unint64_t v12 = *(_OWORD *)v13;
  *(unsigned char *)(v12 + 16) = v14;
  outlined consume of Environment<AppIntentExecutor?>.Content(v15, v16, v17);
  uint64_t v18 = *(void **)(v12 + 24);
  *(void *)(v12 + 24) = *(void *)(v13 + 24);

  *(_OWORD *)(v12 + 32) = *(_OWORD *)(v13 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Toggle(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 17) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 48;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1879C2DECLL);
      case 4:
        int v14 = *(_DWORD *)(a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *(_DWORD *)a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 17) & ~v6);
  }
  unint64_t v17 = *(void *)(a1 + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for Toggle(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 48;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v18 = (unint64_t)&a1[v9 + 17] & ~v9;
              long long v19 = *(void (**)(unint64_t))(v6 + 56);
              v19(v18);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              a1[16] = 0;
              *(void *)a1 = a2 ^ 0x80000000;
              *((void *)a1 + 1) = 0;
            }
            else
            {
              *((void *)a1 + 1) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFD0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFD0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFD0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1879C2FF8);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t sub_1879C3020()
{
  return swift_getWitnessTable();
}

uint64_t specialized closure #2 in Toggle.init<A>(toggledOn:label:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = a2 + 40;
    do
    {
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
      v4 += 24;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t objectdestroy_31Tm()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in Toggle.init<A>(toggledOn:label:)(unsigned __int8 *a1)
{
  return closure #2 in Toggle.init<A>(toggledOn:label:)(a1, v1[2], v1[3], (uint64_t)v1+ ((*(unsigned __int8 *)(*(void *)(v1[5] - 8) + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[5] - 8) + 80)), v1[4], v1[5]);
}

uint64_t TableColumn<>.init<A>(_:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v30 = a9;
  uint64_t v31 = a7;
  uint64_t v26 = a2;
  uint64_t v27 = a6;
  uint64_t v29 = a4;
  int v28 = a3;
  uint64_t v25 = a1;
  int v13 = (uint64_t *)(*a5 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v14 = *v13;
  uint64_t v15 = type metadata accessor for KeyPathComparator();
  uint64_t v16 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v16 - 8);
  unint64_t v18 = (char *)&v24 - v17;
  uint64_t v19 = v13[1];
  swift_retain();
  KeyPathComparator.init<A>(_:order:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v18, 0, 1, v15);
  long long v20 = (void *)swift_allocObject();
  v20[2] = v14;
  v20[3] = a8;
  v20[4] = v19;
  v20[5] = a10;
  v20[6] = a11;
  v20[7] = a12;
  uint64_t v21 = v26;
  v20[8] = v27;
  v20[9] = v31;
  uint64_t v33 = v25;
  uint64_t v34 = v21;
  char v35 = v28;
  uint64_t v36 = v29;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v18, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (uint64_t)v20, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v32, v14, v15, a8, v30, MEMORY[0x1E4F41420], a10, WitnessTable, a11, MEMORY[0x1E4F41418]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t WitnessTable;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39[16];
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  uint64_t v30 = a8;
  uint64_t v31 = a1;
  uint64_t v36 = a7;
  uint64_t v37 = a4;
  uint64_t v33 = a2;
  uint64_t v34 = a6;
  char v35 = a3;
  uint64_t v38 = a9;
  long long v32 = a11;
  uint64_t v14 = (uint64_t *)(*a5 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v29 = *v14;
  uint64_t v15 = v29;
  uint64_t v16 = type metadata accessor for KeyPathComparator();
  uint64_t v17 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v29 - v18;
  long long v20 = v14[1];
  swift_retain();
  KeyPathComparator.init<A>(_:order:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v19, 0, 1, v16);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v15;
  v21[3] = a8;
  v21[4] = v20;
  v21[5] = a10;
  id v22 = v32;
  v21[6] = v32;
  void v21[7] = a12;
  id v23 = v36;
  uint64_t v24 = v37;
  v21[8] = v34;
  v21[9] = v23;
  uint64_t v40 = a1;
  uint64_t v25 = v33;
  uint64_t v41 = v33;
  uint64_t v26 = v35 & 1;
  uint64_t v42 = v35 & 1;
  uint64_t v43 = v24;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v19, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:), (uint64_t)v21, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v39, v29, v16, v30, v38, MEMORY[0x1E4F41420], a10, WitnessTable, v22, MEMORY[0x1E4F41418]);
  swift_release();
  swift_release();
  outlined consume of Text.Storage(v31, v25, v26);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1879C34A8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t TableColumn<>.init<A, B>(_:value:content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v34 = a8;
  uint64_t v35 = a4;
  uint64_t v32 = a7;
  uint64_t v33 = a3;
  uint64_t v36 = a1;
  uint64_t v37 = a9;
  int v13 = (uint64_t *)(*a2 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v14 = *v13;
  uint64_t v15 = type metadata accessor for KeyPathComparator();
  uint64_t v16 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v16 - 8);
  unint64_t v18 = (char *)&v30 - v17;
  uint64_t v19 = v13[1];
  swift_retain();
  KeyPathComparator.init<A>(_:order:)();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v18, 0, 1, v15);
  long long v20 = (void *)swift_allocObject();
  v20[2] = v14;
  v20[3] = a5;
  uint64_t v31 = a5;
  v20[4] = a6;
  v20[5] = v19;
  uint64_t v21 = v32;
  uint64_t v22 = v33;
  uint64_t v23 = v34;
  v20[6] = v32;
  v20[7] = v23;
  v20[8] = a10;
  v20[9] = a11;
  v20[10] = v22;
  v20[11] = v35;
  uint64_t v39 = v14;
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v42 = v19;
  uint64_t v24 = a6;
  uint64_t v43 = v21;
  uint64_t v44 = v23;
  uint64_t v25 = v21;
  uint64_t v26 = v23;
  uint64_t v45 = a10;
  uint64_t v46 = a11;
  uint64_t v27 = v36;
  uint64_t v47 = v36;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v18, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A, B>(_:value:content:), (uint64_t)v20, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A, B>(_:value:content:), (uint64_t)v38, v14, v15, v31, v37, MEMORY[0x1E4F41420], v25, WitnessTable, v26, MEMORY[0x1E4F41418]);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v27, v24);
}

uint64_t closure #1 in TableColumn<>.init<A, B>(_:value:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)&v16 - v11;
  v13(v10);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, a5);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, a5);
}

uint64_t sub_1879C3890()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init<A, B>(_:value:content:)(uint64_t a1)
{
  return closure #1 in TableColumn<>.init<A, B>(_:value:content:)(a1, v1[10], v1[11], v1[2], v1[3]);
}

uint64_t closure #2 in TableColumn<>.init<A, B>(_:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #2 in TableColumn<>.init<A, B>(_:value:content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in TableColumn<>.init<A, B>(_:value:content:)(*(void *)(v1 + 80), a1);
}

uint64_t closure #1 in TableColumn<>.init<A>(_:value:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  char v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)&v16 - v11;
  v13(v10);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, a5);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, a5);
}

{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void (*v14)(void, double);
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  uint64_t v6 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  char v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)&v17 - v11;
  v14(*v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v8, a5);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v15)(v12, a5);
}

uint64_t partial apply for closure #1 in TableColumn<>.init<A>(_:value:content:)(uint64_t a1)
{
  return closure #1 in TableColumn<>.init<A>(_:value:content:)(a1, v1[8], v1[9], v1[2], v1[3]);
}

{
  uint64_t *v1;

  return closure #1 in TableColumn<>.init<A>(_:value:content:)(a1, v1[8], v1[9], v1[2], v1[3]);
}

uint64_t TableColumn<>.init<A, B>(_:value:comparator:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v46 = a9;
  uint64_t v47 = a8;
  uint64_t v42 = a2;
  uint64_t v43 = a7;
  uint64_t v45 = a4;
  int v44 = a3;
  uint64_t v40 = a13;
  uint64_t v41 = a1;
  uint64_t v36 = a10;
  uint64_t v37 = a6;
  uint64_t v15 = *a5;
  uint64_t v38 = *(void *)(a11 - 8);
  uint64_t v16 = v38;
  uint64_t v39 = a12;
  MEMORY[0x1F4188790](a1);
  unint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v15 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v20 = type metadata accessor for KeyPathComparator();
  uint64_t v21 = type metadata accessor for Optional();
  double v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v24 = (char *)&v34 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v18, a6, a11, v22);
  uint64_t v25 = *(void *)(*MEMORY[0x1E4FBC5F0] + v15 + 8);
  uint64_t v26 = swift_retain();
  uint64_t v35 = a11;
  KeyPathComparator.init<A, B>(_:comparator:)(v26, (uint64_t)v18, v19, v25, a11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v24, 0, 1, v20);
  uint64_t v27 = (void *)swift_allocObject();
  uint64_t v28 = v36;
  v27[2] = v19;
  v27[3] = v28;
  v27[4] = v25;
  v27[5] = a11;
  uint64_t v29 = v39;
  uint64_t v30 = v40;
  v27[6] = v39;
  v27[7] = v30;
  uint64_t v31 = v43;
  v27[8] = a14;
  v27[9] = v31;
  v27[10] = v47;
  uint64_t v49 = v41;
  uint64_t v50 = v42;
  char v51 = v44;
  uint64_t v52 = v45;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v24, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A, B>(_:value:comparator:content:), (uint64_t)v27, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v48, v19, v20, v28, v46, MEMORY[0x1E4F41420], v29, WitnessTable, v30, MEMORY[0x1E4F41418]);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v35);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t KeyPathComparator.init<A, B>(_:comparator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 - 8);
  double v8 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v7 + 16))((char *)&v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  KeyPathComparator.init<A, B>(_:comparator:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a2, a5);
}

uint64_t TableColumn<>.init<A, B, C>(_:value:comparator:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v42 = a3;
  uint64_t v43 = a7;
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  uint64_t v45 = a4;
  uint64_t v46 = a1;
  uint64_t v47 = a9;
  uint64_t v41 = a11;
  uint64_t v40 = a10;
  uint64_t v15 = *a2;
  uint64_t v44 = *(void *)(a8 - 8);
  uint64_t v16 = v44;
  uint64_t v39 = a12;
  MEMORY[0x1F4188790](a1);
  unint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v15 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v20 = type metadata accessor for KeyPathComparator();
  uint64_t v21 = type metadata accessor for Optional();
  double v22 = MEMORY[0x1F4188790](v21 - 8);
  uint64_t v24 = (char *)&v38 - v23;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v18, a3, a8, v22);
  uint64_t v25 = *(void *)(*MEMORY[0x1E4FBC5F0] + v15 + 8);
  uint64_t v26 = swift_retain();
  KeyPathComparator.init<A, B>(_:comparator:)(v26, (uint64_t)v18, v19, v25, a8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v24, 0, 1, v20);
  uint64_t v27 = (void *)swift_allocObject();
  uint64_t v28 = v49;
  v27[2] = v19;
  v27[3] = v28;
  uint64_t v29 = v43;
  v27[4] = v43;
  v27[5] = v25;
  uint64_t v30 = v40;
  v27[6] = a8;
  v27[7] = v30;
  uint64_t v31 = v41;
  uint64_t v32 = v39;
  v27[8] = v41;
  v27[9] = v32;
  uint64_t v33 = v45;
  v27[10] = a13;
  v27[11] = v33;
  v27[12] = v48;
  uint64_t v51 = v19;
  uint64_t v52 = v28;
  uint64_t v53 = v29;
  uint64_t v54 = v25;
  uint64_t v55 = a8;
  uint64_t v56 = v30;
  uint64_t v57 = v31;
  uint64_t v58 = v32;
  uint64_t v34 = v31;
  uint64_t v35 = v46;
  uint64_t v59 = a13;
  uint64_t v60 = v46;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v24, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A, B, C>(_:value:comparator:content:), (uint64_t)v27, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A, B, C>(_:value:comparator:content:), (uint64_t)v50, v19, v20, v49, v47, MEMORY[0x1E4F41420], v30, WitnessTable, v34, MEMORY[0x1E4F41418]);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v29 - 8) + 8))(v35, v29);
}

uint64_t closure #1 in TableColumn<>.init<A, B, C>(_:value:comparator:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  double v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)&v16 - v11;
  v13(v10);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, a5);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, a5);
}

uint64_t sub_1879C46AC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init<A, B, C>(_:value:comparator:content:)(uint64_t a1)
{
  return closure #1 in TableColumn<>.init<A, B, C>(_:value:comparator:content:)(a1, v1[11], v1[12], v1[2], v1[3]);
}

uint64_t closure #2 in TableColumn<>.init<A, B, C>(_:value:comparator:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #2 in TableColumn<>.init<A, B, C>(_:value:comparator:content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in TableColumn<>.init<A, B, C>(_:value:comparator:content:)(*(void *)(v1 + 88), a1);
}

uint64_t TableColumn<>.init<A, B>(_:value:comparator:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v52 = a9;
  uint64_t v53 = a8;
  uint64_t v48 = a2;
  uint64_t v49 = a7;
  uint64_t v51 = a4;
  int v50 = a3;
  uint64_t v46 = a13;
  uint64_t v47 = a1;
  uint64_t v43 = a6;
  uint64_t v44 = a12;
  uint64_t v42 = a10;
  uint64_t v16 = *a5;
  uint64_t v45 = *(void *)(a11 - 8);
  uint64_t v17 = v45;
  MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(v16 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v21 = type metadata accessor for KeyPathComparator();
  uint64_t v22 = type metadata accessor for Optional();
  double v23 = MEMORY[0x1F4188790](v22 - 8);
  uint64_t v25 = (char *)&v38 - v24;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, a6, a11, v23);
  uint64_t v26 = *(void *)(*MEMORY[0x1E4FBC5F0] + v16 + 8);
  uint64_t v41 = a5;
  uint64_t v27 = swift_retain();
  uint64_t v39 = v20;
  uint64_t v40 = a11;
  KeyPathComparator.init<A, B>(_:comparator:)(v27, (uint64_t)v19, v20, v26, a11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v25, 0, 1, v21);
  uint64_t v28 = (void *)swift_allocObject();
  uint64_t v29 = v42;
  v28[2] = v20;
  v28[3] = v29;
  _OWORD v28[4] = v26;
  v28[5] = a11;
  uint64_t v30 = v44;
  uint64_t v32 = v46;
  uint64_t v31 = v47;
  v28[6] = v44;
  v28[7] = v32;
  uint64_t v34 = v48;
  uint64_t v33 = v49;
  v28[8] = a14;
  v28[9] = v33;
  v28[10] = v53;
  uint64_t v55 = v31;
  uint64_t v56 = v34;
  char v35 = v50 & 1;
  char v57 = v50 & 1;
  uint64_t v58 = v51;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v25, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A, B>(_:value:comparator:content:), (uint64_t)v28, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v54, v39, v21, v29, v52, MEMORY[0x1E4F41420], v30, WitnessTable, v32, MEMORY[0x1E4F41418]);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v43, v40);
  outlined consume of Text.Storage(v31, v34, v35);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1879C4B70()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TableColumn<>.init<A, B>(_:value:comparator:content:)(uint64_t a1)
{
  return closure #1 in TableColumn<>.init<A, B>(_:value:content:)(a1, v1[9], v1[10], v1[2], v1[3]);
}

uint64_t TableColumn<>.init<>(_:value:comparator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v28 = a6;
  uint64_t v29 = a1;
  int v31 = a3;
  uint64_t v30 = a2;
  uint64_t v32 = a8;
  uint64_t v12 = *a5;
  uint64_t v13 = type metadata accessor for String.StandardComparator();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v12 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v18 = type metadata accessor for KeyPathComparator();
  uint64_t v19 = type metadata accessor for Optional();
  double v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v22 = (char *)&v27 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, a6, v13, v20);
  lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
  uint64_t v23 = swift_retain();
  KeyPathComparator.init<A, B>(_:comparator:)(v23, (uint64_t)v16, v17, MEMORY[0x1E4FBB1A0], v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v22, 0, 1, v18);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a7;
  *(void *)(v24 + 24) = a5;
  uint64_t v34 = v29;
  uint64_t v35 = v30;
  char v36 = v31;
  uint64_t v37 = a4;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v22, (uint64_t)partial apply for closure #1 in TableColumn<>.init<>(_:value:), v24, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v33, v17, v18, MEMORY[0x1E4F41420], v32, MEMORY[0x1E4F41420], a7, WitnessTable, MEMORY[0x1E4F41418], MEMORY[0x1E4F41418]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v28, v13);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned char v33[16];
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  uint64_t v9 = a6;
  uint64_t v27 = a1;
  uint64_t v28 = a6;
  uint64_t v30 = a4;
  int v31 = a8;
  uint64_t v29 = a3;
  uint64_t v32 = a2;
  uint64_t v12 = *a5;
  uint64_t v13 = type metadata accessor for String.StandardComparator();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v12 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v18 = type metadata accessor for KeyPathComparator();
  uint64_t v19 = type metadata accessor for Optional();
  double v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v22 = (char *)&v27 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, v9, v13, v20);
  lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
  uint64_t v23 = swift_retain();
  KeyPathComparator.init<A, B>(_:comparator:)(v23, (uint64_t)v16, v17, MEMORY[0x1E4FBB1A0], v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v22, 0, 1, v18);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a7;
  *(void *)(v24 + 24) = a5;
  uint64_t v34 = a1;
  uint64_t v35 = v32;
  LOBYTE(v9) = v29 & 1;
  char v36 = v29 & 1;
  uint64_t v37 = v30;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v22, (uint64_t)partial apply for closure #1 in TableColumn<>.init<>(_:value:), v24, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v33, v17, v18, MEMORY[0x1E4F41420], v31, MEMORY[0x1E4F41420], a7, WitnessTable, MEMORY[0x1E4F41418], MEMORY[0x1E4F41418]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v28, v13);
  outlined consume of Text.Storage(v27, v32, v9);
  return swift_bridgeObjectRelease();
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t WitnessTable;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unsigned char v33[16];
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  uint64_t v28 = a6;
  uint64_t v29 = a1;
  int v31 = a3;
  uint64_t v30 = a2;
  uint64_t v32 = a8;
  uint64_t v12 = *a5;
  uint64_t v13 = type metadata accessor for String.StandardComparator();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v12 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v18 = type metadata accessor for SortDescriptor();
  uint64_t v19 = type metadata accessor for Optional();
  double v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v22 = (char *)&v27 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, a6, v13, v20);
  uint64_t v23 = swift_retain();
  SortDescriptor.init<A>(_:comparator:)(v23, (uint64_t)v16, v17, MEMORY[0x1E4F26FD0]);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v22, 0, 1, v18);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a7;
  *(void *)(v24 + 24) = a5;
  uint64_t v34 = v29;
  uint64_t v35 = v30;
  char v36 = v31;
  uint64_t v37 = a4;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v22, (uint64_t)partial apply for closure #1 in TableColumn<>.init<>(_:value:comparator:), v24, (void (*)(uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:value:format:prompt:), (uint64_t)v33, v17, v18, MEMORY[0x1E4F41420], v32, MEMORY[0x1E4F41420], a7, WitnessTable, MEMORY[0x1E4F41418], MEMORY[0x1E4F41418]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v28, v13);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t WitnessTable;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  char v37[16];
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;

  uint64_t v32 = a6;
  uint64_t v33 = a7;
  uint64_t v35 = a4;
  char v36 = a8;
  uint64_t v34 = a3;
  uint64_t v30 = a1;
  uint64_t v12 = *a5;
  uint64_t v13 = type metadata accessor for String.StandardComparator();
  int v31 = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(v12 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v18 = type metadata accessor for SortDescriptor();
  uint64_t v19 = type metadata accessor for Optional();
  double v20 = MEMORY[0x1F4188790](v19 - 8);
  uint64_t v22 = (char *)&v29 - v21;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, a6, v13, v20);
  uint64_t v23 = swift_retain();
  SortDescriptor.init<A>(_:comparator:)(v23, (uint64_t)v16, v17, MEMORY[0x1E4F26FD0]);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v22, 0, 1, v18);
  uint64_t v24 = swift_allocObject();
  uint64_t v25 = v33;
  *(void *)(v24 + 16) = v33;
  *(void *)(v24 + 24) = a5;
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v26 = a2;
  LOBYTE(a2) = v34 & 1;
  uint64_t v40 = v34 & 1;
  uint64_t v41 = v35;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v22, (uint64_t)partial apply for closure #1 in TableColumn<>.init<>(_:value:comparator:), v24, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init(_:sortUsing:content:), (uint64_t)v37, v17, v18, MEMORY[0x1E4F41420], v36, MEMORY[0x1E4F41420], v25, WitnessTable, MEMORY[0x1E4F41418], MEMORY[0x1E4F41418]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v32, v31);
  outlined consume of Text.Storage(v30, v26, a2);
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator()
{
  unint64_t result = lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator;
  if (!lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator)
  {
    type metadata accessor for String.StandardComparator();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String.StandardComparator and conformance String.StandardComparator);
  }
  return result;
}

uint64_t sub_1879C4F14()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t TableColumn<>.init<A>(_:value:comparator:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v29 = a6;
  uint64_t v30 = a1;
  uint64_t v31 = a7;
  uint64_t v11 = *a2;
  uint64_t v12 = type metadata accessor for String.StandardComparator();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v11 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v17 = type metadata accessor for KeyPathComparator();
  uint64_t v18 = type metadata accessor for Optional();
  double v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v21 = (char *)&v28 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a3, v12, v19);
  lazy protocol witness table accessor for type String.StandardComparator and conformance String.StandardComparator();
  uint64_t v22 = swift_retain();
  KeyPathComparator.init<A, B>(_:comparator:)(v22, (uint64_t)v15, v16, MEMORY[0x1E4FBB1A0], v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v21, 0, 1, v17);
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = a4;
  v23[3] = a5;
  uint64_t v24 = v29;
  uint64_t v25 = v30;
  v23[4] = v29;
  v23[5] = a2;
  uint64_t v33 = v16;
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v36 = v24;
  uint64_t v37 = v25;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v21, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:), (uint64_t)v23, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:comparator:), (uint64_t)v32, v16, v17, MEMORY[0x1E4F41420], v31, MEMORY[0x1E4F41420], a5, WitnessTable, MEMORY[0x1E4F41418], MEMORY[0x1E4F41418]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v28, v12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(v25, a4);
}

{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t WitnessTable;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned char v32[16];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  uint64_t v28 = a3;
  uint64_t v29 = a6;
  uint64_t v30 = a1;
  uint64_t v31 = a7;
  uint64_t v11 = *a2;
  uint64_t v12 = type metadata accessor for String.StandardComparator();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v11 + *MEMORY[0x1E4FBC5F0]);
  uint64_t v17 = type metadata accessor for SortDescriptor();
  uint64_t v18 = type metadata accessor for Optional();
  double v19 = MEMORY[0x1F4188790](v18 - 8);
  uint64_t v21 = (char *)&v28 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v15, a3, v12, v19);
  uint64_t v22 = swift_retain();
  SortDescriptor.init<A>(_:comparator:)(v22, (uint64_t)v15, v16, MEMORY[0x1E4F26FD0]);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v21, 0, 1, v17);
  uint64_t v23 = (void *)swift_allocObject();
  v23[2] = a4;
  v23[3] = a5;
  uint64_t v24 = v29;
  uint64_t v25 = v30;
  v23[4] = v29;
  v23[5] = a2;
  uint64_t v33 = v16;
  uint64_t v34 = a4;
  uint64_t v35 = a5;
  uint64_t v36 = v24;
  uint64_t v37 = v25;
  swift_retain();
  uint64_t WitnessTable = swift_getWitnessTable();
  TableColumn.init(comparator:content:label:)((uint64_t)v21, (uint64_t)partial apply for closure #1 in TableColumn<>.init<A>(_:value:comparator:), (uint64_t)v23, (void (*)(uint64_t))partial apply for closure #2 in TableColumn<>.init<A>(_:value:comparator:), (uint64_t)v32, v16, v17, MEMORY[0x1E4F41420], v31, MEMORY[0x1E4F41420], a5, WitnessTable, MEMORY[0x1E4F41418], MEMORY[0x1E4F41418]);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v28, v12);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(v25, a4);
}

uint64_t sub_1879C5240()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t closure #2 in TableColumn<>.init<A>(_:value:comparator:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

{
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #2 in TableColumn<>.init<A>(_:value:comparator:)@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in TableColumn<>.init<A>(_:value:comparator:)(*(void *)(v1 + 48), a1);
}

{
  uint64_t v1;

  return closure #2 in TableColumn<>.init<A>(_:value:comparator:)(*(void *)(v1 + 48), a1);
}

uint64_t _TaskModifier.init(priority:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  char v8 = (char *)a4 + *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8, a1, v9);
  *a4 = a2;
  a4[1] = a3;
  return result;
}

uint64_t key path setter for _TaskModifier.action : _TaskModifier(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = &thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())partial apply;
  a2[1] = v5;
  return result;
}

uint64_t _TaskModifier.action.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t _TaskModifier.action.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_TaskModifier.action.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _TaskModifier.priority.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  uint64_t v4 = type metadata accessor for TaskPriority();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t _TaskModifier.priority.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  uint64_t v4 = type metadata accessor for TaskPriority();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);

  return v5(v3, a1, v4);
}

uint64_t (*_TaskModifier.priority.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _TaskModifier._viewListCount(inputs:body:)()
{
  return static ViewModifier.viewListCount(inputs:body:)();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance _TaskModifier.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TaskModifier.InnerModifier(0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance _TaskModifier.Child@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for _TaskModifier(0);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of _TaskModifier.InnerModifier(Value, a1, type metadata accessor for _TaskModifier);
  uint64_t result = type metadata accessor for _TaskModifier.InnerModifier(0);
  uint64_t v4 = (void *)(a1 + *(int *)(result + 20));
  void *v4 = 0;
  v4[1] = 0;
  return result;
}

uint64_t closure #1 in closure #1 in _TaskModifier.InnerModifier.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v5;
  *uint64_t v5 = v4;
  v5[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v7();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _TaskModifier()
{
  return static ViewModifier.viewListCount(inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance _TaskModifier()
{
}

uint64_t key path setter for _TaskValueModifier.action : <A>_TaskValueModifier<A>(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  uint64_t result = swift_release();
  *a2 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ());
  a2[1] = v5;
  return result;
}

uint64_t _TaskValueModifier.action.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  return v1;
}

uint64_t _TaskValueModifier.action.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *uint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_TaskValueModifier.action.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _TaskValueModifier.priority.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t _TaskValueModifier.priority.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(v4, a1, v5);
}

uint64_t (*_TaskValueModifier.priority.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _TaskValueModifier.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t _TaskValueModifier.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*_TaskValueModifier.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _TaskValueModifier._makeView(modifier:inputs:body:)()
{
  return static ViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t static _TaskValueModifier._viewListCount(inputs:body:)()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance _TaskValueModifier<A>.Child@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TaskValueModifier.InnerModifier();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t closure #2 in _TaskValueModifier.InnerModifier.body(content:)()
{
  uint64_t v0 = type metadata accessor for _TaskValueModifier.InnerModifier.TaskState();
  uint64_t v1 = type metadata accessor for Optional();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v15 - v6;
  uint64_t v8 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = type metadata accessor for _TaskValueModifier.InnerModifier();
  _TaskValueModifier.InnerModifier.taskState.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1, v0) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v7, v1);
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v7, v0);
  uint64_t v14 = swift_retain();
  MEMORY[0x18C115EE0](v14, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v4, 1, 1, v0);
  specialized _TaskValueModifier.InnerModifier.taskState.setter((uint64_t)v4, v12);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v0);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _TaskValueModifier<A>()
{
  return static _TaskValueModifier._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance _TaskValueModifier<A>()
{
  return static _TaskValueModifier._viewListCount(inputs:body:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in _TaskModifier()
{
  return &protocol witness table for _TaskModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in _TaskValueModifier<A>()
{
  return &protocol witness table for _TaskValueModifier<A>;
}

uint64_t sub_1879C6434@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = &thunk for @escaping @callee_guaranteed @Sendable @async () -> ()partial apply;
  a2[1] = v5;

  return swift_retain();
}

uint64_t sub_1879C64A4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a2 = &async function pointer to partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> ();
  a2[1] = v5;

  return swift_retain();
}

uint64_t sub_1879C6514()
{
  return 16;
}

__n128 sub_1879C6520(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void *initializeBufferWithCopyOfBuffer for _TaskModifier(void *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    a1 = (void *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *a1 = v5;
    a1[1] = v6;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for TaskPriority();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_retain();
    v11(v8, v9, v10);
  }
  return a1;
}

_OWORD *initializeWithTake for _TaskModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_OWORD *assignWithTake for _TaskModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TaskModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1879C6730);
}

uint64_t sub_1879C6730(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for TaskPriority();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for _TaskModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1879C67F4);
}

void *sub_1879C67F4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *__n128 result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for TaskPriority();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for _TaskValueModifier(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = *a2;
  if ((v12 | v8) > 7
    || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v9 + ((v8 + 16) & ~v8) + v12) & ~v12) + *(void *)(v11 + 64) > 0x18)
  {
    *a1 = v13;
    a1 = (void *)(v13 + (((v12 | v8) & 0xF8 ^ 0x1F8) & ((v12 | v8) + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v16 = ~v8;
    uint64_t v17 = a2[1];
    *a1 = v13;
    a1[1] = v17;
    uint64_t v18 = (char *)a1 + v8;
    double v19 = (char *)a2 + v8;
    uint64_t v20 = (unint64_t)(v18 + 16) & v16;
    uint64_t v21 = (unint64_t)(v19 + 16) & v16;
    uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    uint64_t v23 = v6;
    uint64_t v25 = v10;
    swift_retain();
    v22(v20, v21, v23);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))((v20 + v9 + v12) & ~v12, (v21 + v9 + v12) & ~v12, v25);
  }
  return a1;
}

_OWORD *initializeWithTake for _TaskValueModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v10, v11, v6);
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 32))((*(void *)(v8 + 32) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(void *)(v8 + 32) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

_OWORD *assignWithTake for _TaskValueModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)a1 + v9 + 16) & ~v9;
  uint64_t v11 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(v10, v11, v6);
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 40))((*(void *)(v8 + 24) + *(unsigned __int8 *)(v12 + 80) + v10) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(void *)(v8 + 24) + *(unsigned __int8 *)(v12 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for _TaskValueModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for TaskPriority() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  if (v7 <= v9) {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v14) {
    goto LABEL_28;
  }
  uint64_t v15 = ((v11 + ((v10 + 16) & ~v10) + v12) & ~v12) + *(void *)(v8 + 64);
  char v16 = 8 * v15;
  if (v15 <= 3)
  {
    unsigned int v19 = ((a2 - v14 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v19))
    {
      int v17 = *(_DWORD *)((char *)a1 + v15);
      if (!v17) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 > 0xFF)
    {
      int v17 = *(unsigned __int16 *)((char *)a1 + v15);
      if (!*(unsigned __int16 *)((char *)a1 + v15)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v19 < 2)
    {
LABEL_28:
      if ((v13 & 0x80000000) != 0)
      {
        uint64_t v24 = ((unint64_t)a1 + v10 + 16) & ~v10;
        if (v7 == v14)
        {
          uint64_t v25 = *(uint64_t (**)(uint64_t))(v6 + 48);
          return v25(v24);
        }
        else
        {
          uint64_t v26 = (v24 + v11 + v12) & ~v12;
          uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 48);
          return v27(v26, v9);
        }
      }
      else
      {
        uint64_t v23 = *(void *)a1;
        if (*(void *)a1 >= 0xFFFFFFFFuLL) {
          LODWORD(v23) = -1;
        }
        return (v23 + 1);
      }
    }
  }
  int v17 = *((unsigned __int8 *)a1 + v15);
  if (!*((unsigned char *)a1 + v15)) {
    goto LABEL_28;
  }
LABEL_18:
  int v20 = (v17 - 1) << v16;
  if (v15 > 3) {
    int v20 = 0;
  }
  if (v15)
  {
    if (v15 <= 3) {
      int v21 = ((v11 + ((v10 + 16) & ~v10) + v12) & ~v12) + *(_DWORD *)(v8 + 64);
    }
    else {
      int v21 = 4;
    }
    switch(v21)
    {
      case 2:
        int v22 = *a1;
        break;
      case 3:
        int v22 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v22 = *(_DWORD *)a1;
        break;
      default:
        int v22 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v22 = 0;
  }
  return v14 + (v22 | v20) + 1;
}

void storeEnumTagSinglePayload for _TaskValueModifier(_WORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for TaskPriority() - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v11 = *(unsigned int *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(void *)(v8 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v10 + 80);
  if (v9 <= v11) {
    unsigned int v15 = *(_DWORD *)(v10 + 84);
  }
  else {
    unsigned int v15 = *(_DWORD *)(v8 + 84);
  }
  if (v15 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  else {
    unsigned int v16 = v15;
  }
  size_t v17 = ((v13 + ((v12 + 16) & ~v12) + v14) & ~v14) + *(void *)(v10 + 64);
  if (a3 <= v16)
  {
    int v18 = 0;
  }
  else if (v17 <= 3)
  {
    unsigned int v21 = ((a3 - v16 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v21))
    {
      int v18 = 4;
    }
    else if (v21 >= 0x100)
    {
      int v18 = 2;
    }
    else
    {
      int v18 = v21 > 1;
    }
  }
  else
  {
    int v18 = 1;
  }
  if (v16 < a2)
  {
    unsigned int v19 = ~v16 + a2;
    if (v17 < 4)
    {
      int v20 = (v19 >> (8 * v17)) + 1;
      if (v17)
      {
        int v22 = v19 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *a1 = v22;
          *((unsigned char *)a1 + 2) = BYTE2(v22);
        }
        else if (v17 == 2)
        {
          *a1 = v22;
        }
        else
        {
          *(unsigned char *)a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        *((unsigned char *)a1 + v17) = v20;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v17) = v20;
        return;
      case 3:
        goto LABEL_49;
      case 4:
        *(_DWORD *)((char *)a1 + v17) = v20;
        return;
      default:
        return;
    }
  }
  switch(v18)
  {
    case 1:
      *((unsigned char *)a1 + v17) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)((char *)a1 + v17) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x1879C7208);
    case 4:
      *(_DWORD *)((char *)a1 + v17) = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if ((v15 & 0x80000000) != 0)
        {
          uint64_t v24 = ((unint64_t)a1 + v12 + 16) & ~v12;
          if (v9 == v16)
          {
            uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v8 + 56);
            v25(v24, a2);
          }
          else
          {
            uint64_t v26 = (v24 + v13 + v14) & ~v14;
            uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
            v27(v26, a2, v11);
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v23 = a2 ^ 0x80000000;
            *((void *)a1 + 1) = 0;
          }
          else
          {
            uint64_t v23 = (a2 - 1);
          }
          *(void *)a1 = v23;
        }
      }
      return;
  }
}

uint64_t sub_1879C7230()
{
  return swift_getWitnessTable();
}

uint64_t sub_1879C729C()
{
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for _TaskValueModifier.InnerModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11;
  uint64_t v13 = *(_DWORD *)(v11 + 80);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v15 = ((v13 + 8) & ~v13) + v14;
  uint64_t v16 = ((v9 + ((v8 + 16) & ~v8) + v13) & ~v13) + v14 + (v13 | 7);
  uint64_t v17 = *a2;
  if ((v13 | v8) <= 7
    && ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) == 0
    && (v16 & ~(v13 | 7)) + ((v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 <= 0x18)
  {
    size_t __n = ((v13 + 8) & ~v13) + v14;
    uint64_t v35 = v13 + 8;
    uint64_t v40 = v15 + 7;
    uint64_t v41 = v10;
    uint64_t v38 = ~(v13 | 7);
    uint64_t v39 = a1;
    int v37 = *(_DWORD *)(v11 + 84);
    uint64_t v20 = a2[1];
    *a1 = v17;
    a1[1] = v20;
    uint64_t v21 = ((unint64_t)a1 + v8 + 16) & ~v8;
    uint64_t v22 = ((unint64_t)a2 + v8 + 16) & ~v8;
    uint64_t v36 = a2;
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    uint64_t v24 = v6;
    swift_retain();
    v23(v21, v22, v24);
    uint64_t v25 = v39;
    uint64_t v26 = (v21 + v9 + v13) & ~v13;
    uint64_t v27 = v22 + v9 + v13;
    uint64_t v28 = ~v13;
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16);
    v29(v26, v27 & v28, v41);
    uint64_t v30 = (void *)(((unint64_t)v39 + v16) & v38);
    uint64_t v31 = (uint64_t *)(((unint64_t)v36 + v16) & v38);
    if (v37 < 0)
    {
      if ((*(unsigned int (**)(unint64_t))(v12 + 48))(((unint64_t)v31 + v35) & v28))
      {
LABEL_14:
        memcpy(v30, v31, __n);
LABEL_17:
        *(void *)(((unint64_t)v30 + v40) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v31 + v40) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v32 = *v31;
      if ((unint64_t)*v31 >= 0xFFFFFFFF) {
        LODWORD(v32) = -1;
      }
      if (v32 != -1) {
        goto LABEL_14;
      }
    }
    *uint64_t v30 = *v31;
    swift_retain();
    v29(((unint64_t)v30 + v35) & v28, ((unint64_t)v31 + v35) & v28, v41);
    goto LABEL_17;
  }
  *a1 = v17;
  uint64_t v25 = (void *)(v17 + (((v13 | v8) & 0xF8 ^ 0x1F8) & ((v13 | v8) + 16)));
LABEL_18:
  swift_retain();
  return v25;
}

_OWORD *initializeWithTake for _TaskValueModifier.InnerModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 32))(((unint64_t)a1 + v9 + 16) & ~v9, v10, v6);
  uint64_t v11 = *(void *)(v8 + 32);
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v11 + v14;
  uint64_t v32 = ~v14;
  uint64_t v33 = *(void *)(a3 + 16);
  uint64_t v30 = *(void (**)(unint64_t, uint64_t))(v12 + 32);
  v30((v11 + v14 + (((unint64_t)a1 + v9 + 16) & ~v9)) & ~v14, (v11 + v14 + v10) & ~v14);
  uint64_t v16 = v15 + ((v9 + 16) & ~v9);
  uint64_t v17 = a1;
  uint64_t v18 = *(void *)(v12 + 64);
  uint64_t v19 = v18 + (v14 | 7) + (v16 & ~v14);
  uint64_t v20 = (void *)(((unint64_t)a1 + v19) & ~(v14 | 7));
  uint64_t v21 = (uint64_t *)(((unint64_t)a2 + v19) & ~(v14 | 7));
  uint64_t v22 = v14 + 8;
  uint64_t v23 = (v14 + 8) & ~v14;
  if ((*(_DWORD *)(v13 + 84) & 0x80000000) == 0)
  {
    uint64_t v24 = *v21;
    if ((unint64_t)*v21 >= 0xFFFFFFFF) {
      LODWORD(v24) = -1;
    }
    uint64_t v25 = ~v14;
    uint64_t v26 = v33;
    size_t v27 = v23 + v18;
    if (v24 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v20 = *v21;
    ((void (*)(unint64_t, unint64_t, uint64_t))v30)(((unint64_t)v20 + v22) & v25, ((unint64_t)v21 + v22) & v25, v26);
    goto LABEL_8;
  }
  uint64_t v26 = v33;
  int v28 = (*(uint64_t (**)(unint64_t))(v13 + 48))(((unint64_t)v21 + v22) & v32);
  uint64_t v25 = v32;
  size_t v27 = v23 + v18;
  if (!v28) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v20, v21, v27);
LABEL_8:
  *(void *)(((unint64_t)v20 + v27 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v21 + v27 + 7) & 0xFFFFFFFFFFFFFFF8);
  return v17;
}

_OWORD *assignWithTake for _TaskValueModifier.InnerModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)a2 + v9 + 16) & ~v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 40))(((unint64_t)a1 + v9 + 16) & ~v9, v10, v6);
  uint64_t v11 = *(void *)(v8 + 24);
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v11 + v14;
  uint64_t v16 = ~v14;
  uint64_t v33 = *(void *)(a3 + 16);
  uint64_t v31 = *(void (**)(unint64_t, uint64_t))(v12 + 40);
  v31((v11 + v14 + (((unint64_t)a1 + v9 + 16) & ~v9)) & ~v14, (v11 + v14 + v10) & ~v14);
  uint64_t v17 = *(void *)(v12 + 64);
  uint64_t v18 = v17 + (v14 | 7) + ((v15 + ((v9 + 16) & ~v9)) & ~v14);
  uint64_t v35 = a1;
  uint64_t v19 = (void *)(((unint64_t)a1 + v18) & ~(v14 | 7));
  uint64_t v20 = (void *)(((unint64_t)a2 + v18) & ~(v14 | 7));
  uint64_t v21 = *(unsigned int *)(v12 + 84);
  uint64_t v22 = v14 + 8;
  size_t v23 = ((v14 + 8) & ~v14) + v17;
  uint64_t v32 = v13;
  if ((v21 & 0x80000000) != 0)
  {
    int v28 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v13 + 48);
    uint64_t v27 = v33;
    int v29 = v28(((unint64_t)v19 + v22) & v16, v21, v33);
    uint64_t v24 = v16;
    int v26 = v28(((unint64_t)v20 + v22) & v16, v21, v33);
    if (!v29)
    {
LABEL_5:
      if (!v26)
      {
        *uint64_t v19 = *v20;
        swift_release();
        ((void (*)(unint64_t, unint64_t, uint64_t))v31)(((unint64_t)v19 + v22) & v24, ((unint64_t)v20 + v22) & v24, v27);
        goto LABEL_12;
      }
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v32 + 8))(((unint64_t)v19 + v22) & v24, v27);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v24 = v16;
    uint64_t v25 = *v20;
    if (*v20 >= 0xFFFFFFFFuLL) {
      LODWORD(v25) = -1;
    }
    int v26 = v25 + 1;
    uint64_t v27 = v33;
    if (*v19 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v26)
  {
    *uint64_t v19 = *v20;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v32 + 32))(((unint64_t)v19 + v22) & v24, ((unint64_t)v20 + v22) & v24, v27);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v19, v20, v23);
LABEL_12:
  *(void *)(((unint64_t)v19 + v23 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v20 + v23 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return v35;
}

uint64_t getEnumTagSinglePayload for _TaskValueModifier.InnerModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = *(void *)(v7 + 64);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(v9 + 64);
  if (v8 <= v10) {
    unsigned int v15 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v15 = *(_DWORD *)(v7 + 84);
  }
  if (v15 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  else {
    unsigned int v16 = v15;
  }
  if (v10 <= 0x7FFFFFFF) {
    int v17 = 0x7FFFFFFF;
  }
  else {
    int v17 = *(_DWORD *)(v9 + 84);
  }
  unsigned int v18 = v17 - 1;
  if (v17 - 1 <= v16) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17 - 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v20 = v13 | 7;
  uint64_t v21 = v13 + 8;
  uint64_t v22 = ((v12 + ((v11 + 16) & ~v11) + v13) & ~v13) + v14 + (v13 | 7);
  if (v19 < a2)
  {
    unint64_t v23 = ((v14 + (v21 & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8) + (v22 & ~v20) + 8;
    if ((v23 & 0xFFFFFFF8) != 0) {
      unsigned int v24 = 2;
    }
    else {
      unsigned int v24 = a2 - v19 + 1;
    }
    if (v24 >= 0x10000) {
      unsigned int v25 = 4;
    }
    else {
      unsigned int v25 = 2;
    }
    if (v24 < 0x100) {
      unsigned int v25 = 1;
    }
    if (v24 >= 2) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    switch(v26)
    {
      case 1:
        int v27 = *((unsigned __int8 *)a1 + v23);
        if (!*((unsigned char *)a1 + v23)) {
          break;
        }
        goto LABEL_31;
      case 2:
        int v27 = *(unsigned __int16 *)((char *)a1 + v23);
        if (*(_WORD *)((char *)a1 + v23)) {
          goto LABEL_31;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1879C7DDCLL);
      case 4:
        int v27 = *(_DWORD *)((char *)a1 + v23);
        if (!v27) {
          break;
        }
LABEL_31:
        int v29 = v27 - 1;
        if ((v23 & 0xFFFFFFF8) != 0)
        {
          int v29 = 0;
          int v30 = *a1;
        }
        else
        {
          int v30 = 0;
        }
        return v19 + (v30 | v29) + 1;
      default:
        break;
    }
  }
  uint64_t v31 = ~v13;
  if (v16 >= v18)
  {
    if ((v15 & 0x80000000) != 0)
    {
      uint64_t v36 = ((unint64_t)a1 + v11 + 16) & ~v11;
      if (v8 == v16)
      {
        int v37 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
        return v37(v36, v8, v6);
      }
      else
      {
        uint64_t v38 = (v36 + v12 + v13) & v31;
        uint64_t v39 = *(uint64_t (**)(uint64_t))(v9 + 48);
        return v39(v38);
      }
    }
    else
    {
      uint64_t v35 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v35) = -1;
      }
      return (v35 + 1);
    }
  }
  else
  {
    uint64_t v32 = (unint64_t *)(((unint64_t)a1 + v22) & ~v20);
    if ((v10 & 0x80000000) != 0)
    {
      unsigned int v34 = (*(uint64_t (**)(unint64_t))(v9 + 48))(((unint64_t)v32 + v21) & v31);
    }
    else
    {
      unint64_t v33 = *v32;
      if (v33 >= 0xFFFFFFFF) {
        LODWORD(v33) = -1;
      }
      unsigned int v34 = v33 + 1;
    }
    if (v34 >= 2) {
      return v34 - 1;
    }
    else {
      return 0;
    }
  }
}

void storeEnumTagSinglePayload for _TaskValueModifier.InnerModifier(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v12 = *(_DWORD *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v14 = *(void *)(v9 + 64);
  uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = *(void *)(v11 + 64);
  if (v10 <= v12) {
    unsigned int v17 = *(_DWORD *)(v11 + 84);
  }
  else {
    unsigned int v17 = *(_DWORD *)(v9 + 84);
  }
  if (v17 <= 0x7FFFFFFF) {
    unsigned int v18 = 0x7FFFFFFF;
  }
  else {
    unsigned int v18 = v17;
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v19 = 0x7FFFFFFF;
  }
  else {
    unsigned int v19 = *(_DWORD *)(v11 + 84);
  }
  unsigned int v20 = v19 - 1;
  if (v19 - 1 <= v18) {
    unsigned int v21 = v18;
  }
  else {
    unsigned int v21 = v19 - 1;
  }
  size_t v22 = ((v14 + ((v13 + 16) & ~v13) + v15) & ~v15) + v16;
  size_t v23 = ((v15 + 8) & ~v15) + v16;
  size_t v24 = v22 + (v15 | 7);
  unint64_t v25 = ((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + (v24 & ~(v15 | 7)) + 8;
  if (v21 >= a3)
  {
    int v28 = 0;
    int v29 = a2 - v21;
    if (a2 <= v21) {
      goto LABEL_25;
    }
LABEL_29:
    if (((v23 + 7) & 0xFFFFFFF8) + (v24 & ~(v15 | 7)) != -8)
    {
      int v29 = 1;
      int v31 = ~v21 + a2;
      bzero(a1, ((v23 + 7) & 0xFFFFFFFFFFFFFFF8) + (v24 & ~(v15 | 7)) + 8);
      *a1 = v31;
    }
    switch(v28)
    {
      case 1:
        *((unsigned char *)a1 + v25) = v29;
        break;
      case 2:
        *(_WORD *)((char *)a1 + v25) = v29;
        break;
      case 3:
LABEL_85:
        __break(1u);
        JUMPOUT(0x1879C8258);
      case 4:
        *(_DWORD *)((char *)a1 + v25) = v29;
        break;
      default:
        return;
    }
    return;
  }
  unsigned int v26 = a3 - v21;
  if (((v23 + 7) & 0xFFFFFFF8) + (v24 & ~(v15 | 7)) == -8) {
    unsigned int v27 = v26 + 1;
  }
  else {
    unsigned int v27 = 2;
  }
  if (v27 >= 0x10000) {
    int v28 = 4;
  }
  else {
    int v28 = 2;
  }
  if (v27 < 0x100) {
    int v28 = 1;
  }
  if (v27 < 2) {
    int v28 = 0;
  }
  int v29 = a2 - v21;
  if (a2 > v21) {
    goto LABEL_29;
  }
LABEL_25:
  uint64_t v30 = ~v15;
  switch(v28)
  {
    case 1:
      *((unsigned char *)a1 + v25) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)((char *)a1 + v25) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
      goto LABEL_85;
    case 4:
      *(_DWORD *)((char *)a1 + v25) = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (!a2) {
        return;
      }
LABEL_35:
      if (v18 < v20)
      {
        a1 = (_DWORD *)(((unint64_t)a1 + v24) & ~(v15 | 7));
        if (v20 < a2)
        {
          int v32 = (v23 + 7) & 0xFFFFFFF8;
          if (v32 != -8)
          {
            int v33 = a2 - v19;
            bzero(a1, (v32 + 8));
            *a1 = v33;
          }
          return;
        }
        if ((int)a2 + 1 > v19)
        {
          if (v23 <= 3) {
            int v37 = ~(-1 << (8 * v23));
          }
          else {
            int v37 = -1;
          }
          if (v23)
          {
            int v35 = v37 & (a2 - v19);
            if (v23 <= 3) {
              int v38 = v23;
            }
            else {
              int v38 = 4;
            }
            bzero(a1, v23);
            switch(v38)
            {
              case 2:
                goto LABEL_73;
              case 3:
                goto LABEL_74;
              case 4:
                goto LABEL_76;
              default:
                goto LABEL_61;
            }
          }
          return;
        }
        if (a2 == -1) {
          return;
        }
        if ((v12 & 0x80000000) == 0)
        {
          if (a2 + 1 < 0) {
            uint64_t v39 = (a2 - 0x7FFFFFFF);
          }
          else {
            uint64_t v39 = a2;
          }
LABEL_83:
          *(void *)a1 = v39;
          return;
        }
        uint64_t v42 = ((unint64_t)a1 + v15 + 8) & v30;
        uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v11 + 56);
        uint64_t v44 = (a2 + 1);
        goto LABEL_79;
      }
      if (v18 >= a2)
      {
        if ((v17 & 0x80000000) == 0)
        {
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v39 = a2 ^ 0x80000000;
            *((void *)a1 + 1) = 0;
          }
          else
          {
            uint64_t v39 = (a2 - 1);
          }
          goto LABEL_83;
        }
        uint64_t v40 = ((unint64_t)a1 + v13 + 16) & ~v13;
        if (v10 != v18)
        {
          uint64_t v42 = (v40 + v14 + v15) & v30;
          uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v11 + 56);
          uint64_t v44 = a2;
LABEL_79:
          v43(v42, v44);
          return;
        }
        uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
        v41(v40, a2, v10, v8);
      }
      else
      {
        if (v22 <= 3) {
          int v34 = ~(-1 << (8 * v22));
        }
        else {
          int v34 = -1;
        }
        if (v22)
        {
          int v35 = v34 & (~v18 + a2);
          if (v22 <= 3) {
            int v36 = v22;
          }
          else {
            int v36 = 4;
          }
          bzero(a1, v22);
          switch(v36)
          {
            case 2:
LABEL_73:
              *(_WORD *)a1 = v35;
              break;
            case 3:
LABEL_74:
              *(_WORD *)a1 = v35;
              *((unsigned char *)a1 + 2) = BYTE2(v35);
              break;
            case 4:
LABEL_76:
              *a1 = v35;
              break;
            default:
LABEL_61:
              *(unsigned char *)a1 = v35;
              break;
          }
        }
      }
      break;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for _TaskValueModifier.InnerModifier.TaskState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 8) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v12 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 8) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v14(v12, v13, v4);
  }
  return a1;
}

void *assignWithTake for _TaskValueModifier.InnerModifier.TaskState(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

void *type metadata accessor for _TaskModifier.Child()
{
  return &unk_1ED416518;
}

void *initializeBufferWithCopyOfBuffer for _TaskModifier.InnerModifier(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    *a1 = v5;
    uint64_t v3 = (void *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
  }
  else
  {
    uint64_t v8 = a2[1];
    *a1 = v5;
    a1[1] = v8;
    uint64_t v9 = *(int *)(type metadata accessor for _TaskModifier(0) + 20);
    uint64_t v10 = (char *)v3 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for TaskPriority();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_retain();
    v13(v10, v11, v12);
    uint64_t v14 = *(int *)(a3 + 20);
    uint64_t v15 = (void *)((char *)v3 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    swift_retain();
  }
  swift_retain();
  return v3;
}

_OWORD *initializeWithTake for _TaskModifier.InnerModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

_OWORD *assignWithTake for _TaskModifier.InnerModifier(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (void *)((char *)a2 + v10);
  *(void *)((char *)a1 + v10) = *v12;
  swift_release();
  *((void *)v11 + 1) = v12[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for _TaskModifier.InnerModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1879C870C);
}

uint64_t sub_1879C870C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for _TaskModifier(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for _TaskModifier.InnerModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1879C87EC);
}

uint64_t sub_1879C87EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for _TaskModifier(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t sub_1879C88B4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in _TaskValueModifier.InnerModifier.body(content:)()
{
  return partial apply for closure #1 in _TaskValueModifier.InnerModifier.body(content:)((uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #2 in _TaskValueModifier.InnerModifier.body(content:));
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed @Sendable @async () -> ()(uint64_t a1)
{
  int v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> ()
                                              + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> ());
  return v6(a1, v4);
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())partial apply()
{
  uint64_t v2 = *(int **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  int v4 = (uint64_t (*)(int *))((char *)&async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())
                                     + async function pointer to thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ()));
  return v4(v2);
}

uint64_t sub_1879C8A80()
{
  return swift_getWitnessTable();
}

uint64_t View.navigationTransitionStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(a5 + 8))(v11, a3, a5);
  outlined init with copy of _NavigationTransitionStyleOutputs.Content(v11, (uint64_t)&v7);
  uint64_t v5 = *((void *)&v9 + 1);
  if (*((void *)&v9 + 1))
  {
    uint64_t v5 = v7;
    long long v13 = v8;
    long long v14 = v9;
    uint64_t v15 = v10;
  }
  else
  {
    uint64_t v15 = 0;
    long long v14 = 0u;
    long long v13 = 0u;
  }
  uint64_t v12 = v5;
  outlined destroy of _NavigationTransitionStyleOutputs((uint64_t)v11);
  View.preference<A>(key:value:)();
  return _s7SwiftUI28_NavigationTransitionOutputsVSgWOhTm_0((uint64_t)&v12, (uint64_t (*)(void))type metadata accessor for _NavigationTransitionOutputs?);
}

uint64_t outlined init with copy of _NavigationTransitionStyleOutputs.Content(long long *a1, uint64_t a2)
{
  unint64_t v3 = *((void *)a1 + 4);
  if (v3 < 0xFFFFFFFF)
  {
    long long v5 = *a1;
    long long v6 = a1[2];
    *(_OWORD *)(a2 + 16) = a1[1];
    *(_OWORD *)(a2 + 32) = v6;
    *(_OWORD *)a2 = v5;
  }
  else
  {
    *(void *)a2 = *(void *)a1;
    uint64_t v4 = *((void *)a1 + 5);
    *(void *)(a2 + 32) = v3;
    *(void *)(a2 + 40) = v4;
    (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2 + 8, (uint64_t)a1 + 8);
  }
  return a2;
}

uint64_t outlined destroy of _NavigationTransitionStyleOutputs(uint64_t a1)
{
  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  return a1;
}

double AutomaticNavigationTransitionStyle._outputs.getter@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t ZoomNavigationTransitionStyle._outputs.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return outlined init with copy of AnyHashable((uint64_t)(v1 + 1), (uint64_t)(a1 + 1));
}

uint64_t static NavigationTransitionStyle<>.zoom<A>(sourceID:in:)@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t result = _convertToAnyHashable<A>(_:)();
  *a2 = a1;
  return result;
}

uint64_t dispatch thunk of NavigationTransitionStyle._outputs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

void type metadata accessor for (namespace: Namespace.ID, sourceID: AnyHashable)()
{
  if (!lazy cache variable for type metadata for (namespace: Namespace.ID, sourceID: AnyHashable))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (namespace: Namespace.ID, sourceID: AnyHashable));
    }
  }
}

uint64_t assignWithTake for _NavigationTransitionStyleOutputs(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 32)) {
    goto LABEL_5;
  }
  if (!*(void *)(a2 + 32))
  {
    _s7SwiftUI28_NavigationTransitionOutputsVSgWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for (namespace: Namespace.ID, sourceID: AnyHashable));
LABEL_5:
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for _NavigationTransitionStyleOutputs()
{
  return &type metadata for _NavigationTransitionStyleOutputs;
}

ValueMetadata *type metadata accessor for AutomaticNavigationTransitionStyle()
{
  return &type metadata for AutomaticNavigationTransitionStyle;
}

uint64_t initializeWithCopy for ZoomNavigationTransitionStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a1 + 8, a2 + 8);
  return a1;
}

void *assignWithCopy for ZoomNavigationTransitionStyle(void *a1, void *a2)
{
  *a1 = *a2;
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  return a1;
}

uint64_t assignWithTake for ZoomNavigationTransitionStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for ZoomNavigationTransitionStyle()
{
  return &type metadata for ZoomNavigationTransitionStyle;
}

uint64_t sub_1879C903C()
{
  return swift_getWitnessTable();
}

uint64_t destroy for _NavigationTransitionStyleOutputs.Content(uint64_t result)
{
  if (*(void *)(result + 32) >= 0xFFFFFFFFuLL) {
    return __swift_destroy_boxed_opaque_existential_1(result + 8);
  }
  return result;
}

uint64_t assignWithCopy for _NavigationTransitionStyleOutputs.Content(uint64_t a1, long long *a2)
{
  long long v4 = (uint64_t *)(a1 + 8);
  unint64_t v5 = *((void *)a2 + 4);
  if (*(void *)(a1 + 32) < 0xFFFFFFFFuLL)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v6 = *((void *)a2 + 4);
      *(void *)(a1 + 32) = v6;
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      (**(void (***)(uint64_t *, uint64_t))(v6 - 8))(v4, (uint64_t)a2 + 8);
      return a1;
    }
LABEL_7:
    long long v7 = *a2;
    long long v8 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v8;
    *(_OWORD *)a1 = v7;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
    goto LABEL_7;
  }
  *(void *)a1 = *(void *)a2;
  __swift_assign_boxed_opaque_existential_1(v4, (uint64_t *)a2 + 1);
  return a1;
}

uint64_t assignWithTake for _NavigationTransitionStyleOutputs.Content(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 32) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  long long v4 = (_OWORD *)(a1 + 8);
  if (*(void *)(a2 + 32) < 0xFFFFFFFFuLL)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
LABEL_5:
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    return a1;
  }
  *(void *)a1 = *(void *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  long long v5 = *(_OWORD *)(a2 + 24);
  _OWORD *v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for _NavigationTransitionStyleOutputs.Content(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) >= 2) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _NavigationTransitionStyleOutputs.Content(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_DWORD *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2;
    }
  }
  return result;
}

uint64_t getEnumTag for _NavigationTransitionStyleOutputs.Content(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 32);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

double destructiveInjectEnumTag for _NavigationTransitionStyleOutputs.Content(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 40) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 32) = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for _NavigationTransitionStyleOutputs.Content()
{
  return &type metadata for _NavigationTransitionStyleOutputs.Content;
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in BorderedButtonStyle_CarMac()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t EnvironmentValues.enforceButtonDestructiveRoleAppearance.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultToggleIsOnKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance>, (uint64_t)&type metadata for EnforceButtonDestructiveRoleAppearance, (uint64_t)&protocol witness table for EnforceButtonDestructiveRoleAppearance, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultToggleIsOnKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance>, (uint64_t)&type metadata for EnforceButtonDestructiveRoleAppearance, (uint64_t)&protocol witness table for EnforceButtonDestructiveRoleAppearance, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.enforceButtonDestructiveRoleAppearance.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DefaultToggleIsOnKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance>, (uint64_t)&type metadata for EnforceButtonDestructiveRoleAppearance, (uint64_t)&protocol witness table for EnforceButtonDestructiveRoleAppearance, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t BorderedButtonStyle_CarMac.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for BorderedButton();
  long long v9 = (int *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  int v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_1(a1, (uint64_t)&v11[v9[8]], type metadata accessor for PrimitiveButtonStyleConfiguration);
  *(void *)int v11 = a2;
  v11[8] = a3;
  uint64_t v12 = &v11[v9[9]];
  *(void *)uint64_t v12 = swift_getKeyPath();
  v12[8] = 0;
  long long v13 = &v11[v9[10]];
  *(void *)long long v13 = swift_getKeyPath();
  v13[8] = 0;
  long long v14 = &v11[v9[11]];
  *(void *)long long v14 = swift_getKeyPath();
  v14[8] = 0;
  uint64_t v15 = &v11[v9[12]];
  *(void *)uint64_t v15 = swift_getKeyPath();
  v15[8] = 0;
  uint64_t v16 = &v11[v9[13]];
  *(void *)uint64_t v16 = swift_getKeyPath();
  *((_WORD *)v16 + 4) = 0;
  uint64_t v17 = &v11[v9[14]];
  *(void *)uint64_t v17 = swift_getKeyPath();
  v17[8] = 0;
  outlined init with take of BorderedButton((uint64_t)v11, a4, (uint64_t (*)(void))type metadata accessor for BorderedButton);
  return swift_retain();
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance BorderedButtonStyle_CarMac@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return BorderedButtonStyle_CarMac.makeBody(configuration:)(a1, *(void *)v2, *(unsigned char *)(v2 + 8), a2);
}

uint64_t type metadata accessor for BorderedButton()
{
  uint64_t result = type metadata singleton initialization cache for BorderedButton;
  if (!type metadata singleton initialization cache for BorderedButton) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t BorderedButton.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v30 = type metadata accessor for UIKitSystemButtonConfigurationModifier(0);
  MEMORY[0x1F4188790](v30);
  int v32 = (char *)&v26 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for UIButton.Configuration();
  uint64_t v31 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  int v29 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4 - 8);
  type metadata accessor for ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>(0);
  uint64_t v27 = v7;
  MEMORY[0x1F4188790](v7);
  long long v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout>();
  uint64_t v28 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v13 = (char *)(v1 + *(int *)(type metadata accessor for BorderedButton() + 24));
  char v14 = *v13;
  char v15 = v13[1];
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_1((uint64_t)v13, (uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PrimitiveButtonStyleConfiguration);
  unint64_t v16 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v17 = swift_allocObject();
  outlined init with take of BorderedButton((uint64_t)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for PrimitiveButtonStyleConfiguration);
  v35[0] = v14;
  v35[1] = v15;
  int v36 = partial apply for implicit closure #2 in implicit closure #1 in FlexibleBorderedButtonStyle.makeBody(configuration:);
  uint64_t v37 = v17;
  __int16 v38 = 0;
  uint64_t v39 = 0;
  char v40 = 1;
  __int16 v41 = 514;
  uint64_t v42 = 0;
  __int16 v43 = 1;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t KeyPath = swift_getKeyPath();
  char v19 = static Edge.Set.all.getter();
  uint64_t v47 = KeyPath;
  char v48 = 1;
  char v49 = v19;
  long long v50 = xmmword_18836CA70;
  long long v51 = xmmword_18836CA70;
  char v52 = 0;
  specialized View.toolbarButtonLabel(ignoreEdge:)(0, v46);
  swift_release();
  unsigned int v20 = v29;
  if (*(unsigned char *)(v26 + 8) == 1) {
    static UIButton.Configuration.borderedProminent()();
  }
  else {
    static UIButton.Configuration.bordered()();
  }
  uint64_t v22 = v31;
  uint64_t v21 = (uint64_t)v32;
  uint64_t v23 = v33;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v32, v20, v33);
  uint64_t v24 = v21 + *(int *)(v30 + 20);
  *(void *)uint64_t v24 = swift_getKeyPath();
  *(unsigned char *)(v24 + 8) = 0;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_1((uint64_t)v35, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>);
  outlined init with take of BorderedButton(v21, (uint64_t)&v9[*(int *)(v27 + 36)], type metadata accessor for UIKitSystemButtonConfigurationModifier);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v20, v23);
  outlined destroy of ButtonAction((uint64_t)v35, (uint64_t (*)(void))type metadata accessor for UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_1((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>);
  *(_WORD *)&v12[*(int *)(v28 + 36)] = 257;
  outlined destroy of ButtonAction((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>);
  return outlined init with take of BorderedButton((uint64_t)v12, v34, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout>);
}

uint64_t sub_1879C9BC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_get_2Tm(a1, a2, MEMORY[0x1E4F3FF60], a3);
}

uint64_t sub_1879C9BE0()
{
  return EnvironmentValues.isInTouchBar.setter();
}

uint64_t sub_1879C9C1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  return keypath_get_2Tm(a1, a2, (uint64_t (*)(uint64_t, uint64_t))EnvironmentValues.enforceButtonDestructiveRoleAppearance.getter, a3);
}

uint64_t keypath_get_2Tm@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, unsigned char *a4@<X8>)
{
  uint64_t result = a3(a1, a2);
  *a4 = result & 1;
  return result;
}

uint64_t sub_1879C9C78()
{
  return EnvironmentValues.enforceButtonDestructiveRoleAppearance.setter();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultToggleIsOnKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance>, (uint64_t)&type metadata for EnforceButtonDestructiveRoleAppearance, (uint64_t)&protocol witness table for EnforceButtonDestructiveRoleAppearance, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnforceButtonDestructiveRoleAppearance> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnforceButtonDestructiveRoleAppearance()
{
  return &type metadata for EnforceButtonDestructiveRoleAppearance;
}

uint64_t initializeBufferWithCopyOfBuffer for BorderedButton(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) == 0)
  {
    uint64_t v7 = a1;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v8 = a3[6];
    uint64_t v9 = a1 + v8;
    uint64_t v10 = (uint64_t)a2 + v8;
    *(_WORD *)(a1 + v8) = *(_WORD *)((char *)a2 + v8);
    uint64_t v11 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
    uint64_t v12 = v9 + v11;
    uint64_t v13 = v10 + v11;
    type metadata accessor for ButtonAction();
    swift_retain();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v29 = *(void *)v13;
      uint64_t v30 = *(void *)(v13 + 8);
      char v31 = *(unsigned char *)(v13 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v13, v30, v31);
      *(void *)uint64_t v12 = v29;
      *(void *)(v12 + 8) = v30;
      *(unsigned char *)(v12 + 16) = v31;
      uint64_t v32 = *(void *)(v13 + 40);
      long long v33 = *(_OWORD *)(v13 + 24);
      *(_OWORD *)(v12 + 24) = v33;
      *(void *)(v12 + 40) = v32;
      id v34 = (id)v33;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v15 = *(void *)v13;
        uint64_t v16 = *(void *)(v13 + 8);
        uint64_t v18 = *(void *)(v13 + 16);
        uint64_t v17 = *(void *)(v13 + 24);
        char v67 = *(unsigned char *)(v13 + 34);
        __int16 v19 = *(_WORD *)(v13 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v13, v16, v18, v17, v19, v67);
        *(void *)uint64_t v12 = v15;
        *(void *)(v12 + 8) = v16;
        *(void *)(v12 + 16) = v18;
        *(void *)(v12 + 24) = v17;
        *(_WORD *)(v12 + 32) = v19;
        *(unsigned char *)(v12 + 34) = v67;
        uint64_t v20 = *(void *)(v13 + 40);
        uint64_t v21 = *(void *)(v13 + 48);
        uint64_t v22 = *(void *)(v13 + 56);
        uint64_t v23 = *(void *)(v13 + 64);
        char v68 = *(unsigned char *)(v13 + 74);
        LOWORD(v18) = *(_WORD *)(v13 + 72);
        outlined copy of Environment<OpenURLAction>.Content(v20, v21, v22, v23, v18, v68);
        *(void *)(v12 + 40) = v20;
        *(void *)(v12 + 48) = v21;
        *(void *)(v12 + 56) = v22;
        *(void *)(v12 + 64) = v23;
        *(_WORD *)(v12 + 72) = v18;
        *(unsigned char *)(v12 + 74) = v68;
        uint64_t v24 = *(int *)(type metadata accessor for LinkDestination() + 24);
        uint64_t v25 = v12 + v24;
        uint64_t v26 = v13 + v24;
        uint64_t v27 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v25, v26, v27);
        uint64_t v28 = type metadata accessor for LinkDestination.Configuration();
        *(unsigned char *)(v25 + *(int *)(v28 + 20)) = *(unsigned char *)(v26 + *(int *)(v28 + 20));
LABEL_9:
        swift_storeEnumTagMultiPayload();
        uint64_t v36 = a3[7];
        uint64_t v37 = v7 + v36;
        uint64_t v38 = (uint64_t)a2 + v36;
        uint64_t v39 = *(void *)v38;
        char v40 = *(unsigned char *)(v38 + 8);
        outlined copy of Environment<Bool>.Content(*(void *)v38, v40);
        *(void *)uint64_t v37 = v39;
        *(unsigned char *)(v37 + 8) = v40;
        uint64_t v41 = a3[8];
        uint64_t v42 = v7 + v41;
        uint64_t v43 = (uint64_t)a2 + v41;
        uint64_t v44 = *(void *)v43;
        char v45 = *(unsigned char *)(v43 + 8);
        outlined copy of Environment<Bool>.Content(*(void *)v43, v45);
        *(void *)uint64_t v42 = v44;
        *(unsigned char *)(v42 + 8) = v45;
        uint64_t v46 = a3[9];
        uint64_t v47 = v7 + v46;
        char v48 = (uint64_t *)((char *)a2 + v46);
        uint64_t v49 = *v48;
        unsigned __int8 v50 = *((unsigned char *)v48 + 8);
        outlined copy of Environment<Color?>.Content(*v48, v50);
        *(void *)uint64_t v47 = v49;
        *(unsigned char *)(v47 + 8) = v50;
        uint64_t v51 = a3[10];
        uint64_t v52 = v7 + v51;
        uint64_t v53 = (uint64_t)a2 + v51;
        uint64_t v54 = *(void *)v53;
        char v55 = *(unsigned char *)(v53 + 8);
        outlined copy of Environment<Bool>.Content(*(void *)v53, v55);
        *(void *)uint64_t v52 = v54;
        *(unsigned char *)(v52 + 8) = v55;
        uint64_t v56 = a3[11];
        uint64_t v57 = v7 + v56;
        uint64_t v58 = (uint64_t)a2 + v56;
        uint64_t v59 = *(void *)v58;
        char v60 = *(unsigned char *)(v58 + 9);
        LOBYTE(v52) = *(unsigned char *)(v58 + 8);
        outlined copy of Environment<CGFloat?>.Content(*(void *)v58, v52, v60);
        *(void *)uint64_t v57 = v59;
        *(unsigned char *)(v57 + 8) = v52;
        *(unsigned char *)(v57 + 9) = v60;
        uint64_t v61 = a3[12];
        uint64_t v62 = v7 + v61;
        uint64_t v63 = (uint64_t)a2 + v61;
        uint64_t v64 = *(void *)v63;
        char v65 = *(unsigned char *)(v63 + 8);
        outlined copy of Environment<Bool>.Content(*(void *)v63, v65);
        *(void *)uint64_t v62 = v64;
        *(unsigned char *)(v62 + 8) = v65;
        return v7;
      }
      uint64_t v35 = *(void *)(v13 + 8);
      *(void *)uint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = v35;
    }
    swift_retain();
    goto LABEL_9;
  }
  uint64_t v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
  swift_retain();
  return v7;
}

uint64_t outlined copy of OpenURLAction.Handler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = swift_retain();
  if (a5)
  {
    return outlined copy of AppIntentExecutor?(a3);
  }
  return result;
}

uint64_t destroy for BorderedButton(uint64_t a1, int *a2)
{
  swift_release();
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = v4 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v5, *(void *)(v5 + 8), *(unsigned char *)(v5 + 16));

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(_WORD *)(v5 + 32), *(unsigned char *)(v5 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 56), *(void *)(v5 + 64), *(_WORD *)(v5 + 72), *(unsigned char *)(v5 + 74));
  uint64_t v7 = v5 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v8 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
LABEL_8:
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + a2[7]), *(unsigned __int8 *)(a1 + a2[7] + 8));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + a2[8]), *(unsigned __int8 *)(a1 + a2[8] + 8));
  outlined consume of Environment<Color?>.Content(*(void *)(a1 + a2[9]), *(unsigned __int8 *)(a1 + a2[9] + 8));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + a2[10]), *(unsigned __int8 *)(a1 + a2[10] + 8));
  outlined consume of Environment<CGFloat?>.Content(*(void *)(a1 + a2[11]), *(unsigned __int8 *)(a1 + a2[11] + 8), *(unsigned char *)(a1 + a2[11] + 9));
  uint64_t v9 = (uint64_t *)(a1 + a2[12]);
  uint64_t v10 = *v9;
  uint64_t v11 = *((unsigned __int8 *)v9 + 8);

  return outlined consume of Environment<Bool?>.Content(v10, v11);
}

uint64_t initializeWithCopy for BorderedButton(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_WORD *)(a1 + v6) = *(_WORD *)(a2 + v6);
  uint64_t v9 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  uint64_t v10 = v7 + v9;
  uint64_t v11 = v8 + v9;
  type metadata accessor for ButtonAction();
  swift_retain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v27 = *(void *)v11;
    uint64_t v28 = *(void *)(v11 + 8);
    char v29 = *(unsigned char *)(v11 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v11, v28, v29);
    *(void *)uint64_t v10 = v27;
    *(void *)(v10 + 8) = v28;
    *(unsigned char *)(v10 + 16) = v29;
    uint64_t v30 = *(void *)(v11 + 40);
    long long v31 = *(_OWORD *)(v11 + 24);
    *(_OWORD *)(v10 + 24) = v31;
    *(void *)(v10 + 40) = v30;
    id v32 = (id)v31;
LABEL_6:
    swift_retain();
    goto LABEL_7;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v33 = *(void *)(v11 + 8);
    *(void *)uint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v33;
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)v11;
  uint64_t v14 = *(void *)(v11 + 8);
  uint64_t v16 = *(void *)(v11 + 16);
  uint64_t v15 = *(void *)(v11 + 24);
  char v65 = *(unsigned char *)(v11 + 34);
  __int16 v17 = *(_WORD *)(v11 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v11, v14, v16, v15, v17, v65);
  *(void *)uint64_t v10 = v13;
  *(void *)(v10 + 8) = v14;
  *(void *)(v10 + 16) = v16;
  *(void *)(v10 + 24) = v15;
  *(_WORD *)(v10 + 32) = v17;
  *(unsigned char *)(v10 + 34) = v65;
  uint64_t v18 = *(void *)(v11 + 40);
  uint64_t v19 = *(void *)(v11 + 48);
  uint64_t v20 = *(void *)(v11 + 56);
  uint64_t v21 = *(void *)(v11 + 64);
  char v66 = *(unsigned char *)(v11 + 74);
  LOWORD(v16) = *(_WORD *)(v11 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v18, v19, v20, v21, v16, v66);
  *(void *)(v10 + 40) = v18;
  *(void *)(v10 + 48) = v19;
  *(void *)(v10 + 56) = v20;
  *(void *)(v10 + 64) = v21;
  *(_WORD *)(v10 + 72) = v16;
  *(unsigned char *)(v10 + 74) = v66;
  uint64_t v22 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v23 = v10 + v22;
  uint64_t v24 = v11 + v22;
  uint64_t v25 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
  uint64_t v26 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(v23 + *(int *)(v26 + 20)) = *(unsigned char *)(v24 + *(int *)(v26 + 20));
LABEL_7:
  swift_storeEnumTagMultiPayload();
  uint64_t v34 = a3[7];
  uint64_t v35 = a1 + v34;
  uint64_t v36 = a2 + v34;
  uint64_t v37 = *(void *)v36;
  char v38 = *(unsigned char *)(v36 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v36, v38);
  *(void *)uint64_t v35 = v37;
  *(unsigned char *)(v35 + 8) = v38;
  uint64_t v39 = a3[8];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = a2 + v39;
  uint64_t v42 = *(void *)v41;
  char v43 = *(unsigned char *)(v41 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v41, v43);
  *(void *)uint64_t v40 = v42;
  *(unsigned char *)(v40 + 8) = v43;
  uint64_t v44 = a3[9];
  uint64_t v45 = a1 + v44;
  uint64_t v46 = (uint64_t *)(a2 + v44);
  uint64_t v47 = *v46;
  unsigned __int8 v48 = *((unsigned char *)v46 + 8);
  outlined copy of Environment<Color?>.Content(*v46, v48);
  *(void *)uint64_t v45 = v47;
  *(unsigned char *)(v45 + 8) = v48;
  uint64_t v49 = a3[10];
  uint64_t v50 = a1 + v49;
  uint64_t v51 = a2 + v49;
  uint64_t v52 = *(void *)v51;
  char v53 = *(unsigned char *)(v51 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v51, v53);
  *(void *)uint64_t v50 = v52;
  *(unsigned char *)(v50 + 8) = v53;
  uint64_t v54 = a3[11];
  uint64_t v55 = a1 + v54;
  uint64_t v56 = a2 + v54;
  uint64_t v57 = *(void *)v56;
  char v58 = *(unsigned char *)(v56 + 9);
  LOBYTE(v50) = *(unsigned char *)(v56 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v56, v50, v58);
  *(void *)uint64_t v55 = v57;
  *(unsigned char *)(v55 + 8) = v50;
  *(unsigned char *)(v55 + 9) = v58;
  uint64_t v59 = a3[12];
  uint64_t v60 = a1 + v59;
  uint64_t v61 = a2 + v59;
  uint64_t v62 = *(void *)v61;
  char v63 = *(unsigned char *)(v61 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v61, v63);
  *(void *)uint64_t v60 = v62;
  *(unsigned char *)(v60 + 8) = v63;
  return a1;
}

uint64_t assignWithCopy for BorderedButton(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_WORD *)(a1 + v6) = *(_WORD *)(a2 + v6);
  uint64_t v9 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    uint64_t v10 = *(int *)(v9 + 24);
    uint64_t v11 = v7 + v10;
    uint64_t v12 = v8 + v10;
    outlined destroy of ButtonAction(v11, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    type metadata accessor for ButtonAction();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v28 = *(void *)v12;
      uint64_t v29 = *(void *)(v12 + 8);
      char v30 = *(unsigned char *)(v12 + 16);
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v12, v29, v30);
      *(void *)uint64_t v11 = v28;
      *(void *)(v11 + 8) = v29;
      *(unsigned char *)(v11 + 16) = v30;
      long long v31 = *(void **)(v12 + 24);
      *(void *)(v11 + 24) = v31;
      uint64_t v32 = *(void *)(v12 + 40);
      *(void *)(v11 + 32) = *(void *)(v12 + 32);
      *(void *)(v11 + 40) = v32;
      id v33 = v31;
    }
    else
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v14 = *(void *)v12;
        uint64_t v15 = *(void *)(v12 + 8);
        uint64_t v17 = *(void *)(v12 + 16);
        uint64_t v16 = *(void *)(v12 + 24);
        char v79 = *(unsigned char *)(v12 + 34);
        __int16 v18 = *(_WORD *)(v12 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v12, v15, v17, v16, v18, v79);
        *(void *)uint64_t v11 = v14;
        *(void *)(v11 + 8) = v15;
        *(void *)(v11 + 16) = v17;
        *(void *)(v11 + 24) = v16;
        *(_WORD *)(v11 + 32) = v18;
        *(unsigned char *)(v11 + 34) = v79;
        uint64_t v19 = *(void *)(v12 + 40);
        uint64_t v20 = *(void *)(v12 + 48);
        uint64_t v21 = *(void *)(v12 + 56);
        uint64_t v22 = *(void *)(v12 + 64);
        char v80 = *(unsigned char *)(v12 + 74);
        LOWORD(v17) = *(_WORD *)(v12 + 72);
        outlined copy of Environment<OpenURLAction>.Content(v19, v20, v21, v22, v17, v80);
        *(void *)(v11 + 40) = v19;
        *(void *)(v11 + 48) = v20;
        *(void *)(v11 + 56) = v21;
        *(void *)(v11 + 64) = v22;
        *(_WORD *)(v11 + 72) = v17;
        *(unsigned char *)(v11 + 74) = v80;
        uint64_t v23 = *(int *)(type metadata accessor for LinkDestination() + 24);
        uint64_t v24 = v11 + v23;
        uint64_t v25 = v12 + v23;
        uint64_t v26 = type metadata accessor for URL();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v24, v25, v26);
        uint64_t v27 = type metadata accessor for LinkDestination.Configuration();
        *(unsigned char *)(v24 + *(int *)(v27 + 20)) = *(unsigned char *)(v25 + *(int *)(v27 + 20));
LABEL_8:
        swift_storeEnumTagMultiPayload();
        goto LABEL_9;
      }
      uint64_t v34 = *(void *)(v12 + 8);
      *(void *)uint64_t v11 = *(void *)v12;
      *(void *)(v11 + 8) = v34;
    }
    swift_retain();
    goto LABEL_8;
  }
LABEL_9:
  uint64_t v35 = a3[7];
  uint64_t v36 = (uint64_t *)(a1 + v35);
  uint64_t v37 = a2 + v35;
  uint64_t v38 = *(void *)v37;
  char v39 = *(unsigned char *)(v37 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v37, v39);
  uint64_t v40 = *v36;
  uint64_t v41 = *((unsigned __int8 *)v36 + 8);
  *uint64_t v36 = v38;
  *((unsigned char *)v36 + 8) = v39;
  outlined consume of Environment<Bool?>.Content(v40, v41);
  uint64_t v42 = a3[8];
  char v43 = (uint64_t *)(a1 + v42);
  uint64_t v44 = a2 + v42;
  uint64_t v45 = *(void *)v44;
  char v46 = *(unsigned char *)(v44 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v44, v46);
  uint64_t v47 = *v43;
  uint64_t v48 = *((unsigned __int8 *)v43 + 8);
  *char v43 = v45;
  *((unsigned char *)v43 + 8) = v46;
  outlined consume of Environment<Bool?>.Content(v47, v48);
  uint64_t v49 = a3[9];
  uint64_t v50 = (uint64_t *)(a1 + v49);
  uint64_t v51 = (uint64_t *)(a2 + v49);
  uint64_t v52 = *v51;
  unsigned __int8 v53 = *((unsigned char *)v51 + 8);
  outlined copy of Environment<Color?>.Content(*v51, v53);
  uint64_t v54 = *v50;
  uint64_t v55 = *((unsigned __int8 *)v50 + 8);
  uint64_t *v50 = v52;
  *((unsigned char *)v50 + 8) = v53;
  outlined consume of Environment<Color?>.Content(v54, v55);
  uint64_t v56 = a3[10];
  uint64_t v57 = (uint64_t *)(a1 + v56);
  uint64_t v58 = a2 + v56;
  uint64_t v59 = *(void *)v58;
  char v60 = *(unsigned char *)(v58 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v58, v60);
  uint64_t v61 = *v57;
  uint64_t v62 = *((unsigned __int8 *)v57 + 8);
  *uint64_t v57 = v59;
  *((unsigned char *)v57 + 8) = v60;
  outlined consume of Environment<Bool?>.Content(v61, v62);
  uint64_t v63 = a3[11];
  uint64_t v64 = a1 + v63;
  uint64_t v65 = a2 + v63;
  uint64_t v66 = *(void *)v65;
  char v67 = *(unsigned char *)(v65 + 9);
  LOBYTE(v57) = *(unsigned char *)(v65 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v65, v57, v67);
  uint64_t v68 = *(void *)v64;
  char v69 = *(unsigned char *)(v64 + 9);
  *(void *)uint64_t v64 = v66;
  uint64_t v70 = *(unsigned __int8 *)(v64 + 8);
  *(unsigned char *)(v64 + 8) = (_BYTE)v57;
  *(unsigned char *)(v64 + 9) = v67;
  outlined consume of Environment<CGFloat?>.Content(v68, v70, v69);
  uint64_t v71 = a3[12];
  unsigned int v72 = (uint64_t *)(a1 + v71);
  uint64_t v73 = a2 + v71;
  uint64_t v74 = *(void *)v73;
  char v75 = *(unsigned char *)(v73 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v73, v75);
  uint64_t v76 = *v72;
  uint64_t v77 = *((unsigned __int8 *)v72 + 8);
  *unsigned int v72 = v74;
  *((unsigned char *)v72 + 8) = v75;
  outlined consume of Environment<Bool?>.Content(v76, v77);
  return a1;
}

uint64_t initializeWithTake for BorderedButton(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_WORD *)(a1 + v6) = *(_WORD *)(a2 + v6);
  uint64_t v9 = *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  uint64_t v10 = (char *)(v7 + v9);
  uint64_t v11 = (char *)(v8 + v9);
  uint64_t v12 = type metadata accessor for ButtonAction();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v13 = *((_OWORD *)v11 + 1);
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    *((_OWORD *)v10 + 1) = v13;
    *(_DWORD *)(v10 + 31) = *(_DWORD *)(v11 + 31);
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(v11 + 40);
    *(_OWORD *)(v10 + 56) = *(_OWORD *)(v11 + 56);
    *(_DWORD *)(v10 + 71) = *(_DWORD *)(v11 + 71);
    uint64_t v14 = *(int *)(type metadata accessor for LinkDestination() + 24);
    uint64_t v15 = &v10[v14];
    uint64_t v16 = &v11[v14];
    uint64_t v17 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
    uint64_t v18 = type metadata accessor for LinkDestination.Configuration();
    v15[*(int *)(v18 + 20)] = v16[*(int *)(v18 + 20)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  uint64_t v19 = a3[7];
  uint64_t v20 = a3[8];
  uint64_t v21 = a1 + v19;
  uint64_t v22 = a2 + v19;
  *(void *)uint64_t v21 = *(void *)v22;
  *(unsigned char *)(v21 + 8) = *(unsigned char *)(v22 + 8);
  uint64_t v23 = a1 + v20;
  uint64_t v24 = a2 + v20;
  *(void *)uint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  uint64_t v25 = a3[9];
  uint64_t v26 = a3[10];
  uint64_t v27 = a1 + v25;
  uint64_t v28 = a2 + v25;
  *(void *)uint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  uint64_t v29 = a1 + v26;
  uint64_t v30 = a2 + v26;
  *(void *)uint64_t v29 = *(void *)v30;
  *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
  uint64_t v31 = a3[11];
  uint64_t v32 = a3[12];
  uint64_t v33 = a1 + v31;
  uint64_t v34 = (uint64_t *)(a2 + v31);
  uint64_t v35 = *v34;
  *(_WORD *)(v33 + 8) = *((_WORD *)v34 + 4);
  *(void *)uint64_t v33 = v35;
  uint64_t v36 = a1 + v32;
  uint64_t v37 = a2 + v32;
  *(unsigned char *)(v36 + 8) = *(unsigned char *)(v37 + 8);
  *(void *)uint64_t v36 = *(void *)v37;
  return a1;
}

uint64_t assignWithTake for BorderedButton(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  *(_WORD *)(a1 + v6) = *(_WORD *)(a2 + v6);
  uint64_t v9 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    uint64_t v10 = *(int *)(v9 + 24);
    uint64_t v11 = (char *)(v7 + v10);
    uint64_t v12 = (char *)(v8 + v10);
    outlined destroy of ButtonAction((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    uint64_t v13 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v14 = *((_OWORD *)v12 + 1);
      *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
      *((_OWORD *)v11 + 1) = v14;
      *(_DWORD *)(v11 + 31) = *(_DWORD *)(v12 + 31);
      *(_OWORD *)(v11 + 40) = *(_OWORD *)(v12 + 40);
      *(_OWORD *)(v11 + 56) = *(_OWORD *)(v12 + 56);
      *(_DWORD *)(v11 + 71) = *(_DWORD *)(v12 + 71);
      uint64_t v15 = *(int *)(type metadata accessor for LinkDestination() + 24);
      uint64_t v16 = &v11[v15];
      uint64_t v17 = &v12[v15];
      uint64_t v18 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      uint64_t v19 = type metadata accessor for LinkDestination.Configuration();
      v16[*(int *)(v19 + 20)] = v17[*(int *)(v19 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v20 = a3[7];
  uint64_t v21 = (uint64_t *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v23 = *v22;
  LOBYTE(v22) = *((unsigned char *)v22 + 8);
  uint64_t v24 = *v21;
  uint64_t v25 = *((unsigned __int8 *)v21 + 8);
  *uint64_t v21 = v23;
  *((unsigned char *)v21 + 8) = (_BYTE)v22;
  outlined consume of Environment<Bool?>.Content(v24, v25);
  uint64_t v26 = a3[8];
  uint64_t v27 = (uint64_t *)(a1 + v26);
  uint64_t v28 = (uint64_t *)(a2 + v26);
  uint64_t v29 = *v28;
  LOBYTE(v28) = *((unsigned char *)v28 + 8);
  uint64_t v30 = *v27;
  uint64_t v31 = *((unsigned __int8 *)v27 + 8);
  *uint64_t v27 = v29;
  *((unsigned char *)v27 + 8) = (_BYTE)v28;
  outlined consume of Environment<Bool?>.Content(v30, v31);
  uint64_t v32 = a3[9];
  uint64_t v33 = (uint64_t *)(a1 + v32);
  uint64_t v34 = (uint64_t *)(a2 + v32);
  uint64_t v35 = *v34;
  LOBYTE(v34) = *((unsigned char *)v34 + 8);
  uint64_t v36 = *v33;
  uint64_t v37 = *((unsigned __int8 *)v33 + 8);
  *uint64_t v33 = v35;
  *((unsigned char *)v33 + 8) = (_BYTE)v34;
  outlined consume of Environment<Color?>.Content(v36, v37);
  uint64_t v38 = a3[10];
  char v39 = (uint64_t *)(a1 + v38);
  uint64_t v40 = (uint64_t *)(a2 + v38);
  uint64_t v41 = *v40;
  LOBYTE(v40) = *((unsigned char *)v40 + 8);
  uint64_t v42 = *v39;
  uint64_t v43 = *((unsigned __int8 *)v39 + 8);
  *char v39 = v41;
  *((unsigned char *)v39 + 8) = (_BYTE)v40;
  outlined consume of Environment<Bool?>.Content(v42, v43);
  uint64_t v44 = a3[11];
  uint64_t v45 = a1 + v44;
  char v46 = (uint64_t *)(a2 + v44);
  uint64_t v47 = *v46;
  char v48 = *((unsigned char *)v46 + 8);
  LOBYTE(v46) = *((unsigned char *)v46 + 9);
  uint64_t v49 = *(void *)v45;
  char v50 = *(unsigned char *)(v45 + 9);
  *(void *)uint64_t v45 = v47;
  uint64_t v51 = *(unsigned __int8 *)(v45 + 8);
  *(unsigned char *)(v45 + 8) = v48;
  *(unsigned char *)(v45 + 9) = (_BYTE)v46;
  outlined consume of Environment<CGFloat?>.Content(v49, v51, v50);
  uint64_t v52 = a3[12];
  unsigned __int8 v53 = (uint64_t *)(a1 + v52);
  uint64_t v54 = (uint64_t *)(a2 + v52);
  uint64_t v55 = *v54;
  LOBYTE(v54) = *((unsigned char *)v54 + 8);
  uint64_t v56 = *v53;
  uint64_t v57 = *((unsigned __int8 *)v53 + 8);
  *unsigned __int8 v53 = v55;
  *((unsigned char *)v53 + 8) = (_BYTE)v54;
  outlined consume of Environment<Bool?>.Content(v56, v57);
  return a1;
}

uint64_t getEnumTagSinglePayload for BorderedButton(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1879CADA0);
}

uint64_t sub_1879CADA0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = (char *)a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for BorderedButton(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1879CAE70);
}

void *sub_1879CAE70(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata completion function for BorderedButton()
{
  uint64_t result = type metadata accessor for PrimitiveButtonStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1879CAFD4()
{
  return lazy protocol witness table accessor for type UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>> and conformance UIKitButton<A>(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<BorderedButton> and conformance _UnaryViewAdaptor<A>, (void (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<BorderedButton>);
}

void type metadata accessor for _UnaryViewAdaptor<BorderedButton>()
{
  if (!lazy cache variable for type metadata for _UnaryViewAdaptor<BorderedButton>)
  {
    type metadata accessor for BorderedButton();
    lazy protocol witness table accessor for type UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>> and conformance UIKitButton<A>(&lazy protocol witness table cache variable for type BorderedButton and conformance BorderedButton, (void (*)(uint64_t))type metadata accessor for BorderedButton);
    unint64_t v0 = type metadata accessor for _UnaryViewAdaptor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UnaryViewAdaptor<BorderedButton>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>> and conformance UIKitButton<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in BorderedButton()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance BorderedButton()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

void type metadata accessor for ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>(uint64_t a1)
{
}

void type metadata accessor for UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>()
{
  if (!lazy cache variable for type metadata for UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    unint64_t v0 = type metadata accessor for UIKitButton();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<TextAlignment>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>);
    }
  }
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>)
  {
    type metadata accessor for EnvironmentPropertyKey<DefaultToggleIsOnKey>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, MEMORY[0x1E4F407A8], MEMORY[0x1E4F407A0], MEMORY[0x1E4F40C60]);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<CarPlayInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<TextAlignment>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E4F40520], MEMORY[0x1E4F410E8]);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>();
    lazy protocol witness table accessor for type ToolbarButtonLabelModifier and conformance ToolbarButtonLabelModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout>)
  {
    type metadata accessor for ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>(255);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout>);
    }
  }
}

uint64_t sub_1879CB7A8()
{
  uint64_t v1 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  unint64_t v2 = v0
     + *(int *)(v1 + 24)
     + ((*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80));
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v2, *(void *)(v2 + 8), *(unsigned char *)(v2 + 16));

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), *(_WORD *)(v2 + 32), *(unsigned char *)(v2 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(_WORD *)(v2 + 72), *(unsigned char *)(v2 + 74));
  unint64_t v4 = v2 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
LABEL_8:

  return swift_deallocObject();
}

uint64_t outlined init with take of BorderedButton(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, (void (*)(void))lazy protocol witness table accessor for type UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>> and conformance UIKitButton<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>> and conformance UIKitButton<A>()
{
  return lazy protocol witness table accessor for type UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>> and conformance UIKitButton<A>(&lazy protocol witness table cache variable for type UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>> and conformance UIKitButton<A>, (void (*)(uint64_t))type metadata accessor for UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>);
}

uint64_t sub_1879CBA78()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier>, _FixedSizeLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<UIKitButton<ModifiedContent<ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _PaddingLayout, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, ToolbarButtonLabelModifier, EmptyModifier>>>, UIKitSystemButtonConfigurationModifier> and conformance <> ModifiedContent<A, B>);
}

uint64_t type metadata accessor for HoverEffectResponder()
{
  uint64_t result = type metadata singleton initialization cache for HoverEffectResponder;
  if (!type metadata singleton initialization cache for HoverEffectResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for HoverEffectResponder()
{
  return swift_initClassMetadata2();
}

uint64_t static PointerHoverEffectModifier._makeView(modifier:inputs:body:)@<X0>(long long *a1@<X1>, void (*a2)(uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  long long v5 = a1[3];
  long long v61 = a1[2];
  long long v62 = v5;
  long long v63 = a1[4];
  int v6 = *((_DWORD *)a1 + 20);
  int v64 = v6;
  long long v7 = a1[1];
  long long v59 = *a1;
  long long v60 = v7;
  uint64_t v8 = *(void *)a1;
  int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = *((void *)a1 + 2);
  long long v32 = *(long long *)((char *)a1 + 40);
  long long v33 = *(long long *)((char *)a1 + 24);
  long long v31 = *(long long *)((char *)a1 + 56);
  uint64_t v11 = *((void *)a1 + 9);
  uint64_t v35 = v62;
  int v36 = DWORD2(v62);
  *(void *)&long long v49 = v62;
  DWORD2(v49) = DWORD2(v62);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v29 = v10;
    int v30 = v9;
    UniqueID.init()();
    uint64_t v28 = v49;
    closure #1 in static PointerHoverEffectModifier._makeView(modifier:inputs:body:)((uint64_t)&v59, v49, a2);
    uint64_t v12 = v34;
    int v14 = DWORD2(v34);
    int v13 = HIDWORD(v34);
    long long v49 = v34;
    uint64_t result = _ViewOutputs.subscript.getter();
    if ((result & 0x100000000) != 0)
    {
LABEL_5:
      *(void *)a3 = v12;
      *(_DWORD *)(a3 + 8) = v14;
      *(_DWORD *)(a3 + 12) = v13;
      return result;
    }
    unsigned int v16 = result;
    uint64_t v27 = v8;
    type metadata accessor for _GraphValue<PointerHoverEffectModifier>(0, &lazy cache variable for type metadata for _GraphValue<PointerHoverEffectModifier>, (uint64_t)&type metadata for PointerHoverEffectModifier, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    _GraphValue.value.getter();
    unsigned int v25 = AGGraphCreateOffsetAttribute2();
    unsigned int v17 = _ViewOutputs.viewResponders()();
    unsigned int v24 = _ViewInputs.animatedPosition()();
    unsigned int v23 = _ViewInputs.transform.getter();
    unsigned int v18 = _ViewInputs.animatedSize()();
    unsigned int v19 = _ViewInputs.containerPosition.getter();
    _GraphValue.value.getter();
    unsigned int v20 = AGGraphCreateOffsetAttribute2();
    long long v51 = v61;
    long long v52 = v62;
    long long v53 = v63;
    LODWORD(v54) = v64;
    long long v49 = v59;
    long long v50 = v60;
    swift_getKeyPath();
    unsigned int v21 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    uint64_t result = (uint64_t)(id)AGSubgraphGetCurrent();
    if (result)
    {
      *(void *)&long long v49 = __PAIR64__(v25, OffsetAttribute2);
      *((void *)&v49 + 1) = __PAIR64__(v24, v17);
      *(void *)&long long v50 = __PAIR64__(v18, v23);
      *((void *)&v50 + 1) = __PAIR64__(v20, v19);
      *(void *)&long long v51 = __PAIR64__(v16, v21);
      *((void *)&v51 + 1) = v27;
      LODWORD(v52) = v30;
      *((void *)&v52 + 1) = v29;
      long long v53 = v33;
      long long v54 = v32;
      long long v55 = v31;
      *(void *)&long long v56 = v11;
      DWORD2(v56) = v6;
      *(void *)&long long v57 = v28;
      *((void *)&v57 + 1) = result;
      uint64_t v58 = 0;
      long long v45 = v31;
      long long v46 = v56;
      long long v47 = v57;
      uint64_t v48 = 0;
      long long v41 = v51;
      long long v42 = v52;
      long long v43 = v33;
      long long v44 = v32;
      unsigned int v39 = v24;
      long long v40 = v50;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      outlined retain of _ViewInputs((uint64_t)&v59);
      type metadata accessor for [ViewResponder]();
      lazy protocol witness table accessor for type HoverEffectResponderFilter and conformance HoverEffectResponderFilter();
      Attribute.init<A>(body:value:flags:update:)();
      outlined release of HoverEffectResponderFilter((uint64_t)&v49);
      uint64_t v22 = _ViewOutputs.subscript.setter();
      uint64_t v37 = v35;
      int v38 = v36;
      MEMORY[0x1F4188790](v22);
      outlined retain of [Text.Modifier]((uint64_t)&v35);
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v12 = v34;
      int v14 = DWORD2(v34);
      int v13 = HIDWORD(v34);
      goto LABEL_5;
    }
    __break(1u);
  }
  else
  {
    long long v51 = v61;
    long long v52 = v62;
    long long v53 = v63;
    LODWORD(v54) = v64;
    long long v49 = v59;
    long long v50 = v60;
    return ((uint64_t (*)(void))a2)();
  }
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance PointerHoverEffectModifier()
{
}

uint64_t HoverEffectResponderFilter.responder.getter()
{
  if (*(void *)(v0 + 144))
  {
    uint64_t v1 = *(void *)(v0 + 144);
  }
  else
  {
    uint64_t v1 = closure #1 in HoverEffectResponderFilter.responder.getter(v0);
    *(void *)(v0 + 144) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t closure #1 in HoverEffectResponderFilter.responder.getter(uint64_t a1)
{
  id v13 = *(id *)(a1 + 136);
  AGGraphClearUpdate();
  id v2 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  uint64_t v3 = *(void *)(a1 + 40);
  int v4 = *(_DWORD *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 88);
  int v8 = *(_DWORD *)(a1 + 120);
  uint64_t v9 = *(void *)(a1 + 128);
  type metadata accessor for HoverEffectResponder();
  uint64_t v10 = swift_allocObject();
  *(unsigned char *)(v10 + 296) = 3;
  *(_DWORD *)(v10 + 300) = 0;
  *(unsigned char *)(v10 + 304) = 1;
  uint64_t v14 = v9;
  uint64_t v15 = v3;
  int v16 = v4;
  uint64_t v17 = v5;
  long long v18 = *(_OWORD *)(a1 + 64);
  uint64_t v19 = v6;
  uint64_t v20 = v7;
  long long v21 = *(_OWORD *)(a1 + 96);
  uint64_t v22 = *(void *)(a1 + 112);
  int v23 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = UIViewSnapshotResponder.init(inputs:space:displayList:)((uint64_t)&v15, &v14);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  return v11;
}

uint64_t HoverEffectResponderFilter.updateValue()()
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  int v2 = v1;
  uint64_t v3 = *Value;
  uint64_t v4 = Value[1];
  uint64_t v5 = AGGraphGetValue();
  int v7 = v6;
  uint64_t v8 = *(void *)(v5 + 16);
  uint64_t v9 = *(void *)(v5 + 24);
  if (((v2 | v6) & 1) != 0 || (type metadata accessor for [ViewResponder](), !AGGraphGetOutputValue()))
  {
    uint64_t v10 = HoverEffectResponderFilter.responder.getter();
    uint64_t v41 = v8;
    uint64_t v42 = v9;
    *(double *)(v10 + 224) = MEMORY[0x18C114450]();
    *(void *)(v10 + 232) = v11;
    swift_release();
    uint64_t v12 = HoverEffectResponderFilter.responder.getter();
    *(void *)&long long v40 = v3;
    *((void *)&v40 + 1) = v4;
    *(double *)(v12 + 240) = MEMORY[0x18C10C240]();
    *(void *)(v12 + 248) = v13;
    swift_release();
    uint64_t v14 = HoverEffectResponderFilter.responder.getter();
    *(void *)(v14 + 256) = AGCreateWeakAttribute();
    swift_release();
  }
  uint64_t v15 = HoverEffectResponderFilter.responder.getter();
  *(unsigned char *)(v15 + 264) = *(unsigned char *)AGGraphGetValue();
  swift_release();
  uint64_t v16 = HoverEffectResponderFilter.responder.getter();
  *(unsigned char *)(v16 + 304) = *(unsigned char *)AGGraphGetValue();
  swift_release();
  uint64_t v17 = (char *)AGGraphGetValue();
  char v19 = v18;
  char v20 = *v17;
  long long v21 = (int *)AGGraphGetValue();
  char v23 = v22;
  int v24 = *v21;
  *(_DWORD *)(HoverEffectResponderFilter.responder.getter() + 300) = v24;
  swift_release();
  *(unsigned char *)(HoverEffectResponderFilter.responder.getter() + 296) = v20;
  swift_release();
  HoverEffectResponderFilter.responder.getter();
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v25)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  swift_release();
  uint64_t v26 = HoverEffectResponderFilter.responder.getter();
  *(void *)&long long v40 = v3;
  *((void *)&v40 + 1) = v4;
  double v27 = MEMORY[0x18C10C240]();
  double v29 = v28;
  long long v40 = *(_OWORD *)AGGraphGetValue();
  *(double *)(v26 + 280) = v27 - MEMORY[0x18C10C240]();
  *(double *)(v26 + 288) = v29 - v30;
  swift_release();
  if (AGGraphGetOutputValue() && ((v23 & 1) != 0 || (v19 & 1) != 0 || ((v7 | v2) & 1) != 0))
  {
    uint64_t v31 = HoverEffectResponderFilter.responder.getter();
    swift_beginAccess();
    uint64_t v32 = MEMORY[0x18C119DF0](v31 + 16);
    uint64_t v33 = *(void *)(v31 + 24);
    swift_release();
    if (v32)
    {
      uint64_t ObjectType = swift_getObjectType();
      unint64_t v35 = type metadata accessor for PointerHost();
      (*(void (**)(void *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v33 + 16))(v39, v35, v35, ObjectType, v33);
      swift_unknownObjectRelease();
      if (v39[0])
      {
        uint64_t v36 = v39[1];
        *(void *)(swift_allocObject() + 24) = v36;
        swift_unknownObjectWeakInit();
        swift_retain();
        static Update.enqueueAction(_:)();
        swift_unknownObjectRelease();
        swift_release_n();
      }
    }
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _GraphValue<PointerHoverEffectModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_188351940;
    *(void *)(v38 + 32) = HoverEffectResponderFilter.responder.getter();
    v39[0] = v38;
    specialized Array._endMutation()();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in HoverEffectResponderFilter.updateValue()(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x18C119DF0](v2);
  if (result)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(1, ObjectType, v4);
    return swift_unknownObjectRelease();
  }
  return result;
}

void HoverEffectResponder.contentShapeKind.getter(void *a1@<X8>)
{
  *a1 = 8;
}

Swift::Void __swiftcall HoverEffectResponder.extendPrintTree(string:)(Swift::String *string)
{
  v1._countAndFlagsBits = 0x6666457265766F68;
  v1._object = (void *)0xEB00000000746365;
  String.append(_:)(v1);
}

uint64_t HoverEffectResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for HoverEffectResponder()
{
  return type metadata accessor for HoverEffectResponder();
}

ValueMetadata *type metadata accessor for HasHoverEffectKey()
{
  return &type metadata for HasHoverEffectKey;
}

ValueMetadata *type metadata accessor for PointerHoverEffectModifier()
{
  return &type metadata for PointerHoverEffectModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in PointerHoverEffectModifier()
{
  return &protocol witness table for PointerHoverEffectModifier;
}

unint64_t lazy protocol witness table accessor for type HoverEffectResponderFilter and conformance HoverEffectResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type HoverEffectResponderFilter and conformance HoverEffectResponderFilter;
  if (!lazy protocol witness table cache variable for type HoverEffectResponderFilter and conformance HoverEffectResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffectResponderFilter and conformance HoverEffectResponderFilter);
  }
  return result;
}

uint64_t outlined release of HoverEffectResponderFilter(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

unint64_t type metadata accessor for PointerHost()
{
  unint64_t result = lazy cache variable for type metadata for PointerHost;
  if (!lazy cache variable for type metadata for PointerHost)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PointerHost);
  }
  return result;
}

uint64_t sub_1879CC944()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in HoverEffectResponderFilter.updateValue()()
{
  return closure #1 in HoverEffectResponderFilter.updateValue()(v0);
}

uint64_t destroy for HoverEffectResponderFilter(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for HoverEffectResponderFilter(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v4 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v4;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  uint64_t v5 = *(void **)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v5;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v5;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for HoverEffectResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v4 = *(void **)(a2 + 136);
  uint64_t v5 = *(void **)(a1 + 136);
  *(void *)(a1 + 136) = v4;
  id v6 = v4;

  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy152_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for HoverEffectResponderFilter(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);

  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for HoverEffectResponderFilter(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 152)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for HoverEffectResponderFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 152) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 152) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for HoverEffectResponderFilter()
{
  return &unk_1ED44B4E8;
}

uint64_t specialized GesturePhase.map<A>(_:)@<X0>(void (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v18 = a2;
  char v19 = a1;
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1E4F3F5F8];
  type metadata accessor for CategoryGesture<RotateGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t (*)(uint64_t))type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4F3F5F8]);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v18 - v13;
  outlined init with copy of CoordinateSpaceGesture<TransformEvent>(v4, (uint64_t)&v18 - v13, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), v11, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<RotateGesture.Value>);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
    case 2u:
      outlined init with take of RotateGesture.Value((uint64_t)v14, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (DragGesture.Value, DragGesture.Value));
      v19(v10);
      outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (DragGesture.Value, DragGesture.Value));
      type metadata accessor for CategoryGesture<RotateGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E4F3F5F8]);
      return swift_storeEnumTagMultiPayload();
    case 3u:
      type metadata accessor for CategoryGesture<RotateGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E4F3F5F8]);
      return swift_storeEnumTagMultiPayload();
    default:
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7) == 1)
      {
        uint64_t v15 = type metadata accessor for RotateGesture.Value();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a3, 1, 1, v15);
        type metadata accessor for CategoryGesture<RotateGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E4F3F5F8]);
        swift_storeEnumTagMultiPayload();
        return outlined destroy of CoordinateSpaceGesture<TransformEvent>((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for (DragGesture.Value, DragGesture.Value)?, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for CategoryGesture<RotateGesture.Value>);
      }
      else
      {
        outlined init with take of RotateGesture.Value((uint64_t)v14, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (DragGesture.Value, DragGesture.Value));
        v19(v10);
        outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for (DragGesture.Value, DragGesture.Value));
        uint64_t v17 = type metadata accessor for RotateGesture.Value();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a3, 0, 1, v17);
        type metadata accessor for CategoryGesture<RotateGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E4F3F5F8]);
        return swift_storeEnumTagMultiPayload();
      }
  }
}

uint64_t specialized VelocitySampler.addSample(_:time:)(double a1, double a2, double a3)
{
  if (*(unsigned char *)(v3 + 104)) {
    goto LABEL_8;
  }
  double v4 = *(double *)(v3 + 96);
  if (v4 > a3)
  {
    _StringGuts.grow(_:)(18);
    v5._countAndFlagsBits = 0x2064696C61766E49;
    v5._object = (void *)0xEF20656C706D6173;
    String.append(_:)(v5);
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    _print_unlocked<A, B>(_:_:)();
    v6._countAndFlagsBits = 32;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    _StringGuts.grow(_:)(27);
    v7._countAndFlagsBits = 0x6D69742068746977;
    v7._object = (void *)0xEA00000000002065;
    String.append(_:)(v7);
    _print_unlocked<A, B>(_:_:)();
    v8._countAndFlagsBits = 0x207473616C203E20;
    v8._object = (void *)0xED000020656D6974;
    String.append(_:)(v8);
    _print_unlocked<A, B>(_:_:)();
    swift_bridgeObjectRetain();
    v9._countAndFlagsBits = 0;
    v9._object = (void *)0xE000000000000000;
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  if (a3 - v4 >= 2.22044605e-16)
  {
LABEL_8:
    *(double *)(v3 + 96) = a3;
    *(unsigned char *)(v3 + 104) = 0;
    if (*(unsigned char *)(v3 + 88))
    {
      if (*(unsigned char *)(v3 + 56))
      {
        if ((*(unsigned char *)(v3 + 24) & 1) == 0) {
          goto LABEL_7;
        }
LABEL_11:
        *(double *)uint64_t v3 = a1;
        *(double *)(v3 + 8) = a2;
        *(double *)(v3 + 16) = a3;
        *(unsigned char *)(v3 + 24) = 0;
        return result;
      }
    }
    else
    {
      uint64_t v11 = *(void *)(v3 + 80);
      uint64_t v12 = *(void *)(v3 + 48);
      char v13 = *(unsigned char *)(v3 + 56);
      *(_OWORD *)uint64_t v3 = *(_OWORD *)(v3 + 32);
      *(void *)(v3 + 16) = v12;
      *(unsigned char *)(v3 + 24) = v13;
      *(_OWORD *)(v3 + 32) = *(_OWORD *)(v3 + 64);
      *(void *)(v3 + 48) = v11;
      *(unsigned char *)(v3 + 56) = 0;
    }
  }
  else if (*(unsigned char *)(v3 + 88))
  {
    if ((*(unsigned char *)(v3 + 56) & 1) == 0)
    {
LABEL_7:
      *(double *)(v3 + 32) = a1;
      *(double *)(v3 + 40) = a2;
      *(double *)(v3 + 48) = a3;
      *(unsigned char *)(v3 + 56) = 0;
      return result;
    }
    goto LABEL_11;
  }
  *(double *)(v3 + 64) = a1;
  *(double *)(v3 + 72) = a2;
  *(double *)(v3 + 80) = a3;
  *(unsigned char *)(v3 + 88) = 0;
  return result;
}

uint64_t specialized VelocitySampler.addSample(_:time:)(double a1, double a2)
{
  if (*(unsigned char *)(v2 + 80)) {
    goto LABEL_8;
  }
  double v3 = *(double *)(v2 + 72);
  if (v3 > a2)
  {
    _StringGuts.grow(_:)(18);
    v4._countAndFlagsBits = 0x2064696C61766E49;
    v4._object = (void *)0xEF20656C706D6173;
    String.append(_:)(v4);
    _print_unlocked<A, B>(_:_:)();
    v5._countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    _StringGuts.grow(_:)(27);
    v6._countAndFlagsBits = 0x6D69742068746977;
    v6._object = (void *)0xEA00000000002065;
    String.append(_:)(v6);
    _print_unlocked<A, B>(_:_:)();
    v7._countAndFlagsBits = 0x207473616C203E20;
    v7._object = (void *)0xED000020656D6974;
    String.append(_:)(v7);
    _print_unlocked<A, B>(_:_:)();
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  if (a2 - v3 >= 2.22044605e-16)
  {
LABEL_8:
    *(double *)(v2 + 72) = a2;
    *(unsigned char *)(v2 + 80) = 0;
    if (*(unsigned char *)(v2 + 64))
    {
      if (*(unsigned char *)(v2 + 40))
      {
        if ((*(unsigned char *)(v2 + 16) & 1) == 0) {
          goto LABEL_7;
        }
LABEL_11:
        *(double *)uint64_t v2 = a1;
        *(double *)(v2 + 8) = a2;
        *(unsigned char *)(v2 + 16) = 0;
        return result;
      }
    }
    else
    {
      char v10 = *(unsigned char *)(v2 + 40);
      *(_OWORD *)uint64_t v2 = *(_OWORD *)(v2 + 24);
      *(unsigned char *)(v2 + 16) = v10;
      *(_OWORD *)(v2 + 24) = *(_OWORD *)(v2 + 48);
      *(unsigned char *)(v2 + 40) = 0;
    }
  }
  else if (*(unsigned char *)(v2 + 64))
  {
    if ((*(unsigned char *)(v2 + 40) & 1) == 0)
    {
LABEL_7:
      *(double *)(v2 + 24) = a1;
      *(double *)(v2 + 32) = a2;
      *(unsigned char *)(v2 + 40) = 0;
      return result;
    }
    goto LABEL_11;
  }
  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
  *(unsigned char *)(v2 + 64) = 0;
  return result;
}

{
  uint64_t v2;
  double v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t result;
  char v10;

  if (*(unsigned char *)(v2 + 80)) {
    goto LABEL_8;
  }
  double v3 = *(double *)(v2 + 72);
  if (v3 > a2)
  {
    _StringGuts.grow(_:)(18);
    v4._countAndFlagsBits = 0x2064696C61766E49;
    v4._object = (void *)0xEF20656C706D6173;
    String.append(_:)(v4);
    _print_unlocked<A, B>(_:_:)();
    v5._countAndFlagsBits = 32;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    _StringGuts.grow(_:)(27);
    v6._countAndFlagsBits = 0x6D69742068746977;
    v6._object = (void *)0xEA00000000002065;
    String.append(_:)(v6);
    _print_unlocked<A, B>(_:_:)();
    v7._countAndFlagsBits = 0x207473616C203E20;
    v7._object = (void *)0xED000020656D6974;
    String.append(_:)(v7);
    _print_unlocked<A, B>(_:_:)();
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    return swift_bridgeObjectRelease();
  }
  if (a2 - v3 >= 2.22044605e-16)
  {
LABEL_8:
    *(double *)(v2 + 72) = a2;
    *(unsigned char *)(v2 + 80) = 0;
    if (*(unsigned char *)(v2 + 64))
    {
      if (*(unsigned char *)(v2 + 40))
      {
        if ((*(unsigned char *)(v2 + 16) & 1) == 0) {
          goto LABEL_7;
        }
LABEL_11:
        *(double *)uint64_t v2 = a1;
        *(double *)(v2 + 8) = a2;
        *(unsigned char *)(v2 + 16) = 0;
        return result;
      }
    }
    else
    {
      char v10 = *(unsigned char *)(v2 + 40);
      *(_OWORD *)uint64_t v2 = *(_OWORD *)(v2 + 24);
      *(unsigned char *)(v2 + 16) = v10;
      *(_OWORD *)(v2 + 24) = *(_OWORD *)(v2 + 48);
      *(unsigned char *)(v2 + 40) = 0;
    }
  }
  else if (*(unsigned char *)(v2 + 64))
  {
    if ((*(unsigned char *)(v2 + 40) & 1) == 0)
    {
LABEL_7:
      *(double *)(v2 + 24) = a1;
      *(double *)(v2 + 32) = a2;
      *(unsigned char *)(v2 + 40) = 0;
      return result;
    }
    goto LABEL_11;
  }
  *(double *)(v2 + 48) = a1;
  *(double *)(v2 + 56) = a2;
  *(unsigned char *)(v2 + 64) = 0;
  return result;
}

double specialized VelocitySampler.velocity.getter()
{
  uint64_t v1 = MEMORY[0x1E4FBB718];
  outlined init with take of Angle?(v0, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<RotateGesture.Value>);
  outlined init with take of Angle?((uint64_t)v14, (uint64_t)&v17, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), v1, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<RotateGesture.Value>);
  outlined init with take of Angle?((uint64_t)v14, (uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), v1, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<RotateGesture.Value>);
  if (v15[24]) {
    return 0.0;
  }
  double v2 = v17;
  double v3 = v18;
  uint64_t v4 = MEMORY[0x1E4FBB718];
  outlined init with take of Angle?(v0 + 32, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<RotateGesture.Value>);
  outlined init with take of Angle?((uint64_t)v13, (uint64_t)&v17, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), v4, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<RotateGesture.Value>);
  outlined init with take of Angle?((uint64_t)v13, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), v4, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<RotateGesture.Value>);
  if (v16[24]) {
    return 0.0;
  }
  double v7 = v17;
  double v8 = v18;
  double v5 = (v17 - v2) * (1.0 / (v18 - v3));
  uint64_t v9 = MEMORY[0x1E4FBB718];
  outlined init with take of Angle?(v0 + 64, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<RotateGesture.Value>);
  outlined init with take of Angle?((uint64_t)v12, (uint64_t)&v10, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), v9, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<RotateGesture.Value>);
  outlined init with take of Angle?((uint64_t)v12, (uint64_t)&v17, (uint64_t)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time)?, (uint64_t)type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time), v9, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<RotateGesture.Value>);
  if ((v19 & 1) == 0) {
    return (v10 - v7) * (1.0 / (v11 - v8)) + *(double *)(v0 + 112) * (v5 - (v10 - v7) * (1.0 / (v11 - v8)));
  }
  return v5;
}

{
  return specialized VelocitySampler.velocity.getter((uint64_t)&lazy cache variable for type metadata for (CGFloat, Time)?, (uint64_t)&lazy cache variable for type metadata for (CGFloat, Time), MEMORY[0x1E4FBC958]);
}

double specialized VelocitySampler.velocity.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  outlined init with take of Angle?(v3, (uint64_t)v17, a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  outlined init with take of Angle?((uint64_t)v17, (uint64_t)&v20, a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  outlined init with take of Angle?((uint64_t)v17, (uint64_t)v18, a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  if (v18[16]) {
    return 0.0;
  }
  double v7 = v20;
  double v8 = v21;
  outlined init with take of Angle?(v3 + 24, (uint64_t)v16, a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  outlined init with take of Angle?((uint64_t)v16, (uint64_t)&v20, a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  outlined init with take of Angle?((uint64_t)v16, (uint64_t)v19, a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  if (v19[16]) {
    return 0.0;
  }
  double v11 = v20;
  double v12 = v21;
  double v9 = (v20 - v7) * (1.0 / (v21 - v8));
  outlined init with take of Angle?(v3 + 48, (uint64_t)v15, a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  outlined init with take of Angle?((uint64_t)v15, (uint64_t)&v13, a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  outlined init with take of Angle?((uint64_t)v15, (uint64_t)&v20, a1, a2, a3, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (CGFloat, Time)?);
  if ((v22 & 1) == 0) {
    return (v13 - v11) * (1.0 / (v14 - v12)) + *(double *)(v3 + 88) * (v9 - (v13 - v11) * (1.0 / (v14 - v12)));
  }
  return v9;
}

double RotationGesture.minimumAngleDelta.getter()
{
  return *(double *)v0;
}

uint64_t (*RotationGesture.minimumAngleDelta.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static RotationGesture._makeGesture(gesture:inputs:)()
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

unint64_t lazy protocol witness table accessor for type RotationGesture and conformance RotationGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type RotationGesture and conformance RotationGesture;
  if (!lazy protocol witness table cache variable for type RotationGesture and conformance RotationGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotationGesture and conformance RotationGesture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RotationGesture and conformance RotationGesture;
  if (!lazy protocol witness table cache variable for type RotationGesture and conformance RotationGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotationGesture and conformance RotationGesture);
  }
  return result;
}

__n128 RotationGesture.internalBody.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  type metadata accessor for RotateGesture.Value();
  MapGesture.init(_:)();
  __n128 result = v5;
  *(void *)a1 = v3;
  *(__n128 *)(a1 + 8) = v5;
  return result;
}

void RotateGesture.init(minimumAngleDelta:)(double *a1@<X8>, double a2@<D0>)
{
  *a1 = a2;
}

double specialized implicit closure #1 in RotationGesture.internalBody.getter@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result = *(double *)(a1 + *(int *)(type metadata accessor for RotateGesture.Value() + 20));
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for RotateGesture.Value()
{
  uint64_t result = type metadata singleton initialization cache for RotateGesture.Value;
  if (!type metadata singleton initialization cache for RotateGesture.Value) {
    return swift_getSingletonMetadata();
  }
  return result;
}

__n128 protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance RotationGesture@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  type metadata accessor for RotateGesture.Value();
  MapGesture.init(_:)();
  __n128 result = v5;
  *(void *)a1 = v3;
  *(__n128 *)(a1 + 8) = v5;
  return result;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance RotationGesture()
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance RotationGesture()
{
}

{
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t RotateGesture.Value.time.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t RotateGesture.Value.time.setter(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);

  return v4(v1, a1, v3);
}

uint64_t (*RotateGesture.Value.time.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double RotateGesture.Value.rotation.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for RotateGesture.Value() + 20));
}

uint64_t RotateGesture.Value.rotation.setter(double a1)
{
  uint64_t result = type metadata accessor for RotateGesture.Value();
  *(double *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*RotateGesture.Value.rotation.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double RotateGesture.Value.velocity.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for RotateGesture.Value() + 24));
}

uint64_t RotateGesture.Value.velocity.setter(double a1)
{
  uint64_t result = type metadata accessor for RotateGesture.Value();
  *(double *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*RotateGesture.Value.velocity.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double RotateGesture.Value.startAnchor.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for RotateGesture.Value() + 28));
}

uint64_t RotateGesture.Value.startAnchor.setter(double a1, double a2)
{
  uint64_t result = type metadata accessor for RotateGesture.Value();
  Swift::String v6 = (double *)(v2 + *(int *)(result + 28));
  double *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*RotateGesture.Value.startAnchor.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double RotateGesture.Value.startLocation.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for RotateGesture.Value() + 32));
}

uint64_t RotateGesture.Value.startLocation.setter(double a1, double a2)
{
  uint64_t result = type metadata accessor for RotateGesture.Value();
  Swift::String v6 = (double *)(v2 + *(int *)(result + 32));
  double *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*RotateGesture.Value.startLocation.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

double RotateGesture.minimumAngleDelta.getter()
{
  return *(double *)v0;
}

void RotateGesture.minimumAngleDelta.setter(double a1)
{
  double *v1 = a1;
}

uint64_t (*RotateGesture.minimumAngleDelta.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static RotateGesture._makeGesture(gesture:inputs:)()
{
  return static Gesture.makeDebuggableGesture(gesture:inputs:)();
}

uint64_t closure #1 in RotateGesture.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>(0, &lazy cache variable for type metadata for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value, MEMORY[0x1E4F404D8]);
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v4);
  double v7 = (char *)&v18 - v6;
  uint64_t v8 = MEMORY[0x1E4FBB718];
  type metadata accessor for CategoryGesture<RotateGesture.Value>(0, &lazy cache variable for type metadata for RotateGesture.Value?, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  double v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  double v14 = (char *)&v18 - v13;
  outlined init with copy of CoordinateSpaceGesture<TransformEvent>(a1, (uint64_t)&v18 - v13, (uint64_t)&lazy cache variable for type metadata for RotateGesture.Value?, (uint64_t)type metadata accessor for RotateGesture.Value, v8, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<RotateGesture.Value>);
  outlined init with copy of SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value(a1, (uint64_t)v7);
  uint64_t v15 = type metadata accessor for RotateGesture.Value();
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  if (v16(v14, 1, v15) == 1)
  {
    outlined init with copy of CoordinateSpaceGesture<TransformEvent>((uint64_t)&v7[*(int *)(v5 + 52)], (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for RotateGesture.Value?, (uint64_t)type metadata accessor for RotateGesture.Value, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<RotateGesture.Value>);
    uint64_t result = v16(v11, 1, v15);
    if (result == 1)
    {
      __break(1u);
    }
    else
    {
      outlined destroy of SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value((uint64_t)v7);
      outlined init with take of RotateGesture.Value((uint64_t)v11, a2, (uint64_t (*)(void))type metadata accessor for RotateGesture.Value);
      return outlined destroy of CoordinateSpaceGesture<TransformEvent>((uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for RotateGesture.Value?, (uint64_t)type metadata accessor for RotateGesture.Value, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for CategoryGesture<RotateGesture.Value>);
    }
  }
  else
  {
    outlined destroy of SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value((uint64_t)v7);
    return outlined init with take of RotateGesture.Value((uint64_t)v14, a2, (uint64_t (*)(void))type metadata accessor for RotateGesture.Value);
  }
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance RotateGesture.Child@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 57) = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

__n128 protocol witness for Rule.value.getter in conformance RotateGesture.Child@<Q0>(__n128 *a1@<X8>)
{
  unsigned __int32 v3 = v1[1];
  unsigned __int32 v4 = v1[2];
  unsigned __int32 v5 = v1[3];
  unint64_t v6 = *(void *)AGGraphGetValue();
  type metadata accessor for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>(0, &lazy cache variable for type metadata for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value, MEMORY[0x1E4F404D8]);
  type metadata accessor for RotateGesture.Value();
  MapGesture.init(_:)();
  __n128 result = v8;
  a1->n128_u64[0] = v6;
  a1->n128_u32[2] = v3;
  a1->n128_u32[3] = v5;
  a1[1].n128_u32[0] = v4;
  a1[1].n128_u64[1] = v6;
  a1[2].n128_u32[0] = v3;
  a1[2].n128_u32[1] = v5;
  a1[2].n128_u32[2] = v4;
  a1[3] = v8;
  a1[4].n128_u64[0] = 2;
  a1[4].n128_u8[8] = 0;
  return result;
}

void protocol witness for Gesture.body.getter in conformance RotateGesture()
{
}

void protocol witness for GestureStateProtocol.init() in conformance TransformBasedRotationGesture.StateType(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 64) = 1;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 1;
  *(void *)(a1 + 112) = 0x3FE8000000000000;
}

uint64_t closure #1 in TransformBasedRotationGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  double v7 = *(double *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  uint64_t v13 = *(void *)(a2 + 56);
  uint64_t v15 = *(void *)(a2 + 64);
  uint64_t v16 = *(uint64_t *)(a2 + 72);
  uint64_t v17 = *(uint64_t *)(a2 + 80);
  char v18 = *(unsigned char *)(a2 + 88);
  if ((*(unsigned char *)a1 & 1) == 0)
  {
    switch(*(unsigned char *)(a2 + 88))
    {
      case 1:
        if (*(unsigned char *)(a1 + 16))
        {
          *(double *)(a1 + 8) = *(double *)&v16;
          *(unsigned char *)(a1 + 16) = 0;
        }
        else
        {
          double v22 = *(double *)(a1 + 8);
          double v23 = (*(double *)&v16 * 128.0 + *(double *)&v17 * 128.0) * 0.0078125;
          uint64_t v38 = *(void *)(a2 + 40);
          uint64_t v41 = *(void *)(a2 + 24);
          uint64_t v44 = *(void *)(a2 + 56);
          uint64_t v47 = *(void *)(a2 + 32);
          uint64_t v34 = *(void *)(a2 + 64);
          specialized VelocitySampler.addSample(_:time:)(v23 * 128.0, *(double *)a2);
          uint64_t v15 = v34;
          uint64_t v13 = v44;
          uint64_t v11 = v47;
          uint64_t v12 = v38;
          uint64_t v9 = v41;
          if (vabdd_f64(v23, v22) > a4) {
            *(unsigned char *)a1 = 1;
          }
        }
        break;
      case 2:
        goto LABEL_5;
      case 3:
        break;
      default:
        if (v10 == 1)
        {
          uint64_t v33 = *(void *)(a2 + 64);
          uint64_t v36 = *(void *)(a2 + 40);
          uint64_t v39 = *(void *)(a2 + 24);
          uint64_t v42 = *(void *)(a2 + 56);
          uint64_t v45 = *(void *)(a2 + 32);
          outlined consume of GesturePhase<TransformEvent>(*(uint64_t *)&v7, v8, 1, v9, v11, v12, v14, v13, v15, v16, v17, 0);
          uint64_t v15 = v33;
          uint64_t v13 = v42;
          uint64_t v11 = v45;
          uint64_t v12 = v36;
          uint64_t v9 = v39;
        }
        else
        {
LABEL_5:
          uint64_t v37 = *(void *)(a2 + 8);
          uint64_t v40 = *(void *)(a2 + 48);
          uint64_t v35 = *(void *)(a2 + 16);
          uint64_t v19 = *(void *)(a2 + 24);
          uint64_t v43 = *(void *)(a2 + 56);
          uint64_t v46 = *(void *)(a2 + 32);
          uint64_t v20 = *(void *)(a2 + 40);
          uint64_t v21 = *(void *)(a2 + 64);
          specialized VelocitySampler.addSample(_:time:)((*(double *)&v16 * 128.0 + *(double *)&v17 * 128.0) * 0.0078125 * 128.0, *(double *)a2);
          uint64_t v15 = v21;
          uint64_t v13 = v43;
          uint64_t v11 = v46;
          uint64_t v12 = v20;
          uint64_t v9 = v19;
          uint64_t v10 = v35;
          uint64_t v8 = v37;
          uint64_t v14 = v40;
        }
        break;
    }
  }
  uint64_t v24 = *(void *)(a1 + 8);
  char v25 = *(unsigned char *)(a1 + 16);
  char v26 = *(unsigned char *)(a1 + 40);
  char v27 = *(unsigned char *)(a1 + 64);
  char v28 = *(unsigned char *)(a1 + 88);
  uint64_t v29 = *(void *)(a1 + 96);
  char v30 = *(unsigned char *)(a1 + 104);
  uint64_t v31 = *(void *)(a1 + 112);
  v50[0] = *(unsigned char *)a1;
  uint64_t v51 = v24;
  char v52 = v25;
  long long v53 = *(_OWORD *)(a1 + 24);
  char v54 = v26;
  long long v55 = *(_OWORD *)(a1 + 48);
  char v56 = v27;
  long long v57 = *(_OWORD *)(a1 + 72);
  char v58 = v28;
  uint64_t v59 = v29;
  char v60 = v30;
  uint64_t v61 = v31;
  *(double *)uint64_t v48 = v7;
  v48[1] = v8;
  v48[2] = v10;
  v48[3] = v9;
  v48[4] = v11;
  v48[5] = v12;
  v48[6] = v14;
  v48[7] = v13;
  v48[8] = v15;
  v48[9] = v16;
  v48[10] = v17;
  char v49 = v18;
  return TransformBasedRotationGesture.phase(state:childPhase:)((uint64_t)v50, v48, a3);
}

uint64_t TransformBasedRotationGesture.phase(state:childPhase:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 64);
  long long v6 = *(_OWORD *)(a1 + 96);
  v35[5] = *(_OWORD *)(a1 + 80);
  v35[6] = v6;
  long long v7 = *(_OWORD *)(a1 + 16);
  v35[0] = *(_OWORD *)a1;
  v35[1] = v7;
  long long v8 = *(_OWORD *)(a1 + 48);
  void v35[2] = *(_OWORD *)(a1 + 32);
  uint64_t v36 = *(void *)(a1 + 112);
  v35[3] = v8;
  v35[4] = v5;
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  uint64_t v14 = a2[4];
  uint64_t v13 = a2[5];
  uint64_t v16 = a2[6];
  uint64_t v15 = a2[7];
  uint64_t v18 = a2[8];
  uint64_t v17 = a2[9];
  uint64_t v19 = a2[10];
  int v20 = *((unsigned __int8 *)a2 + 88);
  if (v3 && !(v9 | v10 | v12 | v11 | v14 | v13 | v16 | v15 | v18 | v17 | v19)) {
    goto LABEL_12;
  }
  if ((v35[0] & 1) == 0)
  {
    if (v20 != 2 && (v20 != 3 || v9 | v10 | v12 | v11 | v14 | v13 | v16 | v15 | v18 | v17 | v19))
    {
LABEL_11:
      uint64_t v21 = type metadata accessor for RotateGesture.Value();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(a3, 1, 1, v21);
      type metadata accessor for CategoryGesture<RotateGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E4F3F5F8]);
LABEL_13:
      return swift_storeEnumTagMultiPayload();
    }
LABEL_12:
    type metadata accessor for CategoryGesture<RotateGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E4F3F5F8]);
    goto LABEL_13;
  }
  switch(*((unsigned char *)a2 + 88))
  {
    case 0:
      if (v12 == 1) {
        goto LABEL_11;
      }
      uint64_t v24 = *a2;
      char v25 = v9;
      uint64_t v26 = v12;
      uint64_t v27 = v11;
      uint64_t v28 = v14;
      uint64_t v29 = v13;
      uint64_t v30 = v16;
      uint64_t v31 = v15;
      uint64_t v32 = v18;
      uint64_t v33 = v17;
      uint64_t v34 = v19;
      closure #1 in TransformBasedRotationGesture.phase(state:childPhase:)((uint64_t)&v24, (uint64_t)v35, a3);
      uint64_t v23 = type metadata accessor for RotateGesture.Value();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a3, 0, 1, v23);
      type metadata accessor for CategoryGesture<RotateGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E4F3F5F8]);
LABEL_18:
      uint64_t result = swift_storeEnumTagMultiPayload();
      break;
    case 1:
    case 2:
      uint64_t v24 = *a2;
      char v25 = v9;
      uint64_t v26 = v12;
      uint64_t v27 = v11;
      uint64_t v28 = v14;
      uint64_t v29 = v13;
      uint64_t v30 = v16;
      uint64_t v31 = v15;
      uint64_t v32 = v18;
      uint64_t v33 = v17;
      uint64_t v34 = v19;
      closure #1 in TransformBasedRotationGesture.phase(state:childPhase:)((uint64_t)&v24, (uint64_t)v35, a3);
      type metadata accessor for CategoryGesture<RotateGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E4F3F5F8]);
      goto LABEL_18;
    case 3:
      goto LABEL_12;
    default:
      JUMPOUT(0);
  }
  return result;
}

int *closure #1 in TransformBasedRotationGesture.phase(state:childPhase:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = *(double *)(a1 + 72);
  double v11 = *(double *)(a1 + 80);
  double v12 = TransformGestureAnchorHelper.startPoints(_:)();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  Date.init(timeIntervalSinceReferenceDate:)();
  uint64_t v19 = MEMORY[0x1E4F414A8];
  uint64_t v20 = MEMORY[0x1E4FBB718];
  outlined init with take of Angle?(a2 + 8, (uint64_t)v30, (uint64_t)&lazy cache variable for type metadata for Angle?, MEMORY[0x1E4F414A8], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for _GraphValue<RotateGesture>);
  uint64_t result = (int *)outlined init with take of Angle?((uint64_t)v30, (uint64_t)&v31, (uint64_t)&lazy cache variable for type metadata for Angle?, v19, v20, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for _GraphValue<RotateGesture>);
  if (v32)
  {
    __break(1u);
  }
  else
  {
    long long v22 = *(_OWORD *)(a2 + 72);
    double v23 = ((v10 * 128.0 + v11 * 128.0) * 0.0078125 * 128.0 - v31 * 128.0) * 0.0078125;
    v29[2] = *(_OWORD *)(a2 + 56);
    v29[3] = v22;
    long long v24 = *(_OWORD *)(a2 + 104);
    v29[4] = *(_OWORD *)(a2 + 88);
    v29[5] = v24;
    long long v25 = *(_OWORD *)(a2 + 40);
    v29[0] = *(_OWORD *)(a2 + 24);
    v29[1] = v25;
    double v26 = specialized VelocitySampler.velocity.getter((uint64_t)&lazy cache variable for type metadata for (Double, Time)?, (uint64_t)&lazy cache variable for type metadata for (Double, Time), MEMORY[0x1E4FBB3D0])* 0.0078125;
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v9, v6);
    uint64_t result = (int *)type metadata accessor for RotateGesture.Value();
    *(double *)(a3 + result[5]) = v23;
    *(double *)(a3 + result[6]) = v26;
    uint64_t v27 = (double *)(a3 + result[7]);
    *uint64_t v27 = v12;
    *((void *)v27 + 1) = v14;
    uint64_t v28 = (void *)(a3 + result[8]);
    *uint64_t v28 = v16;
    v28[1] = v18;
  }
  return result;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance TransformBasedRotationGesture()
{
  return MEMORY[0x1F41010D8]();
}

uint64_t protocol witness for Gesture.body.getter in conformance TransformBasedRotationGesture@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  int v4 = *((_DWORD *)v1 + 4);
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  char v12 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)v10, (uint64_t)v9);
  uint64_t v5 = MEMORY[0x1E4F40910];
  outlined init with copy of CoordinateSpaceGesture<TransformEvent>((uint64_t)v9, (uint64_t)&v14, (uint64_t)&lazy cache variable for type metadata for CoordinateSpaceGesture<TransformEvent>, (uint64_t)&type metadata for TransformEvent, MEMORY[0x1E4F40910], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for _GraphValue<RotateGesture>);
  v13[0] = 1;
  outlined destroy of CoordinateSpaceGesture<TransformEvent>((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for CoordinateSpaceGesture<TransformEvent>, (uint64_t)&type metadata for TransformEvent, v5, (uint64_t (*)(void))type metadata accessor for _GraphValue<RotateGesture>);
  outlined destroy of CoordinateSpace((uint64_t)v10);
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = v1[1];
  *(void *)(v6 + 16) = v3;
  *(void *)(v6 + 24) = v7;
  *(_DWORD *)(v6 + 32) = v4;
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v13, a1, (uint64_t (*)(void))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>);
  *(void *)(a1 + 56) = partial apply for closure #1 in TransformBasedRotationGesture.body.getter;
  *(void *)(a1 + 64) = v6;
  return outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>);
}

double protocol witness for GestureStateProtocol.init() in conformance TouchBasedRotationGesture.StateType@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = 1;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 1;
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = 1;
  *(void *)(a1 + 96) = 0x3FE8000000000000;
  *(void *)(a1 + 136) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(unsigned char *)(a1 + 144) = 1;
  return result;
}

uint64_t TouchBasedRotationGesture.body.getter@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  if (one-time initialization token for all != -1) {
    swift_once();
  }
  char v22 = static _EventDirections.all;
  long long v18 = 0u;
  long long v19 = 0u;
  uint64_t v17 = 0x3FF0000000000000;
  uint64_t v20 = 0;
  char v21 = 2;
  outlined init with copy of DragGesture((uint64_t)&v17, (uint64_t)v13);
  outlined init with copy of DragGesture((uint64_t)&v17, (uint64_t)v14);
  outlined init with copy of DragGesture((uint64_t)v13, (uint64_t)v11);
  outlined init with copy of DragGesture((uint64_t)v14, (uint64_t)&v12);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for Tuple<DragGesture, Tuple<DragGesture, EmptyTuple>>);
  type metadata accessor for Tuple<DragGesture.Value, Tuple<DragGesture.Value, EmptyTuple>>();
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  MapGesture.init(_:)();
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>);
  long long v16 = v10;
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>);
  uint64_t v8 = swift_allocObject();
  *(double *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = a1;
  *(_DWORD *)(v8 + 32) = a2;
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v15, a3, (uint64_t (*)(void))type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>);
  *(void *)(a3 + 128) = partial apply for closure #2 in TouchBasedRotationGesture.body.getter;
  *(void *)(a3 + 136) = v8;
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>);
  return outlined destroy of DragGesture((uint64_t)&v17);
}

uint64_t closure #1 in TouchBasedRotationGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for Tuple<DragGesture.Value, EmptyTuple>();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  uint64_t v8 = a2 + *(int *)(v7 + 48);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(a1, a2, type metadata accessor for DragGesture.Value);
  type metadata accessor for Tuple<DragGesture.Value, Tuple<DragGesture.Value, EmptyTuple>>();
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(a1 + *(int *)(v9 + 44), (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for Tuple<DragGesture.Value, EmptyTuple>);
  return outlined init with take of RotateGesture.Value((uint64_t)v6, v8, type metadata accessor for DragGesture.Value);
}

uint64_t TouchBasedRotationGesture.phase(state:childPhase:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>, double a6@<D0>)
{
  int v119 = a4;
  uint64_t v118 = a3;
  uint64_t v126 = a5;
  uint64_t v127 = a1;
  uint64_t v125 = type metadata accessor for Date();
  uint64_t v128 = *(void *)(v125 - 8);
  MEMORY[0x1F4188790](v125);
  int v121 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  unsigned int v120 = (char *)&v105 - v10;
  MEMORY[0x1F4188790](v11);
  v124 = (char *)&v105 - v12;
  uint64_t v13 = MEMORY[0x1E4F3F5F8];
  type metadata accessor for CategoryGesture<RotateGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t (*)(uint64_t))type metadata accessor for (DragGesture.Value, DragGesture.Value), MEMORY[0x1E4F3F5F8]);
  MEMORY[0x1F4188790](v14);
  long long v16 = (char *)&v105 - v15;
  type metadata accessor for (DragGesture.Value, DragGesture.Value)();
  MEMORY[0x1F4188790](v17);
  long long v19 = (char *)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  char v22 = (char *)&v105 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v123 = (uint64_t)&v105 - v24;
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)&v105 - v26;
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v105 - v29;
  uint64_t v122 = v31;
  uint64_t v32 = *(int *)(v31 + 48);
  outlined init with copy of CoordinateSpaceGesture<TransformEvent>(a2, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), v13, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for CategoryGesture<RotateGesture.Value>);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if ((EnumCaseMultiPayload - 1) >= 2)
  {
    if (!EnumCaseMultiPayload)
    {
      uint64_t v82 = type metadata accessor for RotateGesture.Value();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v126, 1, 1, v82);
      uint64_t v83 = MEMORY[0x1E4F3F5F8];
      type metadata accessor for CategoryGesture<RotateGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E4F3F5F8]);
      swift_storeEnumTagMultiPayload();
      return outlined destroy of CoordinateSpaceGesture<TransformEvent>((uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for GesturePhase<(DragGesture.Value, DragGesture.Value)>, (uint64_t)type metadata accessor for (DragGesture.Value, DragGesture.Value), v83, (uint64_t (*)(void))type metadata accessor for CategoryGesture<RotateGesture.Value>);
    }
    type metadata accessor for CategoryGesture<RotateGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E4F3F5F8]);
    return swift_storeEnumTagMultiPayload();
  }
  int v117 = v22;
  int v116 = v19;
  double v111 = a6;
  uint64_t v113 = a2;
  uint64_t v34 = (uint64_t)&v30[v32];
  uint64_t v35 = v122;
  uint64_t v36 = *(int *)(v122 + 48);
  uint64_t v37 = (uint64_t)&v27[v36];
  uint64_t v38 = (uint64_t)&v16[v36];
  outlined init with take of RotateGesture.Value((uint64_t)v16, (uint64_t)v27, type metadata accessor for DragGesture.Value);
  outlined init with take of RotateGesture.Value(v38, v37, type metadata accessor for DragGesture.Value);
  outlined init with take of RotateGesture.Value((uint64_t)v27, (uint64_t)v30, type metadata accessor for DragGesture.Value);
  outlined init with take of RotateGesture.Value(v37, (uint64_t)&v30[v32], type metadata accessor for DragGesture.Value);
  uint64_t v39 = (uint64_t)&v27[*(int *)(v35 + 48)];
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v30, (uint64_t)v27, type metadata accessor for DragGesture.Value);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)&v30[v32], v39, type metadata accessor for DragGesture.Value);
  uint64_t v40 = type metadata accessor for DragGesture.Value(0);
  uint64_t v41 = (double *)&v27[*(int *)(v40 + 24)];
  double v42 = *v41;
  double v43 = v41[1];
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v27, type metadata accessor for DragGesture.Value);
  uint64_t v44 = v123;
  uint64_t v45 = v123 + *(int *)(v35 + 48);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v30, v123, type metadata accessor for DragGesture.Value);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v34, v45, type metadata accessor for DragGesture.Value);
  uint64_t v46 = (double *)(v45 + *(int *)(v40 + 24));
  double v47 = *v46;
  double v48 = v46[1];
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v45, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v44, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v39, type metadata accessor for DragGesture.Value);
  char v49 = *(unsigned char *)(v127 + 144);
  double v50 = v47;
  double v51 = v48;
  double v110 = v42;
  double v52 = v43;
  if ((v49 & 1) == 0)
  {
    double v50 = *(double *)(v127 + 128);
    double v51 = *(double *)(v127 + 136);
    double v42 = *(double *)(v127 + 112);
    double v52 = *(double *)(v127 + 120);
  }
  double v106 = v42;
  double v107 = v52;
  double v108 = v50;
  double v109 = v51;
  uint64_t v53 = (uint64_t)&v27[*(int *)(v35 + 48)];
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v30, (uint64_t)v27, type metadata accessor for DragGesture.Value);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v34, v53, type metadata accessor for DragGesture.Value);
  char v54 = (double *)&v27[*(int *)(v40 + 20)];
  double v55 = *v54;
  double v56 = v54[1];
  unsigned int v114 = v27;
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v27, type metadata accessor for DragGesture.Value);
  uint64_t v57 = v44 + *(int *)(v35 + 48);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v30, v44, type metadata accessor for DragGesture.Value);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v34, v57, type metadata accessor for DragGesture.Value);
  uint64_t v112 = v40;
  char v58 = (double *)(v57 + *(int *)(v40 + 20));
  double v60 = *v58;
  double v59 = v58[1];
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v57, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v44, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v53, type metadata accessor for DragGesture.Value);
  uint64_t v61 = (uint64_t)v117;
  int v115 = &v117[*(int *)(v35 + 48)];
  uint64_t v62 = (uint64_t)v115;
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v30, (uint64_t)v117, type metadata accessor for DragGesture.Value);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v34, v62, type metadata accessor for DragGesture.Value);
  uint64_t v63 = v34;
  uint64_t v64 = (uint64_t)v30;
  uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v128 + 16);
  uint64_t v66 = v120;
  uint64_t v67 = v125;
  v65(v120, v61, v125);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v61, type metadata accessor for DragGesture.Value);
  uint64_t v68 = (uint64_t)v116;
  uint64_t v69 = (uint64_t)&v116[*(int *)(v35 + 48)];
  int v117 = (char *)v64;
  uint64_t v70 = v64;
  uint64_t v71 = v63;
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v70, (uint64_t)v116, type metadata accessor for DragGesture.Value);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v63, v69, type metadata accessor for DragGesture.Value);
  unsigned int v72 = v121;
  v65(v121, v69, v67);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v69, type metadata accessor for DragGesture.Value);
  lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>((unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date, MEMORY[0x1E4F27928]);
  if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
    uint64_t v73 = v72;
  }
  else {
    uint64_t v73 = v66;
  }
  uint64_t v74 = v124;
  v65(v124, (uint64_t)v73, v67);
  uint64_t v76 = v128 + 8;
  char v75 = *(void (**)(char *, uint64_t))(v128 + 8);
  v75(v72, v67);
  v75(v66, v67);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v68, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v115, type metadata accessor for DragGesture.Value);
  Date.timeIntervalSinceReferenceDate.getter();
  double v78 = v77;
  static Semantics.v6.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    long double v79 = specialized TouchBasedRotationGesture.angle(between:and:)(v106, v107, v108, v109, v55, v56, v60, v59);
    uint64_t v80 = v127;
    double v81 = (v79 * 128.0 + *(double *)(v127 + 104) * 128.0) * 0.0078125;
  }
  else
  {
    double v85 = atan2(v43 - v48, v110 - v47);
    double v81 = atan2(v56 - v59, v55 - v60) - v85;
    uint64_t v80 = v127;
  }
  *(double *)(v80 + 104) = v81;
  *(double *)(v80 + 112) = v55;
  uint64_t v86 = v126;
  uint64_t v87 = (uint64_t)v114;
  *(double *)(v80 + 120) = v56;
  *(double *)(v80 + 128) = v60;
  *(double *)(v80 + 136) = v59;
  *(unsigned char *)(v80 + 144) = 0;
  specialized VelocitySampler.addSample(_:time:)(v81 * 128.0, v78);
  if ((*(unsigned char *)v80 & 1) == 0)
  {
    if (fabs(v81) < v111)
    {
      outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v117, (uint64_t (*)(void))type metadata accessor for (DragGesture.Value, DragGesture.Value));
      v75(v74, v125);
      uint64_t v88 = type metadata accessor for RotateGesture.Value();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v86, 1, 1, v88);
      type metadata accessor for CategoryGesture<RotateGesture.Value>(0, &lazy cache variable for type metadata for GesturePhase<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E4F3F5F8]);
      return swift_storeEnumTagMultiPayload();
    }
    *(unsigned char *)uint64_t v80 = 1;
  }
  uint64_t v89 = v122;
  uint64_t v90 = v87 + *(int *)(v122 + 48);
  int v121 = (char *)v75;
  uint64_t v91 = (uint64_t)v117;
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>((uint64_t)v117, v87, type metadata accessor for DragGesture.Value);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v71, v90, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v87, type metadata accessor for DragGesture.Value);
  uint64_t v92 = *(int *)(v89 + 48);
  uint64_t v128 = v76;
  uint64_t v93 = v71;
  uint64_t v94 = v123;
  uint64_t v95 = v123 + v92;
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v91, v123, type metadata accessor for DragGesture.Value);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v93, v95, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v95, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v94, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v90, type metadata accessor for DragGesture.Value);
  uint64_t v96 = v87 + *(int *)(v89 + 48);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v91, v87, type metadata accessor for DragGesture.Value);
  outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v93, v96, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v87, type metadata accessor for DragGesture.Value);
  uint64_t v97 = v94 + *(int *)(v89 + 48);
  outlined init with take of RotateGesture.Value(v91, v94, type metadata accessor for DragGesture.Value);
  outlined init with take of RotateGesture.Value(v93, v97, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v97, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v94, type metadata accessor for DragGesture.Value);
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(v96, type metadata accessor for DragGesture.Value);
  TransformGestureAnchorHelper.startPoints(_:)();
  double v99 = MEMORY[0x1F4188790](v98);
  int v100 = v124;
  uint64_t v101 = v127;
  *(&v105 - 6) = (uint64_t)v124;
  *(&v105 - 5) = v101;
  *((double *)&v105 - 4) = v99;
  *(&v105 - 3) = v102;
  *(&v105 - 2) = v103;
  *(&v105 - 1) = v104;
  specialized GesturePhase.map<A>(_:)((void (*)(char *))partial apply for closure #1 in TouchBasedRotationGesture.phase(state:childPhase:), (uint64_t)(&v105 - 8), v126);
  return ((uint64_t (*)(char *, uint64_t))v121)(v100, v125);
}

int *closure #1 in TouchBasedRotationGesture.phase(state:childPhase:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, double a6@<D2>, double a7@<D3>)
{
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(a3, a1, v14);
  uint64_t v15 = *(void *)(a2 + 104);
  double v16 = specialized VelocitySampler.velocity.getter((uint64_t)&lazy cache variable for type metadata for (Double, Time)?, (uint64_t)&lazy cache variable for type metadata for (Double, Time), MEMORY[0x1E4FBB3D0])* 0.0078125;
  double result = (int *)type metadata accessor for RotateGesture.Value();
  *(void *)(a3 + result[5]) = v15;
  *(double *)(a3 + result[6]) = v16;
  uint64_t v18 = (double *)(a3 + result[7]);
  *uint64_t v18 = a4;
  v18[1] = a5;
  long long v19 = (double *)(a3 + result[8]);
  *long long v19 = a6;
  v19[1] = a7;
  return result;
}

uint64_t protocol witness for Gesture.body.getter in conformance TouchBasedRotationGesture@<X0>(uint64_t a1@<X8>)
{
  return TouchBasedRotationGesture.body.getter(*(void *)(v1 + 8), *(_DWORD *)(v1 + 16), a1, *(double *)v1);
}

BOOL specialized static RotateGesture.Value.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = type metadata accessor for RotateGesture.Value();
  if (*(double *)(a1 + *(int *)(v4 + 20)) != *(double *)(a2 + *(int *)(v4 + 20))) {
    return 0;
  }
  uint64_t v5 = v4;
  if (*(double *)(a1 + *(int *)(v4 + 24)) != *(double *)(a2 + *(int *)(v4 + 24))
    || (static UnitPoint.== infix(_:_:)() & 1) == 0)
  {
    return 0;
  }
  uint64_t v6 = *(int *)(v5 + 32);
  double v7 = *(double *)(a1 + v6);
  double v8 = *(double *)(a1 + v6 + 8);
  uint64_t v9 = (double *)(a2 + v6);
  double v10 = v9[1];
  BOOL v11 = v7 == *v9;
  return v8 == v10 && v11;
}

void type metadata accessor for ModifierGesture<CategoryGesture<RotateGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CategoryGesture<RotateGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>>)
  {
    type metadata accessor for CategoryGesture<RotateGesture.Value>(255, &lazy cache variable for type metadata for CategoryGesture<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E4F3FAC8]);
    type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>();
    lazy protocol witness table accessor for type CategoryGesture<RotateGesture.Value> and conformance CategoryGesture<A>();
    lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value> and conformance _MapGesture<A, B>, (void (*)(uint64_t))type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CategoryGesture<RotateGesture.Value>, _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>>);
    }
  }
}

void type metadata accessor for _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>()
{
  if (!lazy cache variable for type metadata for _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>)
  {
    type metadata accessor for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>(255, &lazy cache variable for type metadata for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, MEMORY[0x1E4F404E0]);
    type metadata accessor for RotateGesture.Value();
    lazy protocol witness table accessor for type SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture> and conformance SimultaneousGesture<A, B>();
    unint64_t v0 = type metadata accessor for _MapGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, RotateGesture.Value>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransformBasedRotationGesture and conformance TransformBasedRotationGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformBasedRotationGesture and conformance TransformBasedRotationGesture;
  if (!lazy protocol witness table cache variable for type TransformBasedRotationGesture and conformance TransformBasedRotationGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformBasedRotationGesture and conformance TransformBasedRotationGesture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TouchBasedRotationGesture and conformance TouchBasedRotationGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type TouchBasedRotationGesture and conformance TouchBasedRotationGesture;
  if (!lazy protocol witness table cache variable for type TouchBasedRotationGesture and conformance TouchBasedRotationGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchBasedRotationGesture and conformance TouchBasedRotationGesture);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture> and conformance SimultaneousGesture<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture> and conformance SimultaneousGesture<A, B>;
  if (!lazy protocol witness table cache variable for type SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture> and conformance SimultaneousGesture<A, B>)
  {
    type metadata accessor for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>(255, &lazy cache variable for type metadata for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>, MEMORY[0x1E4F404E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture> and conformance SimultaneousGesture<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CategoryGesture<RotateGesture.Value> and conformance CategoryGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CategoryGesture<RotateGesture.Value> and conformance CategoryGesture<A>;
  if (!lazy protocol witness table cache variable for type CategoryGesture<RotateGesture.Value> and conformance CategoryGesture<A>)
  {
    type metadata accessor for CategoryGesture<RotateGesture.Value>(255, &lazy cache variable for type metadata for CategoryGesture<RotateGesture.Value>, (uint64_t (*)(uint64_t))type metadata accessor for RotateGesture.Value, MEMORY[0x1E4F3FAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CategoryGesture<RotateGesture.Value> and conformance CategoryGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RotateGesture.Child and conformance RotateGesture.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type RotateGesture.Child and conformance RotateGesture.Child;
  if (!lazy protocol witness table cache variable for type RotateGesture.Child and conformance RotateGesture.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotateGesture.Child and conformance RotateGesture.Child);
  }
  return result;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in RotationGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in RotationGesture()
{
  return &protocol witness table for RotationGesture;
}

_UNKNOWN **base witness table accessor for Gesture in RotateGesture()
{
  return &protocol witness table for RotateGesture;
}

ValueMetadata *type metadata accessor for RotationGesture()
{
  return &type metadata for RotationGesture;
}

ValueMetadata *type metadata accessor for RotateGesture()
{
  return &type metadata for RotateGesture;
}

uint64_t *initializeBufferWithCopyOfBuffer for RotateGesture.Value(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *(uint64_t *)((char *)a1 + v8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v9 = a3[8];
    *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
    *(_OWORD *)((char *)a1 + v9) = *(_OWORD *)((char *)a2 + v9);
  }
  return a1;
}

uint64_t initializeWithCopy for RotateGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithCopy for RotateGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v7 = a3[7];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  uint64_t v10 = a3[8];
  BOOL v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *BOOL v11 = *v12;
  v11[1] = v12[1];
  return a1;
}

uint64_t initializeWithTake for RotateGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for RotateGesture.Value(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for RotateGesture.Value(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1879D0F24);
}

uint64_t sub_1879D0F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for RotateGesture.Value(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1879D0FA4);
}

uint64_t sub_1879D0FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for RotateGesture.Value()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1879D10C8()
{
  return lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type _MapGesture<RotateGesture, Angle> and conformance _MapGesture<A, B>, (void (*)(uint64_t))type metadata accessor for _MapGesture<RotateGesture, Angle>);
}

void type metadata accessor for _MapGesture<RotateGesture, Angle>()
{
  if (!lazy cache variable for type metadata for _MapGesture<RotateGesture, Angle>)
  {
    unint64_t v0 = type metadata accessor for _MapGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<RotateGesture, Angle>);
    }
  }
}

ValueMetadata *type metadata accessor for RotateGesture.Value.Platform()
{
  return &type metadata for RotateGesture.Value.Platform;
}

void *type metadata accessor for RotateGesture.Child()
{
  return &unk_1ED415418;
}

ValueMetadata *type metadata accessor for TouchBasedRotationGesture()
{
  return &type metadata for TouchBasedRotationGesture;
}

ValueMetadata *type metadata accessor for TransformBasedRotationGesture()
{
  return &type metadata for TransformBasedRotationGesture;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in TouchBasedRotationGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in TransformBasedRotationGesture()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1879D11F4()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TransformBasedRotationGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in TransformBasedRotationGesture.body.getter(a1, a2, a3, *(double *)(v3 + 16));
}

void type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>)
  {
    type metadata accessor for _GraphValue<RotateGesture>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<TransformEvent>, (uint64_t)&type metadata for TransformEvent, MEMORY[0x1E4F40910]);
    type metadata accessor for EventListener<TransformEvent>();
    lazy protocol witness table accessor for type CoordinateSpaceGesture<TransformEvent> and conformance CoordinateSpaceGesture<A>();
    lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type EventListener<TransformEvent> and conformance EventListener<A>, (void (*)(uint64_t))type metadata accessor for EventListener<TransformEvent>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>);
    }
  }
}

void type metadata accessor for EventListener<TransformEvent>()
{
  if (!lazy cache variable for type metadata for EventListener<TransformEvent>)
  {
    lazy protocol witness table accessor for type TransformEvent and conformance TransformEvent();
    unint64_t v0 = type metadata accessor for EventListener();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EventListener<TransformEvent>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransformEvent and conformance TransformEvent()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformEvent and conformance TransformEvent;
  if (!lazy protocol witness table cache variable for type TransformEvent and conformance TransformEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformEvent and conformance TransformEvent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TransformEvent and conformance TransformEvent;
  if (!lazy protocol witness table cache variable for type TransformEvent and conformance TransformEvent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformEvent and conformance TransformEvent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceGesture<TransformEvent> and conformance CoordinateSpaceGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CoordinateSpaceGesture<TransformEvent> and conformance CoordinateSpaceGesture<A>;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceGesture<TransformEvent> and conformance CoordinateSpaceGesture<A>)
  {
    type metadata accessor for _GraphValue<RotateGesture>(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<TransformEvent>, (uint64_t)&type metadata for TransformEvent, MEMORY[0x1E4F40910]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceGesture<TransformEvent> and conformance CoordinateSpaceGesture<A>);
  }
  return result;
}

uint64_t outlined consume of GesturePhase<TransformEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a12 == 2 || a12 == 1) {
    return swift_release();
  }
  if (!a12) {
    return outlined consume of HitTestableEvent?(result, a2, a3);
  }
  return result;
}

void type metadata accessor for CategoryGesture<RotateGesture.Value>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for _GraphValue<RotateGesture>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for (CGFloat, Time)?(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    type metadata accessor for (Double, Time)(255, a3);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for Tuple<DragGesture, Tuple<DragGesture, EmptyTuple>>()
{
  if (!lazy cache variable for type metadata for Tuple<DragGesture, Tuple<DragGesture, EmptyTuple>>)
  {
    type metadata accessor for Tuple<DragGesture, EmptyTuple>();
    lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type Tuple<DragGesture, EmptyTuple> and conformance Tuple<A, B>, (void (*)(uint64_t))type metadata accessor for Tuple<DragGesture, EmptyTuple>);
    unint64_t v0 = type metadata accessor for Tuple();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Tuple<DragGesture, Tuple<DragGesture, EmptyTuple>>);
    }
  }
}

void type metadata accessor for Tuple<DragGesture, EmptyTuple>()
{
  if (!lazy cache variable for type metadata for Tuple<DragGesture, EmptyTuple>)
  {
    unint64_t v0 = type metadata accessor for Tuple();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Tuple<DragGesture, EmptyTuple>);
    }
  }
}

void type metadata accessor for Tuple<DragGesture.Value, Tuple<DragGesture.Value, EmptyTuple>>()
{
  if (!lazy cache variable for type metadata for Tuple<DragGesture.Value, Tuple<DragGesture.Value, EmptyTuple>>)
  {
    type metadata accessor for DragGesture.Value(255);
    type metadata accessor for Tuple<DragGesture.Value, EmptyTuple>();
    lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type Tuple<DragGesture.Value, EmptyTuple> and conformance Tuple<A, B>, (void (*)(uint64_t))type metadata accessor for Tuple<DragGesture.Value, EmptyTuple>);
    unint64_t v0 = type metadata accessor for Tuple();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Tuple<DragGesture.Value, Tuple<DragGesture.Value, EmptyTuple>>);
    }
  }
}

void type metadata accessor for Tuple<DragGesture.Value, EmptyTuple>()
{
  if (!lazy cache variable for type metadata for Tuple<DragGesture.Value, EmptyTuple>)
  {
    type metadata accessor for DragGesture.Value(255);
    unint64_t v0 = type metadata accessor for Tuple();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Tuple<DragGesture.Value, EmptyTuple>);
    }
  }
}

void type metadata accessor for (DragGesture.Value, DragGesture.Value)()
{
  if (!lazy cache variable for type metadata for (DragGesture.Value, DragGesture.Value))
  {
    type metadata accessor for DragGesture.Value(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (DragGesture.Value, DragGesture.Value));
    }
  }
}

void type metadata accessor for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>()
{
  if (!lazy cache variable for type metadata for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>)
  {
    type metadata accessor for TupleGesture<DragGesture, EmptyTupleGesture>();
    lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type TupleGesture<DragGesture, EmptyTupleGesture> and conformance TupleGesture<A, B>, (void (*)(uint64_t))type metadata accessor for TupleGesture<DragGesture, EmptyTupleGesture>);
    lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type Tuple<DragGesture.Value, EmptyTuple> and conformance Tuple<A, B>, (void (*)(uint64_t))type metadata accessor for Tuple<DragGesture.Value, EmptyTuple>);
    unint64_t v0 = type metadata accessor for TupleGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>);
    }
  }
}

void type metadata accessor for TupleGesture<DragGesture, EmptyTupleGesture>()
{
  if (!lazy cache variable for type metadata for TupleGesture<DragGesture, EmptyTupleGesture>)
  {
    unint64_t v0 = type metadata accessor for TupleGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TupleGesture<DragGesture, EmptyTupleGesture>);
    }
  }
}

uint64_t sub_1879D1954()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in TouchBasedRotationGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TouchBasedRotationGesture.phase(state:childPhase:)(a1, a2, *(void *)(v3 + 24), *(_DWORD *)(v3 + 32), a3, *(double *)(v3 + 16));
}

void type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>()
{
  if (!lazy cache variable for type metadata for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>)
  {
    type metadata accessor for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>();
    type metadata accessor for (DragGesture.Value, DragGesture.Value)();
    lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>> and conformance TupleGesture<A, B>, (void (*)(uint64_t))type metadata accessor for TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>);
    unint64_t v0 = type metadata accessor for _MapGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>);
    }
  }
}

uint64_t outlined destroy of DragGesture(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of CoordinateSpaceGesture<TransformEvent>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t outlined destroy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

int *partial apply for closure #1 in TouchBasedRotationGesture.phase(state:childPhase:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TouchBasedRotationGesture.phase(state:childPhase:)(*(void *)(v1 + 16), *(void *)(v1 + 24), a1, *(double *)(v1 + 32), *(double *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56));
}

long double specialized TouchBasedRotationGesture.angle(between:and:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  double v8 = (a2 - a4) / (a1 - a3);
  double v9 = (a6 - a8) / (a5 - a7);
  if (v8 * v9 != -1.0) {
    return -atan((v8 - v9) / (v8 * v9 + 1.0));
  }
  if (v9 < v8) {
    return 1.57079633;
  }
  BOOL v11 = v8 < v9;
  long double result = -1.57079633;
  if (!v11) {
    return 0.0;
  }
  return result;
}

uint64_t outlined init with take of RotateGesture.Value(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of CoordinateSpaceGesture<TransformEvent>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t outlined init with copy of ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (Double, Time)(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t outlined init with take of Angle?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

void type metadata accessor for (AnimatablePair<CGFloat, CGFloat>, Time)()
{
  if (!lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time))
  {
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (AnimatablePair<CGFloat, CGFloat>, Time));
    }
  }
}

void type metadata accessor for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    v8[0] = &type metadata for TransformBasedRotationGesture;
    v8[1] = &type metadata for TouchBasedRotationGesture;
    v8[2] = lazy protocol witness table accessor for type TransformBasedRotationGesture and conformance TransformBasedRotationGesture();
    v8[3] = lazy protocol witness table accessor for type TouchBasedRotationGesture and conformance TouchBasedRotationGesture();
    unint64_t v6 = a3(a1, v8);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined init with copy of SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value(uint64_t a1, uint64_t a2)
{
  type metadata accessor for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>(0, &lazy cache variable for type metadata for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value, MEMORY[0x1E4F404D8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value(uint64_t a1)
{
  type metadata accessor for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>(0, &lazy cache variable for type metadata for SimultaneousGesture<TransformBasedRotationGesture, TouchBasedRotationGesture>.Value, MEMORY[0x1E4F404D8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransformBasedRotationGesture.StateType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[120]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TransformBasedRotationGesture.StateType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)long double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 120) = 0;
    }
    if (a2) {
      *(unsigned char *)long double result = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for TransformBasedRotationGesture.StateType()
{
  return &unk_1ED457478;
}

uint64_t getEnumTagSinglePayload for TouchBasedRotationGesture.StateType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[145]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for TouchBasedRotationGesture.StateType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 144) = 0;
    *(void *)long double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 145) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 145) = 0;
    }
    if (a2) {
      *(unsigned char *)long double result = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for TouchBasedRotationGesture.StateType()
{
  return &unk_1ED4493C0;
}

uint64_t sub_1879D2158()
{
  return lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>);
}

void type metadata accessor for ModifierGesture<StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>)
  {
    type metadata accessor for StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>();
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>();
    lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value> and conformance StateContainerGesture<A, B, C>, (void (*)(uint64_t))type metadata accessor for StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>);
    lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>, ModifierGesture<CoordinateSpaceGesture<TransformEvent>, EventListener<TransformEvent>>>);
    }
  }
}

void type metadata accessor for StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>()
{
  if (!lazy cache variable for type metadata for StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>)
  {
    type metadata accessor for RotateGesture.Value();
    lazy protocol witness table accessor for type TransformBasedRotationGesture.StateType and conformance TransformBasedRotationGesture.StateType();
    unint64_t v0 = type metadata accessor for StateContainerGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<TransformBasedRotationGesture.StateType, TransformEvent, RotateGesture.Value>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TransformBasedRotationGesture.StateType and conformance TransformBasedRotationGesture.StateType()
{
  unint64_t result = lazy protocol witness table cache variable for type TransformBasedRotationGesture.StateType and conformance TransformBasedRotationGesture.StateType;
  if (!lazy protocol witness table cache variable for type TransformBasedRotationGesture.StateType and conformance TransformBasedRotationGesture.StateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TransformBasedRotationGesture.StateType and conformance TransformBasedRotationGesture.StateType);
  }
  return result;
}

uint64_t sub_1879D2360()
{
  return lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>);
}

void type metadata accessor for ModifierGesture<StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>)
  {
    type metadata accessor for StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>();
    type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>();
    lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value> and conformance StateContainerGesture<A, B, C>, (void (*)(uint64_t))type metadata accessor for StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>);
    lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>(&lazy protocol witness table cache variable for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>, (void (*)(uint64_t))type metadata accessor for _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>, _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)>>);
    }
  }
}

void type metadata accessor for StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>()
{
  if (!lazy cache variable for type metadata for StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>)
  {
    type metadata accessor for (DragGesture.Value, DragGesture.Value)();
    type metadata accessor for RotateGesture.Value();
    lazy protocol witness table accessor for type TouchBasedRotationGesture.StateType and conformance TouchBasedRotationGesture.StateType();
    unint64_t v0 = type metadata accessor for StateContainerGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<TouchBasedRotationGesture.StateType, (DragGesture.Value, DragGesture.Value), RotateGesture.Value>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TouchBasedRotationGesture.StateType and conformance TouchBasedRotationGesture.StateType()
{
  unint64_t result = lazy protocol witness table cache variable for type TouchBasedRotationGesture.StateType and conformance TouchBasedRotationGesture.StateType;
  if (!lazy protocol witness table cache variable for type TouchBasedRotationGesture.StateType and conformance TouchBasedRotationGesture.StateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TouchBasedRotationGesture.StateType and conformance TouchBasedRotationGesture.StateType);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _MapGesture<TupleGesture<DragGesture, TupleGesture<DragGesture, EmptyTupleGesture>>, (DragGesture.Value, DragGesture.Value)> and conformance _MapGesture<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t TextField.init<A>(_:format:prompt:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v26 = a8;
  uint64_t v29 = a7;
  uint64_t v30 = a6;
  uint64_t v28 = a5;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v33 = a1;
  uint64_t v27 = a9;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(a1, a2, a11, a13, (uint64_t)v34);
  uint64_t v18 = v34[12];
  uint64_t v19 = v34[13];
  uint64_t v20 = v34[14];
  uint64_t v21 = v34[15];
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v17, 1, 1, v22);
  TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)v34, v18, v19, v20, v21, 0, v31, v32, v27, v28, v30, 0, (uint64_t)v17, v29, v26, a10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a11 - 8) + 8))(a2, a11);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  uint64_t v23 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v33, v23);
}

{
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void v34[17];

  uint64_t v26 = a8;
  uint64_t v29 = a7;
  uint64_t v30 = a6;
  uint64_t v28 = a5;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v33 = a1;
  uint64_t v27 = a9;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(a1, a2, a11, a13, (uint64_t)v34);
  uint64_t v18 = v34[12];
  uint64_t v19 = v34[13];
  uint64_t v20 = v34[14];
  uint64_t v21 = v34[15];
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v17, 1, 1, v22);
  TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)v34, v18, v19, v20, v21, 0, v31, v32, v27, v28, v30, 0, (uint64_t)v17, v29, v26, a10);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a11 - 8) + 8))(a2, a11);
  swift_getAssociatedTypeWitness();
  uint64_t v23 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(v33, v23);
}

uint64_t TextField.init<A>(_:formatter:prompt:onEditingChanged:onCommit:label:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, void (*a12)(uint64_t), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v44 = a6;
  uint64_t v43 = a5;
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v42 = a9;
  uint64_t v40 = a16;
  uint64_t v39 = a14;
  uint64_t v38 = a13;
  uint64_t v41 = a12;
  uint64_t v47 = a11;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = 0;
  uint64_t v48 = a7;
  if (a7)
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    if (a10)
    {
      uint64_t v23 = v48;
      outlined copy of AppIntentExecutor?(v48);
      uint64_t v26 = v47;
      outlined copy of AppIntentExecutor?(a10);
      uint64_t v24 = a8;
      uint64_t v25 = a10;
    }
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:)(a1, a2, v23, v24, v25, v26, a15, (uint64_t)v49);
  id v35 = a2;
  uint64_t v36 = a15;
  uint64_t v28 = v49[12];
  uint64_t v27 = v49[13];
  uint64_t v37 = a1;
  uint64_t v34 = a8;
  uint64_t v29 = v49[14];
  uint64_t v30 = v49[15];
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v22, 1, 1, v31);
  TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)v49, v28, v27, v29, v30, 0, v45, v46, v42, v43, v44, 0, (uint64_t)v22, v41, v38, v39);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a10);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v48);

  outlined consume of TextFieldState.FormatActions?(v23);
  uint64_t v32 = type metadata accessor for Binding();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8))(v37, v32);
}

uint64_t specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, uint64_t a17)
{
  uint64_t v62 = a7;
  uint64_t v63 = a8;
  int v61 = a6;
  uint64_t v69 = a3;
  uint64_t v70 = a5;
  uint64_t v60 = a4;
  uint64_t v67 = a9;
  uint64_t v68 = a2;
  int v66 = a16;
  uint64_t v71 = a15;
  uint64_t v72 = a17;
  uint64_t v64 = a13;
  uint64_t v65 = a14;
  int v59 = a12 & 1;
  long long v18 = *(_OWORD *)a1;
  long long v57 = *(_OWORD *)(a1 + 16);
  long long v58 = v18;
  long long v56 = *(_OWORD *)(a1 + 32);
  long long v55 = *(_OWORD *)(a1 + 48);
  uint64_t v54 = *(void *)(a1 + 64);
  uint64_t v53 = *(void *)(a1 + 72);
  char v19 = *(unsigned char *)(a1 + 80);
  char v20 = *(unsigned char *)(a1 + 88);
  uint64_t v52 = *(unsigned __int8 *)(a1 + 89);
  char v21 = *(unsigned char *)(a1 + 90);
  char v22 = *(unsigned char *)(a1 + 91);
  uint64_t v23 = v19 & 1;
  uint64_t v24 = v20 & 1;
  uint64_t v25 = *(unsigned int *)(a1 + 84);
  _ss8RangeSetVySS5IndexVGMaTm_0(0, &lazy cache variable for type metadata for TextField<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  MEMORY[0x1F4188790](v26 - 8);
  uint64_t v28 = (char *)&v49 - v27;
  uint64_t v51 = (uint64_t)&v49 + *(int *)(v29 + 64) - v27;
  uint64_t v30 = v51;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
  long long v32 = v57;
  *((_OWORD *)v28 + 7) = v58;
  *((_OWORD *)v28 + 8) = v32;
  long long v33 = v55;
  *((_OWORD *)v28 + 9) = v56;
  *((_OWORD *)v28 + 10) = v33;
  unint64_t v34 = (v24 | (v52 << 8)) & 0xFFFFFFFFFFFEFFFFLL | ((unint64_t)(v21 & 1) << 16);
  uint64_t v35 = v53;
  *((void *)v28 + 22) = v54;
  *((void *)v28 + 23) = v35;
  *((void *)v28 + 24) = v23 | (v25 << 32);
  *((void *)v28 + 25) = v34 & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)(v22 & 1) << 24);
  *((void *)v28 + 26) = 0;
  *((_DWORD *)v28 + 54) = 0;
  v28[220] = 0;
  uint64_t v36 = v69;
  *(void *)uint64_t v28 = v68;
  *((void *)v28 + 1) = v36;
  uint64_t v37 = v70;
  *((void *)v28 + 2) = v60;
  *((void *)v28 + 3) = v37;
  v28[32] = v61;
  uint64_t v39 = v62;
  uint64_t v38 = v63;
  *((void *)v28 + 10) = v62;
  *((void *)v28 + 11) = v38;
  uint64_t v50 = a10;
  *((void *)v28 + 12) = a10;
  *((void *)v28 + 13) = a11;
  v28[72] = v59;
  outlined retain of TextFieldState(a1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v40 = v38;
  outlined copy of Text?(v39, v38, a10, a11);
  uint64_t v41 = v64;
  outlined assign with copy of Binding<TextSelection?>?(v64, v51);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v42 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v44 = v43;
  LOBYTE(v37) = v45;
  uint64_t v47 = v46;
  outlined consume of Text?(v39, v40, v50, a11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined release of TextFieldState(a1);
  outlined destroy of ResolvedTextFieldStyle(v41, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>?);
  *((void *)v28 + 5) = v42;
  *((void *)v28 + 6) = v44;
  v28[56] = v37 & 1;
  *((void *)v28 + 8) = v47;
  outlined init with take of TextField<Text>((uint64_t)v28, v67);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  return specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
}

double specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void (*a14)(long long *__return_ptr, uint64_t))
{
  long long v34 = *(_OWORD *)(a1 + 16);
  long long v35 = *(_OWORD *)a1;
  long long v32 = *(_OWORD *)(a1 + 48);
  long long v33 = *(_OWORD *)(a1 + 32);
  uint64_t v30 = *(void *)(a1 + 72);
  uint64_t v31 = *(void *)(a1 + 64);
  uint64_t v29 = *(unsigned __int8 *)(a1 + 89);
  char v17 = *(unsigned char *)(a1 + 90);
  char v18 = *(unsigned char *)(a1 + 91);
  uint64_t v19 = *(unsigned char *)(a1 + 80) & 1;
  uint64_t v20 = *(unsigned char *)(a1 + 88) & 1;
  uint64_t v21 = *(unsigned int *)(a1 + 84);
  _ss8RangeSetVySS5IndexVGMaTm_0(0, &lazy cache variable for type metadata for TextField<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v23 = a9 + *(int *)(v22 + 56);
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  *(_OWORD *)(a9 + 112) = v35;
  *(_OWORD *)(a9 + 128) = v34;
  *(_OWORD *)(a9 + 144) = v33;
  *(_OWORD *)(a9 + 160) = v32;
  *(void *)(a9 + 176) = v31;
  *(void *)(a9 + 184) = v30;
  *(void *)(a9 + 192) = v19 | (v21 << 32);
  *(void *)(a9 + 200) = (v20 | (v29 << 8)) & 0xFFFFFFFFFEFEFFFFLL | ((unint64_t)(v17 & 1) << 16) & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)(v18 & 1) << 24);
  *(void *)(a9 + 208) = 0;
  *(_DWORD *)(a9 + 216) = 0;
  *(unsigned char *)(a9 + 220) = 0;
  *(void *)a9 = a2;
  *(void *)(a9 + 8) = a3;
  *(void *)(a9 + 16) = a4;
  *(void *)(a9 + 24) = a5;
  *(unsigned char *)(a9 + 32) = a6;
  *(void *)(a9 + 80) = a7;
  *(void *)(a9 + 88) = a8;
  *(void *)(a9 + 96) = a10;
  *(void *)(a9 + 104) = a11;
  *(unsigned char *)(a9 + 72) = a12 & 1;
  outlined retain of TextFieldState(a1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Text?(a7, a8, a10, a11);
  uint64_t v25 = outlined assign with copy of Binding<TextSelection?>?(a13, v23);
  a14(&v42, v25);
  outlined consume of Text?(a7, a8, a10, a11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined release of TextFieldState(a1);
  outlined destroy of ResolvedTextFieldStyle(a13, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>?);
  char v26 = v43;
  uint64_t v27 = v44;
  double result = *(double *)&v42;
  *(_OWORD *)(a9 + 40) = v42;
  *(unsigned char *)(a9 + 56) = v26;
  *(void *)(a9 + 64) = v27;
  return result;
}

uint64_t TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void (*a14)(uint64_t), uint64_t a15, uint64_t a16)
{
  uint64_t v62 = a5;
  uint64_t v63 = a8;
  uint64_t v58 = a7;
  uint64_t v61 = a4;
  uint64_t v69 = a2;
  uint64_t v70 = a3;
  uint64_t v65 = a13;
  uint64_t v66 = a15;
  uint64_t v67 = a14;
  int v60 = a12 & 1;
  long long v19 = *(_OWORD *)a1;
  long long v56 = *(_OWORD *)(a1 + 16);
  long long v57 = v19;
  long long v20 = *(_OWORD *)(a1 + 32);
  long long v54 = *(_OWORD *)(a1 + 48);
  long long v55 = v20;
  uint64_t v53 = *(void *)(a1 + 64);
  uint64_t v52 = *(void *)(a1 + 72);
  char v21 = *(unsigned char *)(a1 + 80);
  char v22 = *(unsigned char *)(a1 + 88);
  uint64_t v51 = *(unsigned __int8 *)(a1 + 89);
  uint64_t v50 = *(unsigned __int8 *)(a1 + 90);
  uint64_t v48 = *(unsigned __int8 *)(a1 + 91);
  uint64_t v23 = v21 & 1;
  uint64_t v46 = v22 & 1;
  uint64_t v64 = a16;
  uint64_t v68 = *(void *)(a16 - 8);
  uint64_t v24 = *(unsigned int *)(a1 + 84);
  MEMORY[0x1F4188790](a1);
  int v59 = (char *)&v46 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for TextField();
  uint64_t v27 = (uint64_t *)(a9 + *(int *)(v26 + 48));
  uint64_t v28 = v26;
  uint64_t v47 = a9 + *(int *)(v26 + 56);
  uint64_t v29 = v47;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v29, 1, 1, v30);
  uint64_t v31 = v28;
  uint64_t v49 = v28;
  uint64_t v32 = a9 + *(int *)(v28 + 52);
  long long v33 = v56;
  *(_OWORD *)uint64_t v32 = v57;
  *(_OWORD *)(v32 + 16) = v33;
  uint64_t v34 = v46 | (v51 << 8);
  long long v35 = v54;
  *(_OWORD *)(v32 + 32) = v55;
  *(_OWORD *)(v32 + 48) = v35;
  unint64_t v36 = v34 & 0xFFFFFFFFFEFEFFFFLL | ((unint64_t)(v50 & 1) << 16) & 0xFFFFFFFFFEFFFFFFLL | ((unint64_t)(v48 & 1) << 24);
  uint64_t v37 = v52;
  *(void *)(v32 + 64) = v53;
  *(void *)(v32 + 72) = v37;
  *(void *)(v32 + 80) = v23 | (v24 << 32);
  *(void *)(v32 + 88) = v36;
  *(void *)(v32 + 96) = 0;
  *(_DWORD *)(v32 + 104) = 0;
  *(unsigned char *)(v32 + 108) = 0;
  uint64_t v38 = v70;
  *(void *)a9 = v69;
  *(void *)(a9 + 8) = v38;
  uint64_t v39 = v62;
  *(void *)(a9 + 16) = v61;
  *(void *)(a9 + 24) = v39;
  *(unsigned char *)(a9 + 32) = a6;
  uint64_t v40 = v58;
  uint64_t v41 = v63;
  *uint64_t v27 = v58;
  v27[1] = v41;
  v27[2] = a10;
  v27[3] = a11;
  *(unsigned char *)(a9 + *(int *)(v31 + 44)) = v60;
  outlined retain of TextFieldState(a1);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Text?(v40, v41, a10, a11);
  uint64_t v42 = v65;
  uint64_t v43 = outlined assign with copy of Binding<TextSelection?>?(v65, v47);
  uint64_t v44 = v59;
  v67(v43);
  outlined consume of Text?(v40, v41, a10, a11);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined release of TextFieldState(a1);
  outlined destroy of ResolvedTextFieldStyle(v42, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>?);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v68 + 32))(a9 + *(int *)(v49 + 40), v44, v64);
}

double static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v33 = a1;
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = v9;
  uint64_t v30 = a2;
  uint64_t v31 = v9;
  uint64_t v34 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OptionalFormatInputToString();
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = MEMORY[0x1F4188790](v13);
  char v17 = (char *)&v29 - v16;
  char v18 = *(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16);
  v18(v12, a2, a3, v15);
  OptionalFormatInputToString.init(format:)(v12, a3, a4);
  swift_getAssociatedTypeWitness();
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  uint64_t v19 = v36;
  uint64_t v20 = v37;
  uint64_t v21 = v39;
  uint64_t v33 = v38;
  ((void (*)(char *, uint64_t, uint64_t))v18)(v12, v30, a3);
  uint64_t v22 = v31;
  unint64_t v23 = (*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  uint64_t v24 = swift_allocObject();
  uint64_t v25 = v32;
  *(void *)(v24 + 16) = a3;
  *(void *)(v24 + 24) = v25;
  (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v24 + v23, v12, a3);
  uint64_t v36 = v19;
  uint64_t v37 = v20;
  uint64_t v26 = v33;
  uint64_t v38 = v33;
  uint64_t v39 = v21;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v35);
  uint64_t v27 = v35[1];
  *(void *)a5 = v35[0];
  *(void *)(a5 + 8) = v27;
  *(void *)(a5 + 16) = protocol witness for static PreferenceKey._isReadableByHost.getter in conformance AccessibilityLargeContentViewTree.Key;
  *(void *)(a5 + 24) = 0;
  *(void *)(a5 + 32) = partial apply for closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:);
  *(void *)(a5 + 40) = v24;
  *(_DWORD *)(a5 + 84) = 0;
  double result = 0.0;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(unsigned char *)(a5 + 80) = 0;
  *(unsigned char *)(a5 + 88) = 1;
  *(_WORD *)(a5 + 89) = 2;
  *(unsigned char *)(a5 + 91) = 0;
  *(void *)(a5 + 96) = v19;
  *(void *)(a5 + 104) = v20;
  *(void *)(a5 + 112) = v26;
  *(void *)(a5 + 120) = v21;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t, double);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(unint64_t, char *, uint64_t);
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double result;
  void (*v42)(unint64_t, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void v57[2];
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  uint64_t v48 = a2;
  long long v55 = a1;
  swift_getAssociatedTypeWitness();
  long long v54 = type metadata accessor for Binding();
  uint64_t v51 = *(void *)(v54 - 8);
  uint64_t v52 = *(void *)(v51 + 64);
  MEMORY[0x1F4188790](v54);
  uint64_t v50 = (char *)&v42 - v8;
  long long v56 = *(void *)(a3 - 8);
  uint64_t v9 = v56;
  uint64_t v47 = *(void *)(v56 + 64);
  MEMORY[0x1F4188790](v10);
  uint64_t v49 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v42 - v13;
  uint64_t v53 = a4;
  double v15 = type metadata accessor for FormatInputToString();
  uint64_t v16 = *(void *)(v15 - 8);
  char v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v42 - v18;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16);
  uint64_t v21 = v48;
  v20(v14, v48, a3, v17);
  OptionalFormatInputToString.init(format:)(v14, a3, a4);
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  char v45 = v59;
  uint64_t v46 = v58;
  uint64_t v43 = v61;
  uint64_t v44 = v60;
  ((void (*)(char *, uint64_t, uint64_t))v20)(v14, v21, a3);
  uint64_t v22 = v56;
  unint64_t v23 = (*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
  uint64_t v24 = v23 + v47;
  uint64_t v25 = swift_allocObject();
  uint64_t v47 = v25;
  uint64_t v26 = v53;
  *(void *)(v25 + 16) = a3;
  *(void *)(v25 + 24) = v26;
  uint64_t v27 = *(void (**)(unint64_t, char *, uint64_t))(v22 + 32);
  long long v56 = v22 + 32;
  uint64_t v42 = v27;
  v27(v25 + v23, v14, a3);
  uint64_t v28 = v49;
  ((void (*)(char *, uint64_t, uint64_t))v20)(v49, v21, a3);
  uint64_t v30 = v50;
  uint64_t v29 = v51;
  uint64_t v31 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v50, v55, v54);
  uint64_t v32 = (v24 + *(unsigned __int8 *)(v29 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = v53;
  *(void *)(v33 + 16) = a3;
  *(void *)(v33 + 24) = v34;
  v42(v33 + v23, v28, a3);
  (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v33 + v32, v30, v31);
  uint64_t v36 = v45;
  long long v35 = v46;
  uint64_t v58 = v46;
  int v59 = v45;
  uint64_t v38 = v43;
  uint64_t v37 = v44;
  int v60 = v44;
  uint64_t v61 = v43;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v57);
  uint64_t v39 = v57[1];
  *(void *)a5 = v57[0];
  *(void *)(a5 + 8) = v39;
  uint64_t v40 = v47;
  *(void *)(a5 + 16) = partial apply for closure #1 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:);
  *(void *)(a5 + 24) = v40;
  *(void *)(a5 + 32) = partial apply for closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:);
  *(void *)(a5 + 40) = v33;
  *(_DWORD *)(a5 + 84) = 0;
  double result = 0.0;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(unsigned char *)(a5 + 80) = 0;
  *(unsigned char *)(a5 + 88) = 1;
  *(_WORD *)(a5 + 89) = 2;
  *(unsigned char *)(a5 + 91) = 0;
  *(void *)(a5 + 96) = v35;
  *(void *)(a5 + 104) = v36;
  *(void *)(a5 + 112) = v37;
  *(void *)(a5 + 120) = v38;
  return result;
}

void *static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v36 = a7;
  uint64_t v11 = type metadata accessor for Binding();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x1F4188790](v11);
  double v15 = (char *)&v31 - v14;
  type metadata accessor for AnyToFormattedString();
  id v16 = a2;
  v41[0] = AnyToFormattedString.__allocating_init(_:)(v16);
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  swift_release();
  uint64_t v18 = v42;
  uint64_t v17 = v43;
  uint64_t v34 = v42;
  uint64_t v35 = v43;
  uint64_t v32 = v45;
  uint64_t v33 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, v11);
  unint64_t v19 = (*(unsigned __int8 *)(v12 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v36;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v20 + v19, v15, v11);
  *(void *)(v20 + ((v13 + v19 + 7) & 0xFFFFFFFFFFFFFFF8)) = v16;
  uint64_t v42 = v18;
  uint64_t v43 = v17;
  uint64_t v21 = v32;
  uint64_t v22 = v33;
  uint64_t v44 = v33;
  uint64_t v45 = v32;
  id v23 = v16;
  uint64_t v25 = v37;
  uint64_t v24 = v38;
  uint64_t v27 = v39;
  uint64_t v26 = v40;
  outlined copy of TextFieldState.FormatActions?(v37);
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  double result = MEMORY[0x18C113DA0](v41);
  uint64_t v29 = v41[1];
  *(void *)a8 = v41[0];
  *(void *)(a8 + 8) = v29;
  *(void *)(a8 + 16) = closure #1 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:);
  *(void *)(a8 + 24) = 0;
  *(void *)(a8 + 32) = partial apply for closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:);
  *(void *)(a8 + 40) = v20;
  *(void *)(a8 + 48) = v25;
  *(void *)(a8 + 56) = v24;
  *(void *)(a8 + 64) = v27;
  *(void *)(a8 + 72) = v26;
  *(unsigned char *)(a8 + 80) = 0;
  *(_DWORD *)(a8 + 84) = 0;
  *(unsigned char *)(a8 + 88) = 1;
  *(_WORD *)(a8 + 89) = 2;
  *(unsigned char *)(a8 + 91) = 0;
  uint64_t v30 = v35;
  *(void *)(a8 + 96) = v34;
  *(void *)(a8 + 104) = v30;
  *(void *)(a8 + 112) = v22;
  *(void *)(a8 + 120) = v21;
  return result;
}

Swift::Void __swiftcall TextFieldState.endEditing()()
{
  uint64_t v1 = v0;
  static Semantics.v3.getter();
  *(unsigned char *)(v0 + 80) = (isLinkedOnOrAfter(_:)() & 1) == 0;
  if (*(void *)(v0 + 16))
  {
    uint64_t v2 = (*(uint64_t (**)(void, void))(v0 + 32))(*(void *)v0, *(void *)(v0 + 8));
    if (v3)
    {
      uint64_t v4 = v2;
      uint64_t v5 = v3;
      swift_bridgeObjectRelease();
      *(void *)uint64_t v1 = v4;
      *(void *)(v1 + 8) = v5;
    }
  }
  if (*(void *)(v1 + 48)) {
    (*(void (**)(void))(v1 + 48))(0);
  }
  *(_WORD *)(v1 + 90) = 0;
}

uint64_t protocol witness for Projection.get(base:) in conformance TextFieldStateTextProjection@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v7 = a1[7];
  uint64_t v9 = a1[9];
  uint64_t v29 = a1[8];
  uint64_t v30 = a1[2];
  uint64_t v10 = a1[10];
  uint64_t v21 = a1[1];
  uint64_t v22 = a1[11];
  int v27 = *((_DWORD *)a1 + 25);
  char v28 = *((unsigned char *)a1 + 96);
  char v25 = *((unsigned char *)a1 + 105);
  char v26 = *((unsigned char *)a1 + 104);
  char v23 = *((unsigned char *)a1 + 107);
  char v24 = *((unsigned char *)a1 + 106);
  if (*a1 == v30 && a1[1] == v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v11 = v5;
    uint64_t v12 = v5;
    uint64_t v13 = v6;
    uint64_t v14 = v8;
    uint64_t v15 = v7;
    outlined copy of TextFieldState.FormatActions?(v12);
    uint64_t v16 = v29;
    uint64_t v17 = v22;
    outlined copy of TextFieldState.FormatActions?(v29);
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v20 = v5;
    uint64_t v18 = v5;
    uint64_t v13 = v6;
    uint64_t v14 = v8;
    uint64_t v15 = v7;
    outlined copy of TextFieldState.FormatActions?(v18);
    uint64_t v16 = v29;
    uint64_t v17 = v22;
    outlined copy of TextFieldState.FormatActions?(v29);
    uint64_t v4 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v30 = v3;
    uint64_t v11 = v20;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v30;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + 16) = v11;
  *(void *)(a2 + 24) = v13;
  *(void *)(a2 + 32) = v14;
  *(void *)(a2 + 40) = v15;
  *(void *)(a2 + 48) = v16;
  *(void *)(a2 + 56) = v9;
  *(void *)(a2 + 64) = v10;
  *(void *)(a2 + 72) = v17;
  *(unsigned char *)(a2 + 80) = v28;
  *(_DWORD *)(a2 + 84) = v27;
  *(unsigned char *)(a2 + 88) = v26;
  *(unsigned char *)(a2 + 89) = v25;
  *(unsigned char *)(a2 + 90) = v24;
  *(unsigned char *)(a2 + 91) = v23;
  return result;
}

double protocol witness for Projection.set(base:newValue:) in conformance TextFieldStateTextProjection(uint64_t a1, _OWORD *a2)
{
  long long v2 = a2[3];
  v5[2] = a2[2];
  v5[3] = v2;
  v6[0] = a2[4];
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)a2 + 76);
  long long v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  *(void *)&double result = specialized TextFieldStateTextProjection.set(base:newValue:)(a1, (uint64_t)v5).n128_u64[0];
  return result;
}

uint64_t closure #1 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v12 - v4;
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v12 - v9;
  dispatch thunk of ParseableFormatStyle.parseStrategy.getter();
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of ParseStrategy.parse(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v10, 0, 1, v6);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return 1;
}

uint64_t closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v22[3] = a4;
  uint64_t v23 = a1;
  uint64_t v27 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v24 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)v22 - v10;
  uint64_t v25 = *(void *)(a6 + 8);
  uint64_t v12 = swift_getAssociatedTypeWitness();
  uint64_t v13 = type metadata accessor for Optional();
  v22[1] = *(void *)(v13 - 8);
  void v22[2] = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v22 - v14;
  uint64_t v16 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v17);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v22 - v19;
  uint64_t v26 = a3;
  dispatch thunk of ParseableFormatStyle.parseStrategy.getter();
  uint64_t v28 = v23;
  uint64_t v29 = v27;
  uint64_t v27 = a5;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of ParseStrategy.parse(_:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v15, 0, 1, v12);
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v20, v15, v12);
  dispatch thunk of FormatStyle.format(_:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v20, v12);
  return v28;
}

uint64_t closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a1;
  uint64_t v22 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)v20 - v9;
  v20[1] = *(void *)(a5 + 8);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = type metadata accessor for Optional();
  v20[3] = *(void *)(v12 - 8);
  v20[4] = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v20 - v13;
  uint64_t v15 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v20 - v17;
  v20[2] = a3;
  dispatch thunk of ParseableFormatStyle.parseStrategy.getter();
  uint64_t v23 = v21;
  uint64_t v24 = v22;
  swift_getAssociatedConformanceWitness();
  dispatch thunk of ParseStrategy.parse(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, v11);
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, v11);
  dispatch thunk of FormatStyle.format(_:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v11);
  return v23;
}

uint64_t closure #1 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:)()
{
  return isLinkedOnOrAfter(_:)() & 1;
}

uint64_t closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:)(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Binding();
  MEMORY[0x18C113DA0](v12);
  type metadata accessor for AnyToFormattedString();
  static AnyToFormattedString.applyFormatting(to:string:formatter:)((uint64_t)v11, a1, a2, a4);
  id v13 = objc_msgSend(a4, sel_stringForObjectValue_, _bridgeAnythingToObjectiveC<A>(_:)());
  swift_unknownObjectRelease();
  if (v13)
  {
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v14 = 0;
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a5);
  return v14;
}

uint64_t TextField<>.init(_:text:axis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  int v23 = a3;
  uint64_t v22 = a9;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  *(void *)&long long v27 = a7;
  *((void *)&v27 + 1) = a8;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v24);
  uint64_t v25 = v24[0];
  uint64_t v26 = v24[1];
  int v32 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  char v31 = 0;
  char v33 = 1;
  __int16 v34 = 2;
  char v35 = 0;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  return specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v25, a5, a6, a7, a8, 0, 0, 0, v22, 0, 0, a10 & 1, (uint64_t)v19, a1, a2, v23, a4);
}

uint64_t TextField<>.init(_:text:prompt:axis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v29 = a1;
  uint64_t v30 = a9;
  uint64_t v31 = a11;
  uint64_t v32 = a10;
  uint64_t v27 = a13;
  uint64_t v28 = a12;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v21 - 8);
  int v23 = (char *)&v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  *(void *)&long long v36 = a7;
  *((void *)&v36 + 1) = a8;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v33);
  uint64_t v34 = v33[0];
  uint64_t v35 = v33[1];
  int v41 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  char v40 = 0;
  char v42 = 1;
  __int16 v43 = 2;
  char v44 = 0;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  return specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v34, a5, a6, a7, a8, 0, v32, v31, v30, v28, v27, a14 & 1, (uint64_t)v23, v29, a2, a3, a4);
}

uint64_t TextField<>.init<A>(_:text:axis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v24 = a9;
  char v16 = a6 & 1;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = a2;
  uint64_t v30 = a3;
  *(void *)&long long v31 = a4;
  *((void *)&v31 + 1) = a5;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v28);
  uint64_t v29 = v28[0];
  uint64_t v30 = v28[1];
  int v36 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  char v35 = 0;
  char v37 = 1;
  __int16 v38 = 2;
  char v39 = 0;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v27 = a1;
  double v21 = specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v29, a2, a3, a4, a5, 0, 0, 0, v24, 0, 0, v16, (uint64_t)v19, (void (*)(long long *__return_ptr, uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:text:prompt:axis:));
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)(a7 - 8) + 8))(a1, a7, v21);
}

uint64_t TextField<>.init<A>(_:text:prompt:axis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11, uint64_t a12, uint64_t a13)
{
  uint64_t v27 = a8;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v26 = a9;
  uint64_t v25 = a10;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  *(void *)&long long v36 = a4;
  *((void *)&v36 + 1) = a5;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v33);
  uint64_t v34 = v33[0];
  uint64_t v35 = v33[1];
  int v41 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  char v40 = 0;
  char v42 = 1;
  __int16 v43 = 2;
  char v44 = 0;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  uint64_t v30 = a12;
  uint64_t v31 = a13;
  uint64_t v32 = a1;
  double v22 = specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v34, a2, a3, a4, a5, 0, v28, v29, v26, v27, v25, a11 & 1, (uint64_t)v20, (void (*)(long long *__return_ptr, uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:text:prompt:axis:));
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)(a12 - 8) + 8))(a1, a12, v22);
}

uint64_t TextField.init(text:prompt:axis:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10, long long a11, uint64_t a12)
{
  uint64_t v23 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  long long v22 = a11;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  *(void *)&long long v30 = a3;
  *((void *)&v30 + 1) = a4;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v27);
  uint64_t v28 = v27[0];
  uint64_t v29 = v27[1];
  int v35 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  char v34 = 0;
  char v36 = 1;
  __int16 v37 = 2;
  char v38 = 0;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  return TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v28, a1, a2, a3, a4, 0, v25, v26, a9, v23, v24, a10 & 1, (uint64_t)v19, (void (*)(uint64_t))v22, *((uint64_t *)&v22 + 1), a12);
}

uint64_t TextField<>.init(_:text:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v26 = a1;
  uint64_t v27 = a9;
  uint64_t v28 = a11;
  uint64_t v29 = a10;
  uint64_t v25 = a12;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v20 - 8);
  long long v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  *(void *)&long long v33 = a7;
  *((void *)&v33 + 1) = a8;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v30);
  uint64_t v31 = v30[0];
  uint64_t v32 = v30[1];
  int v38 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  char v37 = 0;
  char v39 = 1;
  __int16 v40 = 2;
  char v41 = 0;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  return specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v31, a5, a6, a7, a8, 0, v29, v28, v27, v25, a13, 0, (uint64_t)v22, v26, a2, a3, a4);
}

uint64_t TextField<>.init<A>(_:text:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v24 = a8;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v23 = a9;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a2;
  uint64_t v32 = a3;
  *(void *)&long long v33 = a4;
  *((void *)&v33 + 1) = a5;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v30);
  uint64_t v31 = v30[0];
  uint64_t v32 = v30[1];
  int v38 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  char v37 = 0;
  char v39 = 1;
  __int16 v40 = 2;
  char v41 = 0;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  uint64_t v27 = a11;
  uint64_t v28 = a12;
  uint64_t v29 = a1;
  double v21 = specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v31, a2, a3, a4, a5, 0, v25, v26, v23, v24, a10, 0, (uint64_t)v19, (void (*)(long long *__return_ptr, uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:text:prompt:axis:));
  return (*(uint64_t (**)(uint64_t, uint64_t, double))(*(void *)(a11 - 8) + 8))(a1, a11, v21);
}

uint64_t TextField.init(text:prompt:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11)
{
  uint64_t v23 = a8;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  long long v22 = a10;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  *(void *)&long long v29 = a3;
  *((void *)&v29 + 1) = a4;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v26);
  uint64_t v27 = v26[0];
  uint64_t v28 = v26[1];
  int v34 = 0;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  char v33 = 0;
  char v35 = 1;
  __int16 v36 = 2;
  char v37 = 0;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  return TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v27, a1, a2, a3, a4, 0, v24, v25, a9, a7, v23, 0, (uint64_t)v19, (void (*)(uint64_t))v22, *((uint64_t *)&v22 + 1), a11);
}

uint64_t TextField<>.init(_:text:selection:prompt:axis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  HIDWORD(v26) = a3;
  uint64_t v31 = a9;
  uint64_t v32 = a12;
  uint64_t v28 = a13;
  uint64_t v29 = a1;
  uint64_t v27 = a14;
  uint64_t v30 = a11;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v21 - 8);
  uint64_t v23 = (char *)&v26 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  *(void *)&long long v36 = a7;
  *((void *)&v36 + 1) = a8;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v33);
  uint64_t v34 = v33[0];
  uint64_t v35 = v33[1];
  int v41 = 0;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  char v40 = 0;
  char v42 = 1;
  __int16 v43 = 2;
  char v44 = 0;
  outlined init with copy of Binding<TextSelection?>(a10, (uint64_t)v23);
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 0, 1, v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v34, a5, a6, a7, a8, 0, v30, v32, v31, v28, v27, a15 & 1, (uint64_t)v23, v29, a2, BYTE4(v26), a4);
  outlined destroy of ResolvedTextFieldStyle(a10, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of Binding<TextSelection?>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t TextField<>.init<A>(_:text:selection:prompt:axis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14)
{
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  uint64_t v28 = a9;
  uint64_t v27 = a10;
  uint64_t v26 = a11;
  uint64_t v25 = a14;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v20 - 8);
  uint64_t v22 = (char *)&v25 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  *(void *)&long long v37 = a4;
  *((void *)&v37 + 1) = a5;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v34);
  uint64_t v35 = v34[0];
  uint64_t v36 = v34[1];
  int v42 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  char v41 = 0;
  char v43 = 1;
  __int16 v44 = 2;
  char v45 = 0;
  outlined init with copy of Binding<TextSelection?>(a6, (uint64_t)v22);
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 0, 1, v23);
  uint64_t v31 = a13;
  uint64_t v32 = v25;
  uint64_t v33 = a1;
  specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v35, a2, a3, a4, a5, 0, v29, v30, v28, v27, v26, a12 & 1, (uint64_t)v22, (void (*)(long long *__return_ptr, uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:text:prompt:axis:));
  outlined destroy of ResolvedTextFieldStyle(a6, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a13 - 8) + 8))(a1, a13);
}

{
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void v33[2];
  uint64_t v34;
  uint64_t v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  char v40;
  int v41;
  char v42;
  __int16 v43;
  char v44;

  uint64_t v28 = a8;
  uint64_t v27 = a7;
  uint64_t v29 = a6;
  uint64_t v26 = a9;
  uint64_t v25 = a10;
  uint64_t v24 = a11;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  *(void *)&uint64_t v36 = a4;
  *((void *)&v36 + 1) = a5;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v33);
  uint64_t v34 = v33[0];
  uint64_t v35 = v33[1];
  char v41 = 0;
  uint64_t v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0;
  int v42 = 1;
  char v43 = 2;
  __int16 v44 = 0;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v21, 1, 1, v22);
  uint64_t v30 = a13;
  uint64_t v31 = a14;
  uint64_t v32 = a1;
  specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v34, a2, a3, a4, a5, 0, v27, v28, v26, v25, v24, a12 & 1, (uint64_t)v21, (void (*)(long long *__return_ptr, uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:text:prompt:axis:));
  outlined destroy of ResolvedTextFieldStyle(v29, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection>);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a13 - 8) + 8))(a1, a13);
}

uint64_t TextField.init(text:selection:prompt:axis:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11, long long a12, uint64_t a13)
{
  uint64_t v26 = a8;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v25 = a9;
  uint64_t v24 = a10;
  long long v23 = a12;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v23 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  *(void *)&long long v32 = a3;
  *((void *)&v32 + 1) = a4;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v29);
  uint64_t v30 = v29[0];
  uint64_t v31 = v29[1];
  int v37 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  char v36 = 0;
  char v38 = 1;
  __int16 v39 = 2;
  char v40 = 0;
  outlined init with copy of Binding<TextSelection?>(a5, (uint64_t)v20);
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 0, 1, v21);
  TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v30, a1, a2, a3, a4, 0, v27, v28, v25, v26, v24, a11 & 1, (uint64_t)v20, (void (*)(uint64_t))v23, *((uint64_t *)&v23 + 1), a13);
  return outlined destroy of ResolvedTextFieldStyle(a5, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
}

{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  long long v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void v28[2];
  uint64_t v29;
  uint64_t v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  char v35;
  int v36;
  char v37;
  __int16 v38;
  char v39;

  uint64_t v24 = a8;
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v27 = a5;
  long long v23 = a9;
  uint64_t v22 = a12;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v19 = (char *)&v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = a1;
  uint64_t v30 = a2;
  *(void *)&uint64_t v31 = a3;
  *((void *)&v31 + 1) = a4;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v28);
  uint64_t v29 = v28[0];
  uint64_t v30 = v28[1];
  char v36 = 0;
  uint64_t v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0;
  int v37 = 1;
  char v38 = 2;
  __int16 v39 = 0;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 1, 1, v20);
  TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v29, a1, a2, a3, a4, 0, v25, v26, v23, v24, a10, a11 & 1, (uint64_t)v19, (void (*)(uint64_t))v22, *((uint64_t *)&v22 + 1), a13);
  return outlined destroy of ResolvedTextFieldStyle(v27, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection>);
}

uint64_t TextField<>.init(_:text:onEditingChanged:onCommit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v28 = a8;
  uint64_t v29 = a7;
  int v32 = a3;
  uint64_t v30 = a1;
  uint64_t v31 = a9;
  uint64_t v27 = a12;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v19 - 8);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  *(void *)&long long v36 = a7;
  *((void *)&v36 + 1) = a8;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  uint64_t v23 = v22;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](v33, v23);
  uint64_t v34 = v33[0];
  uint64_t v35 = v33[1];
  long long v36 = 0u;
  long long v37 = 0u;
  uint64_t v38 = a10;
  uint64_t v39 = a11;
  uint64_t v40 = v27;
  uint64_t v41 = a13;
  char v42 = 0;
  int v43 = 0;
  char v44 = 1;
  __int16 v45 = 2;
  char v46 = 0;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v21, 1, 1, v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v34, a5, a6, v29, v28, 0, 0, 0, v31, 0, 0, 0, (uint64_t)v21, v30, a2, v32, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t TextField<>.init<A>(_:text:onEditingChanged:onCommit:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v27 = a8;
  uint64_t v28 = a5;
  uint64_t v30 = a1;
  uint64_t v31 = a9;
  uint64_t v29 = a12;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v18 - 8);
  uint64_t v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  *(void *)&long long v38 = a4;
  *((void *)&v38 + 1) = a5;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  uint64_t v22 = v21;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](v35, v22);
  uint64_t v36 = v35[0];
  uint64_t v37 = v35[1];
  long long v38 = 0u;
  long long v39 = 0u;
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  uint64_t v42 = v27;
  uint64_t v43 = a10;
  char v44 = 0;
  int v45 = 0;
  char v46 = 1;
  __int16 v47 = 2;
  char v48 = 0;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v20, 1, 1, v23);
  uint64_t v32 = a11;
  uint64_t v33 = v29;
  uint64_t v24 = v30;
  uint64_t v34 = v30;
  specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v36, a2, a3, a4, v28, 0, 0, 0, v31, 0, 0, 0, (uint64_t)v20, (void (*)(long long *__return_ptr, uint64_t))partial apply for closure #1 in TextField<>.init<A>(_:text:onEditingChanged:onCommit:));
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a11 - 8) + 8))(v24, a11);
}

uint64_t TextField<>.init(_:text:selection:prompt:axis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v29 = a1;
  uint64_t v30 = a9;
  uint64_t v32 = a11;
  uint64_t v33 = a10;
  uint64_t v31 = a12;
  uint64_t v27 = a14;
  uint64_t v28 = a13;
  type metadata accessor for Binding<TextSelection?>?(0);
  MEMORY[0x1F4188790](v22 - 8);
  uint64_t v24 = (char *)&v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = a5;
  uint64_t v36 = a6;
  *(void *)&long long v37 = a7;
  *((void *)&v37 + 1) = a8;
  type metadata accessor for Binding<String>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](v34);
  uint64_t v35 = v34[0];
  uint64_t v36 = v34[1];
  int v42 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  char v41 = 0;
  char v43 = 1;
  __int16 v44 = 2;
  char v45 = 0;
  type metadata accessor for Binding<TextSelection?>(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v24, 1, 1, v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized TextField.init(initialState:text:isSecure:prompt:axis:selection:label:)((uint64_t)&v35, a5, a6, a7, a8, 0, v32, v31, v30, v28, v27, a15 & 1, (uint64_t)v24, v29, a2, a3, a4);
  outlined destroy of ResolvedTextFieldStyle(v33, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection>);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in TextField<>.init<A>(_:text:axis:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #1 in TextField<>.init<A>(_:text:onEditingChanged:onCommit:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TextField<>.init<A>(_:text:axis:)(*(void *)(v1 + 32), a1);
}

uint64_t initializeBufferWithCopyOfBuffer for TextField(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  _ss8RangeSetVySS5IndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  int v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v12 & 0xF8 | 7;
  uint64_t v14 = 16;
  if (*(void *)(v11 + 64) > 0x10uLL) {
    uint64_t v14 = *(void *)(v11 + 64);
  }
  uint64_t v15 = (((v12 & 0xF8) + 23) & ~v13) + v14 + 2;
  int v16 = (v12 | v7) & 0x100000;
  uint64_t v17 = *a2;
  *(void *)a1 = *a2;
  if ((v13 | v7) != 7
    || v16 != 0
    || v15
     + ((v13
       + ((((((v7 + 33) & ~(unint64_t)v7) + v8) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
       + 109) & ~v13) > 0x18)
  {
    a1 = v17 + (((v13 | v7) + 16) & ~(v13 | v7));
    swift_retain();
  }
  else
  {
    size_t v66 = v14 + 2;
    size_t __n = v15;
    uint64_t v64 = v11;
    uint64_t v65 = v10;
    uint64_t v68 = v14;
    uint64_t v20 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v20;
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    uint64_t v21 = (uint64_t)a2 + v7;
    unint64_t v22 = (a1 + v7 + 33) & ~(unint64_t)v7;
    unint64_t v23 = (v21 + 33) & ~(unint64_t)v7;
    uint64_t v24 = *(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    v24(v22, v23, v5);
    *(unsigned char *)(v22 + v8) = *(unsigned char *)(v23 + v8);
    unint64_t v25 = (v22 + v8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v26 = (_OWORD *)(v25 + 8);
    unint64_t v27 = (v23 + v8) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v28 = (uint64_t *)(v27 + 8);
    if (*(void *)(v27 + 32) < 0xFFFFFFFFuLL)
    {
      long long v32 = *(_OWORD *)(v27 + 24);
      *uint64_t v26 = *(_OWORD *)v28;
      *(_OWORD *)(v25 + 24) = v32;
    }
    else
    {
      uint64_t v29 = *v28;
      uint64_t v30 = *(void *)(v27 + 16);
      char v31 = *(unsigned char *)(v27 + 24);
      outlined copy of Text.Storage(*v28, v30, v31);
      *(void *)uint64_t v26 = v29;
      *(void *)(v25 + 16) = v30;
      *(unsigned char *)(v25 + 24) = v31;
      *(void *)(v25 + 32) = *(void *)(v27 + 32);
      swift_bridgeObjectRetain();
    }
    unint64_t v33 = (v25 + 47) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v34 = (v27 + 47) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v35 = *(unsigned __int8 *)(v34 + 108);
    if (v35 >= 2) {
      unsigned int v35 = *(_DWORD *)v34 + 2;
    }
    uint64_t v36 = ~v13;
    if (v35 == 1)
    {
      *(void *)unint64_t v33 = *(void *)v34;
      *(void *)(v33 + 8) = *(void *)(v34 + 8);
      *(void *)(v33 + 16) = *(void *)(v34 + 16);
      *(void *)(v33 + 24) = *(void *)(v34 + 24);
      uint64_t v37 = *(void *)(v34 + 32);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      if (v37)
      {
        uint64_t v38 = *(void *)(v34 + 40);
        *(void *)(v33 + 32) = v37;
        *(void *)(v33 + 40) = v38;
        uint64_t v39 = *(void *)(v34 + 56);
        *(void *)(v33 + 48) = *(void *)(v34 + 48);
        *(void *)(v33 + 56) = v39;
        swift_retain();
        swift_retain();
      }
      else
      {
        long long v43 = *(_OWORD *)(v34 + 48);
        *(_OWORD *)(v33 + 32) = *(_OWORD *)(v34 + 32);
        *(_OWORD *)(v33 + 48) = v43;
      }
      uint64_t v44 = *(void *)(v34 + 64);
      if (v44)
      {
        uint64_t v45 = *(void *)(v34 + 72);
        *(void *)(v33 + 64) = v44;
        *(void *)(v33 + 72) = v45;
        uint64_t v46 = *(void *)(v34 + 88);
        *(void *)(v33 + 80) = *(void *)(v34 + 80);
        *(void *)(v33 + 88) = v46;
        swift_retain();
        swift_retain();
      }
      else
      {
        long long v51 = *(_OWORD *)(v34 + 80);
        *(_OWORD *)(v33 + 64) = *(_OWORD *)(v34 + 64);
        *(_OWORD *)(v33 + 80) = v51;
      }
      *(unsigned char *)(v33 + 96) = *(unsigned char *)(v34 + 96);
      int v52 = *(_DWORD *)(v34 + 100);
      *(unsigned char *)(v33 + 104) = *(unsigned char *)(v34 + 104);
      *(_DWORD *)(v33 + 100) = v52;
      *(unsigned char *)(v33 + 105) = *(unsigned char *)(v34 + 105);
      *(unsigned char *)(v33 + 106) = *(unsigned char *)(v34 + 106);
      *(unsigned char *)(v33 + 107) = *(unsigned char *)(v34 + 107);
      *(unsigned char *)(v33 + 108) = 1;
    }
    else
    {
      *(void *)unint64_t v33 = *(void *)v34;
      *(void *)(v33 + 8) = *(void *)(v34 + 8);
      uint64_t v40 = *(void *)(v34 + 16);
      swift_bridgeObjectRetain();
      if (v40)
      {
        uint64_t v41 = *(void *)(v34 + 24);
        *(void *)(v33 + 16) = v40;
        *(void *)(v33 + 24) = v41;
        uint64_t v42 = *(void *)(v34 + 40);
        *(void *)(v33 + 32) = *(void *)(v34 + 32);
        *(void *)(v33 + 40) = v42;
        swift_retain();
        swift_retain();
      }
      else
      {
        long long v47 = *(_OWORD *)(v34 + 32);
        *(_OWORD *)(v33 + 16) = *(_OWORD *)(v34 + 16);
        *(_OWORD *)(v33 + 32) = v47;
      }
      uint64_t v48 = *(void *)(v34 + 48);
      if (v48)
      {
        uint64_t v49 = *(void *)(v34 + 56);
        *(void *)(v33 + 48) = v48;
        *(void *)(v33 + 56) = v49;
        uint64_t v50 = *(void *)(v34 + 72);
        *(void *)(v33 + 64) = *(void *)(v34 + 64);
        *(void *)(v33 + 72) = v50;
        swift_retain();
        swift_retain();
      }
      else
      {
        long long v53 = *(_OWORD *)(v34 + 64);
        *(_OWORD *)(v33 + 48) = *(_OWORD *)(v34 + 48);
        *(_OWORD *)(v33 + 64) = v53;
      }
      *(unsigned char *)(v33 + 80) = *(unsigned char *)(v34 + 80);
      int v54 = *(_DWORD *)(v34 + 84);
      *(unsigned char *)(v33 + 88) = *(unsigned char *)(v34 + 88);
      *(_DWORD *)(v33 + 84) = v54;
      *(unsigned char *)(v33 + 89) = *(unsigned char *)(v34 + 89);
      *(unsigned char *)(v33 + 90) = *(unsigned char *)(v34 + 90);
      *(unsigned char *)(v33 + 91) = *(unsigned char *)(v34 + 91);
      *(void *)(v33 + 96) = *(void *)(v34 + 96);
      *(unsigned char *)(v33 + 108) = 0;
      swift_retain();
    }
    long long v55 = (void *)((v33 + v13 + 109) & v36);
    long long v56 = (void *)((v34 + v13 + 109) & v36);
    long long v57 = (void *)(((unint64_t)v56 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (*v57 < 0xFFFFFFFFuLL)
    {
      memcpy(v55, v56, __n);
    }
    else
    {
      *long long v55 = *v56;
      uint64_t v58 = (void *)(((unint64_t)v55 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v58 = *v57;
      int v59 = (_OWORD *)(((unint64_t)v58 + v13 + 8) & v36);
      int v60 = (_OWORD *)(((unint64_t)v57 + v13 + 8) & v36);
      unsigned int v61 = *((unsigned __int8 *)v60 + v68);
      swift_retain();
      swift_retain();
      if (v61 > 1)
      {
        memcpy(v59, v60, v66);
      }
      else
      {
        if (v61 == 1)
        {
          (*(void (**)(_OWORD *, _OWORD *, uint64_t))(v64 + 16))(v59, v60, v65);
          char v62 = 1;
        }
        else
        {
          char v62 = 0;
          *int v59 = *v60;
        }
        *((unsigned char *)v59 + v68) = v62;
        *((unsigned char *)v59 + v68 + 1) = *((unsigned char *)v60 + v68 + 1);
      }
    }
  }
  return a1;
}

uint64_t initializeWithTake for TextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 33 + a1) & ~v7;
  uint64_t v9 = (v7 + 33 + a2) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32);
  uint64_t v11 = v10 + v8;
  uint64_t v12 = v10 + v9;
  *(unsigned char *)uint64_t v11 = *(unsigned char *)v12;
  v11 &= 0xFFFFFFFFFFFFFFF8;
  v12 &= 0xFFFFFFFFFFFFFFF8;
  long long v13 = *(_OWORD *)(v12 + 8);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(v12 + 24);
  *(_OWORD *)(v11 + 8) = v13;
  unint64_t v14 = (v11 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v12 + 47) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v16 = *(unsigned __int8 *)(v15 + 108);
  if (v16 >= 2) {
    unsigned int v16 = *(_DWORD *)v15 + 2;
  }
  if (v16 == 1)
  {
    long long v17 = *(_OWORD *)v15;
    long long v18 = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
    *(_OWORD *)(v14 + 32) = v18;
    *(_OWORD *)unint64_t v14 = v17;
    long long v19 = *(_OWORD *)(v15 + 48);
    long long v20 = *(_OWORD *)(v15 + 64);
    long long v21 = *(_OWORD *)(v15 + 80);
    *(_OWORD *)(v14 + 92) = *(_OWORD *)(v15 + 92);
  }
  else
  {
    LOBYTE(v16) = 0;
    long long v22 = *(_OWORD *)v15;
    long long v23 = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
    *(_OWORD *)(v14 + 32) = v23;
    *(_OWORD *)unint64_t v14 = v22;
    long long v19 = *(_OWORD *)(v15 + 48);
    long long v20 = *(_OWORD *)(v15 + 64);
    long long v21 = *(_OWORD *)(v15 + 80);
    *(void *)(v14 + 96) = *(void *)(v15 + 96);
  }
  *(_OWORD *)(v14 + 64) = v20;
  *(_OWORD *)(v14 + 80) = v21;
  *(_OWORD *)(v14 + 48) = v19;
  *(unsigned char *)(v14 + 108) = v16;
  _ss8RangeSetVySS5IndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
  uint64_t v25 = v24;
  uint64_t v26 = *(void *)(v24 - 8);
  uint64_t v27 = *(_DWORD *)(v26 + 80) & 0xF8 | 7;
  uint64_t v28 = ~v27;
  uint64_t v29 = (char *)((v14 + v27 + 109) & ~v27);
  uint64_t v30 = (void *)((v15 + v27 + 109) & ~v27);
  if (*(void *)(v26 + 64) <= 0x10uLL) {
    uint64_t v31 = 16;
  }
  else {
    uint64_t v31 = *(void *)(v26 + 64);
  }
  size_t v32 = v31 + 2;
  unint64_t v33 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v33 < 0xFFFFFFFFuLL)
  {
    v32 += (v27 + 16) & v28;
LABEL_16:
    memcpy(v29, v30, v32);
    return a1;
  }
  *(void *)uint64_t v29 = *v30;
  unint64_t v34 = (unint64_t)(v29 + 15);
  *(void *)(v34 & 0xFFFFFFFFFFFFFFF8) = *v33;
  uint64_t v35 = v27 + 8;
  uint64_t v36 = (char *)((v35 + (v34 & 0xFFFFFFFFFFFFFFF8)) & v28);
  uint64_t v37 = (_OWORD *)(((unint64_t)v33 + v35) & v28);
  unsigned int v38 = *((unsigned __int8 *)v37 + v31);
  if (v38 > 1)
  {
    uint64_t v29 = v36;
    uint64_t v30 = v37;
    goto LABEL_16;
  }
  if (v38 == 1)
  {
    (*(void (**)(char *, _OWORD *, uint64_t))(v26 + 32))(v36, v37, v25);
    char v39 = 1;
  }
  else
  {
    char v39 = 0;
    *(_OWORD *)uint64_t v36 = *v37;
  }
  v36[v31] = v39;
  v36[v31 + 1] = *((unsigned char *)v37 + v31 + 1);
  return a1;
}

uint64_t assignWithTake for TextField(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 33 + a1) & ~v9;
  uint64_t v11 = (v9 + 33 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24);
  unint64_t v13 = v12 + v10;
  unint64_t v14 = v12 + v11;
  *(unsigned char *)unint64_t v13 = *(unsigned char *)v14;
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v17 = v14 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
  if (*(void *)((v13 & 0xFFFFFFFFFFFFFFF8) + 32) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)((v14 & 0xFFFFFFFFFFFFFFF8) + 32) >= 0xFFFFFFFFuLL)
    {
      char v19 = *(unsigned char *)((v14 & 0xFFFFFFFFFFFFFFF8) + 24);
      uint64_t v20 = *(void *)v16;
      uint64_t v21 = *(void *)((v13 & 0xFFFFFFFFFFFFFFF8) + 16);
      char v22 = *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24);
      *(_OWORD *)unint64_t v16 = *(_OWORD *)v18;
      *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24) = v19;
      outlined consume of Text.Storage(v20, v21, v22);
      *(void *)(v16 + 24) = *(void *)(v18 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined consume of Text.Storage(*(void *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)((v13 & 0xFFFFFFFFFFFFFFF8) + 16), *(unsigned char *)((v13 & 0xFFFFFFFFFFFFFFF8) + 24));
    swift_bridgeObjectRelease();
  }
  long long v23 = *(_OWORD *)(v18 + 16);
  *(_OWORD *)unint64_t v16 = *(_OWORD *)v18;
  *(_OWORD *)(v16 + 16) = v23;
LABEL_6:
  unint64_t v24 = (v15 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v17 + 47) & 0xFFFFFFFFFFFFFFF8;
  if (v24 == v25) {
    goto LABEL_25;
  }
  unsigned int v26 = *(unsigned __int8 *)(v24 + 108);
  if (v26 >= 2) {
    unsigned int v26 = *(_DWORD *)v24 + 2;
  }
  if (v26 == 1)
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    if (*(void *)(v24 + 32))
    {
      swift_release();
      swift_release();
    }
    if (!*(void *)(v24 + 64)) {
      goto LABEL_19;
    }
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (*(void *)(v24 + 16))
    {
      swift_release();
      swift_release();
    }
    if (*(void *)(v24 + 48))
    {
      swift_release();
      swift_release();
    }
  }
  swift_release();
LABEL_19:
  unsigned int v27 = *(unsigned __int8 *)(v25 + 108);
  if (v27 >= 2) {
    unsigned int v27 = *(_DWORD *)v25 + 2;
  }
  if (v27 == 1)
  {
    long long v28 = *(_OWORD *)v25;
    long long v29 = *(_OWORD *)(v25 + 32);
    *(_OWORD *)(v24 + 16) = *(_OWORD *)(v25 + 16);
    *(_OWORD *)(v24 + 32) = v29;
    *(_OWORD *)unint64_t v24 = v28;
    long long v30 = *(_OWORD *)(v25 + 48);
    long long v31 = *(_OWORD *)(v25 + 64);
    long long v32 = *(_OWORD *)(v25 + 80);
    *(_OWORD *)(v24 + 92) = *(_OWORD *)(v25 + 92);
  }
  else
  {
    LOBYTE(v27) = 0;
    long long v33 = *(_OWORD *)v25;
    long long v34 = *(_OWORD *)(v25 + 32);
    *(_OWORD *)(v24 + 16) = *(_OWORD *)(v25 + 16);
    *(_OWORD *)(v24 + 32) = v34;
    *(_OWORD *)unint64_t v24 = v33;
    long long v30 = *(_OWORD *)(v25 + 48);
    long long v31 = *(_OWORD *)(v25 + 64);
    long long v32 = *(_OWORD *)(v25 + 80);
    *(void *)(v24 + 96) = *(void *)(v25 + 96);
  }
  *(_OWORD *)(v24 + 64) = v31;
  *(_OWORD *)(v24 + 80) = v32;
  *(_OWORD *)(v24 + 48) = v30;
  *(unsigned char *)(v24 + 108) = v27;
LABEL_25:
  _ss8RangeSetVySS5IndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(_DWORD *)(v36 + 80) & 0xF8;
  uint64_t v38 = v37 | 7;
  uint64_t v39 = ~(v37 | 7);
  uint64_t v40 = (void *)((v24 + (v37 | 7) + 109) & v39);
  uint64_t v41 = (void *)((v25 + (v37 | 7) + 109) & v39);
  if (*(void *)(v36 + 64) <= 0x10uLL) {
    uint64_t v42 = 16;
  }
  else {
    uint64_t v42 = *(void *)(v36 + 64);
  }
  uint64_t v43 = (v37 + 23) & ~v38;
  uint64_t v44 = v42 + 1;
  uint64_t v45 = (void *)(((unint64_t)v40 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v46 = (unint64_t *)(((unint64_t)v41 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v47 = *v46;
  if (*v45 >= 0xFFFFFFFFuLL)
  {
    uint64_t v61 = v35;
    uint64_t v62 = *(void *)(v35 - 8);
    if (v47 >= 0xFFFFFFFF)
    {
      *uint64_t v40 = *v41;
      swift_release();
      *uint64_t v45 = *v46;
      swift_release();
      uint64_t v48 = (unsigned __int8 *)(((unint64_t)v45 + v38 + 8) & v39);
      uint64_t v49 = (unsigned __int8 *)(((unint64_t)v46 + v38 + 8) & v39);
      unsigned int v50 = v48[v42];
      unsigned int v51 = v49[v42];
      if (v50 > 1)
      {
        if (v51 <= 1)
        {
          if (v51 == 1)
          {
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v62 + 32))(((unint64_t)v45 + v38 + 8) & v39, ((unint64_t)v46 + v38 + 8) & v39, v61);
LABEL_63:
            char v59 = 1;
LABEL_65:
            v48[v42] = v59;
            goto LABEL_66;
          }
LABEL_64:
          char v59 = 0;
          *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
          goto LABEL_65;
        }
      }
      else
      {
        uint64_t v52 = v62;
        if (v51 <= 1)
        {
          if (v48 == v49)
          {
LABEL_66:
            v48[v42 + 1] = v49[v42 + 1];
            return a1;
          }
          if (v50 == 1)
          {
            (*(void (**)(unint64_t, uint64_t))(v62 + 8))(((unint64_t)v45 + v38 + 8) & v39, v61);
            unsigned int v51 = v49[v42];
            unsigned int v53 = v51 - 2;
            if (v51 < 2)
            {
              uint64_t v52 = v62;
            }
            else
            {
              if (v42 <= 3) {
                uint64_t v54 = v42;
              }
              else {
                uint64_t v54 = 4;
              }
              uint64_t v52 = v62;
              switch(v54)
              {
                case 1:
                  int v55 = *v49;
                  goto LABEL_59;
                case 2:
                  int v55 = *(unsigned __int16 *)v49;
                  goto LABEL_59;
                case 3:
                  int v55 = *(unsigned __int16 *)v49 | (*(unsigned __int8 *)((((unint64_t)v46 + v38 + 8) & v39) + 2) << 16);
                  goto LABEL_59;
                case 4:
                  int v55 = *(_DWORD *)v49;
LABEL_59:
                  int v58 = (v55 | (v53 << (8 * v42))) + 2;
                  unsigned int v51 = v55 + 2;
                  if (v42 < 4) {
                    unsigned int v51 = v58;
                  }
                  break;
                default:
                  break;
              }
            }
          }
          if (v51 == 1)
          {
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v52 + 32))(((unint64_t)v45 + v38 + 8) & v39, ((unint64_t)v46 + v38 + 8) & v39, v61);
            goto LABEL_63;
          }
          goto LABEL_64;
        }
        if (v50 == 1) {
          (*(void (**)(unint64_t, uint64_t))(v62 + 8))(((unint64_t)v45 + v38 + 8) & v39, v61);
        }
      }
      goto LABEL_53;
    }
    swift_release();
    swift_release();
    if (*(unsigned char *)((((unint64_t)v45 + v38 + 8) & v39) + v42) == 1) {
      (*(void (**)(void))(v62 + 8))();
    }
    goto LABEL_47;
  }
  if (v47 < 0xFFFFFFFF)
  {
LABEL_47:
    memcpy(v40, v41, v43 + v42 + 2);
    return a1;
  }
  *uint64_t v40 = *v41;
  *uint64_t v45 = *v46;
  uint64_t v48 = (unsigned __int8 *)(((unint64_t)v45 + v38 + 8) & v39);
  uint64_t v49 = (unsigned __int8 *)(((unint64_t)v46 + v38 + 8) & v39);
  unsigned int v56 = v49[v42];
  if (v56 > 1)
  {
LABEL_53:
    memcpy(v48, v49, v42 + 2);
    return a1;
  }
  if (v56 == 1)
  {
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v36 + 32))(((unint64_t)v45 + v38 + 8) & v39, ((unint64_t)v46 + v38 + 8) & v39, v35);
    uint64_t v44 = v42 + 1;
    char v57 = 1;
  }
  else
  {
    char v57 = 0;
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
  }
  v48[v42] = v57;
  v48[v44] = v49[v44];
  return a1;
}

void storeEnumTagSinglePayload for TextField(_WORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v23 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  _ss8RangeSetVySS5IndexVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(_DWORD *)(v12 + 80) & 0xF8;
  unint64_t v15 = *(void *)(v12 + 64);
  if (v15 <= 0x10) {
    unint64_t v15 = 16;
  }
  size_t v16 = v15
      + ((v14 + 23) & ~(v14 | 7))
      + (((v14 | 7)
        + ((((((v13 + 33) & ~v13) + *(void *)(v8 + 64)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
        + 109) & ~(v14 | 7))
      + 2;
  if (a3 <= v10)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v10 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v10 < a2)
  {
    unsigned int v18 = ~v10 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *a1 = v21;
          *((unsigned char *)a1 + 2) = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *a1 = v21;
        }
        else
        {
          *(unsigned char *)a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        *((unsigned char *)a1 + v16) = v19;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v16) = v19;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)((char *)a1 + v16) = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      *((unsigned char *)a1 + v16) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)((char *)a1 + v16) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1879D817CLL);
    case 4:
      *(_DWORD *)((char *)a1 + v16) = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if ((v9 & 0x80000000) != 0)
        {
          char v22 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
          v22(((unint64_t)a1 + v13 + 33) & ~v13, a2, v9, v7);
        }
        else if ((a2 & 0x80000000) != 0)
        {
          *((void *)a1 + 2) = 0;
          *((void *)a1 + 3) = 0;
          *(void *)a1 = a2 ^ 0x80000000;
          *((void *)a1 + 1) = 0;
        }
        else
        {
          *((void *)a1 + 1) = (a2 - 1);
        }
      }
      return;
  }
}

uint64_t sub_1879D81A4()
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for TextFieldState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = (_OWORD *)(a1 + 16);
  uint64_t v6 = (_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = v5;
      *(void *)(a1 + 24) = v7;
      swift_retain();
      swift_release();
      uint64_t v8 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v8;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of TextFieldState.FormatActions(a1 + 16);
      long long v11 = *(_OWORD *)(a2 + 32);
      _OWORD *v4 = *v6;
      *(_OWORD *)(a1 + 32) = v11;
    }
  }
  else if (v5)
  {
    uint64_t v9 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = v5;
    *(void *)(a1 + 24) = v9;
    uint64_t v10 = *(void *)(a2 + 40);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v10;
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 32);
    _OWORD *v4 = *v6;
    *(_OWORD *)(a1 + 32) = v12;
  }
  uint64_t v13 = (_OWORD *)(a1 + 48);
  unint64_t v15 = (_OWORD *)(a2 + 48);
  uint64_t v14 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v14)
    {
      uint64_t v16 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v14;
      *(void *)(a1 + 56) = v16;
      swift_retain();
      swift_release();
      uint64_t v17 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = v17;
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of TextFieldState.FormatActions(a1 + 48);
      long long v20 = *(_OWORD *)(a2 + 64);
      *uint64_t v13 = *v15;
      *(_OWORD *)(a1 + 64) = v20;
    }
  }
  else if (v14)
  {
    uint64_t v18 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v14;
    *(void *)(a1 + 56) = v18;
    uint64_t v19 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = v19;
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v21 = *(_OWORD *)(a2 + 64);
    *uint64_t v13 = *v15;
    *(_OWORD *)(a1 + 64) = v21;
  }
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  int v22 = *(_DWORD *)(a2 + 84);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(_DWORD *)(a1 + 84) = v22;
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 91);
  return a1;
}

uint64_t outlined destroy of TextFieldState.FormatActions(uint64_t a1)
{
  return a1;
}

__n128 __swift_memcpy92_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 76) = *(_OWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

_OWORD *assignWithTake for TextFieldState.DeprecatedActions(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t outlined retain of TextFieldState(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 48);
  swift_bridgeObjectRetain();
  outlined copy of TextFieldState.FormatActions?(v2);
  outlined copy of TextFieldState.FormatActions?(v3);
  return a1;
}

uint64_t outlined release of TextFieldState(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 48);
  swift_bridgeObjectRelease();
  outlined consume of TextFieldState.FormatActions?(v2);
  outlined consume of TextFieldState.FormatActions?(v3);
  return a1;
}

uint64_t outlined init with take of TextField<Text>(uint64_t a1, uint64_t a2)
{
  _ss8RangeSetVySS5IndexVGMaTm_0(0, &lazy cache variable for type metadata for TextField<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1879D8654()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for Binding() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  unint64_t v4 = (*(void *)(*(void *)v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v5 + v2[10], v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:)(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(type metadata accessor for Binding() - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void **)(v2 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));

  return closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:formatter:deprecatedActions:)(a1, a2, v2 + v7, v8, v5);
}

uint64_t partial apply for closure #1 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(a1, a2);
}

uint64_t sub_1879D8864()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = (int *)(type metadata accessor for Binding() - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(*(void *)v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v0 + v7 + v6[10], AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  unint64_t v7 = (*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  unint64_t v8 = v7 + *(void *)(*(void *)(v5 - 8) + 64);
  swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(type metadata accessor for Binding() - 8);
  uint64_t v10 = v2 + ((v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(a1, a2, v2 + v7, v10, v5, v6);
}

{
  uint64_t v2;

  return closure #2 in static TextFieldFormattingUtilities.makeStateAndText<A>(value:format:)(a1, a2, v2+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80)), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

ValueMetadata *type metadata accessor for TextFieldStateTextProjection()
{
  return &type metadata for TextFieldStateTextProjection;
}

__n128 specialized TextFieldStateTextProjection.set(base:newValue:)(uint64_t a1, uint64_t a2)
{
  void (*v9)(char *__return_ptr, void *);
  uint64_t v10;
  uint64_t v11;
  long long v12;
  __n128 result;
  long long v14;
  char v15;
  void v16[2];
  unsigned char v17[32];
  void v18[4];

  uint64_t v5 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  outlined init with take of TextFieldState.FormatActions?(a2 + 16, (uint64_t)v17);
  outlined init with take of TextFieldState.FormatActions?((uint64_t)v17, (uint64_t)v18);
  uint64_t v6 = v18[0];
  if (v18[0])
  {
    uint64_t v7 = v18[1];
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v6;
    *(void *)(v8 + 24) = v7;
    swift_retain();
    uint64_t v9 = (void (*)(char *__return_ptr, void *))partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool);
  }
  else
  {
    uint64_t v9 = (void (*)(char *__return_ptr, void *))protocol witness for static StatefulRule.initialValue.getter in conformance LimitedAvailabilityTableColumnContent<A, B>.IndirectOutputs;
  }
  v16[0] = v5;
  v16[1] = v4;
  v9(&v15, v16);
  swift_release();
  if (v15 & 1) != 0 || (*(unsigned char *)(a2 + 80))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  uint64_t v10 = *(void *)(a1 + 32);
  long long v11 = *(void *)(a1 + 64);
  outlined retain of TextFieldState(a2);
  swift_bridgeObjectRelease();
  outlined consume of TextFieldState.FormatActions?(v10);
  outlined consume of TextFieldState.FormatActions?(v11);
  long long v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 76);
  __n128 result = *(__n128 *)a2;
  uint64_t v14 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 32) = v14;
  return result;
}

uint64_t outlined init with take of TextFieldState.FormatActions?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Binding<String>(0, &lazy cache variable for type metadata for TextFieldState.FormatActions?, (uint64_t)&type metadata for TextFieldState.FormatActions, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1879D8D6C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool)@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return thunk for @escaping @callee_guaranteed (@guaranteed String) -> (@unowned Bool)(a1, *(uint64_t (**)(void, void))(v2 + 16), a2);
}

void static IsLinkedGroupTraitKey.defaultValue.getter()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void View._listLinkedGroup(_:)()
{
  protocol witness for static Equatable.== infix(_:_:) in conformance CapsuleSlider<A>.ScrollState.Orientation();
}

void static _IsLinkedGroupTraitKey._linkedGroup.getter()
{
}

ValueMetadata *type metadata accessor for IsLinkedGroupTraitKey()
{
  return &type metadata for IsLinkedGroupTraitKey;
}

ValueMetadata *type metadata accessor for _IsLinkedGroupTraitKey()
{
  return &type metadata for _IsLinkedGroupTraitKey;
}

uint64_t sub_1879D8E0C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _TraitWritingModifier<IsLinkedGroupTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<IsLinkedGroupTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<IsLinkedGroupTraitKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<IsLinkedGroupTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<IsLinkedGroupTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<IsLinkedGroupTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for _TraitWritingModifier<IsLinkedGroupTraitKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<IsLinkedGroupTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

void View.bottomBar<A>(content:)()
{
}

uint64_t sub_1879D8F44(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t EnvironmentValues.springLoadingBehavior.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.springLoadingBehavior : EnvironmentValues()
{
  return EnvironmentValues.springLoadingBehavior.setter();
}

uint64_t EnvironmentValues.springLoadingBehavior.setter()
{
  type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static SpringLoadingBehavior.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static SpringLoadingBehavior.enabled.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static SpringLoadingBehavior.disabled.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void SpringLoadingBehavior.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static SpringLoadingBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int SpringLoadingBehavior.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t View.springLoadingBehavior(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<SpringLoadingBehavior>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SpringLoadingBehavior>, (uint64_t)&type metadata for SpringLoadingBehavior, MEMORY[0x1E4F411E8]);
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v14 - v7;
  char v9 = *a1;
  swift_getKeyPath();
  char v15 = v9;
  View.environment<A>(_:_:)();
  swift_release();
  unint64_t v10 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SpringLoadingBehavior> and conformance _EnvironmentKeyWritingModifier<A>();
  v14[1] = a3;
  v14[2] = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t HasCustomSpringLoadedBehavior = lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior();
  View.input<A>(_:)((uint64_t)&type metadata for SpringLoadingBehavior.HasCustomSpringLoadedBehavior, v5, (uint64_t)&type metadata for SpringLoadingBehavior.HasCustomSpringLoadedBehavior, WitnessTable, HasCustomSpringLoadedBehavior);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1879D9360()
{
  return EnvironmentValues.springLoadingBehavior.setter();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SpringLoadingBehavior> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SpringLoadingBehavior> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SpringLoadingBehavior> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<SpringLoadingBehavior>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SpringLoadingBehavior>, (uint64_t)&type metadata for SpringLoadingBehavior, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SpringLoadingBehavior> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t (*EnvironmentValues.springLoadingBehavior.modify(void *a1))(uint64_t *a1)
{
  *a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.springLoadingBehavior.modify;
}

uint64_t EnvironmentValues.springLoadingBehavior.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior()
{
  return PropertyList.subscript.setter();
}

uint64_t View.springLoaded(automaticallyEnabled:onActivate:onHighlightChange:onEnded:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  v10[0] = a1;
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v15 = a6;
  uint64_t v16 = a7;
  return MEMORY[0x18C113660](v10, a8, &type metadata for SpringLoadingInteractionModifier, a9);
}

BOOL static SpringLoadingBehavior.HighlightState.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void SpringLoadingBehavior.HighlightState.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int SpringLoadingBehavior.HighlightState.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type SpringLoadingBehavior and conformance SpringLoadingBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type SpringLoadingBehavior and conformance SpringLoadingBehavior;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior and conformance SpringLoadingBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior and conformance SpringLoadingBehavior);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpringLoadingBehavior.HighlightState and conformance SpringLoadingBehavior.HighlightState()
{
  unint64_t result = lazy protocol witness table cache variable for type SpringLoadingBehavior.HighlightState and conformance SpringLoadingBehavior.HighlightState;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior.HighlightState and conformance SpringLoadingBehavior.HighlightState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior.HighlightState and conformance SpringLoadingBehavior.HighlightState);
  }
  return result;
}

ValueMetadata *type metadata accessor for SpringLoadingBehavior.HighlightState()
{
  return &type metadata for SpringLoadingBehavior.HighlightState;
}

uint64_t type metadata completion function for SpringLoadedViewResponder()
{
  return swift_initClassMetadata2();
}

double static SpringLoadingInteractionModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(long long *__return_ptr)@<X2>, void *a4@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[3];
  long long v6 = a2[1];
  long long v29 = a2[2];
  long long v30 = v5;
  long long v7 = a2[3];
  long long v31 = a2[4];
  long long v8 = a2[1];
  long long v27 = *a2;
  long long v28 = v8;
  long long v23 = v29;
  long long v24 = v7;
  long long v25 = a2[4];
  int v9 = *a1;
  int v32 = *((_DWORD *)a2 + 20);
  int v26 = *((_DWORD *)a2 + 20);
  long long v21 = v27;
  long long v22 = v6;
  a3(&v18);
  uint64_t v19 = v30;
  int v20 = DWORD2(v30);
  *(void *)&long long v21 = v30;
  DWORD2(v21) = DWORD2(v30);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    LODWORD(v21) = v9;
    type metadata accessor for _EnvironmentKeyWritingModifier<SpringLoadingBehavior>(0, &lazy cache variable for type metadata for _GraphValue<SpringLoadingInteractionModifier>, (uint64_t)&type metadata for SpringLoadingInteractionModifier, MEMORY[0x1E4F3F590]);
    unsigned int v10 = _GraphValue.value.getter();
    long long v23 = v29;
    long long v24 = v30;
    long long v25 = v31;
    int v26 = v32;
    long long v21 = v27;
    long long v22 = v28;
    swift_getKeyPath();
    unsigned int v11 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    long long v23 = v29;
    long long v24 = v30;
    long long v25 = v31;
    int v26 = v32;
    long long v21 = v27;
    long long v22 = v28;
    swift_getKeyPath();
    unsigned int v12 = _ViewInputs.mapEnvironment<A>(_:)();
    swift_release();
    long long v21 = v18;
    unsigned int v13 = _ViewOutputs.viewResponders()();
    type metadata accessor for SpringLoadedViewResponder();
    uint64_t v14 = swift_allocObject();
    *(unsigned char *)(v14 + 216) = 0;
    *(void *)(v14 + 224) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    *(void *)(v14 + 232) = 0;
    *(void *)(v14 + 240) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    *(void *)(v14 + 248) = 0;
    *(void *)(v14 + 256) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
    *(void *)(v14 + 264) = 0;
    long long v23 = v29;
    long long v24 = v30;
    long long v25 = v31;
    int v26 = v32;
    long long v21 = v27;
    long long v22 = v28;
    outlined retain of _ViewInputs((uint64_t)&v27);
    uint64_t v15 = DefaultLayoutViewResponder.init(inputs:)();
    *(void *)&long long v21 = __PAIR64__(v11, v10);
    *((void *)&v21 + 1) = __PAIR64__(v13, v12);
    *(void *)&long long v22 = v15;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type SpringLoadedResponderFilter and conformance SpringLoadedResponderFilter();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LOBYTE(v21) = 0;
    uint64_t v16 = _ViewOutputs.subscript.setter();
    *(void *)&long long v21 = v19;
    DWORD2(v21) = v20;
    MEMORY[0x1F4188790](v16);
    outlined retain of [Text.Modifier]((uint64_t)&v19);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
  }
  *a4 = v18;
  double result = *((double *)&v18 + 1);
  a4[1] = *((void *)&v18 + 1);
  return result;
}

uint64_t SpringLoadedViewResponder.__allocating_init(inputs:)()
{
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 216) = 0;
  *(void *)(v0 + 224) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(void *)(v0 + 232) = 0;
  *(void *)(v0 + 240) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(void *)(v0 + 248) = 0;
  *(void *)(v0 + 256) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(void *)(v0 + 264) = 0;
  return DefaultLayoutViewResponder.init(inputs:)();
}

void protocol witness for ViewModifier.body(content:) in conformance SpringLoadingInteractionModifier()
{
}

uint64_t SpringLoadedResponderFilter.updateValue()()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t Value = (unsigned char *)AGGraphGetValue();
  LOBYTE(v3) = 0;
  if (*Value == 1)
  {
    int v3 = *(unsigned __int8 *)AGGraphGetValue();
    if (v3 != 1)
    {
      if (v3 == 2) {
        LOBYTE(v3) = 0;
      }
      else {
        LOBYTE(v3) = *(unsigned char *)AGGraphGetValue();
      }
    }
  }
  *(unsigned char *)(v1 + 216) = v3;
  uint64_t v4 = AGGraphGetValue();
  uint64_t v6 = *(void *)(v4 + 8);
  uint64_t v5 = *(void *)(v4 + 16);
  *(void *)(v1 + 224) = v6;
  *(void *)(v1 + 232) = v5;
  swift_retain();
  swift_release();
  uint64_t v7 = AGGraphGetValue();
  uint64_t v9 = *(void *)(v7 + 24);
  uint64_t v8 = *(void *)(v7 + 32);
  *(void *)(v1 + 240) = v9;
  *(void *)(v1 + 248) = v8;
  swift_retain();
  swift_release();
  uint64_t v10 = AGGraphGetValue();
  uint64_t v12 = *(void *)(v10 + 40);
  uint64_t v11 = *(void *)(v10 + 48);
  *(void *)(v1 + 256) = v12;
  *(void *)(v1 + 264) = v11;
  swift_retain();
  swift_release();
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v13)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<SpringLoadingBehavior>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_188351940;
    *(void *)(v15 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall SpringLoadedViewResponder.extendPrintTree(string:)(Swift::String *string)
{
  v1._countAndFlagsBits = 0x6F4C676E69727073;
  v1._object = (void *)0xEC00000064656461;
  String.append(_:)(v1);
}

uint64_t SpringLoadedViewResponder.__allocating_init(inputs:viewSubgraph:)()
{
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 216) = 0;
  *(void *)(v0 + 224) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(void *)(v0 + 232) = 0;
  *(void *)(v0 + 240) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(void *)(v0 + 248) = 0;
  *(void *)(v0 + 256) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(void *)(v0 + 264) = 0;
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t SpringLoadedViewResponder.__ivar_destroyer()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t SpringLoadedViewResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for SpringLoadedViewResponder()
{
  return type metadata accessor for SpringLoadedViewResponder();
}

uint64_t sub_1879DA134()
{
  return swift_getWitnessTable();
}

void type metadata accessor for ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>)
  {
    lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<SpringLoadingBehavior.HasCustomSpringLoadedBehavior>);
    }
  }
}

uint64_t sub_1879DA264()
{
  return swift_getWitnessTable();
}

uint64_t destroy for SpringLoadingInteractionModifier()
{
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for SpringLoadingInteractionModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 48);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = v3;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SpringLoadingInteractionModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SpringLoadingInteractionModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SpringLoadingInteractionModifier()
{
  return &type metadata for SpringLoadingInteractionModifier;
}

ValueMetadata *type metadata accessor for SpringLoadingBehavior.Key()
{
  return &type metadata for SpringLoadingBehavior.Key;
}

_UNKNOWN **base witness table accessor for ViewModifier in SpringLoadingInteractionModifier()
{
  return &protocol witness table for SpringLoadingInteractionModifier;
}

unint64_t lazy protocol witness table accessor for type SpringLoadingBehavior.Guts and conformance SpringLoadingBehavior.Guts()
{
  unint64_t result = lazy protocol witness table cache variable for type SpringLoadingBehavior.Guts and conformance SpringLoadingBehavior.Guts;
  if (!lazy protocol witness table cache variable for type SpringLoadingBehavior.Guts and conformance SpringLoadingBehavior.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadingBehavior.Guts and conformance SpringLoadingBehavior.Guts);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in SpringLoadingBehavior.HasCustomSpringLoadedBehavior()
{
  return &protocol witness table for SpringLoadingBehavior.HasCustomSpringLoadedBehavior;
}

unint64_t lazy protocol witness table accessor for type SpringLoadedResponderFilter and conformance SpringLoadedResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type SpringLoadedResponderFilter and conformance SpringLoadedResponderFilter;
  if (!lazy protocol witness table cache variable for type SpringLoadedResponderFilter and conformance SpringLoadedResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpringLoadedResponderFilter and conformance SpringLoadedResponderFilter);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<SpringLoadingBehavior>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for SpringLoadedResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SpringLoadedResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SpringLoadedResponderFilter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t storeEnumTagSinglePayload for SpringLoadedResponderFilter(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for SpringLoadedResponderFilter()
{
  return &unk_1ED450948;
}

ValueMetadata *type metadata accessor for CanSpringLoadKey()
{
  return &type metadata for CanSpringLoadKey;
}

uint64_t __DesignTimeSelectionIdentifier.identifier.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

SwiftUI::__DesignTimeSelectionIdentifier __swiftcall __DesignTimeSelectionIdentifier.init(_:)(SwiftUI::__DesignTimeSelectionIdentifier result)
{
  SwiftUI::__DesignTimeSelectionIdentifier *v1 = result;
  return result;
}

uint64_t __DesignTimeSelectionIdentifier.hash(into:)()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t static __DesignTimeSelectionIdentifier.== infix(_:_:)(void *a1, void *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1]) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)();
  }
}

Swift::Int __DesignTimeSelectionIdentifier.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance __DesignTimeSelectionIdentifier()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance __DesignTimeSelectionIdentifier()
{
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance __DesignTimeSelectionIdentifier()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier()
{
  unint64_t result = lazy protocol witness table cache variable for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier;
  if (!lazy protocol witness table cache variable for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier;
  if (!lazy protocol witness table cache variable for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type __DesignTimeSelectionIdentifier and conformance __DesignTimeSelectionIdentifier);
  }
  return result;
}

ValueMetadata *type metadata accessor for __DesignTimeSelectionIdentifier()
{
  return &type metadata for __DesignTimeSelectionIdentifier;
}

ValueMetadata *type metadata accessor for TabViewCommonModifier()
{
  return &type metadata for TabViewCommonModifier;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TabViewCommonModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_1879DAA74()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, IsSearchImplementedModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, IsSearchImplementedModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, IsSearchImplementedModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, IsSearchImplementedModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, IsSearchImplementedModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<TabViewCommonModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<TabViewCommonModifier>)
  {
    lazy protocol witness table accessor for type TabViewCommonModifier and conformance TabViewCommonModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<TabViewCommonModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TabViewCommonModifier and conformance TabViewCommonModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type TabViewCommonModifier and conformance TabViewCommonModifier;
  if (!lazy protocol witness table cache variable for type TabViewCommonModifier and conformance TabViewCommonModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewCommonModifier and conformance TabViewCommonModifier);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, IsSearchImplementedModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<TabViewCommonModifier> and conformance _ViewModifier_Content<A>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<TabViewCommonModifier>, UpdateEnvironmentToAllowedBehaviors>, IsSearchImplementedModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<TabViewCommonModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<TabViewCommonModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<TabViewCommonModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<TabViewCommonModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<TabViewCommonModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t EnvironmentValues.tabBarPlacement.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabBarPlacementKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabBarPlacementKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.isTabBarShowingSections.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsTabBarShowingSectionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsTabBarShowingSectionsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsTabBarShowingSectionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsTabBarShowingSectionsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.isTabBarShowingSections.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsTabBarShowingSectionsKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<IsTabBarShowingSectionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<IsTabBarShowingSectionsKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void static TabBarPlacement.topBar.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static TabBarPlacement.sidebar.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static TabBarPlacement.bottomBar.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static TabBarPlacement.ornament.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static TabBarPlacement.pageIndicator.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void TabBarPlacement.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static TabBarPlacement.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int TabBarPlacement.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type TabBarPlacement and conformance TabBarPlacement()
{
  unint64_t result = lazy protocol witness table cache variable for type TabBarPlacement and conformance TabBarPlacement;
  if (!lazy protocol witness table cache variable for type TabBarPlacement and conformance TabBarPlacement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabBarPlacement and conformance TabBarPlacement);
  }
  return result;
}

uint64_t sub_1879DB1DC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isTabBarShowingSections.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1879DB21C()
{
  return EnvironmentValues.isTabBarShowingSections.setter();
}

uint64_t sub_1879DB248()
{
  return EnvironmentValues.tabBarPlacement.setter();
}

ValueMetadata *type metadata accessor for IsTabBarShowingSectionsKey()
{
  return &type metadata for IsTabBarShowingSectionsKey;
}

ValueMetadata *type metadata accessor for TabBarPlacementKey()
{
  return &type metadata for TabBarPlacementKey;
}

unint64_t lazy protocol witness table accessor for type TabBarPlacement.Placement and conformance TabBarPlacement.Placement()
{
  unint64_t result = lazy protocol witness table cache variable for type TabBarPlacement.Placement and conformance TabBarPlacement.Placement;
  if (!lazy protocol witness table cache variable for type TabBarPlacement.Placement and conformance TabBarPlacement.Placement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabBarPlacement.Placement and conformance TabBarPlacement.Placement);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TabBarPlacement.Placement()
{
  uint64_t result = 0x726142706F74;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x72616265646973;
      break;
    case 2:
      uint64_t result = 0x61426D6F74746F62;
      break;
    case 3:
      uint64_t result = 0x746E656D616E726FLL;
      break;
    case 4:
      uint64_t result = 1701273968;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResetTabViewEnvironmentModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  void v7[2] = *(_OWORD *)(a2 + 32);
  void v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  char v8 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance ResetTabViewEnvironmentModifier()
{
}

_UNKNOWN **base witness table accessor for ViewModifier in ResetTabViewEnvironmentModifier()
{
  return &protocol witness table for ResetTabViewEnvironmentModifier;
}

double _ViewTest.touchEvent(_:globalLocation:phase:maximumPossibleForce:timestamp:modifiers:type:)@<D0>(double a1@<X0>, double a2@<X1>, char a3@<W2>, char *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, char *a7@<X6>, uint64_t a8@<X8>, double a9@<D0>, double a10@<D1>, double a11@<D2>)
{
  char v16 = *a4;
  uint64_t v17 = *a5;
  char v18 = *a7;
  if (a3)
  {
    a1 = a9;
    a2 = a10;
    if (static _TestApp.host.getter())
    {
      self;
      long long v21 = (void *)swift_dynamicCastObjCClass();
      if (v21)
      {
        objc_msgSend(v21, sel_convertPoint_toView_, 0, a9, a10);
        a1 = v22;
        a2 = v23;
        swift_unknownObjectRelease();
      }
      else
      {
        swift_unknownObjectRelease();
        a1 = a9;
        a2 = a10;
      }
    }
  }
  *(void *)a8 = v17;
  *(unsigned char *)(a8 + 8) = v16;
  *(void *)(a8 + 16) = 0;
  *(double *)(a8 + 24) = a9;
  *(double *)(a8 + 32) = a10;
  *(double *)(a8 + 40) = a1;
  *(double *)(a8 + 48) = a2;
  double result = 0.25;
  *(_OWORD *)(a8 + 56) = xmmword_18836DCC0;
  *(double *)(a8 + 72) = a11;
  *(void *)(a8 + 88) = 0;
  *(void *)(a8 + 96) = 0;
  *(void *)(a8 + 80) = a6;
  *(unsigned char *)(a8 + 104) = v18;
  return result;
}

Swift::Void __swiftcall _ViewTest.sendTouchSequence(_:)(Swift::OpaquePointer a1)
{
  uint64_t v59 = v2;
  uint64_t v58 = v1;
  type metadata accessor for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v65 = (double *)((char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7);
  uint64_t v64 = (double *)((char *)&v57 - v8);
  MEMORY[0x1F4188790](v9);
  uint64_t v73 = (uint64_t)&v57 - v10;
  type metadata accessor for CGPoint?(0, &lazy cache variable for type metadata for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)), MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v67 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x1F4188790](v13);
  char v16 = (void **)((char *)&v57 - v15);
  Swift::Int v63 = eventId;
  if (__OFADD__(eventId, 1))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  ++eventId;
  uint64_t v17 = MEMORY[0x18C115C50](a1._rawValue, v5, v14);
  uint64_t v62 = v17 - 1;
  if (!__OFSUB__(v17, 1))
  {
    v83[1] = a1._rawValue;
    type metadata accessor for CGPoint?(0, &lazy cache variable for type metadata for [(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)], (uint64_t (*)(uint64_t))type metadata accessor for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date), MEMORY[0x1E4FBB320]);
    uint64_t v19 = v18;
    uint64_t WitnessTable = swift_getWitnessTable();
    MEMORY[0x18C115A30](&v74, v19, WitnessTable);
    v83[0] = v74;
    type metadata accessor for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>(0, &lazy cache variable for type metadata for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>, MEMORY[0x1E4FBBCF8]);
    EnumeratedSequence.makeIterator()();
    type metadata accessor for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>(0, &lazy cache variable for type metadata for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>.Iterator, MEMORY[0x1E4FBBCF0]);
    uint64_t v66 = v21;
    uint64_t v68 = v79;
    long long v61 = xmmword_18834BB80;
    char v57 = v16;
    uint64_t v60 = v5;
    while (1)
    {
      uint64_t v23 = (uint64_t)v67;
      EnumeratedSequence.Iterator.next()();
      outlined init with take of (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))?(v23, (uint64_t)v16);
      type metadata accessor for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))();
      uint64_t v25 = v24;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v16, 1, v24) == 1)
      {
        swift_bridgeObjectRelease();
        return;
      }
      uint64_t v26 = *(int *)(v5 + 64);
      uint64_t v27 = v73;
      uint64_t v71 = (char *)(v73 + v26);
      uint64_t v72 = *v16;
      long long v28 = (double *)((char *)v16 + *(int *)(v25 + 48));
      double v29 = *v28;
      double v30 = v28[1];
      double v31 = v28[2];
      double v32 = v28[3];
      char v33 = *((unsigned char *)v28 + 32);
      uint64_t v70 = (char *)v28 + v26;
      long long v34 = v64;
      uint64_t v35 = (char *)v64 + v26;
      *uint64_t v64 = v29;
      v34[1] = v30;
      void v34[2] = v31;
      v34[3] = v32;
      double v69 = v32;
      *((unsigned char *)v34 + 32) = v33;
      uint64_t v36 = type metadata accessor for Date();
      uint64_t v37 = *(void *)(v36 - 8);
      uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
      v38(v35, v70, v36);
      *(double *)uint64_t v27 = v29;
      *(double *)(v27 + 8) = v30;
      *(double *)(v27 + 16) = v31;
      *(double *)(v27 + 24) = v32;
      *(unsigned char *)(v27 + 32) = v33;
      uint64_t v39 = v71;
      v38(v71, v35, v36);
      uint64_t v5 = v60;
      long long v78 = v61;
      char v40 = v72 == v62 ? 2 : 1;
      if (!v72) {
        char v40 = 0;
      }
      v79[0] = &unk_1ED40FB38;
      v79[1] = v63;
      LOBYTE(v83[0]) = v40;
      uint64_t v41 = v65;
      uint64_t v42 = (char *)v65 + *(int *)(v60 + 64);
      *uint64_t v65 = v29;
      v41[1] = v30;
      double v43 = v69;
      void v41[2] = v31;
      v41[3] = v43;
      *((unsigned char *)v41 + 32) = v33;
      (*(void (**)(char *, char *, uint64_t))(v37 + 16))(v42, v39, v36);
      Date.timeIntervalSinceReferenceDate.getter();
      Swift::UInt v45 = v44;
      (*(void (**)(char *, uint64_t))(v37 + 8))(v42, v36);
      Swift::UInt v74 = v45;
      char v77 = 0;
      double v81 = &type metadata for TouchEvent;
      unint64_t v82 = lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent();
      uint64_t v80 = swift_allocObject();
      _ViewTest.touchEvent(_:globalLocation:phase:maximumPossibleForce:timestamp:modifiers:type:)(v31, v43, v33, (char *)v83, (uint64_t *)&v74, 0, &v77, v80 + 16, v29, v30, 6.66666667);
      uint64_t v46 = v78;
      if ((void)v78) {
        break;
      }
      double v22 = (void *)MEMORY[0x1E4FBC868];
LABEL_5:
      type metadata accessor for (EventID, EventType)();
      swift_arrayDestroy();
      specialized _ViewTest.sendEvents(_:)((uint64_t)v22);
      swift_release();
      outlined destroy of (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)(v73);
      char v16 = v57;
    }
    type metadata accessor for _DictionaryStorage<EventID, EventType>();
    double v22 = (void *)static _DictionaryStorage.allocate(capacity:)();
    uint64_t v47 = (uint64_t)v68;
    uint64_t v48 = v46;
    while (1)
    {
      outlined init with copy of (EventID, EventType)(v47, (uint64_t)&v74);
      Swift::UInt v49 = v74;
      Swift::UInt v50 = v75;
      unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)(v74, v75);
      if (v52) {
        break;
      }
      *(void *)((char *)v22 + ((v51 >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << v51;
      unsigned int v53 = (Swift::UInt *)(v22[6] + 16 * v51);
      *unsigned int v53 = v49;
      v53[1] = v50;
      outlined init with take of OptionalBinaryInteger(&v76, v22[7] + 40 * v51);
      uint64_t v54 = v22[2];
      BOOL v55 = __OFADD__(v54, 1);
      uint64_t v56 = v54 + 1;
      if (v55) {
        goto LABEL_20;
      }
      void v22[2] = v56;
      v47 += 56;
      if (!--v48) {
        goto LABEL_5;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
LABEL_22:
  __break(1u);
}

void _ViewTest.measureTouchSequence(host:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v72 = a5;
  uint64_t v71 = a4;
  type metadata accessor for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)();
  uint64_t v81 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v70 = (double *)((char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v10);
  double v69 = (double *)((char *)&v63 - v11);
  MEMORY[0x1F4188790](v12);
  uint64_t v80 = (uint64_t)&v63 - v13;
  type metadata accessor for CGPoint?(0, &lazy cache variable for type metadata for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)), MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14 - 8);
  Swift::UInt v75 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (uint64_t *)((char *)&v63 - v18);
  uint64_t v87 = (char *)MEMORY[0x1E4FBC860];
  Swift::Int v68 = eventId;
  if (__OFADD__(eventId, 1))
  {
    __break(1u);
    goto LABEL_19;
  }
  ++eventId;
  uint64_t v20 = MEMORY[0x18C115C50](a3, v81, v17);
  uint64_t v67 = v20 - 1;
  if (__OFSUB__(v20, 1))
  {
LABEL_19:
    __break(1u);
    return;
  }
  *(void *)&v85[0] = a3;
  type metadata accessor for CGPoint?(0, &lazy cache variable for type metadata for [(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)], (uint64_t (*)(uint64_t))type metadata accessor for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date), MEMORY[0x1E4FBB320]);
  uint64_t v22 = v21;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C115A30](v88, v22, WitnessTable);
  *(void *)&v85[0] = *(void *)&v88[0];
  type metadata accessor for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>(0, &lazy cache variable for type metadata for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>, MEMORY[0x1E4FBBCF8]);
  EnumeratedSequence.makeIterator()();
  type metadata accessor for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>(0, &lazy cache variable for type metadata for EnumeratedSequence<[(location: CGPoint, globalLocation: CGPoint?, timestamp: Date)]>.Iterator, MEMORY[0x1E4FBBCF0]);
  uint64_t v74 = v24;
  uint64_t v65 = a2;
  uint64_t v66 = a1;
  uint64_t v64 = v19;
  while (1)
  {
    uint64_t v25 = (uint64_t)v75;
    EnumeratedSequence.Iterator.next()();
    outlined init with take of (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))?(v25, (uint64_t)v19);
    type metadata accessor for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))();
    uint64_t v27 = v26;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v19, 1, v26) == 1) {
      break;
    }
    uint64_t v28 = v80;
    uint64_t v29 = *(int *)(v81 + 64);
    uint64_t v78 = v80 + v29;
    uint64_t v79 = *v19;
    double v30 = (double *)((char *)v19 + *(int *)(v27 + 48));
    double v31 = *v30;
    double v32 = v30[1];
    double v34 = v30[2];
    double v33 = v30[3];
    int v35 = *((unsigned __int8 *)v30 + 32);
    char v77 = (char *)v30 + v29;
    uint64_t v36 = v69;
    uint64_t v37 = (char *)v69 + v29;
    *double v69 = v31;
    v36[1] = v32;
    v36[2] = v34;
    v36[3] = v33;
    *((unsigned char *)v36 + 32) = v35;
    char v38 = v35;
    int v76 = v35;
    uint64_t v39 = type metadata accessor for Date();
    uint64_t v40 = *(void *)(v39 - 8);
    uint64_t v41 = *(void (**)(void, void, void))(v40 + 32);
    v41(v37, v77, v39);
    *(double *)uint64_t v28 = v31;
    *(double *)(v28 + 8) = v32;
    *(double *)(v28 + 16) = v34;
    *(double *)(v28 + 24) = v33;
    *(unsigned char *)(v28 + 32) = v38;
    uint64_t v42 = v78;
    v41(v78, v37, v39);
    if (v79 == v67) {
      char v43 = 2;
    }
    else {
      char v43 = 1;
    }
    if (!v79) {
      char v43 = 0;
    }
    char v84 = v43;
    Swift::UInt v44 = v70;
    Swift::UInt v45 = (char *)v70 + *(int *)(v81 + 64);
    *uint64_t v70 = v31;
    v44[1] = v32;
    void v44[2] = v34;
    v44[3] = v33;
    char v46 = v76;
    *((unsigned char *)v44 + 32) = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v45, v42, v39);
    Date.timeIntervalSinceReferenceDate.getter();
    uint64_t v48 = v47;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v45, v39);
    a2 = v65;
    uint64_t v83 = v48;
    char v82 = 0;
    _ViewTest.touchEvent(_:globalLocation:phase:maximumPossibleForce:timestamp:modifiers:type:)(v34, v33, v46, &v84, &v83, 0, &v82, (uint64_t)v85, v31, v32, 6.66666667);
    v88[4] = v85[4];
    v89[0] = v86[0];
    *(_OWORD *)((char *)v89 + 9) = *(_OWORD *)((char *)v86 + 9);
    v88[0] = v85[0];
    v88[1] = v85[1];
    v88[2] = v85[2];
    v88[3] = v85[3];
    uint64_t ObjectType = swift_getObjectType();
    MEMORY[0x1F4188790](ObjectType);
    uint64_t v50 = v72;
    *(&v63 - 6) = v71;
    *(&v63 - 5) = v50;
    *(&v63 - 4) = v73;
    *(&v63 - 3) = (uint64_t)&unk_1ED40FB38;
    Swift::Int v61 = v68;
    uint64_t v62 = v88;
    _BenchmarkHost.measureAction(action:)();
    uint64_t v52 = v51;
    unsigned int v53 = v87;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unsigned int v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v53 + 2) + 1, 1, v53);
    }
    unint64_t v55 = *((void *)v53 + 2);
    unint64_t v54 = *((void *)v53 + 3);
    if (v55 >= v54 >> 1) {
      unsigned int v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v54 > 1), v55 + 1, 1, v53);
    }
    *((void *)v53 + 2) = v55 + 1;
    *(void *)&v53[8 * v55 + 32] = v52;
    Swift::Double v56 = _BenchmarkHost.measureRender(interval:)(0.0166666667);
    unint64_t v58 = *((void *)v53 + 2);
    unint64_t v57 = *((void *)v53 + 3);
    if (v58 >= v57 >> 1) {
      unsigned int v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v53);
    }
    uint64_t v19 = v64;
    *((void *)v53 + 2) = v58 + 1;
    *(Swift::Double *)&v53[8 * v58 + 32] = v56;
    outlined release of TouchEvent((uint64_t)v88);
    uint64_t v87 = v53;
    outlined destroy of (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)(v80);
  }
  swift_bridgeObjectRelease();
  uint64_t v59 = swift_getObjectType();
  uint64_t v60 = MEMORY[0x18C10E9C0](v59, a2, 1.0);
  specialized Array.append<A>(contentsOf:)(v60);
}

uint64_t closure #1 in _ViewTest.measureTouchSequence(host:_:)(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  type metadata accessor for CGPoint?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(EventID, EventType)>, (uint64_t (*)(uint64_t))type metadata accessor for (EventID, EventType), MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  *(void *)(inited + 32) = a2;
  *(void *)(inited + 40) = a3;
  *(void *)(inited + 72) = &type metadata for TouchEvent;
  *(void *)(inited + 80) = lazy protocol witness table accessor for type TouchEvent and conformance TouchEvent();
  uint64_t v8 = (_OWORD *)swift_allocObject();
  *(void *)(inited + 48) = v8;
  long long v9 = a4[1];
  v8[1] = *a4;
  v8[2] = v9;
  long long v10 = a4[3];
  v8[3] = a4[2];
  void v8[4] = v10;
  long long v11 = a4[5];
  v8[5] = a4[4];
  v8[6] = v11;
  *(_OWORD *)((char *)v8 + 105) = *(_OWORD *)((char *)a4 + 89);
  unint64_t v12 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  outlined retain of TouchEvent((uint64_t)a4);
  type metadata accessor for (EventID, EventType)();
  swift_arrayDestroy();
  specialized _ViewTest.sendEvents(_:)(v12);
  return swift_bridgeObjectRelease();
}

void type metadata accessor for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)()
{
  if (!lazy cache variable for type metadata for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))
  {
    type metadata accessor for CGPoint(255);
    type metadata accessor for CGPoint?(255, (unint64_t *)&lazy cache variable for type metadata for CGPoint?, (uint64_t (*)(uint64_t))type metadata accessor for CGPoint, MEMORY[0x1E4FBB718]);
    type metadata accessor for Date();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date));
    }
  }
}

void type metadata accessor for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)))
  {
    type metadata accessor for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)));
    }
  }
}

uint64_t outlined init with take of (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for CGPoint?(0, &lazy cache variable for type metadata for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date))?, (uint64_t (*)(uint64_t))type metadata accessor for (offset: Int, element: (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)), MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1879DC704()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t outlined init with copy of (EventID, EventType)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (EventID, EventType)();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)(uint64_t a1)
{
  type metadata accessor for (location: CGPoint, globalLocation: CGPoint?, timestamp: Date)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in _ViewTest.measureTouchSequence(host:_:)()
{
  return closure #1 in _ViewTest.measureTouchSequence(host:_:)(*(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(_OWORD **)(v0 + 56));
}

void type metadata accessor for CGPoint?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t outlined retain of TouchEvent(uint64_t a1)
{
  return a1;
}

void *type metadata accessor for TestTouchID()
{
  return &unk_1ED40FB38;
}

void ScenePhase.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static ScenePhase.< infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

Swift::Int ScenePhase.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Comparable.< infix(_:_:) in conformance ScenePhase(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL protocol witness for static Comparable.<= infix(_:_:) in conformance ScenePhase(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL protocol witness for static Comparable.>= infix(_:_:) in conformance ScenePhase(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL protocol witness for static Comparable.> infix(_:_:) in conformance ScenePhase(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

uint64_t (*EnvironmentValues.scenePhase.modify(void *a1))(uint64_t *a1)
{
  *a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.scenePhase.modify;
}

uint64_t EnvironmentValues.scenePhase.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<ScenePhaseKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScenePhaseKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

unint64_t lazy protocol witness table accessor for type ScenePhase and conformance ScenePhase()
{
  unint64_t result = lazy protocol witness table cache variable for type ScenePhase and conformance ScenePhase;
  if (!lazy protocol witness table cache variable for type ScenePhase and conformance ScenePhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScenePhase and conformance ScenePhase);
  }
  return result;
}

uint64_t sub_1879DCBB4()
{
  return EnvironmentValues.scenePhase.setter();
}

ValueMetadata *type metadata accessor for ScenePhaseKey()
{
  return &type metadata for ScenePhaseKey;
}

void __swiftcall RadioGroupPickerStyle.init()()
{
}

void static RadioGroupPickerStyle._makeView<A>(value:inputs:)()
{
}

void static RadioGroupPickerStyle._makeViewList<A>(value:inputs:)()
{
}

uint64_t *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AnyOptionButtonCollection(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = a2[1];
  if (*result >= *a2)
  {
    BOOL v5 = __OFSUB__(v2, v3);
    BOOL v4 = v2 - v3 < 0;
  }
  else
  {
    BOOL v5 = 0;
    BOOL v4 = 0;
  }
  if (v4 == v5) {
    __break(1u);
  }
  return result;
}

void *protocol witness for Collection._failEarlyRangeCheck(_:bounds:) in conformance AnyOptionButtonCollection(void *result, void *a2)
{
  if (*result < *a2 || a2[1] < *result) {
    __break(1u);
  }
  return result;
}

{
  if (*result < *a2 || a2[1] < result[1]) {
    __break(1u);
  }
  return result;
}

void protocol witness for Sequence.makeIterator() in conformance AnyOptionButtonCollection()
{
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance AnyOptionButtonCollection(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence.withContiguousStorageIfAvailable<A>(_:) in conformance AnyOptionButtonCollection()
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)();
}

uint64_t OptionButtonCollection.__ivar_destroyer()
{
  outlined destroy of SubviewsCollection(v0 + 16);

  return swift_bridgeObjectRelease();
}

BOOL protocol witness for static View._viewListCount(inputs:) in conformance OptionButtonElement()
{
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>();
  type metadata accessor for LayoutRadioGroupStyle<_HStackLayout>(0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>, (uint64_t)&type metadata for KeyboardShortcutPickerOptionTraitKey, (uint64_t)&protocol witness table for KeyboardShortcutPickerOptionTraitKey, MEMORY[0x1E4F408B8]);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>();
  uint64_t v0 = static ModifiedContent<>._viewListCount(inputs:)();
  return (v1 & 1) == 0 && v0 == 1;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedRadioGroupPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedRadioGroupPicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedRadioGroupPicker()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance ResolvedRadioGroupPicker@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance RadioGroupStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance RadioGroupStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance RadioGroupStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

void View.horizontalRadioGroupLayout()()
{
}

ValueMetadata *type metadata accessor for RadioGroupPickerStyle()
{
  return &type metadata for RadioGroupPickerStyle;
}

uint64_t type metadata accessor for AnyOptionButtonCollection()
{
  return self;
}

uint64_t type metadata completion function for OptionButtonCollection()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for OptionButtonCollection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_1879DD1E4()
{
  return swift_getWitnessTable();
}

void type metadata accessor for RadioGroupStyleModifier<LayoutRadioGroupStyle<_HStackLayout>>()
{
  if (!lazy cache variable for type metadata for RadioGroupStyleModifier<LayoutRadioGroupStyle<_HStackLayout>>)
  {
    type metadata accessor for LayoutRadioGroupStyle<_HStackLayout>(255, &lazy cache variable for type metadata for LayoutRadioGroupStyle<_HStackLayout>, MEMORY[0x1E4F3F838], MEMORY[0x1E4F3F820], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LayoutRadioGroupStyle);
    lazy protocol witness table accessor for type LayoutRadioGroupStyle<_HStackLayout> and conformance LayoutRadioGroupStyle<A>();
    unint64_t v0 = type metadata accessor for RadioGroupStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RadioGroupStyleModifier<LayoutRadioGroupStyle<_HStackLayout>>);
    }
  }
}

uint64_t type metadata accessor for LayoutRadioGroupStyle()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type LayoutRadioGroupStyle<_HStackLayout> and conformance LayoutRadioGroupStyle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutRadioGroupStyle<_HStackLayout> and conformance LayoutRadioGroupStyle<A>;
  if (!lazy protocol witness table cache variable for type LayoutRadioGroupStyle<_HStackLayout> and conformance LayoutRadioGroupStyle<A>)
  {
    type metadata accessor for LayoutRadioGroupStyle<_HStackLayout>(255, &lazy cache variable for type metadata for LayoutRadioGroupStyle<_HStackLayout>, MEMORY[0x1E4F3F838], MEMORY[0x1E4F3F820], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LayoutRadioGroupStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutRadioGroupStyle<_HStackLayout> and conformance LayoutRadioGroupStyle<A>);
  }
  return result;
}

uint64_t type metadata accessor for RadioGroupStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for LayoutRadioGroupStyle(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for LayoutRadioGroupStyle(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1879DD710);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

ValueMetadata *type metadata accessor for HorizintolControlGroupingItemKey()
{
  return &type metadata for HorizintolControlGroupingItemKey;
}

_UNKNOWN **base witness table accessor for ViewModifier in RadioGroupStyleModifier<A>()
{
  return &protocol witness table for RadioGroupStyleModifier<A>;
}

uint64_t base witness table accessor for MultiViewModifier in RadioGroupStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in RadioGroupStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for StyleModifier.StyleBody : View in RadioGroupStyleModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for RadioGroupStyle.Body : View in LayoutRadioGroupStyle<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Sequence.Iterator : IteratorProtocol in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type IndexingIterator<AnyOptionButtonCollection> and conformance IndexingIterator<A>, type metadata accessor for IndexingIterator<AnyOptionButtonCollection>);
}

void type metadata accessor for IndexingIterator<AnyOptionButtonCollection>(uint64_t a1)
{
}

void type metadata accessor for Slice<AnyOptionButtonCollection>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for AnyOptionButtonCollection();
    uint64_t v7 = lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type AnyOptionButtonCollection and conformance AnyOptionButtonCollection, (void (*)(uint64_t))type metadata accessor for AnyOptionButtonCollection);
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t base witness table accessor for Sequence in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type AnyOptionButtonCollection and conformance AnyOptionButtonCollection, (void (*)(uint64_t))type metadata accessor for AnyOptionButtonCollection);
}

uint64_t associated type witness table accessor for Collection.Indices : Collection in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : Collection in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type Slice<AnyOptionButtonCollection> and conformance Slice<A>, type metadata accessor for Slice<AnyOptionButtonCollection>);
}

void type metadata accessor for Slice<AnyOptionButtonCollection>(uint64_t a1)
{
}

uint64_t base witness table accessor for Collection in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type AnyOptionButtonCollection and conformance AnyOptionButtonCollection, (void (*)(uint64_t))type metadata accessor for AnyOptionButtonCollection);
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for LayoutRadioGroupStyle<_HStackLayout>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Range<Int>();
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

{
  uint64_t result;

  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for DisplayList.HostedViews.Preference<ArchivedViewStatesKey>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type Slice<AnyOptionButtonCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<AnyOptionButtonCollection> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type AnyOptionButtonCollection and conformance AnyOptionButtonCollection);
}

uint64_t base witness table accessor for BidirectionalCollection in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type AnyOptionButtonCollection and conformance AnyOptionButtonCollection, (void (*)(uint64_t))type metadata accessor for AnyOptionButtonCollection);
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in AnyOptionButtonCollection()
{
  return lazy protocol witness table accessor for type Slice<AnyOptionButtonCollection> and conformance <> Slice<A>(&lazy protocol witness table cache variable for type Slice<AnyOptionButtonCollection> and conformance <> Slice<A>, &lazy protocol witness table cache variable for type AnyOptionButtonCollection and conformance AnyOptionButtonCollection);
}

uint64_t lazy protocol witness table accessor for type Slice<AnyOptionButtonCollection> and conformance <> Slice<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Slice<AnyOptionButtonCollection>(255);
    lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>(a2, (void (*)(uint64_t))type metadata accessor for AnyOptionButtonCollection);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance RadioGroupStyleContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return specialized static StyleContext.accepts<A>(_:at:)(a1, a4);
}

uint64_t protocol witness for static StyleContext.acceptsAny<A>(_:) in conformance RadioGroupStyleContext(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  if (a2) {
    memcpy((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
  }
  return static StyleContext.acceptsAny<A>(_:)() & 1;
}

ValueMetadata *type metadata accessor for RadioGroupStyleContext()
{
  return &type metadata for RadioGroupStyleContext;
}

uint64_t destroy for OptionButtonElement(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OptionButtonElement(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v6 = *(void **)(a2 + 80);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v6;
  *(void *)(a1 + 88) = v5;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  *(_WORD *)(a1 + 120) = *(_WORD *)(a2 + 120);
  uint64_t v8 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v8;
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  swift_retain();
  swift_bridgeObjectRetain();
  id v9 = v6;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OptionButtonElement(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  long long v4 = *(void **)(a1 + 80);
  uint64_t v5 = *(void **)(a2 + 80);
  *(void *)(a1 + 80) = v5;
  id v6 = v5;

  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  uint64_t v7 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v7;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  return a1;
}

__n128 __swift_memcpy153_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 137) = *(_OWORD *)(a2 + 137);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t assignWithTake for OptionButtonElement(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  id v6 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);

  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release();
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  uint64_t v7 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v7;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for OptionButtonElement(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 153)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OptionButtonElement(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 152) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 153) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 153) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for OptionButtonElement()
{
  return &unk_1ED42D238;
}

ValueMetadata *type metadata accessor for ResolvedRadioGroupPicker.Label()
{
  return &type metadata for ResolvedRadioGroupPicker.Label;
}

void *initializeBufferWithCopyOfBuffer for ResolvedRadioGroupPicker(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

void *assignWithCopy for ResolvedRadioGroupPicker(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for ResolvedRadioGroupPicker(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

void *type metadata accessor for ResolvedRadioGroupPicker()
{
  return &unk_1ED4433A8;
}

uint64_t sub_1879DE264()
{
  return swift_getWitnessTable();
}

void type metadata accessor for ForEach<Range<Int>, Int, OptionButtonElement>()
{
  if (!lazy cache variable for type metadata for ForEach<Range<Int>, Int, OptionButtonElement>)
  {
    type metadata accessor for LayoutRadioGroupStyle<_HStackLayout>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Range<Int>, Int, OptionButtonElement>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type RadioGroupStyleContext and conformance RadioGroupStyleContext()
{
  unint64_t result = lazy protocol witness table cache variable for type RadioGroupStyleContext and conformance RadioGroupStyleContext;
  if (!lazy protocol witness table cache variable for type RadioGroupStyleContext and conformance RadioGroupStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadioGroupStyleContext and conformance RadioGroupStyleContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, OptionButtonElement> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, OptionButtonElement> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, OptionButtonElement> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, OptionButtonElement>();
    lazy protocol witness table accessor for type OptionButtonElement and conformance OptionButtonElement();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, OptionButtonElement> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type OptionButtonElement and conformance OptionButtonElement()
{
  unint64_t result = lazy protocol witness table cache variable for type OptionButtonElement and conformance OptionButtonElement;
  if (!lazy protocol witness table cache variable for type OptionButtonElement and conformance OptionButtonElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OptionButtonElement and conformance OptionButtonElement);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<RadioGroupStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<RadioGroupStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<RadioGroupStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for StyleContextWriter<RadioGroupStyleContext>(255, &lazy cache variable for type metadata for StyleContextWriter<RadioGroupStyleContext>, (uint64_t (*)(void))lazy protocol witness table accessor for type RadioGroupStyleContext and conformance RadioGroupStyleContext, (uint64_t)&type metadata for RadioGroupStyleContext, MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<RadioGroupStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t sub_1879DE68C()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedRadioGroupPicker()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker;
  if (!lazy protocol witness table cache variable for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker;
  if (!lazy protocol witness table cache variable for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RadioGroupStyleModifier<AutomaticRadioGroupStyle> and conformance RadioGroupStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type RadioGroupStyleModifier<AutomaticRadioGroupStyle> and conformance RadioGroupStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type RadioGroupStyleModifier<AutomaticRadioGroupStyle> and conformance RadioGroupStyleModifier<A>)
  {
    type metadata accessor for StyleContextWriter<RadioGroupStyleContext>(255, &lazy cache variable for type metadata for RadioGroupStyleModifier<AutomaticRadioGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type AutomaticRadioGroupStyle and conformance AutomaticRadioGroupStyle, (uint64_t)&unk_1ED441C00, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for RadioGroupStyleModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RadioGroupStyleModifier<AutomaticRadioGroupStyle> and conformance RadioGroupStyleModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AutomaticRadioGroupStyle and conformance AutomaticRadioGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticRadioGroupStyle and conformance AutomaticRadioGroupStyle;
  if (!lazy protocol witness table cache variable for type AutomaticRadioGroupStyle and conformance AutomaticRadioGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticRadioGroupStyle and conformance AutomaticRadioGroupStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for RadioGroupStyle.Body : View in AutomaticRadioGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for View in ResolvedRadioGroupPicker.Label()
{
  return &protocol witness table for ResolvedRadioGroupPicker.Label;
}

unint64_t instantiation function for generic protocol witness table for ResolvedRadioGroupPicker.Label(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label;
  if (!lazy protocol witness table cache variable for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label;
  if (!lazy protocol witness table cache variable for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in OptionButtonElement()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>(255);
    type metadata accessor for StyleContextWriter<RadioGroupStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<HasKeyboardShortcut>, (uint64_t (*)(void))lazy protocol witness table accessor for type HasKeyboardShortcut and conformance HasKeyboardShortcut, (uint64_t)&type metadata for HasKeyboardShortcut, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>)
  {
    type metadata accessor for LayoutRadioGroupStyle<_HStackLayout>(255, &lazy cache variable for type metadata for OptionButton<Subview>, MEMORY[0x1E4F41708], MEMORY[0x1E4F41700], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for OptionButton);
    type metadata accessor for _EnvironmentKeyTransformModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<KeyboardShortcut?> and conformance _EnvironmentKeyWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, (void (*)(void))lazy protocol witness table accessor for type OptionButton<Subview> and conformance OptionButton<A>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>);
}

unint64_t lazy protocol witness table accessor for type OptionButton<Subview> and conformance OptionButton<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type OptionButton<Subview> and conformance OptionButton<A>;
  if (!lazy protocol witness table cache variable for type OptionButton<Subview> and conformance OptionButton<A>)
  {
    type metadata accessor for LayoutRadioGroupStyle<_HStackLayout>(255, &lazy cache variable for type metadata for OptionButton<Subview>, MEMORY[0x1E4F41708], MEMORY[0x1E4F41700], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for OptionButton);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OptionButton<Subview> and conformance OptionButton<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<KeyboardShortcut?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  return lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<KeyboardShortcut?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardShortcut?>);
}

uint64_t lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *type metadata accessor for GroupedFormRadioGroupStyle()
{
  return &unk_1ED44B420;
}

void *type metadata accessor for AutomaticRadioGroupStyle()
{
  return &unk_1ED441C00;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>(255, &lazy cache variable for type metadata for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, MEMORY[0x1E4F41708], MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>();
    type metadata accessor for LayoutRadioGroupStyle<_HStackLayout>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>, (uint64_t)&type metadata for KeyboardShortcutPickerOptionTraitKey, (uint64_t)&protocol witness table for KeyboardShortcutPickerOptionTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>, RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>, RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>, RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>, RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>>, type metadata accessor for ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker and conformance ResolvedRadioGroupPicker, (void (*)(void))lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>, RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ResolvedRadioGroupPicker, StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for _ConditionalContent<Subview, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, MEMORY[0x1E4F410E8]);
    type metadata accessor for StyleContextWriter<RadioGroupStyleContext>(255, &lazy cache variable for type metadata for RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type GroupedFormRadioGroupStyle and conformance GroupedFormRadioGroupStyle, (uint64_t)&unk_1ED44B420, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for RadioGroupStyleModifier);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StyleContextWriter<RadioGroupStyleContext>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type GroupedFormRadioGroupStyle and conformance GroupedFormRadioGroupStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type GroupedFormRadioGroupStyle and conformance GroupedFormRadioGroupStyle;
  if (!lazy protocol witness table cache variable for type GroupedFormRadioGroupStyle and conformance GroupedFormRadioGroupStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GroupedFormRadioGroupStyle and conformance GroupedFormRadioGroupStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>;
  if (!lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<Bool>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>, (uint64_t)&type metadata for GroupedFormStyleContext, MEMORY[0x1E4F410E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  }
  return result;
}

void type metadata accessor for RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>()
{
  if (!lazy cache variable for type metadata for RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>)
  {
    type metadata accessor for LayoutRadioGroupStyle<_HStackLayout>(255, &lazy cache variable for type metadata for LayoutRadioGroupStyle<_VStackLayout>, MEMORY[0x1E4F3F8E8], MEMORY[0x1E4F3F8C0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LayoutRadioGroupStyle);
    lazy protocol witness table accessor for type LayoutRadioGroupStyle<_VStackLayout> and conformance LayoutRadioGroupStyle<A>();
    unint64_t v0 = type metadata accessor for RadioGroupStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RadioGroupStyleModifier<LayoutRadioGroupStyle<_VStackLayout>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type LayoutRadioGroupStyle<_VStackLayout> and conformance LayoutRadioGroupStyle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LayoutRadioGroupStyle<_VStackLayout> and conformance LayoutRadioGroupStyle<A>;
  if (!lazy protocol witness table cache variable for type LayoutRadioGroupStyle<_VStackLayout> and conformance LayoutRadioGroupStyle<A>)
  {
    type metadata accessor for LayoutRadioGroupStyle<_HStackLayout>(255, &lazy cache variable for type metadata for LayoutRadioGroupStyle<_VStackLayout>, MEMORY[0x1E4F3F8E8], MEMORY[0x1E4F3F8C0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for LayoutRadioGroupStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LayoutRadioGroupStyle<_VStackLayout> and conformance LayoutRadioGroupStyle<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, RadioGroupStyleModifier<GroupedFormRadioGroupStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t associated type witness table accessor for RadioGroupStyle.Body : View in GroupedFormRadioGroupStyle()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier>, type metadata accessor for ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>);
    lazy protocol witness table accessor for type ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>, AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>(uint64_t a1)
{
}

void type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>()
{
  if (!lazy cache variable for type metadata for ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>)
  {
    type metadata accessor for LayoutRadioGroupStyle<_HStackLayout>(255, (unint64_t *)&lazy cache variable for type metadata for Range<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB568], MEMORY[0x1E4FBB6A0]);
    type metadata accessor for ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>();
    lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>((unint64_t *)&lazy protocol witness table cache variable for type Range<Int> and conformance <> Range<A>);
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<Bool>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>);
    }
  }
}

void type metadata accessor for _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>)
  {
    type metadata accessor for LayoutRadioGroupStyle<_HStackLayout>(255, &lazy cache variable for type metadata for _LayoutTrait<HorizintolControlGroupingItemKey>, (uint64_t)&type metadata for HorizintolControlGroupingItemKey, (uint64_t)&protocol witness table for HorizintolControlGroupingItemKey, MEMORY[0x1E4F3F6B0]);
    lazy protocol witness table accessor for type _LayoutTrait<HorizintolControlGroupingItemKey> and conformance _LayoutTrait<A>();
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _LayoutTrait<HorizintolControlGroupingItemKey> and conformance _LayoutTrait<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _LayoutTrait<HorizintolControlGroupingItemKey> and conformance _LayoutTrait<A>;
  if (!lazy protocol witness table cache variable for type _LayoutTrait<HorizintolControlGroupingItemKey> and conformance _LayoutTrait<A>)
  {
    type metadata accessor for LayoutRadioGroupStyle<_HStackLayout>(255, &lazy cache variable for type metadata for _LayoutTrait<HorizintolControlGroupingItemKey>, (uint64_t)&type metadata for HorizintolControlGroupingItemKey, (uint64_t)&protocol witness table for HorizintolControlGroupingItemKey, MEMORY[0x1E4F3F6B0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutTrait<HorizintolControlGroupingItemKey> and conformance _LayoutTrait<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier>(255);
    lazy protocol witness table accessor for type LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>> and conformance <> LabeledContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>> and conformance <> LabeledContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>> and conformance <> LabeledContent<A, B>;
  if (!lazy protocol witness table cache variable for type LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>> and conformance <> LabeledContent<A, B>)
  {
    type metadata accessor for LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>, (void (*)(void))lazy protocol witness table accessor for type ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>> and conformance <> ForEach<A, B, C>, (void (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContent<ResolvedRadioGroupPicker.Label, ModifiedContent<ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>, _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>>> and conformance <> LabeledContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>, (void (*)(void))lazy protocol witness table accessor for type OptionButtonElement and conformance OptionButtonElement, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<Range<Int>, Int, ModifiedContent<OptionButtonElement, _EnvironmentKeyWritingModifier<TextAlignment>>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<OptionButton<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>()
{
  return lazy protocol witness table accessor for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>> and conformance _TraitWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<_LayoutTrait<HorizintolControlGroupingItemKey>>);
}

uint64_t type metadata accessor for AnyWindowStyleStorageBase()
{
  return self;
}

uint64_t type metadata accessor for AnyWindowStyleStorage()
{
  return __swift_instantiateGenericMetadata();
}

void AnyWindowStyleStorageBase.__deallocating_deinit()
{
}

uint64_t ImageRendererHost.platformImage.getter()
{
  swift_beginAccess();
  if (*(unsigned char *)(v0 + 144) == 1) {

  }
  uint64_t v1 = (void *)(v0 + 152);
  swift_beginAccess();
  if (!*(void *)(v0 + 152))
  {
    unint64_t v2 = (void *)ImageRendererHost.cgImage.getter();
    if (v2)
    {
      long long v3 = v2;
      id v7 = v2;
      closure #1 in ImageRendererHost.platformImage.getter(&v7, v6);

      uint64_t v4 = v6[0];
    }
    else
    {
      uint64_t v4 = 0;
    }
    swift_beginAccess();
    void *v1 = v4;
    swift_unknownObjectRelease();
  }
  swift_beginAccess();
  if (*v1)
  {
    swift_unknownObjectRetain();
    self;
    uint64_t result = swift_dynamicCastObjCClass();
    if (result) {
      return result;
    }
    swift_unknownObjectRelease();
  }
  return 0;
}

void closure #1 in ImageRendererHost.platformImage.getter(id *a1@<X0>, void *a2@<X8>)
{
  id v3 = *a1;
  ImageRendererHost.cgImageScale.getter();
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1818]), sel_initWithCGImage_scale_orientation_, v3, 0, v4);

  *a2 = v5;
}

uint64_t ImageRenderer.uiImage.getter()
{
  ImageRenderer.accessSeed()();
  swift_retain();
  uint64_t v0 = ImageRendererHost.platformImage.getter();
  swift_release();
  return v0;
}

SwiftUI::InsetListStyle __swiftcall InsetListStyle.init()()
{
  void *v0 = 3;
  return result;
}

SwiftUI::InsetListStyle __swiftcall InsetListStyle.init(alternatesRowBackgrounds:)(Swift::Bool alternatesRowBackgrounds)
{
  result.options.rawuint64_t Value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

SwiftUI::InsetListStyle __swiftcall InsetListStyle.init(alternatesRowBackgrounds:selectionFollowsCursor:)(Swift::Bool alternatesRowBackgrounds, Swift::Bool selectionFollowsCursor)
{
  result.options.rawuint64_t Value = _diagnoseUnavailableCodeReached()();
  __break(1u);
  return result;
}

uint64_t static InsetListStyle._makeView<A>(value:inputs:)()
{
  return static StaticIf<>._makeView(view:inputs:)();
}

void type metadata accessor for InterfaceIdiomPredicate<VisionInterfaceIdiom>()
{
  if (!lazy cache variable for type metadata for InterfaceIdiomPredicate<VisionInterfaceIdiom>)
  {
    unint64_t v0 = type metadata accessor for InterfaceIdiomPredicate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<VisionInterfaceIdiom>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext);
    lazy protocol witness table accessor for type StyleContextWriter<PlainListStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<PlainListStyleContext> and conformance StyleContextWriter<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    type metadata accessor for StyleContextWriter<PlainListStyleContext>(255, a3, a4);
    unint64_t v5 = type metadata accessor for ModifiedContent();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for StyleContextWriter<PlainListStyleContext>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for StyleContextWriter();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>>, &lazy cache variable for type metadata for StyleContextWriter<InsetListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext);
    lazy protocol witness table accessor for type StyleContextWriter<PlainListStyleContext> and conformance StyleContextWriter<A>(&lazy protocol witness table cache variable for type StyleContextWriter<InsetListStyleContext> and conformance StyleContextWriter<A>, &lazy cache variable for type metadata for StyleContextWriter<InsetListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StyleContextWriter<PlainListStyleContext> and conformance StyleContextWriter<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for StyleContextWriter<PlainListStyleContext>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for InsetList()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for InsetListStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static InsetListStyle._makeViewList<A>(value:inputs:)()
{
  return static StaticIf<>._makeViewList(view:inputs:)();
}

uint64_t InsetListStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ListValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t InsetListStyle.Body.value.getter(int a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for InterfaceIdiomPredicate<VisionInterfaceIdiom>();
  uint64_t v7 = v6;
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext);
  type metadata accessor for SelectionManagerBox();
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>();
  swift_getWitnessTable();
  uint64_t v8 = type metadata accessor for PlainListBody();
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>>, &lazy cache variable for type metadata for StyleContextWriter<InsetListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>();
  uint64_t v29 = v7;
  uint64_t v30 = v8;
  uint64_t v31 = type metadata accessor for InsetList();
  unint64_t v32 = lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  uint64_t v9 = type metadata accessor for StaticIf();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  unsigned int v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  int v15 = &v20[-v14];
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  int v26 = a1;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  int v23 = a1;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v19 = swift_getWitnessTable();
  StaticIf<>.init<A>(idiom:then:else:)();
  uint64_t v27 = WitnessTable;
  uint64_t v28 = v19;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  double v17 = *(void (**)(unsigned char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(unsigned char *, uint64_t))v17)(v15, v9);
}

uint64_t closure #1 in InsetListStyle.Body.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v37 = a4;
  uint64_t v33 = a3;
  uint64_t v7 = type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  MEMORY[0x1F4188790](v8);
  double v34 = (char *)v32 - v9;
  uint64_t v41 = &type metadata for InsetListStyle;
  uint64_t v42 = a2;
  uint64_t v10 = a2;
  char v43 = &protocol witness table for InsetListStyle;
  uint64_t v44 = a3;
  uint64_t v11 = type metadata accessor for _ListValue();
  uint64_t v12 = v11 - 8;
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v32 - v13;
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext);
  uint64_t v16 = v15;
  void v32[2] = v15;
  unint64_t v17 = lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>();
  v32[0] = v17;
  v32[1] = v7;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v41 = v16;
  uint64_t v42 = v7;
  char v43 = (_UNKNOWN **)v17;
  uint64_t v44 = WitnessTable;
  uint64_t v19 = type metadata accessor for PlainListBody();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)v32 - v24;
  uint64_t v26 = v10;
  uint64_t v27 = v33;
  InsetListStyle.Body.base.getter((uint64_t)v14);
  uint64_t v28 = &v14[*(int *)(v12 + 60)];
  uint64_t v29 = (uint64_t)v34;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v34, v28, v36);
  uint64_t v38 = v26;
  uint64_t v39 = v27;
  int v40 = a1;
  PlainListBody.init(selection:isOutline:content:)(v29, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #1 in closure #1 in InsetListStyle.Body.value.getter, (uint64_t)v22);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v22);
  uint64_t v30 = *(void (**)(char *, uint64_t))(v20 + 8);
  v30(v22, v19);
  static ViewBuilder.buildExpression<A>(_:)(v25);
  return ((uint64_t (*)(char *, uint64_t))v30)(v25, v19);
}

uint64_t closure #2 in InsetListStyle.Body.value.getter(int a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>>, &lazy cache variable for type metadata for StyleContextWriter<InsetListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext);
  v16[0] = v6;
  v16[1] = type metadata accessor for SelectionManagerBox();
  v16[2] = lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>();
  v16[3] = swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for InsetList();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v16 - v12;
  InsetListStyle.Body.insetListBody.getter(a1, a2, a3, (uint64_t)v10);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v8 + 8);
  v14(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v14)(v13, v7);
}

uint64_t InsetListStyle.Body.insetListBody.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v39 = a4;
  uint64_t v7 = type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  uint64_t v38 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  uint64_t v37 = (char *)&v30 - v9;
  char v43 = &type metadata for InsetListStyle;
  uint64_t v44 = a2;
  Swift::UInt v45 = &protocol witness table for InsetListStyle;
  uint64_t v46 = a3;
  uint64_t v10 = type metadata accessor for _ListValue();
  uint64_t v36 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (uint64_t *)((char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v13);
  int v15 = (char *)&v30 - v14;
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>>, &lazy cache variable for type metadata for StyleContextWriter<InsetListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext);
  unint64_t v17 = v16;
  double v34 = v16;
  unint64_t v18 = lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>();
  unint64_t v32 = v18;
  uint64_t v33 = v7;
  uint64_t WitnessTable = swift_getWitnessTable();
  char v43 = v17;
  uint64_t v44 = v7;
  Swift::UInt v45 = (_UNKNOWN **)v18;
  uint64_t v46 = WitnessTable;
  uint64_t v19 = type metadata accessor for InsetList();
  uint64_t v35 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v30 - v23;
  InsetListStyle.Body.base.getter((uint64_t)v15);
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  uint64_t v26 = (uint64_t)v37;
  v25(v37, &v15[*(int *)(v10 + 52)], v38);
  InsetListStyle.Body.base.getter((uint64_t)v12);
  uint64_t v27 = *v12;
  (*(void (**)(uint64_t *, uint64_t))(v36 + 8))(v12, v10);
  uint64_t v40 = a2;
  uint64_t v41 = a3;
  int v42 = a1;
  InsetList.init(selection:options:content:)(v26, v27, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #1 in InsetListStyle.Body.insetListBody.getter, (uint64_t)v21);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v21);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v35 + 8);
  v28(v21, v19);
  static ViewBuilder.buildExpression<A>(_:)(v24);
  return ((uint64_t (*)(char *, uint64_t))v28)(v24, v19);
}

uint64_t closure #1 in closure #1 in InsetListStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = &type metadata for InsetListStyle;
  v8[1] = a2;
  v8[2] = &protocol witness table for InsetListStyle;
  v8[3] = a3;
  uint64_t v3 = type metadata accessor for _ListValue();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v8 - v5;
  InsetListStyle.Body.base.getter((uint64_t)v8 - v5);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t InsetList.init(selection:options:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for Binding();
  uint64_t v8 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = type metadata accessor for InsetList();
  *(void *)(a4 + *(int *)(v9 + 52)) = a2;
  return a3(v9, v10, v11, v12);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance InsetListStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for InterfaceIdiomPredicate<VisionInterfaceIdiom>();
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<PlainListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type PlainListStyleContext and conformance PlainListStyleContext);
  type metadata accessor for SelectionManagerBox();
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>> and conformance <> ModifiedContent<A, B>();
  swift_getWitnessTable();
  type metadata accessor for PlainListBody();
  type metadata accessor for ModifiedContent<ListStyleContent, StyleContextWriter<PlainListStyleContext>>(255, &lazy cache variable for type metadata for ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>>, &lazy cache variable for type metadata for StyleContextWriter<InsetListStyleContext>, (void (*)(void))lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext);
  lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, StyleContextWriter<InsetListStyleContext>> and conformance <> ModifiedContent<A, B>();
  type metadata accessor for InsetList();
  lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
  uint64_t v2 = type metadata accessor for StaticIf();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance InsetListStyle.Body<A>(uint64_t a1)
{
  return InsetListStyle.Body.value.getter(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t getEnumTagSinglePayload for InsetList(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    int v6 = 0x7FFFFFFF;
  }
  else {
    int v6 = *(_DWORD *)(v4 + 84);
  }
  unsigned int v7 = v6 - 1;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v13 = v7;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  uint64_t v15 = v12 + 8;
  int v16 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  unint64_t v17 = ((v15 + ((v14 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  char v18 = 8 * v17;
  if (v17 <= 3)
  {
    unsigned int v21 = ((v16 + ~(-1 << v18)) >> v18) + 1;
    if (HIWORD(v21))
    {
      int v19 = *(_DWORD *)((char *)a1 + v17);
      if (!v19) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v21 > 0xFF)
    {
      int v19 = *(unsigned __int16 *)((char *)a1 + v17);
      if (!*(unsigned __int16 *)((char *)a1 + v17)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v21 < 2)
    {
LABEL_28:
      if (v7 >= v10)
      {
        uint64_t v27 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v5 & 0x80000000) != 0)
        {
          unsigned int v29 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v27 + v11 + 8) & ~v11);
        }
        else
        {
          unint64_t v28 = *v27;
          if (v28 >= 0xFFFFFFFF) {
            LODWORD(v28) = -1;
          }
          unsigned int v29 = v28 + 1;
        }
        if (v29 >= 2) {
          return v29 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v25 = (v15 + (((unint64_t)a1 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v12;
        uint64_t v26 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
        return v26(v25, v10, v8);
      }
    }
  }
  int v19 = *((unsigned __int8 *)a1 + v17);
  if (!*((unsigned char *)a1 + v17)) {
    goto LABEL_28;
  }
LABEL_18:
  int v22 = (v19 - 1) << v18;
  if (v17 > 3) {
    int v22 = 0;
  }
  if (v17)
  {
    if (v17 <= 3) {
      int v23 = v17;
    }
    else {
      int v23 = 4;
    }
    switch(v23)
    {
      case 2:
        int v24 = *a1;
        break;
      case 3:
        int v24 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v24 = *(_DWORD *)a1;
        break;
      default:
        int v24 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v24 = 0;
  }
  return v13 + (v24 | v22) + 1;
}

void storeEnumTagSinglePayload for InsetList(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 16) - 8);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v10 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v11 = *(_DWORD *)(v8 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v14 = *(void *)(v8 + 64);
  unsigned int v15 = v9 - 1;
  if (v11 <= v9 - 1) {
    unsigned int v16 = v9 - 1;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v8 + 84);
  }
  size_t v17 = ((v12 + 16) & ~v12) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  uint64_t v18 = v13 + 8;
  size_t v19 = ((v13 + 8 + ((v17 + 7) & 0xFFFFFFFFFFFFFFF8)) & ~v13) + v14;
  BOOL v20 = a3 >= v16;
  unsigned int v21 = a3 - v16;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v16 < a2)
  {
    unsigned int v23 = ~v16 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_72;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v13;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x1879E1DBCLL);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v15 >= v11)
        {
          if (v15 >= a2)
          {
            if (a2 + 1 <= v9)
            {
              if (a2 != -1)
              {
                uint64_t v35 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v37 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v38 = a2 + 1;
                  v37(((unint64_t)v35 + v12 + 8) & ~v12, v38);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v36 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v36 = a2;
                  }
                  *uint64_t v35 = v36;
                }
              }
            }
            else
            {
              if (v17 <= 3) {
                int v33 = ~(-1 << (8 * v17));
              }
              else {
                int v33 = -1;
              }
              if (v17)
              {
                int v31 = v33 & (a2 - v9);
                if (v17 <= 3) {
                  int v34 = v17;
                }
                else {
                  int v34 = 4;
                }
                bzero(a1, v17);
                switch(v34)
                {
                  case 2:
LABEL_64:
                    *(_WORD *)a1 = v31;
                    break;
                  case 3:
LABEL_65:
                    *(_WORD *)a1 = v31;
                    a1[2] = BYTE2(v31);
                    break;
                  case 4:
LABEL_66:
                    *(_DWORD *)a1 = v31;
                    break;
                  default:
LABEL_52:
                    *a1 = v31;
                    break;
                }
              }
            }
          }
          else
          {
            if (v17 <= 3) {
              int v30 = ~(-1 << (8 * v17));
            }
            else {
              int v30 = -1;
            }
            if (v17)
            {
              int v31 = v30 & (a2 - v9);
              if (v17 <= 3) {
                int v32 = v17;
              }
              else {
                int v32 = 4;
              }
              bzero(a1, v17);
              switch(v32)
              {
                case 2:
                  goto LABEL_64;
                case 3:
                  goto LABEL_65;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
        else
        {
          unint64_t v28 = (v18 + ((unint64_t)&a1[v17 + 7] & 0xFFFFFFFFFFFFFFF8)) & v25;
          unsigned int v29 = *(void (**)(unint64_t))(v10 + 56);
          v29(v28);
        }
      }
      return;
  }
}

unint64_t instantiation function for generic protocol witness table for InsetListStyleContext(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in InsetList<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

BOOL protocol witness for static StyleContext.accepts<A>(_:at:) in conformance InsetListStyleContext(uint64_t a1, uint64_t a2, ValueMetadata *a3, ValueMetadata *a4)
{
  lazy protocol witness table accessor for type InsetListStyleContext and conformance InsetListStyleContext();

  return specialized static ListStyleContext.accepts<A>(_:at:)(a4, a3);
}

uint64_t protocol witness for static StyleContext.acceptsAny<A>(_:) in conformance InsetListStyleContext(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1);
  if (a2) {
    memcpy((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3, v4);
  }
  return static StyleContext.acceptsAny<A>(_:)() & 1;
}

uint64_t InsetList.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v3 = a1[2];
  uint64_t v2 = a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = type metadata accessor for InsetList.CollectionViewBody();
  v19[1] = type metadata accessor for InsetList.TableViewRoot();
  uint64_t v7 = type metadata accessor for _VariadicView.Tree();
  uint64_t v36 = MEMORY[0x1E4F405E0];
  uint64_t v37 = v6;
  uint64_t v38 = v7;
  uint64_t v39 = MEMORY[0x1E4F405D8];
  uint64_t v8 = type metadata accessor for StaticIf();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unsigned int v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v19 - v13;
  uint64_t v27 = v3;
  uint64_t v28 = v2;
  uint64_t v29 = v4;
  uint64_t v30 = v5;
  uint64_t v31 = v20;
  uint64_t v22 = v3;
  uint64_t v23 = v2;
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  uint64_t v26 = v20;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v35 = v4;
  uint64_t v18 = swift_getWitnessTable();
  StaticIf<>.init(_:then:else:)();
  uint64_t v32 = WitnessTable;
  uint64_t v33 = v18;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  unsigned int v16 = *(void (**)(char *, uint64_t))(v9 + 8);
  v16(v11, v8);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v16)(v14, v8);
}

uint64_t closure #1 in InsetList.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v35 = a6;
  type metadata accessor for Binding();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v33 = *(void *)(v10 - 8);
  uint64_t v34 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v31 = (char *)&v30 - v11;
  uint64_t v12 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v13);
  unsigned int v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v16 = a4;
  uint64_t v30 = a4;
  uint64_t v17 = a5;
  uint64_t v18 = type metadata accessor for InsetList.CollectionViewBody();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v30 - v23;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v38 = v16;
  uint64_t v39 = v17;
  uint64_t v25 = type metadata accessor for InsetList();
  uint64_t v26 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v32 + *(int *)(v25 + 56), a2);
  uint64_t v27 = (uint64_t)v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v31, v26, v34);
  InsetList.CollectionViewBody.init(content:selection:)((uint64_t)v15, v27, a2, (uint64_t)v21);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v21);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v19 + 8);
  v28(v21, v18);
  static ViewBuilder.buildExpression<A>(_:)(v24);
  return ((uint64_t (*)(char *, uint64_t))v28)(v24, v18);
}

uint64_t InsetList.CollectionViewBody.init(content:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = swift_getKeyPath();
  *(_WORD *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = swift_getKeyPath();
  *(_WORD *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = swift_getKeyPath();
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 82) = 0u;
  *(void *)(a4 + 104) = swift_getKeyPath();
  *(unsigned char *)(a4 + 112) = 0;
  uint64_t v8 = type metadata accessor for InsetList.CollectionViewBody();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4 + *(int *)(v8 + 64), a1, a3);
  uint64_t v9 = a4 + *(int *)(v8 + 68);
  type metadata accessor for Binding();
  uint64_t v10 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a2, v10);
}

uint64_t closure #2 in InsetList.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v33 = a1;
  uint64_t v34 = a6;
  type metadata accessor for Binding();
  uint64_t v32 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t v13 = type metadata accessor for InsetList.TableViewRoot();
  MEMORY[0x1F4188790](v13);
  unsigned int v15 = (char *)&v29 - v14;
  uint64_t v16 = type metadata accessor for _VariadicView.Tree();
  uint64_t v31 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v29 - v21;
  uint64_t v23 = v33;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v33, v32, v20);
  uint64_t v24 = (uint64_t)v12;
  uint64_t v25 = v29;
  uint64_t v26 = v30;
  InsetList.TableViewRoot.init(selection:)(v24, (uint64_t)v15);
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v37 = v25;
  uint64_t v38 = v26;
  uint64_t v39 = v23;
  _VariadicView.Tree.init(_:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v41 = v25;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v18);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v31 + 8);
  v27(v18, v16);
  static ViewBuilder.buildExpression<A>(_:)(v22);
  return ((uint64_t (*)(char *, uint64_t))v27)(v22, v16);
}

uint64_t InsetList.TableViewRoot.init(selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = swift_getKeyPath();
  *(_WORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = swift_getKeyPath();
  *(_WORD *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = swift_getKeyPath();
  *(unsigned char *)(a2 + 40) = 0;
  uint64_t v4 = a2 + *(int *)(type metadata accessor for InsetList.TableViewRoot() + 60);
  type metadata accessor for Binding();
  uint64_t v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a1, v5);
}

uint64_t closure #1 in closure #2 in InsetList.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = v7;
  v13[1] = v8;
  v13[2] = v9;
  v13[3] = v10;
  uint64_t v11 = type metadata accessor for InsetList();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v11 + 56));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t InsetList.CollectionViewBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v57 = a2;
  uint64_t v56 = *(void *)(a1 + 24);
  uint64_t v4 = v56;
  type metadata accessor for Binding();
  uint64_t v49 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v47 = &v43[-v5];
  uint64_t v59 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v59 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v58 = &v43[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v53 = *(void *)(a1 + 32);
  uint64_t v52 = *(void *)(a1 + 40);
  *(void *)&long long v78 = v9;
  *((void *)&v78 + 1) = v4;
  *(void *)&long long v79 = v53;
  *((void *)&v79 + 1) = v52;
  uint64_t v54 = type metadata accessor for CollectionViewListRoot();
  uint64_t v55 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  uint64_t v51 = &v43[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v11);
  uint64_t v50 = &v43[-v12];
  uint64_t v13 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = &v43[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v46 = v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = &v43[-v18];
  uint64_t v20 = *(void *)(v2 + 104);
  char v21 = *(unsigned char *)(v2 + 112);
  outlined copy of Environment<Bool>.Content(v20, v21);
  char v22 = specialized Environment.wrappedValue.getter(v20, v21);
  outlined consume of Environment<Bool>.Content(v20, v21);
  uint64_t v23 = (unsigned int *)MEMORY[0x1E4FB10C8];
  if ((v22 & 1) == 0) {
    uint64_t v23 = (unsigned int *)MEMORY[0x1E4FB10D0];
  }
  (*(void (**)(unsigned char *, void, uint64_t))(v14 + 104))(v19, *v23, v13);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16))(v58, v2 + *(int *)(a1 + 64), v59);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v14 + 16))(v16, v19, v13);
  uint64_t v24 = *(void *)v2;
  uint64_t v25 = *(unsigned __int8 *)(v2 + 8);
  int v26 = *(unsigned __int8 *)(v2 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v2, v25, *(unsigned char *)(v2 + 9));
  uint64_t v45 = specialized Environment.wrappedValue.getter(v24, v25 | (v26 << 8));
  int v44 = v27 & 1;
  outlined consume of Environment<CGFloat?>.Content(v24, v25, v26);
  uint64_t v28 = *(void *)(v2 + 16);
  uint64_t v29 = *(unsigned __int8 *)(v2 + 24);
  int v30 = *(unsigned __int8 *)(v2 + 25);
  outlined copy of Environment<CGFloat?>.Content(v28, v29, *(unsigned char *)(v2 + 25));
  double v31 = COERCE_DOUBLE(specialized Environment.wrappedValue.getter(v28, v29 | (v30 << 8)));
  char v33 = v32;
  outlined consume of Environment<CGFloat?>.Content(v28, v29, v30);
  if (v33) {
    double v34 = 26.0;
  }
  else {
    double v34 = v31;
  }
  uint64_t v35 = (uint64_t)v47;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v48 + 16))(v47, v2 + *(int *)(a1 + 68), v49);
  long long v36 = *(_OWORD *)(v2 + 80);
  long long v80 = *(_OWORD *)(v2 + 64);
  long long v81 = v36;
  __int16 v82 = *(_WORD *)(v2 + 96);
  long long v37 = *(_OWORD *)(v2 + 48);
  long long v78 = *(_OWORD *)(v2 + 32);
  long long v79 = v37;
  outlined retain of Environment<ListPadding>((uint64_t)&v78, (void (*)(void, void, void, void, void, void, void, void, _WORD))outlined copy of Environment<ListPadding>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)v69);
  outlined retain of Environment<ListPadding>((uint64_t)&v78, (void (*)(void, void, void, void, void, void, void, void, _WORD))outlined consume of Environment<ListPadding>.Content);
  (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v19, v13);
  v60[0] = v69[0];
  uint64_t v61 = v70;
  char v62 = v71;
  uint64_t v63 = v72;
  char v64 = v73;
  uint64_t v65 = v74;
  char v66 = v75;
  uint64_t v67 = v76;
  char v68 = v77;
  uint64_t v38 = v51;
  CollectionViewListRoot.init(content:style:minRowHeight:minHeaderHeight:selection:listPadding:)((uint64_t)v58, (uint64_t)v46, v45, v44, v35, v60, v59, (uint64_t)v51, v34);
  uint64_t v39 = v50;
  uint64_t v40 = v54;
  static ViewBuilder.buildExpression<A>(_:)(v38);
  uint64_t v41 = *(void (**)(unsigned char *, uint64_t))(v55 + 8);
  v41(v38, v40);
  static ViewBuilder.buildExpression<A>(_:)(v39);
  return ((uint64_t (*)(unsigned char *, uint64_t))v41)(v39, v40);
}

uint64_t static InsetList.TableViewRoot._viewListOptions.getter()
{
  uint64_t v0 = unk_1ED468B50;
  if ((unk_1ED468B50 & ~qword_1ED468B48) == 0) {
    uint64_t v0 = 0;
  }
  uint64_t v1 = qword_1ED468B58;
  if ((qword_1ED468B58 & ~(v0 | qword_1ED468B48)) == 0) {
    uint64_t v1 = 0;
  }
  return v1 | v0 | qword_1ED468B48;
}

uint64_t InsetList.TableViewRoot.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v48 = a3;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v43 = a2;
  type metadata accessor for Binding();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v7 - 8);
  uint64_t v47 = v7;
  MEMORY[0x1F4188790](v7);
  int v44 = (char *)v37 - v8;
  uint64_t v9 = *(void *)(a2 + 40);
  v37[2] = swift_getAssociatedTypeWitness();
  uint64_t v41 = v5;
  uint64_t v42 = v9;
  v37[1] = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for TableViewListDataSource();
  uint64_t v40 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  v51[0] = v10;
  v51[1] = v5;
  v51[2] = WitnessTable;
  v51[3] = v9;
  uint64_t v11 = type metadata accessor for TableViewListCore();
  uint64_t v45 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v38 = (char *)v37 - v15;
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v50);
  uint64_t v16 = *(void *)v3;
  uint64_t v17 = *(unsigned __int8 *)(v3 + 8);
  int v18 = *(unsigned __int8 *)(v3 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v3, v17, *(unsigned char *)(v3 + 9));
  v37[0] = specialized Environment.wrappedValue.getter(v16, v17 | (v18 << 8));
  char v20 = v19 & 1;
  outlined consume of Environment<CGFloat?>.Content(v16, v17, v18);
  uint64_t v21 = *(void *)(v3 + 16);
  uint64_t v22 = *(unsigned __int8 *)(v3 + 24);
  int v23 = *(unsigned __int8 *)(v3 + 25);
  outlined copy of Environment<CGFloat?>.Content(v21, v22, *(unsigned char *)(v3 + 25));
  uint64_t v24 = specialized Environment.wrappedValue.getter(v21, v22 | (v23 << 8));
  LOBYTE(v9) = v25;
  outlined consume of Environment<CGFloat?>.Content(v21, v22, v23);
  double v26 = *(double *)&v24;
  if (v9) {
    double v26 = 26.0;
  }
  double v27 = TableViewListDataSource.init(_:style:minRowHeight:minHeaderHeight:)((uint64_t)v50, 0, v37[0], v20, (uint64_t)v51, v26);
  uint64_t v28 = (uint64_t)v44;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v46 + 16))(v44, v3 + *(int *)(v43 + 60), v47, v27);
  uint64_t v29 = *(void *)(v3 + 32);
  char v30 = *(unsigned char *)(v3 + 40);
  outlined copy of Environment<Bool>.Content(v29, v30);
  char v31 = specialized Environment.wrappedValue.getter(v29, v30);
  outlined consume of Environment<Bool>.Content(v29, v30);
  char v32 = v31 & 1;
  uint64_t v33 = v40;
  static TableViewListCore.Configuration.inset(isInExpandedSplitView:)(v32, v49);
  TableViewListCore.init(dataSource:selection:configuration:)((uint64_t)v51, v28, v49, v33, (uint64_t)v13);
  double v34 = v38;
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v45 + 8);
  v35(v13, v11);
  static ViewBuilder.buildExpression<A>(_:)(v34);
  return ((uint64_t (*)(char *, uint64_t))v35)(v34, v11);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance InsetList<A, B>.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance InsetList<A, B>.TableViewRoot()
{
  return static InsetList.TableViewRoot._viewListOptions.getter();
}

uint64_t base witness table accessor for _AttributeBody in InsetListStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in InsetListStyle.Body.value.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in InsetListStyle.Body.value.getter(*(_DWORD *)(v1 + 32), *(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t partial apply for closure #2 in InsetListStyle.Body.value.getter()
{
  return closure #2 in InsetListStyle.Body.value.getter(*(_DWORD *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t partial apply for closure #1 in InsetListStyle.Body.insetListBody.getter()
{
  return closure #1 in closure #1 in InsetListStyle.Body.value.getter(*(unsigned int *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t type metadata accessor for InsetList.CollectionViewBody()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for InsetList.TableViewRoot()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in InsetList.body.getter()
{
  return partial apply for closure #1 in InsetList.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in InsetList.body.getter);
}

uint64_t partial apply for closure #2 in InsetList.body.getter()
{
  return partial apply for closure #1 in InsetList.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in InsetList.body.getter);
}

uint64_t partial apply for closure #1 in closure #2 in InsetList.body.getter()
{
  return partial apply for closure #1 in InsetList.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in closure #2 in InsetList.body.getter);
}

uint64_t partial apply for closure #1 in InsetList.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t type metadata completion function for InsetList.TableViewRoot()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for InsetList.TableViewRoot(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = v6 | 7;
  if (v7 - 1 >= a2) {
    goto LABEL_25;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + ((v8 + 41) & ~v8);
  char v10 = 8 * v9;
  if (v9 > 3) {
    goto LABEL_7;
  }
  unsigned int v13 = (((1 << v10) + a2 - v7) >> v10) + 1;
  if (HIWORD(v13))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v17 = (unint64_t *)(((((((((unint64_t)a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)
                                + v8
                                + 9) & ~v8)
                              + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      unsigned int v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v6 + 8) & ~v6);
    }
    else
    {
      unint64_t v18 = *v17;
      if (v18 >= 0xFFFFFFFF) {
        LODWORD(v18) = -1;
      }
      unsigned int v19 = v18 + 1;
    }
    if (v19 >= 2) {
      return v19 - 1;
    }
    else {
      return 0;
    }
  }
  if (v13 > 0xFF)
  {
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v13 < 2) {
    goto LABEL_25;
  }
LABEL_7:
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_25;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 <= 3) {
      int v15 = ((v6 + 16) & ~v6)
    }
          + *(_DWORD *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)
          + ((v8 + 41) & ~v8);
    else {
      int v15 = 4;
    }
    switch(v15)
    {
      case 2:
        int v16 = *a1;
        break;
      case 3:
        int v16 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v16 = *(_DWORD *)a1;
        break;
      default:
        int v16 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v16 = 0;
  }
  return (v16 | v14) + v7;
}

void storeEnumTagSinglePayload for InsetList.TableViewRoot(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v12 = ((v10 + 16) & ~v10) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  size_t v13 = (((v10 | 7) + 41) & ~(v10 | 7)) + v12;
  if (v8 - 1 >= a3)
  {
    int v14 = 0;
LABEL_13:
    if (v9 >= a2) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v14 = 1;
  if (v13 > 3) {
    goto LABEL_13;
  }
  unsigned int v15 = (((1 << (8 * v13)) + a3 - v8) >> (8 * v13)) + 1;
  if (HIWORD(v15))
  {
    int v14 = 4;
    if (v9 >= a2) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v15 >= 0x100) {
      int v14 = 2;
    }
    else {
      int v14 = v15 > 1;
    }
    if (v9 >= a2)
    {
LABEL_21:
      switch(v14)
      {
        case 1:
          a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 3:
          goto LABEL_57;
        case 4:
          *(_DWORD *)&a1[v13] = 0;
          goto LABEL_25;
        default:
LABEL_25:
          if (a2)
          {
LABEL_26:
            uint64_t v11 = v10 | 7;
            unint64_t v19 = (((((unint64_t)(a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + v11 + 9) & ~v11;
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                int v23 = (void *)((v19 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  char v25 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v26 = a2 + 1;
                  v25(((unint64_t)v23 + v10 + 8) & ~v10, v26);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v24 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v24 = a2;
                  }
                  *int v23 = v24;
                }
              }
            }
            else
            {
              if (v12 <= 3) {
                int v20 = ~(-1 << (8 * v12));
              }
              else {
                int v20 = -1;
              }
              if (v12)
              {
                int v21 = v20 & (a2 - v8);
                if (v12 <= 3) {
                  int v22 = v12;
                }
                else {
                  int v22 = 4;
                }
                bzero((void *)((((((unint64_t)(a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)+ v11+ 9) & ~v11), v12);
                switch(v22)
                {
                  case 2:
                    *(_WORD *)unint64_t v19 = v21;
                    break;
                  case 3:
                    *(_WORD *)unint64_t v19 = v21;
                    *(unsigned char *)(v19 + 2) = BYTE2(v21);
                    break;
                  case 4:
                    *(_DWORD *)unint64_t v19 = v21;
                    break;
                  default:
                    *(unsigned char *)unint64_t v19 = v21;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
LABEL_14:
  unsigned int v16 = a2 - v8;
  if (v13 < 4)
  {
    int v17 = (v16 >> (8 * v13)) + 1;
    if (v13)
    {
      int v18 = v16 & ~(-1 << (8 * v13));
      bzero(a1, v13);
      if (v13 == 3)
      {
        *(_WORD *)a1 = v18;
        a1[2] = BYTE2(v18);
      }
      else if (v13 == 2)
      {
        *(_WORD *)a1 = v18;
      }
      else
      {
        *a1 = v18;
      }
    }
  }
  else
  {
    bzero(a1, (((v10 | 7) + 41) & ~(v10 | 7)) + v12);
    *(_DWORD *)a1 = v16;
    int v17 = 1;
  }
  switch(v14)
  {
    case 1:
      a1[v13] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v13] = v17;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x1879E3D58);
    case 4:
      *(_DWORD *)&a1[v13] = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for InsetList.CollectionViewBody()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Binding();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for InsetList.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  if ((v9 | v7) <= 7
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((v9 + 16) & ~v9)
     + *(void *)(*(void *)(v5 - 8) + 64)
     + (((v9 | 7) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v7 + 113) & ~v7)) & ~(v9 | 7)) <= 0x18)
  {
    uint64_t __n = ((v9 + 16) & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
    uint64_t v61 = *(void *)(v5 - 8);
    uint64_t v62 = *(void *)(a3 + 24);
    uint64_t v56 = v9 | 7;
    uint64_t v57 = ~(v9 | 7);
    uint64_t v59 = ~v9;
    uint64_t v14 = *(void *)a2;
    char v15 = *(unsigned char *)(a2 + 9);
    unsigned __int8 v16 = *(unsigned char *)(a2 + 8);
    uint64_t v53 = *(void *)(*(void *)(a3 + 16) - 8);
    uint64_t v54 = *(void *)(a3 + 16);
    int v60 = *(_DWORD *)(v8 + 84);
    uint64_t v55 = *(void *)(v53 + 64);
    outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v16, v15);
    *(void *)a1 = v14;
    *(unsigned char *)(a1 + 8) = v16;
    *(unsigned char *)(a1 + 9) = v15;
    uint64_t v63 = a1;
    unint64_t v17 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v58 = v9;
    unint64_t v18 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)v18;
    LOBYTE(v14) = *(unsigned char *)(v18 + 9);
    unsigned __int8 v20 = *(unsigned char *)(v18 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(void *)v18, v20, v14);
    *(void *)unint64_t v17 = v19;
    *(unsigned char *)(v17 + 8) = v20;
    *(unsigned char *)(v17 + 9) = v14;
    unint64_t v21 = (v17 + 17) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = (v18 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v23 = *(void *)v22;
    uint64_t v24 = *(void *)(v22 + 8);
    uint64_t v25 = *(void *)(v22 + 16);
    uint64_t v26 = *(void *)(v22 + 24);
    uint64_t v28 = *(void *)(v22 + 32);
    uint64_t v27 = *(void *)(v22 + 40);
    uint64_t v29 = *(void *)(v22 + 56);
    uint64_t v50 = *(void *)(v22 + 48);
    char v51 = *(unsigned char *)(v22 + 64);
    char v52 = *(unsigned char *)(v22 + 65);
    outlined copy of Environment<ListPadding>.Content(*(void *)v22, v24, v25, v26, v28, v27, v50, v29, v51, v52);
    *(void *)unint64_t v21 = v23;
    *(void *)(v21 + 8) = v24;
    *(void *)(v21 + 16) = v25;
    *(void *)(v21 + 24) = v26;
    *(void *)(v21 + 32) = v28;
    *(void *)(v21 + 40) = v27;
    *(void *)(v21 + 48) = v50;
    *(void *)(v21 + 56) = v29;
    *(unsigned char *)(v21 + 64) = v51;
    *(unsigned char *)(v21 + 65) = v52;
    unint64_t v30 = (v21 + 73) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v31 = (v22 + 73) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v32 = *(void *)v31;
    LOBYTE(v29) = *(unsigned char *)(v31 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v31, v29);
    *(void *)unint64_t v30 = v32;
    *(unsigned char *)(v30 + 8) = v29;
    uint64_t v33 = (v31 + v7 + 9) & ~v7;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v53 + 16))((v30 + v7 + 9) & ~v7, v33, v54);
    double v34 = (void *)((((v30 + v7 + 9) & ~v7) + v55 + v56) & v57);
    uint64_t v35 = (void *)((v33 + v55 + v56) & v57);
    long long v36 = (uint64_t *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v60 < 0)
    {
      uint64_t v39 = v61;
      uint64_t v38 = v62;
      int v42 = (*(uint64_t (**)(unint64_t))(v61 + 48))(((unint64_t)v36 + v58 + 8) & v59);
      uint64_t v40 = v58;
      uint64_t v41 = v59;
      if (v42)
      {
LABEL_14:
        memcpy(v34, v35, __n);
        return v63;
      }
    }
    else
    {
      uint64_t v37 = *v36;
      if ((unint64_t)*v36 >= 0xFFFFFFFF) {
        LODWORD(v37) = -1;
      }
      uint64_t v38 = v62;
      uint64_t v39 = v61;
      uint64_t v40 = v58;
      uint64_t v41 = v59;
      if (v37 != -1) {
        goto LABEL_14;
      }
    }
    *double v34 = *v35;
    uint64_t v43 = (void *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v43 = *v36;
    uint64_t v44 = v40 + 8;
    unint64_t v45 = ((unint64_t)v43 + v44) & v41;
    unint64_t v46 = ((unint64_t)v36 + v44) & v41;
    uint64_t v47 = *(void (**)(unint64_t, unint64_t, uint64_t))(v39 + 16);
    swift_retain();
    swift_retain();
    v47(v45, v46, v38);
    return v63;
  }
  uint64_t v12 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  unint64_t v13 = v12 + (((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16));
  swift_retain();
  return v13;
}

uint64_t destroy for InsetList.CollectionViewBody(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<CGFloat?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(unsigned char *)(a1 + 9));
  unint64_t v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(void *)v4, *(unsigned __int8 *)(v4 + 8), *(unsigned char *)(v4 + 9));
  unint64_t v5 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<ListPadding>.Content(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 56), *(unsigned char *)(v5 + 64), *(unsigned char *)(v5 + 65));
  unint64_t v6 = (v5 + 73) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool>.Content(*(void *)v6, *(unsigned char *)(v6 + 8));
  uint64_t v7 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v8 = v7 + 8;
  unint64_t v9 = (v6 + *(unsigned __int8 *)(v7 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t))(v7 + 8))(v9);
  uint64_t v10 = *(void *)(v8 + 56);
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = v12;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v9 + v10 + (v14 | 7)) & ~(v14 | 7);
  uint64_t v16 = ~v14;
  unint64_t v17 = (uint64_t *)((v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v12 + 84) & 0x80000000) != 0)
  {
    uint64_t v21 = *(void *)(v11 - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v12 + 48))(((unint64_t)v17 + v14 + 8) & v16);
    uint64_t v13 = v21;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v18 = *v17;
  if ((unint64_t)*v17 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  uint64_t result = (v18 + 1);
  if (v18 == -1)
  {
LABEL_7:
    uint64_t v22 = v13;
    swift_release();
    swift_release();
    unsigned __int8 v20 = *(uint64_t (**)(unint64_t, uint64_t))(v22 + 8);
    return v20(((unint64_t)v17 + v14 + 8) & v16, v11);
  }
  return result;
}

uint64_t initializeWithCopy for InsetList.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v7, v6);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 9) = v6;
  uint64_t v48 = a1;
  unint64_t v8 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  LOBYTE(v5) = *(unsigned char *)(v9 + 9);
  unsigned __int8 v11 = *(unsigned char *)(v9 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v9, v11, v5);
  *(void *)unint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = v11;
  *(unsigned char *)(v8 + 9) = v5;
  unint64_t v12 = (v8 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v9 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v16 = *(void *)(v13 + 16);
  uint64_t v17 = *(void *)(v13 + 24);
  uint64_t v18 = *(void *)(v13 + 32);
  uint64_t v19 = *(void *)(v13 + 40);
  uint64_t v20 = *(void *)(v13 + 48);
  uint64_t v21 = *(void *)(v13 + 56);
  char v45 = *(unsigned char *)(v13 + 64);
  char v46 = *(unsigned char *)(v13 + 65);
  outlined copy of Environment<ListPadding>.Content(*(void *)v13, v15, v16, v17, v18, v19, v20, v21, v45, v46);
  *(void *)unint64_t v12 = v14;
  *(void *)(v12 + 8) = v15;
  *(void *)(v12 + 16) = v16;
  *(void *)(v12 + 24) = v17;
  *(void *)(v12 + 32) = v18;
  *(void *)(v12 + 40) = v19;
  *(void *)(v12 + 48) = v20;
  *(void *)(v12 + 56) = v21;
  *(unsigned char *)(v12 + 64) = v45;
  *(unsigned char *)(v12 + 65) = v46;
  unint64_t v22 = (v12 + 73) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v13 + 73) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v24 = *(void *)v23;
  LOBYTE(v15) = *(unsigned char *)(v23 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v23, v15);
  *(void *)unint64_t v22 = v24;
  *(unsigned char *)(v22 + 8) = v15;
  uint64_t v25 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v26 = v25 + 16;
  uint64_t v27 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v28 = (v27 + 9 + v22) & ~v27;
  uint64_t v29 = (v27 + 9 + v23) & ~v27;
  (*(void (**)(uint64_t, uint64_t))(v25 + 16))(v28, v29);
  uint64_t v30 = *(void *)(v26 + 48);
  uint64_t v31 = *(void *)(a3 + 24);
  uint64_t v32 = *(void *)(v31 - 8);
  uint64_t v33 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v34 = (v33 | 7) + v30;
  uint64_t v35 = (void *)((v34 + v28) & ~(v33 | 7));
  long long v36 = (void *)((v34 + v29) & ~(v33 | 7));
  uint64_t v37 = ~v33;
  uint64_t v38 = *(void *)(v32 + 64);
  uint64_t v39 = (uint64_t *)(((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v32 + 84) & 0x80000000) == 0)
  {
    uint64_t v40 = *v39;
    if ((unint64_t)*v39 >= 0xFFFFFFFF) {
      LODWORD(v40) = -1;
    }
    if (v40 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v35 = *v36;
    uint64_t v41 = (void *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v41 = *v39;
    uint64_t v42 = ((unint64_t)v41 + v33 + 8) & v37;
    uint64_t v43 = *(void (**)(uint64_t, unint64_t, uint64_t))(v32 + 16);
    swift_retain();
    swift_retain();
    v43(v42, ((unint64_t)v39 + v33 + 8) & v37, v31);
    return v48;
  }
  if (!(*(unsigned int (**)(unint64_t))(v32 + 48))(((unint64_t)v39 + v33 + 8) & v37)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v35, v36, ((v33 + 16) & ~v33) + v38);
  return v48;
}

uint64_t assignWithCopy for InsetList.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v7, v6);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = v5;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 9) = v6;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  uint64_t v69 = a1;
  unint64_t v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)v12;
  LOBYTE(v5) = *(unsigned char *)(v12 + 9);
  unsigned __int8 v14 = *(unsigned char *)(v12 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v12, v14, v5);
  uint64_t v15 = *(void *)v11;
  char v16 = *(unsigned char *)(v11 + 9);
  *(void *)unint64_t v11 = v13;
  uint64_t v17 = *(unsigned __int8 *)(v11 + 8);
  *(unsigned char *)(v11 + 8) = v14;
  *(unsigned char *)(v11 + 9) = v5;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  unint64_t v18 = v11 + 17;
  unint64_t v19 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  uint64_t v21 = *(void *)(v19 + 8);
  unint64_t v22 = v18 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = *(void *)(v19 + 16);
  uint64_t v24 = *(void *)(v19 + 24);
  uint64_t v25 = *(void *)(v19 + 32);
  uint64_t v26 = *(void *)(v19 + 40);
  uint64_t v27 = *(void *)(v19 + 48);
  uint64_t v28 = *(void *)(v19 + 56);
  char v70 = *(unsigned char *)(v19 + 64);
  char v72 = *(unsigned char *)(v19 + 65);
  outlined copy of Environment<ListPadding>.Content(*(void *)v19, v21, v23, v24, v25, v26, v27, v28, v70, v72);
  uint64_t v29 = *(void *)v22;
  uint64_t v30 = *(void *)(v22 + 8);
  uint64_t v31 = *(void *)(v22 + 16);
  uint64_t v32 = *(void *)(v22 + 24);
  uint64_t v33 = *(void *)(v22 + 32);
  uint64_t v34 = *(void *)(v22 + 40);
  uint64_t v35 = *(void *)(v22 + 48);
  uint64_t v36 = *(void *)(v22 + 56);
  char v37 = *(unsigned char *)(v22 + 64);
  char v38 = *(unsigned char *)(v22 + 65);
  *(void *)unint64_t v22 = v20;
  *(void *)(v22 + 8) = v21;
  *(void *)(v22 + 16) = v23;
  *(void *)(v22 + 24) = v24;
  *(void *)(v22 + 32) = v25;
  *(void *)(v22 + 40) = v26;
  *(void *)(v22 + 48) = v27;
  *(void *)(v22 + 56) = v28;
  *(unsigned char *)(v22 + 64) = v70;
  *(unsigned char *)(v22 + 65) = v72;
  outlined consume of Environment<ListPadding>.Content(v29, v30, v31, v32, v33, v34, v35, v36, v37, v38);
  unint64_t v39 = (v22 + 73) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = (v19 + 73) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v41 = *(void *)v40;
  LOBYTE(v21) = *(unsigned char *)(v40 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v40, v21);
  uint64_t v42 = *(void *)v39;
  char v43 = *(unsigned char *)(v39 + 8);
  *(void *)unint64_t v39 = v41;
  *(unsigned char *)(v39 + 8) = v21;
  outlined consume of Environment<Bool>.Content(v42, v43);
  uint64_t v44 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v45 = v44 + 24;
  uint64_t v46 = *(unsigned __int8 *)(v44 + 80);
  uint64_t v47 = (v46 + 9 + v39) & ~v46;
  uint64_t v48 = (v46 + 9 + v40) & ~v46;
  (*(void (**)(uint64_t, uint64_t))(v44 + 24))(v47, v48);
  uint64_t v49 = *(void *)(a3 + 24);
  uint64_t v50 = *(void *)(v49 - 8);
  uint64_t v51 = *(unsigned __int8 *)(v50 + 80);
  uint64_t v52 = (v51 | 7) + *(void *)(v45 + 40);
  uint64_t v53 = (void *)((v52 + v47) & ~(v51 | 7));
  uint64_t v54 = (void *)((v52 + v48) & ~(v51 | 7));
  uint64_t v55 = *(unsigned int *)(v50 + 84);
  uint64_t v56 = ~v51;
  size_t v57 = ((v51 + 16) & ~v51) + *(void *)(v50 + 64);
  uint64_t v58 = (void *)(((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v55 & 0x80000000) != 0)
  {
    uint64_t v71 = ((v51 + 16) & ~v51) + *(void *)(v50 + 64);
    uint64_t v62 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v50 + 48);
    int v68 = v62(((unint64_t)v58 + v51 + 8) & ~v51, v55, v49);
    uint64_t v59 = (void *)(((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v56 = ~v51;
    int v61 = v62(((unint64_t)v59 + v51 + 8) & ~v51, v55, v49);
    size_t v57 = v71;
    if (!v68)
    {
LABEL_5:
      if (!v61)
      {
        *uint64_t v53 = *v54;
        swift_retain();
        swift_release();
        *uint64_t v58 = *v59;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v50 + 24))(((unint64_t)v58 + v51 + 8) & v56, ((unint64_t)v59 + v51 + 8) & v56, v49);
        return v69;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v50 + 8))(((unint64_t)v58 + v51 + 8) & v56, v49);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v59 = (void *)(((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v60 = *v59;
    if (*v59 >= 0xFFFFFFFFuLL) {
      LODWORD(v60) = -1;
    }
    int v61 = v60 + 1;
    if (*v58 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v61)
  {
    *uint64_t v53 = *v54;
    *uint64_t v58 = *v59;
    uint64_t v63 = v56;
    uint64_t v64 = ((unint64_t)v58 + v51 + 8) & v56;
    uint64_t v65 = ((unint64_t)v59 + v51 + 8) & v63;
    char v66 = *(void (**)(uint64_t, uint64_t, uint64_t))(v50 + 16);
    swift_retain();
    swift_retain();
    v66(v64, v65, v49);
    return v69;
  }
LABEL_9:
  memcpy(v53, v54, v57);
  return v69;
}

uint64_t initializeWithTake for InsetList.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  unint64_t v5 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)v6;
  *(_WORD *)(v5 + 8) = *(_WORD *)(v6 + 8);
  *(void *)unint64_t v5 = v7;
  unint64_t v8 = (v5 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v6 + 17) & 0xFFFFFFFFFFFFFFF8;
  long long v11 = *(_OWORD *)(v9 + 32);
  long long v10 = *(_OWORD *)(v9 + 48);
  long long v12 = *(_OWORD *)(v9 + 16);
  *(_WORD *)(v8 + 64) = *(_WORD *)(v9 + 64);
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)(v8 + 48) = v10;
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
  unint64_t v13 = (v8 + 73) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v9 + 73) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(void *)unint64_t v13 = v15;
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v17 = v16 + 32;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (v18 + 9 + v13) & ~v18;
  uint64_t v20 = (v18 + 9 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v19, v20);
  uint64_t v21 = *(void *)(v17 + 32);
  uint64_t v22 = *(void *)(a3 + 24);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = (v24 | 7) + v21;
  uint64_t v26 = (char *)((v25 + v19) & ~(v24 | 7));
  uint64_t v27 = (void *)((v25 + v20) & ~(v24 | 7));
  uint64_t v28 = ~v24;
  uint64_t v29 = *(void *)(v23 + 64);
  uint64_t v30 = (uint64_t *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v23 + 84) & 0x80000000) == 0)
  {
    uint64_t v31 = *v30;
    if ((unint64_t)*v30 >= 0xFFFFFFFF) {
      LODWORD(v31) = -1;
    }
    if (v31 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *(void *)uint64_t v26 = *v27;
    unint64_t v32 = (unint64_t)(v26 + 15);
    *(void *)(v32 & 0xFFFFFFFFFFFFFFF8) = *v30;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v23 + 32))((v24 + 8 + (v32 & 0xFFFFFFFFFFFFFFF8)) & v28, ((unint64_t)v30 + v24 + 8) & v28, v22);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v23 + 48))(((unint64_t)v30 + v24 + 8) & v28)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v26, v27, ((v24 + 16) & ~v24) + v29);
  return a1;
}

uint64_t assignWithTake for InsetList.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 9);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = *(void *)a2;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  unint64_t v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  char v13 = *(unsigned char *)(v12 + 8);
  char v14 = *(unsigned char *)(v12 + 9);
  uint64_t v15 = *(void *)v11;
  char v16 = *(unsigned char *)(v11 + 9);
  *(void *)unint64_t v11 = *(void *)v12;
  uint64_t v17 = *(unsigned __int8 *)(v11 + 8);
  *(unsigned char *)(v11 + 8) = v13;
  *(unsigned char *)(v11 + 9) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  unint64_t v18 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  char v19 = *(unsigned char *)(v18 + 64);
  char v20 = *(unsigned char *)(v18 + 65);
  unint64_t v21 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)v21;
  uint64_t v23 = *(void *)(v21 + 8);
  uint64_t v24 = *(void *)(v21 + 16);
  uint64_t v25 = *(void *)(v21 + 24);
  uint64_t v26 = *(void *)(v21 + 32);
  uint64_t v27 = *(void *)(v21 + 40);
  uint64_t v28 = *(void *)(v21 + 48);
  uint64_t v29 = *(void *)(v21 + 56);
  char v30 = *(unsigned char *)(v21 + 64);
  char v31 = *(unsigned char *)(v21 + 65);
  long long v32 = *(_OWORD *)(v18 + 16);
  long long v33 = *(_OWORD *)(v18 + 32);
  long long v34 = *(_OWORD *)(v18 + 48);
  *(_OWORD *)unint64_t v21 = *(_OWORD *)v18;
  *(_OWORD *)(v21 + 16) = v32;
  *(_OWORD *)(v21 + 32) = v33;
  *(_OWORD *)(v21 + 48) = v34;
  *(unsigned char *)(v21 + 64) = v19;
  *(unsigned char *)(v21 + 65) = v20;
  outlined consume of Environment<ListPadding>.Content(v22, v23, v24, v25, v26, v27, v28, v29, v30, v31);
  unint64_t v35 = (v21 + 73) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v18 + 73) & 0xFFFFFFFFFFFFFFF8;
  char v37 = *(unsigned char *)(v36 + 8);
  uint64_t v38 = *(void *)v35;
  char v39 = *(unsigned char *)(v35 + 8);
  *(void *)unint64_t v35 = *(void *)v36;
  *(unsigned char *)(v35 + 8) = v37;
  outlined consume of Environment<Bool>.Content(v38, v39);
  uint64_t v40 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v41 = v40 + 40;
  uint64_t v42 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v43 = (v42 + 9 + v35) & ~v42;
  uint64_t v44 = (v42 + 9 + v36) & ~v42;
  (*(void (**)(uint64_t, uint64_t))(v40 + 40))(v43, v44);
  uint64_t v45 = *(void *)(a3 + 24);
  uint64_t v46 = *(void *)(v45 - 8);
  uint64_t v47 = *(unsigned __int8 *)(v46 + 80);
  uint64_t v48 = (v47 | 7) + *(void *)(v41 + 24);
  uint64_t v49 = (void *)((v48 + v43) & ~(v47 | 7));
  uint64_t v50 = (void *)((v48 + v44) & ~(v47 | 7));
  uint64_t v51 = *(unsigned int *)(v46 + 84);
  uint64_t v52 = ~v47;
  size_t v53 = ((v47 + 16) & ~v47) + *(void *)(v46 + 64);
  uint64_t v54 = (void *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v51 & 0x80000000) != 0)
  {
    int v61 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v46 + 48);
    uint64_t v66 = ((v47 + 16) & ~v47) + *(void *)(*(void *)(v45 - 8) + 64);
    int v62 = v61(((unint64_t)v54 + v47 + 8) & ~v47, v51, v45);
    uint64_t v63 = v61;
    int v65 = v62;
    uint64_t v55 = (void *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v52 = ~v47;
    int v57 = v63(((unint64_t)v55 + v47 + 8) & ~v47, v51, v45);
    size_t v53 = v66;
    if (!v65)
    {
LABEL_5:
      if (!v57)
      {
        *uint64_t v49 = *v50;
        swift_release();
        *uint64_t v54 = *v55;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v46 + 40))(((unint64_t)v54 + v47 + 8) & v52, ((unint64_t)v55 + v47 + 8) & v52, v45);
        return a1;
      }
      size_t v58 = v53;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v46 + 8))(((unint64_t)v54 + v47 + 8) & v52, v45);
      uint64_t v59 = v49;
      uint64_t v60 = v50;
      size_t v53 = v58;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v55 = (void *)(((unint64_t)v50 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v56 = *v55;
    if (*v55 >= 0xFFFFFFFFuLL) {
      LODWORD(v56) = -1;
    }
    int v57 = v56 + 1;
    if (*v54 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v57)
  {
    *uint64_t v49 = *v50;
    *uint64_t v54 = *v55;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v46 + 32))(((unint64_t)v54 + v47 + 8) & v52, ((unint64_t)v55 + v47 + 8) & v52, v45);
    return a1;
  }
  uint64_t v59 = v49;
  uint64_t v60 = v50;
LABEL_10:
  memcpy(v59, v60, v53);
  return a1;
}

uint64_t getEnumTagSinglePayload for InsetList.CollectionViewBody(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFF) {
    int v10 = 0x7FFFFFFF;
  }
  else {
    int v10 = *(_DWORD *)(v7 + 84);
  }
  unsigned int v11 = v10 - 1;
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  if (v6 <= v11) {
    unsigned int v15 = v11;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v5 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v16 = v14 | 7;
  int v17 = a2 - v15;
  if (a2 <= v15) {
    goto LABEL_28;
  }
  uint64_t v18 = ((v14 + 16) & ~v14)
      + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)
      + ((v16 + v13 + ((v12 + 113) & ~v12)) & ~v16);
  char v19 = 8 * v18;
  if (v18 <= 3)
  {
    unsigned int v22 = ((v17 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v22))
    {
      int v20 = *(_DWORD *)((char *)a1 + v18);
      if (!v20) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 > 0xFF)
    {
      int v20 = *(unsigned __int16 *)((char *)a1 + v18);
      if (!*(unsigned __int16 *)((char *)a1 + v18)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 < 2)
    {
LABEL_28:
      unint64_t v26 = ((((((((unint64_t)a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 73) & 0xFFFFFFFFFFFFFFF8)
           + v12
           + 9) & ~v12;
      if (v6 >= v11)
      {
        char v30 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
        return v30(v26, v6, v4);
      }
      else
      {
        uint64_t v27 = (unint64_t *)((((v26 + v13 + v16) & ~v16) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v9 & 0x80000000) != 0)
        {
          unsigned int v29 = (*(uint64_t (**)(unint64_t))(v8 + 48))(((unint64_t)v27 + v14 + 8) & ~v14);
        }
        else
        {
          unint64_t v28 = *v27;
          if (v28 >= 0xFFFFFFFF) {
            LODWORD(v28) = -1;
          }
          unsigned int v29 = v28 + 1;
        }
        if (v29 >= 2) {
          return v29 - 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v20 = *((unsigned __int8 *)a1 + v18);
  if (!*((unsigned char *)a1 + v18)) {
    goto LABEL_28;
  }
LABEL_18:
  int v23 = (v20 - 1) << v19;
  if (v18 > 3) {
    int v23 = 0;
  }
  if (v18)
  {
    if (v18 <= 3) {
      int v24 = ((v14 + 16) & ~v14)
    }
          + *(_DWORD *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)
          + ((v16 + v13 + ((v12 + 113) & ~v12)) & ~v16);
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v15 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for InsetList.CollectionViewBody(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  unsigned int v14 = v13 - 1;
  if (v7 <= v13 - 1) {
    unsigned int v15 = v13 - 1;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v16 = v12 | 7;
  size_t v17 = ((v12 + 16) & ~v12) + *(void *)(v8 + 64);
  size_t v18 = (((v12 | 7) + v11 + ((v10 + 113) & ~v10)) & ~(v12 | 7)) + v17;
  BOOL v19 = a3 >= v15;
  unsigned int v20 = a3 - v15;
  if (v20 != 0 && v19)
  {
    if (v18 <= 3)
    {
      unsigned int v25 = ((v20 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
      if (HIWORD(v25))
      {
        int v21 = 4;
      }
      else if (v25 >= 0x100)
      {
        int v21 = 2;
      }
      else
      {
        int v21 = v25 > 1;
      }
    }
    else
    {
      int v21 = 1;
    }
  }
  else
  {
    int v21 = 0;
  }
  if (v15 < a2)
  {
    unsigned int v22 = ~v15 + a2;
    if (v18 < 4)
    {
      int v23 = (v22 >> (8 * v18)) + 1;
      if (v18)
      {
        int v26 = v22 & ~(-1 << (8 * v18));
        bzero(a1, v18);
        if (v18 == 3)
        {
          *(_WORD *)a1 = v26;
          a1[2] = BYTE2(v26);
        }
        else if (v18 == 2)
        {
          *(_WORD *)a1 = v26;
        }
        else
        {
          *a1 = v26;
        }
      }
    }
    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v22;
      int v23 = 1;
    }
    switch(v21)
    {
      case 1:
        a1[v18] = v23;
        return;
      case 2:
        *(_WORD *)&a1[v18] = v23;
        return;
      case 3:
        goto LABEL_72;
      case 4:
        *(_DWORD *)&a1[v18] = v23;
        return;
      default:
        return;
    }
  }
  uint64_t v24 = ~v16;
  switch(v21)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x1879E57E8);
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        unint64_t v27 = (((((((unint64_t)(a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 73) & 0xFFFFFFFFFFFFFFF8)
             + v10
             + 9) & ~v10;
        if (v7 >= v14)
        {
          long long v32 = *(void (**)(unint64_t))(v6 + 56);
          v32(v27);
        }
        else
        {
          unint64_t v28 = (v27 + v11 + v16) & v24;
          if (v14 >= a2)
          {
            if (a2 + 1 <= v13)
            {
              if (a2 != -1)
              {
                unint64_t v35 = (void *)((v28 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v9 & 0x80000000) != 0)
                {
                  char v37 = *(void (**)(unint64_t, uint64_t))(v8 + 56);
                  uint64_t v38 = a2 + 1;
                  v37(((unint64_t)v35 + v12 + 8) & ~v12, v38);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v36 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v36 = a2;
                  }
                  *unint64_t v35 = v36;
                }
              }
            }
            else
            {
              if (v17 <= 3) {
                int v33 = ~(-1 << (8 * v17));
              }
              else {
                int v33 = -1;
              }
              if (v17)
              {
                int v30 = v33 & (a2 - v13);
                if (v17 <= 3) {
                  int v34 = v17;
                }
                else {
                  int v34 = 4;
                }
                bzero((void *)((v27 + v11 + v16) & v24), v17);
                switch(v34)
                {
                  case 2:
LABEL_64:
                    *(_WORD *)unint64_t v28 = v30;
                    break;
                  case 3:
LABEL_65:
                    *(_WORD *)unint64_t v28 = v30;
                    *(unsigned char *)(v28 + 2) = BYTE2(v30);
                    break;
                  case 4:
LABEL_66:
                    *(_DWORD *)unint64_t v28 = v30;
                    break;
                  default:
LABEL_52:
                    *(unsigned char *)unint64_t v28 = v30;
                    break;
                }
              }
            }
          }
          else
          {
            if (v17 <= 3) {
              int v29 = ~(-1 << (8 * v17));
            }
            else {
              int v29 = -1;
            }
            if (v17)
            {
              int v30 = v29 & (a2 - v13);
              if (v17 <= 3) {
                int v31 = v17;
              }
              else {
                int v31 = 4;
              }
              bzero((void *)((v27 + v11 + v16) & v24), v17);
              switch(v31)
              {
                case 2:
                  goto LABEL_64;
                case 3:
                  goto LABEL_65;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
      }
      return;
  }
}

uint64_t sub_1879E5830()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for InsetList<A, B>.TableViewRoot(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in InsetList<A, B>.TableViewRoot()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for View.Body : View in InsetList<A, B>.CollectionViewBody()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

_UNKNOWN **sub_1879E59D0()
{
  return &protocol witness table for CollectionViewListRoot<A, B>;
}

_UNKNOWN **sub_1879E59DC()
{
  return &protocol witness table for TableViewListCore<A, B>;
}

uint64_t EnvironmentValues._defaultMinListRowHeight.setter(uint64_t a1, uint64_t a2)
{
  return EnvironmentValues._defaultMinListRowHeight.setter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>, (uint64_t)&type metadata for DefaultMinListRowHeightKey, (uint64_t)&protocol witness table for DefaultMinListRowHeightKey, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path setter for EnvironmentValues.defaultMinListHeaderHeight : EnvironmentValues(uint64_t a1)
{
  return EnvironmentValues.defaultMinListHeaderHeight.setter(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t EnvironmentValues.defaultMinListHeaderHeight.setter(uint64_t a1, uint64_t a2)
{
  return EnvironmentValues._defaultMinListRowHeight.setter(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListHeaderHeightKey>, (uint64_t)&type metadata for DefaultMinListHeaderHeightKey, (uint64_t)&protocol witness table for DefaultMinListHeaderHeightKey, (void (*)(uint64_t, uint64_t))lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues._defaultMinListRowHeight.setter(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a3);
  a6(v8, v9);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v6 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, long long *))
{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3);
}

{
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(a1, a2, a3);
}

{
  long long v4;
  long long v5;
  uint64_t v6;
  long long v8;
  uint64_t v9;
  long long v10;
  uint64_t v11;
  uint64_t v12;
  long long v13;
  uint64_t v14;
  int v15;
  long long v16;
  long long v17;
  unsigned char v18[32];
  unsigned char v19[32];
  int v20;

  uint64_t v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v18[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)BOOL v19 = v4;
  *(_OWORD *)&unsigned char v19[16] = *(_OWORD *)(a2 + 64);
  unsigned int v20 = *(_DWORD *)(a2 + 80);
  uint64_t v5 = *(_OWORD *)(a2 + 16);
  size_t v17 = *(_OWORD *)a2;
  *(_OWORD *)size_t v18 = v5;
  outlined retain of _ViewInputs(a2);
  AnyInterfaceIdiom.init<A>(_:)();
  uint64_t v16 = v8;
  PropertyList.subscript.setter();
  *(void *)&uint64_t v8 = v17;
  DWORD2(v8) = DWORD2(v17);
  uint64_t v9 = *(void *)v18;
  uint64_t v10 = *(_OWORD *)&v18[8];
  uint64_t v11 = *(void *)&v18[24];
  uint64_t v12 = *(void *)v19;
  unsigned int v13 = *(_OWORD *)&v19[8];
  unsigned int v14 = *(void *)&v19[24];
  unsigned int v15 = v20;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_bridgeObjectRetain();
  a3(v6, &v8);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  uint64_t v8;
  long long v10;
  uint64_t v11;
  long long v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  int v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  unsigned char v22[32];
  unsigned char v23[32];
  int v24;
  uint64_t v25;

  unsigned int v25 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(_OWORD *)a2;
  uint64_t v5 = *(_OWORD *)(a2 + 48);
  unsigned int v20 = *(_OWORD *)(a2 + 32);
  int v21 = v4;
  *(_OWORD *)&v22[16] = v20;
  *(_OWORD *)int v23 = v5;
  *(_OWORD *)&v23[16] = *(_OWORD *)(a2 + 64);
  uint64_t v6 = *(_OWORD *)(a2 + 16);
  unsigned int v7 = *(_OWORD *)a2;
  size_t v18 = v4;
  BOOL v19 = v6;
  *(_OWORD *)unsigned int v22 = v6;
  uint64_t v24 = *(_DWORD *)(a2 + 80);
  uint64_t v10 = v7;
  outlined retain of _ViewInputs(a2);
  _GraphInputs.environment.getter();
  _GraphInputs.interfaceIdiom.getter();
  size_t v18 = v10;
  AnyInterfaceIdiom.accepts<A>(_:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type TableShowsFirstColumnOnlyModifier.Child and conformance TableShowsFirstColumnOnlyModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphInputs.environment.setter();
  *(void *)&uint64_t v10 = v21;
  DWORD2(v10) = DWORD2(v21);
  uint64_t v11 = *(void *)v22;
  uint64_t v12 = *(_OWORD *)&v22[8];
  unsigned int v13 = *((void *)&v20 + 1);
  unsigned int v14 = *(void *)v23;
  unsigned int v15 = *(_OWORD *)&v23[8];
  uint64_t v16 = *(void *)&v23[24];
  size_t v17 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (*a5)(uint64_t))
{
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v24[16] = v8;
  int v25 = *(_DWORD *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)int v23 = v9;
  *(_OWORD *)&v23[16] = v7;
  uint64_t v10 = outlined retain of _ViewInputs(a2);
  a5(v10);
  static EnvironmentModifier._makeInputs(modifier:inputs:)();
  uint64_t v13 = v22;
  int v14 = DWORD2(v22);
  uint64_t v15 = *(void *)v23;
  long long v16 = *(_OWORD *)&v23[8];
  uint64_t v17 = *(void *)&v23[24];
  uint64_t v18 = *(void *)v24;
  long long v19 = *(_OWORD *)&v24[8];
  uint64_t v20 = *(void *)&v24[24];
  int v21 = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRetain();
  a3(v11, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, unsigned char *))
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v20 = *(_OWORD *)a2;
  long long v21 = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v22 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v16[16] = v22;
  long long v17 = v5;
  long long v18 = *(_OWORD *)(a2 + 64);
  char v19 = *(unsigned char *)(a2 + 80);
  long long v15 = v20;
  *(_OWORD *)long long v16 = v4;
  outlined retain of _ViewListInputs(a2);
  type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(0, &lazy cache variable for type metadata for _GraphValue<RootEnvironmentModifier>, (uint64_t)&type metadata for RootEnvironmentModifier, MEMORY[0x1E4F3F590]);
  int v9 = 0;
  *(_OWORD *)uint64_t v10 = 0uLL;
  *(_OWORD *)&v10[16] = 3uLL;
  *(void *)&long long v11 = 0;
  BYTE8(v11) = 0;
  *(_DWORD *)long long v8 = _GraphValue.value.getter();
  *(void *)&void v8[4] = _GraphInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type RootEnvironmentModifier.Child and conformance RootEnvironmentModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of RootEnvironmentModifier.Child((uint64_t)v8);
  _GraphInputs.environment.setter();
  *(void *)long long v8 = v15;
  *(_DWORD *)&v8[8] = DWORD2(v15);
  *(void *)uint64_t v10 = *(void *)v16;
  *(_OWORD *)&unsigned char v10[8] = *(_OWORD *)&v16[8];
  *(void *)&v10[24] = *(void *)&v16[24];
  long long v11 = v17;
  int v12 = v18;
  uint64_t v13 = *((void *)&v18 + 1);
  char v14 = v19;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v6 = swift_bridgeObjectRetain();
  a3(v6, v8);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, void (*a5)(uint64_t))
{
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 64);
  long long v24 = *(_OWORD *)(a2 + 48);
  long long v25 = v8;
  char v26 = *(unsigned char *)(a2 + 80);
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v23 = v9;
  *(_OWORD *)&v23[16] = v7;
  uint64_t v10 = outlined retain of _ViewListInputs(a2);
  a5(v10);
  static EnvironmentModifier._makeInputs(modifier:inputs:)();
  uint64_t v13 = v22;
  int v14 = DWORD2(v22);
  uint64_t v15 = *(void *)v23;
  long long v16 = *(_OWORD *)&v23[8];
  uint64_t v17 = *(void *)&v23[24];
  long long v18 = v24;
  int v19 = v25;
  uint64_t v20 = *((void *)&v25 + 1);
  char v21 = v26;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v11 = swift_bridgeObjectRetain();
  a3(v11, &v13);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, long long *))
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v4 = *(_OWORD *)a2;
  long long v5 = *(_OWORD *)(a2 + 48);
  long long v20 = *(_OWORD *)(a2 + 32);
  long long v21 = v4;
  *(_OWORD *)&v22[16] = v20;
  long long v23 = v5;
  long long v24 = *(_OWORD *)(a2 + 64);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v7 = *(_OWORD *)a2;
  long long v18 = v4;
  long long v19 = v6;
  *(_OWORD *)long long v22 = v6;
  char v25 = *(unsigned char *)(a2 + 80);
  long long v10 = v7;
  outlined retain of _ViewListInputs(a2);
  _GraphInputs.environment.getter();
  _GraphInputs.interfaceIdiom.getter();
  long long v18 = v10;
  AnyInterfaceIdiom.accepts<A>(_:)();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type TableShowsFirstColumnOnlyModifier.Child and conformance TableShowsFirstColumnOnlyModifier.Child();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphInputs.environment.setter();
  *(void *)&long long v10 = v21;
  DWORD2(v10) = DWORD2(v21);
  uint64_t v11 = *(void *)v22;
  long long v12 = *(_OWORD *)&v22[8];
  uint64_t v13 = *((void *)&v20 + 1);
  long long v14 = v23;
  int v15 = v24;
  uint64_t v16 = *((void *)&v24 + 1);
  char v17 = v25;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

{
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(a1, a2, a3);
}

{
  long long v4;
  long long v5;
  uint64_t v6;
  long long v8;
  uint64_t v9;
  long long v10;
  uint64_t v11;
  long long v12;
  int v13;
  uint64_t v14;
  char v15;
  long long v16;
  long long v17;
  unsigned char v18[32];
  long long v19;
  long long v20;
  char v21;

  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v18[16] = *(_OWORD *)(a2 + 32);
  long long v19 = v4;
  long long v20 = *(_OWORD *)(a2 + 64);
  long long v21 = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  char v17 = *(_OWORD *)a2;
  *(_OWORD *)long long v18 = v5;
  outlined retain of _ViewListInputs(a2);
  AnyInterfaceIdiom.init<A>(_:)();
  uint64_t v16 = v8;
  PropertyList.subscript.setter();
  *(void *)&uint64_t v8 = v17;
  DWORD2(v8) = DWORD2(v17);
  long long v9 = *(void *)v18;
  long long v10 = *(_OWORD *)&v18[8];
  uint64_t v11 = *(void *)&v18[24];
  long long v12 = v19;
  uint64_t v13 = v20;
  long long v14 = *((void *)&v20 + 1);
  int v15 = v21;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  long long v6 = swift_bridgeObjectRetain();
  a3(v6, &v8);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t EnvironmentValues.listDeleteControlVisibility.getter()
{
  return EnvironmentValues.listDeleteControlVisibility.getter((unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>, (uint64_t)&type metadata for ListDeleteAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListDeleteAccessoryVisibilityKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.listReorderControlVisibility.getter()
{
  return EnvironmentValues.listDeleteControlVisibility.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>, (uint64_t)&type metadata for ListAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListAccessoryVisibilityKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.listDeleteControlVisibility.getter(unint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  if (*(void *)(v4 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    a4();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a1);
    a4();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path setter for EnvironmentValues.listStackBehavior : EnvironmentValues()
{
  return EnvironmentValues.listStackBehavior.setter();
}

uint64_t key path setter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.listReorderControlVisibility.setter((uint64_t)&v2);
}

uint64_t EnvironmentValues.listReorderControlVisibility.setter(uint64_t a1)
{
  return EnvironmentValues.listReorderControlVisibility.setter(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>, (uint64_t)&type metadata for ListAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListAccessoryVisibilityKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t key path setter for EnvironmentValues.listDeleteControlVisibility : EnvironmentValues(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.listDeleteControlVisibility.setter((uint64_t)&v2);
}

uint64_t EnvironmentValues.listDeleteControlVisibility.setter(uint64_t a1)
{
  return EnvironmentValues.listReorderControlVisibility.setter(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>, (uint64_t)&type metadata for ListDeleteAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListDeleteAccessoryVisibilityKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.listReorderControlVisibility.setter(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a2);
  a5();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v5 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.horizontalListMargin.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListMarginKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t key path setter for EnvironmentValues.defaultMinListRowHeight : EnvironmentValues()
{
  return EnvironmentValues.defaultMinListRowHeight.setter();
}

uint64_t EnvironmentValues.defaultMinListRowHeight.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

double EnvironmentValues.rowInset.getter()
{
  EnvironmentValues.defaultPadding.getter();
  EdgeInsets.horizontal.getter();
  return v0 * 0.5;
}

uint64_t (*EnvironmentValues.defaultMinListRowHeight.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 24) = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  double v3 = *(double *)a1;
  if (*(unsigned char *)(a1 + 8)) {
    double v3 = 44.0;
  }
  *(double *)(a1 + 16) = v3;
  return EnvironmentValues.defaultMinListRowHeight.modify;
}

uint64_t EnvironmentValues.defaultMinListRowHeight.modify(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  *(void *)a1 = *(void *)(a1 + 16);
  *(unsigned char *)(a1 + 8) = 0;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListRowHeightKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListRowHeightKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

void (*EnvironmentValues.defaultMinListHeaderHeight.modify(void *a1))(void **a1)
{
  double v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListHeaderHeightKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListHeaderHeightKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v4 = *((unsigned char *)v3 + 24);
  void *v3 = v3[2];
  *((unsigned char *)v3 + 8) = v4;
  return EnvironmentValues.defaultMinListHeaderHeight.modify;
}

void EnvironmentValues.defaultMinListHeaderHeight.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[4];
  char v3 = *((unsigned char *)*a1 + 8);
  (*a1)[2] = **a1;
  v1[24] = v3;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DefaultMinListHeaderHeightKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DefaultMinListHeaderHeightKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

double EnvironmentValues.horizontalListMargin.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListMarginKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListMarginKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance ListMarginKey@<X0>(double *a1@<X8>)
{
  uint64_t result = static SemanticFeature.isEnabled.getter();
  double v3 = 15.0;
  if (result) {
    double v3 = 16.0;
  }
  *a1 = v3;
  return result;
}

void EnvironmentValues._plainListSectionSpacing.getter()
{
}

void EnvironmentValues._plainListSectionSpacing.setter()
{
}

void EnvironmentValues._plainListSectionSpacing.modify()
{
}

uint64_t View.listBackground(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a1;
  return View.scrollContentBackground<A>(_:)((uint64_t)&v5, a2, MEMORY[0x1E4F414E0], a3, MEMORY[0x1E4F414D0], a4);
}

uint64_t View.listHasStackBehavior()(uint64_t a1, uint64_t a2)
{
  return View.listHasStackBehavior()(a1, a2, 1);
}

uint64_t View.listHasLazyStackBehavior()(uint64_t a1, uint64_t a2)
{
  return View.listHasStackBehavior()(a1, a2, 2);
}

uint64_t View.listHasStackBehavior()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  __int16 v5 = 256;
  return MEMORY[0x18C113660](&v4, a1, &type metadata for ListHasStackBehaviorModifier, a2);
}

uint64_t View.listSizesToFit(maxHeight:)(uint64_t a1, uint64_t a2, double a3)
{
  double v4 = a3;
  __int16 v5 = 0;
  return MEMORY[0x18C113660](&v4, a1, &type metadata for ListHasStackBehaviorModifier, a2);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ListHasStackBehaviorModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  void v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t))lazy protocol witness table accessor for type ListHasStackBehaviorModifier and conformance ListHasStackBehaviorModifier);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ListHasStackBehaviorModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  void v8[4] = *(_OWORD *)(a2 + 64);
  char v9 = *(unsigned char *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t))lazy protocol witness table accessor for type ListHasStackBehaviorModifier and conformance ListHasStackBehaviorModifier);
}

void protocol witness for ViewModifier.body(content:) in conformance ListHasStackBehaviorModifier()
{
}

uint64_t protocol witness for static EnvironmentModifier.makeEnvironment(modifier:environment:) in conformance ListHasStackBehaviorModifier(uint64_t a1, uint64_t a2)
{
  uint64_t Value = AGGraphGetValue();
  __int16 v4 = *(unsigned __int8 *)(Value + 8) | (*(unsigned __int8 *)(Value + 9) << 8);
  uint64_t v5 = *(void *)Value;

  return specialized static ListHasStackBehaviorModifier.makeEnvironment(behavior:environment:)(v5, v4, a2);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ListHasStackBehaviorModifier()
{
  lazy protocol witness table accessor for type ListHasStackBehaviorModifier and conformance ListHasStackBehaviorModifier();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ListHasLazyStackBehaviorInScrollableAxisModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  void v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t))lazy protocol witness table accessor for type ListHasLazyStackBehaviorInScrollableAxisModifier and conformance ListHasLazyStackBehaviorInScrollableAxisModifier);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ListHasLazyStackBehaviorInScrollableAxisModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4)
{
  uint64_t v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  void v8[4] = *(_OWORD *)(a2 + 64);
  char v9 = *(unsigned char *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static ViewModifier<>._makeViewList(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4, (void (*)(uint64_t))lazy protocol witness table accessor for type ListHasLazyStackBehaviorInScrollableAxisModifier and conformance ListHasLazyStackBehaviorInScrollableAxisModifier);
}

void protocol witness for ViewModifier.body(content:) in conformance ListHasLazyStackBehaviorInScrollableAxisModifier()
{
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance ListHasLazyStackBehaviorInScrollableAxisModifier()
{
  lazy protocol witness table accessor for type ListHasLazyStackBehaviorInScrollableAxisModifier and conformance ListHasLazyStackBehaviorInScrollableAxisModifier();

  return static EnvironmentModifier._makeInputs(modifier:inputs:)();
}

void static ListAccessoryVisibility.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static ListAccessoryVisibility.editing.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t static ListAccessoryVisibility.editing(_:)@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  if (result) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  *a2 = v2;
  return result;
}

void static ListAccessoryVisibility.always.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

void static ListAccessoryVisibility.never.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

BOOL static ListAccessoryVisibility.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t View.listReorderControlVisibility(_:)()
{
  swift_getKeyPath();
  View.environment<A>(_:_:)();

  return swift_release();
}

uint64_t key path getter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues, serialized(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_1879EB314(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.listReorderControlVisibility.setter((uint64_t)&v2);
}

uint64_t (*EnvironmentValues.listReorderControlVisibility.modify(void *a1))(uint64_t *a1, uint64_t a2)
{
  *a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.listReorderControlVisibility.modify;
}

uint64_t EnvironmentValues.listReorderControlVisibility.modify(uint64_t *a1, uint64_t a2)
{
  return EnvironmentValues.listReorderControlVisibility.modify(a1, a2, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>, (uint64_t)&type metadata for ListAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListAccessoryVisibilityKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t (*EnvironmentValues.listDeleteControlVisibility.modify(void *a1))(uint64_t *a1, uint64_t a2)
{
  *a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.listDeleteControlVisibility.modify;
}

uint64_t EnvironmentValues.listDeleteControlVisibility.modify(uint64_t *a1, uint64_t a2)
{
  return EnvironmentValues.listReorderControlVisibility.modify(a1, a2, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>, (uint64_t)&type metadata for ListDeleteAccessoryVisibilityKey, (uint64_t)&protocol witness table for ListDeleteAccessoryVisibilityKey, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>);
}

uint64_t EnvironmentValues.listReorderControlVisibility.modify(uint64_t *a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  uint64_t v7 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, a3);
  a6();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v7 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

void sub_1879EB6E8(double *a1@<X8>)
{
  *a1 = EnvironmentValues.defaultMinListRowHeight.getter();
}

uint64_t sub_1879EB724()
{
  return EnvironmentValues.defaultMinListRowHeight.setter();
}

uint64_t sub_1879EB74C@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.defaultMinListHeaderHeight.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1879EB790(uint64_t a1)
{
  return EnvironmentValues.defaultMinListHeaderHeight.setter(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

void sub_1879EB7C0()
{
}

void sub_1879EB7E8()
{
}

uint64_t sub_1879EB7FC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues(a1, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListAccessoryVisibilityKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, a2);
}

uint64_t sub_1879EB840(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.listReorderControlVisibility.setter((uint64_t)&v2);
}

uint64_t sub_1879EB878@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return key path getter for EnvironmentValues.listReorderControlVisibility : EnvironmentValues(a1, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentPropertyKey<ListDeleteAccessoryVisibilityKey> and conformance EnvironmentPropertyKey<A>, a2);
}

uint64_t sub_1879EB8BC(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.listDeleteControlVisibility.setter((uint64_t)&v2);
}

uint64_t sub_1879EB8F4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA32_EnvironmentKeyTransformModifierVyAA06ScrollE10BackgroundVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollContentBackground>, (uint64_t)&type metadata for ScrollContentBackground, MEMORY[0x1E4F41280], (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollContentBackground>, (uint64_t)&type metadata for ScrollContentBackground, MEMORY[0x1E4F41280]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t sub_1879EB9AC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1879EBA40()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier;
  if (!lazy protocol witness table cache variable for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier);
  }
  return result;
}

uint64_t sub_1879EBAF8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1879EBB5C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA32_EnvironmentKeyTransformModifierVyAA06ScrollE10BackgroundVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(a1, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListAccessoryVisibility>, (uint64_t)&type metadata for ListAccessoryVisibility, MEMORY[0x1E4F411E8], (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListAccessoryVisibility> and conformance _EnvironmentKeyWritingModifier<A>);
}

uint64_t get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA32_EnvironmentKeyTransformModifierVyAA06ScrollE10BackgroundVGGAaBHPxAaBHD1__AiA0cI0HPyHCHCTm(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t), void (*a5)(void))
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListAccessoryVisibility> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListAccessoryVisibility> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListAccessoryVisibility> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListAccessoryVisibility>, (uint64_t)&type metadata for ListAccessoryVisibility, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListAccessoryVisibility> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ListHasLazyStackBehaviorInScrollableAxisModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1879EBD84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DefaultMinListRowHeightKey()
{
  return &type metadata for DefaultMinListRowHeightKey;
}

ValueMetadata *type metadata accessor for ListAccessoryVisibilityKey()
{
  return &type metadata for ListAccessoryVisibilityKey;
}

ValueMetadata *type metadata accessor for ListDeleteAccessoryVisibilityKey()
{
  return &type metadata for ListDeleteAccessoryVisibilityKey;
}

ValueMetadata *type metadata accessor for DefaultMinListHeaderHeightKey()
{
  return &type metadata for DefaultMinListHeaderHeightKey;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ListHasStackBehaviorModifier()
{
  return &protocol witness table for ListHasStackBehaviorModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ListHasStackBehaviorModifier()
{
  return &protocol witness table for ListHasStackBehaviorModifier;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ListHasLazyStackBehaviorInScrollableAxisModifier()
{
  return &protocol witness table for ListHasLazyStackBehaviorInScrollableAxisModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ListHasLazyStackBehaviorInScrollableAxisModifier()
{
  return &protocol witness table for ListHasLazyStackBehaviorInScrollableAxisModifier;
}

unint64_t lazy protocol witness table accessor for type ListAccessoryVisibility.Guts and conformance ListAccessoryVisibility.Guts()
{
  unint64_t result = lazy protocol witness table cache variable for type ListAccessoryVisibility.Guts and conformance ListAccessoryVisibility.Guts;
  if (!lazy protocol witness table cache variable for type ListAccessoryVisibility.Guts and conformance ListAccessoryVisibility.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListAccessoryVisibility.Guts and conformance ListAccessoryVisibility.Guts);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableShowsFirstColumnOnlyModifier.Child and conformance TableShowsFirstColumnOnlyModifier.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type TableShowsFirstColumnOnlyModifier.Child and conformance TableShowsFirstColumnOnlyModifier.Child;
  if (!lazy protocol witness table cache variable for type TableShowsFirstColumnOnlyModifier.Child and conformance TableShowsFirstColumnOnlyModifier.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableShowsFirstColumnOnlyModifier.Child and conformance TableShowsFirstColumnOnlyModifier.Child);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListMarginKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ListMarginKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t specialized static ListHasStackBehaviorModifier.makeEnvironment(behavior:environment:)(uint64_t a1, __int16 a2, uint64_t a3)
{
  uint64_t v9 = a1;
  __int16 v10 = a2 & 0x1FF;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(a3 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  uint64_t result = swift_release();
  if ((a2 & 0x100) != 0 && a1 | a2)
  {
    uint64_t v7 = *(void *)(a3 + 8);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v7)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    LOBYTE(v9) = 0;
    outlined init with copy of ScrollEnvironmentProperties((uint64_t)&v9, (uint64_t)&v8);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v7)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    return outlined destroy of ScrollEnvironmentProperties((uint64_t)&v9);
  }
  return result;
}

uint64_t specialized static ListHasLazyStackBehaviorInScrollableAxisModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v7 = *a2;
  uint64_t v8 = v3;
  EnvironmentValues.nearestScrollableAxes.getter();
  AGGraphGetValue();
  uint64_t result = Axis.Set.contains(_:)();
  if (result)
  {
    uint64_t v7 = 2;
    LOWORD(v8) = 256;
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListHasStackBehaviorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListHasStackBehaviorKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v3)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    uint64_t v5 = a2[1];
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v5)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    LOBYTE(v7) = 0;
    outlined init with copy of ScrollEnvironmentProperties((uint64_t)&v7, (uint64_t)&v6);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v5)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
    return outlined destroy of ScrollEnvironmentProperties((uint64_t)&v7);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListHasLazyStackBehaviorInScrollableAxisModifier and conformance ListHasLazyStackBehaviorInScrollableAxisModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ListHasLazyStackBehaviorInScrollableAxisModifier and conformance ListHasLazyStackBehaviorInScrollableAxisModifier;
  if (!lazy protocol witness table cache variable for type ListHasLazyStackBehaviorInScrollableAxisModifier and conformance ListHasLazyStackBehaviorInScrollableAxisModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListHasLazyStackBehaviorInScrollableAxisModifier and conformance ListHasLazyStackBehaviorInScrollableAxisModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListHasStackBehaviorModifier and conformance ListHasStackBehaviorModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ListHasStackBehaviorModifier and conformance ListHasStackBehaviorModifier;
  if (!lazy protocol witness table cache variable for type ListHasStackBehaviorModifier and conformance ListHasStackBehaviorModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListHasStackBehaviorModifier and conformance ListHasStackBehaviorModifier);
  }
  return result;
}

ValueMetadata *type metadata accessor for ListHasStackBehaviorKey()
{
  return &type metadata for ListHasStackBehaviorKey;
}

ValueMetadata *type metadata accessor for ListMarginKey()
{
  return &type metadata for ListMarginKey;
}

uint64_t sub_1879EC530@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.listStackBehavior.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
  return result;
}

uint64_t sub_1879EC578()
{
  return EnvironmentValues.listStackBehavior.setter();
}

unint64_t lazy protocol witness table accessor for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey()
{
  unint64_t result = lazy protocol witness table cache variable for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey;
  if (!lazy protocol witness table cache variable for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey;
  if (!lazy protocol witness table cache variable for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DocumentGroupConfiguration.DocumentKey and conformance DocumentGroupConfiguration.DocumentKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput()
{
  unint64_t result = lazy protocol witness table cache variable for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput;
  if (!lazy protocol witness table cache variable for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput;
  if (!lazy protocol witness table cache variable for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListDisclosureGroupDepthInput and conformance ListDisclosureGroupDepthInput);
  }
  return result;
}

void Scene.defaultPosition(_:)()
{
}

uint64_t Scene.defaultSize(_:)(uint64_t a1, uint64_t a2, double a3, double a4)
{
  *(double *)uint64_t v5 = a3;
  *(double *)&v5[1] = a4;
  char v6 = 1;
  return Scene.modifier<A>(_:)(v5, a1, &unk_1ED45A1A8, a2);
}

uint64_t sub_1879EC6C0()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for WindowDefaultsPropertyModifier()
{
  return &unk_1ED45A1A8;
}

char *WindowDefaultsPropertyModifier.UpdateSceneList.value.getter(uint64_t a1)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1)) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v2 = *(void *)(*(void *)Value + 16);
  if (!v2) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v3 = *(void *)Value + 32;
  swift_bridgeObjectRetain();
  char v4 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    outlined init with copy of SceneList.Item(v3, (uint64_t)v10);
    uint64_t v5 = AGGraphGetValue();
    if (*(unsigned char *)(v5 + 16) == 1)
    {
      long long v11 = *(_OWORD *)v5;
      char v12 = 0;
    }
    outlined init with copy of SceneList.Item((uint64_t)v10, (uint64_t)__src);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      char v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, v4);
    }
    unint64_t v7 = *((void *)v4 + 2);
    unint64_t v6 = *((void *)v4 + 3);
    if (v7 >= v6 >> 1) {
      char v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v6 > 1), v7 + 1, 1, v4);
    }
    *((void *)v4 + 2) = v7 + 1;
    memcpy(&v4[280 * v7 + 32], __src, 0x118uLL);
    outlined destroy of SceneList.Item((uint64_t)v10);
    v3 += 280;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease();
  return v4;
}

char *protocol witness for Rule.value.getter in conformance WindowDefaultsPropertyModifier.UpdateSceneList@<X0>(char **a1@<X8>)
{
  unint64_t result = WindowDefaultsPropertyModifier.UpdateSceneList.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t static WindowDefaultsPropertyModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  int v10 = *(_DWORD *)(a2 + 56);
  unint64_t v18 = *(void *)a2;
  int v19 = v6;
  uint64_t v20 = v7;
  long long v21 = *(_OWORD *)(a2 + 24);
  uint64_t v22 = v8;
  unint64_t v23 = v9;
  int v24 = v10;
  a3(&v16);
  unint64_t v18 = v9;
  int v19 = v10;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    LODWORD(v18) = v5;
    type metadata accessor for _GraphValue<WindowDefaultsPropertyModifier>();
    unsigned int v12 = _GraphValue.value.getter();
    unint64_t v18 = v16;
    int v19 = v17;
    uint64_t v13 = PreferencesOutputs.subscript.getter();
    unsigned int v14 = *MEMORY[0x1E4F4E7A0];
    if ((v13 & 0x100000000) == 0) {
      unsigned int v14 = v13;
    }
    unint64_t v18 = __PAIR64__(v14, v12);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type WindowDefaultsPropertyModifier.UpdateSceneList and conformance WindowDefaultsPropertyModifier.UpdateSceneList();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v18) = 0;
    uint64_t result = PreferencesOutputs.subscript.setter();
  }
  int v15 = v17;
  *(void *)a4 = v16;
  *(_DWORD *)(a4 + 8) = v15;
  return result;
}

void type metadata accessor for _GraphValue<WindowDefaultsPropertyModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<WindowDefaultsPropertyModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<WindowDefaultsPropertyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type WindowDefaultsPropertyModifier.UpdateSceneList and conformance WindowDefaultsPropertyModifier.UpdateSceneList()
{
  unint64_t result = lazy protocol witness table cache variable for type WindowDefaultsPropertyModifier.UpdateSceneList and conformance WindowDefaultsPropertyModifier.UpdateSceneList;
  if (!lazy protocol witness table cache variable for type WindowDefaultsPropertyModifier.UpdateSceneList and conformance WindowDefaultsPropertyModifier.UpdateSceneList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WindowDefaultsPropertyModifier.UpdateSceneList and conformance WindowDefaultsPropertyModifier.UpdateSceneList);
  }
  return result;
}

void *type metadata accessor for WindowDefaultsPropertyModifier.UpdateSceneList()
{
  return &unk_1ED45A118;
}

void *type metadata accessor for WindowDefaultsPropertyModifier.Property()
{
  return &unk_1ED45A088;
}

void View.pullDownMenu<A>(menuItems:isPresented:anchor:)()
{
}

uint64_t sub_1879ECB90()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for PullDownMenuPresentationModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for PullDownMenuPresentationModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PullDownMenuPresentationModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *(void *)a1 = *a2;
  if (v6 > 7 || v8 != 0 || ((v7 + ((v6 + 17) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
  }
  else
  {
    *(void *)(a1 + 8) = a2[1];
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v12 = (a1 + v6 + 17) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 17) & ~v6;
    unsigned int v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v14(v12, v13, v4);
    *(void *)((v7 + v12) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v7 + v13) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

uint64_t destroy for PullDownMenuPresentationModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  (*(void (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1
                                                                                            + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80)
                                                                                            + 17) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));

  return swift_release();
}

uint64_t initializeWithCopy for PullDownMenuPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(void *)(v5 - 8) + 16;
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v9 = (v8 + 17 + a1) & ~v8;
  uint64_t v10 = (v8 + 17 + a2) & ~v8;
  swift_retain();
  swift_retain();
  v6(v9, v10, v5);
  *(void *)((*(void *)(v7 + 48) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 48) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PullDownMenuPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 17 + a1) & ~v8;
  uint64_t v10 = (v8 + 17 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  *(void *)((*(void *)(v7 + 40) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 40) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PullDownMenuPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 17 + a1) & ~v6;
  uint64_t v8 = (v6 + 17 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  *(void *)((*(void *)(v5 + 32) + 7 + v7) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + v8) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for PullDownMenuPresentationModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 17 + a1) & ~v8;
  uint64_t v10 = (v8 + 17 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  *(void *)((*(void *)(v7 + 24) + 7 + v9) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v7 + 24) + 7 + v10) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PullDownMenuPresentationModifier(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 17) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1879ED374);
      case 4:
        int v14 = *(_DWORD *)(a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *(_DWORD *)a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 17) & ~v6);
  }
  unint64_t v17 = *(void *)(a1 + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for PullDownMenuPresentationModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v18 = (unint64_t)&a1[v9 + 17] & ~v9;
              int v19 = *(void (**)(unint64_t))(v6 + 56);
              v19(v18);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              a1[16] = 0;
              *(void *)a1 = a2 ^ 0x80000000;
              *((void *)a1 + 1) = 0;
            }
            else
            {
              *((void *)a1 + 1) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x1879ED580);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in PullDownMenuPresentationModifier<A>()
{
  return &protocol witness table for PullDownMenuPresentationModifier<A>;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PullDownMenuPresentationModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t static ViewModifier._changedProperties.getter(uint64_t a1)
{
  return MEMORY[0x1F40FFDB0](a1, a1);
}

uint64_t static ViewModifier._printChanges()(uint64_t a1)
{
  return MEMORY[0x1F4100390](a1, a1);
}

uint64_t static ViewModifier._logChanges()(uint64_t a1)
{
  return MEMORY[0x1F4100200](a1, a1);
}

void type metadata completion function for UITableViewListCoordinator()
{
  type metadata accessor for ShadowListUpdateRecorder();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Binding();
    type metadata accessor for Optional();
    if (v1 <= 0x3F)
    {
      _s10Foundation9IndexPathVSgMaTm_0(319, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
      if (v2 <= 0x3F)
      {
        type metadata accessor for ListCoreBatchUpdates();
        if (v3 <= 0x3F)
        {
          type metadata accessor for Optional();
          if (v4 <= 0x3F) {
            swift_initClassMetadata2();
          }
        }
      }
    }
  }
}

uint64_t UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:)(uint64_t result)
{
  unint64_t v2 = v1;
  unint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v4 = *MEMORY[0x1E4FBC8C8] & *v1;
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = v4;
    uint64_t v12 = result;
    swift_retain();
    uint64_t v7 = Transaction.animationIgnoringTransitionPhase.getter();
    swift_release();
    if (v7)
    {
      *((unsigned char *)v2 + *(void *)((*v3 & *v2) + 0xF8)) = 1;
      UITableViewListCoordinator.isAnimatingInitialLayout.didset();
      uint64_t v8 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v9 = swift_allocObject();
      *(void *)(v9 + 16) = *(void *)(v6 + 80);
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(v6 + 88);
      *(void *)(v9 + 40) = *(void *)(v6 + 104);
      *(void *)(v9 + 48) = v8;
      swift_retain();
      Transaction.addAnimationListener(allFinished:)();
      swift_release();
      swift_release();
      uint64_t v5 = v12;
    }
    size_t v10 = (void *)((char *)v2 + *(void *)((*v3 & *v2) + 0x88));
    swift_beginAccess();
    uint64_t v11 = *v10;
    *size_t v10 = v5;
    return outlined consume of Transaction?(v11);
  }
  return result;
}

id UITableViewListCoordinator.dragAndDropController.getter()
{
  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xA8);
  unint64_t v2 = *(void **)((char *)v0 + v1);
  if (v2)
  {
    id v3 = *(id *)((char *)v0 + v1);
  }
  else
  {
    uint64_t v4 = (void *)closure #1 in UITableViewListCoordinator.dragAndDropController.getter(v0);
    uint64_t v5 = *(void **)((char *)v0 + v1);
    *(void *)((char *)v0 + v1) = v4;
    id v3 = v4;

    unint64_t v2 = 0;
  }
  id v6 = v2;
  return v3;
}

uint64_t static UITableViewListCoordinator.cellReuseIdentifier.getter()
{
  return 0x6C6C65437473694CLL;
}

void *UITableViewListCoordinator.updateUITableView(_:to:transaction:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v88 = a2;
  id v89 = a1;
  uint64_t v92 = (void *)(*MEMORY[0x1E4FBC8C8] & *v4);
  id v6 = v92;
  uint64_t v7 = v92[10];
  uint64_t v80 = type metadata accessor for Optional();
  uint64_t v79 = *(void *)(v80 - 8);
  MEMORY[0x1F4188790](v80);
  long long v78 = &v73[-v8];
  uint64_t v83 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v9);
  char v77 = &v73[-v10];
  uint64_t v11 = v6[12];
  uint64_t v86 = type metadata accessor for ShadowListDataSource();
  uint64_t v85 = *(void *)(v86 - 8);
  MEMORY[0x1F4188790](v86);
  char v84 = &v73[-v12];
  uint64_t v76 = v6[11];
  uint64_t v13 = type metadata accessor for Binding();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  int v17 = &v73[-v16];
  uint64_t v82 = v11;
  uint64_t v87 = v7;
  unint64_t v18 = (int *)type metadata accessor for ListCoreBatchUpdates();
  uint64_t v19 = *((void *)v18 - 1);
  MEMORY[0x1F4188790](v18);
  long long v21 = &v73[-v20];
  uint64_t v81 = v6[31];
  if ((*((unsigned char *)v4 + v81) & 1) == 0)
  {
    uint64_t v22 = (void *)((char *)v4 + v92[17]);
    swift_beginAccess();
    uint64_t v23 = *v22;
    *uint64_t v22 = a3;
    outlined consume of Transaction?(v23);
    id v6 = (void *)(*MEMORY[0x1E4FBC8C8] & *v4);
    swift_retain();
  }
  int v24 = (char *)v4 + v6[24];
  swift_beginAccess();
  uint64_t v25 = *(void (**)(unsigned char *, char *, int *))(v19 + 16);
  uint64_t v93 = v24;
  uint64_t v91 = v25;
  v25(v21, v24, v18);
  LOBYTE(v24) = ListCoreBatchUpdates.isEmpty.getter(v18);
  uint64_t v90 = *(void (**)(unsigned char *, int *))(v19 + 8);
  v90(v21, v18);
  if (v24)
  {
    uint64_t v26 = *v4;
    uint64_t v27 = *MEMORY[0x1E4FBC8C8];
    if ((*((unsigned char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0xD8)) & 1) == 0)
    {
      uint64_t v75 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0xB0);
      if (*((unsigned char *)v4 + v75))
      {
        unsigned int v74 = 0;
      }
      else
      {
        UITableViewListCoordinator.resolvedEditMode.getter(v96);
        if (v96[0] == 1)
        {
          unsigned int v74 = 0;
          uint64_t v26 = *v4;
          uint64_t v27 = *MEMORY[0x1E4FBC8C8];
        }
        else
        {
          unsigned int v74 = objc_msgSend(v89, sel_isEditing);
          UITableViewListCoordinator.resolvedEditMode.getter(v96);
          uint64_t v26 = *v4;
          uint64_t v27 = *MEMORY[0x1E4FBC8C8];
          if (v74 == (v96[0] == 0)) {
            int v28 = 1;
          }
          else {
            int v28 = *((unsigned __int8 *)v4 + *(void *)((v27 & v26) + 0xE8));
          }
          unsigned int v74 = v28;
        }
      }
      int v29 = (char *)v4 + *(void *)((v27 & v26) + 0x78);
      swift_beginAccess();
      (*(void (**)(unsigned char *, char *, uint64_t))(v15 + 16))(v17, v29, v14);
      BOOL v30 = (*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v17, 1, v13) != 1;
      (*(void (**)(unsigned char *, uint64_t))(v15 + 8))(v17, v14);
      id v31 = v89;
      objc_msgSend(v89, sel_setAllowsMultipleSelectionDuringEditing_, v30);
      if (*((unsigned char *)v4 + v75))
      {
        UITableViewListCoordinator.resolvedEditMode.getter(v95);
        if (v95[0])
        {
          specialized UITableViewListCoordinator.updateDragInteractionEnabled(_:isEditing:)(v31);
          objc_msgSend(v31, sel_setEditing_animated_, 1, 0);
        }
      }
      else
      {
        long long v32 = (char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x70);
        swift_beginAccess();
        uint64_t v33 = v85;
        int v34 = v84;
        uint64_t v35 = v86;
        (*(void (**)(unsigned char *, char *, uint64_t))(v85 + 16))(v84, v32, v86);
        swift_beginAccess();
        uint64_t WitnessTable = swift_getWitnessTable();
        ListCoreBatchUpdates.formUpdates<A>(from:to:)((uint64_t)v34, v88, v18, v35, WitnessTable);
        swift_endAccess();
        (*(void (**)(unsigned char *, uint64_t))(v33 + 8))(v34, v35);
        if (*((unsigned char *)v4 + v81) == 1)
        {
          v91(v21, v93, v18);
          char v37 = ListCoreBatchUpdates.isEmpty.getter(v18);
          v90(v21, v18);
          if (v37)
          {
            uint64_t v38 = swift_allocObject();
            swift_unknownObjectWeakInit();
            char v39 = (void *)swift_allocObject();
            uint64_t v40 = v76;
            void v39[2] = v87;
            v39[3] = v40;
            v39[4] = v82;
            v39[5] = v92[13];
            v39[6] = v38;
            v39[7] = v31;
            uint64_t v41 = v31;
            uint64_t v42 = (uint64_t *)MEMORY[0x1E4FBC8C8];
            uint64_t v43 = (void *)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x100));
            uint64_t v44 = *v43;
            *uint64_t v43 = (uint64_t)partial apply for closure #1 in UITableViewListCoordinator.updateUITableView(_:to:transaction:);
            v43[1] = (uint64_t)v39;
            id v45 = v41;
            outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v44);
            uint64_t v46 = *v4;
            goto LABEL_38;
          }
          uint64_t v47 = (void *)MEMORY[0x1E4FBC8C8];
          uint64_t v48 = (void *)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x100));
          uint64_t v49 = *v48;
          *uint64_t v48 = 0;
          v48[1] = 0;
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v49);
          *((unsigned char *)v4 + *(void *)((*v47 & *v4) + 0xF8)) = 0;
          UITableViewListCoordinator.isAnimatingInitialLayout.didset();
        }
      }
      if (UITableViewListCoordinator.isAnimated.getter()) {
        int v50 = 1;
      }
      else {
        int v50 = static SemanticFeature.isEnabled.getter() ^ 1;
      }
      LODWORD(v92) = v50;
      uint64_t v51 = (void *)MEMORY[0x1E4FBC8C8];
      *((unsigned char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0xE0)) = 0;
      if (objc_msgSend(v31, sel_style)) {
        uint64_t v52 = 0;
      }
      else {
        uint64_t v52 = 100;
      }
      size_t v53 = (void *)((char *)v4 + *(void *)((*v51 & *v4) + 0x88));
      swift_beginAccess();
      if (*v53 == 1)
      {
        swift_endAccess();
      }
      else
      {
        Transaction.subscript.getter();
        char v54 = v94;
        swift_endAccess();
        if (v54)
        {
          uint64_t v55 = 0;
LABEL_31:
          v91(v21, v93, v18);
          char v56 = ListCoreBatchUpdates.isEmpty.getter(v18);
          v90(v21, v18);
          int v57 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v83 + 16);
          if (v56)
          {
            uint64_t v58 = (uint64_t)v77;
            uint64_t v59 = v87;
            v57(v77, v88, v87);
            uint64_t v60 = v84;
            ShadowListDataSource.init(_:)(v58, v59, (uint64_t)v84);
            uint64_t v42 = (uint64_t *)MEMORY[0x1E4FBC8C8];
            int v61 = (char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x70);
            swift_beginAccess();
            (*(void (**)(char *, unsigned char *, uint64_t))(v85 + 40))(v61, v60, v86);
          }
          else
          {
            int v62 = v78;
            uint64_t v63 = v87;
            uint64_t v64 = v83;
            v57(v78, v88, v87);
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v64 + 56))(v62, 0, 1, v63);
            uint64_t v42 = (uint64_t *)MEMORY[0x1E4FBC8C8];
            int v65 = (char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0xC8);
            swift_beginAccess();
            (*(void (**)(char *, unsigned char *, uint64_t))(v79 + 40))(v65, v62, v80);
          }
          swift_endAccess();
          v91(v21, v93, v18);
          char v66 = ListCoreBatchUpdates.isEmpty.getter(v18);
          v90(v21, v18);
          uint64_t v46 = *v4;
          uint64_t v67 = *v42;
          if ((v66 & 1) != 0 && (*((unsigned char *)v4 + *(void *)((v67 & v46) + 0xD0)) & 1) != 0
            || (*((unsigned char *)v4 + v75) & 1) != 0)
          {
            goto LABEL_39;
          }
          *((unsigned char *)v4 + *(void *)((v67 & v46) + 0xD0)) = 1;
          uint64_t v68 = swift_allocObject();
          *(unsigned char *)(v68 + 16) = v92 & 1;
          *(void *)(v68 + 24) = v4;
          *(unsigned char *)(v68 + 32) = v74;
          id v69 = v89;
          *(void *)(v68 + 40) = v89;
          *(void *)(v68 + 48) = v52;
          *(void *)(v68 + 56) = v55;
          id v70 = v69;
          uint64_t v71 = v4;
          static Update.enqueueAction(_:)();
          swift_release();
          uint64_t v46 = *v71;
LABEL_38:
          uint64_t v67 = *v42;
LABEL_39:
          *((unsigned char *)v4 + *(void *)((v67 & v46) + 0xB0)) = 0;
          return $defer #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(v4);
        }
      }
      uint64_t v55 = 100;
      goto LABEL_31;
    }
  }
  return $defer #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(v4);
}

uint64_t closure #1 in UITableViewListCoordinator.dragAndDropController.getter(void *a1)
{
  uint64_t v2 = *MEMORY[0x1E4FBC8C8] & *a1;
  uint64_t v3 = type metadata accessor for ShadowListDataSource();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = (char *)&v11 - v5;
  type metadata accessor for TableViewListDragAndDropController();
  uint64_t v7 = (char *)a1 + *(void *)(v2 + 112);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v7, v3);
  uint64_t v8 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v9 = specialized CollectionViewListDragAndDropController.__allocating_init(dataSource:dispatchUpdate:)(v6, partial apply for closure #1 in PlatformViewCoordinator.weakDispatchUpdate.getter, v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v9;
}

uint64_t UITableViewListCoordinator.isAnimated.getter()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x88));
  swift_beginAccess();
  if (*v2 == 1)
  {
    swift_endAccess();
  }
  else
  {
    uint64_t v3 = Transaction.animation.getter();
    swift_endAccess();
    if (v3)
    {
      swift_release();
      return 1;
    }
  }
  return *((unsigned __int8 *)v0 + *(void *)((*v1 & *v0) + 0xE0));
}

void *UITableViewListCoordinator.resolvedEditMode.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t v3 = *(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x80) + 8);
  if (v3)
  {
    type metadata accessor for NavigationState.StackContent.Key?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, MEMORY[0x1E4F41638]);
    uint64_t result = MEMORY[0x18C113DA0](&v5);
    LOBYTE(v3) = v5;
  }
  *a1 = v3;
  return result;
}

void UITableViewListCoordinator.isAnimatingInitialLayout.didset()
{
  if ((*((unsigned char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8)) & 1) == 0)
  {
    uint64_t v1 = (void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100));
    uint64_t v2 = (void (*)(uint64_t))*v1;
    if (*v1)
    {
      uint64_t v3 = swift_retain();
      v2(v3);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v2);
      uint64_t v4 = *v1;
    }
    else
    {
      uint64_t v4 = 0;
    }
    uint64_t *v1 = 0;
    v1[1] = 0;
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
  }
}

uint64_t closure #1 in UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = (void *)swift_allocObject();
  _OWORD v10[2] = a2;
  v10[3] = a3;
  v10[4] = a4;
  v10[5] = a5;
  v10[6] = a1;
  swift_retain();
  onMainThread(do:)();

  return swift_release();
}

void closure #1 in closure #1 in UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    uint64_t v3 = v2;
    *((unsigned char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0xF8)) = 0;
    UITableViewListCoordinator.isAnimatingInitialLayout.didset();
  }
}

uint64_t UITableViewListCoordinator.commitUpdates()()
{
  uint64_t v1 = *MEMORY[0x1E4FBC8C8] & *v0;
  *((unsigned char *)v0 + *(void *)(v1 + 216)) = 1;
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = *(void *)(v1 + 80);
  *(_OWORD *)(v3 + 24) = *(_OWORD *)(v1 + 88);
  *(void *)(v3 + 40) = *(void *)(v1 + 104);
  *(void *)(v3 + 48) = v2;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();

  return swift_release();
}

void closure #1 in UITableViewListCoordinator.commitUpdates()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C119DF0](v1);
  uint64_t v3 = (void *)MEMORY[0x1E4FBC8C8];
  if (v2)
  {
    uint64_t v4 = (void *)v2;
    swift_beginAccess();
    type metadata accessor for ShadowListDataSource();
    ShadowListDataSource.commitUpdates()();
    swift_endAccess();
  }
  swift_beginAccess();
  uint64_t v5 = (void *)MEMORY[0x18C119DF0](v1);
  if (v5)
  {
    *((unsigned char *)v5 + *(void *)((*v3 & *v5) + 0xD8)) = 0;
  }
}

void *$defer #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(void *result)
{
  if ((*((unsigned char *)result + *(void *)((*MEMORY[0x1E4FBC8C8] & *result) + 0xF8)) & 1) == 0)
  {
    uint64_t v1 = (void *)((char *)result + *(void *)((*MEMORY[0x1E4FBC8C8] & *result) + 0x88));
    swift_beginAccess();
    uint64_t v2 = *v1;
    uint64_t *v1 = 1;
    return (void *)outlined consume of Transaction?(v2);
  }
  return result;
}

void closure #1 in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(uint64_t a1, void *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x18C119DF0](v3);
  if (v4)
  {
    uint64_t v5 = (void *)v4;
    UITableViewListCoordinator.updateListContents(_:)(a2);
  }
}

void UITableViewListCoordinator.updateListContents(_:)(void *a1)
{
  uint64_t v3 = (uint64_t *)MEMORY[0x1E4FBC8C8];
  v155 = (void *)(*MEMORY[0x1E4FBC8C8] & *v1);
  uint64_t v4 = v155;
  uint64_t v5 = v155[10];
  uint64_t v6 = v155[12];
  uint64_t v166 = type metadata accessor for ShadowSectionCollection();
  uint64_t v165 = *(void *)(v166 - 8);
  MEMORY[0x1F4188790](v166);
  uint64_t v164 = (uint64_t)&v144 - v7;
  type metadata accessor for (IndexPath?, IndexPath?)();
  uint64_t v174 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v179 = (uint64_t)&v144 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = *(char **)(v4[11] - 8);
  MEMORY[0x1F4188790](v10);
  v153 = (char *)&v144 - v11;
  uint64_t v154 = v12;
  uint64_t v160 = type metadata accessor for Binding();
  uint64_t v13 = *(void *)(v160 - 8);
  MEMORY[0x1F4188790](v160);
  v152 = (char *)&v144 - v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v159 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v159 - 8);
  MEMORY[0x1F4188790](v159);
  uint64_t v162 = (uint64_t)&v144 - v17;
  uint64_t v163 = AssociatedTypeWitness;
  uint64_t v18 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v19);
  v158 = (char *)&v144 - v20;
  uint64_t v195 = v6;
  uint64_t v196 = v5;
  uint64_t v192 = type metadata accessor for ShadowListDataSource();
  uint64_t v21 = *(void *)(v192 - 8);
  MEMORY[0x1F4188790](v192);
  v193 = (char *)&v144 - v22;
  uint64_t v23 = type metadata accessor for IndexPath();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  v161 = (char *)&v144 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26);
  v191 = (void (***)(char *, uint64_t))((char *)&v144 - v27);
  _s10Foundation9IndexPathVSgMaTm_0(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v28 - 8);
  uint64_t v167 = (uint64_t)&v144 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  long long v32 = (char *)&v144 - v31;
  MEMORY[0x1F4188790](v33);
  v181 = (char *)&v144 - v34;
  UITableViewListCoordinator.clearDataSourceUpdates()();
  uint64_t v35 = *v3;
  uint64_t v36 = v21;
  *((unsigned char *)v1 + *(void *)((v35 & *v1) + 0xD0)) = 0;
  id v37 = objc_msgSend(a1, sel_indexPathsForVisibleRows);
  v189 = v1;
  v197 = a1;
  if (v37)
  {
    uint64_t v38 = v37;
    uint64_t v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v40 = *(void *)(v39 + 16);
    uint64_t v194 = v36;
    uint64_t v157 = v39;
    if (v40)
    {
      v178 = v32;
      uint64_t v190 = v40;
      uint64_t v41 = v189;
      uint64_t v42 = *MEMORY[0x1E4FBC8C8] & *v189;
      uint64_t v43 = (char *)v41 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v41) + 0x70);
      v168 = (char *)v41 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v41) + 0x80);
      uint64_t v44 = v16;
      id v45 = (char *)v189 + *(void *)(v42 + 120);
      uint64_t v46 = (uint64_t)v189 + *(void *)(v42 + 184);
      unint64_t v47 = v39 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
      v177 = v43;
      swift_beginAccess();
      v151 = v45;
      swift_beginAccess();
      uint64_t v169 = v46;
      swift_beginAccess();
      uint64_t v49 = *(uint64_t **)(v24 + 16);
      uint64_t v48 = v24 + 16;
      v187 = v49;
      v188 = (char **)(v48 + 40);
      int v50 = (unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 32);
      uint64_t v51 = v36;
      uint64_t v52 = (void *)(v48 + 16);
      uint64_t v183 = *(void *)(v48 + 56);
      v176 = (uint64_t (**)(char *, char *, uint64_t))(v51 + 16);
      v175 = (void (**)(char *, uint64_t))(v51 + 8);
      v156 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
      v149 = (void (**)(char *, uint64_t, uint64_t))(v18 + 32);
      v148 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
      v146 = (void (**)(char *, char *, uint64_t))(v13 + 16);
      v145 = (void (**)(char *, uint64_t))(v13 + 8);
      v144 = (void (**)(char *, uint64_t))(v186 + 8);
      v150 = (void (**)(char *, uint64_t))(v18 + 8);
      v184 = (void (**)(uint64_t, uint64_t))(v48 - 8);
      v147 = (void (**)(uint64_t, uint64_t))(v44 + 8);
      uint64_t v171 = MEMORY[0x1E4FBC848] + 8;
      size_t v53 = (void (*)(void, void))v191;
      char v54 = v181;
      uint64_t v180 = v48;
      v185 = (unsigned int (**)(void, void, void))(v48 + 32);
      v170 = (void *)(v48 + 16);
      ((void (*)(char *, unint64_t, uint64_t))v49)(v181, v47, v23);
      while (1)
      {
        v186 = *v188;
        ((void (*)(char *, void, uint64_t, uint64_t))v186)(v54, 0, 1, v23);
        char v56 = *v50;
        if (v56(v54, 1, v23) == 1) {
          goto LABEL_34;
        }
        int v57 = (void (*)(void (*)(void, void), char *, uint64_t))*v52;
        ((void (*)(void (*)(void, void), char *, uint64_t))*v52)(v53, v54, v23);
        Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
        id v59 = objc_msgSend(v197, sel_cellForRowAtIndexPath_, isa);

        if (!v59) {
          goto LABEL_5;
        }
        uint64_t v60 = v59;
        swift_getAssociatedTypeWitness();
        uint64_t v61 = swift_dynamicCastUnknownClass();
        if (!v61)
        {

LABEL_5:
          size_t v53 = (void (*)(void, void))v191;
          (*v184)((uint64_t)v191, v23);
          goto LABEL_6;
        }
        int v62 = (void (**)(char *, uint64_t))v61;
        v172 = (void (*)(char *, uint64_t, uint64_t))v57;
        id v182 = v60;
        uint64_t v63 = *v176;
        uint64_t v65 = v192;
        uint64_t v64 = v193;
        uint64_t v66 = (*v176)(v193, v177, v192);
        MEMORY[0x1F4188790](v66);
        *(&v144 - 2) = (void (**)(char *, uint64_t))v189;
        *(&v144 - 1) = v62;
        uint64_t WitnessTable = swift_getWitnessTable();
        uint64_t v68 = (void (*)(void, void))v191;
        uint64_t v173 = WitnessTable;
        ListCoreDataSource.visitContent<A>(atRow:visitor:)((uint64_t)v191, (uint64_t)partial apply for closure #1 in UITableViewListCoordinator.updateListContents(_:), (uint64_t)(&v144 - 4), v65, v171, WitnessTable, (uint64_t)v199);
        uint64_t v69 = v65;
        id v70 = *v175;
        (*v175)(v64, v69);
        type metadata accessor for ListTableViewCell();
        uint64_t v71 = swift_dynamicCastClass();
        char v72 = v197;
        if (v71)
        {
          uint64_t v73 = v71;
          unsigned int v74 = v63;
          id v75 = v182;
          UITableViewListCoordinator.updateCell(_:in:at:isVisible:)(v73, v72, (uint64_t)v68, 1);

          uint64_t v63 = v74;
        }
        unsigned int v76 = objc_msgSend(v72, sel_isEditing, v144);
        uint64_t v77 = v179;
        char v54 = v181;
        if (v76)
        {
          uint64_t v78 = *((void *)v168 + 1);
          if (!v78
            || (char v79 = v168[16],
                v199[0] = *(void *)v168,
                v199[1] = v78,
                char v200 = v79,
                type metadata accessor for NavigationState.StackContent.Key?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<EditMode>, (uint64_t)&type metadata for EditMode, MEMORY[0x1E4F41638]), MEMORY[0x18C113DA0](&v198), v198 != 1))
          {
            uint64_t v81 = v192;
            uint64_t v80 = v193;
            v63(v193, v177, v192);
            uint64_t v82 = v162;
            ListCoreDataSource.selectionValue(forRowAt:)((uint64_t)v191, v81, v173, v162);
            v70(v80, v81);
            uint64_t v83 = v163;
            if ((*v156)(v82, 1, v163) == 1)
            {
              (*v147)(v82, v159);
            }
            else
            {
              char v84 = v158;
              (*v149)(v158, v82, v83);
              if (!(*v148)(v151, 1, v160))
              {
                uint64_t v85 = v152;
                uint64_t v86 = v160;
                (*v146)(v152, v151, v160);
                uint64_t v87 = v153;
                MEMORY[0x18C113DA0](v86);
                (*v145)(v85, v86);
                uint64_t v88 = v154;
                LOBYTE(v85) = (*(uint64_t (**)(char *, uint64_t))(v155[13] + 56))(v84, v154);
                (*v144)(v87, v88);
                if (v85)
                {
                  id v89 = (void (*)(void, void))v191;
                  Class v90 = IndexPath._bridgeToObjectiveC()().super.isa;
                  char v91 = UITableViewListCoordinator.isAnimated.getter();
                  size_t v53 = v89;
                  char v54 = v181;
                  objc_msgSend(v197, sel_selectRowAtIndexPath_animated_scrollPosition_, v90, v91 & 1, 0);

                  (*v150)(v84, v83);
                  (*v184)((uint64_t)v53, v23);
                  uint64_t v52 = v170;
                  goto LABEL_6;
                }
              }
              (*v150)(v84, v83);
            }
            uint64_t v77 = v179;
          }
        }
        uint64_t v92 = v62;
        uint64_t v93 = (uint64_t)v178;
        ((void (*)(char *, void (***)(char *, uint64_t), uint64_t))v187)(v178, v191, v23);
        ((void (*)(uint64_t, void, uint64_t, uint64_t))v186)(v93, 0, 1, v23);
        uint64_t v94 = v77 + *(int *)(v174 + 48);
        outlined init with copy of IndexPath?(v93, v77);
        outlined init with copy of IndexPath?(v169, v94);
        if (v56((char *)v77, 1, v23) == 1)
        {
          outlined destroy of IndexPath?(v93, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
          uint64_t v95 = v92;
          if (v56((char *)v94, 1, v23) != 1) {
            goto LABEL_28;
          }
          outlined destroy of IndexPath?(v77, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
          uint64_t v96 = *v184;
          uint64_t v52 = v170;
        }
        else
        {
          uint64_t v97 = v167;
          outlined init with copy of IndexPath?(v77, v167);
          uint64_t v95 = v92;
          if (v56((char *)v94, 1, v23) == 1)
          {
            outlined destroy of IndexPath?((uint64_t)v178, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
            (*v184)(v97, v23);
LABEL_28:
            outlined destroy of (IndexPath?, IndexPath?)(v77);
            uint64_t v52 = v170;
LABEL_29:
            size_t v53 = (void (*)(void, void))v191;
            Class v98 = IndexPath._bridgeToObjectiveC()().super.isa;
            objc_msgSend(v197, sel_deselectRowAtIndexPath_animated_, v98, 0);

            char v54 = v181;
            objc_msgSend(v95, sel_setSelected_animated_, 0, 0);

            (*v184)((uint64_t)v53, v23);
            goto LABEL_6;
          }
          double v99 = v161;
          uint64_t v52 = v170;
          v172(v161, v94, v23);
          lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
          char v100 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v96 = *v184;
          (*v184)((uint64_t)v99, v23);
          uint64_t v101 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27DE8];
          outlined destroy of IndexPath?((uint64_t)v178, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
          v96(v97, v23);
          outlined destroy of IndexPath?(v179, &lazy cache variable for type metadata for IndexPath?, v101);
          if ((v100 & 1) == 0) {
            goto LABEL_29;
          }
        }
        size_t v53 = (void (*)(void, void))v191;
        v96((uint64_t)v191, v23);

LABEL_6:
        v47 += v183;
        BOOL v55 = v190-- == 1;
        int v50 = (unsigned int (**)(char *, uint64_t, uint64_t))v185;
        if (v55)
        {
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v186)(v54, 1, 1, v23);
          goto LABEL_34;
        }
        ((void (*)(char *, unint64_t, uint64_t))v187)(v54, v47, v23);
      }
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56))(v181, 1, 1, v23);
LABEL_34:
    swift_bridgeObjectRelease();
    uint64_t v36 = v194;
  }
  uint64_t v102 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v103 = (char **)((char *)v189 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v189) + 0x70));
  swift_beginAccess();
  uint64_t v104 = v36;
  uint64_t v105 = (char *)(v36 + 16);
  double v106 = *(void (**)(char *, char **, uint64_t))(v36 + 16);
  double v107 = v193;
  v188 = v103;
  uint64_t v108 = v192;
  v106(v193, v103, v192);
  uint64_t v109 = v164;
  ShadowListDataSource.sectionIDs.getter(v164);
  double v110 = *(void (****)(char *, uint64_t))(v104 + 8);
  uint64_t v194 = v104 + 8;
  ((void (*)(char *, uint64_t))v110)(v107, v108);
  uint64_t v111 = v166;
  uint64_t v112 = ShadowSectionCollection.count.getter(v166);
  (*(void (**)(uint64_t, uint64_t))(v165 + 8))(v109, v111);
  if (v112 < 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v113 = v188;
    if (v112)
    {
      v187 = (void *)((char *)v189 + *(void *)((*v102 & *v189) + 0x88));
      swift_beginAccess();
      Swift::Int v114 = 0;
      v186 = v105;
      uint64_t v190 = v112;
      v191 = v110;
      do
      {
        id v115 = objc_msgSend(v197, sel_headerViewForSection_, v114, v144);
        if (v115)
        {
          id v116 = v115;
          swift_getAssociatedTypeWitness();
          uint64_t v117 = swift_dynamicCastUnknownClass();
          if (v117)
          {
            uint64_t v118 = v117;
            uint64_t v120 = v192;
            int v119 = v193;
            v106(v193, v113, v192);
            swift_getWitnessTable();
            int v121 = v106;
            uint64_t v122 = v113;
            Swift::Bool v123 = ListDiffable.hasHeader(forSectionAtOffset:)(v114);
            ((void (*)(char *, uint64_t))v110)(v119, v120);
            if (v123)
            {
              v121(v119, v122, v120);
              uint64_t v124 = *v187;
              outlined copy of Transaction?(*v187);
              uint64_t v125 = swift_getWitnessTable();
              ListCoreDataSource.configureHeader(_:transaction:forSectionAtOffset:)(v118, v124, v114, v120, v125);
              outlined consume of Transaction?(v124);
              double v110 = v191;
              ((void (*)(char *, uint64_t))v191)(v119, v120);
              type metadata accessor for ListTableViewHeaderFooter();
              uint64_t v126 = swift_dynamicCastClass();
              double v106 = v121;
              if (v126)
              {
                uint64_t v127 = (void *)v126;
                id v128 = v116;
                id v116 = v127;
                specialized UITableViewListCoordinator.updateHeaderFooter(_:section:position:in:)((uint64_t)v116, 0, v197);
              }
              uint64_t v113 = v188;
              uint64_t v105 = v186;
            }
            else
            {
              uint64_t v113 = v122;
              double v106 = v121;
              double v110 = v191;
            }
            uint64_t v112 = v190;
          }
        }
        id v129 = objc_msgSend(v197, sel_footerViewForSection_, v114);
        if (v129)
        {
          id v130 = v129;
          swift_getAssociatedTypeWitness();
          uint64_t v131 = swift_dynamicCastUnknownClass();
          if (v131)
          {
            uint64_t v132 = v131;
            uint64_t v133 = v192;
            v134 = v193;
            v106(v193, v113, v192);
            swift_getWitnessTable();
            v135 = v105;
            v136 = v106;
            v137 = v113;
            Swift::Bool v138 = ListDiffable.hasFooter(forSectionAtOffset:)(v114);
            ((void (*)(char *, uint64_t))v110)(v134, v133);
            if (v138)
            {
              v136(v134, v137, v133);
              uint64_t v139 = *v187;
              outlined copy of Transaction?(*v187);
              uint64_t v140 = swift_getWitnessTable();
              ListCoreDataSource.configureFooter(_:transaction:forSectionAtOffset:)(v132, v139, v114, v133, v140);
              outlined consume of Transaction?(v139);
              double v110 = v191;
              ((void (*)(char *, uint64_t))v191)(v134, v133);
              type metadata accessor for ListTableViewHeaderFooter();
              uint64_t v141 = swift_dynamicCastClass();
              double v106 = v136;
              if (v141)
              {
                v142 = (void *)v141;
                id v143 = v130;
                id v130 = v142;
                specialized UITableViewListCoordinator.updateHeaderFooter(_:section:position:in:)((uint64_t)v130, 1, v197);
              }
              uint64_t v113 = v188;
              uint64_t v105 = v186;
            }
            else
            {
              uint64_t v113 = v137;
              double v106 = v136;
              uint64_t v105 = v135;
              double v110 = v191;
            }
            uint64_t v112 = v190;
          }
        }
        ++v114;
      }
      while (v112 != v114);
    }
  }
}

void performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(void *a1, int a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v63 = a5;
  uint64_t v64 = a6;
  uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v53 = *MEMORY[0x1E4FBC8C8] & *a1;
  uint64_t v11 = v53;
  uint64_t v12 = *(void *)(v53 + 80);
  uint64_t v56 = type metadata accessor for Optional();
  uint64_t v55 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  char v54 = (char *)&v52 - v13;
  uint64_t v61 = *(void *)(v12 - 8);
  uint64_t v14 = *(void **)(v61 + 64);
  MEMORY[0x1F4188790](v15);
  int v57 = (char *)&v52 - (((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v58 = (char *)&v52 - v17;
  uint64_t v52 = *(void *)(v11 + 96);
  uint64_t v59 = v12;
  uint64_t v18 = (int *)type metadata accessor for ListCoreBatchUpdates();
  uint64_t v19 = *((void *)v18 - 1);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v52 - v20;
  uint64_t v22 = v11;
  char v23 = a2;
  *((unsigned char *)a1 + *(void *)(v22 + 208)) = 1;
  LODWORD(v60) = a2;
  if (a2)
  {
    if (*((unsigned char *)a1 + *(void *)((*v10 & *a1) + 0xE8)) == 1)
    {
      UITableViewListCoordinator.resolvedEditMode.getter(&aBlock);
      if ((_BYTE)aBlock)
      {
        specialized UITableViewListCoordinator.updateDragInteractionEnabled(_:isEditing:)(a3);
        objc_msgSend(a3, sel_setEditing_animated_, 0, a4 & 1);
      }
    }
    UITableViewListCoordinator.resolvedEditMode.getter(&aBlock);
    BOOL v24 = (_BYTE)aBlock != 0;
    specialized UITableViewListCoordinator.updateDragInteractionEnabled(_:isEditing:)(a3);
    objc_msgSend(a3, sel_setEditing_animated_, v24, a4 & 1);
    char v23 = (char)v60;
    uint64_t v10 = (void *)MEMORY[0x1E4FBC8C8];
  }
  uint64_t isEscapingClosureAtFileLocation = swift_allocObject();
  *(void *)(isEscapingClosureAtFileLocation + 16) = a1;
  *(unsigned char *)(isEscapingClosureAtFileLocation + 24) = a4 & 1;
  *(unsigned char *)(isEscapingClosureAtFileLocation + 25) = v23 & 1;
  uint64_t v26 = v63;
  *(void *)(isEscapingClosureAtFileLocation + 32) = a3;
  *(void *)(isEscapingClosureAtFileLocation + 40) = v26;
  *(void *)(isEscapingClosureAtFileLocation + 48) = v64;
  char v27 = v23;
  uint64_t v28 = (char *)a1 + *(void *)((*v10 & *a1) + 0xC0);
  swift_beginAccess();
  (*(void (**)(char *, char *, int *))(v19 + 16))(v21, v28, v18);
  int v62 = a1;
  id v29 = a3;
  LOBYTE(v28) = ListCoreBatchUpdates.isEmpty.getter(v18);
  (*(void (**)(char *, int *))(v19 + 8))(v21, v18);
  if ((v28 & 1) == 0)
  {
    uint64_t v30 = v62;
    uint64_t v31 = (char *)v62 + *(void *)((*v10 & *v62) + 0xC8);
    swift_beginAccess();
    uint64_t v32 = v55;
    uint64_t v21 = v54;
    uint64_t v33 = v56;
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v54, v31, v56);
    uint64_t v34 = v61;
    uint64_t v35 = v59;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v21, 1, v59) != 1)
    {
LABEL_13:
      uint64_t v60 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      uint64_t v40 = v58;
      v60(v58, v21, v35);
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v57, v40, v35);
      unint64_t v41 = (*(unsigned __int8 *)(v34 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
      unint64_t v42 = ((unint64_t)v14 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v44 = (char *)swift_allocObject();
      *((void *)v44 + 2) = v35;
      uint64_t v45 = v53;
      uint64_t v46 = v52;
      *((void *)v44 + 3) = *(void *)(v53 + 88);
      *((void *)v44 + 4) = v46;
      *((void *)v44 + 5) = *(void *)(v45 + 104);
      *((void *)v44 + 6) = v30;
      v60(&v44[v41], v57, v35);
      *(void *)&v44[v42] = v29;
      *(void *)&v44[v43] = v63;
      *(void *)&v44[(v43 + 15) & 0xFFFFFFFFFFFFFFF8] = v64;
      uint64_t v47 = swift_allocObject();
      *(void *)(v47 + 16) = partial apply for closure #2 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:);
      *(void *)(v47 + 24) = v44;
      uint64_t v69 = (void (*)(uint64_t))closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
      uint64_t v70 = v47;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v66 = 1107296256;
      uint64_t v67 = thunk for @escaping @callee_guaranteed () -> ();
      uint64_t v68 = &block_descriptor_116;
      uint64_t v48 = _Block_copy(&aBlock);
      id v49 = v30;
      id v50 = v29;
      swift_release();
      uint64_t v69 = partial apply for closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:);
      uint64_t v70 = isEscapingClosureAtFileLocation;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v66 = 1107296256;
      uint64_t v67 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
      uint64_t v68 = &block_descriptor_119;
      uint64_t v51 = _Block_copy(&aBlock);
      swift_retain();
      swift_release();
      objc_msgSend(v50, sel_performBatchUpdates_completion_, v48, v51);
      _Block_release(v51);
      _Block_release(v48);
      swift_release();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v58, v59);
      swift_release();
      return;
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v21, v33);
    char v27 = (char)v60;
  }
  if (v27)
  {
    uint64_t v69 = partial apply for closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:);
    uint64_t v70 = isEscapingClosureAtFileLocation;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v66 = 1107296256;
    uint64_t v67 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    uint64_t v68 = &block_descriptor_106;
    uint64_t v36 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v29, sel_performBatchUpdates_completion_, 0, v36);
    swift_release();
    _Block_release(v36);
    return;
  }
  uint64_t v14 = self;
  uint64_t v35 = swift_allocObject();
  uint64_t v30 = v62;
  *(void *)(v35 + 16) = v29;
  *(void *)(v35 + 24) = v30;
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = partial apply for closure #3 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:);
  *(void *)(v34 + 24) = v35;
  uint64_t v69 = (void (*)(uint64_t))closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
  uint64_t v70 = v34;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v66 = 1107296256;
  uint64_t v67 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v68 = &block_descriptor_103;
  id v37 = _Block_copy(&aBlock);
  id v38 = v30;
  id v39 = v29;
  swift_retain();
  swift_release();
  objc_msgSend(v14, sel_performWithoutAnimation_, v37);
  swift_release();
  _Block_release(v37);
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_13;
  }
}

void closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(uint64_t a1, void *a2, char a3, char a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *MEMORY[0x1E4FBC8C8] & *a2;
  uint64_t v14 = (int *)type metadata accessor for ListCoreBatchUpdates();
  uint64_t v15 = *((void *)v14 - 1);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v20 - v16;
  uint64_t v18 = (char *)a2 + *(void *)(v13 + 192);
  swift_beginAccess();
  (*(void (**)(char *, char *, int *))(v15 + 16))(v17, v18, v14);
  LOBYTE(v18) = ListCoreBatchUpdates.isEmpty.getter(v14);
  uint64_t v19 = (*(uint64_t (**)(char *, int *))(v15 + 8))(v17, v14);
  if (v18)
  {
    UITableViewListCoordinator.enqueueLayoutInvalidationIfNeeded(_:)(a5);
    UITableViewListCoordinator.updateListContents(_:)(a5);
  }
  else
  {
    MEMORY[0x1F4188790](v19);
    *((unsigned char *)&v20 - 48) = a3 & 1;
    *(&v20 - 5) = (uint64_t)a2;
    *((unsigned char *)&v20 - 32) = a4 & 1;
    *(&v20 - 3) = (uint64_t)a5;
    *(&v20 - 2) = a6;
    *(&v20 - 1) = a7;
    static Update.ensure<A>(_:)();
  }
}

uint64_t closure #1 in closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(char a1, void *a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (a1) {
    return performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(a2, a3 & 1, a4, 1, a5, a6);
  }
  uint64_t v12 = self;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(unsigned char *)(v13 + 24) = a3 & 1;
  *(void *)(v13 + 32) = a4;
  *(unsigned char *)(v13 + 40) = 0;
  *(void *)(v13 + 48) = a5;
  *(void *)(v13 + 56) = a6;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = partial apply for performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:);
  *(void *)(v14 + 24) = v13;
  v19[4] = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
  v19[5] = v14;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 1107296256;
  void v19[2] = thunk for @escaping @callee_guaranteed () -> ();
  v19[3] = &block_descriptor_130;
  uint64_t v15 = _Block_copy(v19);
  id v16 = a2;
  id v17 = a4;
  swift_retain();
  swift_release();
  objc_msgSend(v12, sel_performWithoutAnimation_, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

void UITableViewListCoordinator.enqueueLayoutInvalidationIfNeeded(_:)(void *a1)
{
  uint64_t v2 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x98);
  if (v2[9] != 1 || *(void *)v2 | v2[8])
  {
    uint64_t v3 = specialized UIView.firstAncestorWhere(_:)(a1);
    if (v3)
    {
      id v6 = v3;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v5 = swift_conformsToProtocol2();
      if (v5)
      {
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(ObjectType, v5);
      }
      else
      {
        __break(1u);
      }
    }
  }
}

uint64_t closure #2 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v87 = a5;
  uint64_t v77 = a4;
  uint64_t v83 = a2;
  uint64_t v7 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v8 = *MEMORY[0x1E4FBC8C8] & *a1;
  uint64_t v88 = type metadata accessor for IndexPath();
  uint64_t v84 = *(void *)(v88 - 8);
  MEMORY[0x1F4188790](v88);
  uint64_t v86 = (char *)v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v85 = (char *)v76 - v11;
  _s10Foundation9IndexPathVSgMaTm_0(0, &lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath)?, (uint64_t (*)(uint64_t))type metadata accessor for (source: IndexPath, destination: IndexPath), MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v90 = (uint64_t)v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v89 = (uint64_t)v76 - v15;
  uint64_t v16 = type metadata accessor for IndexSet();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v82 = *(void *)(v8 + 80);
  type metadata accessor for ShadowListDataSource();
  ShadowListDataSource.updateBase(to:)(v83);
  swift_endAccess();
  uint64_t v20 = *(void *)((*v7 & *a1) + 0xC0);
  v76[1] = a1;
  uint64_t v21 = (uint64_t)a1 + v20;
  swift_beginAccess();
  uint64_t v23 = v17 + 16;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v22(v19, v21, v16);
  char v24 = IndexSet.isEmpty.getter();
  uint64_t v26 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v25 = v17 + 8;
  char v27 = v26;
  v26(v19, v16);
  if ((v24 & 1) == 0)
  {
    v22(v19, v21, v16);
    IndexSet._bridgeToObjectiveC()(v28);
    uint64_t v30 = v29;
    v27(v19, v16);
    objc_msgSend(a3, sel_deleteSections_withRowAnimation_, v30, v77);
  }
  uint64_t v31 = v25;
  uint64_t v32 = type metadata accessor for ListCoreBatchUpdates();
  uint64_t v33 = v21 + *(int *)(v32 + 36);
  char v79 = v22;
  uint64_t v80 = v23;
  v22(v19, v33, v16);
  char v34 = IndexSet.isEmpty.getter();
  uint64_t v81 = v19;
  uint64_t v82 = v31;
  uint64_t v78 = v27;
  v27(v19, v16);
  uint64_t v35 = (int *)v32;
  if ((v34 & 1) == 0)
  {
    uint64_t v36 = v81;
    v79(v81, v21 + *(int *)(v32 + 36), v16);
    IndexSet._bridgeToObjectiveC()(v37);
    id v39 = v38;
    v78(v36, v16);
    objc_msgSend(a3, sel_insertSections_withRowAnimation_, v39, v77);
  }
  uint64_t v40 = *(void *)(v21 + *(int *)(v32 + 40));
  uint64_t v41 = *(void *)(v40 + 16);
  uint64_t v83 = v21;
  if (v41)
  {
    swift_bridgeObjectRetain();
    unint64_t v42 = (void *)(v40 + 40);
    do
    {
      objc_msgSend(a3, sel_moveSection_toSection_, *(v42 - 1), *v42);
      v42 += 2;
      --v41;
    }
    while (v41);
    swift_bridgeObjectRelease();
    uint64_t v21 = v83;
  }
  id v43 = v87;
  if (*(void *)(*(void *)(v21 + v35[11]) + 16))
  {
    swift_bridgeObjectRetain();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a3, sel_deleteRowsAtIndexPaths_withRowAnimation_, isa, v43);
  }
  uint64_t v77 = v16;
  if (*(void *)(*(void *)(v21 + v35[12]) + 16))
  {
    swift_bridgeObjectRetain();
    Class v45 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a3, sel_insertRowsAtIndexPaths_withRowAnimation_, v45, v43);
  }
  id v87 = a3;
  v76[0] = v35;
  unint64_t v46 = *(void *)(*(void *)(v21 + v35[13]) + 16);
  uint64_t v47 = (void (**)(char *, uint64_t, uint64_t))(v84 + 32);
  uint64_t v48 = (uint64_t (**)(char *, uint64_t))(v84 + 8);
  uint64_t v84 = *(void *)(v21 + v35[13]);
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v50 = 0;
  while (1)
  {
    uint64_t v51 = v90;
    if (v50 == v46)
    {
      type metadata accessor for (source: IndexPath, destination: IndexPath)();
      uint64_t v53 = v52;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56))(v51, 1, 1, v52);
      unint64_t v50 = v46;
    }
    else
    {
      uint64_t v54 = v84;
      if (v50 >= *(void *)(v84 + 16))
      {
        __break(1u);
        return result;
      }
      type metadata accessor for (source: IndexPath, destination: IndexPath)();
      uint64_t v53 = v55;
      uint64_t v56 = *(void *)(v55 - 8);
      outlined init with copy of (source: IndexPath, destination: IndexPath)(v54+ ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80))+ *(void *)(v56 + 72) * v50++, v90);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v90, 0, 1, v53);
      uint64_t v51 = v90;
    }
    uint64_t v57 = v89;
    outlined init with take of SwipeActions.Value?(v51, v89, (uint64_t)&lazy cache variable for type metadata for (source: IndexPath, destination: IndexPath)?, (uint64_t)type metadata accessor for (source: IndexPath, destination: IndexPath), MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s10Foundation9IndexPathVSgMaTm_0);
    type metadata accessor for (source: IndexPath, destination: IndexPath)();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 48))(v57, 1, v53) == 1) {
      break;
    }
    uint64_t v58 = v88;
    uint64_t v59 = v89;
    uint64_t v60 = *v47;
    uint64_t v61 = v85;
    (*v47)(v85, v89 + *(int *)(v53 + 48), v88);
    int v62 = v86;
    v60(v86, v59, v58);
    Class v63 = IndexPath._bridgeToObjectiveC()().super.isa;
    uint64_t v64 = *v48;
    (*v48)(v62, v58);
    Class v65 = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v87, sel_moveRowAtIndexPath_toIndexPath_, v63, v65);

    uint64_t result = v64(v61, v58);
  }
  swift_bridgeObjectRelease();
  uint64_t v66 = v76[0];
  uint64_t v67 = v83;
  uint64_t v68 = v81;
  uint64_t v69 = v77;
  uint64_t v70 = v79;
  v79(v81, v83 + *(int *)(v76[0] + 56), v77);
  char v71 = IndexSet.isEmpty.getter();
  char v72 = v78;
  v78(v68, v69);
  if ((v71 & 1) == 0)
  {
    v70(v68, v67 + *(int *)(v66 + 56), v69);
    IndexSet._bridgeToObjectiveC()(v73);
    id v75 = v74;
    v72(v68, v69);
    objc_msgSend(v87, sel_reloadSections_withRowAnimation_, v75, 100);
  }
  return UITableViewListCoordinator.clearDataSourceUpdates()();
}

uint64_t UITableViewListCoordinator.clearDataSourceUpdates()()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x50);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  id v6 = (char *)&v9 - v5;
  swift_beginAccess();
  type metadata accessor for ListCoreBatchUpdates();
  ListCoreBatchUpdates.resetAll()();
  swift_endAccess();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v6, 1, 1, v2);
  uint64_t v7 = (char *)v0 + *(void *)((*v1 & *v0) + 0xC8);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v4 + 40))(v7, v6, v3);
  return swift_endAccess();
}

void closure #2 in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(char a1, void *a2, char a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(a2, a3 & 1, a4, 1, a5, a6);
  }
  else
  {
    uint64_t v11 = self;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = a2;
    *(unsigned char *)(v12 + 24) = a3 & 1;
    *(void *)(v12 + 32) = a4;
    *(unsigned char *)(v12 + 40) = 0;
    *(void *)(v12 + 48) = a5;
    *(void *)(v12 + 56) = a6;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = partial apply for performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:);
    *(void *)(v13 + 24) = v12;
    v18[4] = closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
    v18[5] = v13;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 1107296256;
    v18[2] = thunk for @escaping @callee_guaranteed () -> ();
    v18[3] = &block_descriptor_90;
    uint64_t v14 = _Block_copy(v18);
    uint64_t v15 = a2;
    id v16 = a4;
    swift_retain();
    swift_release();
    objc_msgSend(v11, sel_performWithoutAnimation_, v14);
    _Block_release(v14);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
  }
}

uint64_t UITableViewListCoordinator.updateCell(_:in:at:isVisible:)(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  if (a4) {
    ListTableViewCell.updateSeparatorsFromConfiguration()();
  }
  uint64_t v7 = a1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_cellConfiguration;
  unsigned __int8 v8 = *((unsigned char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x90));
  swift_beginAccess();
  uint64_t v9 = type metadata accessor for CellConfiguration();
  uint64_t v10 = *(int *)(v9 + 20);
  unsigned __int8 v11 = *(unsigned char *)(v7 + v10);
  *(unsigned char *)(v7 + v10) = v8;
  specialized CellConfiguration.updateValues<A>(pre:post:)(v11, v8);
  swift_endAccess();
  uint64_t v12 = OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host;
  uint64_t v13 = *(void **)(a1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host);
  if (v13)
  {
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    id v14 = v13;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  *(void *)(v7 + *(int *)(v9 + 32)) = objc_msgSend(a2, sel_style);
  uint64_t v15 = *(void **)(a1 + v12);
  if (v15)
  {
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    id v16 = v15;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_delegate + 8) = &protocol witness table for UITableViewListCoordinator<A, B>;
  return swift_unknownObjectWeakAssign();
}

void closure #1 in UITableViewListCoordinator.updateListContents(_:)(uint64_t a1, void *a2, void *a3)
{
  id v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = *MEMORY[0x1E4FBC8C8] & *a2;
  uint64_t v8 = type metadata accessor for ShadowListDataSource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  unsigned __int8 v11 = (char *)v19 - v10;
  uint64_t v12 = (char *)a2 + *(void *)(v7 + 112);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t v13 = *v6 & *a2;
  uint64_t v14 = *(void *)(v13 + 0xF8);
  if (*((unsigned char *)a2 + v14))
  {
    uint64_t v15 = 1;
  }
  else
  {
    id v16 = (void *)((char *)a2 + *(void *)(v13 + 136));
    swift_beginAccess();
    uint64_t v15 = *v16;
    outlined copy of Transaction?(v15);
  }
  ShadowListDataSource.configureCell(_:transaction:context:)((uint64_t)a3, v15, a1, v8);
  outlined consume of Transaction?(v15);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  id v17 = objc_msgSend(a3, sel_layer);
  double v18 = 0.0;
  if (*((unsigned char *)a2 + v14) == 1)
  {
    swift_getWitnessTable();
    v19[1] = *(void *)(a1 + *(int *)(type metadata accessor for _RowVisitationContext() + 40));
    ViewTraitCollection.zIndex.getter();
  }
  objc_msgSend(v17, sel_setZPosition_, v18);
}

uint64_t @objc UITableViewListCoordinator.numberOfSections(in:)(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = a1;
  uint64_t v6 = specialized UITableViewListCoordinator.numberOfSections(in:)();

  return v6;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:numberOfRowsInSection:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = a1;
  uint64_t v8 = specialized UITableViewListCoordinator.tableView(_:numberOfRowsInSection:)(a4);

  return v8;
}

uint64_t closure #1 in UITableViewListCoordinator.tableView(_:canEditRowAt:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for _RowVisitationContext();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v12 = _RowVisitationContext.canDelete.getter(v11);
  uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v13(v10, a1, v4);
  BOOL v14 = v12 || _RowVisitationContext.canMove.getter();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v10, v4);
  v13(v7, a1, v4);
  if (v14) {
    char v16 = 1;
  }
  else {
    char v16 = _RowVisitationContext.hasSwipeActions.getter();
  }
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v15)(v7, v4);
  *a2 = v16 & 1;
  return result;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:canEditRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:canEditRowAt:)(a1, a2, a3, a4, (uint64_t (*)(char *))specialized UITableViewListCoordinator.tableView(_:canEditRowAt:));
}

BOOL closure #1 in UITableViewListCoordinator.tableView(_:editingStyleForRowAt:)@<W0>(BOOL *a1@<X8>)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  uint64_t v2 = type metadata accessor for _RowVisitationContext();
  BOOL result = _RowVisitationContext.canDelete.getter(v2);
  *a1 = result;
  return result;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:editingStyleForRowAt:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  uint64_t v11 = specialized UITableViewListCoordinator.tableView(_:editingStyleForRowAt:)((uint64_t)v8);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v11;
}

void UITableViewListCoordinator.tableView(_:commit:forRowAt:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x1E4FBC8C8] & *v3;
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  double v11 = MEMORY[0x1F4188790](v8);
  if (a2 == 1)
  {
    *((unsigned char *)v3 + *(void *)(v7 + 224)) = 1;
    (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))((char *)&aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v8, v11);
    unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = *(void *)(v7 + 80);
    *(_OWORD *)(v13 + 24) = *(_OWORD *)(v7 + 88);
    *(void *)(v13 + 40) = *(void *)(v7 + 104);
    *(void *)(v13 + 48) = v3;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)&aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    *(void *)(v13 + ((v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = a1;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = partial apply for closure #1 in UITableViewListCoordinator.tableView(_:commit:forRowAt:);
    *(void *)(v14 + 24) = v13;
    uint64_t v26 = (void (*)())closure #1 in PlatformViewCoordinator.dispatchUpdate(_:)partial apply;
    uint64_t v27 = v14;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v23 = 1107296256;
    char v24 = thunk for @escaping @callee_guaranteed () -> ();
    uint64_t v25 = &block_descriptor_67_0;
    uint64_t v15 = _Block_copy(&aBlock);
    char v16 = v3;
    id v17 = a1;
    swift_release();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v16;
    *(void *)(v18 + 24) = v17;
    uint64_t v26 = partial apply for closure #2 in UITableViewListCoordinator.tableView(_:commit:forRowAt:);
    uint64_t v27 = v18;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v23 = 1107296256;
    char v24 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
    uint64_t v25 = &block_descriptor_73;
    uint64_t v19 = _Block_copy(&aBlock);
    uint64_t v20 = v16;
    id v21 = v17;
    swift_release();
    objc_msgSend(v21, sel_performBatchUpdates_completion_, v15, v19);
    _Block_release(v19);
    _Block_release(v15);
    UITableViewListCoordinator.commitUpdates()();
    swift_release();
  }
}

void closure #1 in UITableViewListCoordinator.tableView(_:commit:forRowAt:)(uint64_t a1, uint64_t a2, void *a3)
{
  swift_beginAccess();
  uint64_t v5 = type metadata accessor for ShadowListDataSource();
  uint64_t WitnessTable = swift_getWitnessTable();
  ListCoreDataSource.deleteCell(forRowAt:)(a2, v5, WitnessTable);
  swift_endAccess();
  _s10Foundation9IndexPathVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBBE00]);
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_18834BB80;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v8 + 16))(v10 + v9, a2, v7);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_deleteRowsAtIndexPaths_withRowAnimation_, isa, 100);
}

uint64_t @objc UITableViewListCoordinator.tableView(_:commit:forRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v11 = a3;
  id v12 = a1;
  UITableViewListCoordinator.tableView(_:commit:forRowAt:)(v11, a4, (uint64_t)v10);

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t @objc UITableViewListCoordinator.tableView(_:canMoveRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:canEditRowAt:)(a1, a2, a3, a4, (uint64_t (*)(char *))specialized UITableViewListCoordinator.tableView(_:canMoveRowAt:));
}

uint64_t UITableViewListCoordinator.tableView(_:targetIndexPathForMoveFromRowAt:toProposedIndexPath:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v7 = *MEMORY[0x1E4FBC8C8] & *v3;
  uint64_t v8 = type metadata accessor for ShadowListDataSource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  id v11 = (char *)&v17 - v10;
  id v12 = (char *)v3 + *(void *)(v7 + 112);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t WitnessTable = swift_getWitnessTable();
  LOBYTE(v12) = ListCoreDataSource.canMoveCell(fromRowAt:to:)(a1, a2, v8, WitnessTable);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v14 = type metadata accessor for IndexPath();
  if (v12) {
    uint64_t v15 = a2;
  }
  else {
    uint64_t v15 = a1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(a3, v15, v14);
}

Class @objc UITableViewListCoordinator.tableView(_:targetIndexPathForMoveFromRowAt:toProposedIndexPath:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  id v11 = (char *)&v20 - v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v20 - v13;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = a3;
  id v16 = a1;
  UITableViewListCoordinator.tableView(_:targetIndexPathForMoveFromRowAt:toProposedIndexPath:)((uint64_t)v11, (uint64_t)v8, (uint64_t)v14);

  uint64_t v17 = *(void (**)(char *, uint64_t))(v6 + 8);
  v17(v8, v5);
  v17(v11, v5);
  v18.super.Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  v17(v14, v5);

  return v18.super.isa;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:moveRowAt:to:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  id v11 = (char *)&v16 - v10;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  specialized UITableViewListCoordinator.tableView(_:moveRowAt:to:)((uint64_t)v11, (uint64_t)v8);

  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, v5);
  return ((uint64_t (*)(char *, uint64_t))v14)(v11, v5);
}

uint64_t @objc UITableViewListCoordinator.tableView(_:willBeginEditingRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:willBeginEditingRowAt:)(a1, a2, a3, a4, (void (*)(char *))specialized UITableViewListCoordinator.tableView(_:willBeginEditingRowAt:));
}

uint64_t @objc UITableViewListCoordinator.tableView(_:didEndEditingRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  _s10Foundation9IndexPathVSgMaTm_0(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v15 - v8;
  if (a4)
  {
    static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = type metadata accessor for IndexPath();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 0, 1, v10);
  }
  else
  {
    uint64_t v11 = type metadata accessor for IndexPath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 1, 1, v11);
  }
  id v12 = a3;
  id v13 = a1;
  specialized UITableViewListCoordinator.tableView(_:didEndEditingRowAt:)();

  return outlined destroy of IndexPath?((uint64_t)v9, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
}

void closure #1 in UITableViewListCoordinator.updateSizeThatFitsObserver(tableView:observedParent:viewGraph:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double v5 = *(double *)(a2 + 8);
  uint64_t v6 = a3 + 16;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x18C119DF0](v6);
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    swift_beginAccess();
    uint64_t v9 = MEMORY[0x18C119DF0](a4 + 16);
    if (v9)
    {
      uint64_t v10 = (void *)v9;
      if (objc_msgSend(v8, sel_isEditing))
      {
        id v11 = v8;
      }
      else
      {
        objc_msgSend(v10, sel_bounds);
        if (v5 == v12)
        {
          id v11 = v10;
          uint64_t v10 = v8;
        }
        else
        {
          type metadata accessor for UpdateCoalescingTableView();
          uint64_t v13 = swift_dynamicCastClassUnconditional();
          uint64_t v14 = (unsigned char *)(v13 + OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_visibleCellsUpdate);
          if (*(uint64_t *)(v13 + OBJC_IVAR____TtC7SwiftUI25UpdateCoalescingTableView_visibleCellsUpdate + 8) >= 2)
          {
            _assertionFailure(_:_:file:line:flags:)();
            __break(1u);
            return;
          }
          uint64_t v15 = (void *)v13;
          id v11 = v8;
          objc_msgSend(v15, sel_setNeedsLayout);
          *uint64_t v14 = 1;

          uint64_t v10 = v11;
        }
      }

      uint64_t v8 = v10;
    }
  }
}

void @objc UITableViewListCoordinator.tableView(_:willDisplayHeaderView:forSection:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  specialized UITableViewListCoordinator.tableView(_:willDisplayHeaderView:forSection:)(v6, v7);
}

void @objc UITableViewListCoordinator.tableView(_:didEndDisplayingHeaderView:forSection:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  type metadata accessor for ListTableViewHeaderFooter();
  uint64_t v7 = swift_dynamicCastClass();
  id v8 = a3;
  if (v7)
  {
    id v11 = v8;
    id v9 = a4;
    id v10 = a1;
    specialized PlatformListViewBase.defaultUpdateViewGraphForDisplay(_:sizeThatFitsCallback:)(0, 0, 0, &OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host, MEMORY[0x1E4FB1170], (uint64_t)&unk_1ED47D208, (uint64_t)thunk for @escaping @callee_guaranteed (@unowned CGSize, @unowned CGSize) -> ()partial apply);

    id v8 = v11;
  }
}

void UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v84 = a3;
  uint64_t v88 = a1;
  id v6 = (void *)(*MEMORY[0x1E4FBC8C8] & *v4);
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v82 = *(void *)(v8 - 8);
  uint64_t v83 = v8;
  uint64_t v9 = *(void *)(v82 + 64);
  MEMORY[0x1F4188790](v8);
  id v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = *(void *)(v6[11] - 8);
  MEMORY[0x1F4188790](v11);
  char v71 = (char *)&v68 - v12;
  uint64_t v87 = v13;
  uint64_t v75 = type metadata accessor for Binding();
  uint64_t v74 = *(void *)(v75 - 8);
  MEMORY[0x1F4188790](v75);
  uint64_t v69 = (char *)&v68 - v14;
  uint64_t v15 = v6[10];
  uint64_t v16 = v6[12];
  uint64_t v17 = type metadata accessor for ShadowListDataSource();
  uint64_t v79 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v78 = (char *)&v68 - v18;
  uint64_t v85 = v16;
  uint64_t v86 = v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v73 = type metadata accessor for Optional();
  uint64_t v72 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](v73);
  id v21 = (char *)&v68 - v20;
  uint64_t v80 = AssociatedTypeWitness;
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v68 - v24;
  type metadata accessor for ListTableViewCell();
  uint64_t v26 = swift_dynamicCastClass();
  if (v26)
  {
    uint64_t v27 = (char *)v26;
    uint64_t v68 = v25;
    uint64_t v81 = v9;
    id v76 = a2;
    specialized PlatformListViewBase.defaultUpdateViewGraphForDisplay(_:sizeThatFitsCallback:)(1, 0, 0, &OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host, MEMORY[0x1E4FB11A0], (uint64_t)&unk_1ED47D140, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize, @unowned CGSize) -> ());
    uint64_t v28 = *(void **)&v27[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host];
    if (v28)
    {
      uint64_t v29 = v22;
      uint64_t v30 = v7;
      uint64_t v31 = v27;
      id v32 = v28;
      swift_retain();
      specialized UITableViewListCoordinator.updateSizeThatFitsObserver(tableView:observedParent:viewGraph:)(v88);

      uint64_t v27 = v31;
      uint64_t v7 = v30;
      uint64_t v22 = v29;
      id v10 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
      swift_release();
    }
    unsigned int v33 = objc_msgSend(v88, sel_isEditing);
    uint64_t v34 = v81;
    uint64_t v77 = v7;
    if (v33)
    {
      uint64_t v35 = (uint64_t)v21;
      uint64_t v36 = (char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x70);
      swift_beginAccess();
      uint64_t v37 = v79;
      id v38 = v78;
      (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v78, v36, v17);
      uint64_t WitnessTable = swift_getWitnessTable();
      ListCoreDataSource.selectionValue(forRowAt:)(v84, v17, WitnessTable, v35);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v17);
      uint64_t v40 = v80;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v35, 1, v80) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v35, v73);
        uint64_t v34 = v81;
      }
      else
      {
        uint64_t v41 = v68;
        (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v68, v35, v40);
        unint64_t v42 = (char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x78);
        swift_beginAccess();
        uint64_t v43 = v74;
        uint64_t v44 = v75;
        int v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48))(v42, 1, v75);
        uint64_t v34 = v81;
        if (!v45)
        {
          unint64_t v46 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
          uint64_t v79 = v22;
          uint64_t v47 = v69;
          v46(v69, v42, v44);
          uint64_t v48 = v43;
          id v49 = v71;
          MEMORY[0x18C113DA0](v44);
          unint64_t v50 = v47;
          uint64_t v22 = v79;
          (*(void (**)(char *, uint64_t))(v48 + 8))(v50, v44);
          uint64_t v51 = v87;
          char v52 = (*(uint64_t (**)(char *, uint64_t))(v7[13] + 56))(v41, v87);
          uint64_t v53 = v51;
          uint64_t v34 = v81;
          (*(void (**)(char *, uint64_t))(v70 + 8))(v49, v53);
          if (v52)
          {
            objc_msgSend(v27, sel_setSelected_animated_, 1, 0);
            (*(void (**)(char *, uint64_t))(v22 + 8))(v41, v80);
LABEL_13:
            id v54 = objc_msgSend(self, sel_sharedApplication);
            uint64_t v55 = v82;
            uint64_t v56 = v83;
            (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v10, v84, v83);
            unint64_t v57 = (*(unsigned __int8 *)(v55 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
            uint64_t v58 = v27;
            uint64_t v59 = v10;
            unint64_t v60 = (v34 + v57 + 7) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v61 = (char *)swift_allocObject();
            uint64_t v62 = v87;
            *((void *)v61 + 2) = v86;
            *((void *)v61 + 3) = v62;
            *((void *)v61 + 4) = v85;
            *((void *)v61 + 5) = v77[13];
            *((void *)v61 + 6) = v4;
            (*(void (**)(char *, char *, uint64_t))(v55 + 32))(&v61[v57], v59, v56);
            *(void *)&v61[v60] = v58;
            Class v63 = v88;
            *(void *)&v61[(v60 + 15) & 0xFFFFFFFFFFFFFFF8] = v88;
            aBlock[4] = partial apply for closure #1 in UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:);
            aBlock[5] = v61;
            aBlock[0] = MEMORY[0x1E4F143A8];
            aBlock[1] = 1107296256;
            aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
            aBlock[3] = &block_descriptor_40;
            uint64_t v64 = _Block_copy(aBlock);
            id v65 = v76;
            uint64_t v66 = v4;
            id v67 = v63;
            swift_release();
            objc_msgSend(v54, sel__performBlockAfterCATransactionCommits_, v64);
            _Block_release(v64);

            ListTableViewCell.updateSeparatorsFromConfiguration()();
            return;
          }
        }
        (*(void (**)(char *, uint64_t))(v22 + 8))(v41, v80);
      }
    }
    if (objc_msgSend(v27, sel_isSelected)) {
      objc_msgSend(v27, sel_setSelected_animated_, 0, 0);
    }
    goto LABEL_13;
  }
}

id closure #1 in UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(unsigned char *)(a3 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_hasDragItemsPreference)) {
    char v6 = 1;
  }
  else {
    char v6 = *(unsigned char *)(a3 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_hasItemProviderTrait);
  }
  UITableViewListCoordinator.updateIndexPathsWithDragItems(indexPath:hasDragItems:)(a2, v6);
  objc_msgSend(a4, sel_isEditing);
  return specialized UITableViewListCoordinator.updateDragInteractionEnabled(_:isEditing:)(a4);
}

uint64_t UITableViewListCoordinator.updateIndexPathsWithDragItems(indexPath:hasDragItems:)(uint64_t a1, char a2)
{
  int v5 = a2 & 1;
  _s10Foundation9IndexPathVSgMaTm_0(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v9 = type metadata accessor for IndexPath();
  uint64_t v21 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v20 - v13;
  uint64_t v15 = (void *)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0xF0));
  swift_beginAccess();
  uint64_t v16 = *v15;
  swift_bridgeObjectRetain();
  int v17 = specialized Set.contains(_:)(a1, v16) & 1;
  uint64_t result = swift_bridgeObjectRelease();
  if (v17 != v5)
  {
    if (a2)
    {
      uint64_t v19 = v21;
      (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v11, a1, v9);
      swift_beginAccess();
      specialized Set._Variant.insert(_:)((uint64_t)v14, v11);
      swift_endAccess();
      return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v14, v9);
    }
    else
    {
      swift_beginAccess();
      specialized Set._Variant.remove(_:)(a1, (uint64_t)v8);
      swift_endAccess();
      return outlined destroy of IndexPath?((uint64_t)v8, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
    }
  }
  return result;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  return @objc UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)(a1, a2, a3, a4, a5, (void (*)(id, id, char *))UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:));
}

id UITableViewListCoordinator.tableView(_:didEndDisplaying:forRowAt:)(void *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for ListTableViewCell();
  if (swift_dynamicCastClass()) {
    specialized PlatformListViewBase.defaultUpdateViewGraphForDisplay(_:sizeThatFitsCallback:)(0, 0, 0, &OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host, MEMORY[0x1E4FB11A0], (uint64_t)&unk_1ED47D140, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize, @unowned CGSize) -> ());
  }
  UITableViewListCoordinator.updateIndexPathsWithDragItems(indexPath:hasDragItems:)(a3, 0);
  objc_msgSend(a1, sel_isEditing);

  return specialized UITableViewListCoordinator.updateDragInteractionEnabled(_:isEditing:)(a1);
}

uint64_t @objc UITableViewListCoordinator.tableView(_:didEndDisplaying:forRowAt:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  return @objc UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)(a1, a2, a3, a4, a5, (void (*)(id, id, char *))UITableViewListCoordinator.tableView(_:didEndDisplaying:forRowAt:));
}

uint64_t @objc UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void (*a6)(id, id, char *))
{
  uint64_t v10 = type metadata accessor for IndexPath();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = a3;
  id v15 = a4;
  id v16 = a1;
  a6(v14, v15, v13);

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t @objc UITableViewListCoordinator.tableView(_:shouldIndentWhileEditingRowAt:)()
{
  uint64_t v0 = type metadata accessor for IndexPath();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return 0;
}

BOOL UITableViewListCoordinator.tableView(_:shouldHighlightRowAt:)(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for ShadowListDataSource();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v43 - v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  id v14 = (char *)&v43 - v13;
  if (objc_msgSend(a1, sel_isEditing, v12))
  {
    id v15 = (char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x70);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v8, v15, v5);
    uint64_t WitnessTable = swift_getWitnessTable();
    ListCoreDataSource.selectionValue(forRowAt:)(a2, v5, WitnessTable, (uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    BOOL v17 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v14, 1, AssociatedTypeWitness) != 1;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    return v17;
  }
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v19 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

  if (!v19) {
    return 0;
  }
  type metadata accessor for ListTableViewCell();
  uint64_t v20 = swift_dynamicCastClass();
  if (!v20
    || (uint64_t v21 = v20 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior,
        uint64_t v22 = *(void *)(v20 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 8),
        v22 == 1))
  {

    return 0;
  }
  uint64_t v24 = *(void *)v21;
  uint64_t v25 = *(void *)(v21 + 16);
  uint64_t v26 = *(void *)(v21 + 24);
  uint64_t v28 = *(void *)(v21 + 32);
  uint64_t v27 = *(void *)(v21 + 40);
  uint64_t v48 = *(void *)(v21 + 48);
  uint64_t v49 = v27;
  uint64_t v29 = *(void *)(v21 + 56);
  uint64_t v46 = v24;
  uint64_t v47 = v29;
  BOOL v17 = v22 != 0;
  char v30 = *(unsigned char *)(v21 + 64);
  if (v22)
  {
    uint64_t v31 = swift_allocObject();
    *(void *)(v31 + 16) = v22;
    *(void *)(v31 + 24) = v25;
    uint64_t v44 = partial apply for thunk for @callee_guaranteed () -> ();
    uint64_t v45 = v31;
  }
  else
  {
    uint64_t v44 = 0;
    uint64_t v45 = 0;
  }
  LOBYTE(v39) = v30;
  uint64_t v32 = v46;
  uint64_t v33 = v26;
  uint64_t v43 = v26;
  uint64_t v34 = v28;
  uint64_t v35 = v28;
  uint64_t v36 = v47;
  outlined consume of PlatformItemList.Item.SelectionBehavior?(v46, v22, v25, v33, v35, v49, v48, v47, v39, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  LOBYTE(v40) = v30;
  char v37 = v30;
  uint64_t v38 = v43;
  outlined consume of PlatformItemList.Item.SelectionBehavior?(v32, v22, v25, v43, v34, v49, v48, v36, v40, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  outlined copy of AppIntentExecutor?(v22);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v44);

  LOBYTE(v41) = v37;
  outlined consume of PlatformItemList.Item.SelectionBehavior?(v32, v22, v25, v38, v34, v49, v48, v36, v41, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  LOBYTE(v42) = v37;
  outlined consume of PlatformItemList.Item.SelectionBehavior?(v32, v22, v25, v38, v34, v49, v48, v36, v42, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  return v17;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:shouldHighlightRowAt:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  LOBYTE(a1) = UITableViewListCoordinator.tableView(_:shouldHighlightRowAt:)(v9, (uint64_t)v8);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return a1 & 1;
}

Swift::Bool __swiftcall UITableViewListCoordinator.tableView(_:shouldDrawTopSeparatorForSection:)(UITableView *_, Swift::Int shouldDrawTopSeparatorForSection)
{
  Swift::Int v47 = shouldDrawTopSeparatorForSection;
  uint64_t v42 = _;
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v41 = type metadata accessor for IndexPath();
  uint64_t v38 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  uint64_t v43 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v40 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v35 = (uint64_t)&v34 - v6;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v34 = (uint64_t)&v34 - v8;
  uint64_t v49 = type metadata accessor for ShadowRowCollection();
  uint64_t v44 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v48 = (char *)&v34 - v9;
  uint64_t v10 = type metadata accessor for ShadowSectionCollection();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v34 - v12;
  uint64_t v14 = type metadata accessor for ShadowListDataSource();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  BOOL v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v34 - v19;
  uint64_t v21 = (char *)v2 + *(void *)(v3 + 112);
  swift_beginAccess();
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v45(v20, v21, v14);
  ShadowListDataSource.sectionIDs.getter((uint64_t)v13);
  uint64_t v46 = *(void (**)(char *, uint64_t))(v15 + 8);
  v46(v20, v14);
  swift_getWitnessTable();
  char v22 = Collection.isEmpty.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  if (v22) {
    return 0;
  }
  uint64_t v24 = v17;
  uint64_t v25 = v43;
  v45(v20, v21, v14);
  uint64_t WitnessTable = swift_getWitnessTable();
  ListDiffable.rowIDs(forSectionAtOffset:)(v47, v14, WitnessTable);
  v46(v20, v14);
  swift_getWitnessTable();
  if (Collection.isEmpty.getter()) {
    goto LABEL_6;
  }
  uint64_t v27 = v45;
  v45(v20, v21, v14);
  v27(v24, v21, v14);
  uint64_t v28 = (uint64_t)v25;
  MEMORY[0x18C10A880](0, v47);
  uint64_t v30 = v34;
  uint64_t v29 = v35;
  ListDiffable.rowIndex(at:)(v34, v35, v28, v14, WitnessTable);
  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v28, v41);
  uint64_t v31 = v46;
  v46(v24, v14);
  int v32 = ShadowListDataSource.separatorConfiguration(forRowAt:)(v30, v29, v14);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v29, v40);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v30, v37);
  v31(v20, v14);
  swift_release();
  swift_release();
  if (!v32) {
LABEL_6:
  }
    unsigned __int8 v23 = [(UITableView *)v42 _drawsSeparatorAtTopOfSections];
  else {
    unsigned __int8 v23 = v32 == 1;
  }
  (*(void (**)(char *, uint64_t))(v44 + 8))(v48, v49);
  return v23;
}

Swift::Int @objc UITableViewListCoordinator.tableView(_:shouldDrawTopSeparatorForSection:)(void *a1, uint64_t a2, void *a3, Swift::Int a4)
{
  uint64_t v6 = a3;
  id v7 = a1;
  LOBYTE(a4) = UITableViewListCoordinator.tableView(_:shouldDrawTopSeparatorForSection:)(v6, a4);

  return a4 & 1;
}

Swift::Bool __swiftcall UITableViewListCoordinator.tableView(_:shouldDrawBottomSeparatorForSection:)(UITableView *_, Swift::Int shouldDrawBottomSeparatorForSection)
{
  Swift::Int v72 = shouldDrawBottomSeparatorForSection;
  uint64_t v58 = _;
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v67 = *(void *)(v4 - 8);
  uint64_t v68 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v66 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = v3;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v64 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v65 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v63 = (uint64_t)&v53 - v7;
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v61 = *(void *)(v8 - 8);
  uint64_t v62 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v60 = (uint64_t)&v53 - v9;
  uint64_t v10 = type metadata accessor for ShadowRowCollection();
  uint64_t v70 = *(void *)(v10 - 8);
  Swift::Int v71 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v69 = (char *)&v53 - v11;
  uint64_t v12 = type metadata accessor for ShadowSectionCollection();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v53 - v14;
  uint64_t v16 = type metadata accessor for ShadowListDataSource();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v59 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v53 - v20;
  uint64_t v22 = (uint64_t)v2 + *(void *)(v73 + 112);
  swift_beginAccess();
  uint64_t v24 = v17 + 16;
  unsigned __int8 v23 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v23(v21, v22, v16);
  ShadowListDataSource.sectionIDs.getter((uint64_t)v15);
  uint64_t v73 = *(void *)(v17 + 8);
  ((void (*)(char *, uint64_t))v73)(v21, v16);
  swift_getWitnessTable();
  char v25 = Collection.isEmpty.getter();
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  uint64_t v55 = v15;
  uint64_t v56 = v12;
  uint64_t v57 = v13 + 8;
  id v54 = v26;
  v26((uint64_t)v15, v12);
  if (v25)
  {
    char v27 = 0;
  }
  else
  {
    v23(v21, v22, v16);
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v29 = v69;
    uint64_t v53 = WitnessTable;
    ListDiffable.rowIDs(forSectionAtOffset:)(v72, v16, WitnessTable);
    ((void (*)(char *, uint64_t))v73)(v21, v16);
    uint64_t v30 = v71;
    uint64_t v31 = ShadowRowCollection.count.getter(v71);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v29, v30);
    BOOL v32 = v31 < 1;
    uint64_t v33 = v31 - 1;
    if (v32) {
      goto LABEL_6;
    }
    v23(v21, v22, v16);
    uint64_t v34 = v59;
    v23(v59, v22, v16);
    Swift::Int v71 = v22;
    uint64_t v35 = (uint64_t)v66;
    MEMORY[0x18C10A880](v33, v72);
    uint64_t v36 = v60;
    uint64_t v37 = v63;
    ListDiffable.rowIndex(at:)(v60, v63, v35, v16, v53);
    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v35, v68);
    uint64_t v70 = v24;
    uint64_t v38 = v23;
    uint64_t v39 = (void (*)(char *, uint64_t))v73;
    ((void (*)(char *, uint64_t))v73)(v34, v16);
    ShadowListDataSource.separatorConfiguration(forRowAt:)(v36, v37, v16);
    int v41 = v40;
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v37, v65);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v36, v62);
    v39(v21, v16);
    unsigned __int8 v23 = v38;
    swift_release();
    uint64_t v22 = v71;
    swift_release();
    if (!v41)
    {
LABEL_6:
      Swift::Int v42 = v72;
      uint64_t v43 = (void (*)(char *, uint64_t))v73;
      uint64_t v44 = v58;
      id v45 = [(UITableView *)v58 style];
      if (v45 == (id)1) {
        goto LABEL_7;
      }
      Swift::Int v71 = v42 + 1;
      if (__OFADD__(v42, 1))
      {
        __break(1u);
        return (char)v45;
      }
      v23(v21, v22, v16);
      Swift::Bool v46 = ListDiffable.hasFooter(forSectionAtOffset:)(v42);
      v43(v21, v16);
      if (v46)
      {
        char v27 = 0;
      }
      else
      {
        v23(v21, v22, v16);
        Swift::Int v47 = v43;
        uint64_t v48 = (uint64_t)v55;
        ShadowListDataSource.sectionIDs.getter((uint64_t)v55);
        v47(v21, v16);
        uint64_t v49 = v56;
        uint64_t v50 = ShadowSectionCollection.count.getter(v56);
        v54(v48, v49);
        if (v71 >= v50)
        {
          char v27 = 1;
        }
        else
        {
          Swift::Int v51 = v71;
          v23(v21, v22, v16);
          LOBYTE(v51) = ListDiffable.hasHeader(forSectionAtOffset:)(v51);
          ((void (*)(char *, uint64_t))v73)(v21, v16);
          char v27 = v51 ^ 1;
        }
      }
      static Semantics.v3.getter();
      if ((isLinkedOnOrAfter(_:)() & 1) != 0 && [(UITableView *)v44 style] == UITableViewStylePlain) {
LABEL_7:
      }
        char v27 = 1;
    }
    else
    {
      char v27 = v41 == 1;
    }
  }
  LOBYTE(v45) = v27 & 1;
  return (char)v45;
}

Swift::Int @objc UITableViewListCoordinator.tableView(_:shouldDrawBottomSeparatorForSection:)(void *a1, uint64_t a2, void *a3, Swift::Int a4)
{
  uint64_t v6 = a3;
  id v7 = a1;
  LOBYTE(a4) = UITableViewListCoordinator.tableView(_:shouldDrawBottomSeparatorForSection:)(v6, a4);

  return a4 & 1;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:selectionFollowsFocusForRowAt:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  LOBYTE(a1) = specialized UITableViewListCoordinator.tableView(_:selectionFollowsFocusForRowAt:)(v9);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return a1 & 1;
}

uint64_t UITableViewListCoordinator.tableView(_:cellForRowAt:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ShadowListDataSource();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  id v10 = (char *)&v21 - v9;
  uint64_t v11 = (void *)MEMORY[0x18C115780](0x6C6C65437473694CLL, 0xE800000000000000, v8);
  swift_bridgeObjectRelease();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  uint64_t v22 = a1;
  id v13 = objc_msgSend(a1, sel_dequeueReusableCellWithIdentifier_forIndexPath_, v11, isa);

  swift_getAssociatedTypeWitness();
  uint64_t v14 = swift_dynamicCastUnknownClassUnconditional();
  uint64_t v15 = (char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x70);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v15, v6);
  uint64_t v24 = v3;
  uint64_t v25 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  ListCoreDataSource.visitContent<A>(atRow:visitor:)(a2, (uint64_t)partial apply for closure #1 in UITableViewListCoordinator.tableView(_:cellForRowAt:), (uint64_t)v23, v6, MEMORY[0x1E4FBC848] + 8, WitnessTable, (uint64_t)&v26);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  type metadata accessor for ListTableViewCell();
  uint64_t v17 = swift_dynamicCastClass();
  if (v17)
  {
    uint64_t v18 = (void *)v17;
    id v19 = v13;
    UITableViewListCoordinator.updateCell(_:in:at:isVisible:)((uint64_t)v18, v22, a2, 0);
    objc_msgSend(v18, sel_setAutomaticallyUpdatesBackgroundConfiguration_, 0);
    objc_msgSend(v18, sel_setAutomaticallyUpdatesContentConfiguration_, 0);
  }
  return v14;
}

void closure #1 in UITableViewListCoordinator.tableView(_:cellForRowAt:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v7 = *MEMORY[0x1E4FBC8C8] & *a2;
  uint64_t v8 = type metadata accessor for ShadowListDataSource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v16 - v10;
  uint64_t v12 = (char *)a2 + *(void *)(v7 + 112);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v12, v8);
  id v13 = (void *)((char *)a2 + *(void *)((*v6 & *a2) + 0x88));
  swift_beginAccess();
  uint64_t v14 = *v13;
  outlined copy of Transaction?(*v13);
  ShadowListDataSource.configureCell(_:transaction:context:)((uint64_t)a3, v14, a1, v8);
  outlined consume of Transaction?(v14);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (*((unsigned char *)a2 + *(void *)((*v6 & *a2) + 0xF8)) == 1)
  {
    id v15 = objc_msgSend(a3, sel_layer);
    swift_getWitnessTable();
    v16[1] = *(void *)(a1 + *(int *)(type metadata accessor for _RowVisitationContext() + 40));
    ViewTraitCollection.zIndex.getter();
    objc_msgSend(v15, sel_setZPosition_);
  }
}

id @objc UITableViewListCoordinator.tableView(_:cellForRowAt:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  uint64_t v11 = (void *)UITableViewListCoordinator.tableView(_:cellForRowAt:)(v9, (uint64_t)v8);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

  return v11;
}

id @objc UITableViewListCoordinator.tableView(_:viewForHeaderInSection:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = a1;
  UITableViewListCoordinator.tableView(_:viewForHeaderInSection:)(v6, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))ListDiffable.hasHeader(forSectionAtOffset:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))ListCoreDataSource.configureHeader(_:transaction:forSectionAtOffset:), 0);
  id v9 = v8;

  return v9;
}

uint64_t ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 8);
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  id v10 = (char *)&v12 - v9;
  ListDiffable.sectionIndex(atOffset:)(a1, a2, v6);
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t, uint64_t))(a3 + 104))(&v12, v10, a2, a3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, AssociatedTypeWitness);
  if (v14) {
    return 0;
  }
  else {
    return v13 & (v12 != 0);
  }
}

double @objc UITableViewListCoordinator.tableView(_:heightForHeaderInSection:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = a1;
  double v8 = specialized UITableViewListCoordinator.tableView(_:heightForHeaderInSection:)(a4);

  return v8;
}

double @objc UITableViewListCoordinator.tableView(_:estimatedHeightForHeaderInSection:)(void *a1, uint64_t a2, void *a3, Swift::Int a4)
{
  id v6 = a3;
  id v7 = a1;
  double v8 = specialized UITableViewListCoordinator.tableView(_:estimatedHeightForHeaderInSection:)(a4);

  return v8;
}

void UITableViewListCoordinator.tableView(_:viewForHeaderInSection:)(void *a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), int a5)
{
  HIDWORD(v29) = a5;
  uint64_t v33 = a4;
  uint64_t v34 = a1;
  id v7 = v5;
  uint64_t v9 = (void *)(*MEMORY[0x1E4FBC8C8] & *v5);
  uint64_t v10 = v9[10];
  uint64_t v30 = v9[12];
  uint64_t v31 = v10;
  uint64_t v11 = type metadata accessor for ShadowListDataSource();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  char v14 = (char *)&v29 - v13;
  id v15 = (char *)v7 + v9[14];
  swift_beginAccess();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v16(v14, v15, v11);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v32 = a2;
  LOBYTE(a3) = a3(a2, v11, WitnessTable);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v14, v11);
  if (a3)
  {
    id v19 = (void *)MEMORY[0x18C115780](0x646165487473694CLL, 0xEA00000000007265);
    swift_bridgeObjectRelease();
    id v20 = objc_msgSend(v34, sel_dequeueReusableHeaderFooterViewWithIdentifier_, v19);

    if (v20)
    {
      swift_getAssociatedTypeWitness();
      uint64_t v21 = swift_dynamicCastUnknownClassUnconditional();
      v16(v14, v15, v11);
      uint64_t v22 = (void *)((char *)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x88));
      swift_beginAccess();
      uint64_t v23 = *v22;
      outlined copy of Transaction?(v23);
      uint64_t v24 = swift_getWitnessTable();
      v33(v21, v23, v32, v11, v24);
      outlined consume of Transaction?(v23);
      v18(v14, v11);
      type metadata accessor for ListTableViewHeaderFooter();
      uint64_t v25 = swift_dynamicCastClass();
      if (v25)
      {
        char v26 = (void *)v25;
        id v27 = v20;
        id v28 = v26;
        specialized UITableViewListCoordinator.updateHeaderFooter(_:section:position:in:)((uint64_t)v28, SBYTE4(v29), v34);
      }
    }
    else
    {
      __break(1u);
    }
  }
}

id @objc UITableViewListCoordinator.tableView(_:viewForFooterInSection:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = a1;
  UITableViewListCoordinator.tableView(_:viewForHeaderInSection:)(v6, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))ListDiffable.hasFooter(forSectionAtOffset:), (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))ListCoreDataSource.configureFooter(_:transaction:forSectionAtOffset:), 1);
  uint64_t v9 = v8;

  return v9;
}

double @objc UITableViewListCoordinator.tableView(_:heightForFooterInSection:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6 = a3;
  id v7 = a1;
  specialized UITableViewListCoordinator.tableView(_:heightForFooterInSection:)(a4);
  double v9 = v8;

  return v9;
}

double @objc UITableViewListCoordinator.tableView(_:estimatedHeightForFooterInSection:)(void *a1, uint64_t a2, void *a3, Swift::Int a4)
{
  id v6 = a3;
  id v7 = a1;
  specialized UITableViewListCoordinator.tableView(_:estimatedHeightForFooterInSection:)(a4);
  double v9 = v8;

  return v9;
}

void UITableViewListCoordinator.listTableViewCell(_:platformItemIsSelected:)(char *a1, int a2)
{
  type metadata accessor for (IndexPath?, IndexPath?)();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v5);
  double v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s10Foundation9IndexPathVSgMaTm_0(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  char v14 = (char *)&v79 - v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v79 - v16;
  MEMORY[0x1F4188790](v18);
  uint64_t v103 = (char *)&v79 - v19;
  uint64_t v20 = type metadata accessor for IndexPath();
  MEMORY[0x1F4188790](v20);
  MEMORY[0x1F4188790](v21);
  char v26 = &a1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior];
  uint64_t v27 = *(void *)&a1[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 8];
  if (v27 == 1) {
    return;
  }
  uint64_t v28 = *(void *)v26;
  if ((*(void *)v26 & 0x101) != 0x100) {
    return;
  }
  uint64_t v87 = v8;
  LODWORD(v88) = a2;
  uint64_t v84 = v6;
  uint64_t v89 = v2;
  uint64_t v99 = v25;
  uint64_t v85 = v14;
  uint64_t v83 = v11;
  uint64_t v102 = v28;
  uint64_t v100 = v22;
  uint64_t v94 = (char *)&v79 - v23;
  uint64_t v86 = v17;
  uint64_t v101 = v24;
  uint64_t v29 = *((void *)v26 + 2);
  uint64_t v30 = *((void *)v26 + 3);
  uint64_t v31 = *((void *)v26 + 4);
  uint64_t v32 = *((void *)v26 + 5);
  uint64_t v34 = *((void *)v26 + 6);
  uint64_t v33 = *((void *)v26 + 7);
  int v35 = v26[64];
  outlined copy of AppIntentExecutor?(v27);
  outlined copy of AppIntentExecutor?(v30);
  outlined copy of AppIntentExecutor?(v32);
  uint64_t v36 = (char *)objc_msgSend(a1, sel__tableView);
  if (!v36)
  {
    LOBYTE(v78) = v35;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v102, v27, v29, v30, v31, v32, v34, v33, v78, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    return;
  }
  int v95 = v35;
  uint64_t v96 = v29;
  uint64_t v97 = v31;
  uint64_t v91 = v27;
  uint64_t v92 = v30;
  uint64_t v90 = v32;
  uint64_t v93 = v34;
  uint64_t v98 = v33;
  uint64_t v37 = v36;
  id v38 = objc_msgSend(v36, sel_indexPathForCell_, a1);
  if (!v38)
  {
    uint64_t v43 = (uint64_t)v103;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v101 + 56))(v103, 1, 1, v100);
    goto LABEL_10;
  }
  uint64_t v39 = v38;
  uint64_t v40 = v99;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v41 = v101;
  Swift::Int v42 = *(void (**)(char *, uint64_t, uint64_t))(v101 + 32);
  uint64_t v43 = (uint64_t)v103;
  uint64_t v44 = v40;
  uint64_t v45 = v100;
  v42(v103, v44, v100);
  Swift::Int v47 = (void *)(v41 + 56);
  Swift::Bool v46 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56);
  v46(v43, 0, 1, v45);
  uint64_t v49 = (char *)(v41 + 48);
  uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
  if (v48(v43, 1, v45) == 1)
  {
LABEL_10:

    LOBYTE(v78) = v95;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v102, v91, v96, v92, v97, v90, v93, v98, v78, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    outlined destroy of IndexPath?(v43, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
    return;
  }
  uint64_t v81 = v48;
  uint64_t v82 = v46;
  uint64_t v50 = v94;
  v42(v94, v43, v45);
  Swift::Int v51 = (void (*)(uint64_t, uint64_t, uint64_t))v42;
  uint64_t v52 = v97;
  uint64_t v53 = v96;
  char v54 = v95;
  if (v88)
  {
    uint64_t v55 = v101;
    uint64_t v56 = (uint64_t)v86;
    uint64_t v57 = v98;
    (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v86, v50, v45);
    v82(v56, 0, 1, v45);
    uint64_t v58 = (uint64_t)v89 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v89) + 0xB8);
    swift_beginAccess();
    outlined assign with take of IndexPath?(v56, v58);
    swift_endAccess();
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v37, sel_selectRowAtIndexPath_animated_scrollPosition_, isa, 0, 0);

    LOBYTE(v78) = v54;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v102, v91, v53, v92, v52, v90, v93, v57, v78, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v50, v45);
    return;
  }
  uint64_t v80 = v51;
  uint64_t v60 = v49;
  Class v61 = IndexPath._bridgeToObjectiveC()().super.isa;
  uint64_t v62 = v50;
  uint64_t v88 = v37;
  objc_msgSend(v37, sel_deselectRowAtIndexPath_animated_, v61, 0);

  uint64_t v63 = (char *)v89 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v89) + 0xB8);
  swift_beginAccess();
  uint64_t v64 = v101;
  uint64_t v65 = (uint64_t)v85;
  (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v85, v62, v45);
  uint64_t v89 = v47;
  v82(v65, 0, 1, v45);
  uint64_t v66 = (uint64_t)v87;
  uint64_t v67 = (uint64_t)&v87[*(int *)(v84 + 48)];
  outlined init with copy of IndexPath?((uint64_t)v63, (uint64_t)v87);
  outlined init with copy of IndexPath?(v65, v67);
  uint64_t v68 = v81;
  uint64_t v103 = v60;
  if (v81(v66, 1, v45) == 1)
  {

    LOBYTE(v78) = v95;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v102, v91, v96, v92, v97, v90, v93, v98, v78, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    outlined destroy of IndexPath?(v65, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v94, v45);
    if (v68(v67, 1, v45) == 1)
    {
      outlined destroy of IndexPath?((uint64_t)v87, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
      uint64_t v69 = (uint64_t)v86;
LABEL_19:
      v82(v69, 1, 1, v45);
      swift_beginAccess();
      outlined assign with take of IndexPath?(v69, (uint64_t)v63);
      swift_endAccess();
      return;
    }
LABEL_17:
    outlined destroy of (IndexPath?, IndexPath?)((uint64_t)v87);
    return;
  }
  uint64_t v88 = v63;
  uint64_t v70 = (uint64_t)v83;
  outlined init with copy of IndexPath?(v66, (uint64_t)v83);
  unsigned int v71 = v68(v67, 1, v45);
  uint64_t v72 = v90;
  if (v71 == 1)
  {

    LOBYTE(v78) = v95;
    outlined consume of PlatformItemList.Item.SelectionBehavior?(v102, v91, v96, v92, v97, v72, v93, v98, v78, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
    outlined destroy of IndexPath?((uint64_t)v85, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
    uint64_t v73 = *(void (**)(char *, uint64_t))(v101 + 8);
    v73(v94, v45);
    v73((char *)v70, v45);
    goto LABEL_17;
  }
  uint64_t v74 = v99;
  v80(v99, v67, v45);
  lazy protocol witness table accessor for type IndexPath and conformance IndexPath(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
  char v75 = dispatch thunk of static Equatable.== infix(_:_:)();

  LOBYTE(v78) = v95;
  outlined consume of PlatformItemList.Item.SelectionBehavior?(v102, v91, v96, v92, v97, v72, v93, v98, v78, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
  id v76 = *(void (**)(uint64_t, uint64_t))(v101 + 8);
  v76(v74, v45);
  uint64_t v77 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27DE8];
  outlined destroy of IndexPath?((uint64_t)v85, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
  v76((uint64_t)v94, v45);
  v76(v70, v45);
  outlined destroy of IndexPath?(v66, &lazy cache variable for type metadata for IndexPath?, v77);
  uint64_t v69 = (uint64_t)v86;
  uint64_t v63 = v88;
  if (v75) {
    goto LABEL_19;
  }
}

void UITableViewListCoordinator.tableView(_:didSelectRowAt:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v64 = a2;
  uint64_t v60 = (void *)(*MEMORY[0x1E4FBC8C8] & *v2);
  _s10Foundation9IndexPathVSgMaTm_0(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v55 = (char *)&v55 - v6;
  uint64_t v58 = *(void *)(v60[11] - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v57 = (char *)&v55 - v8;
  uint64_t v59 = v9;
  uint64_t v10 = (void *)type metadata accessor for Binding();
  uint64_t v62 = *(v10 - 1);
  id v63 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v56 = (char *)&v55 - v11;
  uint64_t v12 = type metadata accessor for ShadowListDataSource();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v55 - v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v55 - v19;
  uint64_t v21 = *(void *)(AssociatedTypeWitness - 8);
  double v23 = MEMORY[0x1F4188790](v22);
  Class v61 = (char *)&v55 - v24;
  if (!objc_msgSend(a1, sel_isEditing, v23))
  {
    uint64_t v28 = v64;
    Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
    id v63 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

    if (!v63) {
      return;
    }
    type metadata accessor for ListTableViewCell();
    uint64_t v30 = swift_dynamicCastClass();
    if (v30)
    {
      uint64_t v31 = v30 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior;
      uint64_t v32 = *(void (**)(uint64_t))(v30 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 8);
      if (v32 != (void (*)(uint64_t))1)
      {
        uint64_t v60 = a1;
        uint64_t v33 = *(void *)v31;
        uint64_t v34 = *(void *)(v31 + 16);
        uint64_t v35 = *(void *)(v31 + 24);
        uint64_t v36 = *(void *)(v31 + 32);
        uint64_t v37 = *(void *)(v31 + 40);
        uint64_t v38 = *(void *)(v31 + 48);
        uint64_t v62 = *(void *)(v31 + 56);
        LODWORD(v61) = *(unsigned __int8 *)(v31 + 64);
        if (v32)
        {
          outlined copy of AppIntentExecutor?((uint64_t)v32);
          outlined copy of AppIntentExecutor?(v35);
          uint64_t v39 = outlined copy of AppIntentExecutor?(v37);
          v32(v39);
          if ((v33 & 1) == 0)
          {
LABEL_9:
            LOBYTE(v54) = (_BYTE)v61;
            outlined consume of PlatformItemList.Item.SelectionBehavior?(v33, (uint64_t)v32, v34, v35, v36, v37, v38, v62, v54, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);

            uint64_t v40 = type metadata accessor for IndexPath();
            uint64_t v41 = *(void *)(v40 - 8);
            uint64_t v42 = (uint64_t)v55;
            (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v55, v28, v40);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v41 + 56))(v42, 0, 1, v40);
            uint64_t v43 = (uint64_t)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0xB8);
            swift_beginAccess();
            outlined assign with take of IndexPath?(v42, v43);
LABEL_12:
            swift_endAccess();
            return;
          }
        }
        else
        {
          outlined copy of AppIntentExecutor?(0);
          outlined copy of AppIntentExecutor?(v35);
          outlined copy of AppIntentExecutor?(v37);
          if ((v33 & 1) == 0) {
            goto LABEL_9;
          }
        }
        Class v52 = IndexPath._bridgeToObjectiveC()().super.isa;
        objc_msgSend(v60, sel_deselectRowAtIndexPath_animated_, v52, UITableViewListCoordinator.isAnimated.getter() & 1);
        LOBYTE(v54) = (_BYTE)v61;
        outlined consume of PlatformItemList.Item.SelectionBehavior?(v33, (uint64_t)v32, v34, v35, v36, v37, v38, v62, v54, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      }
    }
    id v53 = v63;

    return;
  }
  uint64_t v25 = (char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x70);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v15, v25, v12);
  uint64_t WitnessTable = swift_getWitnessTable();
  ListCoreDataSource.selectionValue(forRowAt:)(v64, v12, WitnessTable, (uint64_t)v20);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v27 = v21;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    return;
  }
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v21 + 32);
  uint64_t v45 = v61;
  v44(v61, v20, AssociatedTypeWitness);
  Swift::Bool v46 = (char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x78);
  swift_beginAccess();
  uint64_t v48 = v62;
  id v47 = v63;
  if ((*(unsigned int (**)(char *, uint64_t, id))(v62 + 48))(v46, 1, v63))
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v45, AssociatedTypeWitness);
    goto LABEL_12;
  }
  uint64_t v49 = v56;
  (*(void (**)(char *, char *, id))(v48 + 16))(v56, v46, v47);
  swift_endAccess();
  uint64_t v50 = v57;
  MEMORY[0x18C113DA0](v47);
  uint64_t v51 = v59;
  (*(void (**)(char *, uint64_t))(v60[13] + 32))(v45, v59);
  specialized Binding.wrappedValue.setter();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v50, v51);
  (*(void (**)(char *, id))(v48 + 8))(v49, v47);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v45, AssociatedTypeWitness);
}

uint64_t @objc UITableViewListCoordinator.tableView(_:didSelectRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:didSelectRowAt:)(a1, a2, a3, a4, (void (*)(id, char *))UITableViewListCoordinator.tableView(_:didSelectRowAt:));
}

id UITableViewListCoordinator.tableView(_:didDeselectRowAt:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v42 = a2;
  id v45 = a1;
  uint64_t v37 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v4 = *(void *)(v37 + 88);
  uint64_t v39 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v38 = (char *)&v34 - v5;
  uint64_t v6 = type metadata accessor for Binding();
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v34 - v7;
  uint64_t v9 = type metadata accessor for ShadowListDataSource();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v34 - v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v34 - v16;
  uint64_t v43 = AssociatedTypeWitness;
  uint64_t v44 = *(void *)(AssociatedTypeWitness - 8);
  double v19 = MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v34 - v20;
  id result = objc_msgSend(v45, sel_isEditing, v19);
  if (result)
  {
    uint64_t v35 = v15;
    uint64_t v36 = v14;
    id v45 = v21;
    uint64_t v34 = v8;
    double v23 = (void *)MEMORY[0x1E4FBC8C8];
    uint64_t v24 = (char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x70);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v24, v9);
    uint64_t WitnessTable = swift_getWitnessTable();
    ListCoreDataSource.selectionValue(forRowAt:)(v42, v9, WitnessTable, (uint64_t)v17);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v26 = v43;
    uint64_t v27 = v44;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v17, 1, v43) == 1)
    {
      return (id)(*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v17, v36);
    }
    else
    {
      id v28 = v45;
      (*(void (**)(id, char *, uint64_t))(v27 + 32))(v45, v17, v26);
      uint64_t v29 = (char *)v3 + *(void *)((*v23 & *v3) + 0x78);
      swift_beginAccess();
      uint64_t v31 = v40;
      uint64_t v30 = v41;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v29, 1, v41))
      {
        (*(void (**)(id, uint64_t))(v27 + 8))(v28, v26);
        return (id)swift_endAccess();
      }
      else
      {
        uint64_t v32 = v34;
        (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v34, v29, v30);
        swift_endAccess();
        uint64_t v33 = v38;
        MEMORY[0x18C113DA0](v30);
        (*(void (**)(id, uint64_t))(*(void *)(v37 + 104) + 40))(v28, v4);
        specialized Binding.wrappedValue.setter();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v33, v4);
        (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v30);
        return (id)(*(uint64_t (**)(id, uint64_t))(v27 + 8))(v28, v26);
      }
    }
  }
  return result;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:didDeselectRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:didSelectRowAt:)(a1, a2, a3, a4, (void (*)(id, char *))UITableViewListCoordinator.tableView(_:didDeselectRowAt:));
}

uint64_t @objc UITableViewListCoordinator.tableView(_:didSelectRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(id, char *))
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  a5(v12, v11);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t @objc UITableViewListCoordinator.tableView(_:shouldBeginMultipleSelectionInteractionAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:canEditRowAt:)(a1, a2, a3, a4, (uint64_t (*)(char *))specialized UITableViewListCoordinator.tableView(_:shouldBeginMultipleSelectionInteractionAt:));
}

uint64_t @objc UITableViewListCoordinator.tableView(_:canEditRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(char *))
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  LOBYTE(a5) = a5(v11);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return a5 & 1;
}

uint64_t @objc UITableViewListCoordinator.tableView(_:didBeginMultipleSelectionInteractionAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:willBeginEditingRowAt:)(a1, a2, a3, a4, (void (*)(char *))specialized UITableViewListCoordinator.tableView(_:didBeginMultipleSelectionInteractionAt:));
}

uint64_t @objc UITableViewListCoordinator.tableView(_:willBeginEditingRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(char *))
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  a5(v11);

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

id @objc UITableViewListCoordinator.tableView(_:contextMenuConfigurationForRowAt:point:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  uint64_t v11 = (void *)specialized UITableViewListCoordinator.tableView(_:contextMenuConfigurationForRowAt:point:)(v9);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

  return v11;
}

uint64_t (*UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(void *a1, uint64_t a2))()
{
  uint64_t v15 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v5 = v15;
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = swift_allocObject();
  swift_unknownObjectWeakInit();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v6);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = *(void *)(v5 + 80);
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(v15 + 88);
  *(void *)(v11 + 40) = *(void *)(v5 + 104);
  *(void *)(v11 + 48) = a1;
  *(void *)(v11 + 56) = v9;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11 + v10, (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  id v12 = a1;
  return partial apply for closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:);
}

uint64_t closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v27 = a2;
  id v28 = a1;
  uint64_t v12 = type metadata accessor for IndexPath();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  double v15 = MEMORY[0x1F4188790](v12);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v12, v15);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (char *)swift_allocObject();
  *((void *)v17 + 2) = a4;
  *((void *)v17 + 3) = a5;
  *((void *)v17 + 4) = a6;
  *((void *)v17 + 5) = a7;
  uint64_t v18 = v27;
  *((void *)v17 + 6) = v27;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v17[v16], (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  double v19 = v28;
  *(void *)&v17[(v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8] = v28;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = partial apply for closure #1 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:);
  *(void *)(v20 + 24) = v17;
  uint64_t v35 = partial apply for thunk for @callee_guaranteed () -> ();
  uint64_t v36 = v20;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v32 = 1107296256;
  uint64_t v33 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v34 = &block_descriptor_19;
  uint64_t v21 = _Block_copy(&aBlock);
  swift_retain();
  id v22 = v19;
  swift_retain();
  swift_release();
  uint64_t v35 = (uint64_t (*)())destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  uint64_t v36 = 0;
  uint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v32 = 1107296256;
  uint64_t v33 = thunk for @escaping @callee_guaranteed @Sendable (@unowned Bool) -> ();
  uint64_t v34 = &block_descriptor_17_1;
  double v23 = _Block_copy(&aBlock);
  objc_msgSend(v22, sel_performBatchUpdates_completion_, v21, v23);
  _Block_release(v23);
  _Block_release(v21);
  uint64_t v24 = (void *)swift_allocObject();
  uint64_t v25 = v30;
  void v24[2] = v29;
  v24[3] = v25;
  v24[4] = a6;
  v24[5] = a7;
  v24[6] = v18;
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v13) {
    __break(1u);
  }
  return result;
}

void closure #1 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x18C119DF0](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    swift_beginAccess();
    uint64_t v8 = type metadata accessor for ShadowListDataSource();
    uint64_t WitnessTable = swift_getWitnessTable();
    ListCoreDataSource.deleteCell(forRowAt:)(a2, v8, WitnessTable);
    swift_endAccess();
    _s10Foundation9IndexPathVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<IndexPath>, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBBE00]);
    uint64_t v10 = type metadata accessor for IndexPath();
    uint64_t v11 = *(void *)(v10 - 8);
    unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_18834BB80;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 16))(v13 + v12, a2, v10);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(a3, sel_deleteRowsAtIndexPaths_withRowAnimation_, isa, 100);
  }
}

void closure #3 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    swift_beginAccess();
    type metadata accessor for ShadowListDataSource();
    ShadowListDataSource.discardUpdatesForDeletion()();
    swift_endAccess();
  }
}

uint64_t UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v7 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

  uint64_t result = 0;
  if (v7)
  {
    type metadata accessor for ListTableViewCell();
    uint64_t v9 = swift_dynamicCastClass();
    if (v9)
    {
      if (*(void *)(v9 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host))
      {
        type metadata accessor for NavigationState.StackContent.Key?(0, (unint64_t *)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, MEMORY[0x1E4FBB718]);
        swift_retain();
        static Update.dispatchImmediately<A>(_:)();

        swift_release();
      }
      else
      {

        _s7SwiftUI12SwipeActionsO5ValueVSgWOi0_((uint64_t)&v42);
        outlined init with take of SwipeActions.Value?((uint64_t)&v42, (uint64_t)v56, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationState.StackContent.Key?);
      }
      uint64_t v10 = MEMORY[0x1E4FBB718];
      outlined init with take of SwipeActions.Value?((uint64_t)v56, (uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationState.StackContent.Key?);
      outlined init with take of SwipeActions.Value?((uint64_t)v41, (uint64_t)&v42, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, v10, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationState.StackContent.Key?);
      if (_s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)&v42) != 1)
      {
        uint64_t v20 = v3;
        uint64_t v11 = v45;
        uint64_t v12 = v55;
        uint64_t v19 = v54;
        uint64_t v13 = v53;
        uint64_t v21 = v52;
        uint64_t v22 = v51;
        uint64_t v14 = v50;
        uint64_t v15 = v42;
        uint64_t v23 = v44;
        uint64_t v24 = v43;
        uint64_t v16 = v46;
        uint64_t v17 = v47;
        uint64_t v25 = v48;
        uint64_t v18 = v49;
        outlined copy of SwipeActions.Configuration?(v42, v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54);
        outlined release of SwipeActions.Value?(v41);
        if (v11)
        {
          __int16 v27 = v15 & 0x101;
          uint64_t v28 = v24;
          __int16 v29 = v23 & 0x1FF;
          uint64_t v30 = v11;
          uint64_t v31 = v16;
          uint64_t v32 = v17;
          char v33 = v25;
          uint64_t v34 = v18;
          uint64_t v35 = v14;
          uint64_t v36 = v22;
          uint64_t v37 = v21;
          uint64_t v38 = v13;
          uint64_t v39 = v19;
          uint64_t v40 = v12;
          swift_bridgeObjectRetain();
          outlined copy of Binding<NavigationSplitViewColumn>?(v16, v17);
          outlined copy of Binding<SwipeActionResultToken?>?(v18, v14, v22, v21, v13, v19);
          closure #1 in UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)((unsigned __int8 *)&v27, v20, a1, a2, (uint64_t)&unk_1ED47D0C8, (uint64_t)partial apply for closure #1 in closure #1 in UITableViewListCoordinator.tableView(_:trailingSwipeActionsConfigurationForRowAt:), &v26);
          outlined consume of SwipeActions.Configuration?(v15, v24, v23, v11, v16, v17, v25, v18, v14, v22, v21, v13, v19);
          outlined consume of SwipeActions.Configuration?(v15, v24, v23, v11, v16, v17, v25, v18, v14, v22, v21, v13, v19);
          return v26;
        }
      }
    }
    else
    {
    }
    return 0;
  }
  return result;
}

id @objc UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:));
}

uint64_t UITableViewListCoordinator.tableView(_:trailingSwipeActionsConfigurationForRowAt:)(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v7 = objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

  uint64_t result = 0;
  if (v7)
  {
    type metadata accessor for ListTableViewCell();
    uint64_t v9 = swift_dynamicCastClass();
    if (v9)
    {
      if (*(void *)(v9 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host))
      {
        type metadata accessor for NavigationState.StackContent.Key?(0, (unint64_t *)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, MEMORY[0x1E4FBB718]);
        swift_retain();
        static Update.dispatchImmediately<A>(_:)();

        swift_release();
      }
      else
      {

        _s7SwiftUI12SwipeActionsO5ValueVSgWOi0_((uint64_t)v42);
        outlined init with take of SwipeActions.Value?((uint64_t)v42, (uint64_t)v57, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationState.StackContent.Key?);
      }
      uint64_t v10 = MEMORY[0x1E4FBB718];
      outlined init with take of SwipeActions.Value?((uint64_t)v57, (uint64_t)v41, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationState.StackContent.Key?);
      outlined init with take of SwipeActions.Value?((uint64_t)v41, (uint64_t)v42, (uint64_t)&lazy cache variable for type metadata for SwipeActions.Value?, (uint64_t)&type metadata for SwipeActions.Value, v10, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for NavigationState.StackContent.Key?);
      if (_s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)v42) != 1)
      {
        uint64_t v20 = v3;
        uint64_t v11 = v46;
        uint64_t v12 = v56;
        uint64_t v19 = v55;
        uint64_t v13 = v54;
        uint64_t v21 = v53;
        uint64_t v22 = v52;
        uint64_t v14 = v51;
        uint64_t v15 = v43;
        uint64_t v23 = v45;
        uint64_t v24 = v44;
        uint64_t v16 = v47;
        uint64_t v17 = v48;
        uint64_t v25 = v49;
        uint64_t v18 = v50;
        outlined copy of SwipeActions.Configuration?(v43, v44, v45, v46, v47, v48, v49, v50, v51, v52, v53, v54, v55);
        outlined release of SwipeActions.Value?(v41);
        if (v11)
        {
          __int16 v27 = v15 & 0x101;
          uint64_t v28 = v24;
          __int16 v29 = v23 & 0x1FF;
          uint64_t v30 = v11;
          uint64_t v31 = v16;
          uint64_t v32 = v17;
          char v33 = v25;
          uint64_t v34 = v18;
          uint64_t v35 = v14;
          uint64_t v36 = v22;
          uint64_t v37 = v21;
          uint64_t v38 = v13;
          uint64_t v39 = v19;
          uint64_t v40 = v12;
          swift_bridgeObjectRetain();
          outlined copy of Binding<NavigationSplitViewColumn>?(v16, v17);
          outlined copy of Binding<SwipeActionResultToken?>?(v18, v14, v22, v21, v13, v19);
          closure #1 in UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)((unsigned __int8 *)&v27, v20, a1, a2, (uint64_t)&unk_1ED47D000, (uint64_t)partial apply for closure #1 in closure #1 in UITableViewListCoordinator.tableView(_:trailingSwipeActionsConfigurationForRowAt:), &v26);
          outlined consume of SwipeActions.Configuration?(v15, v24, v23, v11, v16, v17, v25, v18, v14, v22, v21, v13, v19);
          outlined consume of SwipeActions.Configuration?(v15, v24, v23, v11, v16, v17, v25, v18, v14, v22, v21, v13, v19);
          return v26;
        }
      }
    }
    else
    {
    }
    return 0;
  }
  return result;
}

id closure #1 in UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)@<X0>(unsigned __int8 *a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>)
{
  uint64_t v53 = a6;
  uint64_t v50 = a5;
  uint64_t v46 = a4;
  uint64_t v51 = a3;
  uint64_t v52 = a7;
  uint64_t v45 = a2;
  uint64_t v47 = *MEMORY[0x1E4FBC8C8] & *a2;
  uint64_t v49 = v47;
  uint64_t v44 = type metadata accessor for IndexPath();
  uint64_t v35 = *(void *)(v44 - 8);
  uint64_t v43 = *(void *)(v35 + 64);
  MEMORY[0x1F4188790](v44);
  uint64_t v34 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v33 = *a1;
  int v32 = a1[1];
  uint64_t v31 = *((void *)a1 + 1);
  int v30 = a1[16];
  int v29 = a1[17];
  uint64_t v9 = *((void *)a1 + 4);
  uint64_t v70 = *((void *)a1 + 3);
  uint64_t v37 = v9;
  uint64_t v54 = *((void *)a1 + 5);
  uint64_t v10 = *((void *)a1 + 7);
  uint64_t v11 = *((void *)a1 + 8);
  uint64_t v13 = *((void *)a1 + 10);
  uint64_t v42 = *((void *)a1 + 9);
  uint64_t v12 = v42;
  uint64_t v41 = v13;
  uint64_t v15 = *((void *)a1 + 12);
  uint64_t v40 = *((void *)a1 + 11);
  uint64_t v14 = v40;
  uint64_t v39 = v15;
  uint64_t v38 = *((void *)a1 + 13);
  uint64_t v16 = v38;
  LODWORD(a1) = a1[48];
  int v36 = (int)a1;
  uint64_t v48 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISwipeActionsConfiguration);
  v55[0] = v33;
  v55[1] = v32;
  uint64_t v56 = v31;
  char v57 = v30;
  char v58 = v29;
  uint64_t v59 = v70;
  uint64_t v60 = v9;
  uint64_t v61 = v54;
  char v62 = (char)a1;
  uint64_t v63 = v10;
  uint64_t v64 = v11;
  uint64_t v17 = v10;
  uint64_t v65 = v12;
  uint64_t v66 = v13;
  uint64_t v67 = v14;
  uint64_t v68 = v15;
  uint64_t v69 = v16;
  uint64_t v18 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v19 = v35;
  uint64_t v20 = v34;
  uint64_t v21 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v35 + 16))(v34, v46, v44);
  uint64_t v22 = v19;
  unint64_t v23 = (*(unsigned __int8 *)(v19 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v24 = swift_allocObject();
  uint64_t v25 = v47;
  *(void *)(v24 + 16) = *(void *)(v47 + 80);
  *(_OWORD *)(v24 + 24) = *(_OWORD *)(v49 + 88);
  *(void *)(v24 + 40) = *(void *)(v25 + 104);
  *(void *)(v24 + 48) = v18;
  uint64_t v26 = v51;
  *(void *)(v24 + 56) = v51;
  (*(void (**)(unint64_t, char *, uint64_t))(v22 + 32))(v24 + v23, v20, v21);
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v37, v54);
  outlined copy of Binding<SwipeActionResultToken?>?(v17, v11, v42, v41, v40, v39);
  id v27 = v26;
  id result = UISwipeActionsConfiguration.init(configuration:performDestructiveAction:)(v55, v53, v24);
  *uint64_t v52 = result;
  return result;
}

uint64_t closure #1 in closure #1 in UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v8 = a3 + 16;
  swift_beginAccess();
  uint64_t v9 = MEMORY[0x18C119DF0](v8);
  if (v9)
  {
    uint64_t v10 = (void *)v9;
    uint64_t v11 = UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(a4, a5);

    v11();
    swift_release();
  }
  return a1(1);
}

id @objc UITableViewListCoordinator.tableView(_:trailingSwipeActionsConfigurationForRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  return @objc UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)(a1, a2, a3, a4, (uint64_t (*)(id, char *))UITableViewListCoordinator.tableView(_:trailingSwipeActionsConfigurationForRowAt:));
}

id @objc UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t (*a5)(id, char *))
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  uint64_t v14 = (void *)a5(v12, v11);

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);

  return v14;
}

void @objc UITableViewListCoordinator.init()()
{
}

uint64_t UITableViewListCoordinator.__ivar_destroyer()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v2 = (char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x70);
  uint64_t v3 = type metadata accessor for ShadowListDataSource();
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = (char *)v0 + *(void *)((*v1 & *v0) + 0x78);
  type metadata accessor for Binding();
  uint64_t v5 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = (void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x80));
  outlined consume of Binding<NavigationSplitViewColumn>?(*v6, v6[1]);
  outlined consume of Transaction?(*(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x88)));

  outlined destroy of IndexPath?((uint64_t)v0 + *(void *)((*v1 & *v0) + 0xB8), &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
  id v7 = (char *)v0 + *(void *)((*v1 & *v0) + 0xC0);
  uint64_t v8 = type metadata accessor for ListCoreBatchUpdates();
  (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = (char *)v0 + *(void *)((*v1 & *v0) + 0xC8);
  uint64_t v10 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x100));

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v11);
}

uint64_t @objc UITableViewListCoordinator.__ivar_destroyer(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (char *)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x70);
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = (char *)a1 + *(void *)((*v2 & *a1) + 0x78);
  type metadata accessor for Binding();
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  id v7 = (void *)((char *)a1 + *(void *)((*v2 & *a1) + 0x80));
  outlined consume of Binding<NavigationSplitViewColumn>?(*v7, v7[1]);
  outlined consume of Transaction?(*(void *)((char *)a1 + *(void *)((*v2 & *a1) + 0x88)));

  outlined destroy of IndexPath?((uint64_t)a1 + *(void *)((*v2 & *a1) + 0xB8), &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
  uint64_t v8 = (char *)a1 + *(void *)((*v2 & *a1) + 0xC0);
  uint64_t v9 = type metadata accessor for ListCoreBatchUpdates();
  (*(void (**)(char *, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = (char *)a1 + *(void *)((*v2 & *a1) + 0xC8);
  uint64_t v11 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(void *)((char *)a1 + *(void *)((*v2 & *a1) + 0x100));

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v12);
}

uint64_t type metadata accessor for UITableViewListCoordinator()
{
  return swift_getGenericMetadata();
}

void specialized PlatformListViewBase.defaultUpdateViewGraphForDisplay(_:sizeThatFitsCallback:)(char a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(__n128), uint64_t a6, uint64_t a7)
{
  uint64_t v36 = a7;
  uint64_t v10 = v7;
  _s10Foundation9IndexPathVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], MEMORY[0x1E4FBB718]);
  v15.n128_f64[0] = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = (char *)&v32 - v16;
  uint64_t v18 = *a4;
  uint64_t v19 = *(void **)(v7 + *a4);
  if (v19)
  {
    uint64_t v20 = *(void *)((char *)v19 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v19) + 0x68));
    if (*(unsigned char *)(v20 + 220) == (a1 & 1))
    {
      *(unsigned char *)(v20 + 220) = (a1 & 1) == 0;
      uint64_t v21 = v19;
      UIHostingViewBase.updateRemovedState(uiView:)(0);
    }
  }
  a5(v15);
  uint64_t v22 = type metadata accessor for UIBackgroundConfiguration();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v17, 1, v22))
  {
    outlined destroy of IndexPath?((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28]);
  }
  else
  {
    unint64_t v23 = (void *)UIBackgroundConfiguration.customView.getter();
    outlined destroy of IndexPath?((uint64_t)v17, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28]);
    if (v23)
    {
      type metadata accessor for _UIHostingView<ModifiedContent<AnyView, EmptyModifier>>();
      uint64_t v24 = (void *)swift_dynamicCastClass();
      if (v24)
      {
        uint64_t v25 = *(void *)((char *)v24 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v24) + 0x68));
        if (*(unsigned char *)(v25 + 220) == (a1 & 1))
        {
          *(unsigned char *)(v25 + 220) = (a1 & 1) == 0;
          UIHostingViewBase.updateRemovedState(uiView:)(0);
        }
      }
    }
  }
  uint64_t v26 = *(void **)(v10 + v18);
  if (a1)
  {
    if (v26)
    {
      id v27 = v26;
      id v28 = objc_msgSend(v27, sel_superview);
      if (v28)
      {
        int v29 = v28;
        if (a2)
        {
          swift_retain();
          objc_msgSend(v29, sel_bounds);
          CGRectGetWidth(v41);
          _ProposedSize.init(width:height:)();
          uint64_t v30 = v37;
          int v35 = v38;
          uint64_t v34 = v39;
          int v33 = v40;
          uint64_t v31 = swift_allocObject();
          *(void *)(v31 + 16) = a2;
          *(void *)(v31 + 24) = a3;
          swift_beginAccess();
          outlined copy of AppIntentExecutor?(a2);
          type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
          swift_retain();
          ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
          swift_endAccess();
          swift_release();
          swift_release();
          uint64_t v37 = v30;
          unsigned __int8 v38 = v35;
          uint64_t v39 = v34;
          unsigned __int8 v40 = v33;
          swift_beginAccess();
          swift_retain();
          ViewGraphGeometryObservers.resetObserver(for:)();
          swift_endAccess();

          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
          swift_release();
        }
        else
        {
        }
      }
      else
      {
      }
    }
  }
  else if (v26)
  {
    swift_beginAccess();
    type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
    swift_retain();
    ViewGraphGeometryObservers.removeAll()();
    swift_endAccess();
    swift_release();
  }
}

id specialized ContextMenuBridge.menuConfigurationFromResponder(_:)(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for NavigationState.StackContent.Key?(0, &lazy cache variable for type metadata for PlatformItemList?, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4FBB718]);
  static Update.ensure<A>(_:)();
  if (v18) {
    uint64_t v4 = v18;
  }
  else {
    uint64_t v4 = MEMORY[0x1E4FBC860];
  }
  if (*(void *)(v4 + 16))
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIContextMenuConfiguration);
    uint64_t v5 = (objc_class *)type metadata accessor for ContextMenuIdentity();
    uint64_t v6 = (char *)objc_allocWithZone(v5);
    uint64_t v7 = &v6[OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_sourceIndexPath];
    uint64_t v8 = type metadata accessor for IndexPath();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
    *(void *)&v6[OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_base] = a1;
    v17.receiver = v6;
    v17.super_class = v5;
    swift_retain();
    id v9 = objc_msgSendSuper2(&v17, sel_init);
    uint64_t v11 = (*(uint64_t (**)(id, uint64_t))(class metadata base offset for ContextMenuResponder + *a1 + 16))(v9, v10);
    uint64_t v13 = v12;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v4;
    id v15 = UIContextMenuConfiguration.init(identifier:previewProvider:actionProvider:)((uint64_t)v9, v11, v13, (uint64_t)partial apply for closure #1 in ContextMenuBridge.menuConfigurationFromResponder(_:), v14);
    objc_msgSend(v15, sel_setPreferredMenuElementOrder_, qword_18836EDF8[*(char *)(v2 + direct field offset for ContextMenuBridge.menuOrder)], v17.receiver, v17.super_class);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v15;
}

id specialized UITableViewListCoordinator.init(dataSource:selection:transaction:editMode:sidebarStatus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  uint64_t v6 = v5;
  int v52 = a5;
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  uint64_t v45 = a1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v8 = (void *)MEMORY[0x1E4FBC8C8];
  id v9 = (void *)(*MEMORY[0x1E4FBC8C8] & *v6);
  uint64_t v10 = v9[10];
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](ObjectType);
  uint64_t v42 = (char *)&v39 - v12;
  uint64_t v39 = v9[12];
  uint64_t v13 = type metadata accessor for ShadowListDataSource();
  uint64_t v43 = *(void *)(v13 - 8);
  uint64_t v44 = v13;
  MEMORY[0x1F4188790](v13);
  uint64_t v40 = (uint64_t)&v39 - v14;
  uint64_t v15 = *a4;
  uint64_t v46 = a4[1];
  uint64_t v47 = v15;
  int v48 = *((unsigned __int8 *)a4 + 16);
  CGRect v41 = (char *)v6 + v9[15];
  uint64_t v16 = v41;
  uint64_t v17 = type metadata accessor for Binding();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = (char *)v6 + *(void *)((*v8 & *v6) + 0x80);
  *(void *)uint64_t v18 = 0;
  *((void *)v18 + 1) = 0;
  v18[16] = 0;
  uint64_t v19 = (void *)((char *)v6 + *(void *)((*v8 & *v6) + 0x88));
  *uint64_t v19 = 1;
  uint64_t v20 = (char *)v6 + *(void *)((*v8 & *v6) + 0x98);
  *(void *)uint64_t v20 = 0;
  *((_WORD *)v20 + 4) = 256;
  uint64_t v21 = *(void *)((*v8 & *v6) + 0xA0);
  id v22 = objc_allocWithZone((Class)type metadata accessor for ScrollViewHelper());
  unint64_t v23 = v6;
  uint64_t v24 = ScrollViewHelper.init(layoutState:phaseState:prefetchState:containerSize:axes:)(0, 1, 0, 1, 0, 1, 0, 1, 2);
  v24[OBJC_IVAR____TtC7SwiftUI16ScrollViewHelper_defaultDismissKeyboardMode] = 3;
  *(void *)((char *)v6 + v21) = v24;
  *(void *)((char *)v23 + *(void *)((*v8 & *v23) + 0xA8)) = 0;
  *((unsigned char *)v23 + *(void *)((*v8 & *v23) + 0xB0)) = 1;
  uint64_t v25 = (char *)v23 + *(void *)((*v8 & *v23) + 0xB8);
  uint64_t v26 = type metadata accessor for IndexPath();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
  double v27 = ListCoreBatchUpdates.init()((uint64_t)v23 + *(void *)((*v8 & *v23) + 0xC0));
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v11 + 56))((char *)v23 + *(void *)((*v8 & *v23) + 0xC8), 1, 1, v10, v27);
  *((unsigned char *)v23 + *(void *)((*v8 & *v23) + 0xD0)) = 0;
  *((unsigned char *)v23 + *(void *)((*v8 & *v23) + 0xD8)) = 0;
  *((unsigned char *)v23 + *(void *)((*v8 & *v23) + 0xE0)) = 0;
  *((unsigned char *)v23 + *(void *)((*v8 & *v23) + 0xE8)) = 0;
  *(void *)((char *)v23 + *(void *)((*v8 & *v23) + 0xF0)) = MEMORY[0x1E4FBC870];
  *((unsigned char *)v23 + *(void *)((*v8 & *v23) + 0xF8)) = 0;
  id v28 = (void *)((char *)v23 + *(void *)((*v8 & *v23) + 0x100));
  *id v28 = 0;
  v28[1] = 0;
  uint64_t v29 = (uint64_t)v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v42, v45, v10);
  uint64_t v30 = v40;
  ShadowListDataSource.init(_:)(v29, v10, v40);
  (*(void (**)(char *, uint64_t, uint64_t))(v43 + 32))((char *)v23 + *(void *)((*v8 & *v23) + 0x70), v30, v44);
  uint64_t v31 = v41;
  swift_beginAccess();
  uint64_t v32 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 24))(v31, v49, v32);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v33 = *v19;
  uint64_t v34 = v50;
  *uint64_t v19 = v50;
  outlined copy of Transaction?(v34);
  outlined consume of Transaction?(v33);
  uint64_t v35 = *(void *)v18;
  uint64_t v36 = *((void *)v18 + 1);
  uint64_t v37 = v46;
  *(void *)uint64_t v18 = v47;
  *((void *)v18 + 1) = v37;
  v18[16] = v48;
  outlined consume of Binding<NavigationSplitViewColumn>?(v35, v36);
  *((unsigned char *)v23 + *(void *)((*v8 & *v23) + 0x90)) = v52;

  v53.receiver = v23;
  v53.super_class = ObjectType;
  return objc_msgSendSuper2(&v53, sel_init);
}

id specialized UITableViewListCoordinator.__allocating_init(dataSource:selection:transaction:editMode:sidebarStatus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5)
{
  id v11 = objc_allocWithZone(v5);
  return specialized UITableViewListCoordinator.init(dataSource:selection:transaction:editMode:sidebarStatus:)(a1, a2, a3, a4, a5);
}

id specialized UITableViewListCoordinator.updateDragInteractionEnabled(_:isEditing:)(void *a1)
{
  uint64_t v3 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0xF0);
  swift_beginAccess();
  uint64_t v4 = *(void *)(*(void *)v3 + 16);
  id result = objc_msgSend(a1, sel_dragInteractionEnabled);
  if ((v4 != 0) != result) {
    return objc_msgSend(a1, sel_setDragInteractionEnabled_, v4 != 0);
  }
  return result;
}

void specialized UITableViewListCoordinator.updateHeaderFooter(_:section:position:in:)(uint64_t a1, char a2, void *a3)
{
  char v6 = a2 & 1;
  char v7 = *((unsigned char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x90));
  uint64_t v8 = a1 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_configuration;
  swift_beginAccess();
  *(unsigned char *)(v8 + 1) = v7;
  uint64_t v9 = OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host;
  uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host);
  if (v10)
  {
    LOWORD(v18) = 2;
    type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
    id v11 = v10;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  *(void *)(v8 + 8) = objc_msgSend(a3, sel_style, v18);
  uint64_t v12 = *(void **)(a1 + v9);
  if (v12)
  {
    type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
    id v13 = v12;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  swift_beginAccess();
  *(unsigned char *)uint64_t v8 = v6;
  HeaderFooterConfiguration.updateValues()();
  swift_endAccess();
  uint64_t v14 = *(void **)(a1 + v9);
  if (v14)
  {
    type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
    id v15 = v14;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
  *(unsigned char *)(v8 + 17) = UITableView.isPseudoInsetGrouped.getter();
  uint64_t v16 = *(void **)(a1 + v9);
  if (v16)
  {
    type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>();
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>);
    id v17 = v16;
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
  }
}

uint64_t specialized UITableViewListCoordinator.numberOfSections(in:)()
{
  uint64_t v1 = *MEMORY[0x1E4FBC8C8] & *v0;
  uint64_t v2 = type metadata accessor for ShadowSectionCollection();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v13 - v4;
  uint64_t v6 = type metadata accessor for ShadowListDataSource();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = (char *)v0 + *(void *)(v1 + 112);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, v10, v6);
  ShadowListDataSource.sectionIDs.getter((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v11 = ShadowSectionCollection.count.getter(v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return v11;
}

uint64_t specialized UITableViewListCoordinator.tableView(_:numberOfRowsInSection:)(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = type metadata accessor for ShadowRowCollection();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v16 - v10;
  uint64_t v12 = (char *)v1 + *(void *)(v3 + 112);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v12, v4);
  uint64_t WitnessTable = swift_getWitnessTable();
  ListDiffable.rowIDs(forSectionAtOffset:)(a1, v4, WitnessTable);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  uint64_t v14 = ShadowRowCollection.count.getter(v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v14;
}

uint64_t specialized UITableViewListCoordinator.tableView(_:canEditRowAt:)(uint64_t a1)
{
  uint64_t v39 = (void *)(*MEMORY[0x1E4FBC8C8] & *v1);
  uint64_t v3 = v39[10];
  uint64_t v4 = v39[12];
  uint64_t v5 = type metadata accessor for ShadowRowCollection();
  uint64_t v44 = *(void *)(v5 - 8);
  uint64_t v45 = v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v43 = (char *)&v37 - v6;
  uint64_t v7 = type metadata accessor for IndexPath();
  uint64_t v50 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v49 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ShadowSectionCollection();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v37 - v11;
  uint64_t v40 = v3;
  uint64_t v41 = v4;
  uint64_t v13 = type metadata accessor for ShadowListDataSource();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v37 - v15;
  uint64_t v48 = IndexPath.section.getter();
  id v17 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70);
  swift_beginAccess();
  uint64_t v46 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v47 = v17;
  v46(v16, v17, v13);
  ShadowListDataSource.sectionIDs.getter((uint64_t)v12);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v42 = v14 + 8;
  v18(v16, v13);
  uint64_t v19 = v18;
  uint64_t v20 = ShadowSectionCollection.count.getter(v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v21 = v49;
  uint64_t v22 = v50;
  unint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  uint64_t v38 = a1;
  uint64_t v24 = v7;
  v23(v49, a1, v7);
  if (v48 >= v20)
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v21, v7);
  }
  else
  {
    uint64_t v48 = IndexPath.row.getter();
    v46(v16, v47, v13);
    uint64_t v25 = IndexPath.section.getter();
    uint64_t WitnessTable = swift_getWitnessTable();
    double v27 = v21;
    id v28 = v43;
    ListDiffable.rowIDs(forSectionAtOffset:)(v25, v13, WitnessTable);
    v19(v16, v13);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v27, v24);
    uint64_t v29 = v45;
    uint64_t v30 = ShadowRowCollection.count.getter(v45);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v28, v29);
    if (v48 < v30)
    {
      uint64_t v31 = ((uint64_t (*)(char *, char *, uint64_t))v46)(v16, v47, v13);
      MEMORY[0x1F4188790](v31);
      uint64_t v32 = v39;
      uint64_t v33 = v39[11];
      *(&v37 - 4) = v40;
      *(&v37 - 3) = v33;
      uint64_t v34 = v32[13];
      *(&v37 - 2) = v41;
      *(&v37 - 1) = v34;
      uint64_t v35 = swift_getWitnessTable();
      ListCoreDataSource.visitContent<A>(atRow:visitor:)(v38, (uint64_t)partial apply for closure #1 in UITableViewListCoordinator.tableView(_:canEditRowAt:), (uint64_t)(&v37 - 6), v13, MEMORY[0x1E4FBB390], v35, (uint64_t)&v51);
      v19(v16, v13);
      return v51 & 1;
    }
  }
  return 0;
}

uint64_t specialized UITableViewListCoordinator.tableView(_:editingStyleForRowAt:)(uint64_t a1)
{
  uint64_t v3 = (void *)(*MEMORY[0x1E4FBC8C8] & *v1);
  uint64_t v4 = v3[10];
  uint64_t v5 = v3[12];
  uint64_t v6 = type metadata accessor for ShadowListDataSource();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v15[-v8];
  uint64_t v10 = (char *)v1 + v3[14];
  swift_beginAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v7 + 16))(v9, v10, v6);
  uint64_t v16 = v4;
  uint64_t v17 = v3[11];
  uint64_t v18 = v5;
  uint64_t v19 = v3[13];
  type metadata accessor for UITableViewCellEditingStyle(0);
  uint64_t v12 = v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  ListCoreDataSource.visitContent<A>(atRow:visitor:)(a1, (uint64_t)partial apply for closure #1 in UITableViewListCoordinator.tableView(_:editingStyleForRowAt:), (uint64_t)v15, v6, v12, WitnessTable, (uint64_t)&v20);
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  if (v21) {
    return 0;
  }
  else {
    return v20;
  }
}

uint64_t specialized UITableViewListCoordinator.tableView(_:canMoveRowAt:)(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v11 - v6;
  uint64_t v8 = (char *)v1 + *(void *)(v3 + 112);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v8, v4);
  uint64_t WitnessTable = swift_getWitnessTable();
  LOBYTE(a1) = ListCoreDataSource.canMoveCell(forRowAt:)(a1, v4, WitnessTable);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a1 & 1;
}

uint64_t specialized UITableViewListCoordinator.tableView(_:moveRowAt:to:)(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  uint64_t WitnessTable = swift_getWitnessTable();
  ListCoreDataSource.moveCell(fromRowAt:to:)(a1, a2, v4, WitnessTable);
  swift_endAccess();
  return UITableViewListCoordinator.commitUpdates()();
}

void *specialized UITableViewListCoordinator.tableView(_:willBeginEditingRowAt:)()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  *((unsigned char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8)) = 1;
  id result = UITableViewListCoordinator.resolvedEditMode.getter(&v6);
  if (v6 != 2)
  {
    uint64_t v3 = (void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x80));
    uint64_t v4 = v3[1];
    if (v4)
    {
      uint64_t v5 = *v3;
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      return (void *)outlined consume of Binding<NavigationSplitViewColumn>?(v5, v4);
    }
  }
  return result;
}

void *specialized UITableViewListCoordinator.tableView(_:didEndEditingRowAt:)()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  *((unsigned char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8)) = 0;
  id result = UITableViewListCoordinator.resolvedEditMode.getter(&v6);
  if (v6)
  {
    uint64_t v3 = (void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x80));
    uint64_t v4 = v3[1];
    if (v4)
    {
      uint64_t v5 = *v3;
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      return (void *)outlined consume of Binding<NavigationSplitViewColumn>?(v5, v4);
    }
  }
  return result;
}

uint64_t specialized UITableViewListCoordinator.updateSizeThatFitsObserver(tableView:observedParent:viewGraph:)(void *a1)
{
  objc_msgSend(a1, sel_bounds);
  CGRectGetWidth(v5);
  _ProposedSize.init(width:height:)();
  uint64_t v1 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v2 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_beginAccess();
  type metadata accessor for ViewGraphGeometryObservers<SizeThatFitsMeasurer>();
  ViewGraphGeometryObservers.addObserver(for:exclusive:callback:)();
  swift_endAccess();
  swift_release();
  swift_beginAccess();
  ViewGraphGeometryObservers.resetObserver(for:)();
  return swift_endAccess();
}

void specialized UITableViewListCoordinator.tableView(_:willDisplayHeaderView:forSection:)(void *a1, void *a2)
{
  type metadata accessor for ListTableViewHeaderFooter();
  uint64_t v4 = swift_dynamicCastClass();
  if (v4)
  {
    uint64_t v5 = v4;
    id v8 = a2;
    specialized PlatformListViewBase.defaultUpdateViewGraphForDisplay(_:sizeThatFitsCallback:)(1, 0, 0, &OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host, MEMORY[0x1E4FB1170], (uint64_t)&unk_1ED47D208, (uint64_t)thunk for @escaping @callee_guaranteed (@unowned CGSize, @unowned CGSize) -> ()partial apply);
    char v6 = *(void **)(v5 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_host);
    if (v6)
    {
      id v7 = v6;
      swift_retain();
      specialized UITableViewListCoordinator.updateSizeThatFitsObserver(tableView:observedParent:viewGraph:)(a1);

      swift_release();
    }
  }
}

unint64_t specialized UITableViewListCoordinator.tableView(_:selectionFollowsFocusForRowAt:)(void *a1)
{
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  unint64_t v3 = (unint64_t)objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

  if (v3)
  {
    type metadata accessor for ListTableViewCell();
    uint64_t v4 = swift_dynamicCastClass();
    if (v4)
    {
      uint64_t v5 = (uint64_t *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior);
      uint64_t v6 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior);
      int v18 = *(unsigned __int16 *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 5);
      int v19 = *(unsigned __int8 *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 7);
      uint64_t v20 = *(unsigned int *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 1);
      uint64_t v7 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 8);
      uint64_t v8 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 16);
      uint64_t v9 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 24);
      uint64_t v10 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 32);
      uint64_t v11 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 40);
      uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 48);
      uint64_t v13 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 56);
      char v14 = *(unsigned char *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior + 64);
      LOBYTE(v16) = v14;
      outlined consume of PlatformItemList.Item.SelectionBehavior?(*(void *)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_selectionBehavior), v5[1], v5[2], v5[3], v5[4], v5[5], v5[6], v5[7], v16, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?, (void (*)(uint64_t, uint64_t))outlined copy of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);

      if (v7 == 1)
      {
        return 0;
      }
      else
      {
        unint64_t v3 = (v6 & 1) == 0;
        LOBYTE(v17) = v14;
        outlined consume of PlatformItemList.Item.SelectionBehavior?(v6 | ((v20 | ((unint64_t)(v18 | (v19 << 16)) << 32)) << 8), v7, v8, v9, v10, v11, v12, v13, v17, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@unowned Bool) -> ())?);
      }
    }
    else
    {

      return 0;
    }
  }
  return v3;
}

double specialized UITableViewListCoordinator.tableView(_:heightForHeaderInSection:)(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v17 - v6;
  uint64_t v8 = (char *)v1 + *(void *)(v3 + 112);
  swift_beginAccess();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v9(v7, v8, v4);
  uint64_t WitnessTable = swift_getWitnessTable();
  char v11 = ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(a1, v4, WitnessTable);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  double v13 = 6.0;
  if ((v11 & 1) == 0)
  {
    uint64_t v17 = a1 - 1;
    if (a1 < 1) {
      return *MEMORY[0x1E4FB2F28];
    }
    v9(v7, v8, v4);
    swift_getWitnessTable();
    Swift::Bool v14 = ListDiffable.hasHeader(forSectionAtOffset:)(a1);
    v12(v7, v4);
    if (v14) {
      return *MEMORY[0x1E4FB2F28];
    }
    v9(v7, v8, v4);
    char v15 = ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(v17, v4, WitnessTable);
    v12(v7, v4);
    if ((v15 & 1) == 0) {
      return *MEMORY[0x1E4FB2F28];
    }
  }
  return v13;
}

double specialized UITableViewListCoordinator.tableView(_:estimatedHeightForHeaderInSection:)(Swift::Int a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v19 - v6;
  uint64_t v8 = (char *)v1 + *(void *)(v3 + 112);
  swift_beginAccess();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  v9(v7, v8, v4);
  swift_getWitnessTable();
  Swift::Bool v10 = ListDiffable.hasHeader(forSectionAtOffset:)(a1);
  char v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v7, v4);
  if (v10) {
    return 28.0;
  }
  v9(v7, v8, v4);
  uint64_t WitnessTable = swift_getWitnessTable();
  char v13 = ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(a1, v4, WitnessTable);
  v11(v7, v4);
  if (v13) {
    return 28.0;
  }
  double v14 = 0.0;
  BOOL v15 = a1 < 1;
  uint64_t v16 = a1 - 1;
  if (!v15)
  {
    v9(v7, v8, v4);
    char v17 = ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(v16, v4, WitnessTable);
    v11(v7, v4);
    if (v17) {
      return 28.0;
    }
  }
  return v14;
}

uint64_t specialized UITableViewListCoordinator.tableView(_:heightForFooterInSection:)(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = type metadata accessor for ShadowSectionCollection();
  uint64_t v21 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&WitnessTable - v5;
  uint64_t v7 = type metadata accessor for ShadowListDataSource();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  Swift::Bool v10 = (char *)&WitnessTable - v9;
  char v11 = (char *)v1 + *(void *)(v3 + 112);
  swift_beginAccess();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v12(v10, v11, v7);
  uint64_t WitnessTable = swift_getWitnessTable();
  Swift::Int v20 = a1;
  char v13 = ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(a1, v7, WitnessTable);
  double v14 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  uint64_t result = v14(v10, v7);
  if ((v13 & 1) == 0)
  {
    v12(v10, v11, v7);
    ShadowListDataSource.sectionIDs.getter((uint64_t)v6);
    v14(v10, v7);
    uint64_t v16 = ShadowSectionCollection.count.getter(v4);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v6, v4);
    if (__OFSUB__(v16, 1))
    {
      __break(1u);
    }
    else
    {
      Swift::Int v17 = v20;
      if (v16 - 1 > v20)
      {
        v12(v10, v11, v7);
        swift_getWitnessTable();
        Swift::Bool v18 = ListDiffable.hasFooter(forSectionAtOffset:)(v17);
        uint64_t result = v14(v10, v7);
        if (!v18)
        {
          v12(v10, v11, v7);
          ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(v17 + 1, v7, WitnessTable);
          return v14(v10, v7);
        }
      }
    }
  }
  return result;
}

uint64_t specialized UITableViewListCoordinator.tableView(_:estimatedHeightForFooterInSection:)(Swift::Int a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = type metadata accessor for ShadowSectionCollection();
  uint64_t v23 = *(void *)(v4 - 8);
  uint64_t v24 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v20 - v5;
  uint64_t v7 = type metadata accessor for ShadowListDataSource();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  Swift::Bool v10 = (char *)&v20 - v9;
  char v11 = (char *)v1 + *(void *)(v3 + 112);
  swift_beginAccess();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  v12(v10, v11, v7);
  swift_getWitnessTable();
  Swift::Bool v13 = ListDiffable.hasFooter(forSectionAtOffset:)(a1);
  double v14 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
  uint64_t result = v14(v10, v7);
  if (!v13)
  {
    v12(v10, v11, v7);
    uint64_t WitnessTable = swift_getWitnessTable();
    char v16 = ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(a1, v7, WitnessTable);
    uint64_t result = v14(v10, v7);
    if ((v16 & 1) == 0)
    {
      Swift::Int v21 = a1;
      v12(v10, v11, v7);
      ShadowListDataSource.sectionIDs.getter((uint64_t)v6);
      v14(v10, v7);
      uint64_t v17 = v24;
      uint64_t v18 = ShadowSectionCollection.count.getter(v24);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v6, v17);
      if (__OFSUB__(v18, 1))
      {
        __break(1u);
      }
      else
      {
        Swift::Int v19 = v21;
        if (v18 - 1 > v21)
        {
          v12(v10, v11, v7);
          ListCoreDataSource.wantsCompactSpacing(forSectionAtOffset:)(v19 + 1, v7, WitnessTable);
          return v14(v10, v7);
        }
      }
    }
  }
  return result;
}

BOOL specialized UITableViewListCoordinator.tableView(_:shouldBeginMultipleSelectionInteractionAt:)(uint64_t a1)
{
  uint64_t v23 = a1;
  uint64_t v2 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v3 = type metadata accessor for ShadowListDataSource();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v21 - v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v8 - 8);
  uint64_t v22 = v8;
  MEMORY[0x1F4188790](v8);
  Swift::Bool v10 = (char *)&v21 - v9;
  uint64_t v11 = type metadata accessor for IndexPath();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  BOOL v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)((char *)v1 + *(void *)(v2 + 128) + 8);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v15, v23, v11, v13);
  if (v16)
  {
    uint64_t v17 = (char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x70);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v6, v17, v3);
    uint64_t WitnessTable = swift_getWitnessTable();
    ListCoreDataSource.selectionValue(forRowAt:)((uint64_t)v15, v3, WitnessTable, (uint64_t)v10);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    BOOL v19 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 48))(v10, 1, AssociatedTypeWitness) != 1;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v22);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    return 0;
  }
  return v19;
}

uint64_t specialized UITableViewListCoordinator.tableView(_:didBeginMultipleSelectionInteractionAt:)()
{
  uint64_t v1 = (void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80));
  uint64_t v2 = v1[1];
  if (v2)
  {
    uint64_t v3 = *v1;
    swift_retain();
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return outlined consume of Binding<NavigationSplitViewColumn>?(v3, v2);
  }
  return result;
}

uint64_t specialized UITableViewListCoordinator.tableView(_:contextMenuConfigurationForRowAt:point:)(void *a1)
{
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  uint64_t v3 = (char *)objc_msgSend(a1, sel_cellForRowAtIndexPath_, isa);

  if (!v3) {
    return 0;
  }
  type metadata accessor for ListTableViewCell();
  uint64_t v4 = swift_dynamicCastClass();
  if (!v4) {
    goto LABEL_7;
  }
  uint64_t v5 = *(void **)(v4 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host);
  uint64_t v6 = v5;

  if (!v5) {
    return 0;
  }
  uint64_t v3 = (char *)*(id *)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x168));

  uint64_t result = MEMORY[0x18C119DF0](&v3[direct field offset for ContextMenuBridge.host]);
  if (result)
  {
    uint64_t v8 = (void *)result;
    type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
    lazy protocol witness table accessor for type IndexPath and conformance IndexPath((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
    uint64_t v9 = ViewRendererHost.responderNode.getter();

    if (v9)
    {
      MEMORY[0x1F4188790](v10);
      dispatch thunk of ResponderNode.visit(applying:)();
      swift_release();
    }
LABEL_7:

    return 0;
  }
  __break(1u);
  return result;
}

void specialized UITableViewListCoordinator.init()()
{
}

uint64_t partial apply for closure #1 in ViewGraph.swipeActions()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in ViewGraph.swipeActions()(a1);
}

uint64_t _s7SwiftUI12SwipeActionsO5ValueVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 24);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  int v2 = v1 - 1;
  if (v2 < 0) {
    int v2 = -1;
  }
  return (v2 + 1);
}

void outlined copy of SwipeActions.Configuration?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    outlined copy of Binding<NavigationSplitViewColumn>?(a5, a6);
    outlined copy of Binding<SwipeActionResultToken?>?(a8, a9, a10, a11, a12, a13);
  }
}

void outlined copy of Binding<SwipeActionResultToken?>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_retain();
    swift_retain();
    outlined copy of SwipeActionResultToken?(a3, a4, a5, a6);
  }
}

void outlined copy of SwipeActionResultToken?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != 1)
  {
    outlined copy of AppIntentExecutor?(a2);
    outlined copy of AppIntentExecutor?(a4);
  }
}

uint64_t *outlined release of SwipeActions.Value?(uint64_t *a1)
{
  outlined consume of SwipeActions.Value?(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25],
    a1[26]);
  return a1;
}

void outlined consume of SwipeActions.Value?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a4 != 1)
  {
    outlined consume of SwipeActions.Configuration?(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
    outlined consume of SwipeActions.Configuration?(a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26, a27);
  }
}

void outlined consume of Binding<SwipeActionResultToken?>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_release();
    swift_release();
    outlined consume of SwipeActionResultToken?(a3, a4, a5, a6);
  }
}

void outlined consume of SwipeActionResultToken?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != 1)
  {
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a2);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a4);
  }
}

double _s7SwiftUI12SwipeActionsO5ValueVSgWOi0_(uint64_t a1)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 1;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  return result;
}

uint64_t sub_1879FE370()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_1879FE3B0()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void *)(type metadata accessor for IndexPath() - 8);
  uint64_t v6 = (void *)v0[6];
  uint64_t v7 = v0[7];
  uint64_t v8 = (uint64_t)v0 + ((*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(v6, v7, v8, v1, v2, v3, v4);
}

uint64_t sub_1879FE518()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for IndexPath() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 48);
  unint64_t v4 = *(void **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  closure #1 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(v3, v0 + v2, v4);
}

uint64_t sub_1879FE6C0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)()
{
  return partial apply for closure #3 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)((uint64_t (*)(void, void, void, void, void))closure #3 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:));
}

uint64_t objectdestroy_3Tm_1()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in UITableViewListCoordinator.tableView(_:trailingSwipeActionsConfigurationForRowAt:)(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for IndexPath() - 8);
  return closure #1 in closure #1 in UITableViewListCoordinator.tableView(_:leadingSwipeActionsConfigurationForRowAt:)(a1, a2, *(void *)(v2 + 48), *(void **)(v2 + 56), v2 + ((*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
}

uint64_t partial apply for closure #1 in ContextMenuBridge.outermostContextMenuResponder.getter@<X0>(char *a1@<X8>)
{
  return closure #1 in ContextMenuBridge.outermostContextMenuResponder.getter(*(uint64_t **)(v1 + 16), a1);
}

uint64_t partial apply for closure #1 in ContextMenuResponderBase.items.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in ContextMenuResponderBase.items.getter(a1);
}

uint64_t sub_1879FE88C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void partial apply for closure #1 in ContextMenuBridge.menuConfigurationFromResponder(_:)(uint64_t a1)
{
  closure #1 in ContextMenuBridge.menuConfigurationFromResponder(_:)(a1, *(void *)(v1 + 16));
}

void partial apply for closure #1 in UITableViewListCoordinator.tableView(_:cellForRowAt:)(uint64_t a1)
{
  closure #1 in UITableViewListCoordinator.tableView(_:cellForRowAt:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1879FE8D4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@unowned CGSize, @unowned CGSize) -> ()(double *a1, double *a2)
{
  return thunk for @escaping @callee_guaranteed (@unowned CGSize, @unowned CGSize) -> ()(a1, a2, *(uint64_t (**)(double, double, double, double))(v2 + 16));
}

uint64_t sub_1879FE914()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

id partial apply for closure #1 in UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for IndexPath() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = *(void **)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  return closure #1 in UITableViewListCoordinator.tableView(_:willDisplay:forRowAt:)(v4, v0 + v2, v5, v6);
}

uint64_t sub_1879FEAA8()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in UITableViewListCoordinator.updateSizeThatFitsObserver(tableView:observedParent:viewGraph:)(uint64_t a1, uint64_t a2)
{
  closure #1 in UITableViewListCoordinator.updateSizeThatFitsObserver(tableView:observedParent:viewGraph:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t partial apply for closure #1 in UITableViewListCoordinator.commitUpdates()()
{
  return partial apply for closure #3 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)((uint64_t (*)(void, void, void, void, void))closure #1 in UITableViewListCoordinator.commitUpdates());
}

uint64_t sub_1879FEB08()
{
  uint64_t v1 = type metadata accessor for IndexPath();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

void partial apply for closure #1 in UITableViewListCoordinator.tableView(_:commit:forRowAt:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for IndexPath() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 48);
  unint64_t v4 = *(void **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  closure #1 in UITableViewListCoordinator.tableView(_:commit:forRowAt:)(v3, v0 + v2, v4);
}

uint64_t sub_1879FEC80()
{
  return swift_deallocObject();
}

uint64_t sub_1879FEC90()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in UITableViewListCoordinator.tableView(_:commit:forRowAt:)()
{
  UITableViewListCoordinator.enqueueLayoutInvalidationIfNeeded(_:)(*(void **)(v0 + 24));
}

BOOL partial apply for closure #1 in UITableViewListCoordinator.tableView(_:editingStyleForRowAt:)@<W0>(BOOL *a1@<X8>)
{
  return closure #1 in UITableViewListCoordinator.tableView(_:editingStyleForRowAt:)(a1);
}

uint64_t partial apply for closure #1 in UITableViewListCoordinator.tableView(_:canEditRowAt:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return closure #1 in UITableViewListCoordinator.tableView(_:canEditRowAt:)(a1, a2);
}

uint64_t sub_1879FED10()
{
  return swift_deallocObject();
}

void partial apply for closure #2 in UITableViewListCoordinator.updateUITableView(_:to:transaction:)()
{
  closure #2 in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(*(unsigned char *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1879FED68()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #1 in UITableViewListCoordinator.updateUITableView(_:to:transaction:)()
{
  closure #1 in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(*(void *)(v0 + 48), *(void **)(v0 + 56));
}

void partial apply for closure #1 in UITableViewListCoordinator.updateListContents(_:)(uint64_t a1)
{
  closure #1 in UITableViewListCoordinator.updateListContents(_:)(a1, *(void **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1879FEDC4()
{
  return swift_deallocObject();
}

uint64_t sub_1879FEDD4()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(uint64_t a1)
{
  closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(a1, *(void **)(v1 + 16), *(unsigned char *)(v1 + 24), *(unsigned char *)(v1 + 25), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

void partial apply for closure #3 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)()
{
  uint64_t v1 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_layoutIfNeeded);
  UITableViewListCoordinator.updateListContents(_:)(v1);
}

uint64_t sub_1879FEE64()
{
  return swift_deallocObject();
}

uint64_t sub_1879FEE74()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)()
{
  unint64_t v1 = (*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80);
  unint64_t v2 = (*(void *)(*(void *)(*(void *)(v0 + 16) - 8) + 64) + v1 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #2 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(*(void **)(v0 + 48), v0 + v1, *(void **)(v0 + v2), *(void *)(v0 + ((v2 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v0 + ((((v2 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1879FEFE8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)()
{
  return closure #1 in closure #1 in performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(*(unsigned char *)(v0 + 16), *(void **)(v0 + 24), *(unsigned char *)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1879FF024()
{
  return swift_deallocObject();
}

void partial apply for performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)()
{
  performUpdates #1 <A, B>() in UITableViewListCoordinator.updateUITableView(_:to:transaction:)(*(void **)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void **)(v0 + 32), *(unsigned char *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_1879FF07C()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in PlatformViewCoordinator.weakDispatchUpdate.getter(void (*a1)(void), uint64_t a2)
{
  closure #1 in PlatformViewCoordinator.weakDispatchUpdate.getter(a1, a2, v2);
}

uint64_t sub_1879FF094()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:)()
{
  return partial apply for closure #3 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(closure #1 in UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:));
}

uint64_t partial apply for closure #1 in closure #1 in UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:)()
{
  return partial apply for closure #3 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)((uint64_t (*)(void, void, void, void, void))closure #1 in closure #1 in UITableViewListCoordinator.recordInitialTransactionIfNeeded(_:));
}

uint64_t partial apply for closure #3 in closure #1 in UITableViewListCoordinator.destructiveAction(tableView:indexPath:)(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, long long *))
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v16[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)uint64_t v17 = v5;
  *(_OWORD *)&v17[16] = *(_OWORD *)(a2 + 64);
  int v18 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  long long v15 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v16 = v6;
  LODWORD(v10) = a1;
  outlined retain of _ViewInputs(a2);
  type metadata accessor for _GraphValue<IndexViewPlacementModifier>(0, &lazy cache variable for type metadata for _GraphValue<TableRowForegroundStyleModifier>);
  _GraphValue.value.getter();
  long long v7 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v12[8] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)double v13 = v7;
  *(_OWORD *)&v13[16] = *(_OWORD *)(a2 + 64);
  int v14 = *(_DWORD *)(a2 + 80);
  long long v10 = *(_OWORD *)a2;
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type TableRowForegroundStyleModifier.ChildEnvironment and conformance TableRowForegroundStyleModifier.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  *(void *)&long long v10 = v15;
  DWORD2(v10) = DWORD2(v15);
  uint64_t v11 = *(void *)v16;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)&v16[8];
  *(void *)&v12[16] = *(void *)&v16[24];
  *(void *)double v13 = *(void *)v17;
  *(_OWORD *)&char v13[8] = *(_OWORD *)&v17[8];
  *(void *)&v13[24] = *(void *)&v17[24];
  int v14 = v18;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for ViewModifier.body(content:) in conformance LazyContainerModifier()
{
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance LazyContainerModifier()
{
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  uint64_t result = static SemanticFeature.isEnabled.getter();
  if (result) {
    return PreferencesInputs.remove<A>(_:)();
  }
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInLazyContainer()
{
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.getter();
  return v1;
}

unint64_t lazy protocol witness table accessor for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input;
  if (!lazy protocol witness table cache variable for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input;
  if (!lazy protocol witness table cache variable for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableRowForegroundStyleModifier.ChildEnvironment and conformance TableRowForegroundStyleModifier.ChildEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type TableRowForegroundStyleModifier.ChildEnvironment and conformance TableRowForegroundStyleModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type TableRowForegroundStyleModifier.ChildEnvironment and conformance TableRowForegroundStyleModifier.ChildEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowForegroundStyleModifier.ChildEnvironment and conformance TableRowForegroundStyleModifier.ChildEnvironment);
  }
  return result;
}

void __swiftcall LinkButtonStyle.init()()
{
}

void LinkButtonStyle.makeBody(configuration:)()
{
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in LinkButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for LinkButtonStyle()
{
  return &type metadata for LinkButtonStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier>();
    lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, AccessibilityAttachmentModifier>);
    }
  }
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17SystemSegmentItemVG_yps5NeverOTg503_s7d4UI22f135SegmentedControl33_D74FE142C3C5A6C2CEA4987A69AEBD75LLV10makeUIView7contextAD011UISegmentedE0CAA0P20RepresentableContextVyADG_tFypAA0C11gH6VXEfU_Tf1cn_n(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v3 - 8);
  long long v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SystemSegmentItem();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = MEMORY[0x1E4FBC860];
  if (v10)
  {
    v25[1] = v1;
    uint64_t v56 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v12 = (void **)(a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
    uint64_t v26 = v9 + 64;
    uint64_t v57 = *(void *)(v7 + 72);
    while (1)
    {
      double v13 = *v12;
      if (*v12)
      {
        *((void *)&v55 + 1) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSAttributedString);
        *(void *)&long long v54 = v13;
      }
      else
      {
        long long v55 = 0u;
        long long v54 = 0u;
      }
      _s7SwiftUI17SystemSegmentItemVWOcTm_0((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
      if (!*((void *)&v55 + 1)) {
        break;
      }
      id v14 = v13;
      _s7SwiftUI17SystemSegmentItemVWOhTm_1((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
      outlined init with take of Any(&v54, &v27);
LABEL_18:
      uint64_t v11 = v56;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v11 + 16) + 1, 1);
        uint64_t v11 = v56;
      }
      unint64_t v23 = *(void *)(v11 + 16);
      unint64_t v22 = *(void *)(v11 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1);
        uint64_t v11 = v56;
      }
      *(void *)(v11 + 16) = v23 + 1;
      outlined init with take of Any(&v27, (_OWORD *)(v11 + 32 * v23 + 32));
      uint64_t v12 = (void **)((char *)v12 + v57);
      if (!--v10) {
        return v11;
      }
    }
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v26, (uint64_t)v40, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v40, (uint64_t)&v41, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v41) == 1)
    {
      id v15 = v13;
LABEL_10:
      *((void *)&v28 + 1) = MEMORY[0x1E4FBB1A0];
      *(void *)&long long v27 = 0;
      *((void *)&v27 + 1) = 0xE000000000000000;
      _s7SwiftUI17SystemSegmentItemVWOhTm_1((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
LABEL_17:
      outlined destroy of Any?((uint64_t)&v54);
      goto LABEL_18;
    }
    if (v53)
    {
      id v16 = v13;
      outlined retain of Image.Resolved?((uint64_t)v40, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
      swift_unknownObjectRetain();
      self;
      uint64_t v17 = swift_dynamicCastObjCClassUnconditional();
      _s7SwiftUI17SystemSegmentItemVWOcTm_0((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      if (v17)
      {
        outlined retain of Image.Resolved?((uint64_t)v40, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
        _s7SwiftUI17SystemSegmentItemVWOhTm_1((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        goto LABEL_16;
      }
    }
    else
    {
      id v18 = v13;
      outlined retain of Image.Resolved?((uint64_t)v40, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
      _s7SwiftUI17SystemSegmentItemVWOcTm_0((uint64_t)v9, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    }
    id v19 = v41;
    char v20 = v42;
    *(void *)&long long v27 = v41;
    BYTE8(v27) = v42;
    long long v28 = v43;
    uint64_t v29 = v44;
    char v30 = v45;
    long long v31 = v46;
    char v32 = v47;
    long long v33 = v48;
    long long v34 = v49;
    char v35 = v50;
    char v36 = v51;
    __int16 v37 = v52;
    uint64_t v21 = *((void *)v5 + 6);
    outlined copy of GraphicsImage.Contents?(v41, v42);
    uint64_t v17 = (uint64_t)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v21);
    outlined retain of Image.Resolved?((uint64_t)v40, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
    outlined consume of GraphicsImage.Contents?(v19, v20);
    _s7SwiftUI17SystemSegmentItemVWOhTm_1((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    if (!v17) {
      goto LABEL_10;
    }
LABEL_16:
    uint64_t v39 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
    *(void *)&long long v38 = v17;
    _s7SwiftUI17SystemSegmentItemVWOhTm_1((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
    outlined init with take of Any(&v38, &v27);
    goto LABEL_17;
  }
  return v11;
}

uint64_t one-time initialization function for default()
{
  type metadata accessor for StyleBox<SystemSegmentedControlStyle>();
  uint64_t result = swift_allocObject();
  static AnySegmentedControlStyle.default = result;
  return result;
}

uint64_t SystemSegmentedControlStyle.Body.body.getter@<X0>(uint64_t a1@<X8>)
{
  outlined init with copy of SystemSegmentedControlStyle.Body(v1, (uint64_t)&v13);
  uint64_t v3 = (_OWORD *)swift_allocObject();
  long long v4 = *(_OWORD *)v18;
  v3[5] = v17;
  v3[6] = v4;
  *(_OWORD *)((char *)v3 + 105) = *(_OWORD *)&v18[9];
  long long v5 = v14;
  v3[1] = v13;
  v3[2] = v5;
  long long v6 = v16;
  v3[3] = v15;
  v3[4] = v6;
  *(void *)a1 = partial apply for closure #1 in SystemSegmentedControlStyle.Body.body.getter;
  *(void *)(a1 + 8) = v3;
  swift_retain();
  *(void *)(a1 + 16) = static Alignment.center.getter();
  *(void *)(a1 + 24) = v7;
  outlined init with copy of SubviewsCollection(v1, (uint64_t)&v13);
  type metadata accessor for ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
  lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection();
  lazy protocol witness table accessor for type ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type Subview and conformance Subview();
  ForEach<>.init(_:content:)();
  _s7SwiftUI17SystemSegmentItemVWOcTm_0((uint64_t)v12, (uint64_t)&v13, (uint64_t (*)(void))type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>>);
  *(void *)&v18[16] = closure #1 in View.forcePlatformItem();
  *(void *)&unsigned char v18[24] = 0;
  _s7SwiftUI17SystemSegmentItemVWOhTm_1((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>>);
  long long v8 = *(_OWORD *)v18;
  *(_OWORD *)(a1 + 96) = v17;
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)&v18[16];
  long long v9 = v14;
  *(_OWORD *)(a1 + 32) = v13;
  *(_OWORD *)(a1 + 48) = v9;
  long long v10 = v16;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v10;
  return swift_release();
}

uint64_t closure #1 in SystemSegmentedControlStyle.Body.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SystemSegmentItem();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6 - 8);
  long long v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = MEMORY[0x1E4FBC860];
  if (v10)
  {
    uint64_t v24 = a2;
    uint64_t v25 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    uint64_t v11 = v25;
    uint64_t v12 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
    uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
    v23[1] = a1;
    uint64_t v14 = a1 + ((v13 + 32) & ~v13);
    uint64_t v15 = *(void *)(v12 + 72);
    do
    {
      _s7SwiftUI17SystemSegmentItemVWOcTm_0(v14, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      uint64_t v25 = v11;
      unint64_t v17 = *(void *)(v11 + 16);
      unint64_t v16 = *(void *)(v11 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        uint64_t v11 = v25;
      }
      *(void *)(v11 + 16) = v17 + 1;
      outlined init with take of SystemSegmentItem((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v17);
      v14 += v15;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a2 = v24;
  }
  uint64_t v18 = *(void *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 64);
  uint64_t v20 = *(void *)(a2 + 72);
  char v21 = *(unsigned char *)(a2 + 80);
  *(void *)a3 = v11;
  *(void *)(a3 + 8) = v18;
  *(void *)(a3 + 16) = v19;
  *(void *)(a3 + 24) = v20;
  *(unsigned char *)(a3 + 32) = v21;
  swift_retain();
  return swift_retain();
}

uint64_t closure #1 in closure #2 in SystemSegmentedControlStyle.Body.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&long long v7 = *(void *)(a1 + 88);
  ViewTraitCollection.value<A>(for:defaultValue:)();
  ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = (v6 & 1) == 0;
  *(_OWORD *)(v4 + 24) = v7;
  *(void *)(v4 + 40) = v8;
  *(unsigned char *)(v4 + 48) = v9;
  uint64_t result = outlined init with copy of Subview(a1, a2);
  *(void *)(a2 + 96) = partial apply for closure #1 in closure #1 in closure #2 in SystemSegmentedControlStyle.Body.body.getter;
  *(void *)(a2 + 104) = v4;
  return result;
}

uint64_t closure #1 in closure #1 in closure #2 in SystemSegmentedControlStyle.Body.body.getter(uint64_t result, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  char v6 = *(void **)result;
  uint64_t v7 = *(void *)(*(void *)result + 16);
  if (v7)
  {
    LOBYTE(v12) = a2;
    unint64_t v17 = (void *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_9:
    }
      char v6 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v6);
    unint64_t v13 = 0;
    BOOL v14 = (v12 & 1) == 0;
    do
    {
      if (v13 >= v6[2])
      {
        __break(1u);
        goto LABEL_9;
      }
      uint64_t v15 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
      unint64_t v16 = (unint64_t)v6
          + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))
          + *(void *)(v15 + 72) * v13;
      *(unsigned char *)(v16 + 56) = v14;
      uint64_t v12 = *(void *)(v16 + 480);
      *(void *)(v16 + 472) = a3;
      *(void *)(v16 + 480) = a4;
      *(void *)(v16 + 488) = a5;
      *(unsigned char *)(v16 + 496) = a6;
      swift_bridgeObjectRetain();
      uint64_t result = swift_bridgeObjectRelease();
      ++v13;
    }
    while (v7 != v13);
    void *v17 = v6;
  }
  return result;
}

uint64_t protocol witness for SegmentedControlStyle.body(configuration:) in conformance SystemSegmentedControlStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of ResolvedSegmentedControl(a1, a2);
}

id SystemSegmentedControl.updateUIView(_:context:)(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  int v6 = *(unsigned __int8 *)(a2 + 32);
  uint64_t v7 = *(void **)(a2 + 40);
  specialized SegmentedControlCoordinator.update(configuration:)(v2);
  swift_retain();
  uint64_t v8 = swift_bridgeObjectRetain();
  SegmentedControlCoordinator.apply(_:to:in:)(v8, a1);
  swift_release();
  swift_bridgeObjectRelease();
  *(_OWORD *)unint64_t v13 = *(_OWORD *)(v2 + 8);
  *(_OWORD *)&v13[9] = *(_OWORD *)(v2 + 17);
  type metadata accessor for Binding<Int?>();
  MEMORY[0x18C113DA0](&v14);
  if (v15) {
    uint64_t v9 = -1;
  }
  else {
    uint64_t v9 = v14;
  }
  id v10 = objc_msgSend(a1, sel_setSelectedSegmentIndex_, v9);
  if (v6 == 1)
  {
    MEMORY[0x1F4188790](v10);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
    id v11 = v7;
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);
    swift_release();
    swift_release();
    outlined consume of RepresentableContextValues.EnvironmentStorage(v4, v5, 1);

    uint64_t v5 = *(void *)&v13[8];
  }
  else
  {
    swift_retain();
    swift_retain();
  }
  type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SpringLoadingBehavior.Key>, (uint64_t)&type metadata for SpringLoadingBehavior.Key, (uint64_t)&protocol witness table for SpringLoadingBehavior.Key, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SpringLoadingBehavior.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return objc_msgSend(a1, sel_setSpringLoaded_, v14 == 1);
}

uint64_t type metadata accessor for SystemSegmentedControl.UISegmentedControl()
{
  return self;
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance SystemSegmentedControl(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17SystemSegmentItemVG_yps5NeverOTg503_s7d4UI22f135SegmentedControl33_D74FE142C3C5A6C2CEA4987A69AEBD75LLV10makeUIView7contextAD011UISegmentedE0CAA0P20RepresentableContextVyADG_tFypAA0C11gH6VXEfU_Tf1cn_n(*v1);
  id v3 = objc_allocWithZone((Class)type metadata accessor for SystemSegmentedControl.UISegmentedControl());
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v3, sel_initWithItems_, isa);

  objc_msgSend(v5, sel_addTarget_action_forControlEvents_, v2, sel_selectionChanged_, 4096);
  return v5;
}

id protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance SystemSegmentedControl(void *a1, uint64_t a2)
{
  return SystemSegmentedControl.updateUIView(_:context:)(a1, a2);
}

id protocol witness for UIViewRepresentable.makeCoordinator() in conformance SystemSegmentedControl@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  char v7 = *((unsigned char *)v1 + 32);
  uint64_t v8 = (objc_class *)type metadata accessor for SegmentedControlCoordinator();
  uint64_t v9 = (char *)objc_allocWithZone(v8);
  id v10 = &v9[OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_configuration];
  *(void *)id v10 = v3;
  *((void *)v10 + 1) = v4;
  *((void *)v10 + 2) = v5;
  *((void *)v10 + 3) = v6;
  unsigned char v10[32] = v7;
  *(void *)&v9[OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_itemChanges] = MEMORY[0x1E4FBC860];
  v12.receiver = v9;
  v12.super_class = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  id result = objc_msgSendSuper2(&v12, sel_init);
  *a1 = result;
  return result;
}

uint64_t protocol witness for UIViewRepresentable._overrideSizeThatFits(_:in:uiView:) in conformance SystemSegmentedControl(uint64_t *a1)
{
  uint64_t result = _ProposedSize.width.getter();
  if ((v3 & 1) == 0) {
    *a1 = result;
  }
  return result;
}

uint64_t SegmentedControlCoordinator.apply(_:to:in:)(uint64_t a1, void *a2)
{
  void (*v125)(long long *__return_ptr, uint64_t, uint64_t);
  void (*v126)(long long *__return_ptr, uint64_t, uint64_t);
  void *v127;
  void (*v128)(long long *__return_ptr, uint64_t, uint64_t);
  long long v129;
  unsigned int v130;
  void *v131;
  id v132;
  void *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  void (*v141)(long long *__return_ptr, uint64_t, uint64_t);
  void (*v142)(long long *__return_ptr, uint64_t, uint64_t);
  long long v143;
  void (*v144)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v145;
  void *v146;
  void *v147;
  void (*v148)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  void **v162;
  uint64_t v163;
  void **v164;
  void *v165;
  char v166;
  long long v167;
  uint64_t v168;
  char v169;
  long long v170;
  char v171;
  long long v172;
  long long v173;
  char v174;
  char v175;
  __int16 v176;
  long long v177;
  long long v178;
  long long v179;
  long long v180;
  uint64_t v181;
  char v182;
  long long v183;
  char v184;
  long long v185;
  long long v186;
  char v187;
  char v188;
  __int16 v189;
  uint64_t v190;
  uint64_t vars8;

  uint64_t v5 = type metadata accessor for PlatformItemList.Item();
  MEMORY[0x1F4188790](v5 - 8);
  char v7 = (char *)&v143 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  id v10 = (char *)&v143 - v9;
  uint64_t v11 = type metadata accessor for SystemSegmentItem();
  v155 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11 - 8);
  unint64_t v13 = (char *)&v143 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v162 = (void **)((char *)&v143 - v15);
  MEMORY[0x1F4188790](v16);
  uint64_t v163 = (uint64_t)&v143 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v160 = (uint64_t)&v143 - v19;
  MEMORY[0x1F4188790](v20);
  unint64_t v22 = (void **)((char *)&v143 - v21);
  v156 = *(void *)(v2
                   + OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_configuration);
  swift_bridgeObjectRetain();
  uint64_t v23 = Transaction.animation.getter();
  if (v23) {
    swift_release();
  }
  uint64_t v24 = *(void *)(a1 + 16);
  if (v24)
  {
    uint64_t v164 = v22;
    v161 = v13;
    uint64_t v157 = v10;
    v158 = v7;
    uint64_t v25 = a1 + 32;
    swift_bridgeObjectRetain();
    uint64_t v159 = v24;
    uint64_t v26 = v24;
    while (1)
    {
      --v26;
      long long v27 = (uint64_t *)(v25 + 40 * v26);
      uint64_t v29 = *v27;
      uint64_t v28 = v27[1];
      if (!*((unsigned char *)v27 + 32) && v28 != v29) {
        break;
      }
LABEL_5:
      if (!v26) {
        goto LABEL_14;
      }
    }
    while (v29 < v28)
    {
      objc_msgSend(a2, sel_removeSegmentAtIndex_animated_, --v28, v23 != 0);
      if (v29 == v28) {
        goto LABEL_5;
      }
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRelease();
    long long v31 = v164;
    v146 = v164 + 8;
    v147 = v162 + 8;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v33 = 0;
    v149 = MEMORY[0x1E4FBC840] + 8;
    id v143 = xmmword_18834BB90;
    v152 = a1;
    while (1)
    {
      v145 = v33;
      uint64_t v34 = v25 + 40 * v33;
      if (*(unsigned char *)(v34 + 32))
      {
        if (*(unsigned char *)(v34 + 32) == 1)
        {
          int64_t v36 = *(void *)v34;
          int64_t v35 = *(void *)(v34 + 8);
          if (*(void *)v34 != v35)
          {
            if (v35 < v36)
            {
              __break(1u);
            }
            else if (v36 < v35)
            {
              if ((v36 & 0x8000000000000000) == 0)
              {
                unint64_t v37 = *(void *)(v156 + 16);
                if (v36 < v37 && v35 - 1 < v37)
                {
                  unint64_t v39 = (*(unsigned __int8 *)(v155 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80);
                  v153 = *(void *)(v155 + 72);
                  uint64_t v40 = v156 + v39 + v36 * v153;
                  v151 = v35;
                  while (1)
                  {
                    _s7SwiftUI17SystemSegmentItemVWOcTm_0(v40, (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                    id v41 = *v31;
                    uint64_t v154 = v40;
                    if (v41)
                    {
                      id v42 = v41;
                      _s7SwiftUI17SystemSegmentItemVWOhTm_1((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                      id v43 = objc_msgSend(v42, sel_string);
                      if (!v43)
                      {
                        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        id v43 = (id)MEMORY[0x18C115780](v44);
                        int64_t v35 = v151;
                        swift_bridgeObjectRelease();
                      }
                      objc_msgSend(a2, sel_insertSegmentWithTitle_atIndex_animated_, v43, v36, v23 != 0);

                      uint64_t v40 = v154;
                      goto LABEL_42;
                    }
                    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v146, (uint64_t)&v177, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
                    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v177, (uint64_t)&v179, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
                    if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v179) != 1)
                    {
                      if (v190)
                      {
                        outlined retain of Image.Resolved?((uint64_t)&v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
                        swift_unknownObjectRetain();
                        self;
                        char v45 = (void *)swift_dynamicCastObjCClassUnconditional();
                        uint64_t v46 = (uint64_t)v31;
                        uint64_t v47 = (uint64_t)v157;
                        _s7SwiftUI17SystemSegmentItemVWOcTm_0(v46, (uint64_t)v157, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
                        if (v45)
                        {
                          outlined retain of Image.Resolved?((uint64_t)&v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
                          _s7SwiftUI17SystemSegmentItemVWOhTm_1(v47, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
                          long long v31 = v164;
LABEL_40:
                          _s7SwiftUI17SystemSegmentItemVWOhTm_1((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                          objc_msgSend(a2, sel_insertSegmentWithImage_atIndex_animated_, v45, v36, v23 != 0);

                          goto LABEL_41;
                        }
                      }
                      else
                      {
                        outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v177, (uint64_t)&v165, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
                        outlined retain of Image.Resolved((uint64_t)&v165);
                        uint64_t v48 = (uint64_t)v31;
                        uint64_t v47 = (uint64_t)v157;
                        _s7SwiftUI17SystemSegmentItemVWOcTm_0(v48, (uint64_t)v157, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
                      }
                      long long v49 = (void *)v179;
                      char v50 = BYTE8(v179);
                      uint64_t v165 = (void *)v179;
                      uint64_t v166 = BYTE8(v179);
                      uint64_t v167 = v180;
                      v168 = v181;
                      uint64_t v169 = v182;
                      v170 = v183;
                      uint64_t v171 = v184;
                      v172 = v185;
                      uint64_t v173 = v186;
                      uint64_t v174 = v187;
                      v175 = v188;
                      v176 = v189;
                      v150 = *(void *)(v47 + 48);
                      outlined copy of GraphicsImage.Contents?((id)v179, SBYTE8(v179));
                      char v45 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v150);
                      outlined retain of Image.Resolved?((uint64_t)&v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
                      char v51 = v50;
                      uint64_t v40 = v154;
                      outlined consume of GraphicsImage.Contents?(v49, v51);
                      _s7SwiftUI17SystemSegmentItemVWOhTm_1(v47, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
                      long long v31 = v164;
                      if (v45) {
                        goto LABEL_40;
                      }
                    }
                    _s7SwiftUI17SystemSegmentItemVWOhTm_1((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                    objc_msgSend(a2, sel_insertSegmentWithImage_atIndex_animated_, 0, v36, v23 != 0);
LABEL_41:
                    int64_t v35 = v151;
LABEL_42:
                    if (objc_msgSend(a2, sel__accessibilitySegmentItemAtIndex_, v36, (void)v143, *((void *)&v143 + 1)))
                    {
                      _bridgeAnyObjectToAny(_:)();
                      swift_unknownObjectRelease();
                    }
                    else
                    {
                      v177 = 0u;
                      v178 = 0u;
                    }
                    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v177, (uint64_t)&v179, (unint64_t *)&lazy cache variable for type metadata for Any?);
                    if (*((void *)&v180 + 1))
                    {
                      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
                      uint64_t result = swift_dynamicCast();
                      if (result)
                      {
                        __int16 v52 = v165;
                        uint64_t v53 = v40;
                        uint64_t v54 = v160;
                        _s7SwiftUI17SystemSegmentItemVWOcTm_0(v53, v160, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                        _s7SwiftUI17SystemSegmentItemVWOhTm_1(v54, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                        Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
                        uint64_t v56 = (void *)MEMORY[0x18C115780](0x64656C62616E65, 0xE700000000000000);
                        objc_msgSend(v52, sel_setValue_forKey_, isa, v56);

                        uint64_t v57 = v163;
                        _s7SwiftUI17SystemSegmentItemVWOcTm_0(v154, v163, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                        uint64_t v58 = *(void *)(v57 + 528);
                        v150 = (uint64_t)v52;
                        if (v58)
                        {
                          if (*(void *)(v58 + 16)
                            && (unint64_t v59 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40A98]), (v60 & 1) != 0))
                          {
                            outlined init with copy of TableColumnList(*(void *)(v58 + 56) + 40 * v59, (uint64_t)&v179);
                            uint64_t v61 = *((void *)&v180 + 1);
                            uint64_t v62 = v181;
                            __swift_project_boxed_opaque_existential_1(&v179, *((uint64_t *)&v180 + 1));
                            v148 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v62 + 8);
                            id v63 = (id)v150;
                            swift_bridgeObjectRetain();
                            v148(&v177, v61, v62);
                            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
                          }
                          else
                          {
                            v177 = 0u;
                            v178 = 0u;
                            id v64 = v52;
                            swift_bridgeObjectRetain();
                          }
                          type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
                          type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?);
                          if (swift_dynamicCast())
                          {
                            long long v65 = v179;
                            unsigned int v66 = v180;
                            swift_bridgeObjectRelease();
                            uint64_t v67 = v163;
                            if (*((void *)&v65 + 1))
                            {
                              if (v66 >= 2)
                              {
                                outlined consume of _ViewList_ID??(v65, *((uint64_t *)&v65 + 1));
                              }
                              else
                              {
                                uint64_t v68 = (void *)MEMORY[0x18C115780](v65, *((void *)&v65 + 1));
                                outlined consume of _ViewList_ID??(v65, *((uint64_t *)&v65 + 1));
                                objc_msgSend((id)v150, sel_setAccessibilityIdentifier_, v68);
                              }
                            }
                          }
                          else
                          {
                            uint64_t v179 = v143;
                            LOBYTE(v180) = 0;
                            swift_bridgeObjectRelease();
                            uint64_t v67 = v163;
                          }
                        }
                        else
                        {
                          id v69 = v52;
                          uint64_t v67 = v163;
                        }
                        uint64_t v70 = PlatformItemList.Item.accessibilityEffectiveText.getter();
                        id v71 = (id)v150;
                        if (v70)
                        {
                          uint64_t v72 = v70;
                          objc_msgSend((id)v150, sel_setAccessibilityAttributedLabel_, v70);
                        }
                        uint64_t v73 = v67;
                        uint64_t v74 = *(void *)(v67 + 528);
                        if (!v74) {
                          goto LABEL_64;
                        }
                        uint64_t v75 = *(void *)(v163 + 544);
                        uint64_t v76 = *(void *)(v163 + 536);
                        *(void *)&uint64_t v179 = *(void *)(v67 + 528);
                        swift_retain();
                        swift_bridgeObjectRetain();
                        swift_retain();
                        AccessibilityProperties.hints.getter();
                        *(void *)&uint64_t v179 = v76;
                        *((void *)&v179 + 1) = v75;
                        v177 = 0uLL;
                        swift_retain();
                        swift_retain();
                        v148 = (void (*)(long long *__return_ptr, uint64_t, uint64_t))static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
                        uint64_t v78 = v77;
                        swift_release();
                        swift_release();
                        swift_bridgeObjectRelease();
                        uint64_t v73 = v163;
                        id v71 = (id)v150;
                        outlined consume of PlatformItemList.Item.Accessibility?(v74);
                        if (v78)
                        {
                          uint64_t v79 = (void *)MEMORY[0x18C115780](v148, v78);
                          swift_bridgeObjectRelease();
                          objc_msgSend(v71, sel_setAccessibilityHint_, v79);
                        }
                        else
                        {
LABEL_64:
                        }
                        uint64_t result = _s7SwiftUI17SystemSegmentItemVWOhTm_1(v73, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                        int64_t v35 = v151;
                        long long v31 = v164;
                        uint64_t v40 = v154;
                      }
                    }
                    else
                    {
                      uint64_t result = outlined destroy of Any?((uint64_t)&v179);
                    }
                    ++v36;
                    v40 += v153;
                    if (v35 == v36) {
                      goto LABEL_15;
                    }
                  }
                }
                goto LABEL_135;
              }
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
              goto LABEL_136;
            }
            __break(1u);
            goto LABEL_134;
          }
        }
        else
        {
          uint64_t v81 = *(void *)(v34 + 16);
          uint64_t v80 = *(void *)(v34 + 24);
          if (v81 != v80)
          {
            if (v80 >= v81)
            {
              if (v81 < v80)
              {
                if ((v81 & 0x8000000000000000) == 0)
                {
                  unint64_t v82 = *(void *)(v156 + 16);
                  if (v81 >= v82 || v80 - 1 >= v82) {
                    goto LABEL_139;
                  }
                  unint64_t v84 = (*(unsigned __int8 *)(v155 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v155 + 80);
                  v150 = *(void *)(v155 + 72);
                  v151 = v80;
                  uint64_t result = v156 + v84 + v81 * v150;
                  while (2)
                  {
                    v153 = result;
                    uint64_t v85 = v162;
                    _s7SwiftUI17SystemSegmentItemVWOcTm_0(result, (uint64_t)v162, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                    uint64_t v86 = *v85;
                    uint64_t v154 = v81;
                    if (v86)
                    {
                      id v87 = v86;
                      _s7SwiftUI17SystemSegmentItemVWOhTm_1((uint64_t)v85, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                      id v88 = objc_msgSend(a2, sel_titleForSegmentAtIndex_, v81);
                      if (v88)
                      {
                        uint64_t v89 = v88;
                        uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        uint64_t v92 = v91;
                      }
                      else
                      {
                        uint64_t v90 = 0;
                        uint64_t v92 = 0;
                      }
                      id v94 = objc_msgSend(v87, sel_string, (void)v143, *((void *)&v143 + 1));
                      uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      uint64_t v97 = v96;

                      if (v92)
                      {
                        uint64_t v98 = (uint64_t)v161;
                        if (v90 == v95 && v92 == v97)
                        {

                          swift_bridgeObjectRelease();
                          swift_bridgeObjectRelease();
                          long long v31 = v164;
                          goto LABEL_101;
                        }
                        char v99 = _stringCompareWithSmolCheck(_:_:expecting:)();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if (v99)
                        {

                          long long v31 = v164;
                          goto LABEL_101;
                        }
                      }
                      else
                      {
                        swift_bridgeObjectRelease();
                        uint64_t v98 = (uint64_t)v161;
                      }
                      id v100 = objc_msgSend(v87, sel_string);
                      long long v31 = v164;
                      if (!v100)
                      {
                        uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                        id v100 = (id)MEMORY[0x18C115780](v101);
                        swift_bridgeObjectRelease();
                      }
                      uint64_t v102 = v154;
                      objc_msgSend(a2, sel_setTitle_forSegmentAtIndex_, v100, v154);

                      uint64_t v93 = v102;
LABEL_104:
                      if (objc_msgSend(a2, sel__accessibilitySegmentItemAtIndex_, v93, (void)v143, *((void *)&v143 + 1)))
                      {
                        _bridgeAnyObjectToAny(_:)();
                        swift_unknownObjectRelease();
                      }
                      else
                      {
                        v177 = 0u;
                        v178 = 0u;
                      }
                      outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v177, (uint64_t)&v179, (unint64_t *)&lazy cache variable for type metadata for Any?);
                      if (*((void *)&v180 + 1))
                      {
                        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
                        if (swift_dynamicCast())
                        {
                          uint64_t v113 = v98;
                          Swift::Int v114 = v165;
                          uint64_t v115 = v153;
                          uint64_t v116 = v160;
                          _s7SwiftUI17SystemSegmentItemVWOcTm_0(v153, v160, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                          _s7SwiftUI17SystemSegmentItemVWOhTm_1(v116, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                          Class v117 = Bool._bridgeToObjectiveC()().super.super.isa;
                          uint64_t v118 = (void *)MEMORY[0x18C115780](0x64656C62616E65, 0xE700000000000000);
                          objc_msgSend(v114, sel_setValue_forKey_, v117, v118);

                          _s7SwiftUI17SystemSegmentItemVWOcTm_0(v115, v113, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                          int v119 = (void *)v113;
                          uint64_t v120 = *(void *)(v113 + 528);
                          v148 = (void (*)(long long *__return_ptr, uint64_t, uint64_t))v114;
                          if (v120)
                          {
                            if (*(void *)(v120 + 16)
                              && (unint64_t v121 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40A98]),
                                  (v122 & 1) != 0))
                            {
                              outlined init with copy of TableColumnList(*(void *)(v120 + 56) + 40 * v121, (uint64_t)&v179);
                              uint64_t v123 = *((void *)&v180 + 1);
                              uint64_t v124 = v181;
                              __swift_project_boxed_opaque_existential_1(&v179, *((uint64_t *)&v180 + 1));
                              v144 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v124 + 8);
                              uint64_t v125 = v148;
                              uint64_t v126 = v148;
                              swift_bridgeObjectRetain();
                              v144(&v177, v123, v124);
                              uint64_t v127 = v161;
                              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v179);
                            }
                            else
                            {
                              v177 = 0u;
                              v178 = 0u;
                              uint64_t v125 = v148;
                              id v128 = v148;
                              swift_bridgeObjectRetain();
                              uint64_t v127 = v119;
                            }
                            type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for Any?);
                            type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityIdentifierStorage?);
                            if (swift_dynamicCast())
                            {
                              id v129 = v179;
                              id v130 = v180;
                              swift_bridgeObjectRelease();
                              if (*((void *)&v129 + 1))
                              {
                                if (v130 >= 2)
                                {
                                  outlined consume of _ViewList_ID??(v129, *((uint64_t *)&v129 + 1));
                                }
                                else
                                {
                                  uint64_t v131 = (void *)MEMORY[0x18C115780](v129, *((void *)&v129 + 1));
                                  outlined consume of _ViewList_ID??(v129, *((uint64_t *)&v129 + 1));
                                  objc_msgSend(v148, sel_setAccessibilityIdentifier_, v131);

                                  uint64_t v125 = v148;
                                }
                              }
                            }
                            else
                            {
                              uint64_t v179 = v143;
                              LOBYTE(v180) = 0;
                              swift_bridgeObjectRelease();
                            }
                          }
                          else
                          {
                            uint64_t v132 = v114;
                            uint64_t v125 = (void (*)(long long *__return_ptr, uint64_t, uint64_t))v114;
                            uint64_t v127 = v119;
                          }
                          uint64_t v133 = PlatformItemList.Item.accessibilityEffectiveText.getter();
                          if (v133)
                          {
                            v134 = v133;
                            objc_msgSend(v125, sel_setAccessibilityAttributedLabel_, v133);
                          }
                          v135 = v127[66];
                          if (!v135) {
                            goto LABEL_126;
                          }
                          v136 = v127[68];
                          v137 = v127[67];
                          *(void *)&uint64_t v179 = v127[66];
                          swift_retain();
                          swift_bridgeObjectRetain();
                          swift_retain();
                          AccessibilityProperties.hints.getter();
                          *(void *)&uint64_t v179 = v137;
                          *((void *)&v179 + 1) = v136;
                          v177 = 0uLL;
                          swift_retain();
                          swift_retain();
                          v144 = (void (*)(long long *__return_ptr, uint64_t, uint64_t))static AccessibilityCore.textsResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:separator:)();
                          uint64_t v139 = v138;
                          swift_release();
                          swift_release();
                          swift_bridgeObjectRelease();
                          outlined consume of PlatformItemList.Item.Accessibility?(v135);
                          if (v139)
                          {
                            uint64_t v140 = (void *)MEMORY[0x18C115780](v144, v139);
                            swift_bridgeObjectRelease();
                            uint64_t v141 = v148;
                            objc_msgSend(v148, sel_setAccessibilityHint_, v140);
                          }
                          else
                          {
LABEL_126:
                            v142 = v148;
                          }
                          _s7SwiftUI17SystemSegmentItemVWOhTm_1((uint64_t)v127, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                          long long v31 = v164;
                          uint64_t v93 = v154;
                        }
                      }
                      else
                      {
                        outlined destroy of Any?((uint64_t)&v179);
                      }
                      uint64_t v81 = v93 + 1;
                      uint64_t result = v153 + v150;
                      if (v151 == v81) {
                        goto LABEL_15;
                      }
                      continue;
                    }
                    break;
                  }
                  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v147, (uint64_t)&v177, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
                  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v177, (uint64_t)&v179, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
                  if (_s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v179) == 1)
                  {
LABEL_81:
                    _s7SwiftUI17SystemSegmentItemVWOhTm_1((uint64_t)v85, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                    uint64_t v93 = v154;
                    objc_msgSend(a2, sel_setImage_forSegmentAtIndex_, 0, v154);
                    goto LABEL_103;
                  }
                  if (v190)
                  {
                    outlined retain of Image.Resolved?((uint64_t)&v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
                    swift_unknownObjectRetain();
                    self;
                    uint64_t v103 = (void *)swift_dynamicCastObjCClassUnconditional();
                    uint64_t v104 = (uint64_t)v158;
                    _s7SwiftUI17SystemSegmentItemVWOcTm_0((uint64_t)v85, (uint64_t)v158, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
                    if (v103)
                    {
                      outlined retain of Image.Resolved?((uint64_t)&v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
                      _s7SwiftUI17SystemSegmentItemVWOhTm_1(v104, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
                      uint64_t v85 = v162;
LABEL_98:
                      _s7SwiftUI17SystemSegmentItemVWOhTm_1((uint64_t)v85, (uint64_t (*)(void))type metadata accessor for SystemSegmentItem);
                      id v109 = objc_msgSend(a2, sel_imageForSegmentAtIndex_, v154);
                      if (v109)
                      {
                        double v110 = v109;
                        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
                        id v111 = v103;
                        id v112 = v110;
                        LOBYTE(v110) = static NSObject.== infix(_:_:)();

                        if (v110)
                        {

                          uint64_t v98 = (uint64_t)v161;
LABEL_101:
                          uint64_t v93 = v154;
                          goto LABEL_104;
                        }
                      }
                      uint64_t v93 = v154;
                      objc_msgSend(a2, sel_setImage_forSegmentAtIndex_, v103, v154, v143);

LABEL_103:
                      uint64_t v98 = (uint64_t)v161;
                      goto LABEL_104;
                    }
                  }
                  else
                  {
                    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v177, (uint64_t)&v165, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?);
                    outlined retain of Image.Resolved((uint64_t)&v165);
                    uint64_t v104 = (uint64_t)v158;
                    _s7SwiftUI17SystemSegmentItemVWOcTm_0((uint64_t)v85, (uint64_t)v158, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
                  }
                  uint64_t v105 = (void *)v179;
                  char v106 = BYTE8(v179);
                  uint64_t v165 = (void *)v179;
                  uint64_t v166 = BYTE8(v179);
                  uint64_t v167 = v180;
                  v168 = v181;
                  uint64_t v169 = v182;
                  v170 = v183;
                  uint64_t v171 = v184;
                  v172 = v185;
                  uint64_t v173 = v186;
                  uint64_t v174 = v187;
                  v175 = v188;
                  v176 = v189;
                  uint64_t v107 = *(void *)(v104 + 48);
                  outlined copy of GraphicsImage.Contents?((id)v179, SBYTE8(v179));
                  uint64_t v108 = v107;
                  long long v31 = v164;
                  uint64_t v103 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v108);
                  outlined retain of Image.Resolved?((uint64_t)&v177, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
                  outlined consume of GraphicsImage.Contents?(v105, v106);
                  _s7SwiftUI17SystemSegmentItemVWOhTm_1(v104, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
                  uint64_t v85 = v162;
                  if (!v103) {
                    goto LABEL_81;
                  }
                  goto LABEL_98;
                }
LABEL_138:
                __break(1u);
LABEL_139:
                __break(1u);
                return result;
              }
LABEL_137:
              __break(1u);
              goto LABEL_138;
            }
LABEL_136:
            __break(1u);
            goto LABEL_137;
          }
        }
      }
LABEL_15:
      uint64_t v33 = v145 + 1;
      if (v145 + 1 == v159)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
    }
  }

  return swift_bridgeObjectRelease();
}

id SegmentedControlCoordinator.selectionChanged(_:)(void *a1)
{
  if (objc_msgSend(a1, sel_selectedSegmentIndex) != (id)-1) {
    objc_msgSend(a1, sel_selectedSegmentIndex);
  }
  uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_configuration;
  swift_retain();
  swift_retain();
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  long long v6 = *(_OWORD *)(v3 + 8);
  uint64_t v7 = *(void *)(v3 + 24);
  LOBYTE(v8) = *(unsigned char *)(v3 + 32);
  type metadata accessor for Binding<Int?>();
  MEMORY[0x18C113DA0](&v9);
  if (v10) {
    uint64_t v4 = -1;
  }
  else {
    uint64_t v4 = v9;
  }
  return objc_msgSend(a1, sel_setSelectedSegmentIndex_, v4, v6, v7, v8);
}

uint64_t SegmentedControlCoordinator.__ivar_destroyer()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

id SegmentedControlCoordinator.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SegmentedControlCoordinator();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for SegmentedControlCoordinator()
{
  return self;
}

uint64_t destroy for SystemSegmentedControl()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for SystemSegmentedControl(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SystemSegmentedControl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithTake for SystemSegmentedControl(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for SystemSegmentedControl()
{
  return &type metadata for SystemSegmentedControl;
}

uint64_t specialized SegmentedControlCoordinator.update(configuration:)(uint64_t a1)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_configuration;
  uint64_t v4 = *(void *)(v1
                 + OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_configuration);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = v1 + OBJC_IVAR____TtC7SwiftUIP33_D74FE142C3C5A6C2CEA4987A69AEBD7527SegmentedControlCoordinator_itemChanges;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized CollectionChanges.formChanges<A, B>(from:to:)(v4, v5);
  swift_endAccess();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9[0] = *(void *)(a1 + 8);
  long long v7 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)uint64_t v3 = *(_OWORD *)a1;
  *(_OWORD *)(v3 + 16) = v7;
  *(unsigned char *)(v3 + 32) = *(unsigned char *)(a1 + 32);
  swift_bridgeObjectRetain();
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v9);
  swift_retain();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return *(void *)v6;
}

uint64_t _s7SwiftUI17SystemSegmentItemVWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined consume of PlatformItemList.Item.Accessibility?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  return result;
}

void type metadata accessor for StyleBox<SystemSegmentedControlStyle>()
{
  if (!lazy cache variable for type metadata for StyleBox<SystemSegmentedControlStyle>)
  {
    lazy protocol witness table accessor for type SystemSegmentedControlStyle and conformance SystemSegmentedControlStyle();
    unint64_t v0 = type metadata accessor for StyleBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleBox<SystemSegmentedControlStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SystemSegmentedControlStyle and conformance SystemSegmentedControlStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemSegmentedControlStyle and conformance SystemSegmentedControlStyle;
  if (!lazy protocol witness table cache variable for type SystemSegmentedControlStyle and conformance SystemSegmentedControlStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemSegmentedControlStyle and conformance SystemSegmentedControlStyle);
  }
  return result;
}

void *type metadata accessor for SystemSegmentedControlStyle()
{
  return &unk_1ED450AD8;
}

unint64_t lazy protocol witness table accessor for type SystemSegmentedControlStyle.Body and conformance SystemSegmentedControlStyle.Body()
{
  unint64_t result = lazy protocol witness table cache variable for type SystemSegmentedControlStyle.Body and conformance SystemSegmentedControlStyle.Body;
  if (!lazy protocol witness table cache variable for type SystemSegmentedControlStyle.Body and conformance SystemSegmentedControlStyle.Body)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SystemSegmentedControlStyle.Body and conformance SystemSegmentedControlStyle.Body);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SystemSegmentedControlStyle.Body()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of SystemSegmentedControlStyle.Body(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_187A02860()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SystemSegmentedControlStyle.Body.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in SystemSegmentedControlStyle.Body.body.getter(a1, v2 + 16, a2);
}

void type metadata accessor for ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>)
  {
    type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<AllPlatformItemListFlags>, (uint64_t)&type metadata for AllPlatformItemListFlags, (uint64_t)&protocol witness table for AllPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>);
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<SpringLoadingBehavior.Key>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Subview and conformance Subview()
{
  unint64_t result = lazy protocol witness table cache variable for type Subview and conformance Subview;
  if (!lazy protocol witness table cache variable for type Subview and conformance Subview)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Subview and conformance Subview);
  }
  return result;
}

uint64_t _s7SwiftUI17SystemSegmentItemVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>>()
{
  if (!lazy cache variable for type metadata for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>>)
  {
    type metadata accessor for ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>();
    lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection();
    lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<Subview, PlatformItemListTransformModifier<AllPlatformItemListFlags>>>);
    }
  }
}

uint64_t sub_187A02BC0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in SystemSegmentedControlStyle.Body.body.getter(uint64_t a1)
{
  return closure #1 in closure #1 in closure #2 in SystemSegmentedControlStyle.Body.body.getter(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48));
}

uint64_t outlined init with take of SystemSegmentItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SystemSegmentItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of ResolvedSegmentedControl(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t destroy for SystemSegmentedControlStyle.Body(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for SystemSegmentedControlStyle.Body(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void **)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  uint64_t v8 = *(void *)(a2 + 96);
  char v9 = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  *(unsigned char *)(a1 + 104) = v9;
  id v10 = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SystemSegmentedControlStyle.Body(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  long long v4 = *(void **)(a2 + 40);
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  char v8 = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SystemSegmentedControlStyle.Body(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  id v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  char v7 = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = v7;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemSegmentedControlStyle.Body(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 105)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemSegmentedControlStyle.Body(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 104) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 105) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for SystemSegmentedControlStyle.Body()
{
  return &unk_1ED450A58;
}

_UNKNOWN **sub_187A03034()
{
  return &protocol witness table for PlatformItemListReader<A, B, C>;
}

uint64_t View.searchable(text:placement:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v27 = a9;
  uint64_t v25 = a3;
  uint64_t v26 = a12;
  uint64_t v24 = a11;
  type metadata accessor for SearchModifier<TextField<EmptyView>>();
  uint64_t v20 = v19;
  MEMORY[0x1F4188790](v19);
  unint64_t v22 = (char *)&v24 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v28 = *a5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of Text?(a6, a7, a8, a10);
  SearchModifier.init<>(text:isPresented:placement:prompt:)(a1, a2, v25, a4, 0, 0, 0, &v28, (uint64_t)v22, a6, a7, a8, a10);
  MEMORY[0x18C113660](v22, v24, v20, v26);
  return outlined destroy of SearchModifier<TextField<EmptyView>>((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SearchModifier<TextField<EmptyView>>);
}

uint64_t View.searchable<A>(text:placement:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v34 = a7;
  uint64_t v30 = a4;
  uint64_t v32 = a3;
  uint64_t v33 = a9;
  uint64_t v15 = *(void *)(a8 - 8);
  uint64_t v31 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchModifier<TextField<EmptyView>>();
  uint64_t v19 = v18;
  double v20 = MEMORY[0x1F4188790](v18);
  unint64_t v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v35 = *a5;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v17, a6, a8, v20);
  swift_retain();
  swift_retain();
  uint64_t v23 = v30;
  swift_bridgeObjectRetain();
  uint64_t v24 = Text.init<A>(_:)();
  SearchModifier.init<>(text:isPresented:placement:prompt:)(a1, a2, v32, v23, 0, 0, 0, &v35, (uint64_t)v22, v24, v26, v25 & 1, v27);
  MEMORY[0x18C113660](v22, v34, v19, v31);
  return outlined destroy of SearchModifier<TextField<EmptyView>>((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for SearchModifier<TextField<EmptyView>>);
}

uint64_t View.searchable<A>(text:isPresented:placement:prompt:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v46 = a9;
  int v43 = a7;
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v38 = a1;
  uint64_t v39 = a14;
  uint64_t v44 = a13;
  uint64_t v45 = a3;
  uint64_t v17 = *(void *)(a12 - 8);
  uint64_t v42 = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchModifier<TextField<EmptyView>>();
  uint64_t v21 = v20;
  double v22 = MEMORY[0x1F4188790](v20);
  uint64_t v24 = (char *)&v37 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned __int8 v47 = *a8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, a10, a12, v22);
  swift_retain();
  uint64_t v25 = a2;
  swift_retain();
  uint64_t v26 = a4;
  swift_bridgeObjectRetain();
  uint64_t v27 = Text.init<A>(_:)();
  uint64_t v29 = v28;
  uint64_t v31 = v30;
  uint64_t v33 = v32 & 1;
  uint64_t v34 = v40;
  swift_retain();
  uint64_t v35 = v41;
  swift_retain();
  SearchModifier.init<>(text:isPresented:placement:prompt:)(v38, v25, v45, v26, v34, v35, v43 & 1, &v47, (uint64_t)v24, v27, v29, v33, v31);
  MEMORY[0x18C113660](v24, v42, v21, v44);
  return outlined destroy of SearchModifier<TextField<EmptyView>>((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for SearchModifier<TextField<EmptyView>>);
}

uint64_t sub_187A03764()
{
  return swift_getWitnessTable();
}

uint64_t sub_187A03800()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigableListModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  int v7 = *(_DWORD *)(v5 + 84);
  unint64_t v8 = ~(unint64_t)(v6 & 0xF8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = *(void *)(v5 + 64);
  uint64_t v10 = ((v6 & 0xF8) + 23) & v8;
  if (v7) {
    size_t v11 = *(void *)(v5 + 64);
  }
  else {
    size_t v11 = v9 + 1;
  }
  if (v11 <= v9) {
    unint64_t v12 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v12 = v11;
  }
  if (v12 <= 8) {
    uint64_t v13 = 8;
  }
  else {
    uint64_t v13 = v12;
  }
  uint64_t v14 = v10 | 1;
  size_t v15 = (v10 | 1) + v13;
  if ((v6 & 0x1000F8) != 0
    || ((v15 + (((v6 & 0xF8) + 15) & v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v17 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v17 + v10);
  }
  else
  {
    uint64_t v19 = *a2;
    unint64_t v18 = (unint64_t)a2 + 15;
    *a1 = v19;
    uint64_t v20 = ((unint64_t)a1 + 15) & v8;
    unint64_t v21 = v18 & v8;
    double v22 = (void *)(((v18 & v8) + 15) & 0xFFFFFFFFFFFFFFF8);
    if (*v22 < 0xFFFFFFFFuLL)
    {
      memcpy((void *)(((unint64_t)a1 + 15) & v8), (const void *)(v18 & v8), v15);
    }
    else
    {
      int v35 = v7;
      uint64_t v37 = (void *)(v18 & v8);
      uint64_t v38 = ((unint64_t)a1 + 15) & v8;
      *(void *)uint64_t v20 = *(void *)v21;
      uint64_t v23 = (void *)((v20 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v23 = *v22;
      __dst = (void *)(((unint64_t)v23 + 15) & v8);
      uint64_t v24 = (unsigned __int8 *)(((unint64_t)v22 + 15) & v8);
      unsigned int v25 = v24[v13];
      swift_retain();
      swift_retain();
      if (v25 >= 3)
      {
        if (v13 <= 3) {
          uint64_t v26 = v13;
        }
        else {
          uint64_t v26 = 4;
        }
        switch(v26)
        {
          case 1:
            int v27 = *v24;
            goto LABEL_27;
          case 2:
            int v27 = *(unsigned __int16 *)v24;
            goto LABEL_27;
          case 3:
            int v27 = *(unsigned __int16 *)v24 | (v24[2] << 16);
            goto LABEL_27;
          case 4:
            int v27 = *(_DWORD *)v24;
LABEL_27:
            int v28 = (v27 | ((v25 - 3) << (8 * v13))) + 3;
            unsigned int v29 = v27 + 3;
            if (v13 >= 4) {
              unsigned int v25 = v29;
            }
            else {
              unsigned int v25 = v28;
            }
            break;
          default:
            break;
        }
      }
      if (v25 == 2)
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(__dst, v24, v4);
        *((unsigned char *)__dst + v13) = 2;
        unint64_t v21 = (unint64_t)v37;
      }
      else if (v25 == 1)
      {
        if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v24, 1, v4))
        {
          uint64_t v30 = __dst;
          memcpy(__dst, v24, v11);
        }
        else
        {
          (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(__dst, v24, v4);
          uint64_t v31 = v4;
          uint64_t v30 = __dst;
          (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(__dst, 0, 1, v31);
        }
        unint64_t v21 = (unint64_t)v37;
        *((unsigned char *)v30 + v13) = 1;
      }
      else
      {
        unint64_t v21 = (unint64_t)v37;
        void *__dst = *(void *)v24;
        *((unsigned char *)__dst + v13) = 0;
        swift_bridgeObjectRetain();
      }
      uint64_t v32 = 8;
      if (v9 > 8) {
        uint64_t v32 = v9;
      }
      if (v9 + 1 <= v9) {
        unint64_t v33 = v9;
      }
      else {
        unint64_t v33 = v9 + 1;
      }
      if (v33 <= 8) {
        unint64_t v33 = 8;
      }
      if (v35) {
        uint64_t v13 = v32;
      }
      else {
        uint64_t v13 = v33;
      }
      uint64_t v20 = v38;
    }
    *(void *)(((v20 | 7) + v14 + v13) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v21 | 7) + v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v3;
}

void *initializeWithTake for NavigableListModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v8 = v7 + 15;
  unint64_t v9 = ~v7 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = ((unint64_t)a1 + v7 + 15) & v9;
  uint64_t v11 = ((unint64_t)a2 + v7 + 15) & v9;
  unint64_t v12 = *(void *)(v5 + 64);
  uint64_t v13 = (v7 + 23) & v9;
  uint64_t v14 = (void *)((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v14 < 0xFFFFFFFFuLL)
  {
    if (v6) {
      unint64_t v25 = *(void *)(v5 + 64);
    }
    else {
      unint64_t v25 = v12 + 1;
    }
    if (v25 > v12) {
      unint64_t v12 = v25;
    }
    if (v12 <= 8) {
      uint64_t v20 = 8;
    }
    else {
      uint64_t v20 = v12;
    }
    memcpy((void *)v10, (const void *)v11, (v13 | 1) + v20);
  }
  else
  {
    BOOL v15 = v6 == 0;
    *(void *)uint64_t v10 = *(void *)v11;
    uint64_t v16 = (void *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v16 = *v14;
    uint64_t v17 = (void *)(((unint64_t)v16 + v8) & v9);
    unint64_t v18 = (unsigned __int8 *)(((unint64_t)v14 + v8) & v9);
    if (v15) {
      size_t v19 = v12 + 1;
    }
    else {
      size_t v19 = v12;
    }
    if (v19 > v12) {
      unint64_t v12 = v19;
    }
    if (v12 <= 8) {
      uint64_t v20 = 8;
    }
    else {
      uint64_t v20 = v12;
    }
    unsigned int v21 = v18[v20];
    unsigned int v22 = v21 - 3;
    if (v21 >= 3)
    {
      if (v20 <= 3) {
        uint64_t v23 = v20;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *v18;
          goto LABEL_28;
        case 2:
          int v24 = *(unsigned __int16 *)v18;
          goto LABEL_28;
        case 3:
          int v24 = *(unsigned __int16 *)v18 | (v18[2] << 16);
          goto LABEL_28;
        case 4:
          int v24 = *(_DWORD *)v18;
LABEL_28:
          int v26 = (v24 | (v22 << (8 * v20))) + 3;
          unsigned int v21 = v24 + 3;
          if (v20 < 4) {
            unsigned int v21 = v26;
          }
          break;
        default:
          break;
      }
    }
    if (v21 == 2)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 32))(v17, v18, v4);
      char v27 = 2;
LABEL_38:
      *((unsigned char *)v17 + v20) = v27;
      goto LABEL_39;
    }
    if (v21 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v18, 1, v4))
      {
        memcpy(v17, v18, v19);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 32))(v17, v18, v4);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, v4);
      }
      char v27 = 1;
      goto LABEL_38;
    }
    void *v17 = *(void *)v18;
    *((unsigned char *)v17 + v20) = 0;
  }
LABEL_39:
  *(void *)(((v10 | 7) + (v13 | 1) + v20) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v11 | 7) + (v13 | 1) + v20) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for NavigableListModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v8 = v7 + 15;
  unint64_t v9 = ~v7 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = ((unint64_t)a1 + v7 + 15) & v9;
  uint64_t v11 = ((unint64_t)a2 + v7 + 15) & v9;
  size_t v12 = *(void *)(v5 + 64);
  uint64_t v53 = (v7 + 23) & v9;
  uint64_t v13 = (void *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (unint64_t *)((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v15 = *v14;
  if (*v13 < 0xFFFFFFFFuLL)
  {
    if (v15 >= 0xFFFFFFFF)
    {
      BOOL v16 = v6 == 0;
      *(void *)uint64_t v10 = *(void *)v11;
      *uint64_t v13 = *v14;
      uint64_t v17 = (unsigned __int8 *)(((unint64_t)v13 + v8) & v9);
      unint64_t v18 = (unsigned __int8 *)(((unint64_t)v14 + v8) & v9);
      if (v16) {
        size_t v19 = v12 + 1;
      }
      else {
        size_t v19 = v12;
      }
      if (v19 <= v12) {
        unint64_t v27 = v12;
      }
      else {
        unint64_t v27 = v19;
      }
      if (v27 <= 8) {
        uint64_t v21 = 8;
      }
      else {
        uint64_t v21 = v27;
      }
      unsigned int v28 = v18[v21];
      unsigned int v29 = v28 - 3;
      if (v28 >= 3)
      {
        if (v21 <= 3) {
          uint64_t v30 = v21;
        }
        else {
          uint64_t v30 = 4;
        }
        switch(v30)
        {
          case 1:
            int v31 = *v18;
            goto LABEL_69;
          case 2:
            int v31 = *(unsigned __int16 *)v18;
            goto LABEL_69;
          case 3:
            int v31 = *(unsigned __int16 *)v18 | (v18[2] << 16);
            goto LABEL_69;
          case 4:
            int v31 = *(_DWORD *)v18;
LABEL_69:
            int v40 = (v31 | (v29 << (8 * v21))) + 3;
            unsigned int v28 = v31 + 3;
            if (v21 < 4) {
              unsigned int v28 = v40;
            }
            break;
          default:
            break;
        }
      }
      if (v28 == 2)
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(v17, v18, v4);
LABEL_114:
        char v49 = 2;
        goto LABEL_115;
      }
      if (v28 == 1)
      {
        uint64_t v41 = v4;
        if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t))(v5 + 48))(v18, 1))
        {
LABEL_104:
          (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(v17, v18, v41);
          (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v5 + 56))(v17, 0, 1, v41);
          goto LABEL_105;
        }
LABEL_74:
        memcpy(v17, v18, v19);
LABEL_105:
        char v49 = 1;
LABEL_115:
        v17[v21] = v49;
        goto LABEL_116;
      }
LABEL_106:
      *(void *)uint64_t v17 = *(void *)v18;
      v17[v21] = 0;
LABEL_116:
      uint64_t v43 = v53;
      goto LABEL_117;
    }
    if (v6) {
      unint64_t v39 = *(void *)(*(void *)(v4 - 8) + 64);
    }
    else {
      unint64_t v39 = v12 + 1;
    }
    if (v39 <= v12) {
      unint64_t v39 = *(void *)(*(void *)(v4 - 8) + 64);
    }
    if (v39 <= 8) {
      uint64_t v21 = 8;
    }
    else {
      uint64_t v21 = v39;
    }
    goto LABEL_86;
  }
  uint64_t v52 = v4;
  if (v15 >= 0xFFFFFFFF)
  {
    *(void *)uint64_t v10 = *(void *)v11;
    swift_release();
    *uint64_t v13 = *v14;
    swift_release();
    BOOL v16 = v6 == 0;
    uint64_t v17 = (unsigned __int8 *)(((unint64_t)v13 + v8) & v9);
    unint64_t v18 = (unsigned __int8 *)(((unint64_t)v14 + v8) & v9);
    if (v16) {
      size_t v19 = v12 + 1;
    }
    else {
      size_t v19 = v12;
    }
    if (v19 <= v12) {
      unint64_t v20 = v12;
    }
    else {
      unint64_t v20 = v19;
    }
    if (v20 <= 8) {
      uint64_t v21 = 8;
    }
    else {
      uint64_t v21 = v20;
    }
    if (v17 == v18) {
      goto LABEL_116;
    }
    unsigned int v22 = v17[v21];
    unsigned int v23 = v22 - 3;
    if (v22 < 3)
    {
      uint64_t v25 = v52;
LABEL_61:
      if (v22 == 2)
      {
LABEL_93:
        (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(v17, v25);
        goto LABEL_94;
      }
    }
    else
    {
      if (v21 <= 3) {
        uint64_t v24 = v21;
      }
      else {
        uint64_t v24 = 4;
      }
      uint64_t v25 = v52;
      switch(v24)
      {
        case 1:
          int v26 = *v17;
          break;
        case 2:
          int v26 = *(unsigned __int16 *)v17;
          break;
        case 3:
          int v26 = *(unsigned __int16 *)v17 | (v17[2] << 16);
          break;
        case 4:
          int v26 = *(_DWORD *)v17;
          break;
        default:
          goto LABEL_61;
      }
      int v44 = (v26 | (v23 << (8 * v21))) + 3;
      unsigned int v22 = v26 + 3;
      if (v21 < 4) {
        unsigned int v22 = v44;
      }
      if (v22 == 2) {
        goto LABEL_93;
      }
    }
    if (v22 == 1)
    {
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v17, 1, v25)) {
        (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(v17, v52);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
LABEL_94:
    unsigned int v45 = v18[v21];
    unsigned int v46 = v45 - 3;
    if (v45 < 3)
    {
      uint64_t v41 = v52;
LABEL_101:
      if (v45 == 2)
      {
LABEL_113:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(v17, v18, v41);
        goto LABEL_114;
      }
    }
    else
    {
      if (v21 <= 3) {
        uint64_t v47 = v21;
      }
      else {
        uint64_t v47 = 4;
      }
      uint64_t v41 = v52;
      switch(v47)
      {
        case 1:
          int v48 = *v18;
          break;
        case 2:
          int v48 = *(unsigned __int16 *)v18;
          break;
        case 3:
          int v48 = *(unsigned __int16 *)v18 | (v18[2] << 16);
          break;
        case 4:
          int v48 = *(_DWORD *)v18;
          break;
        default:
          goto LABEL_101;
      }
      int v50 = (v48 | (v46 << (8 * v21))) + 3;
      unsigned int v45 = v48 + 3;
      if (v21 < 4) {
        unsigned int v45 = v50;
      }
      if (v45 == 2) {
        goto LABEL_113;
      }
    }
    if (v45 == 1)
    {
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v18, 1, v41)) {
        goto LABEL_104;
      }
      goto LABEL_74;
    }
    goto LABEL_106;
  }
  swift_release();
  swift_release();
  BOOL v16 = v6 == 0;
  uint64_t v32 = (unsigned __int8 *)(((unint64_t)v13 + v8) & v9);
  if (v16) {
    unint64_t v33 = v12 + 1;
  }
  else {
    unint64_t v33 = v12;
  }
  if (v33 <= v12) {
    unint64_t v33 = v12;
  }
  if (v33 <= 8) {
    uint64_t v21 = 8;
  }
  else {
    uint64_t v21 = v33;
  }
  unsigned int v34 = v32[v21];
  unsigned int v35 = v34 - 3;
  if (v34 < 3)
  {
    uint64_t v37 = v52;
LABEL_58:
    if (v34 != 2) {
      goto LABEL_82;
    }
LABEL_84:
    (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v13 + v8) & v9, v37);
    goto LABEL_86;
  }
  if (v21 <= 3) {
    uint64_t v36 = v21;
  }
  else {
    uint64_t v36 = 4;
  }
  uint64_t v37 = v52;
  switch(v36)
  {
    case 1:
      int v38 = *v32;
      break;
    case 2:
      int v38 = *(unsigned __int16 *)v32;
      break;
    case 3:
      int v38 = *(unsigned __int16 *)v32 | (*(unsigned __int8 *)((((unint64_t)v13 + v8) & v9) + 2) << 16);
      break;
    case 4:
      int v38 = *(_DWORD *)v32;
      break;
    default:
      goto LABEL_58;
  }
  int v42 = (v38 | (v35 << (8 * v21))) + 3;
  unsigned int v34 = v38 + 3;
  if (v21 < 4) {
    unsigned int v34 = v42;
  }
  if (v34 == 2) {
    goto LABEL_84;
  }
LABEL_82:
  if (v34 != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_86;
  }
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v13 + v8) & v9, 1, v37))goto LABEL_84; {
LABEL_86:
  }
  uint64_t v43 = v53;
  memcpy((void *)v10, (const void *)v11, (v53 | 1) + v21);
LABEL_117:
  *(void *)(((v10 | 7) + (v43 | 1) + v21) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v11 | 7) + (v43 | 1) + v21) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigableListModifier(int *a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v5 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v5 = v4 + 1;
  }
  if (v5 <= v4) {
    unint64_t v5 = *(void *)(v3 + 64);
  }
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v6 = *(_DWORD *)(v3 + 80) & 0xF8;
  uint64_t v7 = v6 | 7;
  uint64_t v8 = v5 + ((v6 + 23) & ~(v6 | 7)) + 1;
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_10;
  }
  unint64_t v11 = ((v8 + ((v6 + 15) & ~v7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v12 = v11 & 0xFFFFFFF8;
  unsigned int v13 = a2 - 2147483646;
  if ((v11 & 0xFFFFFFF8) != 0) {
    unsigned int v13 = 2;
  }
  if (v13 >= 0x10000) {
    int v14 = 4;
  }
  else {
    int v14 = 2;
  }
  if (v13 < 0x100) {
    int v15 = 1;
  }
  else {
    int v15 = v14;
  }
  if (v15 == 4)
  {
    int v16 = *(int *)((char *)a1 + v11);
    if (!v16) {
      goto LABEL_10;
    }
  }
  else if (v15 == 2)
  {
    int v16 = *(unsigned __int16 *)((char *)a1 + v11);
    if (!v16) {
      goto LABEL_10;
    }
  }
  else
  {
    int v16 = *((unsigned __int8 *)a1 + v11);
    if (!v16)
    {
LABEL_10:
      unint64_t v9 = *(void *)(((((unint64_t)a1 + v7 + 8) & ~v7 | 7) + v8) & 0xFFFFFFFFFFFFFFF8);
      if (v9 >= 0xFFFFFFFF) {
        LODWORD(v9) = -1;
      }
      return (v9 + 1);
    }
  }
  int v17 = v16 - 1;
  if (v12)
  {
    int v17 = 0;
    int v18 = *a1;
  }
  else
  {
    int v18 = 0;
  }
  return (v18 | v17) ^ 0x80000000;
}

void storeEnumTagSinglePayload for NavigableListModifier(unsigned char *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v8 = v7 | 7;
  uint64_t v9 = (v7 + 15) & ~(v7 | 7);
  uint64_t v10 = (v7 + 23) & ~(v7 | 7);
  if (*(_DWORD *)(v5 + 84)) {
    unint64_t v11 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v11 = v6 + 1;
  }
  if (v11 > v6) {
    unint64_t v6 = v11;
  }
  if (v6 <= 8) {
    unint64_t v6 = 8;
  }
  uint64_t v12 = v6 + v10 + 1;
  size_t v13 = ((v12 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (a3 < 0)
  {
    unsigned int v15 = a3 - 2147483646;
    if (((v12 + v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8) {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v14 = 1;
    }
    else {
      int v14 = v16;
    }
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_10;
    }
  }
  else
  {
    int v14 = 0;
    if ((a2 & 0x80000000) == 0)
    {
LABEL_10:
      switch(v14)
      {
        case 1:
          a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v13] = 0;
          goto LABEL_30;
        case 3:
          goto LABEL_37;
        case 4:
          *(_DWORD *)&a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        default:
LABEL_30:
          if (a2) {
LABEL_31:
          }
            *(void *)((((unint64_t)&a1[v8 + 8] & ~v8 | 7) + v12) & 0xFFFFFFFFFFFFFFF8) = (a2 - 1);
          break;
      }
      return;
    }
  }
  if (v13) {
    int v17 = 1;
  }
  else {
    int v17 = a2 - 0x7FFFFFFF;
  }
  if (v13)
  {
    unsigned int v18 = a2 ^ 0x80000000;
    bzero(a1, v13);
    *(_DWORD *)a1 = v18;
  }
  switch(v14)
  {
    case 1:
      a1[v13] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v13] = v17;
      break;
    case 3:
LABEL_37:
      __break(1u);
      JUMPOUT(0x187A048D4);
    case 4:
      *(_DWORD *)&a1[v13] = v17;
      break;
    default:
      return;
  }
}

uint64_t NavigableListModifier.BoundListSelectionDetector.init(listKey:selection:isEditing:navigationAuthority:phase:transaction:selectionPopsSubsequentColumn:isExtractionPass:cycleDetector:lastResetSeed:lastSelection:wasEditing:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, uint64_t a10, int a11, uint64_t a12, char a13)
{
  int v14 = *(_DWORD *)(a10 + 8);
  char v15 = *(unsigned char *)(a10 + 12);
  *(void *)a9 = a1;
  *(_DWORD *)(a9 + 8) = a2;
  *(_DWORD *)(a9 + 12) = a3;
  *(void *)(a9 + 16) = a4;
  *(_DWORD *)(a9 + 24) = a5;
  *(_DWORD *)(a9 + 28) = a6;
  *(_DWORD *)(a9 + 32) = a7;
  *(unsigned char *)(a9 + 36) = a8;
  *(void *)(a9 + 40) = *(void *)a10;
  *(_DWORD *)(a9 + 48) = v14;
  *(unsigned char *)(a9 + 52) = v15;
  *(_DWORD *)(a9 + 56) = a11;
  uint64_t v16 = type metadata accessor for NavigableListModifier.BoundListSelectionDetector();
  uint64_t v17 = a9 + *(int *)(v16 + 72);
  type metadata accessor for SelectionManagerBox();
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v17, a12, v18);
  *(unsigned char *)(a9 + *(int *)(v16 + 76)) = a13;
  return result;
}

double protocol witness for static Rule.initialValue.getter in conformance NavigableListModifier<A>.ListKey@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 2;
  return result;
}

double protocol witness for static StatefulRule.initialValue.getter in conformance NavigableListModifier<A>.EnsureNavigationAuthority@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_18834C6B0;
  *(void *)(a1 + 16) = 0;
  return result;
}

unint64_t implicit closure #3 in NavigableListModifier.BoundListSelectionDetector.updateValue()()
{
  return 0xD00000000000002ALL;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigableListModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for NavigableListModifier<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance NavigableListModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigableListModifier<A>()
{
  return &protocol witness table for NavigableListModifier<A>;
}

uint64_t assignWithCopy for NavigableListModifier.EnsureNavigationAuthority(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  uint64_t v4 = a1 + 24;
  uint64_t v5 = (long long *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) == 1)
  {
    if (v6 == 1)
    {
      long long v7 = *v5;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_OWORD *)uint64_t v4 = v7;
    }
    else
    {
      swift_weakCopyInit();
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_retain();
      swift_retain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of NavigationAuthority(a1 + 24);
    uint64_t v8 = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v4 = *v5;
    *(void *)(v4 + 16) = v8;
  }
  else
  {
    swift_weakCopyAssign();
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    swift_retain();
    swift_release();
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    swift_retain();
    swift_release();
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t initializeWithTake for NavigableListModifier.EnsureNavigationAuthority(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  uint64_t v4 = a1 + 24;
  uint64_t v5 = a2 + 24;
  if (*(void *)(a2 + 32) == 1)
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(void *)(v4 + 16) = *(void *)(v5 + 16);
  }
  else
  {
    swift_weakTakeInit();
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for NavigableListModifier.EnsureNavigationAuthority(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  uint64_t v4 = a1 + 24;
  uint64_t v5 = a2 + 24;
  uint64_t v6 = (_OWORD *)(a1 + 32);
  uint64_t v8 = (_OWORD *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 32);
  if (*(void *)(a1 + 32) != 1)
  {
    if (v7 != 1)
    {
      swift_weakTakeAssign();
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_release();
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of NavigationAuthority(a1 + 24);
    goto LABEL_6;
  }
  if (v7 == 1)
  {
LABEL_6:
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(void *)(v4 + 16) = *(void *)(v5 + 16);
    goto LABEL_8;
  }
  swift_weakTakeInit();
  _OWORD *v6 = *v8;
LABEL_8:
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigableListModifier.EnsureNavigationAuthority(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 49)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigableListModifier.EnsureNavigationAuthority(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)double result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 49) = 0;
    }
    if (a2) {
      *(void *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigableListModifier.BoundListSelectionDetector(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  int v7 = *(_DWORD *)(v5 + 84);
  uint64_t v8 = v6 & 0xF8 | 7;
  uint64_t v9 = ~v8;
  unint64_t v10 = *(void *)(v5 + 64);
  if (v7) {
    size_t v11 = *(void *)(v5 + 64);
  }
  else {
    size_t v11 = v10 + 1;
  }
  if (v11 <= v10) {
    unint64_t v12 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v12 = v11;
  }
  if (v12 <= 8) {
    uint64_t v13 = 8;
  }
  else {
    uint64_t v13 = v12;
  }
  if ((v6 & 0x1000F8) == 0 && v13 + 1 + (((v6 & 0xF8) + 67) & (unint64_t)~v8) + 1 <= 0x18)
  {
    uint64_t v17 = *a2;
    unint64_t v16 = (unint64_t)a2 + 11;
    *a1 = v17;
    uint64_t v18 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v18 = *(_DWORD *)(v16 & 0xFFFFFFFFFFFFFFFCLL);
    size_t v19 = (_DWORD *)(((unint64_t)v18 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    unint64_t v20 = (_DWORD *)(((v16 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *size_t v19 = *v20;
    uint64_t v21 = (void *)(((unint64_t)v19 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    unsigned int v22 = (void *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v21 = *v22;
    unsigned int v23 = (_DWORD *)(((unint64_t)v21 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v24 = (_DWORD *)(((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    *unsigned int v23 = *v24;
    uint64_t v25 = (_DWORD *)(((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v26 = (_DWORD *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *int v26 = *v25;
    unint64_t v27 = ((unint64_t)v26 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v28 = ((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)unint64_t v27 = *(_DWORD *)v28;
    *(unsigned char *)(v27 + 4) = *(unsigned char *)(v28 + 4);
    unsigned int v29 = (void *)(((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v30 = (uint64_t *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v31 = *v30;
    *(void *)((char *)v29 + 5) = *(uint64_t *)((char *)v30 + 5);
    *unsigned int v29 = v31;
    uint64_t v32 = (_DWORD *)(((unint64_t)v26 + 31) & 0xFFFFFFFFFFFFFFFCLL);
    unint64_t v33 = (_DWORD *)(((unint64_t)v25 + 31) & 0xFFFFFFFFFFFFFFFCLL);
    _DWORD *v32 = *v33;
    unsigned int v34 = (void *)(((unint64_t)v32 + 11) & v9);
    unsigned int v35 = (void *)(((unint64_t)v33 + 11) & v9);
    unsigned int v36 = *((unsigned __int8 *)v35 + v13);
    if (v36 > 2)
    {
      memcpy(v34, v35, v13 + 1);
LABEL_37:
      *((unsigned char *)v34 + v13 + 1) = *((unsigned char *)v35 + v13 + 1);
      return v3;
    }
    if (v36 == 2)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v34, v35, v4);
      char v37 = 2;
    }
    else
    {
      if (v36 != 1)
      {
        *unsigned int v34 = *v35;
        *((unsigned char *)v34 + v13) = 0;
        swift_bridgeObjectRetain();
LABEL_27:
        uint64_t v38 = 8;
        if (v10 > 8) {
          uint64_t v38 = v10;
        }
        if (v10 + 1 <= v10) {
          unint64_t v39 = v10;
        }
        else {
          unint64_t v39 = v10 + 1;
        }
        if (v39 <= 8) {
          unint64_t v39 = 8;
        }
        if (v7) {
          uint64_t v13 = v38;
        }
        else {
          uint64_t v13 = v39;
        }
        goto LABEL_37;
      }
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v35, 1, v4))
      {
        memcpy(v34, v35, v11);
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v34, v35, v4);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v34, 0, 1, v4);
      }
      char v37 = 1;
    }
    *((unsigned char *)v34 + v13) = v37;
    goto LABEL_27;
  }
  uint64_t v15 = *a2;
  uint64_t *v3 = *a2;
  unint64_t v3 = (uint64_t *)(v15 + ((v8 + 16) & v9));
  swift_retain();
  return v3;
}

_DWORD *assignWithCopy for NavigableListModifier.BoundListSelectionDetector(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v5 = (_DWORD *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v4 = *v5;
  int v6 = (_DWORD *)(((unint64_t)v4 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (_DWORD *)(((unint64_t)v5 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v6 = *v7;
  uint64_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  unint64_t v10 = (_DWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v11 = (_DWORD *)(((unint64_t)v8 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *size_t v11 = *v10;
  unint64_t v12 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v13 = (_DWORD *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v12 = *v13;
  unint64_t v14 = ((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v15 = ((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v14 = *(_DWORD *)v15;
  *(unsigned char *)(v14 + 4) = *(unsigned char *)(v15 + 4);
  unint64_t v16 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v17 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v16 = *(_DWORD *)v17;
  *(_DWORD *)(v16 + 4) = *(_DWORD *)(v17 + 4);
  *(_DWORD *)(v16 + 8) = *(_DWORD *)(v17 + 8);
  *(unsigned char *)(v16 + 12) = *(unsigned char *)(v17 + 12);
  uint64_t v18 = (_DWORD *)(((unint64_t)v12 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  size_t v19 = (_DWORD *)(((unint64_t)v13 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v18 = *v19;
  uint64_t v20 = *(void *)(a3 + 16);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(_DWORD *)(v21 + 80) & 0xF8;
  unint64_t v23 = ~v22 & 0xFFFFFFFFFFFFFFF8;
  v22 += 11;
  unint64_t v24 = (unint64_t)v18 + v22;
  uint64_t v25 = (void *)(v24 & v23);
  int v26 = (unsigned __int8 *)(((unint64_t)v19 + v22) & v23);
  unint64_t v27 = *(void *)(v21 + 64);
  if (*(_DWORD *)(v21 + 84)) {
    size_t v28 = *(void *)(v21 + 64);
  }
  else {
    size_t v28 = v27 + 1;
  }
  if (v28 > v27) {
    unint64_t v27 = v28;
  }
  if (v27 <= 8) {
    uint64_t v29 = 8;
  }
  else {
    uint64_t v29 = v27;
  }
  unsigned int v30 = *((unsigned __int8 *)v25 + v29);
  unsigned int v31 = v26[v29];
  if (v30 > 2)
  {
    if (v31 <= 2)
    {
      if (v31 == 2)
      {
LABEL_43:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v21 + 16))(v25, v26, v20);
        char v32 = 2;
LABEL_44:
        *((unsigned char *)v25 + v29) = v32;
        goto LABEL_45;
      }
      goto LABEL_18;
    }
    goto LABEL_28;
  }
  if (v31 > 2)
  {
    if (v30 == 2) {
      goto LABEL_25;
    }
    if (v30 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v21 + 48))(v24 & v23, 1, v20)) {
LABEL_25:
    }
      (*(void (**)(void *, uint64_t))(v21 + 8))(v25, v20);
LABEL_28:
    memcpy(v25, v26, v29 + 1);
    goto LABEL_45;
  }
  if (v25 == (void *)v26) {
    goto LABEL_45;
  }
  if (v30 == 2)
  {
LABEL_15:
    (*(void (**)(void *, uint64_t))(v21 + 8))(v25, v20);
    goto LABEL_30;
  }
  if (v30 == 1)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v21 + 48))(v24 & v23, 1, v20)) {
      goto LABEL_30;
    }
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
LABEL_30:
  unsigned int v31 = v26[v29];
  unsigned int v33 = v31 - 3;
  if (v31 >= 3)
  {
    if (v29 <= 3) {
      uint64_t v34 = v29;
    }
    else {
      uint64_t v34 = 4;
    }
    switch(v34)
    {
      case 1:
        int v35 = *v26;
        goto LABEL_40;
      case 2:
        int v35 = *(unsigned __int16 *)v26;
        goto LABEL_40;
      case 3:
        int v35 = *(unsigned __int16 *)v26 | (v26[2] << 16);
        goto LABEL_40;
      case 4:
        int v35 = *(_DWORD *)v26;
LABEL_40:
        int v36 = (v35 | (v33 << (8 * v29))) + 3;
        unsigned int v31 = v35 + 3;
        if (v29 < 4) {
          unsigned int v31 = v36;
        }
        break;
      default:
        break;
    }
  }
  if (v31 == 2) {
    goto LABEL_43;
  }
LABEL_18:
  if (v31 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v21 + 48))(v26, 1, v20))
    {
      memcpy(v25, v26, v28);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v21 + 16))(v25, v26, v20);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v25, 0, 1, v20);
    }
    char v32 = 1;
    goto LABEL_44;
  }
  void *v25 = *(void *)v26;
  *((unsigned char *)v25 + v29) = 0;
  swift_bridgeObjectRetain();
LABEL_45:
  *((unsigned char *)v25 + v29 + 1) = v26[v29 + 1];
  return a1;
}

void *initializeWithTake for NavigableListModifier.BoundListSelectionDetector(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 11;
  *a1 = v5;
  int v6 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v8 = *v7;
  uint64_t v9 = (void *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (void *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v10 = *v9;
  size_t v11 = (_DWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v12 = (_DWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v12 = *v11;
  uint64_t v13 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v14 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v13 = *v14;
  unint64_t v15 = ((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = ((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  unint64_t v17 = (void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v18 = (uint64_t *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v19 = *v18;
  *(void *)((char *)v17 + 5) = *(uint64_t *)((char *)v18 + 5);
  void *v17 = v19;
  uint64_t v20 = (_DWORD *)(((unint64_t)v13 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v21 = (_DWORD *)(((unint64_t)v14 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v20 = *v21;
  uint64_t v22 = *(void *)(a3 + 16);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(_DWORD *)(v23 + 80) & 0xF8;
  unint64_t v25 = ~v24 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = v24 + 11;
  unint64_t v27 = (void *)(((unint64_t)v20 + v26) & v25);
  size_t v28 = (void *)(((unint64_t)v21 + v26) & v25);
  unint64_t v29 = *(void *)(v23 + 64);
  if (*(_DWORD *)(v23 + 84)) {
    size_t v30 = *(void *)(v23 + 64);
  }
  else {
    size_t v30 = v29 + 1;
  }
  if (v30 > v29) {
    unint64_t v29 = v30;
  }
  if (v29 <= 8) {
    uint64_t v31 = 8;
  }
  else {
    uint64_t v31 = v29;
  }
  unsigned int v32 = *((unsigned __int8 *)v28 + v31);
  if (v32 > 2)
  {
    uint64_t v33 = v31 + 1;
    memcpy(v27, (const void *)(((unint64_t)v21 + v26) & v25), v31 + 1);
  }
  else
  {
    if (v32 == 2)
    {
      (*(void (**)(void *, unint64_t, uint64_t))(v23 + 32))(v27, ((unint64_t)v21 + v26) & v25, v22);
    }
    else if (v32 == 1)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v23 + 48))(((unint64_t)v21 + v26) & v25, 1, v22))
      {
        memcpy(v27, v28, v30);
      }
      else
      {
        (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v27, v28, v22);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v27, 0, 1, v22);
      }
    }
    else
    {
      *unint64_t v27 = *v28;
    }
    *((unsigned char *)v27 + v31) = v32;
    uint64_t v33 = v31 + 1;
  }
  *((unsigned char *)v27 + v33) = *((unsigned char *)v28 + v33);
  return a1;
}

void *assignWithTake for NavigableListModifier.BoundListSelectionDetector(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  unint64_t v4 = (unint64_t)a2 + 11;
  *a1 = v5;
  int v6 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v6 = *(_DWORD *)(v4 & 0xFFFFFFFFFFFFFFFCLL);
  int v7 = (_DWORD *)(((unint64_t)v6 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)(((v4 & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *int v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  _DWORD *v9 = *v10;
  v9[1] = v10[1];
  size_t v11 = (_DWORD *)(((unint64_t)v10 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v12 = (_DWORD *)(((unint64_t)v9 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v12 = *v11;
  uint64_t v13 = (_DWORD *)(((unint64_t)v12 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v14 = (_DWORD *)(((unint64_t)v11 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v13 = *v14;
  unint64_t v15 = ((unint64_t)v13 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v16 = ((unint64_t)v14 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v15 = *(_DWORD *)v16;
  *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
  unint64_t v17 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v18 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v17 = *(_DWORD *)v18;
  *(_DWORD *)(v17 + 4) = *(_DWORD *)(v18 + 4);
  *(_DWORD *)(v17 + 8) = *(_DWORD *)(v18 + 8);
  *(unsigned char *)(v17 + 12) = *(unsigned char *)(v18 + 12);
  uint64_t v19 = (_DWORD *)(((unint64_t)v13 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v20 = (_DWORD *)(((unint64_t)v14 + 31) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v19 = *v20;
  uint64_t v21 = *(void *)(a3 + 16);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(_DWORD *)(v22 + 80) & 0xF8;
  unint64_t v24 = ~v23 & 0xFFFFFFFFFFFFFFF8;
  v23 += 11;
  unint64_t v25 = (unint64_t)v19 + v23;
  uint64_t v26 = (void *)(v25 & v24);
  unint64_t v27 = (unsigned __int8 *)(((unint64_t)v20 + v23) & v24);
  unint64_t v28 = *(void *)(v22 + 64);
  if (*(_DWORD *)(v22 + 84)) {
    size_t v29 = *(void *)(v22 + 64);
  }
  else {
    size_t v29 = v28 + 1;
  }
  if (v29 > v28) {
    unint64_t v28 = v29;
  }
  if (v28 <= 8) {
    uint64_t v30 = 8;
  }
  else {
    uint64_t v30 = v28;
  }
  unsigned int v31 = *((unsigned __int8 *)v26 + v30);
  unsigned int v32 = v27[v30];
  if (v31 > 2)
  {
    if (v32 <= 2)
    {
      if (v32 == 2)
      {
LABEL_43:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v22 + 32))(v26, v27, v21);
        char v33 = 2;
LABEL_44:
        *((unsigned char *)v26 + v30) = v33;
        goto LABEL_45;
      }
      goto LABEL_18;
    }
    goto LABEL_28;
  }
  if (v32 > 2)
  {
    if (v31 == 2) {
      goto LABEL_25;
    }
    if (v31 != 1)
    {
      swift_bridgeObjectRelease();
      goto LABEL_28;
    }
    if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v22 + 48))(v25 & v24, 1, v21)) {
LABEL_25:
    }
      (*(void (**)(void *, uint64_t))(v22 + 8))(v26, v21);
LABEL_28:
    memcpy(v26, v27, v30 + 1);
    goto LABEL_45;
  }
  if (v26 == (void *)v27) {
    goto LABEL_45;
  }
  if (v31 == 2)
  {
LABEL_15:
    (*(void (**)(void *, uint64_t))(v22 + 8))(v26, v21);
    goto LABEL_30;
  }
  if (v31 == 1)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v22 + 48))(v25 & v24, 1, v21)) {
      goto LABEL_30;
    }
    goto LABEL_15;
  }
  swift_bridgeObjectRelease();
LABEL_30:
  unsigned int v32 = v27[v30];
  unsigned int v34 = v32 - 3;
  if (v32 >= 3)
  {
    if (v30 <= 3) {
      uint64_t v35 = v30;
    }
    else {
      uint64_t v35 = 4;
    }
    switch(v35)
    {
      case 1:
        int v36 = *v27;
        goto LABEL_40;
      case 2:
        int v36 = *(unsigned __int16 *)v27;
        goto LABEL_40;
      case 3:
        int v36 = *(unsigned __int16 *)v27 | (v27[2] << 16);
        goto LABEL_40;
      case 4:
        int v36 = *(_DWORD *)v27;
LABEL_40:
        int v37 = (v36 | (v34 << (8 * v30))) + 3;
        unsigned int v32 = v36 + 3;
        if (v30 < 4) {
          unsigned int v32 = v37;
        }
        break;
      default:
        break;
    }
  }
  if (v32 == 2) {
    goto LABEL_43;
  }
LABEL_18:
  if (v32 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v22 + 48))(v27, 1, v21))
    {
      memcpy(v26, v27, v29);
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v22 + 32))(v26, v27, v21);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v26, 0, 1, v21);
    }
    char v33 = 1;
    goto LABEL_44;
  }
  *uint64_t v26 = *(void *)v27;
  *((unsigned char *)v26 + v30) = 0;
LABEL_45:
  *((unsigned char *)v26 + v30 + 1) = v27[v30 + 1];
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigableListModifier.BoundListSelectionDetector(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v4 = *(void *)(v3 + 64);
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v5 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v5 = v4 + 1;
  }
  if (v5 <= v4) {
    unint64_t v5 = *(void *)(v3 + 64);
  }
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF)
  {
    uint64_t v6 = v5
       + ((unsigned __int16)((*(_WORD *)(v3 + 80) & 0xF8) + 67) & (unsigned __int16)~(*(_WORD *)(v3 + 80) & 0xF8) & 0x1F8)
       + 2;
    char v7 = 8 * v6;
    if (v6 > 3) {
      goto LABEL_11;
    }
    unsigned int v9 = ((a2 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (v8) {
        goto LABEL_18;
      }
    }
    else
    {
      if (v9 <= 0xFF)
      {
        if (v9 < 2) {
          goto LABEL_26;
        }
LABEL_11:
        int v8 = *((unsigned __int8 *)a1 + v6);
        if (!*((unsigned char *)a1 + v6)) {
          goto LABEL_26;
        }
LABEL_18:
        int v10 = (v8 - 1) << v7;
        if (v6 > 3) {
          int v10 = 0;
        }
        if (v6)
        {
          if (v6 > 3) {
            LODWORD(v6) = 4;
          }
          switch((int)v6)
          {
            case 2:
              LODWORD(v6) = *a1;
              break;
            case 3:
              LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              LODWORD(v6) = *(_DWORD *)a1;
              break;
            default:
              LODWORD(v6) = *(unsigned __int8 *)a1;
              break;
          }
        }
        return (v6 | v10) + 255;
      }
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_18;
      }
    }
  }
LABEL_26:
  unsigned int v11 = *(unsigned __int8 *)((((((((((((((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                   + 7) & 0xFFFFFFFFFFFFFFFCLL)
                                 + 11) & 0xFFFFFFFFFFFFFFFCLL)
                               + 7) & 0xFFFFFFFFFFFFFFFCLL)
                             + 7) & 0xFFFFFFFFFFFFFFFCLL)
                           + 4);
  if (v11 < 2) {
    return 0;
  }
  return ((v11 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for NavigableListModifier.BoundListSelectionDetector(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  if (*(_DWORD *)(v5 + 84)) {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v7 = v6 + 1;
  }
  if (v7 <= v6) {
    unint64_t v7 = *(void *)(v5 + 64);
  }
  if (v7 <= 8) {
    unint64_t v7 = 8;
  }
  size_t v8 = v7
     + ((unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 67) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8)
     + 2;
  if (a3 < 0xFF)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 + ~(-1 << (8 * v8)) - 254) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v10 = a2 - 255;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v7
         + ((unsigned __int16)((*(_WORD *)(v5 + 80) & 0xF8) + 67) & (unsigned __int16)~(*(_WORD *)(v5 + 80) & 0xF8) & 0x1F8) != -2)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        break;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        break;
      case 3:
LABEL_39:
        __break(1u);
        JUMPOUT(0x187A05EF8);
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_28;
      case 2:
        *(_WORD *)&a1[v8] = 0;
        goto LABEL_27;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v8] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_28;
      default:
LABEL_27:
        if (a2) {
LABEL_28:
        }
          *(unsigned char *)(((((((((((((unint64_t)(a1 + 11) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
                         + 11) & 0xFFFFFFFFFFFFFFFCLL)
                       + 7) & 0xFFFFFFFFFFFFFFFCLL)
                     + 7) & 0xFFFFFFFFFFFFFFFCLL)
                   + 4) = a2 + 1;
        break;
    }
  }
}

uint64_t FocusViewGraph.update(graph:)(uint64_t result)
{
  uint64_t v2 = result;
  if (*(unsigned char *)(v1 + 24) == 1)
  {
    *(unsigned char *)(v1 + 24) = 0;
    swift_beginAccess();
    double result = MEMORY[0x18C119DF0](v2 + 200);
    if (result)
    {
      uint64_t v3 = *(void *)(v2 + 208);
      uint64_t ObjectType = swift_getObjectType();
      unint64_t v5 = type metadata accessor for FocusHost();
      (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, uint64_t, uint64_t))(v3 + 16))(&v10, v5, v5, ObjectType, v3);
      double result = swift_unknownObjectRelease();
      if (v10)
      {
        uint64_t v6 = v11;
        uint64_t v7 = swift_getObjectType();
        (*(void (**)(uint64_t, uint64_t))(v6 + 80))(v7, v6);
        double result = swift_unknownObjectRelease();
      }
    }
  }
  if (*(unsigned char *)(v1 + 26) == 1)
  {
    double result = *(unsigned int *)(v1 + 12);
    if (result != *MEMORY[0x1E4F4E7A0])
    {
      *(unsigned char *)(v1 + 26) = 0;
      uint64_t v8 = AGCreateWeakAttribute();
      char v9 = *(unsigned char *)(v1 + 25);
      uint64_t v10 = v8;
      LOBYTE(v11) = v9;
      char v12 = 1;
      lazy protocol witness table accessor for type FocusViewGraph.IsFocusSystemEnabledMutation and conformance FocusViewGraph.IsFocusSystemEnabledMutation();
      default argument 1 of GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
      return GraphHost.asyncTransaction<A>(_:id:mutation:style:mayDeferUpdate:)();
    }
  }
  return result;
}

uint64_t FocusViewGraph.IsFocusSystemEnabledMutation.combine<A>(with:)(uint64_t a1)
{
  double v2 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  if ((swift_dynamicCast() & 1) == 0) {
    return 0;
  }
  char v5 = v8;
  if ((static WeakAttribute.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  *(unsigned char *)(v1 + 8) = v5;
  return 1;
}

uint64_t protocol witness for GraphMutation.apply() in conformance FocusViewGraph.IsFocusSystemEnabledMutation()
{
  uint64_t result = AGWeakAttributeGetAttribute();
  if (result != *MEMORY[0x1E4F4E7A0]) {
    return AGGraphSetValue();
  }
  return result;
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance _GraphInputs.IsFocusSystemEnabledKey@<X0>(_DWORD *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    uint64_t result = swift_once();
  }
  *a1 = static _GraphInputs.IsFocusSystemEnabledKey.defaultValue;
  return result;
}

unint64_t specialized FocusViewGraph.init(graph:)(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v13 = (id)AGSubgraphGetCurrent();
  double v2 = (void *)GraphHost.globalSubgraph.getter();
  AGSubgraphSetCurrent();

  swift_beginAccess();
  if ((*(unsigned char *)(a1 + 361) & 0x20) != 0)
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v14 = 0u;
    uint64_t v17 = 1;
    int v18 = 0;
    type metadata accessor for External<AccessibilityFocusStore>(0, (unint64_t *)&lazy cache variable for type metadata for FocusItem?, (uint64_t)&type metadata for FocusItem, MEMORY[0x1E4FBB718]);
    type metadata accessor for External<FocusItem?>();
    lazy protocol witness table accessor for type External<FocusItem?> and conformance External<A>();
    unsigned int v12 = Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of FocusItem?((uint64_t)&v14);
    *(void *)&long long v14 = 0;
    BYTE8(v14) = 0;
    HIDWORD(v14) = 0;
    uint64_t v3 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F4E778];
    type metadata accessor for External<AccessibilityFocusStore>(0, (unint64_t *)&lazy cache variable for type metadata for External<FocusedValues>, (uint64_t)&type metadata for FocusedValues, MEMORY[0x1E4F4E778]);
    lazy protocol witness table accessor for type External<AccessibilityFocusStore> and conformance External<A>(&lazy protocol witness table cache variable for type External<FocusedValues> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<FocusedValues>, (uint64_t)&type metadata for FocusedValues);
    uint64_t v11 = Attribute.init<A>(body:value:flags:update:)();
    uint64_t v4 = MEMORY[0x1E4FBC860];
    unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    LODWORD(v14) = 0;
    *((void *)&v14 + 1) = v4;
    *(void *)&long long v15 = v5;
    type metadata accessor for External<AccessibilityFocusStore>(0, &lazy cache variable for type metadata for External<FocusStore>, (uint64_t)&type metadata for FocusStore, v3);
    lazy protocol witness table accessor for type External<AccessibilityFocusStore> and conformance External<A>(&lazy protocol witness table cache variable for type External<FocusStore> and conformance External<A>, &lazy cache variable for type metadata for External<FocusStore>, (uint64_t)&type metadata for FocusStore);
    Attribute.init<A>(body:value:flags:update:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static CoreTesting.isRunning.getter();
    LOBYTE(v14) = 0;
    uint64_t v6 = MEMORY[0x1E4FBB390];
    type metadata accessor for External<AccessibilityFocusStore>(0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], v3);
    lazy protocol witness table accessor for type External<AccessibilityFocusStore> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<Bool> and conformance External<A>, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, v6);
    Attribute.init<A>(body:value:flags:update:)();
  }
  else
  {
    uint64_t v11 = *MEMORY[0x1E4F4E7A0];
    unsigned int v12 = *MEMORY[0x1E4F4E7A0];
  }
  uint64_t v7 = MEMORY[0x1E4FBC860];
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  *(void *)&long long v14 = 0;
  *((void *)&v14 + 1) = v8;
  *(void *)&long long v15 = MEMORY[0x1E4FBC868];
  char v9 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F4E778];
  type metadata accessor for External<AccessibilityFocusStore>(0, &lazy cache variable for type metadata for External<AccessibilityFocusStore>, (uint64_t)&type metadata for AccessibilityFocusStore, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<AccessibilityFocusStore> and conformance External<A>((unint64_t *)&lazy protocol witness table cache variable for type External<AccessibilityFocusStore> and conformance External<A>, &lazy cache variable for type metadata for External<AccessibilityFocusStore>, (uint64_t)&type metadata for AccessibilityFocusStore);
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Dictionary.init(dictionaryLiteral:)(v7);
  swift_bridgeObjectRelease();
  *(void *)&long long v14 = specialized Dictionary.init(dictionaryLiteral:)(v7);
  type metadata accessor for External<AccessibilityFocusStore>(0, &lazy cache variable for type metadata for External<AccessibilityFocus>, (uint64_t)&type metadata for AccessibilityFocus, v9);
  lazy protocol witness table accessor for type External<AccessibilityFocusStore> and conformance External<A>(&lazy protocol witness table cache variable for type External<AccessibilityFocus> and conformance External<A>, &lazy cache variable for type metadata for External<AccessibilityFocus>, (uint64_t)&type metadata for AccessibilityFocus);
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  AGSubgraphSetCurrent();

  swift_release();
  return v12 | (unint64_t)(v11 << 32);
}

ValueMetadata *type metadata accessor for _GraphInputs.IsFocusSystemEnabledKey()
{
  return &type metadata for _GraphInputs.IsFocusSystemEnabledKey;
}

uint64_t getEnumTagSinglePayload for FocusViewGraph(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 27)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for FocusViewGraph(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 26) = 0;
    *(_WORD *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 27) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 27) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FocusViewGraph()
{
  return &type metadata for FocusViewGraph;
}

unint64_t lazy protocol witness table accessor for type FocusViewGraph.IsFocusSystemEnabledMutation and conformance FocusViewGraph.IsFocusSystemEnabledMutation()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusViewGraph.IsFocusSystemEnabledMutation and conformance FocusViewGraph.IsFocusSystemEnabledMutation;
  if (!lazy protocol witness table cache variable for type FocusViewGraph.IsFocusSystemEnabledMutation and conformance FocusViewGraph.IsFocusSystemEnabledMutation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusViewGraph.IsFocusSystemEnabledMutation and conformance FocusViewGraph.IsFocusSystemEnabledMutation);
  }
  return result;
}

unint64_t type metadata accessor for FocusHost()
{
  unint64_t result = lazy cache variable for type metadata for FocusHost;
  if (!lazy cache variable for type metadata for FocusHost)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for FocusHost);
  }
  return result;
}

void *type metadata accessor for FocusViewGraph.IsFocusSystemEnabledMutation()
{
  return &unk_1ED416C78;
}

uint64_t type metadata completion function for PickerCurrentValueLabel()
{
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PickerCurrentValueLabel(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v3 = a1;
  uint64_t v6 = a3 + 16;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v6 + 8);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(_DWORD *)(v7 + 80);
  uint64_t v9 = v8 | 7;
  uint64_t v10 = ((v8 + 16) & ~v8) + *(void *)(v7 + 64);
  uint64_t v11 = *(void *)(v4 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v10 + v12;
  if ((v8 | 7 | v12) != 7
    || ((*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || ((v10 + v12 + (((v8 | 7) + 1) & ~(v8 | 7))) & (unint64_t)~v12) + *(void *)(*(void *)(v4 - 8) + 64) > 0x18)
  {
    uint64_t v16 = *a2;
    uint64_t *v3 = *a2;
    unsigned int v3 = (uint64_t *)(v16 + (((v8 | 7 | v12) + 16) & ~(v8 | 7 | v12)));
    swift_retain();
  }
  else
  {
    uint64_t v17 = ~v8;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    int v18 = (void *)(((unint64_t)a1 + v9 + 1) & ~v9);
    uint64_t v19 = (void *)(((unint64_t)a2 + v9 + 1) & ~v9);
    *int v18 = *v19;
    uint64_t v20 = ~v12;
    uint64_t v21 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v21 = *v22;
    uint64_t v23 = v8 + 8;
    unint64_t v24 = ((unint64_t)v22 + v23) & v17;
    unint64_t v25 = *(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16);
    unint64_t v27 = ((unint64_t)v21 + v23) & v17;
    uint64_t v28 = v4;
    swift_retain();
    swift_retain();
    v25(v27, v24, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v11 + 16))(((unint64_t)v18 + v13) & v20, ((unint64_t)v19 + v13) & v20, v28);
  }
  return v3;
}

uint64_t destroy for PickerCurrentValueLabel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (a1 + (v5 | 7) + 1) & ~(v5 | 7);
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))((v5 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v5, v3);
  uint64_t v7 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v8 = *(uint64_t (**)(unint64_t))(v7 + 8);
  unint64_t v9 = (v6 + ((v5 + 16) & ~v5) + *(void *)(v4 + 64) + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);

  return v8(v9);
}

unsigned char *initializeWithCopy for PickerCurrentValueLabel(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v6 = *(void *)(v5 - 8) + 16;
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = (v7 | 7) + 1;
  unint64_t v9 = (void *)((unint64_t)&a1[v8] & ~(v7 | 7));
  uint64_t v10 = (void *)((unint64_t)&a2[v8] & ~(v7 | 7));
  void *v9 = *v10;
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  uint64_t v13 = ((unint64_t)v11 + v7 + 8) & ~v7;
  uint64_t v14 = ((unint64_t)v12 + v7 + 8) & ~v7;
  swift_retain();
  swift_retain();
  v19(v13, v14, v5);
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = *(void *)(v6 + 48) + v16 + ((v7 + 16) & ~v7);
  (*(void (**)(unint64_t, unint64_t))(v15 + 16))(((unint64_t)v9 + v17) & ~v16, ((unint64_t)v10 + v17) & ~v16);
  return a1;
}

unsigned char *assignWithCopy for PickerCurrentValueLabel(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 | 7) + 1;
  unint64_t v9 = (void *)((unint64_t)&a1[v8] & ~(v7 | 7));
  uint64_t v10 = (void *)((unint64_t)&a2[v8] & ~(v7 | 7));
  void *v9 = *v10;
  swift_retain();
  swift_release();
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  swift_retain();
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v11 + v7 + 8) & ~v7, ((unint64_t)v12 + v7 + 8) & ~v7, v5);
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = *(void *)(v6 + 64) + ((v7 + 16) & ~v7) + v14;
  (*(void (**)(unint64_t, unint64_t))(v13 + 24))(((unint64_t)v9 + v15) & ~v14, ((unint64_t)v10 + v15) & ~v14);
  return a1;
}

unsigned char *initializeWithTake for PickerCurrentValueLabel(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void (**)(unint64_t, unint64_t))(v5 + 32);
  uint64_t v7 = v5 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 | 7) + 1;
  uint64_t v10 = (void *)((unint64_t)&a1[v9] & ~(v8 | 7));
  uint64_t v11 = (void *)((unint64_t)&a2[v9] & ~(v8 | 7));
  *uint64_t v10 = *v11;
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v12 = *v13;
  v6(((unint64_t)v12 + v8 + 8) & ~v8, ((unint64_t)v13 + v8 + 8) & ~v8);
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = *(void *)(v7 + 32) + v15 + ((v8 + 16) & ~v8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 32))(((unint64_t)v10 + v16) & ~v15, ((unint64_t)v11 + v16) & ~v15);
  return a1;
}

unsigned char *assignWithTake for PickerCurrentValueLabel(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 | 7) + 1;
  uint64_t v9 = (void *)((unint64_t)&a1[v8] & ~(v7 | 7));
  uint64_t v10 = (void *)((unint64_t)&a2[v8] & ~(v7 | 7));
  void *v9 = *v10;
  swift_release();
  uint64_t v11 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v11 = *v12;
  swift_release();
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v11 + v7 + 8) & ~v7, ((unint64_t)v12 + v7 + 8) & ~v7, v5);
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = *(void *)(v6 + 64) + ((v7 + 16) & ~v7) + v14;
  (*(void (**)(unint64_t, unint64_t))(v13 + 40))(((unint64_t)v9 + v15) & ~v14, ((unint64_t)v10 + v15) & ~v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for PickerCurrentValueLabel(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v6 = 0x7FFFFFFF;
  }
  else {
    unsigned int v6 = *(_DWORD *)(v4 + 84);
  }
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  if (v9 <= v6) {
    unsigned int v12 = v6;
  }
  else {
    unsigned int v12 = *(_DWORD *)(v8 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = v10 | 7;
  uint64_t v14 = ((v10 + 16) & ~v10) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + v11;
  int v15 = a2 - v12;
  if (a2 <= v12) {
    goto LABEL_28;
  }
  uint64_t v16 = ((v14 + ((v13 + 1) & ~v13)) & ~v11) + *(void *)(*(void *)(v7 - 8) + 64);
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v20 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (!v18) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v20 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (!*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v20 < 2)
    {
LABEL_28:
      uint64_t v24 = ((unint64_t)a1 + v13 + 1) & ~v13;
      if (v6 < v9) {
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))((v14 + v24) & ~v11, v9, v7);
      }
      unint64_t v25 = (unint64_t *)((v24 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v25 + v10 + 8) & ~v10);
      }
      unint64_t v26 = *v25;
      if (v26 >= 0xFFFFFFFF) {
        LODWORD(v26) = -1;
      }
      return (v26 + 1);
    }
  }
  int v18 = *((unsigned __int8 *)a1 + v16);
  if (!*((unsigned char *)a1 + v16)) {
    goto LABEL_28;
  }
LABEL_18:
  int v21 = (v18 - 1) << v17;
  if (v16 > 3) {
    int v21 = 0;
  }
  if (v16)
  {
    if (v16 <= 3) {
      int v22 = v16;
    }
    else {
      int v22 = 4;
    }
    switch(v22)
    {
      case 2:
        int v23 = *a1;
        break;
      case 3:
        int v23 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v23 = *(_DWORD *)a1;
        break;
      default:
        int v23 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v23 = 0;
  }
  return v12 + (v23 | v21) + 1;
}

void storeEnumTagSinglePayload for PickerCurrentValueLabel(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v11 = *(void *)(v8 - 8);
  unsigned int v12 = *(_DWORD *)(v9 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = *(void *)(v9 + 64);
  if (v12 <= v10) {
    unsigned int v16 = v10;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v9 + 84);
  }
  size_t v17 = ((v13 + 16) & ~v13) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  size_t v18 = v17 + v14;
  size_t v19 = ((v17 + v14 + (((v13 | 7) + 1) & ~(v13 | 7))) & ~v14) + v15;
  BOOL v20 = a3 >= v16;
  unsigned int v21 = a3 - v16;
  if (v21 != 0 && v20)
  {
    if (v19 <= 3)
    {
      unsigned int v26 = ((v21 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
      if (HIWORD(v26))
      {
        int v22 = 4;
      }
      else if (v26 >= 0x100)
      {
        int v22 = 2;
      }
      else
      {
        int v22 = v26 > 1;
      }
    }
    else
    {
      int v22 = 1;
    }
  }
  else
  {
    int v22 = 0;
  }
  if (v16 < a2)
  {
    unsigned int v23 = ~v16 + a2;
    if (v19 < 4)
    {
      int v24 = (v23 >> (8 * v19)) + 1;
      if (v19)
      {
        int v27 = v23 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v23;
      int v24 = 1;
    }
    switch(v22)
    {
      case 1:
        a1[v19] = v24;
        return;
      case 2:
        *(_WORD *)&a1[v19] = v24;
        return;
      case 3:
        goto LABEL_62;
      case 4:
        *(_DWORD *)&a1[v19] = v24;
        return;
      default:
        return;
    }
  }
  uint64_t v25 = ~v14;
  switch(v22)
  {
    case 1:
      a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v19] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_62:
      __break(1u);
      JUMPOUT(0x187A07798);
    case 4:
      *(_DWORD *)&a1[v19] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        uint64_t v28 = (unsigned char *)((unint64_t)&a1[(v13 | 7) + 1] & ~(v13 | 7));
        if (v10 >= v12)
        {
          if (v10 >= a2)
          {
            unsigned int v34 = (void *)((unint64_t)(v28 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v7 & 0x80000000) != 0)
            {
              int v36 = *(void (**)(unint64_t))(v6 + 56);
              v36(((unint64_t)v34 + v13 + 8) & ~v13);
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v35 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v35 = a2 - 1;
              }
              *unsigned int v34 = v35;
            }
          }
          else
          {
            if (v17 <= 3) {
              int v31 = ~(-1 << (8 * v17));
            }
            else {
              int v31 = -1;
            }
            if (v17)
            {
              int v32 = v31 & (~v10 + a2);
              if (v17 <= 3) {
                int v33 = v17;
              }
              else {
                int v33 = 4;
              }
              bzero(v28, v17);
              switch(v33)
              {
                case 2:
                  *(_WORD *)uint64_t v28 = v32;
                  break;
                case 3:
                  *(_WORD *)uint64_t v28 = v32;
                  void v28[2] = BYTE2(v32);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v28 = v32;
                  break;
                default:
                  *uint64_t v28 = v32;
                  break;
              }
            }
          }
        }
        else
        {
          unint64_t v29 = (unint64_t)&v28[v18] & v25;
          uint64_t v30 = *(void (**)(unint64_t))(v11 + 56);
          v30(v29);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for PickerCurrentValueLabel()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in PickerCurrentValueLabel<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t PickerCurrentValueLabel.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v49 = a2;
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v42 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v41 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = v6[2];
  uint64_t v8 = v6[4];
  uint64_t v9 = v6[5];
  v58[0] = v7;
  v58[1] = v4;
  uint64_t v48 = v8;
  v58[2] = v8;
  v58[3] = v9;
  uint64_t v10 = type metadata accessor for PickerCurrentValueLabel.Root();
  MEMORY[0x1F4188790](v10);
  unsigned int v12 = (char *)&v39 - v11;
  uint64_t v45 = v13;
  uint64_t v14 = type metadata accessor for _VariadicView.Tree();
  uint64_t v44 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unsigned int v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v43 = (char *)&v39 - v18;
  uint64_t v40 = v9;
  uint64_t v19 = type metadata accessor for PickerStyleConfiguration.CurrentValueLabel();
  uint64_t v20 = type metadata accessor for _ConditionalContent();
  uint64_t v46 = *(void *)(v20 - 8);
  uint64_t v47 = v20;
  MEMORY[0x1F4188790](v20);
  int v22 = (char *)&v39 - v21;
  unsigned int v23 = v3;
  LOBYTE(v3) = *v3;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v25 = OptionalViewAlias.wrappedValue.getter((char)v3, v19, WitnessTable, v58);
  if (v58[0])
  {
    uint64_t v26 = type metadata accessor for Binding();
    int v27 = v41;
    MEMORY[0x18C113DA0](v26);
    uint64_t v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v42 + 32))(v12, v27, v4);
    MEMORY[0x1F4188790](v28);
    *(&v39 - 6) = v7;
    *(&v39 - 5) = v4;
    uint64_t v29 = v48;
    uint64_t v30 = v40;
    *(&v39 - 4) = v48;
    *(&v39 - 3) = v30;
    *(&v39 - 2) = (uint64_t)v23;
    _VariadicView.Tree.init(_:content:)();
    uint64_t v56 = swift_getWitnessTable();
    uint64_t v57 = v29;
    swift_getWitnessTable();
    int v31 = v43;
    static ViewBuilder.buildExpression<A>(_:)(v16);
    int v32 = *(void (**)(char *, uint64_t))(v44 + 8);
    v32(v16, v14);
    static ViewBuilder.buildExpression<A>(_:)(v31);
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)v16, v19, v14);
    v32(v16, v14);
    v32(v31, v14);
  }
  else
  {
    uint64_t v33 = static ViewBuilder.buildExpression<A>(_:)(v25);
    static ViewBuilder.buildExpression<A>(_:)(v33);
    uint64_t v34 = swift_getWitnessTable();
    uint64_t v29 = v48;
    uint64_t v50 = v34;
    uint64_t v51 = v48;
    uint64_t v35 = swift_getWitnessTable();
    static ViewBuilder.buildEither<A, B>(first:)(v35, v19);
  }
  uint64_t v54 = swift_getWitnessTable();
  uint64_t v55 = v29;
  uint64_t v36 = swift_getWitnessTable();
  uint64_t v52 = &protocol witness table for PickerStyleConfiguration<A>.CurrentValueLabel;
  uint64_t v53 = v36;
  uint64_t v37 = v47;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v22);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v22, v37);
}

uint64_t closure #1 in PickerCurrentValueLabel.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = v7;
  v13[1] = v8;
  v13[2] = v9;
  v13[3] = v10;
  uint64_t v11 = type metadata accessor for PickerCurrentValueLabel();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v11 + 56));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

double PickerCurrentValueLabel.Root.body(children:)@<D0>(_OWORD *a1@<X8>)
{
  if (_VariadicView_Children.endIndex.getter())
  {
    closure #1 in PickerCurrentValueLabel.Root.body(children:)(a1);
    closure #2 in PickerCurrentValueLabel.Root.body(children:)();
  }
  else
  {
    double result = 0.0;
    a1[10] = 0u;
    a1[11] = 0u;
    a1[8] = 0u;
    a1[9] = 0u;
    a1[6] = 0u;
    a1[7] = 0u;
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }
  return result;
}

double closure #1 in PickerCurrentValueLabel.Root.body(children:)@<D0>(_OWORD *a1@<X8>)
{
  type metadata accessor for PickerCurrentValueLabel.Root();
  PickerCurrentValueLabel.Root.selectedIndex(for:)();
  if (v2)
  {
    double result = 0.0;
    a1[4] = 0u;
    a1[5] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
    *a1 = 0u;
    a1[1] = 0u;
  }
  else
  {
    _VariadicView_Children.subscript.getter();
  }
  return result;
}

uint64_t PickerCurrentValueLabel.Root.selectedIndex(for:)()
{
  uint64_t v0 = _VariadicView_Children.tagIndex<A>(_:)();
  if (v1)
  {
    _StringGuts.grow(_:)(108);
    v2._object = (void *)0x800000018832EB80;
    v2._countAndFlagsBits = 0xD000000000000017;
    String.append(_:)(v2);
    DefaultStringInterpolation.appendInterpolation<A>(_:)();
    v3._countAndFlagsBits = 0xD000000000000053;
    v3._object = (void *)0x800000018832EBA0;
    String.append(_:)(v3);
    MEMORY[0x18C112B90](0, 0xE000000000000000);
    swift_bridgeObjectRelease();
  }
  return v0;
}

uint64_t closure #2 in PickerCurrentValueLabel.Root.body(children:)()
{
  return _VariadicView_Children.subscript.getter();
}

uint64_t PickerCurrentValueLabel.init(selection:options:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  type metadata accessor for PickerStyleConfiguration.CurrentValueLabel();
  swift_getWitnessTable();
  *a4 = protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key() & 1;
  uint64_t v8 = type metadata accessor for PickerCurrentValueLabel();
  uint64_t v9 = &a4[*(int *)(v8 + 52)];
  uint64_t v10 = type metadata accessor for Binding();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a1, v10);
  return (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(&a4[*(int *)(v8 + 56)], a2, a3);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance PickerCurrentValueLabel<A, B>.Root(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance PickerCurrentValueLabel<A, B>.Root()
{
  return MEMORY[0x1F40FF800]();
}

uint64_t type metadata accessor for PickerCurrentValueLabel.Root()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in PickerCurrentValueLabel.body.getter()
{
  return closure #1 in PickerCurrentValueLabel.body.getter(*(void *)(v0 + 48), *(void *)(v0 + 16));
}

uint64_t getEnumTagSinglePayload for PickerCurrentValueLabel.Root(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PickerCurrentValueLabel.Root(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187A0865CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t sub_187A08684()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for PickerCurrentValueLabel<A, B>.Root(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in PickerCurrentValueLabel<A, B>.Root()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>? and conformance <A> A?)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>?();
    lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>?()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>?)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>?);
    }
  }
}

void type metadata accessor for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>)
  {
    type metadata accessor for _VariadicView_Children.Element?();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>);
    }
  }
}

void type metadata accessor for _VariadicView_Children.Element?()
{
  if (!lazy cache variable for type metadata for _VariadicView_Children.Element?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView_Children.Element?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element>();
    lazy protocol witness table accessor for type _VariadicView_Children.Element? and conformance <A> A?();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, _VariadicView_Children.Element?, _VariadicView_Children.Element> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _VariadicView_Children.Element? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type _VariadicView_Children.Element? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type _VariadicView_Children.Element? and conformance <A> A?)
  {
    type metadata accessor for _VariadicView_Children.Element?();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView_Children.Element? and conformance <A> A?);
  }
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance AutomaticMultiDatePickerStyle.Body@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for UIKitCalendarView(0);
  Swift::String v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance AutomaticMultiDatePickerStyle.Body@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>();
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of MultiDatePickerValue<AutomaticMultiDatePickerStyle>(Value, (uint64_t)v4);
  outlined init with take of MultiDatePickerStyleConfiguration((uint64_t)v4, a1);
  uint64_t v6 = (int *)type metadata accessor for UIKitCalendarView(0);
  unsigned int v7 = (uint64_t *)(a1 + v6[5]);
  *unsigned int v7 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Locale>.Content, MEMORY[0x1E4F27A78]);
  swift_storeEnumTagMultiPayload();
  size_t v8 = (uint64_t *)(a1 + v6[6]);
  *size_t v8 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<Calendar>.Content, MEMORY[0x1E4F27CA0]);
  swift_storeEnumTagMultiPayload();
  BOOL v9 = (uint64_t *)(a1 + v6[7]);
  uint64_t *v9 = swift_getKeyPath();
  type metadata accessor for Environment<Locale>.Content(0, (unint64_t *)&lazy cache variable for type metadata for Environment<TimeZone>.Content, MEMORY[0x1E4F27D68]);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = a1 + v6[8];
  *(void *)uint64_t v10 = swift_getKeyPath();
  *(unsigned char *)(v10 + 8) = 0;
  uint64_t v11 = a1 + v6[9];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v11 = result;
  *(unsigned char *)(v11 + 8) = 0;
  return result;
}

void type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>()
{
  if (!lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>)
  {
    unint64_t v0 = type metadata accessor for MultiDatePickerValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MultiDatePickerValue<AutomaticMultiDatePickerStyle>);
    }
  }
}

uint64_t outlined init with copy of MultiDatePickerValue<AutomaticMultiDatePickerStyle>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for MultiDatePickerValue<AutomaticMultiDatePickerStyle>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of MultiDatePickerStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Environment<Locale>.Content(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Environment.Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for AutomaticMultiDatePickerStyle.Body()
{
  return &type metadata for AutomaticMultiDatePickerStyle.Body;
}

ValueMetadata *type metadata accessor for AutomaticMultiDatePickerStyle()
{
  return &type metadata for AutomaticMultiDatePickerStyle;
}

unint64_t lazy protocol witness table accessor for type AutomaticMultiDatePickerStyle.Body and conformance AutomaticMultiDatePickerStyle.Body()
{
  unint64_t result = lazy protocol witness table cache variable for type AutomaticMultiDatePickerStyle.Body and conformance AutomaticMultiDatePickerStyle.Body;
  if (!lazy protocol witness table cache variable for type AutomaticMultiDatePickerStyle.Body and conformance AutomaticMultiDatePickerStyle.Body)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutomaticMultiDatePickerStyle.Body and conformance AutomaticMultiDatePickerStyle.Body);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ()(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t, void))
{
  return a3(a1, *a2);
}

uint64_t ForEach.init<A, B>(_:editActions:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v32 = a7;
  uint64_t v33 = a8;
  v28[1] = a5;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v35 = a1;
  uint64_t v36 = a9;
  uint64_t v30 = a12;
  uint64_t v31 = a13;
  uint64_t v34 = a10;
  uint64_t v17 = type metadata accessor for Binding();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)v28 - v20;
  uint64_t v22 = *a2;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)v28 - v20, a1, v17, v19);
  uint64_t v39 = a5;
  uint64_t v40 = a6;
  uint64_t v23 = v32;
  uint64_t v24 = v33;
  uint64_t v41 = v32;
  uint64_t v42 = v33;
  uint64_t v43 = a10;
  uint64_t v44 = a11;
  uint64_t v25 = v31;
  uint64_t v45 = v30;
  uint64_t v46 = v31;
  uint64_t KeyPath = (void *)swift_getKeyPath();
  uint64_t v47 = v22;
  swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  ForEach.init<A, B>(_:id:editActions:content:)((uint64_t)v21, KeyPath, &v47, v37, v38, a6, v23, AssociatedConformanceWitness, v36, v24, v34, a11, v25);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v35, v17);
}

uint64_t key path getter for Identifiable.id : <A, B, C><A1, B1>A1.Sequence.Element()
{
  return dispatch thunk of Identifiable.id.getter();
}

uint64_t sub_187A09118()
{
  return 64;
}

__n128 sub_187A09124(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t ForEach.init<A, B>(_:id:editActions:content:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v57 = a7;
  uint64_t v60 = a4;
  uint64_t v61 = a5;
  uint64_t v65 = a1;
  uint64_t v62 = a9;
  uint64_t v56 = a13;
  uint64_t v55 = a12;
  uint64_t v63 = a11;
  uint64_t v67 = a2;
  uint64_t v16 = *a2;
  uint64_t v17 = type metadata accessor for Binding();
  uint64_t v64 = *(void *)(v17 - 8);
  uint64_t v54 = *(void *)(v64 + 64);
  MEMORY[0x1F4188790](v17);
  uint64_t v52 = (char *)&v48 - v18;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(*MEMORY[0x1E4FBC5F0] + v16 + 8);
  uint64_t v23 = *(void *)(a10 + 8);
  uint64_t v50 = a10;
  uint64_t v76 = a6;
  uint64_t v77 = v22;
  uint64_t v49 = v22;
  uint64_t v78 = v23;
  uint64_t v79 = a8;
  uint64_t v24 = a8;
  uint64_t v59 = type metadata accessor for IndexedIdentifierCollection();
  double v25 = MEMORY[0x1F4188790](v59);
  int v27 = (char *)&v48 - v26;
  uint64_t v58 = (char *)&v48 - v26;
  uint64_t v51 = *a3;
  uint64_t v28 = v17;
  uint64_t v29 = v17;
  uint64_t v30 = v65;
  MEMORY[0x18C113DA0](v28, v25);
  uint64_t v31 = v67;
  swift_retain();
  uint64_t v48 = a6;
  uint64_t v66 = v24;
  IndexedIdentifierCollection.init(_:id:)((uint64_t)v21, v31, a6, v23, v24, (uint64_t)v27);
  uint64_t v68 = v22;
  uint64_t v69 = a6;
  uint64_t v32 = v57;
  uint64_t v70 = v57;
  uint64_t v71 = v24;
  uint64_t v72 = a10;
  uint64_t v73 = v63;
  uint64_t v33 = v55;
  uint64_t v34 = v56;
  uint64_t v74 = v55;
  uint64_t v75 = v56;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v35 = v64;
  uint64_t v36 = v52;
  uint64_t v37 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v52, v30, v29);
  unint64_t v38 = (*(unsigned __int8 *)(v35 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  unint64_t v39 = (v54 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v40 = (char *)swift_allocObject();
  uint64_t v41 = v48;
  *((void *)v40 + 2) = v49;
  *((void *)v40 + 3) = v41;
  uint64_t v42 = v66;
  *((void *)v40 + 4) = v32;
  *((void *)v40 + 5) = v42;
  uint64_t v43 = v63;
  *((void *)v40 + 6) = v50;
  *((void *)v40 + 7) = v43;
  *((void *)v40 + 8) = v33;
  *((void *)v40 + 9) = v34;
  uint64_t v44 = v64;
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v40[v38], v36, v37);
  *(void *)&v40[v39] = v51;
  uint64_t v45 = &v40[(v39 + 15) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v46 = v61;
  *(void *)uint64_t v45 = v60;
  *((void *)v45 + 1) = v46;
  type metadata accessor for EditableCollectionContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  ForEach<>.init(_:id:content:)();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v65, v37);
}

uint64_t type metadata accessor for IndexedIdentifierCollection()
{
  return swift_getGenericMetadata();
}

uint64_t IndexedIdentifierCollection.init(_:id:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v35 = a5;
  uint64_t v39 = a1;
  uint64_t v44 = a2;
  uint64_t v45 = a6;
  uint64_t v9 = *a2;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v42 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v40 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(swift_getAssociatedConformanceWitness() + 8);
  uint64_t v41 = type metadata accessor for LazySequence();
  uint64_t v43 = *(void *)(v41 - 8);
  MEMORY[0x1F4188790](v41);
  uint64_t v32 = (char *)&v32 - v14;
  uint64_t v15 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v32 - v17;
  uint64_t v34 = *(void *)(*MEMORY[0x1E4FBC5F0] + v9 + 8);
  uint64_t v46 = a3;
  uint64_t v47 = v34;
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  uint64_t v36 = type metadata accessor for IndexedIdentifierCollection.Element();
  uint64_t v19 = type metadata accessor for LazyMapSequence();
  uint64_t v37 = *(void *)(v19 - 8);
  uint64_t v38 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v33 = (char *)&v32 - v20;
  uint64_t v21 = v39;
  dispatch thunk of Collection.indices.getter();
  MEMORY[0x18C115A70](AssociatedTypeWitness, v13);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, AssociatedTypeWitness);
  uint64_t v22 = v40;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v40, v21, a3);
  unint64_t v23 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v24 = (v42 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
  double v25 = (char *)swift_allocObject();
  uint64_t v26 = v34;
  *((void *)v25 + 2) = a3;
  *((void *)v25 + 3) = v26;
  uint64_t v27 = v35;
  *((void *)v25 + 4) = a4;
  *((void *)v25 + 5) = v27;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v25[v23], v22, a3);
  *(void *)&v25[v24] = v44;
  swift_retain();
  uint64_t v28 = v41;
  swift_getWitnessTable();
  uint64_t v29 = v32;
  uint64_t v30 = v33;
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v21, a3);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v29, v28);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v37 + 32))(v45, v30, v38);
}

uint64_t closure #1 in ForEach.init<A, B>(_:id:editActions:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v90 = a6;
  uint64_t v96 = a5;
  uint64_t v97 = a4;
  uint64_t v95 = a3;
  uint64_t v112 = a2;
  uint64_t v104 = a1;
  uint64_t v100 = a9;
  uint64_t v109 = a14;
  uint64_t v110 = a13;
  uint64_t v88 = a12;
  uint64_t v108 = a8;
  uint64_t v107 = a10;
  uint64_t v105 = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v93 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for EditableCollectionContent();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v98 = v16;
  uint64_t v99 = v17;
  MEMORY[0x1F4188790](v16);
  uint64_t v92 = (uint64_t)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  id v94 = (char *)&v73 - v20;
  uint64_t v82 = type metadata accessor for Binding();
  uint64_t v21 = *(void *)(v82 - 8);
  uint64_t v22 = *(void *)(v21 + 64);
  MEMORY[0x1F4188790](v82);
  uint64_t v85 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  id v111 = (char *)&v73 - v24;
  uint64_t v102 = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v91 = type metadata accessor for Binding();
  uint64_t v89 = *(void *)(v91 - 8);
  MEMORY[0x1F4188790](v91);
  uint64_t v86 = (char *)&v73 - v25;
  uint64_t v26 = swift_getAssociatedTypeWitness();
  uint64_t v101 = v26;
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(void *)(v27 + 64);
  MEMORY[0x1F4188790](v26);
  uint64_t v83 = (char *)&v73 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v73 - v30;
  uint64_t v80 = (char *)&v73 - v30;
  double v33 = MEMORY[0x1F4188790](v32);
  uint64_t v35 = (char *)&v73 - v34;
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t, double))(v27 + 16);
  char v106 = (char *)&v73 - v34;
  v36((char *)&v73 - v34, v104, v26, v33);
  uint64_t v81 = (void (*)(char *, char *, uint64_t))v36;
  uint64_t v103 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  uint64_t v104 = v21 + 16;
  uint64_t v37 = v82;
  v103(v111, v112, v82);
  ((void (*)(char *, char *, uint64_t))v36)(v31, v35, v26);
  uint64_t v38 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v39 = v21;
  uint64_t v40 = *(unsigned __int8 *)(v27 + 80);
  uint64_t v84 = v27;
  uint64_t v41 = (v38 + 96) & ~v38;
  uint64_t v77 = v41;
  uint64_t v79 = ((v22 + v41 + v40) & ~v40) + v28;
  uint64_t v42 = (v22 + v41 + v40) & ~v40;
  uint64_t v75 = v42;
  uint64_t v78 = v38 | v40 | 7;
  uint64_t v43 = (char *)swift_allocObject();
  *((void *)v43 + 2) = 0;
  *((void *)v43 + 3) = 0;
  uint64_t v44 = v90;
  uint64_t v45 = v102;
  *((void *)v43 + 4) = v90;
  *((void *)v43 + 5) = v45;
  uint64_t v46 = v107;
  *((void *)v43 + 6) = v108;
  *((void *)v43 + 7) = v46;
  uint64_t v47 = v88;
  *((void *)v43 + 8) = v105;
  *((void *)v43 + 9) = v47;
  uint64_t v48 = v109;
  *((void *)v43 + 10) = v110;
  *((void *)v43 + 11) = v48;
  uint64_t v49 = &v43[v41];
  uint64_t v50 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
  uint64_t v76 = v39 + 32;
  uint64_t v51 = v37;
  v50(v49, v111, v37);
  uint64_t v52 = v50;
  uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
  uint64_t v53 = v101;
  v74(&v43[v42], v80, v101);
  uint64_t v54 = v85;
  v103(v85, v112, v51);
  uint64_t v55 = v83;
  v81(v83, v106, v53);
  uint64_t v56 = (char *)swift_allocObject();
  *((void *)v56 + 2) = 0;
  *((void *)v56 + 3) = 0;
  *((void *)v56 + 4) = v44;
  uint64_t v57 = v102;
  uint64_t v58 = v107;
  uint64_t v59 = v108;
  *((void *)v56 + 5) = v102;
  *((void *)v56 + 6) = v59;
  uint64_t v60 = v105;
  *((void *)v56 + 7) = v58;
  *((void *)v56 + 8) = v60;
  *((void *)v56 + 9) = v47;
  uint64_t v61 = &v56[v77];
  uint64_t v62 = v109;
  *((void *)v56 + 10) = v110;
  *((void *)v56 + 11) = v62;
  v52(v61, v54, v51);
  uint64_t v63 = v101;
  v74(&v56[v75], v55, v101);
  uint64_t v64 = v86;
  Binding.init(get:set:)();
  uint64_t v65 = (uint64_t)v111;
  v103(v111, v112, v51);
  uint64_t v113 = v95;
  uint64_t v66 = (uint64_t)v93;
  v97(v64);
  uint64_t v67 = v92;
  EditableCollectionContent.init(data:editActions:content:)(v65, &v113, v66, v59, v57, v92);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v64, v91);
  (*(void (**)(char *, uint64_t))(v84 + 8))(v106, v63);
  uint64_t v68 = v98;
  swift_getWitnessTable();
  uint64_t v69 = v94;
  uint64_t v70 = v67;
  static ViewBuilder.buildExpression<A>(_:)(v67);
  uint64_t v71 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
  v71(v70, v68);
  static ViewBuilder.buildExpression<A>(_:)(v69);
  return ((uint64_t (*)(char *, uint64_t))v71)(v69, v68);
}

uint64_t sub_187A0A18C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = (int *)(type metadata accessor for Binding() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[10], v1);
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ForEach.init<A, B>(_:id:editActions:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  long long v13 = *(_OWORD *)(v2 + 56);
  long long v14 = *(_OWORD *)(v2 + 40);
  uint64_t v8 = *(void *)(v2 + 72);
  uint64_t v9 = *(void *)(type metadata accessor for Binding() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in ForEach.init<A, B>(_:id:editActions:content:)(a1, v2 + v10, *(void *)(v2 + v11), *(void (**)(char *))(v2 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), v5, v6, v7, a2, v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v8);
}

uint64_t type metadata accessor for EditableCollectionContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in closure #1 in ForEach.init<A, B>(_:id:editActions:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for Binding();
  MEMORY[0x18C113DA0](v8);
  uint64_t v9 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v11 = v10;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a3, v11, AssociatedTypeWitness);
  v9(v14, 0);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v7, a2);
}

uint64_t closure #2 in closure #1 in ForEach.init<A, B>(_:id:editActions:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = a1;
  uint64_t v9 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v15 = (char *)&v21 - v14;
  uint64_t v16 = swift_getAssociatedTypeWitness();
  double v17 = MEMORY[0x1F4188790](v16);
  (*(void (**)(char *, uint64_t, double))(v19 + 16))((char *)&v21 - v18, a5, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v22, AssociatedTypeWitness);
  type metadata accessor for Binding();
  MEMORY[0x18C113DA0]();
  dispatch thunk of MutableCollection.subscript.setter();
  specialized Binding.wrappedValue.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, a7);
}

uint64_t EditableCollectionContent.init(data:editActions:content:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for Binding();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v36 = *(void *)(v13 + 64);
  v14.n128_f64[0] = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - v15;
  uint64_t v17 = *a2;
  uint64_t v18 = *(void *)(a4 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v18 + 16);
  uint64_t v37 = a3;
  uint64_t v38 = a6;
  v19(a6, a3, a4, v14);
  uint64_t v35 = v17;
  uint64_t v39 = v17;
  type metadata accessor for EditActions();
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  if (EditActions.canDelete.getter())
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, v12);
    unint64_t v22 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = a4;
    *(void *)(v21 + 24) = a5;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v21 + v22, v16, v12);
    uint64_t v20 = partial apply for closure #1 in EditableCollectionContent.init(data:editActions:content:);
  }
  uint64_t v34 = v16;
  uint64_t v23 = v12;
  uint64_t v24 = type metadata accessor for EditableCollectionContent();
  uint64_t v25 = (uint64_t (**)(uint64_t))(v38 + *(int *)(v24 + 36));
  char *v25 = v20;
  v25[1] = (uint64_t (*)(uint64_t))v21;
  uint64_t v39 = v35;
  char v26 = EditActions.canDelete.getter();
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v37, a4);
  if (v26)
  {
    uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
    uint64_t v28 = v34;
    v27(v34, a1, v23);
    unint64_t v29 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = a4;
    *(void *)(v30 + 24) = a5;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v27)(v30 + v29, v28, v23);
    uint64_t v32 = partial apply for closure #2 in EditableCollectionContent.init(data:editActions:content:);
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, v23);
    uint64_t v32 = 0;
    uint64_t v30 = 0;
  }
  double v33 = (uint64_t (**)(uint64_t, uint64_t))(v38 + *(int *)(v24 + 40));
  *double v33 = v32;
  v33[1] = (uint64_t (*)(uint64_t, uint64_t))v30;
  return result;
}

uint64_t EditActions.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t EditActions.init(rawValue:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void static EditActions.move.getter()
{
}

uint64_t static EditActions.all.getter()
{
  return SetAlgebra<>.init(arrayLiteral:)();
}

uint64_t EditActions.canDelete.getter()
{
  return OptionSet<>.contains(_:)() & 1;
}

uint64_t protocol witness for OptionSet.init(rawValue:) in conformance EditActions<A>@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return EditActions.init(rawValue:)(*a1, a2);
}

uint64_t protocol witness for SetAlgebra.init() in conformance EditActions<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v3 = lazy protocol witness table accessor for type Int and conformance Int();

  return MEMORY[0x1F4186310](a1, WitnessTable, v3);
}

uint64_t protocol witness for SetAlgebra.contains(_:) in conformance EditActions<A>()
{
  swift_getWitnessTable();

  return OptionSet<>.contains(_:)();
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance EditActions<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862F0](a1, a2, WitnessTable);
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance EditActions<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862E0](a1, a2, WitnessTable);
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance EditActions<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862E8](a1, a2, WitnessTable);
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance EditActions<A>()
{
  swift_getWitnessTable();

  return OptionSet<>.insert(_:)();
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance EditActions<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862C8](a1, a2, WitnessTable);
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance EditActions<A>(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862D0](a1, a2, WitnessTable);
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance EditActions<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.formUnion(_:) in conformance EditActions<A>(a1, a2, a3, MEMORY[0x1E4FBC7F8]);
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance EditActions<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.formUnion(_:) in conformance EditActions<A>(a1, a2, a3, MEMORY[0x1E4FBC7E8]);
}

uint64_t protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance EditActions<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for SetAlgebra.formUnion(_:) in conformance EditActions<A>(a1, a2, a3, MEMORY[0x1E4FBC7F0]);
}

uint64_t protocol witness for SetAlgebra.formUnion(_:) in conformance EditActions<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, unint64_t))
{
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v7 = lazy protocol witness table accessor for type Int and conformance Int();

  return a4(a1, a2, WitnessTable, v7);
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance EditActions<A>()
{
  return MEMORY[0x1F4184AE8]();
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance EditActions<A>()
{
  return MEMORY[0x1F4184AF8]();
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance EditActions<A>()
{
  return MEMORY[0x1F4184AD8]();
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance EditActions<A>()
{
  return MEMORY[0x1F4184AE0]();
}

uint64_t protocol witness for SetAlgebra.isEmpty.getter in conformance EditActions<A>()
{
  return MEMORY[0x1F4184AF0]();
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance EditActions<A>()
{
  return MEMORY[0x1F4184B00]();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance EditActions<A>@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = EditActions.init(rawValue:)(*a1, (void *)a2);
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance EditActions<A>@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EditActions.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EditActions<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB570];

  return MEMORY[0x1F4185BB0](a1, a2, a3, WitnessTable, v7);
}

uint64_t protocol witness for ExpressibleByArrayLiteral.init(arrayLiteral:) in conformance EditActions<A>()
{
  swift_getWitnessTable();

  return SetAlgebra<>.init(arrayLiteral:)();
}

void static EditActions<A>.delete.getter(void *a1@<X8>)
{
  *a1 = 1;
}

uint64_t static EditActions<A>.all.getter()
{
  type metadata accessor for EditActions();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  void *v0 = 1;
  uint64_t v1 = type metadata accessor for Array();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v1, v2, v3, v4);
  swift_getWitnessTable();
  return SetAlgebra<>.init(arrayLiteral:)();
}

{
  _OWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  type metadata accessor for EditActions();
  type metadata accessor for _ContiguousArrayStorage();
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  void *v0 = xmmword_18834BB80;
  uint64_t v1 = type metadata accessor for Array();
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v1, v2, v3, v4);
  swift_getWitnessTable();
  return SetAlgebra<>.init(arrayLiteral:)();
}

void static EditActions<A>.move.getter(void *a1@<X8>)
{
  *a1 = 2;
}

void static EditActions<A>.all.getter(void *a1@<X8>)
{
  *a1 = 2;
}

uint64_t closure #1 in EditableCollectionContent.init(data:editActions:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  MEMORY[0x1F4188790](v9);
  uint64_t v10 = type metadata accessor for Binding();
  MEMORY[0x18C113DA0]();
  type metadata accessor for MutableCollection & RangeReplaceableCollection();
  if (swift_dynamicCast())
  {
    outlined init with take of ToggleStyleConfiguration.Effect(&v12, &v15);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v15, v16);
    RangeReplaceableCollection<>.remove(atOffsets:)();
    outlined init with copy of MutableCollection & RangeReplaceableCollection((uint64_t)&v15, (uint64_t)&v12);
LABEL_5:
    swift_dynamicCast();
    specialized Binding.wrappedValue.setter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a4);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  }
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  outlined destroy of (MutableCollection & RangeReplaceableCollection)?((uint64_t)&v12);
  MEMORY[0x18C113DA0](v10);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for RangeReplaceableCollection);
  if (swift_dynamicCast())
  {
    outlined init with take of OptionalBinaryInteger(&v12, (uint64_t)&v15);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v15, v16);
    RangeReplaceableCollection._remove(atOffsets:)();
    outlined init with copy of TableColumnList((uint64_t)&v15, (uint64_t)&v12);
    goto LABEL_5;
  }
  *(void *)&long long v14 = 0;
  long long v12 = 0u;
  long long v13 = 0u;
  return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v12, &lazy cache variable for type metadata for RangeReplaceableCollection?, &lazy cache variable for type metadata for RangeReplaceableCollection);
}

uint64_t closure #2 in EditableCollectionContent.init(data:editActions:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  type metadata accessor for Binding();
  MEMORY[0x18C113DA0]();
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for MutableCollection);
  if (swift_dynamicCast())
  {
    outlined init with take of OptionalBinaryInteger(v11, (uint64_t)v13);
    __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v13, v14);
    MutableCollection.move(fromOffsets:toOffset:)();
    outlined init with copy of TableColumnList((uint64_t)v13, (uint64_t)v11);
    swift_dynamicCast();
    specialized Binding.wrappedValue.setter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, a5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
  }
  else
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    return outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v11, &lazy cache variable for type metadata for MutableCollection?, &lazy cache variable for type metadata for MutableCollection);
  }
}

uint64_t EditableCollectionContent<>.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v41 = a2;
  uint64_t v42 = a3;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<OnDeleteDefaultTraitKey>);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v39 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v43 = (char *)&v36 - v11;
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveDefaultTraitKey>);
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v40 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v38 = (char *)&v36 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, v4, v6, v16);
  uint64_t v36 = a1;
  uint64_t v37 = v4;
  uint64_t v18 = (uint64_t *)(v4 + *(int *)(a1 + 36));
  uint64_t v19 = *v18;
  uint64_t v20 = v18[1];
  if (*v18)
  {
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v19;
    *(void *)(v21 + 24) = v20;
    unint64_t v22 = partial apply for thunk for @escaping @callee_guaranteed (@inout AccessibilityLargeContentViewTree) -> ();
  }
  else
  {
    unint64_t v22 = 0;
    uint64_t v21 = 0;
  }
  uint64_t v48 = v22;
  uint64_t v49 = v21;
  outlined copy of AppIntentExecutor?(v19);
  uint64_t v23 = v41;
  View._trait<A>(_:_:)();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v22);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t v24 = (uint64_t *)(v37 + *(int *)(v36 + 40));
  uint64_t v25 = *v24;
  uint64_t v26 = v24[1];
  if (*v24)
  {
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v25;
    *(void *)(v27 + 24) = v26;
    uint64_t v28 = (uint64_t (*)(uint64_t))_s10Foundation8IndexSetVSiIegny_ACSiytIegnnr_TRTA_0;
  }
  else
  {
    uint64_t v28 = 0;
    uint64_t v27 = 0;
  }
  uint64_t v48 = v28;
  uint64_t v49 = v27;
  outlined copy of AppIntentExecutor?(v25);
  uint64_t v29 = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<OnDeleteDefaultTraitKey>);
  uint64_t v46 = v23;
  uint64_t v47 = v29;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v31 = v43;
  View._trait<A>(_:_:)();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v28);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v31, v10);
  uint64_t v32 = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<OnMoveDefaultTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveDefaultTraitKey>);
  uint64_t v44 = WitnessTable;
  uint64_t v45 = v32;
  swift_getWitnessTable();
  double v33 = v38;
  static ViewBuilder.buildExpression<A>(_:)(v14);
  uint64_t v34 = *(void (**)(char *, uint64_t))(v40 + 8);
  v34(v14, v12);
  static ViewBuilder.buildExpression<A>(_:)(v33);
  return ((uint64_t (*)(char *, uint64_t))v34)(v33, v12);
}

uint64_t IndexedIdentifierCollection.Element.init(index:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a4, a1, AssociatedTypeWitness);
  uint64_t v9 = type metadata accessor for IndexedIdentifierCollection.Element();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4 + *(int *)(v9 + 52), a2, a3);
}

uint64_t protocol witness for View.body.getter in conformance <> EditableCollectionContent<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return EditableCollectionContent<>.body.getter(a1, *(void *)(a2 - 8), a3);
}

uint64_t closure #1 in IndexedIdentifierCollection.init(_:id:)@<X0>(uint64_t a1@<X0>, void *a2@<X2>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v22 = a4;
  uint64_t v23 = a3;
  uint64_t v21 = *(void *)(*a2 + *MEMORY[0x1E4FBC5F0] + 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v20 - v5;
  uint64_t v8 = *v7;
  uint64_t v9 = *(void *)(*v7 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v20 - v11;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v14 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  double v16 = (char *)&v20 - v15;
  (*(void (**)(char *, uint64_t, double))(v17 + 16))((char *)&v20 - v15, a1, v14);
  uint64_t v18 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  (*(void (**)(char *))(v9 + 16))(v12);
  v18(v24, 0);
  swift_getAtKeyPath();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return IndexedIdentifierCollection.Element.init(index:id:)((uint64_t)v16, (uint64_t)v6, v21, v22);
}

uint64_t IndexedIdentifierCollection.startIndex.getter(uint64_t a1)
{
  return IndexedIdentifierCollection.startIndex.getter(a1, MEMORY[0x1E4FBBBC8]);
}

uint64_t IndexedIdentifierCollection.endIndex.getter(uint64_t a1)
{
  return IndexedIdentifierCollection.startIndex.getter(a1, MEMORY[0x1E4FBBBD8]);
}

uint64_t IndexedIdentifierCollection.startIndex.getter(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for IndexedIdentifierCollection.Element();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v4 = type metadata accessor for LazyMapSequence();
  return a2(v4, AssociatedConformanceWitness);
}

uint64_t IndexedIdentifierCollection.subscript.getter(uint64_t a1, uint64_t a2)
{
  return IndexedIdentifierCollection.subscript.getter(a1, a2, MEMORY[0x1E4FBBBE0]);
}

uint64_t IndexedIdentifierCollection.index(after:)(uint64_t a1, uint64_t a2)
{
  return IndexedIdentifierCollection.subscript.getter(a1, a2, MEMORY[0x1E4FBBBD0]);
}

uint64_t IndexedIdentifierCollection.subscript.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for IndexedIdentifierCollection.Element();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v6 = type metadata accessor for LazyMapSequence();
  return a3(a1, v6, AssociatedConformanceWitness);
}

void (*protocol witness for Collection.subscript.read in conformance IndexedIdentifierCollection<A, B>(void *a1, uint64_t a2, uint64_t a3))(void *a1)
{
  uint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = IndexedIdentifierCollection.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>;
}

void (*IndexedIdentifierCollection.subscript.read(void *a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t v6 = malloc(0x38uLL);
  *a1 = v6;
  long long v7 = *(_OWORD *)(a3 + 32);
  _OWORD *v6 = *(_OWORD *)(a3 + 16);
  v6[1] = v7;
  uint64_t v8 = type metadata accessor for IndexedIdentifierCollection.Element();
  *((void *)v6 + 4) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *((void *)v6 + 5) = v9;
  *((void *)v6 + 6) = malloc(*(void *)(v9 + 64));
  IndexedIdentifierCollection.subscript.getter(a2, a3);
  return IndexedIdentifierCollection.subscript.read;
}

void IndexedIdentifierCollection.subscript.read(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void **)(*(void *)a1 + 48);
  (*(void (**)(void *, void))(*(void *)(*(void *)a1 + 40) + 8))(v2, *(void *)(*(void *)a1 + 32));
  free(v2);

  free(v1);
}

uint64_t protocol witness for Collection.subscript.getter in conformance IndexedIdentifierCollection<A, B>()
{
  return MEMORY[0x1F4184430]();
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance IndexedIdentifierCollection<A, B>@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance IndexedIdentifierCollection<A, B>()
{
  return MEMORY[0x1F41843A8]();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance IndexedIdentifierCollection<A, B>()
{
  return MEMORY[0x1F41843A0]();
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance IndexedIdentifierCollection<A, B>()
{
  return MEMORY[0x1F41843D8]();
}

uint64_t protocol witness for Collection.formIndex(after:) in conformance IndexedIdentifierCollection<A, B>(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v7 = (char *)&v9 - v6;
  IndexedIdentifierCollection.index(after:)(a1, a2);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a1, v7, AssociatedTypeWitness);
}

uint64_t protocol witness for Sequence.makeIterator() in conformance IndexedIdentifierCollection<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  v7.n128_f64[0] = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 16))(a2, v2, a1, v7);
  IndexedIdentifierCollection.startIndex.getter(a1);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, a1);
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for IndexingIterator();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2 + *(int *)(v11 + 36), v9, AssociatedTypeWitness);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance IndexedIdentifierCollection<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance IndexedIdentifierCollection<A, B>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

uint64_t IndexedIdentifierCollection<>.index(before:)(uint64_t a1)
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for IndexedIdentifierCollection.Element();
  swift_getAssociatedConformanceWitness();
  uint64_t v2 = type metadata accessor for LazyMapSequence();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return MEMORY[0x18C117850](a1, v2, AssociatedConformanceWitness);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> IndexedIdentifierCollection<A, B>(uint64_t a1)
{
  return IndexedIdentifierCollection<>.index(before:)(a1);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> IndexedIdentifierCollection<A, B>(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v7 - v4;
  IndexedIdentifierCollection<>.index(before:)(a1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, AssociatedTypeWitness);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 32))(a1, v5, AssociatedTypeWitness);
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance <> IndexedIdentifierCollection<A, B>()
{
  return MEMORY[0x1F41836E8]();
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:) in conformance <> IndexedIdentifierCollection<A, B>()
{
  return BidirectionalCollection.index(_:offsetBy:)();
}

uint64_t protocol witness for RandomAccessCollection.index(_:offsetBy:limitedBy:) in conformance <> IndexedIdentifierCollection<A, B>()
{
  return MEMORY[0x1F41842A0]();
}

uint64_t protocol witness for RandomAccessCollection.distance(from:to:) in conformance <> IndexedIdentifierCollection<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  return MEMORY[0x18C1155A0](a1, a2, a3, WitnessTable);
}

uint64_t type metadata accessor for EditActions()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for _TraitWritingModifier();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187A0CAD4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _s10Foundation8IndexSetVSiIegny_ACSiytIegnnr_TRTA_0(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(v2 + 16))(a1, *a2);
}

uint64_t type metadata accessor for IndexedIdentifierCollection.Element()
{
  return swift_getGenericMetadata();
}

uint64_t base witness table accessor for RawRepresentable in EditActions<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for SetAlgebra in EditActions<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in EditActions<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ExpressibleByArrayLiteral in EditActions<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in <> EditableCollectionContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for Sequence in IndexedIdentifierCollection<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in IndexedIdentifierCollection<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t base witness table accessor for Collection in <> IndexedIdentifierCollection<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> IndexedIdentifierCollection<A, B>()
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> IndexedIdentifierCollection<A, B>();
}

{
  swift_getWitnessTable();
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <> IndexedIdentifierCollection<A, B>()
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> IndexedIdentifierCollection<A, B>();
}

uint64_t base witness table accessor for BidirectionalCollection in <> IndexedIdentifierCollection<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : RandomAccessCollection in <> IndexedIdentifierCollection<A, B>()
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> IndexedIdentifierCollection<A, B>();
}

uint64_t associated type witness table accessor for Collection.SubSequence : RandomAccessCollection in <> IndexedIdentifierCollection<A, B>()
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> IndexedIdentifierCollection<A, B>();
}

uint64_t type metadata completion function for EditableCollectionContent()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for EditableCollectionContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v11 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
    }
    else
    {
      uint64_t v12 = *(void *)(v11 + 8);
      *(void *)unint64_t v10 = *(void *)v11;
      *(void *)(v10 + 8) = v12;
      swift_retain();
    }
    unint64_t v13 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v14 < 0xFFFFFFFFuLL)
    {
      *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
      return v4;
    }
    uint64_t v15 = *(void *)(v14 + 8);
    *(void *)unint64_t v13 = *(void *)v14;
    *(void *)(v13 + 8) = v15;
  }
  swift_retain();
  return v4;
}

uint64_t destroy for EditableCollectionContent(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  uint64_t result = (*(uint64_t (**)(void))v3)();
  uint64_t v5 = (void *)((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8);
  if (*v5 >= 0xFFFFFFFFuLL) {
    uint64_t result = swift_release();
  }
  if (*(void *)(((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for EditableCollectionContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
    swift_retain();
  }
  unint64_t v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v11 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  }
  else
  {
    uint64_t v12 = *(void *)(v11 + 8);
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = v12;
    swift_retain();
  }
  return a1;
}

uint64_t assignWithCopy for EditableCollectionContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v11 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v11;
      swift_retain();
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v10 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v10;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
LABEL_8:
  uint64_t v12 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v16 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v16;
      swift_retain();
      return a1;
    }
LABEL_14:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    return a1;
  }
  if (v14 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  unint64_t v15 = v13[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for EditableCollectionContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v8 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  }
  else
  {
    uint64_t v9 = *(void *)(v8 + 8);
    *(void *)unint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v9;
  }
  unint64_t v10 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (uint64_t *)((v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v12 = *v11;
  if ((unint64_t)*v11 < 0xFFFFFFFF)
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)v11;
  }
  else
  {
    uint64_t v13 = v11[1];
    *(void *)unint64_t v10 = v12;
    *(void *)(v10 + 8) = v13;
  }
  return a1;
}

uint64_t assignWithTake for EditableCollectionContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (unint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v9 = *v8;
  if (*v7 < 0xFFFFFFFFuLL)
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v11 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v11;
      goto LABEL_8;
    }
  }
  else
  {
    if (v9 >= 0xFFFFFFFF)
    {
      unint64_t v10 = v8[1];
      *unint64_t v7 = v9;
      v7[1] = v10;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
LABEL_8:
  uint64_t v12 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = (unint64_t *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = *v13;
  if (*v12 < 0xFFFFFFFFuLL)
  {
    if (v14 >= 0xFFFFFFFF)
    {
      unint64_t v16 = v13[1];
      *uint64_t v12 = v14;
      v12[1] = v16;
      return a1;
    }
LABEL_14:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    return a1;
  }
  if (v14 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_14;
  }
  unint64_t v15 = v13[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for EditableCollectionContent(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187A0D5D8);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for EditableCollectionContent(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0x7FFFFFFE)
            {
              uint64_t v19 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                *uint64_t v19 = 0;
                v19[1] = 0;
                *(_DWORD *)uint64_t v19 = a2 - 0x7FFFFFFF;
              }
              else
              {
                *uint64_t v19 = a2;
              }
            }
            else
            {
              uint64_t v18 = *(void (**)(void))(v6 + 56);
              v18();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v12 = v11 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((v9 + 7) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v17 = ~v8 + a2;
    bzero(a1, ((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187A0D7ECLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for IndexedIdentifierCollection()
{
  swift_getAssociatedTypeWitness();
  type metadata accessor for IndexedIdentifierCollection.Element();
  swift_getAssociatedConformanceWitness();
  uint64_t result = type metadata accessor for LazyMapSequence();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IndexedIdentifierCollection(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
    unint64_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = v10[1];
    unsigned int v12 = (void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v12 = *v10;
    v12[1] = v11;
  }
  swift_retain();
  return a1;
}

uint64_t destroy for IndexedIdentifierCollection(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(a1, AssociatedTypeWitness);

  return swift_release();
}

uint64_t initializeWithCopy for IndexedIdentifierCollection(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for IndexedIdentifierCollection(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = v8[1];
  *int v7 = *v8;
  v7[1] = v9;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for IndexedIdentifierCollection(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(_OWORD *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for IndexedIdentifierCollection(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v5)(a1, a2, AssociatedTypeWitness);
  *(_OWORD *)((*(void *)(v5 + 24) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((*(void *)(v5 + 24) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexedIdentifierCollection(_DWORD *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  if (v6 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v8 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v9 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    uint64_t v10 = v9 & 0xFFFFFFF8;
    if ((v9 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = a2 - v7 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187A0DF28);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v6 < 0x7FFFFFFF)
  {
    unint64_t v18 = *(void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (v18 >= 0xFFFFFFFF) {
      LODWORD(v18) = -1;
    }
    return (v18 + 1);
  }
  else
  {
    unsigned int v17 = *(uint64_t (**)(_DWORD *))(v5 + 48);
    return v17(a1);
  }
}

void storeEnumTagSinglePayload for IndexedIdentifierCollection(_DWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(v6 + 64);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v8 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v9 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v9 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v9)
  {
    if (((v8 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v9;
    }
    else {
      int v15 = 1;
    }
    if (((v8 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v9 + a2;
      bzero(a1, v10);
      *a1 = v16;
    }
    switch(v14)
    {
      case 1:
        *((unsigned char *)a1 + v10) = v15;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v10) = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)((char *)a1 + v10) = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      *((unsigned char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)((char *)a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x187A0E144);
    case 4:
      *(_DWORD *)((char *)a1 + v10) = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          unint64_t v18 = (void *)(((unint64_t)a1 + v8 + 7) & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = (a2 - 1);
          }
          *unint64_t v18 = v19;
        }
        else
        {
          unsigned int v17 = *(void (**)(_DWORD *, uint64_t))(v6 + 56);
          v17(a1, a2);
        }
      }
      return;
  }
}

uint64_t type metadata completion function for IndexedIdentifierCollection.Element()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for IndexedIdentifierCollection.Element(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = *(void *)(a3 + 24);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  uint64_t v12 = v8 + v11;
  unint64_t v13 = ((v8 + v11) & ~v11) + *(void *)(v10 + 64);
  uint64_t v14 = (*(unsigned char *)(v7 + 80) | *(unsigned char *)(v10 + 80));
  if (v14 > 7 || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v10 + 80)) & 0x100000) != 0 || v13 > 0x18)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  else
  {
    uint64_t v18 = ~v11;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, AssociatedTypeWitness);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)a1 + v12) & v18, ((unint64_t)a2 + v12) & v18, v9);
  }
  return a1;
}

uint64_t destroy for IndexedIdentifierCollection.Element(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8) + 8;
  (*(void (**)(uint64_t, uint64_t))v5)(a1, AssociatedTypeWitness);
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = (*(void *)(v5 + 56) + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8);
}

uint64_t initializeWithCopy for IndexedIdentifierCollection.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 16))((*(void *)(v7 + 48) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 48) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t assignWithCopy for IndexedIdentifierCollection.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))((*(void *)(v7 + 40) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 40) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t initializeWithTake for IndexedIdentifierCollection.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))((*(void *)(v7 + 32) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 32) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t assignWithTake for IndexedIdentifierCollection.Element(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, uint64_t))v7)(a1, a2, AssociatedTypeWitness);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 40))((*(void *)(v7 + 24) + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), (*(void *)(v7 + 24) + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for IndexedIdentifierCollection.Element(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + v11;
  if (a2 <= v12) {
    goto LABEL_24;
  }
  uint64_t v14 = (v13 & ~v11) + *(void *)(v9 + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v12 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)((char *)a1 + v14);
      if (!v16) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)((char *)a1 + v14);
      if (!*(unsigned __int16 *)((char *)a1 + v14)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v17 < 2)
    {
LABEL_24:
      if (v12)
      {
        if (v8 >= v10)
        {
          uint64_t v23 = *(uint64_t (**)(unsigned __int16 *))(v7 + 48);
          return v23(a1);
        }
        else
        {
          uint64_t v21 = *(uint64_t (**)(unint64_t, uint64_t))(v9 + 48);
          return v21(((unint64_t)a1 + v13) & ~v11, v10);
        }
      }
      return 0;
    }
  }
  int v16 = *((unsigned __int8 *)a1 + v14);
  if (!*((unsigned char *)a1 + v14)) {
    goto LABEL_24;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v18 = 0;
  }
  if (v14)
  {
    if (v14 <= 3) {
      int v19 = (v13 & ~v11) + *(_DWORD *)(v9 + 64);
    }
    else {
      int v19 = 4;
    }
    switch(v19)
    {
      case 2:
        int v20 = *a1;
        break;
      case 3:
        int v20 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v20 = *(_DWORD *)a1;
        break;
      default:
        int v20 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v20 = 0;
  }
  return v12 + (v20 | v18) + 1;
}

void storeEnumTagSinglePayload for IndexedIdentifierCollection.Element(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(void *)(*(void *)(a4 + 24) - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  if (v12 <= v10) {
    unsigned int v14 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v14 = *(_DWORD *)(v11 + 84);
  }
  uint64_t v15 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) + v13;
  size_t v16 = (v15 & ~v13) + *(void *)(v11 + 64);
  if (a3 <= v14)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v14 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v14 < a2)
  {
    unsigned int v18 = ~v14 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero(a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187A0ED44);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v10 >= v12)
        {
          uint64_t v23 = *(void (**)(unsigned char *, uint64_t))(v9 + 56);
          v23(a1, a2);
        }
        else
        {
          uint64_t v22 = *(void (**)(unint64_t, uint64_t, uint64_t))(v11 + 56);
          v22((unint64_t)&a1[v15] & ~v13, a2, v12);
        }
      }
      return;
  }
}

uint64_t sub_187A0ED6C()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in closure #1 in ForEach.init<A, B>(_:id:editActions:content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 40);
  type metadata accessor for Binding();
  swift_getAssociatedTypeWitness();
  return closure #1 in closure #1 in ForEach.init<A, B>(_:id:editActions:content:)(*(void *)(v1 + 16), v3, a1);
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v1 = *(void *)(v0 + 40);
  unint64_t v2 = (int *)(type metadata accessor for Binding() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  unint64_t v4 = v3 + *(void *)(*(void *)v2 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v3 + v2[10], v1);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v7, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in ForEach.init<A, B>(_:id:editActions:content:)(uint64_t a1)
{
  uint64_t v3 = v1[4];
  uint64_t v4 = v1[5];
  uint64_t v5 = *(void *)(type metadata accessor for Binding() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 96) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  return closure #2 in closure #1 in ForEach.init<A, B>(_:id:editActions:content:)(a1, v1[2], v1[3], (uint64_t)v1 + v6, (uint64_t)v1 + ((v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v3, v4);
}

uint64_t partial apply for closure #2 in EditableCollectionContent.init(data:editActions:content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for Binding() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return closure #2 in EditableCollectionContent.init(data:editActions:content:)(a1, a2, v8, v5, v6);
}

uint64_t objectdestroy_17Tm()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = (int *)(type metadata accessor for Binding() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[10], v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in EditableCollectionContent.init(data:editActions:content:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for Binding() - 8);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return closure #1 in EditableCollectionContent.init(data:editActions:content:)(a1, v6, v3, v4);
}

unint64_t type metadata accessor for MutableCollection & RangeReplaceableCollection()
{
  unint64_t result = lazy cache variable for type metadata for MutableCollection & RangeReplaceableCollection;
  if (!lazy cache variable for type metadata for MutableCollection & RangeReplaceableCollection)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MutableCollection & RangeReplaceableCollection);
  }
  return result;
}

uint64_t outlined destroy of (MutableCollection & RangeReplaceableCollection)?(uint64_t a1)
{
  type metadata accessor for (MutableCollection & RangeReplaceableCollection)?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (MutableCollection & RangeReplaceableCollection)?()
{
  if (!lazy cache variable for type metadata for (MutableCollection & RangeReplaceableCollection)?)
  {
    type metadata accessor for MutableCollection & RangeReplaceableCollection();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (MutableCollection & RangeReplaceableCollection)?);
    }
  }
}

uint64_t outlined init with copy of MutableCollection & RangeReplaceableCollection(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_187A0F66C()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in IndexedIdentifierCollection.init(_:id:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in IndexedIdentifierCollection.init(_:id:)(a1, *(void **)(v2+ ((*(void *)(*(void *)(*(void *)(v2 + 16) - 8) + 64)+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + 40), a2);
}

void static EditActions.delete.getter()
{
}

uint64_t _AutomaticNavigationStackStyle.makeBody(configuration:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *(void *)(result + 16);
  *(void *)a2 = *(void *)result;
  *(unsigned char *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  return result;
}

_UNKNOWN **sub_187A0F7A8()
{
  return &protocol witness table for NavigationStackCore<A>;
}

id CustomizableDocumentViewControllerRepresentable.makeUIViewController(context:)(uint64_t a1)
{
  char v2 = v1;
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = v1[16];
  uint64_t v6 = v2[14];
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v28 = *(void *)(a1 + 16);
    uint64_t v8 = v6 + 32;
    uint64_t v27 = v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      outlined init with copy of DocumentLaunchScreenAction(v8, &v30);
      outlined init with copy of DocumentCreationStrategy?((uint64_t)v31, (uint64_t)&v32, (uint64_t)&lazy cache variable for type metadata for DocumentCreationStrategy?, (uint64_t)type metadata accessor for DocumentCreationStrategy, (uint64_t (*)(void, uint64_t, uint64_t))_sSo6CGRectVSgMaTm_0);
      outlined destroy of DocumentLaunchScreenAction((uint64_t)&v30);
      if (v33)
      {
        outlined init with take of OptionalBinaryInteger(&v32, (uint64_t)v34);
        outlined init with take of OptionalBinaryInteger(v34, (uint64_t)&v32);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
        }
        unint64_t v11 = v9[2];
        unint64_t v10 = v9[3];
        if (v11 >= v10 >> 1) {
          uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v10 > 1), v11 + 1, 1, v9);
        }
        void v9[2] = v11 + 1;
        outlined init with take of OptionalBinaryInteger(&v32, (uint64_t)&v9[5 * v11 + 4]);
      }
      else
      {
        outlined destroy of DocumentCreationStrategy?((uint64_t)&v32, (uint64_t)&lazy cache variable for type metadata for DocumentCreationStrategy?, (uint64_t)type metadata accessor for DocumentCreationStrategy, (uint64_t (*)(void))_sSo6CGRectVSgMaTm_0);
      }
      v8 += 48;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
    uint64_t v4 = v28;
    uint64_t v5 = v27;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  }
  id v12 = objc_allocWithZone((Class)type metadata accessor for IdentifiedDocumentGroupDocumentCreation());
  uint64_t v13 = (char *)IdentifiedDocumentGroupDocumentCreation.init(configurations:strategies:)(v5, (uint64_t)v9);
  *(void *)&v13[OBJC_IVAR____TtC7SwiftUI39IdentifiedDocumentGroupDocumentCreation_documentBrowserContextMenu] = v2[15];
  uint64_t v14 = v2[8];
  if (v14)
  {
    uint64_t v30 = v3;
    v31[0] = v4;
    v34[0] = 0uLL;
    *(void *)&long long v32 = 0;
    swift_retain();
    swift_retain();
    uint64_t v29 = Text.resolveString(in:with:idiom:)();
    uint64_t v14 = v15;
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v29 = 0;
  }
  uint64_t v16 = v2[9];
  uint64_t v17 = v2[10];
  uint64_t v18 = v2[11];
  uint64_t v19 = v2[12];
  uint64_t v21 = v2[13];
  uint64_t v20 = v2[14];
  id v22 = objc_allocWithZone((Class)type metadata accessor for CustomizableDocumentViewController());
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of AppIntentExecutor?(v17);
  outlined copy of AppIntentExecutor?(v19);
  uint64_t v23 = v13;
  uint64_t v24 = (void *)specialized CustomizableDocumentViewController.init<A>(_:screenBackground:actions:backgroundAccessoryView:overlayAccessoryView:documentBrowserMediator:onDocumentClose:)(v29, v14, v16, v20, v17, v18, v19, v21, (uint64_t)v23, 0, 0);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v19);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
  swift_release();
  outlined init with copy of RootModifier((uint64_t)(v2 + 17), (uint64_t)&v30);
  id v25 = v24;
  DocumentViewController.rootModifier.setter((uint64_t)&v30);

  return v25;
}

void CustomizableDocumentViewControllerRepresentable.updateUIViewController(_:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = v3[8];
  if (v5)
  {
    uint64_t v6 = v3[5];
    uint64_t v7 = v3[6];
    uint64_t v8 = v3[7];
    uint64_t v9 = *(void *)(a2 + 16);
    v24[0] = *(void *)(a2 + 8);
    v24[1] = v9;
    outlined copy of Text?(v6, v7, v8, v5);
    swift_retain();
    swift_retain();
    uint64_t v10 = Text.resolveString(in:with:idiom:)();
    uint64_t v12 = v11;
    swift_release();
    swift_release();
    uint64_t v13 = (uint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_cardTitle);
    uint64_t v14 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_cardTitle + 8);
    if (v14
      && (*v13 == v10 ? (BOOL v15 = v14 == v12) : (BOOL v15 = 0), v15 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      outlined consume of Text.Storage(v6, v7, v8 & 1);
      swift_bridgeObjectRelease();
    }
    else
    {
      *uint64_t v13 = v10;
      v13[1] = v12;
      swift_bridgeObjectRelease();
      outlined consume of Text.Storage(v6, v7, v8 & 1);
    }
    swift_bridgeObjectRelease();
  }
  *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_actions) = v3[14];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_screenBackground) = v3[9];
  swift_retain();
  swift_release();
  uint64_t v16 = v3[10];
  uint64_t v17 = v3[11];
  uint64_t v18 = (uint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView);
  uint64_t v19 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView);
  *uint64_t v18 = v16;
  v18[1] = v17;
  outlined copy of AppIntentExecutor?(v16);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v19);
  uint64_t v20 = v3[12];
  uint64_t v21 = v3[13];
  id v22 = (uint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView);
  uint64_t v23 = *(void *)(a1 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView);
  *id v22 = v20;
  v22[1] = v21;
  outlined copy of AppIntentExecutor?(v20);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v23);
  outlined init with copy of RootModifier((uint64_t)(v3 + 17), (uint64_t)v24);
  DocumentViewController.rootModifier.setter((uint64_t)v24);
  CustomizableDocumentViewController.setupLaunchOptions()();
}

uint64_t closure #1 in static DocumentLaunchScreenAction.makeActions(from:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v28 = 0;
  memset(v27, 0, sizeof(v27));
  outlined init with copy of DocumentCreationStrategy?(a1 + 240, (uint64_t)__src, (uint64_t)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  if (*(void *)&__src[3] == 1)
  {
    outlined destroy of DocumentCreationStrategy?((uint64_t)__src, (uint64_t)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, (uint64_t (*)(void))type metadata accessor for AccessibilityValueStorage?);
    goto LABEL_5;
  }
  long long v25 = __src[0];
  v26[0] = __src[1];
  v26[1] = __src[2];
  void v26[2] = __src[3];
  if ((__src[1] & 8) == 0)
  {
    outlined destroy of PlatformItem.SelectionContent((uint64_t)&v25);
LABEL_5:
    outlined init with take of CGRect?(a1 + 24, (uint64_t)v23, (uint64_t)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
    outlined init with take of CGRect?((uint64_t)v23, (uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
    if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)v24) != 1 && v24[0])
    {
      id v4 = objc_msgSend(v24[0], sel_string);
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIAction);
    outlined init with copy of PlatformItem(a1, (uint64_t)__src);
    uint64_t v5 = swift_allocObject();
    memcpy((void *)(v5 + 16), __src, 0x150uLL);
    id v6 = (id)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
    goto LABEL_19;
  }
  outlined init with copy of DocumentCreationStrategy?((uint64_t)v26 + 8, (uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  if (v24[3])
  {
    outlined destroy of DocumentCreationStrategy?((uint64_t)v27, (uint64_t)&lazy cache variable for type metadata for DocumentCreationStrategy?, (uint64_t)type metadata accessor for DocumentCreationStrategy, (uint64_t (*)(void))_sSo6CGRectVSgMaTm_0);
    outlined init with take of OptionalBinaryInteger((long long *)v24, (uint64_t)__src);
    outlined init with copy of TableColumnList((uint64_t)__src, (uint64_t)v27);
    uint64_t v7 = *((void *)&__src[1] + 1);
    uint64_t v8 = *(void *)&__src[2];
    __swift_project_boxed_opaque_existential_1(__src, *((uint64_t *)&__src[1] + 1));
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
    uint64_t v11 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)__src);
    id v12 = (id)MEMORY[0x18C115780](v9, v11);
  }
  else
  {
    outlined destroy of DocumentCreationStrategy?((uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for PlatformItem.SelectionContent.AuxiliaryContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent.AuxiliaryContent, (uint64_t (*)(void))type metadata accessor for AccessibilityValueStorage?);
    id v12 = (id)*MEMORY[0x1E4FB2838];
  }
  id v6 = objc_msgSend(self, sel_createDocumentActionWithIntent_, v12);
  swift_bridgeObjectRelease();

  outlined init with take of CGRect?(a1 + 24, (uint64_t)v24, (uint64_t)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  outlined init with take of CGRect?((uint64_t)v24, (uint64_t)__src, (uint64_t)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?, (uint64_t)&type metadata for PlatformItem.PrimaryContent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)__src) != 1)
  {
    uint64_t v13 = *(void **)&__src[0];
    if (*(void *)&__src[0])
    {
      id v14 = v6;
      id v15 = objc_msgSend(v13, sel_string);
      uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v18 = v17;

      uint64_t v19 = HIBYTE(v18) & 0xF;
      if ((v18 & 0x2000000000000000) == 0) {
        uint64_t v19 = v16 & 0xFFFFFFFFFFFFLL;
      }
      if (!v19)
      {
        outlined destroy of PlatformItem.SelectionContent((uint64_t)&v25);

        swift_bridgeObjectRelease();
        goto LABEL_19;
      }
      uint64_t v20 = (void *)MEMORY[0x18C115780](v16, v18);
      swift_bridgeObjectRelease();
      objc_msgSend(v14, sel_setTitle_, v20);
    }
  }
  outlined destroy of PlatformItem.SelectionContent((uint64_t)&v25);
LABEL_19:
  *a2 = v6;
  return outlined init with take of CGRect?((uint64_t)v27, (uint64_t)(a2 + 1), (uint64_t)&lazy cache variable for type metadata for DocumentCreationStrategy?, (uint64_t)type metadata accessor for DocumentCreationStrategy, (uint64_t (*)(void, uint64_t, uint64_t))_sSo6CGRectVSgMaTm_0);
}

uint64_t closure #1 in closure #1 in static DocumentLaunchScreenAction.makeActions(from:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of DocumentCreationStrategy?(a2 + 240, (uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  if (v5 == 1) {
    return outlined destroy of DocumentCreationStrategy?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for PlatformItem.SelectionContent?, (uint64_t)&type metadata for PlatformItem.SelectionContent, (uint64_t (*)(void))type metadata accessor for AccessibilityValueStorage?);
  }
  uint64_t v3 = AGGraphClearUpdate();
  MEMORY[0x1F4188790](v3);
  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for ()?);
  static Update.ensure<A>(_:)();
  AGGraphSetUpdate();
  return outlined destroy of PlatformItem.SelectionContent((uint64_t)v4);
}

Swift::Void __swiftcall CustomizableDocumentViewController.setupLaunchOptions()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v93 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v93 - v7;
  DocumentViewController.setupLaunchOptions()();
  uint64_t v9 = &v0[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_cardTitle];
  uint64_t v10 = *(void **)&v0[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_cardTitle + 8];
  if (v10)
  {
    uint64_t v11 = *(void *)v9;
    swift_bridgeObjectRetain();
    id v12 = objc_msgSend(v1, sel_launchOptions);
    uint64_t v13 = (void *)MEMORY[0x18C115780](v11, v10);
    swift_bridgeObjectRelease();
    objc_msgSend(v12, sel_setTitle_, v13);
  }
  if (*(void *)&v1[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_screenBackground])
  {
    swift_retain();
    static UIBackgroundConfiguration.clear()();
    type metadata accessor for _UIHostingView<AnyView>();
    id v15 = objc_allocWithZone(v14);
    uint64_t v16 = swift_retain();
    specialized _UIHostingView.init(rootView:)(v16);
    swift_release();
    UIBackgroundConfiguration.customView.setter();
    uint64_t v10 = objc_msgSend(v1, sel_launchOptions);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v5, v8, v2);
    UIDocumentViewControllerLaunchOptions.background.setter();
    swift_release();

    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  uint64_t v17 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView];
  if (v17)
  {
    uint64_t v18 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView + 8];
    swift_retain();
    id v19 = objc_msgSend(v1, sel_launchOptions);
    uint64_t v20 = (char *)objc_msgSend(v19, sel_backgroundAccessoryView);

    if (v20)
    {
      type metadata accessor for DocumentAccessoryView();
      uint64_t v21 = swift_dynamicCastClass();
      if (v21)
      {
        uint64_t v10 = (void *)v21;
        id v22 = (uint64_t *)(v21
                        + OBJC_IVAR____TtC7SwiftUIP33_D03D906BE16D60978DB484CD1BCAACE321DocumentAccessoryView_viewProvider);
        uint64_t v5 = *(char **)(v21
                      + OBJC_IVAR____TtC7SwiftUIP33_D03D906BE16D60978DB484CD1BCAACE321DocumentAccessoryView_viewProvider
                      + 8);
        *id v22 = v17;
        v22[1] = v18;
        swift_retain();
        swift_release();
        DocumentAccessoryView.updateRootView()();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
        goto LABEL_12;
      }
    }
    uint64_t v5 = (char *)objc_msgSend(v1, sel_launchOptions);
    uint64_t v23 = (objc_class *)type metadata accessor for DocumentAccessoryView();
    uint64_t v24 = (char *)objc_allocWithZone(v23);
    long long v25 = (uint64_t *)&v24[OBJC_IVAR____TtC7SwiftUIP33_D03D906BE16D60978DB484CD1BCAACE321DocumentAccessoryView_viewProvider];
    uint64_t *v25 = v17;
    v25[1] = v18;
    outlined copy of AppIntentExecutor?(v17);
    outlined copy of AppIntentExecutor?(v17);
    uint64_t v26 = v24;
    uint64_t v27 = AnyView.init<A>(_:)();
    type metadata accessor for _UIHostingView<AnyView>();
    id v29 = objc_allocWithZone(v28);
    uint64_t v30 = specialized _UIHostingView.init(rootView:)(v27);
    swift_release();
    *(void *)&v26[OBJC_IVAR____TtC7SwiftUIP33_D03D906BE16D60978DB484CD1BCAACE321DocumentAccessoryView_hostingView] = v30;

    v94.receiver = v26;
    v94.super_class = v23;
    uint64_t v31 = (char *)objc_msgSendSuper2(&v94, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    uint64_t v32 = OBJC_IVAR____TtC7SwiftUIP33_D03D906BE16D60978DB484CD1BCAACE321DocumentAccessoryView_hostingView;
    uint64_t v33 = *(void *)&v31[OBJC_IVAR____TtC7SwiftUIP33_D03D906BE16D60978DB484CD1BCAACE321DocumentAccessoryView_hostingView];
    uint64_t v34 = v31;
    objc_msgSend(v34, sel_addSubview_, v33);
    uint64_t v35 = *(void **)&v31[v32];
    uint64_t v20 = v34;
    uint64_t v10 = v35;
    UIView.constrainToView(_:exceptEdges:identifier:)(v20, 0, 0xD000000000000015, (void *)0x800000018836FE30);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
    swift_bridgeObjectRelease();

    objc_msgSend(v5, sel_setBackgroundAccessoryView_, v20);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v17);
  }
  else
  {
    uint64_t v20 = (char *)objc_msgSend(v1, sel_launchOptions);
    objc_msgSend(v20, sel_setBackgroundAccessoryView_, 0);
  }
LABEL_12:

  uint64_t v36 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView];
  if (v36)
  {
    uint64_t v37 = *(void *)&v1[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView + 8];
    swift_retain();
    id v38 = objc_msgSend(v1, sel_launchOptions);
    uint64_t v39 = (char *)objc_msgSend(v38, sel_foregroundAccessoryView);

    if (v39)
    {
      type metadata accessor for DocumentAccessoryView();
      uint64_t v40 = swift_dynamicCastClass();
      if (v40)
      {
        uint64_t v10 = (void *)v40;
        uint64_t v41 = (uint64_t *)(v40
                        + OBJC_IVAR____TtC7SwiftUIP33_D03D906BE16D60978DB484CD1BCAACE321DocumentAccessoryView_viewProvider);
        uint64_t v5 = *(char **)(v40
                      + OBJC_IVAR____TtC7SwiftUIP33_D03D906BE16D60978DB484CD1BCAACE321DocumentAccessoryView_viewProvider
                      + 8);
        *uint64_t v41 = v36;
        v41[1] = v37;
        swift_retain();
        swift_release();
        DocumentAccessoryView.updateRootView()();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v36);
        goto LABEL_19;
      }
    }
    uint64_t v5 = (char *)objc_msgSend(v1, sel_launchOptions);
    uint64_t v42 = (objc_class *)type metadata accessor for DocumentAccessoryView();
    uint64_t v43 = (char *)objc_allocWithZone(v42);
    uint64_t v44 = (uint64_t *)&v43[OBJC_IVAR____TtC7SwiftUIP33_D03D906BE16D60978DB484CD1BCAACE321DocumentAccessoryView_viewProvider];
    *uint64_t v44 = v36;
    v44[1] = v37;
    outlined copy of AppIntentExecutor?(v36);
    outlined copy of AppIntentExecutor?(v36);
    uint64_t v45 = v43;
    uint64_t v46 = AnyView.init<A>(_:)();
    type metadata accessor for _UIHostingView<AnyView>();
    id v48 = objc_allocWithZone(v47);
    uint64_t v49 = specialized _UIHostingView.init(rootView:)(v46);
    swift_release();
    *(void *)&v45[OBJC_IVAR____TtC7SwiftUIP33_D03D906BE16D60978DB484CD1BCAACE321DocumentAccessoryView_hostingView] = v49;

    v95.receiver = v45;
    v95.super_class = v42;
    uint64_t v50 = (char *)objc_msgSendSuper2(&v95, sel_initWithFrame_, 0.0, 0.0, 0.0, 0.0);
    uint64_t v51 = OBJC_IVAR____TtC7SwiftUIP33_D03D906BE16D60978DB484CD1BCAACE321DocumentAccessoryView_hostingView;
    uint64_t v52 = *(void *)&v50[OBJC_IVAR____TtC7SwiftUIP33_D03D906BE16D60978DB484CD1BCAACE321DocumentAccessoryView_hostingView];
    uint64_t v53 = v50;
    objc_msgSend(v53, sel_addSubview_, v52);
    uint64_t v54 = *(void **)&v50[v51];
    uint64_t v39 = v53;
    uint64_t v10 = v54;
    UIView.constrainToView(_:exceptEdges:identifier:)(v39, 0, 0xD000000000000015, (void *)0x800000018836FE30);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v36);
    swift_bridgeObjectRelease();

    objc_msgSend(v5, sel_setForegroundAccessoryView_, v39);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v36);
  }
  else
  {
    uint64_t v39 = (char *)objc_msgSend(v1, sel_launchOptions);
    objc_msgSend(v39, sel_setForegroundAccessoryView_, 0);
  }
LABEL_19:

  uint64_t v55 = OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_actions;
  uint64_t v56 = *(void *)(*(void *)&v1[OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_actions] + 16);
  switch(v56)
  {
    case 2:
      uint64_t v59 = objc_msgSend(v1, sel_launchOptions);
      uint64_t v60 = *(void *)&v1[v55];
      if (*(void *)(v60 + 16))
      {
        uint64_t v10 = v59;
        uint64_t v36 = (uint64_t)*(id *)(v60 + 32);
        objc_msgSend(v10, sel_setPrimaryAction_, v36);

        id v61 = objc_msgSend(v1, sel_launchOptions);
        uint64_t v62 = *(void *)&v1[v55];
        if (*(void *)(v62 + 16) >= 2uLL)
        {
          uint64_t v63 = v61;
          id v64 = *(id *)(v62 + 80);
          objc_msgSend(v63, sel_setSecondaryAction_, v64);

          id v58 = objc_msgSend(v1, sel_launchOptions);
          goto LABEL_28;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_50;
    case 1:
      id v65 = objc_msgSend(v1, sel_launchOptions);
      uint64_t v66 = *(void *)&v1[v55];
      if (*(void *)(v66 + 16))
      {
        uint64_t v67 = v65;
        id v68 = *(id *)(v66 + 32);
        objc_msgSend(v67, sel_setPrimaryAction_, v68);

        id v69 = objc_msgSend(v1, sel_launchOptions);
        objc_msgSend(v69, sel_setSecondaryAction_, 0);

        id v58 = objc_msgSend(v1, sel_launchOptions);
        goto LABEL_28;
      }
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    case 0:
      id v57 = objc_msgSend(v1, sel_launchOptions);
      objc_msgSend(v57, sel_setSecondaryAction_, 0);

      id v58 = objc_msgSend(v1, sel_launchOptions);
LABEL_28:
      id v70 = v58;
      objc_msgSend(v70, sel__setSecondaryMenu_, 0);
      goto LABEL_47;
  }
  id v71 = objc_msgSend(v1, sel_launchOptions);
  uint64_t v72 = *(void *)&v1[v55];
  if (!*(void *)(v72 + 16)) {
    goto LABEL_51;
  }
  uint64_t v73 = v71;
  id v74 = *(id *)(v72 + 32);
  objc_msgSend(v73, sel_setPrimaryAction_, v74);

  id v75 = objc_msgSend(v1, sel_launchOptions);
  objc_msgSend(v75, sel_setSecondaryAction_, 0);

  uint64_t v10 = *(void **)&v1[v55];
  uint64_t v5 = (char *)v10[2];
  uint64_t v36 = v5 != 0;
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  uint64_t v76 = swift_dynamicCastClass();
  if (!v76)
  {
    swift_bridgeObjectRelease();
    uint64_t v76 = MEMORY[0x1E4FBC860];
  }
  uint64_t v77 = *(char **)(v76 + 16);
  swift_release();
  if (v77 == &v5[-v36])
  {
    uint64_t v78 = swift_dynamicCastClass();
    if (!v78)
    {
      swift_bridgeObjectRelease();
      uint64_t v78 = MEMORY[0x1E4FBC860];
    }
    goto LABEL_35;
  }
LABEL_52:
  swift_bridgeObjectRelease();
  specialized _copyCollectionToContiguousArray<A>(_:)((uint64_t)v10, (uint64_t)(v10 + 4), v36, (2 * (void)v5) | 1);
  uint64_t v78 = v91;
LABEL_35:
  swift_bridgeObjectRelease();
  uint64_t v79 = *(void *)(v78 + 16);
  if (v79)
  {
    uint64_t v80 = v78 + 32;
    while (1)
    {
      outlined init with copy of DocumentLaunchScreenAction(v80, &v97);
      outlined init with copy of DocumentCreationStrategy?((uint64_t)&v98, (uint64_t)v96, (uint64_t)&lazy cache variable for type metadata for DocumentCreationStrategy?, (uint64_t)type metadata accessor for DocumentCreationStrategy, (uint64_t (*)(void, uint64_t, uint64_t))_sSo6CGRectVSgMaTm_0);
      uint64_t v81 = v96[3];
      outlined destroy of DocumentCreationStrategy?((uint64_t)v96, (uint64_t)&lazy cache variable for type metadata for DocumentCreationStrategy?, (uint64_t)type metadata accessor for DocumentCreationStrategy, (uint64_t (*)(void))_sSo6CGRectVSgMaTm_0);
      outlined destroy of DocumentLaunchScreenAction((uint64_t)&v97);
      if (v81) {
        break;
      }
      v80 += 48;
      if (!--v79) {
        goto LABEL_41;
      }
    }
    MEMORY[0x18C112B90](0x10000000000000CDLL, 0x800000018832EDA0);
  }
LABEL_41:
  id v82 = objc_msgSend(v1, sel_launchOptions);
  char v83 = MEMORY[0x18C115780](0xD00000000000001ALL, 0x800000018832ED80);
  uint64_t v84 = *(void *)(v78 + 16);
  if (v84)
  {
    v96[0] = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v85 = v78 + 32;
    do
    {
      outlined init with copy of DocumentLaunchScreenAction(v85, &v97);
      id v86 = v97;
      outlined destroy of DocumentLaunchScreenAction((uint64_t)&v97);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v85 += 48;
      --v84;
    }
    while (v84);
    UIMenuElementSize v87 = v96[0];
    swift_release();
  }
  else
  {
    swift_release();
    UIMenuElementSize v87 = MEMORY[0x1E4FBC860];
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIMenu);
  v88._countAndFlagsBits = 0;
  v88._object = (void *)0xE000000000000000;
  v99.value.super.Class isa = 0;
  v99.is_nil = v83;
  UIMenu.init(title:subtitle:image:identifier:options:preferredElementSize:children:)(v89, v88, (Swift::String_optional)0, v99, 0, 0xFFFFFFFFFFFFFFFFLL, v87, v92);
  id v70 = v90;
  objc_msgSend(v82, sel__setSecondaryMenu_, v90);

LABEL_47:
}

uint64_t CustomizableDocumentViewController.__ivar_destroyer()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_backgroundAccessoryView));
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI34CustomizableDocumentViewController_overlayAccessoryView);

  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v1);
}

id CustomizableDocumentViewController.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustomizableDocumentViewController();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for CustomizableDocumentViewController()
{
  return self;
}

uint64_t DocumentAccessoryView.updateRootView()()
{
  uint64_t v1 = v0;
  objc_super v2 = [(UIView *)v0 layoutMarginsGuide];
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UILayoutGuide);
  UIPopoverPresentationControllerSourceItem.frame(in:)(&v20, v1);

  uint64_t result = outlined init with take of CGRect?((uint64_t)&v20, (uint64_t)&v21, (uint64_t)&lazy cache variable for type metadata for CGRect?, (uint64_t)type metadata accessor for CGRect, (uint64_t (*)(void, uint64_t, uint64_t))_sSo6CGRectVSgMaTm_0);
  if ((v24 & 1) == 0)
  {
    long long v15 = v21;
    uint64_t v4 = v22;
    uint64_t v5 = v23;
    [(UIView *)v1 frame];
    uint64_t v6 = *(Class *)((char *)&v1->super.super.isa
                  + OBJC_IVAR____TtC7SwiftUIP33_D03D906BE16D60978DB484CD1BCAACE321DocumentAccessoryView_hostingView);
    uint64_t v7 = *(uint64_t (**)(void *))((char *)&v1->super.super.isa
                                            + OBJC_IVAR____TtC7SwiftUIP33_D03D906BE16D60978DB484CD1BCAACE321DocumentAccessoryView_viewProvider);
    v16[0] = v8;
    v16[1] = v9;
    void v16[2] = v10;
    v16[3] = v11;
    long long v17 = v15;
    uint64_t v18 = v4;
    uint64_t v19 = v5;
    id v12 = v6;
    swift_retain();
    uint64_t v13 = v7(v16);
    swift_release();
    static Transaction.current.getter();
    Class v14 = (void *)((char *)v12 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v12) + 0x60));
    swift_beginAccess();
    *Class v14 = v13;
    swift_retain();
    swift_release();
    swift_allocObject();
    swift_unknownObjectWeakInit();
    swift_retain();
    swift_retain();
    default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
    GraphHost.asyncTransaction(_:id:_:)();
    swift_release();

    swift_release();
    swift_release_n();
    return swift_release();
  }
  return result;
}

char *DocumentAccessoryView.hitTest(_:with:)(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = v3;
  v15.receiver = v4;
  v15.super_class = (Class)swift_getObjectType();
  uint64_t v8 = (char *)objc_msgSendSuper2(&v15, sel_hitTest_withEvent_, a1, a2, a3);
  if (v8) {
    BOOL v9 = v8 == v4;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9) {
    goto LABEL_7;
  }
  uint64_t v10 = v8;
  if (v8)
  {
    uint64_t v11 = *(void **)&v4[OBJC_IVAR____TtC7SwiftUIP33_D03D906BE16D60978DB484CD1BCAACE321DocumentAccessoryView_hostingView];
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    id v12 = v11;
    uint64_t v4 = v10;
    char v13 = static NSObject.== infix(_:_:)();

    if (v13)
    {
LABEL_7:

      return 0;
    }
  }
  return v10;
}

uint64_t type metadata accessor for DocumentAccessoryView()
{
  return self;
}

void destroy for DocumentLaunchScreenAction(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
}

void *initializeWithCopy for DocumentLaunchScreenAction(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  *a1 = *(void *)a2;
  uint64_t v5 = a1 + 1;
  uint64_t v6 = a2 + 8;
  uint64_t v7 = *(void *)(a2 + 32);
  id v8 = v4;
  if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 40);
    a1[4] = v7;
    a1[5] = v9;
    (**(void (***)(void *, uint64_t, uint64_t))(v7 - 8))(v5, v6, v7);
  }
  else
  {
    long long v10 = *(_OWORD *)(v6 + 16);
    *(_OWORD *)uint64_t v5 = *(_OWORD *)v6;
    *((_OWORD *)v5 + 1) = v10;
    _OWORD v5[4] = *(void *)(v6 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for DocumentLaunchScreenAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 32);
  if (!*(void *)(a1 + 32))
  {
    if (v7)
    {
      *(void *)(a1 + 32) = v7;
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 8, a2 + 8);
      return a1;
    }
LABEL_7:
    long long v8 = *(_OWORD *)(a2 + 8);
    long long v9 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 8) = v8;
    *(_OWORD *)(a1 + 24) = v9;
    return a1;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  return a1;
}

uint64_t assignWithTake for DocumentLaunchScreenAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  if (*(void *)(a1 + 32)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  long long v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

ValueMetadata *type metadata accessor for DocumentLaunchScreenAction()
{
  return &type metadata for DocumentLaunchScreenAction;
}

uint64_t sub_187A11818()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void *outlined init with copy of DocumentLaunchScreenAction(uint64_t a1, void *a2)
{
  return a2;
}

unint64_t type metadata accessor for DocumentCreationStrategy()
{
  unint64_t result = lazy cache variable for type metadata for DocumentCreationStrategy;
  if (!lazy cache variable for type metadata for DocumentCreationStrategy)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for DocumentCreationStrategy);
  }
  return result;
}

uint64_t outlined destroy of DocumentLaunchScreenAction(uint64_t a1)
{
  return a1;
}

void type metadata accessor for _UIHostingView<AnyView>()
{
  if (!lazy cache variable for type metadata for _UIHostingView<AnyView>)
  {
    unint64_t v0 = type metadata accessor for _UIHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>);
    }
  }
}

uint64_t specialized static DocumentLaunchScreenAction.makeActions(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v4 = v1 + 32;
    do
    {
      outlined init with copy of PlatformItem(v4, (uint64_t)v11);
      closure #1 in static DocumentLaunchScreenAction.makeActions(from:)((uint64_t)v11, v12);
      outlined destroy of PlatformItem((uint64_t)v11);
      uint64_t v3 = v13;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v3 + 16) + 1, 1);
        uint64_t v3 = v13;
      }
      unint64_t v6 = *(void *)(v3 + 16);
      unint64_t v5 = *(void *)(v3 + 24);
      if (v6 >= v5 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1);
        uint64_t v3 = v13;
      }
      *(void *)(v3 + 16) = v6 + 1;
      uint64_t v7 = (_OWORD *)(v3 + 48 * v6);
      long long v8 = v12[0];
      long long v9 = v12[2];
      void v7[3] = v12[1];
      v7[4] = v9;
      void v7[2] = v8;
      v4 += 336;
      --v2;
    }
    while (v2);
  }
  return v3;
}

uint64_t outlined init with copy of DocumentCreationStrategy?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t outlined destroy of DocumentCreationStrategy?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t sub_187A11B78()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void **)(v0 + 40);
  if (v1 != (void *)1)
  {

    uint64_t v2 = *(void *)(v0 + 184);
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v4 = *(unsigned __int8 *)(v0 + 72);
      if (v4 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v0 + 64), v4);
        uint64_t v2 = *(void *)(v0 + 184);
        unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v3 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(v0 + 168), *(void *)(v0 + 176), v2);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    swift_release();
  }
  if (*(void *)(v0 + 304) >= 2uLL) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 280);
  }
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in static DocumentLaunchScreenAction.makeActions(from:)(uint64_t a1)
{
  return closure #1 in closure #1 in static DocumentLaunchScreenAction.makeActions(from:)(a1, v1 + 16);
}

uint64_t outlined destroy of PlatformItem.SelectionContent(uint64_t a1)
{
  return a1;
}

void (**partial apply for closure #1 in closure #1 in PlatformItem.SelectionContent.select()@<X0>(char *a1@<X8>))(uint64_t)
{
  return closure #1 in closure #1 in PlatformItem.SelectionContent.select()(a1);
}

uint64_t destroy for CustomizableDocumentViewControllerRepresentable(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(a1 + 24)) {
    swift_release();
  }
  if (*(void *)(a1 + 64))
  {
    outlined consume of Text.Storage(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
    swift_bridgeObjectRelease();
  }
  swift_release();
  if (*(void *)(a1 + 80)) {
    swift_release();
  }
  if (*(void *)(a1 + 96)) {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  swift_weakDestroy();
  uint64_t result = swift_weakDestroy();
  if (*(void *)(a1 + 184)) {
    uint64_t result = __swift_destroy_boxed_opaque_existential_1(a1 + 160);
  }
  int v3 = *(unsigned __int8 *)(a1 + 224);
  if (v3 != 255)
  {
    uint64_t v4 = *(void *)(a1 + 208);
    uint64_t v5 = *(void *)(a1 + 216);
    return outlined consume of SceneID(v4, v5, v3 & 1);
  }
  return result;
}

uint64_t initializeWithCopy for CustomizableDocumentViewControllerRepresentable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  unint64_t v6 = (_OWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_retain();
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v7;
    swift_retain();
    uint64_t v8 = *(void *)(a2 + 64);
    if (v8)
    {
LABEL_3:
      uint64_t v9 = *(void *)(a2 + 40);
      uint64_t v10 = *(void *)(a2 + 48);
      char v11 = *(unsigned char *)(a2 + 56);
      outlined copy of Text.Storage(v9, v10, v11);
      *(void *)(a1 + 40) = v9;
      *(void *)(a1 + 48) = v10;
      *(unsigned char *)(a1 + 56) = v11;
      *(void *)(a1 + 64) = v8;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    }
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *v6;
    uint64_t v8 = *(void *)(a2 + 64);
    if (v8) {
      goto LABEL_3;
    }
  }
  long long v12 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v12;
LABEL_6:
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  if (v13)
  {
    uint64_t v14 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v13;
    *(void *)(a1 + 88) = v14;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  }
  uint64_t v15 = *(void *)(a2 + 96);
  if (v15)
  {
    uint64_t v16 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v15;
    *(void *)(a1 + 104) = v16;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  }
  uint64_t v17 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v17;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_weakCopyInit();
  swift_weakCopyInit();
  swift_weakCopyInit();
  uint64_t v18 = (_OWORD *)(a1 + 160);
  uint64_t v19 = (_OWORD *)(a2 + 160);
  uint64_t v20 = *(void *)(a2 + 184);
  if (v20)
  {
    uint64_t v21 = *(void *)(a2 + 192);
    *(void *)(a1 + 184) = v20;
    *(void *)(a1 + 192) = v21;
    (**(void (***)(_OWORD *, _OWORD *))(v20 - 8))(v18, v19);
  }
  else
  {
    long long v22 = *(_OWORD *)(a2 + 176);
    *uint64_t v18 = *v19;
    *(_OWORD *)(a1 + 176) = v22;
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
  }
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  int v23 = *(unsigned __int8 *)(a2 + 224);
  if (v23 == 255)
  {
    *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  }
  else
  {
    char v24 = v23 & 1;
    uint64_t v25 = *(void *)(a2 + 208);
    uint64_t v26 = *(void *)(a2 + 216);
    outlined copy of SceneID(v25, v26, v23 & 1);
    *(void *)(a1 + 208) = v25;
    *(void *)(a1 + 216) = v26;
    *(unsigned char *)(a1 + 224) = v24;
  }
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  return a1;
}

uint64_t initializeWithTake for CustomizableDocumentViewControllerRepresentable(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  long long v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  long long v7 = *(_OWORD *)(a2 + 32);
  long long v8 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 48) = v8;
  swift_weakTakeInit();
  swift_weakTakeInit();
  swift_weakTakeInit();
  long long v9 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v9;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  return a1;
}

uint64_t assignWithTake for CustomizableDocumentViewControllerRepresentable(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v5)
    {
      uint64_t v6 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = v5;
      *(void *)(a1 + 32) = v6;
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = v7;
    goto LABEL_8;
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
LABEL_8:
  if (*(void *)(a1 + 64))
  {
    uint64_t v8 = *(void *)(a2 + 64);
    if (v8)
    {
      char v9 = *(unsigned char *)(a2 + 56);
      uint64_t v10 = *(void *)(a1 + 40);
      uint64_t v11 = *(void *)(a1 + 48);
      char v12 = *(unsigned char *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 64) = v8;
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    outlined destroy of Text(a1 + 40);
  }
  long long v13 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v13;
LABEL_13:
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  uint64_t v14 = *(void *)(a2 + 80);
  if (*(void *)(a1 + 80))
  {
    if (v14)
    {
      uint64_t v15 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v14;
      *(void *)(a1 + 88) = v15;
      swift_release();
      goto LABEL_20;
    }
    swift_release();
  }
  else if (v14)
  {
    uint64_t v16 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v14;
    *(void *)(a1 + 88) = v16;
    goto LABEL_20;
  }
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
LABEL_20:
  uint64_t v17 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v17)
    {
      uint64_t v18 = *(void *)(a2 + 104);
      *(void *)(a1 + 96) = v17;
      *(void *)(a1 + 104) = v18;
      swift_release();
      goto LABEL_27;
    }
    swift_release();
  }
  else if (v17)
  {
    uint64_t v19 = *(void *)(a2 + 104);
    *(void *)(a1 + 96) = v17;
    *(void *)(a1 + 104) = v19;
    goto LABEL_27;
  }
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
LABEL_27:
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  swift_weakTakeAssign();
  if (*(void *)(a1 + 184))
  {
    if (*(void *)(a2 + 184)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 160);
    }
    else {
      outlined destroy of AnyHashable(a1 + 160);
    }
  }
  long long v20 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v20;
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
  uint64_t v21 = (_OWORD *)(a2 + 208);
  int v22 = *(unsigned __int8 *)(a1 + 224);
  if (v22 != 255)
  {
    int v23 = *(unsigned __int8 *)(a2 + 224);
    if (v23 != 255)
    {
      uint64_t v24 = *(void *)(a1 + 208);
      uint64_t v25 = *(void *)(a1 + 216);
      *(_OWORD *)(a1 + 208) = *v21;
      *(unsigned char *)(a1 + 224) = v23 & 1;
      outlined consume of SceneID(v24, v25, v22 & 1);
      goto LABEL_36;
    }
    outlined destroy of SceneID(a1 + 208);
  }
  *(_OWORD *)(a1 + 208) = *v21;
  *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
LABEL_36:
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustomizableDocumentViewControllerRepresentable(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 240)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustomizableDocumentViewControllerRepresentable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 240) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 240) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CustomizableDocumentViewControllerRepresentable()
{
  return &type metadata for CustomizableDocumentViewControllerRepresentable;
}

uint64_t _GeometryActionModifier.value.getter(uint64_t a1)
{
  return a1;
}

uint64_t _GeometryActionModifier.value.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *unint64_t v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*_GeometryActionModifier.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _GeometryActionModifier.action.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t _GeometryActionModifier.action.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_release();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*_GeometryActionModifier.action.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t (*_GeometryActionModifier2.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t key path getter for _GeometryActionModifier.action : <A>_GeometryActionModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v7 = a3 + a2;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = *(_OWORD *)(v7 - 16);
  *(void *)(v10 + 32) = v9;
  *(void *)(v10 + 40) = v8;
  *a5 = a4;
  a5[1] = v10;

  return swift_retain();
}

uint64_t (*_GeometryActionModifier2.action.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t static _GeometryActionModifier2._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  return static _GeometryActionModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t, double))type metadata accessor for _GeometryActionModifier2, a7, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t _GeometryActionModifier2.action(oldValue:newValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t protocol witness for GeometryActionProvider.action(oldValue:newValue:) in conformance _GeometryActionModifier2<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _GeometryActionModifier2.action(oldValue:newValue:)(a1, a2, a3, a4, *(uint64_t (**)(void))(v4 + 16));
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _GeometryActionModifier2<A>@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static _GeometryActionModifier2._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t implicit closure #1 in GeometryActionBinder.dispatch(value:)()
{
  return 0x797274656D6F6547;
}

uint64_t View.onGeometryChange<A>(for:of:action:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v12[0] = a2;
  v12[1] = a3;
  v12[2] = a4;
  _OWORD v12[3] = a5;
  uint64_t v10 = type metadata accessor for _GeometryActionModifier2();
  swift_retain();
  swift_retain();
  MEMORY[0x18C113660](v12, a6, v10, a8);
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for _GeometryActionModifier2()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in _GeometryActionModifier2<A>()
{
  return &protocol witness table for _GeometryActionModifier2<A>;
}

uint64_t sub_187A12758()
{
  return 16;
}

__n128 sub_187A12764(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A12770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return key path getter for _GeometryActionModifier.action : <A>_GeometryActionModifier<A>(a1, a2, a3, (uint64_t)_sxIegn_xytIegnr_SQRzlTRTA_0, a4);
}

uint64_t sub_187A127A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _GeometryActionModifier.action : <A>_GeometryActionModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_1ED47D7A8, (uint64_t)_sxytIegnr_xIegn_SQRzlTRTA_0);
}

uint64_t sub_187A127D8()
{
  return 16;
}

__n128 sub_187A127E4(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t keypath_setTm(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  swift_retain();
  uint64_t result = swift_release();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_187A1283C()
{
  return 16;
}

__n128 sub_187A12848(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A12854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return key path getter for _GeometryActionModifier.action : <A>_GeometryActionModifier<A>(a1, a2, a3, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?, @in_guaranteed A) -> (), a4);
}

uint64_t sub_187A12888(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for _GeometryActionModifier.action : <A>_GeometryActionModifier<A>(a1, a2, a3, a4, (uint64_t)&unk_1ED47D758, (uint64_t)partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A?, @in_guaranteed A) -> (@out ()));
}

uint64_t sub_187A128BC()
{
  return 16;
}

__n128 sub_187A128C8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_187A128D4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA23_GeometryActionModifierVyqd__GGAaBHPxAaBHD1__AgA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _GeometryActionModifier);
}

uint64_t sub_187A128F4(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA23_GeometryActionModifierVyqd__GGAaBHPxAaBHD1__AgA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for _GeometryActionModifier2);
}

uint64_t get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA23_GeometryActionModifierVyqd__GGAaBHPxAaBHD1__AgA0cH0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for GeometryActionBinder(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  unint64_t v8 = v6 | 3;
  unint64_t v9 = ~v8;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v10 = *(void *)(v5 + 64);
  }
  else {
    size_t v10 = *(void *)(v5 + 64) + 1;
  }
  size_t v11 = v10 + v6;
  unint64_t v12 = ((v6 + 9) & ~(unint64_t)v6)
      + v10
      + ((v11 + (v11 & ~(unint64_t)v6)) & ~(unint64_t)v6);
  int v13 = v6 & 0x100000;
  if (v8 > 7
    || v13 != 0
    || ((v7 + 4 + ((((((v7 + 28) & ~(v7 | 3)) + v12 + 19) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)) & ~v7)
     + v10 > 0x18)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v17 = v16 + ((v7 + 16) & v9);
    swift_retain();
  }
  else
  {
    uint64_t v18 = AssociatedTypeWitness;
    uint64_t v54 = v7 + 4;
    uint64_t v55 = a1;
    uint64_t v19 = ~v7;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    long long v20 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v21 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *long long v20 = *v21;
    int v22 = (_DWORD *)(((unint64_t)v20 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    int v23 = (_DWORD *)(((unint64_t)v21 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *int v22 = *v23;
    uint64_t v24 = (_DWORD *)(((unint64_t)v22 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v25 = (_DWORD *)(((unint64_t)v23 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v24 = *v25;
    uint64_t v26 = (_DWORD *)(((unint64_t)v24 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v27 = (_DWORD *)(((unint64_t)v25 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v26 = *v27;
    Class v28 = (_DWORD *)(((unint64_t)v26 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    id v29 = (_DWORD *)(((unint64_t)v27 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *Class v28 = *v29;
    uint64_t v30 = (_DWORD *)(((unint64_t)v28 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v31 = (_DWORD *)(((unint64_t)v29 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v30 = *v31;
    uint64_t v53 = (_DWORD *)(((unint64_t)v31 + v8 + 4) & v9);
    uint64_t v52 = (_DWORD *)(((unint64_t)v30 + v8 + 4) & v9);
    *uint64_t v52 = *v53;
    unint64_t v32 = ((unint64_t)v52 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v33 = ((unint64_t)v53 + 7) & 0xFFFFFFFFFFFFFFFCLL;
    *(_DWORD *)unint64_t v32 = *(_DWORD *)v33;
    *(unsigned char *)(v32 + 4) = *(unsigned char *)(v33 + 4);
    uint64_t v34 = v7 + 5;
    uint64_t v35 = (void *)((v34 + v32) & v19);
    uint64_t v36 = (const void *)((v34 + v33) & v19);
    uint64_t v37 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    if (v37((v34 + v33) & v19, 1, AssociatedTypeWitness))
    {
      memcpy(v35, v36, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v35, v36, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v35, 0, 1, v18);
    }
    id v38 = (void *)(((unint64_t)v35 + v11) & v19);
    uint64_t v39 = (const void *)(((unint64_t)v36 + v11) & v19);
    if (v37((unint64_t)v39, 1, v18))
    {
      memcpy(v38, v39, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v38, v39, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v38, 0, 1, v18);
    }
    uint64_t v40 = (void *)(((unint64_t)v38 + v11) & v19);
    uint64_t v41 = (const void *)(((unint64_t)v39 + v11) & v19);
    if (v37((unint64_t)v41, 1, v18))
    {
      memcpy(v40, v41, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v40, v41, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v40, 0, 1, v18);
    }
    uint64_t v42 = (void *)(((unint64_t)v52 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v43 = (uint64_t *)(((unint64_t)v53 + v12 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v44 = *v43;
    *(void *)((char *)v42 + 5) = *(uint64_t *)((char *)v43 + 5);
    *uint64_t v42 = v44;
    uint64_t v45 = (_DWORD *)(((unint64_t)v52 + v12 + 19) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v46 = (_DWORD *)(((unint64_t)v53 + v12 + 19) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v45 = *v46;
    Class v47 = (_DWORD *)(((unint64_t)v45 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    id v48 = (_DWORD *)(((unint64_t)v46 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *Class v47 = *v48;
    uint64_t v49 = (void *)(((unint64_t)v47 + v54) & v19);
    uint64_t v50 = (const void *)(((unint64_t)v48 + v54) & v19);
    if (v37((unint64_t)v50, 1, v18))
    {
      memcpy(v49, v50, v10);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v49, v50, v18);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v49, 0, 1, v18);
    }
    return v55;
  }
  return (uint64_t *)v17;
}

uint64_t destroy for GeometryActionBinder(uint64_t a1)
{
  unint64_t v1 = (((((((((((a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)
        + 7) & 0xFFFFFFFFFFFFFFFCLL)
      + 7) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v1 + (v4 | 3) + 4) & ~(v4 | 3);
  unint64_t v6 = v4 + ((v5 + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5;
  uint64_t v7 = ~v4;
  uint64_t v14 = v3;
  unint64_t v8 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48);
  if (!v8(v6 & ~v4, 1, AssociatedTypeWitness)) {
    (*(void (**)(unint64_t, uint64_t))(v14 + 8))(v6 & ~v4, AssociatedTypeWitness);
  }
  if (*(_DWORD *)(v14 + 84)) {
    uint64_t v9 = *(void *)(v14 + 64);
  }
  else {
    uint64_t v9 = *(void *)(v14 + 64) + 1;
  }
  unint64_t v10 = ((v6 | v4) + v9) & v7;
  if (!v8(v10, 1, AssociatedTypeWitness)) {
    (*(void (**)(unint64_t, uint64_t))(v14 + 8))(v10, AssociatedTypeWitness);
  }
  uint64_t v11 = (v9 + v4 + v10) & v7;
  if (!v8(v11, 1, AssociatedTypeWitness)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v11, AssociatedTypeWitness);
  }
  uint64_t result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v8)((v4+ ((((((v4 + 9) & v7) + v9 + v5 + ((v9 + v4 + ((v9 + v4) & v7)) & v7) + 19) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)+ 4) & v7, 1, AssociatedTypeWitness);
  if (!result)
  {
    int v13 = *(uint64_t (**)(unint64_t, uint64_t))(v14 + 8);
    return v13((v4+ ((((((v4 + 9) & v7) + v9 + v5 + ((v9 + v4 + ((v9 + v4) & v7)) & v7) + 19) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL)+ 4) & v7, AssociatedTypeWitness);
  }
  return result;
}

uint64_t sub_187A130B0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (v3 + v4 + v7) & ~v7;
  unint64_t v9 = (*(void *)(v6 + 64) + v7 + v8) & ~v7;
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  unint64_t v10 = *(void (**)(unint64_t, uint64_t))(v6 + 8);
  v10(v0 + v8, AssociatedTypeWitness);
  v10(v0 + v9, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t sub_187A1322C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t FileDocumentWriteConfiguration.contentType.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UTType();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

id FileDocumentReadConfiguration.file.getter()
{
  uint64_t v1 = *(void **)(v0 + *(int *)(type metadata accessor for FileDocumentReadConfiguration(0) + 20));

  return v1;
}

uint64_t type metadata accessor for FileDocumentReadConfiguration(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileDocumentReadConfiguration);
}

uint64_t assignWithCopy for FileDocumentWriteConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  unint64_t v8 = *(void **)(a1 + v7);
  unint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  id v10 = v9;

  return a1;
}

uint64_t assignWithTake for FileDocumentWriteConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  unint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t getEnumTagSinglePayload for FileDocumentWriteConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187A13480);
}

uint64_t sub_187A13480(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for FileDocumentWriteConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187A13560);
}

uint64_t sub_187A13560(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UTType();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata completion function for FileDocumentWriteConfiguration()
{
  return type metadata completion function for FileDocumentWriteConfiguration();
}

{
  uint64_t result;
  unint64_t v1;

  uint64_t result = type metadata accessor for UTType();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for FileDocumentWriteConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UTType();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    id v10 = v9;
  }
  return a1;
}

void destroy for FileDocumentWriteConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = *(void **)(a1 + *(int *)(a2 + 20));
}

uint64_t initializeWithCopy for FileDocumentWriteConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  id v9 = v8;
  return a1;
}

uint64_t assignWithCopy for FileDocumentReadConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a2 + v7);
  id v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  return a1;
}

uint64_t assignWithTake for FileDocumentReadConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  return a1;
}

uint64_t getEnumTagSinglePayload for FileDocumentReadConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187A1390C);
}

uint64_t sub_187A1390C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for FileDocumentReadConfiguration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187A139E0);
}

uint64_t sub_187A139E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UTType();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata completion function for FileDocumentReadConfiguration()
{
  return type metadata completion function for FileDocumentWriteConfiguration();
}

uint64_t View.searchFocused(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v8[0] = a1;
  v8[1] = a2;
  char v9 = a3;
  char v7 = 1;
  return View.searchFocused<A>(_:equals:)((uint64_t)v8, (uint64_t)&v7, a4, MEMORY[0x1E4FBB390], a5, MEMORY[0x1E4FBB3A0], a6);
}

uint64_t View.searchFocused<A>(_:equals:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  void v19[2] = a5;
  v19[0] = a7;
  v19[1] = a3;
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  int v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for FocusState.Binding();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v19 - v16;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a1, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, a4);
  SearchFocusContext.init<A>(binding:value:)((uint64_t)v17, (uint64_t)v13, a4, a6, v20);
  View.environment<A>(_:_:)();
  swift_release();
  return outlined destroy of SearchFocusContext?((uint64_t)v20);
}

uint64_t key path setter for EnvironmentValues.searchFocusContext : EnvironmentValues(uint64_t a1)
{
  outlined init with copy of SearchFocusContext?(a1, (uint64_t)v2);
  return EnvironmentValues.searchFocusContext.setter((uint64_t)v2);
}

uint64_t sub_187A13D90(uint64_t a1)
{
  outlined init with copy of SearchFocusContext?(a1, (uint64_t)v2);
  return EnvironmentValues.searchFocusContext.setter((uint64_t)v2);
}

uint64_t SearchFocusContext.init<A>(binding:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](a1);
  type metadata accessor for FocusState.Binding();
  *a5 = FocusState.Binding.propertyID.getter();
  _convertToAnyHashable<A>(_:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a3);
  a5[6] = (uint64_t)FocusStateBindingUpdateAction.init<A>(binding:value:)(a1, (uint64_t)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3, a4);
  a5[7] = v12;
  int v13 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
  v13((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a2, a3);
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = a4;
  uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v13)(v15 + v14, (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  a5[8] = (uint64_t)partial apply for closure #1 in SearchFocusContext.init<A>(binding:value:);
  a5[9] = v15;
  return result;
}

uint64_t outlined destroy of SearchFocusContext?(uint64_t a1)
{
  type metadata accessor for SearchFocusContext?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t (*closure #1 in SearchFocusContext.init<A>(binding:value:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5))(uint64_t a1)
{
  type metadata accessor for _EnvironmentKeyWritingModifier<SearchFocusContext?>(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v20 - v11;
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v16, a3, a4, v14);
  outlined init with copy of Binding<SearchFieldState>(a2, (uint64_t)v12);
  uint64_t v18 = FocusStoreUpdateAction.init<A>(value:focusScopes:searchFieldState:)((uint64_t)v16, a1, (uint64_t)v12, a4, a5);
  swift_bridgeObjectRetain();
  return v18;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SearchFocusContext(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  outlined init with copy of SearchFocusContext((uint64_t)a1, (uint64_t)v9);
  outlined init with copy of SearchFocusContext((uint64_t)a2, (uint64_t)&v7);
  if (v3 == v4) {
    char v5 = MEMORY[0x18C1174E0](&v10, &v8);
  }
  else {
    char v5 = 0;
  }
  outlined destroy of SearchFocusContext((uint64_t)&v7);
  outlined destroy of SearchFocusContext((uint64_t)v9);
  return v5 & 1;
}

uint64_t View.onSearchFocusChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a1;
  v4[1] = a2;
  return MEMORY[0x18C113660](v4, a3, &unk_1ED44FBF8);
}

uint64_t sub_187A14200()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchFocusContext?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchFocusContext?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchFocusContext?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<SearchFocusContext?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<SearchFocusContext?>, (uint64_t (*)(uint64_t))type metadata accessor for SearchFocusContext?, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<SearchFocusContext?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187A14324()
{
  return swift_getWitnessTable();
}

uint64_t sub_187A143C4()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type OnSearchFocusChangeModifier and conformance OnSearchFocusChangeModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type OnSearchFocusChangeModifier and conformance OnSearchFocusChangeModifier;
  if (!lazy protocol witness table cache variable for type OnSearchFocusChangeModifier and conformance OnSearchFocusChangeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnSearchFocusChangeModifier and conformance OnSearchFocusChangeModifier);
  }
  return result;
}

void *type metadata accessor for OnSearchFocusChangeModifier()
{
  return &unk_1ED44FBF8;
}

uint64_t destroy for SearchFocusContext(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for SearchFocusContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = v5;
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for SearchFocusContext(void *a1, void *a2)
{
  *a1 = *a2;
  __swift_assign_boxed_opaque_existential_1(a1 + 1, a2 + 1);
  uint64_t v4 = a2[7];
  a1[6] = a2[6];
  a1[7] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[9];
  a1[8] = a2[8];
  a1[9] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SearchFocusContext(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

uint64_t storeEnumTagSinglePayload for SearchFocusContext(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OnSearchFocusChangeModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance OnSearchFocusChangeModifier@<X0>(uint64_t (**a1)(unsigned __int8 *a1)@<X8>)
{
  uint64_t v4 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *a1 = partial apply for closure #1 in OnSearchFocusChangeModifier.body(content:);
  a1[1] = (uint64_t (*)(unsigned __int8 *))v5;

  return swift_retain();
}

uint64_t sub_187A14718()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnSearchFocusChangeModifier.body(content:)(unsigned __int8 *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t outlined init with copy of SearchFocusContext(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of SearchFocusContext(uint64_t a1)
{
  return a1;
}

uint64_t sub_187A147E4()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t (*partial apply for closure #1 in SearchFocusContext.init<A>(binding:value:)(uint64_t a1, uint64_t a2))(uint64_t a1)
{
  return closure #1 in SearchFocusContext.init<A>(binding:value:)(a1, a2, v2+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80)), *(void *)(v2 + 16), *(void *)(v2 + 24));
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>>();
    lazy protocol witness table accessor for type _PreferenceActionModifier<IsSearchFocusedPreferenceKey> and conformance _PreferenceActionModifier<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<OnSearchFocusChangeModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<OnSearchFocusChangeModifier>);
    lazy protocol witness table accessor for type _PreferenceActionModifier<IsSearchFocusedPreferenceKey> and conformance _PreferenceActionModifier<A>(&lazy protocol witness table cache variable for type _PreferenceActionModifier<IsSearchFocusedPreferenceKey> and conformance _PreferenceActionModifier<A>, (void (*)(uint64_t))type metadata accessor for _PreferenceActionModifier<IsSearchFocusedPreferenceKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>>)
  {
    type metadata accessor for _ViewModifier_Content<OnSearchFocusChangeModifier>();
    type metadata accessor for _PreferenceActionModifier<IsSearchFocusedPreferenceKey>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnSearchFocusChangeModifier>, _PreferenceActionModifier<IsSearchFocusedPreferenceKey>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<OnSearchFocusChangeModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<OnSearchFocusChangeModifier>)
  {
    lazy protocol witness table accessor for type OnSearchFocusChangeModifier and conformance OnSearchFocusChangeModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<OnSearchFocusChangeModifier>);
    }
  }
}

void type metadata accessor for _PreferenceActionModifier<IsSearchFocusedPreferenceKey>()
{
  if (!lazy cache variable for type metadata for _PreferenceActionModifier<IsSearchFocusedPreferenceKey>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceActionModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceActionModifier<IsSearchFocusedPreferenceKey>);
    }
  }
}

void MergedDocumentIntroAccessory.position.getter()
{
}

void protocol witness for _DocumentIntroAccessory.anchor.getter in conformance MergedDocumentIntroAccessory<A, B>()
{
}

void protocol witness for _DocumentIntroAccessory.position.getter in conformance MergedDocumentIntroAccessory<A, B>()
{
}

void protocol witness for _DocumentIntroAccessory.content.getter in conformance MergedDocumentIntroAccessory<A, B>()
{
}

void protocol witness for _DocumentIntroAccessory.anchor.getter in conformance EmptyDocumentIntroAccessory()
{
}

void protocol witness for _DocumentIntroAccessory.position.getter in conformance EmptyDocumentIntroAccessory()
{
}

void protocol witness for _DocumentIntroAccessory.content.getter in conformance EmptyDocumentIntroAccessory()
{
}

uint64_t _AnyDocumentIntroAccessory.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v9 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  double v10 = (*(double (**)(uint64_t, uint64_t, double))(a3 + 24))(a2, a3, v9);
  uint64_t v12 = v11;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 32))(&v16, a2, a3);
  BYTE1(v16) = v16;
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  swift_getAssociatedConformanceWitness();
  uint64_t v13 = AnyView.init<A>(_:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  char v15 = BYTE1(v16);
  *(double *)a4 = v10;
  *(void *)(a4 + 8) = v12;
  *(unsigned char *)(a4 + 16) = v15;
  *(void *)(a4 + 24) = v13;
  return result;
}

void _DocumentIntroAccessoryPosition.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

BOOL static _DocumentIntroAccessoryPosition.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int _DocumentIntroAccessoryPosition.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

double _DocumentIntroAccessoryItem.anchor.getter()
{
  return *(double *)v0;
}

void _DocumentIntroAccessoryItem.anchor.setter(double a1, double a2)
{
  *uint64_t v2 = a1;
  v2[1] = a2;
}

uint64_t (*_DocumentIntroAccessoryItem.anchor.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void _DocumentIntroAccessoryItem.position.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 16);
}

unsigned char *_DocumentIntroAccessoryItem.position.setter(unsigned char *result)
{
  *(unsigned char *)(v1 + 16) = *result;
  return result;
}

uint64_t (*_DocumentIntroAccessoryItem.position.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t _DocumentIntroAccessoryItem.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t _DocumentIntroAccessoryItem.content.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2 + *(int *)(a2 + 40), a1);
}

uint64_t (*_DocumentIntroAccessoryItem.content.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

unint64_t lazy protocol witness table accessor for type _DocumentIntroAccessoryPosition and conformance _DocumentIntroAccessoryPosition()
{
  unint64_t result = lazy protocol witness table cache variable for type _DocumentIntroAccessoryPosition and conformance _DocumentIntroAccessoryPosition;
  if (!lazy protocol witness table cache variable for type _DocumentIntroAccessoryPosition and conformance _DocumentIntroAccessoryPosition)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _DocumentIntroAccessoryPosition and conformance _DocumentIntroAccessoryPosition);
  }
  return result;
}

ValueMetadata *type metadata accessor for _DocumentIntroAccessoryBuilder()
{
  return &type metadata for _DocumentIntroAccessoryBuilder;
}

uint64_t dispatch thunk of _DocumentIntroAccessory.anchor.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of _DocumentIntroAccessory.position.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of _DocumentIntroAccessory.content.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of _DocumentIntroAccessory._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 48))();
}

ValueMetadata *type metadata accessor for _ResolvedDocumentIntroAccessory()
{
  return &type metadata for _ResolvedDocumentIntroAccessory;
}

unsigned char *storeEnumTagSinglePayload for _DocumentIntroAccessoryPosition(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187A15168);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _DocumentIntroAccessoryPosition()
{
  return &type metadata for _DocumentIntroAccessoryPosition;
}

uint64_t type metadata completion function for _DocumentIntroAccessoryItem()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t assignWithCopy for _DocumentIntroAccessoryItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))((*(unsigned __int8 *)(v4 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for _DocumentIntroAccessoryItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))((*(unsigned __int8 *)(v4 + 80) + 17 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 17 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void storeEnumTagSinglePayload for _DocumentIntroAccessoryItem(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 17) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x187A155A0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 17] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else
        {
          a1[16] = a2 + 1;
        }
      }
      return;
  }
}

_UNKNOWN **sub_187A155C8()
{
  return &protocol witness table for MergedDocumentIntroAccessory<A, B>;
}

_UNKNOWN **sub_187A155D4()
{
  return &protocol witness table for EmptyDocumentIntroAccessory;
}

uint64_t initializeWithCopy for _AnyDocumentIntroAccessory(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _AnyDocumentIntroAccessory(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for _AnyDocumentIntroAccessory(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for _AnyDocumentIntroAccessory()
{
  return &type metadata for _AnyDocumentIntroAccessory;
}

ValueMetadata *type metadata accessor for EmptyDocumentIntroAccessory()
{
  return &type metadata for EmptyDocumentIntroAccessory;
}

uint64_t getEnumTagSinglePayload for MergedDocumentIntroAccessory(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for MergedDocumentIntroAccessory(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187A15B9CLL);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          int v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

void protocol witness for View.body.getter in conformance NavigationSplitViewStyleConfiguration.Sidebar()
{
}

void protocol witness for View.body.getter in conformance NavigationSplitViewStyleConfiguration.Detail()
{
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedNavigationSplitStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedNavigationSplitStyle and conformance ResolvedNavigationSplitStyle();

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedNavigationSplitStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t dispatch thunk of NavigationSplitViewStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_187A15CCC()
{
  return swift_getWitnessTable();
}

uint64_t getEnumTagSinglePayload for NavigationSplitStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for NavigationSplitStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187A160B0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance NavigationSplitStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t assignWithCopy for NavigationSplitViewStyleConfiguration(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_WORD *)(a1 + 18) = *(_WORD *)(a2 + 18);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for NavigationSplitViewStyleConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationSplitViewStyleConfiguration(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationSplitViewStyleConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 48) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 49) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 49) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_187A16324()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t sub_187A16398()
{
  return lazy protocol witness table accessor for type NavigationSplitStyleModifier<AutomaticNavigationSplitViewStyle> and conformance NavigationSplitStyleModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail> and conformance NavigationSplitView<A, B, C>, (void (*)(uint64_t))type metadata accessor for NavigationSplitView<NavigationSplitViewStyleConfiguration.Sidebar, NavigationSplitViewStyleConfiguration.Content, NavigationSplitViewStyleConfiguration.Detail>);
}

void DefaultWindowStyle.configureWindow(_:)()
{
}

uint64_t type metadata accessor for TabSectionActionsModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187A1640C()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TabSectionActions()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for TabSectionActions(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TabSectionActions(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187A16834);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t associated type witness table accessor for View.Body : View in TabSectionActions<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TabSectionActions.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v18[1] = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  type metadata accessor for StyleContextWriter<SidebarSectionActionStyleContext>();
  type metadata accessor for ModifiedContent();
  uint64_t v5 = type metadata accessor for _VariadicView.Tree();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  size_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  int v11 = (char *)v18 - v10;
  uint64_t v12 = *(void *)(a1 + 24);
  v18[4] = v4;
  v18[5] = v12;
  uint64_t v19 = v2;
  _VariadicView.Tree.init(_:content:)();
  unint64_t v13 = lazy protocol witness table accessor for type ActionPreparer and conformance ActionPreparer();
  unint64_t v14 = lazy protocol witness table accessor for type StyleContextWriter<SidebarSectionActionStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v22 = v12;
  unint64_t v23 = v14;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v20 = v13;
  uint64_t v21 = WitnessTable;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  unsigned int v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v8, v5);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v16)(v11, v5);
}

uint64_t closure #1 in TabSectionActions.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for StyleContextWriter<SidebarSectionActionStyleContext>();
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v14 - v9;
  lazy protocol witness table accessor for type SidebarSectionActionStyleContext and conformance SidebarSectionActionStyleContext();
  View.styleContext<A>(_:)();
  unint64_t v11 = lazy protocol witness table accessor for type StyleContextWriter<SidebarSectionActionStyleContext> and conformance StyleContextWriter<A>();
  v14[0] = a3;
  v14[1] = v11;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v7);
  uint64_t v12 = *(void (**)(char *, uint64_t))(v5 + 8);
  v12(v7, v4);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(char *, uint64_t))v12)(v10, v4);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TabSectionActionsModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in TabSectionActionsModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TabSectionActionsModifier.body(content:)(*(void *)(v1 + 32), *(void *)(v1 + 16), a1);
}

void type metadata accessor for StyleContextWriter<SidebarSectionActionStyleContext>()
{
  if (!lazy cache variable for type metadata for StyleContextWriter<SidebarSectionActionStyleContext>)
  {
    lazy protocol witness table accessor for type SidebarSectionActionStyleContext and conformance SidebarSectionActionStyleContext();
    unint64_t v0 = type metadata accessor for StyleContextWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<SidebarSectionActionStyleContext>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SidebarSectionActionStyleContext and conformance SidebarSectionActionStyleContext()
{
  unint64_t result = lazy protocol witness table cache variable for type SidebarSectionActionStyleContext and conformance SidebarSectionActionStyleContext;
  if (!lazy protocol witness table cache variable for type SidebarSectionActionStyleContext and conformance SidebarSectionActionStyleContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarSectionActionStyleContext and conformance SidebarSectionActionStyleContext);
  }
  return result;
}

uint64_t partial apply for closure #1 in TabSectionActions.body.getter()
{
  return closure #1 in TabSectionActions.body.getter(v0[4], v0[2], v0[3]);
}

unint64_t lazy protocol witness table accessor for type ActionPreparer and conformance ActionPreparer()
{
  unint64_t result = lazy protocol witness table cache variable for type ActionPreparer and conformance ActionPreparer;
  if (!lazy protocol witness table cache variable for type ActionPreparer and conformance ActionPreparer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionPreparer and conformance ActionPreparer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ActionPreparer and conformance ActionPreparer;
  if (!lazy protocol witness table cache variable for type ActionPreparer and conformance ActionPreparer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ActionPreparer and conformance ActionPreparer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<SidebarSectionActionStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<SidebarSectionActionStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<SidebarSectionActionStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for StyleContextWriter<SidebarSectionActionStyleContext>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<SidebarSectionActionStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ActionPreparer()
{
  return &type metadata for ActionPreparer;
}

uint64_t sub_187A16E0C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187A16F08()
{
  return swift_getWitnessTable();
}

unint64_t instantiation function for generic protocol witness table for ActionPreparer(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type ActionPreparer and conformance ActionPreparer();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in ActionPreparer()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t closure #1 in ActionPreparer.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v7 = (unint64_t)static HorizontalAlignment.center.getter();
  LOBYTE(v8[0]) = 1;
  outlined init with copy of _VariadicView_Children.Element(a1, (uint64_t)v8 + 8);
  outlined init with copy of VStack<_VariadicView_Children.Element>((uint64_t)&v7, (uint64_t)v5);
  v6[24] = 1;
  outlined destroy of VStack<_VariadicView_Children.Element>((uint64_t)&v7);
  outlined init with copy of _VariadicView_Children.Element(a1, (uint64_t)&v10);
  v8[3] = v5[4];
  void v8[4] = v5[5];
  v9[0] = *(_OWORD *)v6;
  *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)&v6[9];
  long long v7 = v5[0];
  v8[0] = v5[1];
  v8[1] = v5[2];
  void v8[2] = v5[3];
  outlined init with copy of ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>((uint64_t)&v7, a2);
  *(void *)(a2 + 224) = 0;
  return outlined destroy of ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>((uint64_t)&v7);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance ActionPreparer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type ActionPreparer and conformance ActionPreparer();

  return MEMORY[0x1F40FD020](a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance ActionPreparer()
{
  return MEMORY[0x1F40FD018]();
}

uint64_t protocol witness for _VariadicView_ViewRoot.body(children:) in conformance ActionPreparer(uint64_t a1)
{
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v2);
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>();
  lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified);
  lazy protocol witness table accessor for type _VariadicView_Children.Element and conformance _VariadicView_Children.Element();
  return ForEach<>.init(_:content:)();
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>)
  {
    type metadata accessor for ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>();
    type metadata accessor for PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>)
  {
    type metadata accessor for VStack<_VariadicView_Children.Element>(255, &lazy cache variable for type metadata for VStack<_VariadicView_Children.Element>, MEMORY[0x1E4F40A20], MEMORY[0x1E4F40A18], MEMORY[0x1E4F415E8]);
    type metadata accessor for VStack<_VariadicView_Children.Element>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsAuxiliaryContentTraitKey>, MEMORY[0x1E4F40F48], MEMORY[0x1E4F40F40], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>);
    }
  }
}

void type metadata accessor for VStack<_VariadicView_Children.Element>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>()
{
  if (!lazy cache variable for type metadata for PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>)
  {
    unint64_t v0 = type metadata accessor for PlatformItemTraitWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, (void (*)(void))lazy protocol witness table accessor for type VStack<_VariadicView_Children.Element> and conformance VStack<A>, (void (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<IsAuxiliaryContentTraitKey> and conformance _TraitWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VStack<_VariadicView_Children.Element> and conformance VStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type VStack<_VariadicView_Children.Element> and conformance VStack<A>;
  if (!lazy protocol witness table cache variable for type VStack<_VariadicView_Children.Element> and conformance VStack<A>)
  {
    type metadata accessor for VStack<_VariadicView_Children.Element>(255, &lazy cache variable for type metadata for VStack<_VariadicView_Children.Element>, MEMORY[0x1E4F40A20], MEMORY[0x1E4F40A18], MEMORY[0x1E4F415E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VStack<_VariadicView_Children.Element> and conformance VStack<A>);
  }
  return result;
}

uint64_t outlined init with copy of VStack<_VariadicView_Children.Element>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for VStack<_VariadicView_Children.Element>(0, &lazy cache variable for type metadata for VStack<_VariadicView_Children.Element>, MEMORY[0x1E4F40A20], MEMORY[0x1E4F40A18], MEMORY[0x1E4F415E8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of VStack<_VariadicView_Children.Element>(uint64_t a1)
{
  type metadata accessor for VStack<_VariadicView_Children.Element>(0, &lazy cache variable for type metadata for VStack<_VariadicView_Children.Element>, MEMORY[0x1E4F40A20], MEMORY[0x1E4F40A18], MEMORY[0x1E4F415E8]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>(uint64_t a1)
{
  type metadata accessor for ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

void type metadata accessor for ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>>()
{
  if (!lazy cache variable for type metadata for ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>();
    lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<_VariadicView_Children, AnyHashable, ModifiedContent<ModifiedContent<ModifiedContent<VStack<_VariadicView_Children.Element>, _TraitWritingModifier<IsAuxiliaryContentTraitKey>>, PlatformItemTraitWriter<ButtonPlatformItemsStrategy, _VariadicView_Children.Element, TabItem.TraitKey>>, TabPlatformIdentified>>);
    }
  }
}

ValueMetadata *type metadata accessor for VersionSeedSetTracker()
{
  return &type metadata for VersionSeedSetTracker;
}

ValueMetadata *type metadata accessor for VersionSeedSetTracker.Value()
{
  return &type metadata for VersionSeedSetTracker.Value;
}

uint64_t specialized VersionSeedTracker.didChange(_:action:)(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  PreferenceValues.subscript.getter();
  if (*a2 == -1 || v11 == -1 || *a2 != v11)
  {
    *a2 = v11;
    *(void *)(a3 + direct field offset for ToolbarBridge.navigationAdaptor) = v10;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a4 + 9) = 1;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t _AllowsHitTestingModifier.allowsHitTesting.getter(char a1)
{
  return a1 & 1;
}

uint64_t _AllowsHitTestingModifier.allowsHitTesting.setter(uint64_t result)
{
  unsigned char *v1 = result;
  return result;
}

uint64_t (*_AllowsHitTestingModifier.allowsHitTesting.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

SwiftUI::_AllowsHitTestingModifier __swiftcall _AllowsHitTestingModifier.init(allowsHitTesting:)(Swift::Bool allowsHitTesting)
{
  return (SwiftUI::_AllowsHitTestingModifier)allowsHitTesting;
}

uint64_t AllowsHitTestingResponder.__allocating_init(inputs:)()
{
  *(unsigned char *)(swift_allocObject() + 216) = 1;
  return DefaultLayoutViewResponder.init(inputs:)();
}

uint64_t _AllowsHitTestingModifier.effectValue(size:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  if (result) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = 2;
  }
  *(void *)a2 = v2;
  if (result) {
    char v3 = 19;
  }
  else {
    char v3 = 2;
  }
  *(_DWORD *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 12) = v3;
  return result;
}

BOOL static _AllowsHitTestingModifier.== infix(_:_:)(int a1, int a2)
{
  return ((a1 ^ a2) & 1) == 0;
}

void protocol witness for ViewModifier.body(content:) in conformance _AllowsHitTestingModifier()
{
}

uint64_t AllowsHitTestingFilter.updateValue()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  *(unsigned char *)(v1 + 216) = *(unsigned char *)AGGraphGetValue();
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v2)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for _GraphValue<_AllowsHitTestingModifier>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_188351940;
    *(void *)(v4 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t AllowsHitTestingResponder.allowsHitTesting.getter()
{
  return *(unsigned __int8 *)(v0 + 216);
}

uint64_t AllowsHitTestingResponder.containsGlobalPoints(_:cacheKey:options:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  if (*(unsigned char *)(v4 + 216) == 1)
  {
    uint64_t v10 = *a3;
    type metadata accessor for DefaultLayoutViewResponder();
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t *))method lookup function for ViewResponder();
    return v8(a1, a2 | ((HIDWORD(a2) & 1) << 32), &v10);
  }
  else
  {
    uint64_t result = MultiViewResponder.children.getter();
    *a4 = 0;
    a4[1] = 0;
    a4[2] = result;
  }
  return result;
}

uint64_t AllowsHitTestingResponder.extendPrintTree(string:)()
{
  if (*(unsigned char *)(v0 + 216)) {
    uint64_t v1 = 1702195828;
  }
  else {
    uint64_t v1 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 216)) {
    unint64_t v2 = 0xE400000000000000;
  }
  else {
    unint64_t v2 = 0xE500000000000000;
  }
  unint64_t v3 = v2;
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x206465776F6C6C61;
  v4._object = (void *)0xEA0000000000203DLL;
  String.append(_:)(v4);

  return swift_bridgeObjectRelease();
}

uint64_t AllowsHitTestingResponder.__allocating_init(inputs:viewSubgraph:)()
{
  *(unsigned char *)(swift_allocObject() + 216) = 1;
  return DefaultLayoutViewResponder.init(inputs:viewSubgraph:)();
}

uint64_t AllowsHitTestingResponder.__deallocating_deinit()
{
  DefaultLayoutViewResponder.deinit();

  return swift_deallocClassInstance();
}

unsigned char *storeEnumTagSinglePayload for _AllowsHitTestingModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187A17FECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t ObjC metadata update function for AllowsHitTestingResponder()
{
  return type metadata accessor for AllowsHitTestingResponder();
}

uint64_t sub_187A1801C()
{
  return swift_getWitnessTable();
}

uint64_t assignWithCopy for AllowsHitTestingFilter(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for AllowsHitTestingFilter(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

void *type metadata accessor for AllowsHitTestingFilter()
{
  return &unk_1ED438720;
}

ValueMetadata *type metadata accessor for FocusBridge.Flags()
{
  return &type metadata for FocusBridge.Flags;
}

uint64_t sub_187A18238()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t WidgetHost.__allocating_init(content:)(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_allocObject();
  uint64_t v4 = specialized WidgetHost.init(content:)();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t WidgetHost.init(content:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = specialized WidgetHost.init(content:)();
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t WidgetHost.setEnvironment(_:)()
{
  return WidgetHost.setEnvironment(_:)();
}

{
  mainThreadPrecondition()();
  return static Update.ensure<A>(_:)();
}

uint64_t WidgetHost.deinit()
{
  swift_release();
  return v0;
}

uint64_t WidgetBundleHost.__allocating_init<A>(bundle:)(uint64_t a1, uint64_t a2)
{
  swift_allocObject();
  uint64_t v4 = specialized WidgetBundleHost.init<A>(bundle:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

uint64_t WidgetBundleHost.init<A>(bundle:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = specialized WidgetBundleHost.init<A>(bundle:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a2 - 8) + 8))(a1, a2);
  return v4;
}

uint64_t WidgetBundleHost.readPreference<A>(_:)()
{
  return WidgetHost.readPreference<A>(_:)();
}

uint64_t $defer #1 <A><A1>() in closure #1 in WidgetHost.readPreference<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  swift_beginAccess();
  uint64_t v2 = *(void **)(v1 + 24);
  uint64_t v3 = *(void **)(v1 + 32);
  char v4 = *(unsigned char *)(v1 + 40);
  char v5 = *(unsigned char *)(v1 + 41);
  int v6 = *(_DWORD *)(v1 + 68);
  uint64_t v7 = *(void *)(v1 + 72);
  int v8 = *(_DWORD *)(v1 + 80);
  uint64_t v9 = *(void *)(v1 + 88);
  uint64_t v10 = *(void *)(v1 + 112);
  id v20 = *(id *)(v1 + 16);
  uint64_t v21 = v2;
  uint64_t v22 = v3;
  char v23 = v4;
  char v24 = v5;
  long long v25 = *(_OWORD *)(v1 + 44);
  uint64_t v26 = *(void *)(v1 + 60);
  int v27 = v6;
  uint64_t v28 = v7;
  int v29 = v8;
  uint64_t v30 = v9;
  long long v31 = *(_OWORD *)(v1 + 96);
  uint64_t v32 = v10;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v11 = v20;
  id v12 = v2;
  id v13 = v3;
  unint64_t v14 = (void (*)(uint64_t *, void))GraphHost.Data.hostPreferenceKeys.modify();
  PreferenceKeys.remove(_:)();
  v14(&v19, 0);
  id v15 = v20;
  unsigned int v16 = v21;
  int v17 = v22;
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t WidgetBundleHost.setEnvironment(_:)()
{
  return WidgetHost.setEnvironment(_:)();
}

void closure #1 in WidgetHost.setEnvironment(_:)()
{
}

uint64_t WidgetHost.__deallocating_deinit()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t specialized WidgetHost.init(content:)()
{
  type metadata accessor for WidgetGraph();
  static Update.ensure<A>(_:)();
  *(void *)(v0 + 16) = v2;
  return v0;
}

uint64_t partial apply for closure #1 in WidgetHost.readPreference<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in WidgetHost.readPreference<A>(_:)(*(void *)(v1 + 32), a1);
}

void partial apply for closure #1 in WidgetHost.setEnvironment(_:)()
{
}

uint64_t specialized WidgetBundleHost.init<A>(bundle:)()
{
  type metadata accessor for WidgetGraph();
  static Update.ensure<A>(_:)();
  *(void *)(v0 + 16) = v2;
  return v0;
}

uint64_t type metadata completion function for WidgetHost()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for WidgetHost()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t method lookup function for WidgetHost(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for WidgetHost);
}

uint64_t dispatch thunk of WidgetHost.__allocating_init(content:)()
{
  return (*(uint64_t (**)(void))(v0 + 104))();
}

uint64_t type metadata accessor for WidgetBundleHost()
{
  return self;
}

uint64_t method lookup function for WidgetBundleHost(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for WidgetBundleHost);
}

uint64_t dispatch thunk of WidgetBundleHost.__allocating_init<A>(bundle:)()
{
  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t partial apply for closure #1 in WidgetBundleHost.init<A>(bundle:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in WidgetBundleHost.init<A>(bundle:)(specialized WidgetGraph.__allocating_init<A>(rootBundle:), a1);
}

uint64_t partial apply for closure #1 in WidgetHost.init(content:)@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in WidgetBundleHost.init<A>(bundle:)(specialized WidgetGraph.__allocating_init<A>(rootWidget:), a1);
}

uint64_t partial apply for closure #1 in WidgetBundleHost.init<A>(bundle:)@<X0>(uint64_t (*a1)(uint64_t, uint64_t, uint64_t)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  type metadata accessor for WidgetGraph();
  uint64_t result = a1(v7, v5, v6);
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in WidgetBundleHost.readPreference<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in WidgetHost.readPreference<A>(_:)(a1);
}

void partial apply for closure #1 in WidgetBundleHost.setEnvironment(_:)()
{
}

void UIKitInspectorBridgeV5.update(presentation:in:transaction:)(uint64_t a1, char *a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 104);
  if (v4 != 2 && (v4 & 1) == 0)
  {
    swift_beginAccess();
    PresentationState.dismissInspector()();
    swift_endAccess();
  }
  SheetBridge.update(presentation:in:transaction:)(a1, a2);
}

void UIKitInspectorBridgeV5.contingentlyPresent(_:from:animated:)(uint64_t a1, UIViewController *a2, char a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 104);
  if (v3 == 2 || (v3 & 1) != 0) {
    SheetBridge.contingentlyPresent(_:from:animated:)(a1, a2, a3 & 1);
  }
}

uint64_t UIKitInspectorBridgeV5.addPreferences(to:)()
{
  return specialized UIKitInspectorBridgeV5.addPreferences(to:)();
}

Swift::Void __swiftcall UIKitInspectorBridgeV5.willTransitionToRegularSizeClass()()
{
  uint64_t v1 = v0 + direct field offset for SheetBridge.presentationState;
  swift_beginAccess();
  outlined init with copy of PresentationState.Base(v1, (uint64_t)v2);
  if (v5 >= 2u)
  {
    if (v5 == 6) {
      outlined destroy of SheetPreference((uint64_t)v2);
    }
    else {
      outlined destroy of PresentationState.Base((uint64_t)v2);
    }
  }
  else
  {

    *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)&v3[9];
    long long v10 = v2[4];
    v11[0] = *(_OWORD *)v3;
    long long v8 = v2[2];
    long long v9 = v2[3];
    long long v6 = v2[0];
    long long v7 = v2[1];
    *(_OWORD *)&v3[9] = *(_OWORD *)((char *)v11 + 9);
    unsigned __int8 v5 = 6;
    PresentationState.base.willset((uint64_t)v2);
    outlined assign with take of PresentationState.Base((uint64_t)v2, v1);
  }
  swift_endAccess();
}

uint64_t specialized UIKitInspectorBridgeV5.removePreferences(from:)()
{
  return GraphHost.removePreference<A>(_:)();
}

Swift::Void __swiftcall LazyFocusableFillerBoundsProvider.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(v0 + 32);
  int v3 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v2 != v3)
  {
    *(_DWORD *)(v1 + 32) = v3;
    *(void *)(v1 + 40) = 0;
    *(void *)(v1 + 48) = 0;
    *(unsigned char *)(v1 + 56) = 1;
    unint64_t v4 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    swift_bridgeObjectRelease();
    *(void *)(v1 + 64) = v4;
  }
  uint64_t Value = AGGraphGetValue();
  uint64_t v65 = *(void *)Value;
  long long v66 = *(_OWORD *)(Value + 8);
  long long v67 = *(_OWORD *)(Value + 24);
  v64[0] = *(_OWORD *)AGGraphGetValue();
  uint64_t v6 = swift_retain();
  *(double *)&unint64_t v7 = MEMORY[0x18C10C240](v6);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v8, v7));
  long long v9 = (_OWORD *)AGGraphGetValue();
  long long v10 = v9[1];
  v64[0] = *v9;
  v64[1] = v10;
  double v62 = MEMORY[0x18C114450]();
  double v63 = v11;
  static CoordinateSpace.scrollViewContent.getter();
  CGRect.convert(to:transform:)();
  outlined destroy of CoordinateSpace((uint64_t)v64);
  id v12 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB320];
  type metadata accessor for [_LazyLayout_PlacedSubview](0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  id v13 = (uint64_t *)AGGraphGetValue();
  char v15 = v14;
  uint64_t v16 = *v13;
  type metadata accessor for [_LazyLayout_PlacedSubview](0, (unint64_t *)&lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, v12);
  if (AGGraphGetOutputValue()
    && (*(unsigned char *)(v1 + 56) & 1) == 0
    && *(double *)(v1 + 40) == v62
    && *(double *)(v1 + 48) == v63
    && (v15 & 1) == 0)
  {
    *(double *)(v1 + 40) = v62;
    *(double *)(v1 + 48) = v63;
    *(unsigned char *)(v1 + 56) = 0;
    goto LABEL_51;
  }
  int v17 = *MEMORY[0x1E4F4E7A0];
  uint64_t v18 = MEMORY[0x1E4FBC860];
  uint64_t v19 = MEMORY[0x1E4FBC860];
  if (*(_DWORD *)(v1 + 24) != *MEMORY[0x1E4F4E7A0])
  {
    type metadata accessor for [_LazyLayout_PlacedSubview](0, &lazy cache variable for type metadata for [FocusableBounds], (uint64_t)&type metadata for FocusableBounds, MEMORY[0x1E4FBB320]);
    uint64_t v19 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  int64_t v20 = *(void *)(v19 + 16);
  if (v20)
  {
    *(void *)&v64[0] = v18;
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
    uint64_t v18 = *(void *)&v64[0];
    uint64_t v21 = (CGFloat *)(v19 + 56);
    do
    {
      CGFloat v22 = *(v21 - 3);
      CGFloat v23 = *(v21 - 2);
      CGFloat v24 = *(v21 - 1);
      CGFloat v25 = *v21;
      v69.origin.x = v22;
      v69.origin.y = v23;
      v69.size.width = v24;
      v69.size.height = *v21;
      CGFloat MidX = CGRectGetMidX(v69);
      v70.origin.x = v22;
      v70.origin.y = v23;
      v70.size.width = v24;
      v70.size.height = v25;
      CGFloat MidY = CGRectGetMidY(v70);
      *(void *)&v64[0] = v18;
      unint64_t v29 = *(void *)(v18 + 16);
      unint64_t v28 = *(void *)(v18 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v28 > 1), v29 + 1, 1);
        uint64_t v18 = *(void *)&v64[0];
      }
      *(void *)(v18 + 16) = v29 + 1;
      uint64_t v30 = v18 + 16 * v29;
      *(CGFloat *)(v30 + 32) = MidX;
      *(CGFloat *)(v30 + 40) = MidY;
      v21 += 5;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  if (*(_DWORD *)(v1 + 28) == v17)
  {
    uint64_t v31 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v31 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v32 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI25_LazyLayout_PlacedSubviewVG_SaySo6CGRectVGs5NeverOTg503_s7d4UI33f52FocusableFillerBoundsProviderV11updateValueyyFSaySo6j10VGAA01_C20g1_hI7VXEfU0_AF0fnopQ0VAF13ViewTransformVSaySo7CGPointVGSayAF0noP0VGTf1cn_nTf4nnngg_n(v16, v1, (uint64_t)&v65, (double *)v18, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  uint64_t v33 = *(void *)(v32 + 16);
  if (v33)
  {
    swift_bridgeObjectRetain();
    uint64_t v34 = 0;
    uint64_t v35 = (char *)MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v36 = *(void *)(v32 + 8 * v34 + 32);
      uint64_t v37 = *(void *)(v36 + 16);
      int64_t v38 = *((void *)v35 + 2);
      int64_t v39 = v38 + v37;
      if (__OFADD__(v38, v37))
      {
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
      }
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v39 <= *((void *)v35 + 3) >> 1)
      {
        if (*(void *)(v36 + 16)) {
          goto LABEL_34;
        }
      }
      else
      {
        if (v38 <= v39) {
          int64_t v41 = v38 + v37;
        }
        else {
          int64_t v41 = v38;
        }
        uint64_t v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v41, 1, v35);
        if (*(void *)(v36 + 16))
        {
LABEL_34:
          uint64_t v42 = *((void *)v35 + 2);
          if ((*((void *)v35 + 3) >> 1) - v42 < v37) {
            goto LABEL_54;
          }
          memcpy(&v35[32 * v42 + 32], (const void *)(v36 + 32), 32 * v37);
          if (v37)
          {
            uint64_t v43 = *((void *)v35 + 2);
            BOOL v44 = __OFADD__(v43, v37);
            uint64_t v45 = v43 + v37;
            if (v44) {
              goto LABEL_55;
            }
            *((void *)v35 + 2) = v45;
          }
          goto LABEL_24;
        }
      }
      if (v37) {
        goto LABEL_53;
      }
LABEL_24:
      swift_bridgeObjectRelease();
      if (v33 == ++v34)
      {
        swift_bridgeObjectRelease();
        goto LABEL_40;
      }
    }
  }
  uint64_t v35 = (char *)MEMORY[0x1E4FBC860];
LABEL_40:
  swift_bridgeObjectRelease();
  LazyFocusableFillerBoundsProvider.updateMetrics(in:placedBounds:axis:)((uint64_t)v35, 0, 0.0, 0.0, v62, v63);
  char v46 = 1;
  LazyFocusableFillerBoundsProvider.updateMetrics(in:placedBounds:axis:)((uint64_t)v35, 1, 0.0, 0.0, v62, v63);
  swift_bridgeObjectRelease();
  type metadata accessor for [_LazyLayout_PlacedSubview](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<FocusableFillerBounds>, (uint64_t)&type metadata for FocusableFillerBounds, MEMORY[0x1E4FBBE00]);
  uint64_t v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_18834BB80;
  uint64_t v48 = *(void *)(v1 + 64);
  if (*(void *)(v48 + 16))
  {
    uint64_t v49 = specialized __RawDictionaryStorage.find<A>(_:)(0);
    long long v51 = 0uLL;
    long long v52 = 0uLL;
    long long v53 = 0uLL;
    if (v50)
    {
      uint64_t v54 = (long long *)(*(void *)(v48 + 56) + 32 * v49);
      long long v52 = *v54;
      long long v53 = v54[1];
    }
    char v46 = v50 ^ 1;
    if (*(void *)(v48 + 16))
    {
      long long v60 = v53;
      long long v61 = v52;
      char v55 = 1;
      uint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)(1);
      if (v57)
      {
        char v55 = 0;
        id v58 = (long long *)(*(void *)(v48 + 56) + 32 * v56);
        long long v51 = *v58;
        long long v59 = v58[1];
        long long v52 = v61;
      }
      else
      {
        long long v59 = 0uLL;
        long long v52 = v61;
        long long v51 = 0uLL;
      }
      long long v53 = v60;
    }
    else
    {
      char v55 = 1;
      long long v59 = 0uLL;
    }
  }
  else
  {
    long long v52 = 0uLL;
    char v55 = 1;
    long long v53 = 0uLL;
    long long v51 = 0uLL;
    long long v59 = 0uLL;
  }
  *(void *)(v47 + 32) = 0;
  *(void *)(v47 + 40) = 0;
  *(double *)(v47 + 48) = v62;
  *(double *)(v47 + 56) = v63;
  *(_OWORD *)(v47 + 64) = v52;
  *(_OWORD *)(v47 + 80) = v53;
  *(unsigned char *)(v47 + 96) = v46 & 1;
  *(_OWORD *)(v47 + 104) = v51;
  *(_OWORD *)(v47 + 120) = v59;
  *(unsigned char *)(v47 + 136) = v55;
  *(void *)&v64[0] = v47;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  *(double *)(v1 + 40) = v62;
  *(double *)(v1 + 48) = v63;
  *(unsigned char *)(v1 + 56) = 0;
LABEL_51:
  swift_release();
}

uint64_t closure #2 in LazyFocusableFillerBoundsProvider.updateValue()@<X0>(uint64_t a1@<X0>, double *a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>)
{
  char v5 = *(unsigned char *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  long long v69 = *(_OWORD *)(a1 + 48);
  uint64_t v70 = *(void *)(a1 + 64);
  swift_retain();
  double v7 = _LazyLayout_PlacedSubview.size.getter();
  CGPoint v9 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v8, *(unint64_t *)&v7));
  LOBYTE(v74) = v5;
  *((void *)&v74 + 1) = v6;
  long long v75 = v69;
  *(void *)&long long v76 = v70;
  double v10 = _LazyLayout_PlacedSubview.size.getter();
  CGFloat v12 = v11;
  swift_release();
  AGGraphGetValue();
  CGPoint v72 = v9;
  v73.width = v10;
  v73.height = v12;
  CGRect.roundCoordinatesToNearestOrUp(toMultipleOf:)();
  CGSize v71 = v73;
  static CoordinateSpace.scrollViewContent.getter();
  CGRect.convert(to:transform:)();
  uint64_t result = outlined destroy of CoordinateSpace((uint64_t)&v72);
  uint64_t v14 = *((void *)a2 + 2);
  if (!v14) {
    goto LABEL_18;
  }
  CGFloat v15 = a2[4];
  CGFloat v16 = a2[5];
  swift_bridgeObjectRetain();
  v80.origin = v9;
  v80.size = v71;
  v79.CGFloat x = v15;
  v79.y = v16;
  uint64_t result = CGRectContainsPoint(v80, v79);
  if (result) {
    goto LABEL_3;
  }
  if (v14 == 1)
  {
LABEL_17:
    uint64_t result = swift_bridgeObjectRelease();
LABEL_18:
    uint64_t v38 = MEMORY[0x1E4FBC860];
LABEL_46:
    *a4 = v38;
    return result;
  }
  uint64_t v35 = a2 + 7;
  uint64_t v36 = 1;
  while (1)
  {
    uint64_t v37 = v36 + 1;
    if (__OFADD__(v36, 1)) {
      goto LABEL_50;
    }
    v83.origin = v9;
    v83.size = v71;
    uint64_t result = CGRectContainsPoint(v83, *(CGPoint *)(v35 - 1));
    if (result) {
      break;
    }
    v35 += 2;
    ++v36;
    if (v37 == v14) {
      goto LABEL_17;
    }
  }
LABEL_3:
  swift_bridgeObjectRelease();
  uint64_t v17 = a3;
  uint64_t v18 = *(void *)(a3 + 16);
  uint64_t v19 = MEMORY[0x1E4FBC860];
  if (!v18)
  {
    CGFloat x = MEMORY[0x1E4FBC860];
    int64_t v39 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (v39) {
      goto LABEL_20;
    }
    goto LABEL_42;
  }
  swift_bridgeObjectRetain();
  uint64_t v20 = 0;
  CGFloat x = MEMORY[0x1E4FBC860];
  do
  {
    CGFloat v25 = *(double *)(v17 + v20 + 32);
    CGFloat v26 = *(double *)(v17 + v20 + 40);
    CGFloat v27 = *(double *)(v17 + v20 + 48);
    CGFloat v28 = *(double *)(v17 + v20 + 56);
    uint64_t v29 = *(void *)(v17 + v20 + 64);
    uint64_t v30 = *(void *)(v17 + v20 + 72);
    uint64_t v31 = *(void *)(v17 + v20 + 80);
    uint64_t v32 = *(void *)(v17 + v20 + 88);
    char v33 = *(unsigned char *)(v17 + v20 + 96);
    uint64_t v78 = *(void *)(v17 + v20 + 104);
    uint64_t v66 = *(void *)(v17 + v20 + 120);
    uint64_t v67 = *(void *)(v17 + v20 + 112);
    uint64_t v65 = *(void *)(v17 + v20 + 128);
    char v64 = *(unsigned char *)(v17 + v20 + 136);
    v81.origin = v9;
    v81.size = v71;
    v84.origin.CGFloat x = v25;
    v84.origin.y = v26;
    v84.size.width = v27;
    v84.size.height = v28;
    CGRect v82 = CGRectIntersection(v81, v84);
    if (!CGRectIsEmpty(v82))
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v72.CGFloat x = x;
      uint64_t v63 = v31;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(*(void *)&x + 16) + 1, 1);
        uint64_t v17 = a3;
        CGFloat x = v72.x;
      }
      unint64_t v23 = *(void *)(*(void *)&x + 16);
      unint64_t v22 = *(void *)(*(void *)&x + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1);
        uint64_t v17 = a3;
        CGFloat x = v72.x;
      }
      *(void *)(*(void *)&x + 16) = v23 + 1;
      unint64_t v24 = *(void *)&x + 112 * v23;
      *(CGFloat *)(v24 + 32) = v25;
      *(CGFloat *)(v24 + 40) = v26;
      *(CGFloat *)(v24 + 48) = v27;
      *(CGFloat *)(v24 + 56) = v28;
      *(void *)(v24 + 64) = v29;
      *(void *)(v24 + 72) = v30;
      *(void *)(v24 + 80) = v63;
      *(void *)(v24 + 88) = v32;
      *(unsigned char *)(v24 + 96) = v33;
      *(void *)(v24 + 104) = v78;
      *(void *)(v24 + 112) = v67;
      *(void *)(v24 + 120) = v66;
      *(void *)(v24 + 128) = v65;
      *(unsigned char *)(v24 + 136) = v64;
    }
    v20 += 112;
    --v18;
  }
  while (v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = MEMORY[0x1E4FBC860];
  int64_t v39 = *(void *)(*(void *)&x + 16);
  if (!v39)
  {
LABEL_42:
    swift_release();
    type metadata accessor for _ContiguousArrayStorage<Range<Int>>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGRect>, type metadata accessor for CGRect);
    uint64_t result = swift_allocObject();
    uint64_t v38 = result;
    *(_OWORD *)(result + 16) = xmmword_18834BB80;
    *(CGPoint *)(result + 32) = v9;
    *(CGSize *)(result + 48) = v71;
    goto LABEL_46;
  }
LABEL_20:
  uint64_t v68 = v19;
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39, 0);
  uint64_t v40 = 32;
  do
  {
    CGPoint v41 = *(CGPoint *)(*(void *)&x + v40);
    long long v42 = *(_OWORD *)(*(void *)&x + v40 + 32);
    CGSize v73 = *(CGSize *)(*(void *)&x + v40 + 16);
    long long v74 = v42;
    CGPoint v72 = v41;
    long long v43 = *(_OWORD *)(*(void *)&x + v40 + 48);
    long long v44 = *(_OWORD *)(*(void *)&x + v40 + 64);
    long long v45 = *(_OWORD *)(*(void *)&x + v40 + 80);
    *(_OWORD *)((char *)v77 + 9) = *(_OWORD *)(*(void *)&x + v40 + 89);
    long long v76 = v44;
    v77[0] = v45;
    long long v75 = v43;
    FocusableFillerBounds.fillerFrames(in:)(v9.x, v9.y, v71.width, v71.height);
    uint64_t v47 = v46;
    unint64_t v49 = *(void *)(v68 + 16);
    unint64_t v48 = *(void *)(v68 + 24);
    if (v49 >= v48 >> 1) {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v48 > 1), v49 + 1, 1);
    }
    *(void *)(v68 + 16) = v49 + 1;
    *(void *)(v68 + 8 * v49 + 32) = v47;
    v40 += 112;
    --v39;
  }
  while (v39);
  swift_release();
  uint64_t v50 = *(void *)(v68 + 16);
  if (!v50)
  {
    uint64_t v38 = MEMORY[0x1E4FBC860];
LABEL_45:
    uint64_t result = swift_release();
    goto LABEL_46;
  }
  uint64_t result = swift_retain();
  uint64_t v51 = 0;
  uint64_t v38 = MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v52 = *(void *)(v68 + 8 * v51 + 32);
    uint64_t v53 = *(void *)(v52 + 16);
    int64_t v54 = *(void *)(v38 + 16);
    int64_t v55 = v54 + v53;
    if (__OFADD__(v54, v53)) {
      break;
    }
    swift_bridgeObjectRetain();
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result && v55 <= *(void *)(v38 + 24) >> 1)
    {
      if (*(void *)(v52 + 16)) {
        goto LABEL_37;
      }
    }
    else
    {
      if (v54 <= v55) {
        int64_t v56 = v54 + v53;
      }
      else {
        int64_t v56 = v54;
      }
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)result, v56, 1, (char *)v38);
      uint64_t v38 = result;
      if (*(void *)(v52 + 16))
      {
LABEL_37:
        uint64_t v57 = *(void *)(v38 + 16);
        if ((*(void *)(v38 + 24) >> 1) - v57 < v53) {
          goto LABEL_49;
        }
        uint64_t result = (uint64_t)memcpy((void *)(v38 + 32 * v57 + 32), (const void *)(v52 + 32), 32 * v53);
        if (v53)
        {
          uint64_t v58 = *(void *)(v38 + 16);
          BOOL v59 = __OFADD__(v58, v53);
          uint64_t v60 = v58 + v53;
          if (v59) {
            goto LABEL_51;
          }
          *(void *)(v38 + 16) = v60;
        }
        goto LABEL_27;
      }
    }
    if (v53) {
      goto LABEL_48;
    }
LABEL_27:
    uint64_t result = swift_bridgeObjectRelease();
    if (v50 == ++v51)
    {
      swift_release();
      goto LABEL_45;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
  return result;
}

void specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
}

{
  specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, (unint64_t *)&lazy cache variable for type metadata for (index: Int, element: TableCellFormula, id: TableColumnCustomizationID), (void (*)(uint64_t))type metadata accessor for TableCellFormula);
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, MEMORY[0x1E4F27DE8]);
}

{
  return specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
}

uint64_t specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = a4(0);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1) {
    goto LABEL_18;
  }
  if (v9 / v8 < 0)
  {
LABEL_19:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
  {
    return swift_arrayInitWithTakeFrontToBack();
  }
  else if (v4 != v5)
  {
    return swift_arrayInitWithTakeBackToFront();
  }
  return result;
}

void specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(unint64_t *a1, unint64_t *a2, uint64_t *a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v5 = *a1;
  unint64_t v6 = *a2;
  uint64_t v7 = *a3;
  type metadata accessor for (index: Int, element: TableColumnCollection.Entry, id: TableColumnCustomizationID)(0, a4, a5);
  uint64_t v9 = *(void *)(*(void *)(v8 - 8) + 72);
  if (!v9)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v10 = v7 - v6;
  if (v7 - v6 == 0x8000000000000000 && v9 == -1) {
    goto LABEL_18;
  }
  if (v10 / v9 < 0)
  {
LABEL_19:
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  if (v5 < v6 || v5 >= v6 + v10 / v9 * v9)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v5 != v6)
  {
    swift_arrayInitWithTakeBackToFront();
  }
}

void *specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew()(void *a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2], 0, a1);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI25_LazyLayout_PlacedSubviewVG_SaySo6CGRectVGs5NeverOTg503_s7d4UI33f52FocusableFillerBoundsProviderV11updateValueyyFSaySo6j10VGAA01_C20g1_hI7VXEfU0_AF0fnopQ0VAF13ViewTransformVSaySo7CGPointVGSayAF0noP0VGTf1cn_nTf4nnngg_n(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, uint64_t a5)
{
  uint64_t v6 = v5;
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (v7)
  {
    uint64_t v28 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    uint64_t v8 = v28;
    for (i = (char *)(a1 + 48); ; i += 72)
    {
      uint64_t v11 = *((void *)i - 1);
      char v12 = *i;
      uint64_t v13 = *((void *)i + 1);
      char v14 = i[16];
      v21[0] = *((void *)i - 2);
      v21[1] = v11;
      char v22 = v12;
      uint64_t v23 = v13;
      char v24 = v14;
      long long v25 = *(_OWORD *)(i + 24);
      long long v26 = *(_OWORD *)(i + 40);
      swift_retain();
      closure #2 in LazyFocusableFillerBoundsProvider.updateValue()((uint64_t)v21, a4, a5, &v27);
      if (v6) {
        break;
      }
      uint64_t v6 = 0;
      swift_release();
      uint64_t v15 = v27;
      uint64_t v28 = v8;
      unint64_t v17 = *(void *)(v8 + 16);
      unint64_t v16 = *(void *)(v8 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1);
        uint64_t v8 = v28;
      }
      *(void *)(v8 + 16) = v17 + 1;
      *(void *)(v8 + 8 * v17 + 32) = v15;
      if (!--v7) {
        return v8;
      }
    }
    swift_release();
    swift_release();
  }
  return v8;
}

uint64_t partial apply for implicit closure #1 in CGRect.range(in:)()
{
  return implicit closure #1 in CGRect.range(in:)();
}

void type metadata accessor for ClosedRange<CGFloat>()
{
  if (!lazy cache variable for type metadata for ClosedRange<CGFloat>)
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    unint64_t v0 = type metadata accessor for ClosedRange();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ClosedRange<CGFloat>);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<Range<Int>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for _ContiguousArrayStorage();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t destroy for LazyFocusableFillerBoundsProvider()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for LazyFocusableFillerBoundsProvider(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  long long v3 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v3;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LazyFocusableFillerBoundsProvider(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyFocusableFillerBoundsProvider(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LazyFocusableFillerBoundsProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LazyFocusableFillerBoundsProvider()
{
  return &type metadata for LazyFocusableFillerBoundsProvider;
}

double LazyScrollable.parent.getter@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for Scrollable();
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of TableColumnList(WeakValue, a1);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t LazyScrollable.children.getter()
{
  type metadata accessor for Scrollable?(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (uint64_t (*)(uint64_t))type metadata accessor for Scrollable, MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetWeakValue();
  if (result) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t LazyScrollable.allowsContentOffsetAdjustments.getter()
{
  LazyScrollable.parent.getter((uint64_t)v4);
  uint64_t v0 = v5;
  if (v5)
  {
    uint64_t v1 = v6;
    __swift_project_boxed_opaque_existential_1(v4, v5);
    char v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(v0, v1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  else
  {
    outlined destroy of Scrollable?((uint64_t)v4);
    char v2 = 1;
  }
  return v2 & 1;
}

double (*LazyScrollable.makeTarget<A>(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))@<D0>(uint64_t a1@<X8>)
{
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v9 = Strong;
    uint64_t IsValid = AGSubgraphIsValid();
    if (IsValid)
    {
      MEMORY[0x1F4188790](IsValid);
      void v19[2] = a3;
      void v19[3] = a4;
      v19[4] = v9;
      v19[5] = a1;
      type metadata accessor for [Any](0, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBB718]);
      _LazyLayoutViewCache.withPlacementData<A>(_:)((void (*)(char *, uint64_t *, double))partial apply for closure #1 in LazyScrollable.makeTarget<A>(for:), (uint64_t)v19, (uint64_t)&v20);
      if ((v21 & 1) == 0)
      {
        uint64_t v13 = v20;
        static Transaction.current.getter();
        uint64_t v14 = Transaction.scrollTargetAnchor.getter();
        uint64_t v16 = v15;
        char v18 = v17 & 1;
        swift_release();
        uint64_t v11 = LazyScrollable.makeTarget(at:anchor:)(v13, v14, v16, v18, a2);
        swift_release();
        return v11;
      }
    }
    swift_release();
  }
  return 0;
}

double (*LazyScrollable.makeTarget(at:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5))@<D0>(uint64_t a1@<X8>)
{
  uint64_t v11 = swift_allocObject();
  uint64_t v13 = *v5;
  uint64_t v12 = v5[1];
  swift_weakLoadStrong();
  swift_weakInit();
  swift_release();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = *(_OWORD *)(a5 + 16);
  *(void *)(v14 + 32) = v11;
  *(void *)(v14 + 40) = a1;
  *(void *)(v14 + 48) = v12;
  *(void *)(v14 + 56) = v13;
  *(void *)(v14 + 64) = a2;
  *(void *)(v14 + 72) = a3;
  *(unsigned char *)(v14 + 80) = a4 & 1;
  return partial apply for closure #1 in LazyScrollable.makeTarget(at:anchor:);
}

double closure #1 in LazyScrollable.makeTarget(at:anchor:)@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = Strong;
    uint64_t IsValid = AGSubgraphIsValid();
    if (IsValid)
    {
      MEMORY[0x1F4188790](IsValid);
      v15[2] = v5;
      v15[3] = a1;
      type metadata accessor for Scrollable?(0, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBB718]);
      _LazyLayoutViewCache.withPlacementData<A>(_:)((void (*)(char *, uint64_t *, double))partial apply for closure #1 in closure #1 in LazyScrollable.makeTarget(at:anchor:), (uint64_t)v15, (uint64_t)&v16);
      if ((v18 & 1) == 0)
      {
        long long v26 = v16;
        long long v27 = v17;
        Weakuint64_t Value = AGGraphGetWeakValue();
        if (WeakValue)
        {
          uint64_t v23 = *(void *)WeakValue;
          long long v24 = *(_OWORD *)(WeakValue + 8);
          long long v25 = *(_OWORD *)(WeakValue + 24);
          uint64_t v8 = (long long *)AGGraphGetWeakValue();
          if (v8)
          {
            long long v16 = *v8;
            uint64_t v9 = swift_retain();
            *(double *)&unint64_t v10 = MEMORY[0x18C10C240](v9);
            ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v11, v10));
            static CoordinateSpace.scrollViewContent.getter();
            uint64_t v20 = v23;
            long long v21 = v24;
            long long v22 = v25;
            CGRect.convert(to:transform:)();
            outlined destroy of CoordinateSpace((uint64_t)&v16);
            ScrollTarget.init(rect:anchor:)();
            swift_release();
            swift_release();
            unsigned __int8 v12 = v19;
            long long v13 = v17;
            *(_OWORD *)a2 = v16;
            *(_OWORD *)(a2 + 16) = v13;
            double result = *(double *)&v18;
            *(_OWORD *)(a2 + 32) = v18;
            *(_WORD *)(a2 + 48) = v12;
            return result;
          }
        }
      }
    }
    swift_release();
  }
  double result = 0.0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_WORD *)(a2 + 48) = 256;
  return result;
}

CGFloat closure #1 in closure #1 in LazyScrollable.makeTarget(at:anchor:)@<D0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v26[0] = a4;
  v26[1] = a1;
  uint64_t v7 = *(void *)(*(void *)a3 + 328);
  uint64_t v8 = *(void *)(*(void *)a3 + 320);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  unsigned __int8 v12 = (char *)v26 - v11;
  long long v13 = a2[1];
  long long v64 = *a2;
  long long v65 = v13;
  double v14 = *((double *)a2 + 4);
  uint64_t v15 = *((void *)a2 + 5);
  long long v16 = a2[16];
  long long v61 = a2[15];
  long long v62 = v16;
  v63[0] = a2[17];
  *(_OWORD *)((char *)v63 + 9) = *(long long *)((char *)a2 + 281);
  long long v17 = a2[12];
  long long v57 = a2[11];
  long long v58 = v17;
  long long v18 = a2[14];
  long long v59 = a2[13];
  long long v60 = v18;
  long long v19 = a2[8];
  long long v53 = a2[7];
  long long v54 = v19;
  long long v20 = a2[10];
  long long v55 = a2[9];
  long long v56 = v20;
  long long v21 = a2[4];
  long long v49 = a2[3];
  long long v50 = v21;
  long long v22 = a2[6];
  long long v51 = a2[5];
  long long v52 = v22;
  LazyLayoutViewCache.subviews(context:)(*MEMORY[0x1E4F4E7A0], (uint64_t)v47);
  _LazyLayoutViewCache.copyCacheState<A>(type:)(AssociatedTypeWitness, AssociatedTypeWitness);
  v27[0] = v64;
  v27[1] = v65;
  double v28 = v14;
  uint64_t v29 = v15;
  *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v63 + 9);
  long long v42 = v61;
  long long v43 = v62;
  v44[0] = v63[0];
  long long v38 = v57;
  long long v39 = v58;
  long long v40 = v59;
  long long v41 = v60;
  long long v34 = v53;
  long long v35 = v54;
  long long v36 = v55;
  long long v37 = v56;
  long long v30 = v49;
  long long v31 = v50;
  long long v32 = v51;
  long long v33 = v52;
  (*(void (**)(void *__return_ptr, void, unsigned char *, _OWORD *, char *, uint64_t, uint64_t))(v7 + 112))(v48, v26[0], v47, v27, v12, v8, v7);
  outlined init with take of CGRect?((uint64_t)v48, (uint64_t)&v45);
  outlined init with take of CGRect?((uint64_t)v48, (uint64_t)v27);
  if ((LOBYTE(v28) & 1) == 0 && *(unsigned char *)AGGraphGetValue() == 1) {
    v45.origin.CGFloat x = v14 - CGRectGetMaxX(v45);
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, AssociatedTypeWitness);
  outlined destroy of _LazyLayout_Subviews((uint64_t)v47);
  char v23 = v46;
  CGFloat result = v45.origin.x;
  CGSize size = v45.size;
  *(CGPoint *)a5 = v45.origin;
  *(CGSize *)(a5 + 16) = size;
  *(unsigned char *)(a5 + 32) = v23;
  return result;
}

uint64_t LazyScrollable.subviewClosestTo(rect:)@<X0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>, double a4@<D2>, double a5@<D3>)
{
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    goto LABEL_5;
  }
  uint64_t v11 = result;
  if (!AGSubgraphIsValid()
    || (LazyScrollable.transform.getter((uint64_t)&v44), uint64_t v12 = v44, (void)v44 == 1))
  {
    uint64_t result = swift_release();
LABEL_5:
    *(void *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return result;
  }
  v47[0] = v44;
  v47[1] = *(_OWORD *)v45;
  uint64_t v48 = *(void *)&v45[16];
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (!WeakValue)
  {
    swift_release();
    uint64_t result = outlined consume of Transaction?(v12);
    goto LABEL_5;
  }
  uint64_t v14 = *WeakValue;
  uint64_t v15 = WeakValue[1];
  char v16 = *(unsigned char *)AGGraphGetValue();
  int v17 = *(_DWORD *)(v11 + 40);
  uint64_t v18 = *(void *)(v11 + 48);
  int v19 = *(_DWORD *)(v11 + 112);
  *(void *)&long long v44 = *(void *)(v11 + 32);
  DWORD2(v44) = v17;
  *(void *)CGRect v45 = v18;
  *(_OWORD *)&v45[8] = *(_OWORD *)(v11 + 56);
  *(_OWORD *)&v45[24] = *(_OWORD *)(v11 + 72);
  *(_OWORD *)&v45[40] = *(_OWORD *)(v11 + 88);
  *(void *)&v45[56] = *(void *)(v11 + 104);
  LODWORD(v46) = v19;
  _ViewInputs.size.getter();
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v21 = Value[1];
  long long v44 = *Value;
  *(_OWORD *)CGRect v45 = v21;
  double v23 = MEMORY[0x18C114450](Value, v22);
  uint64_t v25 = v24;
  *(void *)&long long v44 = v14;
  *((void *)&v44 + 1) = v15;
  *(double *)&unint64_t v26 = MEMORY[0x18C10C240]();
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v27, v26));
  MEMORY[0x1F4188790](v28);
  void v34[2] = v14;
  long long v34[3] = v15;
  char v35 = v16;
  double v36 = a2;
  double v37 = a3;
  double v38 = a4;
  double v39 = a5;
  uint64_t v40 = v11;
  double v41 = v23;
  uint64_t v42 = v25;
  long long v43 = v47;
  type metadata accessor for [Any](0, &lazy cache variable for type metadata for ScrollableCollectionSubview?, MEMORY[0x1E4F41010], MEMORY[0x1E4FBB718]);
  _LazyLayoutViewCache.withPlacementData<A>(_:)((void (*)(char *, uint64_t *, double))partial apply for closure #1 in LazyScrollable.subviewClosestTo(rect:), (uint64_t)v34, (uint64_t)&v44);
  swift_release();
  uint64_t v29 = v46;
  long long v30 = *(_OWORD *)v45;
  long long v31 = *(_OWORD *)&v45[16];
  long long v32 = *(_OWORD *)&v45[32];
  long long v33 = *(_OWORD *)&v45[48];
  *(_OWORD *)a1 = v44;
  *(_OWORD *)(a1 + 16) = v30;
  *(_OWORD *)(a1 + 32) = v31;
  *(_OWORD *)(a1 + 48) = v32;
  *(_OWORD *)(a1 + 64) = v33;
  *(void *)(a1 + 80) = v29;
  return swift_release();
}

uint64_t closure #1 in LazyScrollable.subviewClosestTo(rect:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>, double a8@<D1>, double a9@<D2>, double a10@<D3>, double a11@<D4>, double a12@<D5>, double a13@<D6>, double a14@<D7>)
{
  double v89 = a13;
  double v90 = a14;
  double v98 = a11;
  double v99 = a12;
  double v94 = a9;
  double v95 = a10;
  double v122 = a7;
  double v123 = a8;
  uint64_t v111 = a1;
  uint64_t v113 = a6;
  uint64_t v18 = *(void *)(*(void *)a4 + 328);
  uint64_t v109 = *(void *)(*(void *)a4 + 320);
  uint64_t v110 = v18;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v112 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v21 = (char *)&v87 - v20;
  unsigned int v22 = *a2;
  unsigned int v107 = a2[1];
  unsigned int v108 = v22;
  unsigned int v106 = a2[2];
  unsigned int v124 = a2[3];
  uint64_t v126 = *((void *)a2 + 2);
  uint64_t v125 = *((void *)a2 + 3);
  CGFloat v129 = *((double *)a2 + 4);
  CGFloat v128 = *((double *)a2 + 5);
  int v104 = a2[12];
  double v23 = *((double *)a2 + 21);
  double v24 = *((double *)a2 + 22);
  uint64_t v25 = *((void *)a2 + 23);
  uint64_t v26 = *((void *)a2 + 24);
  double v28 = *((double *)a2 + 25);
  double v27 = *((double *)a2 + 26);
  uint64_t v29 = *((void *)a2 + 27);
  uint64_t v30 = *((void *)a2 + 28);
  uint64_t v119 = *((void *)a2 + 29);
  uint64_t v118 = *((void *)a2 + 30);
  uint64_t v117 = *((void *)a2 + 31);
  uint64_t v116 = *((void *)a2 + 32);
  uint64_t v115 = *((void *)a2 + 33);
  uint64_t v114 = *((void *)a2 + 34);
  unint64_t v127 = *((void *)a2 + 35);
  unint64_t v130 = *((void *)a2 + 36);
  char v31 = *((unsigned char *)a2 + 296);
  unint64_t v164 = *(void *)&v122;
  unint64_t v165 = *(void *)&v123;
  CGFloat v92 = MEMORY[0x18C10C240]();
  CGFloat v93 = v32;
  double v122 = v24;
  double v123 = v23;
  unint64_t v164 = *(void *)&v23;
  unint64_t v165 = *(void *)&v24;
  uint64_t v100 = v25;
  uint64_t v166 = v25;
  uint64_t v120 = v30;
  uint64_t v121 = v26;
  uint64_t v167 = v26;
  CGFloat v168 = v28;
  double v33 = v27;
  CGFloat v169 = v27;
  uint64_t v34 = v29;
  v170[0] = v29;
  v170[1] = v30;
  v170[2] = v119;
  v170[3] = v118;
  v170[4] = v117;
  v170[5] = v116;
  v170[6] = v115;
  v170[7] = v114;
  ScrollGeometry.contentSize.getter();
  int v88 = a3;
  uint64_t v91 = a5;
  uint64_t v105 = a4;
  int v103 = v31 & 1;
  uint64_t v101 = v21;
  uint64_t v102 = AssociatedTypeWitness;
  if (a3)
  {
    double v42 = v35;
    v183.origin.CGFloat x = v92;
    double v41 = v93;
    v183.origin.CGFloat y = v93;
    v183.size.CGFloat height = v128;
    v183.size.CGFloat width = v129;
    double v40 = v42 - CGRectGetMaxX(v183);
    double v36 = v98;
    double v37 = v99;
    double v38 = v94;
    double v39 = v95;
  }
  else
  {
    double v36 = v98;
    double v37 = v99;
    double v38 = v94;
    double v39 = v95;
    double v40 = v92;
    double v41 = v93;
  }
  CGRect v184 = CGRectOffset(*(CGRect *)&v38, -v40, -v41);
  CGFloat x = v184.origin.x;
  CGFloat y = v184.origin.y;
  CGFloat width = v184.size.width;
  CGFloat height = v184.size.height;
  uint64_t v96 = v34;
  double v97 = v28;
  double v47 = v33;
  uint64_t v48 = v34;
  uint64_t v49 = v120;
  EdgeInsets.originOffset.getter();
  CGFloat v51 = -v50;
  CGFloat v53 = -v52;
  v185.origin.CGFloat x = x;
  v185.origin.CGFloat y = y;
  v185.size.CGFloat width = width;
  v185.size.CGFloat height = height;
  CGRect v186 = CGRectOffset(v185, v51, v53);
  double v98 = v186.origin.y;
  double v99 = v186.origin.x;
  unint64_t v164 = *(void *)&v123;
  unint64_t v165 = *(void *)&v122;
  uint64_t v54 = v100;
  uint64_t v166 = v100;
  uint64_t v167 = v121;
  CGFloat v168 = v28;
  CGFloat v169 = v47;
  v170[0] = v48;
  v170[1] = v49;
  uint64_t v55 = v118;
  uint64_t v56 = v119;
  v170[2] = v119;
  v170[3] = v118;
  uint64_t v58 = v116;
  uint64_t v57 = v117;
  v170[4] = v117;
  v170[5] = v116;
  uint64_t v59 = v114;
  uint64_t v60 = v115;
  v170[6] = v115;
  v170[7] = v114;
  ScrollGeometry.visibleRect.getter();
  unsigned int v61 = v107;
  unsigned int v62 = v108;
  unint64_t v164 = __PAIR64__(v107, v108);
  double v98 = v98 - v64;
  double v99 = v99 - v63;
  unsigned int v65 = v106;
  unint64_t v165 = __PAIR64__(v124, v106);
  uint64_t v166 = v126;
  uint64_t v167 = v125;
  CGFloat v168 = v129;
  CGFloat v169 = v128;
  long long v66 = *(_OWORD *)(a2 + 33);
  *(_OWORD *)((char *)&v170[8] + 4) = *(_OWORD *)(a2 + 29);
  *(_OWORD *)((char *)&v170[10] + 4) = v66;
  *(_OWORD *)((char *)&v170[12] + 4) = *(_OWORD *)(a2 + 37);
  int v67 = a2[41];
  int v68 = v104;
  LODWORD(v170[0]) = v104;
  HIDWORD(v170[14]) = v67;
  long long v69 = *(_OWORD *)(a2 + 17);
  *(_OWORD *)((char *)v170 + 4) = *(_OWORD *)(a2 + 13);
  *(_OWORD *)((char *)&v170[2] + 4) = v69;
  long long v70 = *(_OWORD *)(a2 + 25);
  *(_OWORD *)((char *)&v170[4] + 4) = *(_OWORD *)(a2 + 21);
  *(_OWORD *)((char *)&v170[6] + 4) = v70;
  *(double *)&long long v171 = v123;
  *((double *)&v171 + 1) = v122;
  uint64_t v172 = v54;
  uint64_t v173 = v121;
  double v174 = v97;
  double v71 = v47;
  *(double *)&long long v175 = v47;
  *((void *)&v175 + 1) = v96;
  *(void *)&long long v176 = v120;
  *((void *)&v176 + 1) = v56;
  *(void *)&long long v177 = v55;
  *((void *)&v177 + 1) = v57;
  *(void *)&long long v178 = v58;
  *((void *)&v178 + 1) = v60;
  uint64_t v179 = v59;
  unint64_t v72 = v127;
  unint64_t v180 = v127;
  unint64_t v181 = v130;
  char v182 = v31;
  *(double *)&long long v131 = v123;
  *((double *)&v131 + 1) = v122;
  uint64_t v132 = v54;
  uint64_t v133 = v121;
  CGFloat v134 = v97;
  *(double *)&long long v135 = v71;
  *((void *)&v135 + 1) = v96;
  *(void *)&long long v136 = v120;
  *((void *)&v136 + 1) = v56;
  *(void *)&long long v137 = v55;
  *((void *)&v137 + 1) = v57;
  *(void *)&long long v138 = v58;
  *((void *)&v138 + 1) = v60;
  *(void *)&long long v139 = v59;
  ScrollGeometry.visibleRect.getter();
  double v74 = v98;
  double v73 = v99;
  unint64_t v75 = v130;
  ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(*(unint64_t *)&v98, *(unint64_t *)&v99), (CGSize)__PAIR128__(v130, v72));
  ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(*(unint64_t *)&v74, *(unint64_t *)&v73), (CGSize)__PAIR128__(v75, v72));
  long long v76 = v171;
  uint64_t v77 = v172;
  uint64_t v78 = v173;
  double v79 = v174;
  long long v80 = v175;
  uint64_t v81 = v176;
  double v122 = *(double *)&v177;
  double v123 = *((double *)&v176 + 1);
  uint64_t v120 = v178;
  uint64_t v121 = *((void *)&v177 + 1);
  uint64_t v118 = v179;
  uint64_t v119 = *((void *)&v178 + 1);
  long long v131 = v171;
  uint64_t v132 = v172;
  uint64_t v133 = v173;
  CGFloat v134 = v174;
  long long v135 = v175;
  long long v136 = v176;
  long long v137 = v177;
  long long v138 = v178;
  *(void *)&long long v139 = v179;
  ScrollGeometry.visibleRect.getter();
  LazyLayoutViewCache.subviews(context:)(*MEMORY[0x1E4F4E7A0], (uint64_t)v163);
  CGRect v83 = v101;
  uint64_t v82 = v102;
  _LazyLayoutViewCache.copyCacheState<A>(type:)(v102, v102);
  uint64_t v158 = 0;
  char v159 = 1;
  long long v160 = 0u;
  long long v161 = 0u;
  memset(v162, 0, sizeof(v162));
  *(void *)&long long v131 = __PAIR64__(v61, v62);
  *((void *)&v131 + 1) = __PAIR64__(v124, v65);
  uint64_t v132 = v126;
  uint64_t v133 = v125;
  CGFloat v134 = v129;
  *(CGFloat *)&long long v135 = v128;
  DWORD2(v135) = v68;
  long long v136 = *(_OWORD *)&v170[1];
  long long v137 = *(_OWORD *)&v170[3];
  long long v138 = *(_OWORD *)&v170[5];
  long long v139 = *(_OWORD *)&v170[7];
  long long v140 = *(_OWORD *)&v170[9];
  long long v141 = *(_OWORD *)&v170[11];
  long long v142 = *(_OWORD *)&v170[13];
  long long v143 = v76;
  uint64_t v144 = v77;
  uint64_t v145 = v78;
  double v146 = v79;
  long long v147 = v80;
  uint64_t v148 = v81;
  double v149 = v123;
  double v150 = v122;
  uint64_t v151 = v121;
  uint64_t v152 = v120;
  uint64_t v153 = v119;
  uint64_t v154 = v118;
  unint64_t v155 = v127;
  unint64_t v156 = v130;
  char v157 = v103;
  (*(void (**)(unsigned char *, long long *, char *, uint64_t *, uint64_t))(v110 + 72))(v163, &v131, v83, &v158, v109);
  if ((void)v160)
  {
    char v84 = v88 & 1;
    long long v131 = v160;
    LOBYTE(v132) = v161 & 1;
    uint64_t v133 = *((void *)&v161 + 1);
    LOBYTE(v134) = v162[0] & 1;
    long long v135 = *(_OWORD *)&v162[1];
    long long v136 = *(_OWORD *)&v162[3];
    swift_retain();
    closure #1 in closure #1 in LazyScrollable.subviewClosestTo(rect:)((uint64_t)&v131, v84);
    swift_release_n();
  }
  else
  {
    uint64_t v85 = (_OWORD *)v113;
    *(void *)(v113 + 80) = 0;
    v85[3] = 0u;
    v85[4] = 0u;
    v85[1] = 0u;
    v85[2] = 0u;
    *uint64_t v85 = 0u;
  }
  (*(void (**)(char *, uint64_t))(v112 + 8))(v83, v82);
  return outlined destroy of _LazyLayout_Subviews((uint64_t)v163);
}

uint64_t closure #1 in closure #1 in LazyScrollable.subviewClosestTo(rect:)(uint64_t a1, char a2)
{
  swift_retain();
  double v3 = _LazyLayout_PlacedSubview.size.getter();
  CGPoint v5 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v4, *(unint64_t *)&v3));
  double v6 = _LazyLayout_PlacedSubview.size.getter();
  CGFloat v8 = v7;
  swift_release();
  if (a2)
  {
    v10.origin.CGFloat x = v5.x;
    v10.origin.CGFloat y = v5.y;
    v10.size.CGFloat width = v6;
    v10.size.CGFloat height = v8;
    CGRectGetMaxX(v10);
  }
  swift_retain();
  swift_bridgeObjectRetain();
  return ScrollableCollectionSubview.init(id:frame:transform:)();
}

uint64_t LazyScrollable.visibleCollectionViewIDs.getter()
{
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t v1 = MEMORY[0x1E4FBC860];
  if (Strong)
  {
    if (AGSubgraphIsValid())
    {
      type metadata accessor for [Any](0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
      int64_t v2 = *(void *)(*(void *)AGGraphGetValue() + 16);
      if (v2)
      {
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
        uint64_t v3 = 32;
        do
        {
          _ViewList_ID.canonicalID.getter();
          unint64_t v5 = *(void *)(v1 + 16);
          unint64_t v4 = *(void *)(v1 + 24);
          if (v5 >= v4 >> 1) {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v4 > 1), v5 + 1, 1);
          }
          *(void *)(v1 + 16) = v5 + 1;
          uint64_t v6 = v1 + 16 * v5;
          *(void *)(v6 + 32) = v8;
          *(void *)(v6 + 40) = v9;
          v3 += 72;
          --v2;
        }
        while (v2);
        swift_bridgeObjectRelease();
      }
    }
    swift_release();
  }
  return v1;
}

uint64_t static LazyScrollable.hasMultipleViewsInAxis(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return static LazyLayout.hasMultipleViewsInAxis(_:)(a1 & 1, a2, a3) & 1;
}

uint64_t LazyScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)@<X0>(uint64_t *a1@<X0>, unsigned int *a2@<X1>, _OWORD *a3@<X8>, double a4@<D2>, double a5@<D3>)
{
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  unsigned int v10 = *a2;
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    goto LABEL_13;
  }
  if (!AGSubgraphIsValid()) {
    goto LABEL_12;
  }
  unsigned int v37 = v10;
  v56.origin.CGFloat x = -1.0;
  v56.origin.CGFloat y = -1.0;
  v56.size.CGFloat width = 2.0;
  v56.size.CGFloat height = 2.0;
  UnitPoint.in(_:)(v56);
  type metadata accessor for [Any](0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  uint64_t v12 = *(void *)(*(void *)AGGraphGetValue() + 16);
  if (!v12)
  {
LABEL_12:
    uint64_t result = swift_release();
LABEL_13:
    *a3 = xmmword_18834BB90;
    return result;
  }
  unint64_t v13 = 0;
  uint64_t v14 = 96;
  while (1)
  {
    uint64_t result = AGGraphGetValue();
    if (v13 >= *(void *)(*(void *)result + 16))
    {
      __break(1u);
      goto LABEL_15;
    }
    uint64_t v15 = *(void *)(*(void *)result + v14 - 64);
    unint64_t v16 = *(void *)(v15 + 144);
    unint64_t v47 = *(void *)(v15 + 136);
    unint64_t v48 = v16;
    _ViewList_ID.canonicalID.getter();
    unint64_t v47 = v38;
    unint64_t v48 = v39;
    v55[0] = v8;
    v55[1] = v9;
    char v17 = MEMORY[0x18C10D6E0](&v47, v55);
    swift_release();
    if (v17) {
      break;
    }
    ++v13;
    v14 += 72;
    if (v12 == v13) {
      goto LABEL_12;
    }
  }
  uint64_t result = AGGraphGetValue();
  if (v13 >= *(void *)(*(void *)result + 16))
  {
LABEL_15:
    __break(1u);
    return result;
  }
  uint64_t v18 = (void *)(*(void *)result + v14);
  uint64_t v20 = *(v18 - 8);
  char v21 = *((unsigned char *)v18 - 48);
  uint64_t v22 = *(v18 - 5);
  char v23 = *((unsigned char *)v18 - 32);
  uint64_t v24 = *(v18 - 3);
  uint64_t v25 = *(v18 - 2);
  uint64_t v26 = *(v18 - 1);
  uint64_t v27 = *v18;
  unint64_t v47 = *(v18 - 7);
  unint64_t v19 = v47;
  LOBYTE(v48) = v21;
  uint64_t v49 = v22;
  char v50 = v23;
  uint64_t v51 = v24;
  uint64_t v52 = v25;
  uint64_t v53 = v26;
  uint64_t v54 = v27;
  swift_retain();
  double v28 = _LazyLayout_PlacedSubview.size.getter();
  CGPoint v30 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v29, *(unint64_t *)&v28));
  unint64_t v39 = v19;
  char v40 = v21;
  uint64_t v41 = v22;
  char v42 = v23;
  uint64_t v43 = v24;
  uint64_t v44 = v25;
  uint64_t v45 = v26;
  uint64_t v46 = v27;
  double v31 = _LazyLayout_PlacedSubview.size.getter();
  CGFloat v33 = v32;
  swift_release();
  v57.origin.CGFloat x = v30.x;
  v57.origin.CGFloat y = v30.y;
  v57.size.CGFloat width = v31;
  v57.size.CGFloat height = v33;
  CGRectInset(v57, -a4, -a5);
  unint64_t v38 = __PAIR64__(HIDWORD(v20), v37);
  MEMORY[0x1F4188790](v34);
  uint64_t v35 = specialized LazyScrollable.bestIndex(target:border:fromIndex:ignoredViews:distance:)(v13, 0, (int *)&v38, (uint64_t (*)(__n128, __n128, __n128, __n128))partial apply for closure #1 in LazyScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:), a4, a5);
  if (v36) {
    goto LABEL_12;
  }
  unint64_t v38 = v35;
  closure #2 in LazyScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)(&v38);
  return swift_release();
}

uint64_t closure #1 in LazyScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, double a9, double a10)
{
  CGFloat v18 = a7;
  CGFloat v20 = a3;
  CGFloat v21 = a1;
  double v22 = a10;
  if (a10 == 0.0)
  {
    double v22 = a9;
    CGFloat v23 = a3;
    CGFloat v20 = a4;
    CGFloat v24 = a1;
    CGFloat v21 = a2;
    double v25 = a7;
    CGFloat v18 = a8;
    CGFloat v26 = a5;
    a5 = a6;
  }
  else
  {
    CGFloat v23 = a4;
    CGFloat v24 = a2;
    double v25 = a8;
    CGFloat v26 = a6;
    if (a9 != 0.0) {
      return 0;
    }
  }
  CGFloat rect_16 = v25;
  double rect_24 = v22;
  CGFloat rect = v26;
  CGRect.subscript.getter();
  double v28 = v27;
  double v30 = v29;
  uint64_t result = CGRect.subscript.getter();
  if (v28 > v31) {
    double v31 = v28;
  }
  if (v32 >= v30) {
    double v32 = v30;
  }
  if (v31 >= v32) {
    return 0;
  }
  if (v31 > v32)
  {
    __break(1u);
  }
  else
  {
    v39.origin.CGFloat x = v24;
    v39.origin.CGFloat y = v21;
    v39.size.CGFloat width = v23;
    v39.size.CGFloat height = v20;
    double MidX = CGRectGetMidX(v39);
    v40.origin.CGFloat x = rect;
    v40.origin.CGFloat y = a5;
    v40.size.CGFloat width = rect_16;
    v40.size.CGFloat height = v18;
    double v34 = MidX - CGRectGetMidX(v40);
    if (rect_24 < 0.0) {
      double v34 = -v34;
    }
    if (v34 < 0.0) {
      return 0;
    }
    return *(void *)&v34;
  }
  return result;
}

uint64_t closure #2 in LazyScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)(unint64_t *a1)
{
  unint64_t v1 = *a1;
  type metadata accessor for [Any](0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  uint64_t result = AGGraphGetValue();
  if ((v1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v1 < *(void *)(*(void *)result + 16))
  {
    return _ViewList_ID.canonicalID.getter();
  }
  __break(1u);
  return result;
}

uint64_t LazyScrollable.applyCollectionViewIDs(from:to:)()
{
  if (!swift_weakLoadStrong()) {
    goto LABEL_5;
  }
  if (!AGSubgraphIsValid())
  {
    swift_release();
LABEL_5:
    char v2 = 1;
    return v2 & 1;
  }
  uint64_t v0 = LazyLayoutViewCache.subviews(context:)(*MEMORY[0x1E4F4E7A0], (uint64_t)v6);
  MEMORY[0x1F4188790](v0);
  uint64_t v5 = v7[11];
  uint64_t v1 = outlined init with copy of _ViewList_Node((uint64_t)v7, (uint64_t)v4);
  MEMORY[0x1F4188790](v1);
  swift_bridgeObjectRetain();
  char v2 = _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v4);
  swift_release();
  swift_bridgeObjectRelease();
  outlined destroy of _LazyLayout_Subviews((uint64_t)v6);
  return v2 & 1;
}

uint64_t closure #1 in LazyScrollable.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  _ViewList_ID.canonicalID.getter();
  v6[0] = v6[2];
  v6[1] = v6[3];
  a3(v6, a2);

  return swift_release();
}

uint64_t LazyScrollable.collectionViewID(for:)@<X0>(long long *a1@<X8>)
{
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    goto LABEL_6;
  }
  if (!AGSubgraphIsValid() || !LazyLayoutViewCache.item(for:)())
  {
    uint64_t result = swift_release();
LABEL_6:
    long long v3 = xmmword_18834BB90;
    goto LABEL_7;
  }
  swift_bridgeObjectRetain();
  swift_release();
  _ViewList_ID.canonicalID.getter();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  long long v3 = v4;
LABEL_7:
  *a1 = v3;
  return result;
}

uint64_t LazyScrollable.firstCollectionViewIndex(of:)()
{
  if (!swift_weakLoadStrong()) {
    return 0;
  }
  if (!AGSubgraphIsValid())
  {
    swift_release();
    return 0;
  }
  LazyLayoutViewCache.subviews(context:)(*MEMORY[0x1E4F4E7A0], (uint64_t)v2);
  uint64_t v0 = _LazyLayout_Subviews.firstIndex(of:style:)();
  swift_release();
  outlined destroy of _LazyLayout_Subviews((uint64_t)v2);
  return v0;
}

uint64_t LazyScrollable.scroll(toCollectionViewID:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  if (swift_weakLoadStrong())
  {
    if (AGSubgraphIsValid())
    {
      LazyLayoutViewCache.subviews(context:)(*MEMORY[0x1E4F4E7A0], (uint64_t)v15);
      uint64_t v9 = _LazyLayout_Subviews.firstIndex(of:style:)();
      if ((v10 & 1) == 0)
      {
        uint64_t v11 = LazyScrollable.makeTarget(at:anchor:)(v9, a2, a3, a4 & 1, a5);
        if (v11)
        {
          uint64_t v12 = (uint64_t)v11;
          swift_getWitnessTable();
          char v13 = ScrollableContainer.setParentTarget(_:)();
          outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v12);
          swift_release();
          outlined destroy of _LazyLayout_Subviews((uint64_t)v15);
          return v13 & 1;
        }
      }
      outlined destroy of _LazyLayout_Subviews((uint64_t)v15);
    }
    swift_release();
  }
  return 0;
}

uint64_t static LazyScrollable.accessibilityRole.getter@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  return static LazyLayout.accessibilityRole.getter(a1, a2);
}

uint64_t LazyScrollable.init(position:transform:parent:children:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  *a5 = a1;
  a5[1] = a2;
  a5[2] = a3;
  a5[3] = a4;
  swift_weakInit();

  return swift_release();
}

double (*protocol witness for ScrollableContainer.makeTarget<A>(for:) in conformance LazyScrollable<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))@<D0>(uint64_t a1@<X8>)
{
  return LazyScrollable.makeTarget<A>(for:)(a1, a4, a2, a3);
}

uint64_t protocol witness for static ScrollableCollection.hasMultipleViewsInAxis(_:) in conformance LazyScrollable<A>(char a1, uint64_t a2)
{
  return static LazyScrollable.hasMultipleViewsInAxis(_:)(a1 & 1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t protocol witness for ScrollableCollection.firstCollectionViewIndex(of:) in conformance LazyScrollable<A>()
{
  return LazyScrollable.firstCollectionViewIndex(of:)();
}

uint64_t protocol witness for ScrollableCollection.scroll(toCollectionViewID:anchor:) in conformance LazyScrollable<A>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return LazyScrollable.scroll(toCollectionViewID:anchor:)(a1, a2, a3, a4 & 1, a5);
}

uint64_t protocol witness for static ScrollableCollection.accessibilityRole.getter in conformance LazyScrollable<A>@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return static LazyScrollable.accessibilityRole.getter(*(void *)(a1 + 24), a2);
}

uint64_t protocol witness for Scrollable.setContentTarget(_:) in conformance LazyScrollable<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF9D8](a1, a2, a3, WitnessTable);
}

uint64_t protocol witness for Scrollable.adjustContentOffset(by:reason:) in conformance LazyScrollable<A>(uint64_t a1, uint64_t a2, double a3, double a4)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  v9.n128_f64[0] = a3;
  v10.n128_f64[0] = a4;

  return MEMORY[0x1F40FF9E0](a1, a2, WitnessTable, v9, v10);
}

uint64_t protocol witness for Scrollable.mapFirstChild<A, B>(ofType:body:) in conformance LazyScrollable<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF9C8](a1, a2, a3, a6, a4, a5, WitnessTable);
}

uint64_t LazySubviewPrefetcher.Phase.description.getter(uint64_t a1, char a2)
{
  if (a2)
  {
    if (a2 == 1) {
      return 0x6863746566657270;
    }
    else {
      return 0x6574656C706D6F63;
    }
  }
  else
  {
    v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    return 0x77656956656B616DLL;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance LazySubviewPrefetcher<A>.Phase()
{
  return LazySubviewPrefetcher.Phase.description.getter(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t closure #1 in LazySubviewPrefetcher.updateValue()(long long *a1, uint64_t a2, uint64_t a3, char a4)
{
  int v8 = *((_DWORD *)a1 + 10);
  uint64_t v9 = type metadata accessor for LazySubviewPrefetcher();
  type metadata accessor for LazyLayoutViewCache();
  uint64_t result = AGGraphGetValue();
  int v11 = *(_DWORD *)(*(void *)result + 212);
  if (v8 == v11)
  {
    unsigned int v12 = *((unsigned __int8 *)a1 + 56);
    if (v12 > 1) {
      return result;
    }
    uint64_t v13 = *((void *)a1 + 6);
  }
  else
  {
    LOBYTE(v12) = 0;
    uint64_t v13 = 0;
    *((_DWORD *)a1 + 10) = v11;
    *((void *)a1 + 6) = 0;
    *((unsigned char *)a1 + 56) = 0;
  }
  do
  {
    uint64_t v14 = *((void *)a1 + 4);
    int v15 = *((_DWORD *)a1 + 10);
    long long v16 = a1[1];
    long long v20 = *a1;
    long long v21 = v16;
    uint64_t v22 = v14;
    int v23 = v15;
    uint64_t v24 = v13;
    char v25 = v12;
    v18[0] = a2;
    v18[1] = a3;
    char v19 = a4;
    uint64_t result = LazySubviewPrefetcher.step(info:)((uint64_t)v18, v9);
    *((void *)a1 + 6) = result;
    *((unsigned char *)a1 + 56) = v17;
    if (!v17) {
      break;
    }
    uint64_t result = AGGraphHasDeadlinePassed();
    if (result) {
      break;
    }
    uint64_t v13 = *((void *)a1 + 6);
    unsigned int v12 = *((unsigned __int8 *)a1 + 56);
  }
  while (v12 < 2);
  return result;
}

uint64_t LazySubviewPrefetcher.step(info:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  int v6 = *(unsigned __int8 *)(a1 + 16);
  *(_OWORD *)&v13[9] = *(_OWORD *)((char *)v2 + 41);
  long long v7 = v2[1];
  v12[0] = *v2;
  v12[1] = v7;
  *(_OWORD *)uint64_t v13 = v2[2];
  uint64_t v8 = *(void *)&v13[16];
  if (v13[24])
  {
    if (v13[24] == 1)
    {
      MEMORY[0x1F4188790](a1);
      static Signpost.prefetchOutputs<A>(_:)();
      if (!v11) {
        return 0;
      }
    }
    return v8;
  }
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result != *MEMORY[0x1E4F4E7A0])
  {
    AGGraphClearUpdate();
    closure #1 in LazySubviewPrefetcher.step(info:)((uint64_t)v12, v4, v5, v6, *(uint64_t *)&v13[16], *(void *)(a2 + 16), *(void *)(a2 + 24), (uint64_t)&v11);
    AGGraphSetUpdate();
    if (v11 == 1) {
      uint64_t v10 = v8;
    }
    else {
      uint64_t v10 = v8 + 1;
    }
    if (v11) {
      return v10;
    }
    else {
      return 0;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in LazySubviewPrefetcher.step(info:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, int a4@<W4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v40 = a5;
  uint64_t v41 = a8;
  int v39 = a4;
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v35 = AssociatedTypeWitness;
  uint64_t v36 = v12;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)&v33 - v13;
  uint64_t v15 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v16);
  CGFloat v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v34 = *MEMORY[0x1E4F4E7A0];
  int v19 = *(_DWORD *)(a1 + 28);
  LOBYTE(v61) = 0;
  SizeAndSpacingContext.init(context:owner:environment:)();
  uint64_t v58 = v61;
  int v59 = v62;
  int v60 = v19;
  uint64_t v20 = type metadata accessor for LazySubviewPrefetcher();
  v57[2] = *(_OWORD *)AGGraphGetValue();
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v22 = Value[1];
  v57[0] = *Value;
  v57[1] = v22;
  uint64_t v23 = AGGraphGetValue();
  uint64_t v24 = *(void *)v23;
  long long v33 = *(_OWORD *)(v23 + 8);
  uint64_t v25 = *(void *)(v23 + 24);
  uint64_t v26 = *(void *)(v23 + 32);
  swift_retain();
  uint64_t v52 = v24;
  long long v53 = v33;
  uint64_t v54 = v25;
  uint64_t v55 = v26;
  type metadata accessor for LazyLayoutViewCache();
  AGGraphGetValue();
  HIBYTE(v56) = *(unsigned char *)AGGraphGetValue();
  uint64_t v27 = *(void *)(v20 + 16);
  uint64_t v28 = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16))(v18, v28, v27);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a7 + 120))(&v56, a6, a7);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, a6);
  AGGraphGetValue();
  double v29 = (char *)AGGraphGetValue();
  _LazyLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)(&v58, v57, (uint64_t)&v52, (char *)&v56 + 7, (int *)&v56, *v29, (uint64_t)&v61);
  AGGraphGetValue();
  swift_retain();
  LazyLayoutViewCache.subviews(context:)(v34, (uint64_t)&v52);
  swift_release();
  double v30 = *(void (**)(uint64_t, uint64_t))(**(void **)AGGraphGetValue() + 280);
  swift_retain();
  uint64_t v31 = v35;
  v30(v35, v35);
  swift_release();
  uint64_t v42 = a6;
  uint64_t v43 = a7;
  uint64_t v44 = a1;
  uint64_t v45 = &v52;
  uint64_t v46 = v37;
  uint64_t v47 = v38;
  char v48 = v39;
  uint64_t v49 = &v61;
  char v50 = v14;
  uint64_t v51 = v40;
  static Signpost.prefetchMakeView<A>(_:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v31);
  return outlined destroy of _LazyLayout_Subviews((uint64_t)&v52);
}

uint64_t closure #1 in closure #1 in LazySubviewPrefetcher.step(info:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, const void *a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, unsigned char *a7@<X8>, uint64_t a8, uint64_t a9)
{
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v12 = *(void *)(a8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(type metadata accessor for LazySubviewPrefetcher() + 16);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v14, Value, v15);
  memcpy(v21, a4, 0x129uLL);
  LOBYTE(v15) = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(a9 + 80))(a2, a3, v21, v18, v19, a8, a9);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, a8);
  *uint64_t v20 = v15;
  return result;
}

uint64_t default argument 10 of LazySubviewPrefetcher.init(layout:size:position:transform:environment:prefetchState:cache:containerSize:prefetchID:placementSeed:phase:)()
{
  return 0;
}

uint64_t LazySubviewPrefetcher.init(layout:size:position:transform:environment:prefetchState:cache:containerSize:prefetchID:placementSeed:phase:)@<X0>(uint64_t result@<X0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, uint64_t *a10, int a11, uint64_t a12, char a13)
{
  uint64_t v13 = *a10;
  *(_DWORD *)a9 = result;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(_DWORD *)(a9 + 16) = a5;
  *(_DWORD *)(a9 + 20) = a6;
  *(_DWORD *)(a9 + 24) = a7;
  *(_DWORD *)(a9 + 28) = a8;
  *(void *)(a9 + 32) = v13;
  *(_DWORD *)(a9 + 40) = a11;
  *(void *)(a9 + 48) = a12;
  *(unsigned char *)(a9 + 56) = a13;
  return result;
}

uint64_t specialized LazyScrollable.bestIndex(target:border:fromIndex:ignoredViews:distance:)(uint64_t a1, char a2, int *a3, uint64_t (*a4)(__n128, __n128, __n128, __n128), double a5, double a6)
{
  int v11 = *a3;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (AGSubgraphIsValid())
    {
      type metadata accessor for [Any](0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
      uint64_t v13 = *(void *)(*(void *)AGGraphGetValue() + 16);
      if (v13)
      {
        unint64_t v41 = 0;
        unint64_t v14 = 0;
        double v15 = -a5;
        double v16 = -a6;
        double v17 = INFINITY;
        uint64_t v18 = 88;
        uint64_t v40 = a4;
        char v39 = a2;
        uint64_t v38 = a1;
        char v37 = v11;
        while (1)
        {
          if ((a2 & 1) != 0 || a1 != v14)
          {
            uint64_t result = AGGraphGetValue();
            if (v14 >= *(void *)(*(void *)result + 16))
            {
              __break(1u);
              return result;
            }
            uint64_t v19 = *(void *)(*(void *)result + v18 - 56);
            if ((*(unsigned char *)(v19 + 165) != 1 || (v11 & 1) == 0) && (*(unsigned char *)(v19 + 166) != 1 || (v11 & 2) == 0))
            {
              swift_retain_n();
              if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
              {
                static LayoutComputer.defaultValue.getter();
              }
              else
              {
                AGGraphGetValue();
                swift_retain();
              }
              LayoutComputer.sizeThatFits(_:)();
              unint64_t v23 = v22;
              unint64_t v25 = v24;
              swift_release();
              CGPoint v26 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v25, v23));
              double x = v26.x;
              if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
              {
                static LayoutComputer.defaultValue.getter();
              }
              else
              {
                AGGraphGetValue();
                swift_retain();
              }
              LayoutComputer.sizeThatFits(_:)();
              CGFloat v29 = v28;
              CGFloat v31 = v30;
              swift_release_n();
              swift_release();
              int v32 = *(unsigned __int8 *)AGGraphGetValue();
              _ViewInputs.size.getter();
              AGGraphGetValue();
              MEMORY[0x18C114450]();
              if (v32 == 1)
              {
                double v34 = v33;
                v42.origin.double x = v26.x;
                v42.origin.CGFloat y = v26.y;
                v42.size.CGFloat width = v29;
                v42.size.CGFloat height = v31;
                double x = v34 - CGRectGetMaxX(v42);
              }
              a2 = v39;
              a1 = v38;
              LOBYTE(v11) = v37;
              v43.origin.double x = x;
              v43.origin.CGFloat y = v26.y;
              v43.size.CGFloat width = v29;
              v43.size.CGFloat height = v31;
              CGRect v44 = CGRectInset(v43, v15, v16);
              uint64_t v35 = v40((__n128)v44.origin, *(__n128 *)&v44.origin.y, (__n128)v44.size, *(__n128 *)&v44.size.height);
              if ((v36 & 1) == 0 && COERCE_DOUBLE(v35 & 0x7FFFFFFFFFFFFFFFLL) < v17)
              {
                *(void *)&double v17 = v35 & 0x7FFFFFFFFFFFFFFFLL;
                unint64_t v41 = v14;
              }
            }
          }
          ++v14;
          v18 += 72;
          if (v13 == v14) {
            goto LABEL_6;
          }
        }
      }
    }
    unint64_t v41 = 0;
LABEL_6:
    swift_release();
    return v41;
  }
  return result;
}

uint64_t partial apply for closure #2 in LazySubviewPrefetcher.step(info:)@<X0>(SwiftUI::_LazyLayout_PrefetchResult *a1@<X8>)
{
  return specialized closure #2 in LazySubviewPrefetcher.step(info:)(a1);
}

uint64_t partial apply for closure #1 in closure #1 in LazySubviewPrefetcher.step(info:)@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in closure #1 in LazySubviewPrefetcher.step(info:)(*(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 64), *(const void **)(v1 + 72), *(void *)(v1 + 80), *(void *)(v1 + 88), a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

_DWORD *assignWithCopy for LazyScrollable(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_weakCopyAssign();
  return a1;
}

_OWORD *initializeWithTake for LazyScrollable(_OWORD *a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_weakTakeInit();
  return a1;
}

_OWORD *assignWithTake for LazyScrollable(_OWORD *a1, _OWORD *a2)
{
  long long v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for LazySubviewPrefetcher(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 56);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for LazySubviewPrefetcher(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 56) = -(char)a2;
    }
  }
  return result;
}

uint64_t outlined destroy of Scrollable?(uint64_t a1)
{
  type metadata accessor for Scrollable?(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable?, (uint64_t (*)(uint64_t))type metadata accessor for Scrollable, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for Scrollable()
{
  unint64_t result = lazy cache variable for type metadata for Scrollable;
  if (!lazy cache variable for type metadata for Scrollable)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  }
  return result;
}

uint64_t sub_187A1DD7C()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187A1DDB4()
{
  swift_release();

  return swift_deallocObject();
}

double partial apply for closure #1 in LazyScrollable.makeTarget(at:anchor:)@<D0>(uint64_t a1@<X8>)
{
  return closure #1 in LazyScrollable.makeTarget(at:anchor:)(*(void *)(v1 + 40), a1);
}

CGFloat partial apply for closure #1 in closure #1 in LazyScrollable.makeTarget(at:anchor:)@<D0>(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in closure #1 in LazyScrollable.makeTarget(at:anchor:)(a1, a2, *(void *)(v3 + 16), *(void *)(v3 + 24), a3);
}

uint64_t partial apply for closure #1 in LazyScrollable.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in LazyScrollable.applyCollectionViewIDs(from:to:)(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16));
}

uint64_t partial apply for closure #1 in LazyScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  return closure #1 in LazyScrollable.nextVisibleCollectionViewID(towards:from:border:ignoring:)(a1, a2, a3, a4, v4[2], v4[3], v4[4], v4[5], v4[6], v4[7]);
}

uint64_t partial apply for closure #1 in LazyScrollable.subviewClosestTo(rect:)@<X0>(uint64_t a1@<X0>, int *a2@<X1>, uint64_t a3@<X8>)
{
  return closure #1 in LazyScrollable.subviewClosestTo(rect:)(a1, a2, *(unsigned __int8 *)(v3 + 32), *(void *)(v3 + 72), *(void *)(v3 + 96), a3, *(double *)(v3 + 16), *(double *)(v3 + 24), *(double *)(v3 + 40), *(double *)(v3 + 48), *(double *)(v3 + 56), *(double *)(v3 + 64), *(double *)(v3 + 80), *(double *)(v3 + 88));
}

uint64_t partial apply for closure #1 in LazyScrollable.makeTarget<A>(for:)@<X0>(const void *a1@<X1>, uint64_t a2@<X8>)
{
  return closure #1 in LazyScrollable.makeTarget<A>(for:)(a1, *(uint64_t **)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void type metadata accessor for Scrollable?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for LazySubviewPrefetcher.Phase()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized Sequence.min(by:)(uint64_t a1)
{
  uint64_t v1 = a1 + 64;
  char v2 = *(unsigned char *)(a1 + 32);
  uint64_t v3 = 1 << v2;
  uint64_t v4 = -1;
  if (1 << v2 < 64) {
    uint64_t v4 = ~(-1 << (1 << v2));
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = __clz(__rbit64(v5));
    unint64_t v8 = (v5 - 1) & v5;
    int64_t v9 = (unint64_t)(v3 + 63) >> 6;
  }
  else
  {
    LODWORD(v6) = v2 & 0x3F;
    if (v6 <= 6) {
      return 0;
    }
    int64_t v9 = (unint64_t)(v3 + 63) >> 6;
    unint64_t v24 = *(void *)(a1 + 72);
    if (v24)
    {
      uint64_t v6 = 1;
    }
    else
    {
      if (v6 < 8) {
        return 0;
      }
      unint64_t v24 = *(void *)(a1 + 80);
      if (v24)
      {
        uint64_t v6 = 2;
      }
      else
      {
        unint64_t v24 = *(void *)(a1 + 88);
        if (v24)
        {
          uint64_t v6 = 3;
        }
        else
        {
LABEL_37:
          if (v6 < 9) {
            return 0;
          }
          unint64_t v24 = *(void *)(a1 + 96);
          if (v24)
          {
            uint64_t v6 = 4;
          }
          else
          {
            unint64_t v24 = *(void *)(a1 + 104);
            if (!v24) {
              goto LABEL_43;
            }
            uint64_t v6 = 5;
          }
        }
      }
    }
LABEL_30:
    unint64_t v8 = (v24 - 1) & v24;
    unint64_t v7 = __clz(__rbit64(v24)) + (v6 << 6);
  }
  uint64_t v10 = 8 * v7;
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  double v13 = *(double *)(v11 + v10);
  uint64_t v14 = *(void *)(v12 + v10);
  while (v8)
  {
    unint64_t v15 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v16 = v15 | (v6 << 6);
LABEL_7:
    uint64_t v17 = 8 * v16;
    double v18 = *(double *)(v11 + v17);
    uint64_t v19 = *(void *)(v12 + v17);
    if (v19 < v14)
    {
      double v13 = v18;
      uint64_t v14 = v19;
    }
  }
  int64_t v20 = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v20 >= v9) {
    return *(void *)&v13;
  }
  unint64_t v21 = *(void *)(v1 + 8 * v20);
  ++v6;
  if (v21) {
    goto LABEL_25;
  }
  uint64_t v6 = v20 + 1;
  if (v20 + 1 >= v9) {
    return *(void *)&v13;
  }
  unint64_t v21 = *(void *)(v1 + 8 * v6);
  if (v21) {
    goto LABEL_25;
  }
  uint64_t v6 = v20 + 2;
  if (v20 + 2 >= v9) {
    return *(void *)&v13;
  }
  unint64_t v21 = *(void *)(v1 + 8 * v6);
  if (v21) {
    goto LABEL_25;
  }
  uint64_t v6 = v20 + 3;
  if (v20 + 3 >= v9) {
    return *(void *)&v13;
  }
  unint64_t v21 = *(void *)(v1 + 8 * v6);
  if (v21)
  {
LABEL_25:
    unint64_t v8 = (v21 - 1) & v21;
    unint64_t v16 = __clz(__rbit64(v21)) + (v6 << 6);
    goto LABEL_7;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v9) {
    return *(void *)&v13;
  }
  unint64_t v21 = *(void *)(v1 + 8 * v22);
  if (v21)
  {
    uint64_t v6 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v6 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v6 >= v9) {
      return *(void *)&v13;
    }
    unint64_t v21 = *(void *)(v1 + 8 * v6);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_43:
  uint64_t v25 = 0;
  uint64_t v26 = 6;
  if (v9 > 6) {
    uint64_t v26 = v9;
  }
  uint64_t v27 = v26 - 6;
  while (v27 != v25)
  {
    unint64_t v24 = *(void *)(a1 + 112 + 8 * v25++);
    if (v24)
    {
      uint64_t v6 = v25 + 5;
      goto LABEL_30;
    }
  }
  return 0;
}

uint64_t specialized LazyStack<>.sizeThatFits(proposedSize:subviews:context:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  int v55 = HIDWORD(a7);
  LOBYTE(v58[0]) = a2 & 1;
  v62[0] = a4 & 1;
  uint64_t v14 = ProposedViewSize.subscript.getter();
  char v16 = v15;
  outlined init with copy of _LazyLayout_Subviews(a5, (uint64_t)v62);
  if (v16)
  {
    uint64_t v54 = a5;
    uint64_t v17 = *(void *)(a9 + 16);
    *(void *)&v57[0] = 0;
    if (v17)
    {
      uint64_t v53 = a8;
      type metadata accessor for AGGraphRef(0);
      swift_bridgeObjectRetain_n();
      uint64_t v18 = 0;
      uint64_t v19 = 32;
      do
      {
        long long v20 = *(_OWORD *)(a9 + v19 + 16);
        long long v66 = *(_OWORD *)(a9 + v19);
        long long v67 = v20;
        v68[0] = *(_OWORD *)(a9 + v19 + 32);
        *(_OWORD *)((char *)v68 + 9) = *(_OWORD *)(a9 + v19 + 41);
        uint64_t updated = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()();
        if (updated)
        {
          swift_bridgeObjectRelease();
          uint64_t v14 = 0;
          a8 = v53;
          a5 = v54;
          goto LABEL_13;
        }
        uint64_t v65 = v18;
        MEMORY[0x1F4188790](updated);
        uint64_t v64 = v63[11];
        uint64_t v22 = outlined init with copy of _ViewList_Node((uint64_t)v63, (uint64_t)v58);
        uint64_t v61 = 2;
        MEMORY[0x1F4188790](v22);
        swift_bridgeObjectRetain();
        _ViewList_Node.applyNodes(from:style:transform:to:)();
        outlined destroy of _ViewList_Node((uint64_t)v58);
        swift_bridgeObjectRelease();
        static Semantics.v5.getter();
        if ((isLinkedOnOrAfter(_:)() & 1) == 0) {
          break;
        }
        ++v18;
        v19 += 64;
      }
      while (v17 != v18);
      swift_bridgeObjectRelease();
      a8 = v53;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    a5 = v54;
    uint64_t v14 = *(void *)&v57[0];
LABEL_13:
    outlined destroy of _LazyLayout_Subviews((uint64_t)v62);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of _LazyLayout_Subviews((uint64_t)v62);
  }
  uint64_t v64 = v14;
  *(void *)&v58[0] = v14;
  uint64_t v23 = specialized HVGrid.minorGeometry(updatingSize:)((double *)v58, a9);
  uint64_t v25 = v24;
  if (v23 < 1 || (double v26 = *(double *)v58, *(double *)v58 <= 0.0))
  {
    swift_bridgeObjectRelease();
    return specialized LazyStack<>.log(_:)((uint64_t)&v64, 0x69724748797A614CLL, 0xEF74756F79614C64);
  }
  uint64_t v27 = v23;
  long long v28 = *(_OWORD *)(a8 + 80);
  v58[4] = *(_OWORD *)(a8 + 64);
  void v58[5] = v28;
  long long v59 = *(_OWORD *)(a8 + 96);
  unint64_t v60 = *(void *)(a8 + 112);
  long long v29 = *(_OWORD *)(a8 + 16);
  v58[0] = *(_OWORD *)a8;
  v58[1] = v29;
  long long v30 = *(_OWORD *)(a8 + 48);
  v58[2] = *(_OWORD *)(a8 + 32);
  v58[3] = v30;
  if (*MEMORY[0x1E4F4E7A0] == v55)
  {
    outlined retain of _LazyStack_Cache<LazyHGridLayout>(a8);
  }
  else
  {
    uint64_t Value = (_OWORD *)AGGraphGetValue();
    long long v33 = Value[1];
    v57[0] = *Value;
    v57[1] = v33;
    uint64_t v34 = outlined retain of _LazyStack_Cache<LazyHGridLayout>(a8);
    MEMORY[0x18C114450](v34);
    double v36 = *(double *)(a8 + 96);
    if (v36 > 0.0 && v35 > 0.0 && vabdd_f64(v36, v35) >= 0.01)
    {
      uint64_t v37 = *(void *)(a8 + 104);
      *(void *)&v57[0] = *(void *)(a8 + 112);
      uint64_t v65 = v37;
      uint64_t v38 = MEMORY[0x1E4FBC860];
      unint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      outlined release of _LazyLayout_Placements((uint64_t)&v65);
      *((void *)&v59 + 1) = v39;
      unint64_t v40 = specialized Dictionary.init(dictionaryLiteral:)(v38);
      outlined release of _LazyLayout_Placements((uint64_t)v57);
      unint64_t v60 = v40;
    }
  }
  uint64_t v61 = 0;
  double v56 = 0.0;
  specialized LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(&v56, &v61, v27, v25, a5, (uint64_t)v58, a9, a10, v26, a11, a12 & 1, (a12 & 0xFFFFFFFF00000001) >> 32);
  uint64_t v41 = EstimationCache.average.getter(*((uint64_t *)&v59 + 1), v60);
  double v43 = v42;
  double v44 = *(double *)&v41;
  char v46 = v45;
  uint64_t result = _ViewList_Node.estimatedCount(style:)();
  if (__OFSUB__(result, v61))
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v47 = (result - v61) & ~((result - v61) >> 63);
  if (v27 != 1)
  {
    BOOL v48 = __OFADD__(v47, v27);
    uint64_t v49 = v47 + v27;
    if (!v48)
    {
      uint64_t v47 = (v49 - 1) / v27;
      goto LABEL_27;
    }
LABEL_36:
    __break(1u);
    return result;
  }
LABEL_27:
  double v50 = v44;
  if (v46) {
    double v50 = 0.0;
  }
  double v51 = v56 + (v43 + v50) * (double)v47;
  if (v47) {
    BOOL v52 = v61 == 0;
  }
  else {
    BOOL v52 = 0;
  }
  if (!v52) {
    double v50 = 0.0;
  }
  double v56 = v51 - v50;
  specialized LazyStack<>.log(_:)((uint64_t)&v64, (uint64_t)&v56, 0x69724748797A614CLL, 0xEF74756F79614C64);
  ProposedViewSize.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

{
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t updated;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t result;
  _OWORD *Value;
  long long v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  char v45;
  char v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  double v50;
  double v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  double v56;
  _OWORD v57[2];
  _OWORD v58[6];
  long long v59;
  unint64_t v60;
  uint64_t v61;
  unsigned char v62[16];
  void v63[13];
  uint64_t v64;
  uint64_t v65;
  long long v66;
  long long v67;
  _OWORD v68[3];

  int v55 = HIDWORD(a7);
  LOBYTE(v58[0]) = a2 & 1;
  v62[0] = a4 & 1;
  uint64_t v14 = ProposedViewSize.subscript.getter();
  char v16 = v15;
  outlined init with copy of _LazyLayout_Subviews(a5, (uint64_t)v62);
  if (v16)
  {
    uint64_t v54 = a5;
    uint64_t v17 = *(void *)(a9 + 16);
    *(void *)&v57[0] = 0;
    if (v17)
    {
      uint64_t v53 = a8;
      type metadata accessor for AGGraphRef(0);
      swift_bridgeObjectRetain_n();
      uint64_t v18 = 0;
      uint64_t v19 = 32;
      do
      {
        long long v20 = *(_OWORD *)(a9 + v19 + 16);
        long long v66 = *(_OWORD *)(a9 + v19);
        long long v67 = v20;
        v68[0] = *(_OWORD *)(a9 + v19 + 32);
        *(_OWORD *)((char *)v68 + 9) = *(_OWORD *)(a9 + v19 + 41);
        uint64_t updated = static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()();
        if (updated)
        {
          swift_bridgeObjectRelease();
          uint64_t v14 = 0;
          a8 = v53;
          a5 = v54;
          goto LABEL_13;
        }
        uint64_t v65 = v18;
        MEMORY[0x1F4188790](updated);
        uint64_t v64 = v63[11];
        uint64_t v22 = outlined init with copy of _ViewList_Node((uint64_t)v63, (uint64_t)v58);
        uint64_t v61 = 2;
        MEMORY[0x1F4188790](v22);
        swift_bridgeObjectRetain();
        _ViewList_Node.applyNodes(from:style:transform:to:)();
        outlined destroy of _ViewList_Node((uint64_t)v58);
        swift_bridgeObjectRelease();
        static Semantics.v5.getter();
        if ((isLinkedOnOrAfter(_:)() & 1) == 0) {
          break;
        }
        ++v18;
        v19 += 64;
      }
      while (v17 != v18);
      swift_bridgeObjectRelease();
      a8 = v53;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    a5 = v54;
    uint64_t v14 = *(void *)&v57[0];
LABEL_13:
    outlined destroy of _LazyLayout_Subviews((uint64_t)v62);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of _LazyLayout_Subviews((uint64_t)v62);
  }
  uint64_t v64 = v14;
  *(void *)&v58[0] = v14;
  uint64_t v23 = specialized HVGrid.minorGeometry(updatingSize:)((double *)v58, a9);
  uint64_t v25 = v24;
  if (v23 < 1 || (double v26 = *(double *)v58, *(double *)v58 <= 0.0))
  {
    swift_bridgeObjectRelease();
    return specialized LazyStack<>.log(_:)((uint64_t)&v64, 0x69724756797A614CLL, 0xEF74756F79614C64);
  }
  uint64_t v27 = v23;
  long long v28 = *(_OWORD *)(a8 + 80);
  v58[4] = *(_OWORD *)(a8 + 64);
  void v58[5] = v28;
  long long v59 = *(_OWORD *)(a8 + 96);
  unint64_t v60 = *(void *)(a8 + 112);
  long long v29 = *(_OWORD *)(a8 + 16);
  v58[0] = *(_OWORD *)a8;
  v58[1] = v29;
  long long v30 = *(_OWORD *)(a8 + 48);
  v58[2] = *(_OWORD *)(a8 + 32);
  v58[3] = v30;
  if (*MEMORY[0x1E4F4E7A0] == v55)
  {
    outlined retain of _LazyStack_Cache<LazyHGridLayout>(a8);
  }
  else
  {
    uint64_t Value = (_OWORD *)AGGraphGetValue();
    long long v33 = Value[1];
    v57[0] = *Value;
    v57[1] = v33;
    uint64_t v34 = outlined retain of _LazyStack_Cache<LazyHGridLayout>(a8);
    MEMORY[0x18C114450](v34);
    double v36 = *(double *)(a8 + 96);
    if (v36 > 0.0 && v35 > 0.0 && vabdd_f64(v36, v35) >= 0.01)
    {
      uint64_t v37 = *(void *)(a8 + 104);
      *(void *)&v57[0] = *(void *)(a8 + 112);
      uint64_t v65 = v37;
      uint64_t v38 = MEMORY[0x1E4FBC860];
      unint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      outlined release of _LazyLayout_Placements((uint64_t)&v65);
      *((void *)&v59 + 1) = v39;
      unint64_t v40 = specialized Dictionary.init(dictionaryLiteral:)(v38);
      outlined release of _LazyLayout_Placements((uint64_t)v57);
      unint64_t v60 = v40;
    }
  }
  uint64_t v61 = 0;
  double v56 = 0.0;
  specialized LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(&v56, &v61, v27, v25, a5, (uint64_t)v58, a9, a10, v26, a11, a12 & 1, (a12 & 0xFFFFFFFF00000001) >> 32);
  uint64_t v41 = EstimationCache.average.getter(*((uint64_t *)&v59 + 1), v60);
  double v43 = v42;
  double v44 = *(double *)&v41;
  char v46 = v45;
  uint64_t result = _ViewList_Node.estimatedCount(style:)();
  if (__OFSUB__(result, v61))
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v47 = (result - v61) & ~((result - v61) >> 63);
  if (v27 != 1)
  {
    BOOL v48 = __OFADD__(v47, v27);
    uint64_t v49 = v47 + v27;
    if (!v48)
    {
      uint64_t v47 = (v49 - 1) / v27;
      goto LABEL_27;
    }
LABEL_36:
    __break(1u);
    return result;
  }
LABEL_27:
  double v50 = v44;
  if (v46) {
    double v50 = 0.0;
  }
  double v51 = v56 + (v43 + v50) * (double)v47;
  if (v47) {
    BOOL v52 = v61 == 0;
  }
  else {
    BOOL v52 = 0;
  }
  if (!v52) {
    double v50 = 0.0;
  }
  double v56 = v51 - v50;
  specialized LazyStack<>.log(_:)((uint64_t)&v64, (uint64_t)&v56, 0x69724756797A614CLL, 0xEF74756F79614C64);
  ProposedViewSize.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(uint64_t result, BOOL *a2, uint64_t a3, uint64_t **a4, unint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = a7;
  unint64_t v13 = a5;
  uint64_t v14 = a4;
  char v16 = a2;
  uint64_t v17 = result;
  if (*(unsigned char *)(result + 93))
  {
    int v18 = 1;
  }
  else if (*(unsigned char *)(result + 94))
  {
    int v18 = 2;
  }
  else
  {
    int v18 = 0;
  }
  int v19 = *(_DWORD *)(result + 88);
  char v20 = *(unsigned char *)(result + 92);
  if ((*(unsigned char *)(a3 + 4) & 1) == 0)
  {
    if ((*(unsigned char *)(result + 92) & 1) == 0)
    {
      BOOL v22 = *(_DWORD *)a3 == v19;
      if (v18)
      {
LABEL_14:
        int64_t v21 = a5 >> 1;
        if (a5 >> 1 == 1) {
          goto LABEL_20;
        }
LABEL_15:
        if (!v21)
        {
          __break(1u);
          goto LABEL_48;
        }
        uint64_t v23 = *a6;
        uint64_t v24 = *a6 % v21;
        if (v24)
        {
          BOOL v25 = __OFSUB__(v21, v24);
          uint64_t v26 = v21 - v24;
          if (v25) {
            goto LABEL_49;
          }
          BOOL v25 = __OFADD__(v23, v26);
          uint64_t v27 = v23 + v26;
          if (v25) {
            goto LABEL_50;
          }
          *a6 = v27;
        }
LABEL_20:
        BOOL v28 = *a7 < *a6;
        *a2 = v28;
        if (v28) {
          goto LABEL_46;
        }
        goto LABEL_24;
      }
      if (*(_DWORD *)a3 == v19) {
        goto LABEL_23;
      }
    }
LABEL_12:
    BOOL v22 = 0;
    goto LABEL_14;
  }
  if ((*(unsigned char *)(result + 92) & 1) == 0) {
    goto LABEL_12;
  }
  if (v18)
  {
    int64_t v21 = a5 >> 1;
    BOOL v22 = 1;
    if (a5 >> 1 == 1) {
      goto LABEL_20;
    }
    goto LABEL_15;
  }
LABEL_23:
  BOOL v22 = 1;
LABEL_24:
  char v50 = v20;
  int v51 = v19;
  uint64_t v48 = a9;
  int64_t v9 = (uint64_t *)(a8 + 16);
  int v29 = *(unsigned __int8 *)a4;
  if (v29 != v18) {
    BOOL v22 = 0;
  }
  if (v29 == 3) {
    goto LABEL_33;
  }
  if (v22) {
    goto LABEL_33;
  }
  swift_beginAccess();
  uint64_t v10 = *v9;
  if (!*(void *)(*v9 + 16)) {
    goto LABEL_33;
  }
  uint64_t v49 = v11;
  uint64_t v47 = v14;
  uint64_t v14 = (uint64_t **)(a9 + 16);
  swift_beginAccess();
  uint64_t v11 = *(uint64_t **)(a9 + 16);
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a9 + 16) = v11;
  unint64_t v45 = v13;
  char v46 = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    goto LABEL_52;
  }
  while (1)
  {
    unint64_t v32 = v11[2];
    unint64_t v31 = v11[3];
    if (v32 >= v31 >> 1)
    {
      uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v31 > 1), v32 + 1, 1, v11);
      *uint64_t v14 = v11;
    }
    uint64_t v14 = v47;
    _OWORD v11[2] = v32 + 1;
    v11[v32 + 4] = v10;
    swift_beginAccess();
    uint64_t *v9 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRelease();
    uint64_t v11 = v49;
    unint64_t v13 = v45;
    char v16 = v46;
LABEL_33:
    outlined init with copy of _LazyLayout_Subview(v17, (uint64_t)v52);
    swift_beginAccess();
    type metadata accessor for _ContiguousArrayStorage<_LazyLayout_Subview>(0, &lazy cache variable for type metadata for [_LazyLayout_Subview], (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB320]);
    Array.append(_:)();
    uint64_t result = swift_endAccess();
    if (!v18) {
      break;
    }
    if (!__OFADD__(*a6, v13 >> 1))
    {
      *a6 += v13 >> 1;
      goto LABEL_45;
    }
LABEL_48:
    __break(1u);
LABEL_49:
    __break(1u);
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
LABEL_52:
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11[2] + 1, 1, v11);
    *uint64_t v14 = v11;
  }
  uint64_t v49 = v11;
  if (__OFADD__(*a6, 1)) {
    goto LABEL_51;
  }
  long long v33 = v16;
  ++*a6;
  swift_beginAccess();
  uint64_t v34 = swift_bridgeObjectRetain();
  uint64_t v35 = MEMORY[0x18C115C50](v34, &type metadata for _LazyLayout_Subview);
  uint64_t result = swift_bridgeObjectRelease();
  BOOL v36 = v35 == v13 >> 1;
  char v16 = v33;
  if (v36)
  {
    uint64_t result = swift_beginAccess();
    uint64_t v37 = *v9;
    if (*(void *)(*v9 + 16))
    {
      uint64_t v38 = (void *)(v48 + 16);
      swift_beginAccess();
      unint64_t v39 = *(void **)(v48 + 16);
      swift_bridgeObjectRetain();
      char v40 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v48 + 16) = v39;
      if ((v40 & 1) == 0)
      {
        unint64_t v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v39[2] + 1, 1, v39);
        void *v38 = v39;
      }
      unint64_t v42 = v39[2];
      unint64_t v41 = v39[3];
      unint64_t v43 = v42 + 1;
      if (v42 >= v41 >> 1)
      {
        double v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v41 > 1), v42 + 1, 1, v39);
        unint64_t v43 = v42 + 1;
        unint64_t v39 = v44;
        void *v38 = v44;
      }
      char v16 = v33;
      void v39[2] = v43;
      v39[v42 + 4] = v37;
      swift_beginAccess();
      uint64_t *v9 = MEMORY[0x1E4FBC860];
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v11 = v49;
    }
  }
LABEL_45:
  BOOL *v16 = *v11 < *a6;
  char v20 = v50;
  int v19 = v51;
LABEL_46:
  *(_DWORD *)a3 = v19;
  *(unsigned char *)(a3 + 4) = v20;
  *(unsigned char *)uint64_t v14 = v18;
  return result;
}

uint64_t specialized LazyStack<>.placementOfNearbySubview(_:subviews:context:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v34 = a7;
  uint64_t v35 = a1;
  uint64_t v13 = *(void *)(a4 + 104);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v31 = a3;
  if (v14)
  {
    double v16 = COERCE_DOUBLE(EstimationCache.average.getter(v13, *(void *)(a4 + 112)));
    if (v17) {
      double v16 = 0.0;
    }
    double v18 = v15 + v16;
  }
  else
  {
    double v18 = 32.0;
  }
  outlined init with take of MinorProperties<LazyHGridLayout>?(a4, (uint64_t)v50, &lazy cache variable for type metadata for MinorProperties<LazyHGridLayout>?, &lazy cache variable for type metadata for MinorProperties<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout);
  uint64_t result = outlined init with take of MinorProperties<LazyHGridLayout>?((uint64_t)v50, (uint64_t)v51, &lazy cache variable for type metadata for MinorProperties<LazyHGridLayout>?, &lazy cache variable for type metadata for MinorProperties<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout);
  if (!v52 || !*(void *)(v13 + 16)) {
    goto LABEL_26;
  }
  double v20 = *(double *)(a4 + 88);
  BOOL v21 = (*(void *)&v20 & 0xFFFFFFFFFFFFFLL) == 0 || (~*(void *)&v20 & 0x7FF0000000000000) != 0;
  if (v20 == INFINITY || v20 <= 0.0 || !v21) {
    goto LABEL_26;
  }
  BOOL v22 = (*(void *)&v18 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v18 & 0x7FF0000000000000) == 0;
  if (v22 || v18 <= 0.0 || v18 == INFINITY) {
    goto LABEL_26;
  }
  double v23 = v20 / v18;
  if ((~*(void *)&v23 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v23 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v23 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v24 = *(void *)(a4 + 48);
  if (__OFADD__(v24, (uint64_t)v23))
  {
LABEL_31:
    __break(1u);
    return result;
  }
  uint64_t v30 = (uint64_t)&v30;
  uint64_t v45 = v24;
  uint64_t v46 = v24;
  uint64_t v43 = 0;
  char v44 = 1;
  MEMORY[0x1F4188790](result);
  v48.origin.double x = *(CGFloat *)(a2 + 104);
  uint64_t v25 = outlined init with copy of _ViewList_Node(a2 + 16, (uint64_t)&v37);
  v47[0] = 2;
  MEMORY[0x1F4188790](v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v37);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v44 & 1) != 0
    || (specialized LazyStack<>.boundingRect(at:subviews:context:cache:)(v43, a2, v31, a4, v32, v33, v34, a8 & 0xFFFFFFFF00000001, (uint64_t)v47), uint64_t result = outlined init with take of CGRect?((uint64_t)v47, (uint64_t)&v48), (v49 & 1) != 0))
  {
LABEL_26:
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)a9 = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    *(unsigned char *)(a9 + 64) = 1;
    return result;
  }
  v36[0] = *(_OWORD *)(v35 + 8);
  *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)(v35 + 17);
  UnitPoint.in(_:)(v48);
  uint64_t result = _Placement.init(proposedSize:anchoring:at:)();
  uint64_t v26 = v38;
  uint64_t v27 = v39;
  uint64_t v28 = v40;
  *(void *)a9 = v37;
  *(void *)(a9 + 8) = v26;
  *(void *)(a9 + 16) = v27;
  *(void *)(a9 + 24) = v28;
  long long v29 = v42;
  *(_OWORD *)(a9 + 32) = v41;
  *(_OWORD *)(a9 + 48) = v29;
  *(unsigned char *)(a9 + 64) = 0;
  return result;
}

{
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  char v17;
  double v18;
  uint64_t result;
  double v20;
  BOOL v21;
  BOOL v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  long long v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD v36[3];
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  unsigned __int8 v40;
  long long v41;
  long long v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  void v47[5];
  __C::CGRect v48;
  char v49;
  unsigned char v50[24];
  unsigned char v51[16];
  uint64_t v52;

  uint64_t v34 = a7;
  uint64_t v35 = a1;
  uint64_t v13 = *(void *)(a4 + 104);
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v31 = a3;
  if (v14)
  {
    double v16 = COERCE_DOUBLE(EstimationCache.average.getter(v13, *(void *)(a4 + 112)));
    if (v17) {
      double v16 = 0.0;
    }
    double v18 = v15 + v16;
  }
  else
  {
    double v18 = 32.0;
  }
  outlined init with take of MinorProperties<LazyHGridLayout>?(a4, (uint64_t)v50, &lazy cache variable for type metadata for MinorProperties<LazyVGridLayout>?, &lazy cache variable for type metadata for MinorProperties<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout);
  uint64_t result = outlined init with take of MinorProperties<LazyHGridLayout>?((uint64_t)v50, (uint64_t)v51, &lazy cache variable for type metadata for MinorProperties<LazyVGridLayout>?, &lazy cache variable for type metadata for MinorProperties<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout);
  if (!v52 || !*(void *)(v13 + 16)) {
    goto LABEL_26;
  }
  double v20 = *(double *)(a4 + 88);
  BOOL v21 = (*(void *)&v20 & 0xFFFFFFFFFFFFFLL) == 0 || (~*(void *)&v20 & 0x7FF0000000000000) != 0;
  if (v20 == INFINITY || v20 <= 0.0 || !v21) {
    goto LABEL_26;
  }
  BOOL v22 = (*(void *)&v18 & 0xFFFFFFFFFFFFFLL) != 0 && (~*(void *)&v18 & 0x7FF0000000000000) == 0;
  if (v22 || v18 <= 0.0 || v18 == INFINITY) {
    goto LABEL_26;
  }
  double v23 = v20 / v18;
  if ((~*(void *)&v23 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (v23 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v23 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v24 = *(void *)(a4 + 48);
  if (__OFADD__(v24, (uint64_t)v23))
  {
LABEL_31:
    __break(1u);
    return result;
  }
  uint64_t v30 = (uint64_t)&v30;
  uint64_t v45 = v24;
  uint64_t v46 = v24;
  uint64_t v43 = 0;
  char v44 = 1;
  MEMORY[0x1F4188790](result);
  v48.origin.double x = *(CGFloat *)(a2 + 104);
  uint64_t v25 = outlined init with copy of _ViewList_Node(a2 + 16, (uint64_t)&v37);
  v47[0] = 2;
  MEMORY[0x1F4188790](v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)&v37);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v44 & 1) != 0
    || (specialized LazyStack<>.boundingRect(at:subviews:context:cache:)(v43, a2, v31, a4, v32, v33, v34, a8 & 0xFFFFFFFF00000001, (uint64_t)v47), uint64_t result = outlined init with take of CGRect?((uint64_t)v47, (uint64_t)&v48), (v49 & 1) != 0))
  {
LABEL_26:
    *(_OWORD *)(a9 + 32) = 0u;
    *(_OWORD *)(a9 + 48) = 0u;
    *(_OWORD *)a9 = 0u;
    *(_OWORD *)(a9 + 16) = 0u;
    *(unsigned char *)(a9 + 64) = 1;
    return result;
  }
  v36[0] = *(_OWORD *)(v35 + 8);
  *(_OWORD *)((char *)v36 + 9) = *(_OWORD *)(v35 + 17);
  UnitPoint.in(_:)(v48);
  uint64_t result = _Placement.init(proposedSize:anchoring:at:)();
  uint64_t v26 = v38;
  uint64_t v27 = v39;
  uint64_t v28 = v40;
  *(void *)a9 = v37;
  *(void *)(a9 + 8) = v26;
  *(void *)(a9 + 16) = v27;
  *(void *)(a9 + 24) = v28;
  long long v29 = v42;
  *(_OWORD *)(a9 + 32) = v41;
  *(_OWORD *)(a9 + 48) = v29;
  *(unsigned char *)(a9 + 64) = 0;
  return result;
}

unint64_t specialized LazyStack<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, double (*a14)(uint64_t, double, double, double, double, double, double, double, double), void (*a15)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t), char a16)
{
  unint64_t v17 = result;
  if (a4)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a2 + 16) > result)
    {
      unint64_t v19 = a2 + 72 * result;
      char v20 = *(unsigned char *)(v19 + 48);
      uint64_t v21 = *(void *)(v19 + 56);
      char v22 = *(unsigned char *)(v19 + 64);
      *(void *)a9 = *(void *)(v19 + 40);
      *(unsigned char *)(a9 + 8) = v20;
      *(void *)(a9 + 16) = v21;
      *(unsigned char *)(a9 + 24) = v22;
      long long v23 = *(_OWORD *)(v19 + 72);
      long long v24 = *(_OWORD *)(v19 + 88);
LABEL_13:
      *(_OWORD *)(a9 + 32) = v23;
      *(_OWORD *)(a9 + 48) = v24;
      return result;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v28 = *(void *)(a5 + 280);
  unint64_t v29 = *(void *)(a5 + 288);
  char v30 = *(unsigned char *)(a5 + 296);
  long long v31 = *(_OWORD *)(a5 + 104);
  long long v32 = *(_OWORD *)(a5 + 136);
  long long v70 = *(_OWORD *)(a5 + 120);
  long long v71 = v32;
  long long v72 = *(_OWORD *)(a5 + 152);
  long long v33 = *(_OWORD *)(a5 + 72);
  long long v66 = *(_OWORD *)(a5 + 56);
  long long v67 = v33;
  long long v68 = *(_OWORD *)(a5 + 88);
  long long v69 = v31;
  if (v30) {
    ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(v29, v28));
  }
  ScrollGeometry.visibleRect.getter();
  double v35 = v34;
  double v37 = v36;
  double v39 = v38;
  double v41 = v40;
  LOBYTE(v58) = a12 & 1;
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = a8;
  *(void *)(v42 + 24) = a10;
  *(void *)(v42 + 32) = a11;
  *(unsigned char *)(v42 + 40) = v58;
  *(_DWORD *)(v42 + 44) = HIDWORD(a12);
  swift_bridgeObjectRetain();
  Array<A>.synthesizedPlacement(of:in:avoiding:distance:)(v17, a2, a14, a3, (uint64_t)&v66, v35, v37, v39, v41);
  uint64_t result = swift_release();
  if ((v70 & 1) == 0)
  {
    char v46 = BYTE8(v67);
    uint64_t v47 = v67;
    char v48 = BYTE8(v66);
    long long v23 = v68;
    long long v24 = v69;
    *(void *)a9 = v66;
    *(unsigned char *)(a9 + 8) = v48 & 1;
    *(void *)(a9 + 16) = v47;
    *(unsigned char *)(a9 + 24) = v46 & 1;
    goto LABEL_13;
  }
  if ((v17 & 0x8000000000000000) != 0) {
    goto LABEL_17;
  }
  if (*(void *)(a2 + 16) <= v17)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  unint64_t v43 = a2 + 72 * v17;
  long long v44 = *(_OWORD *)(v43 + 80);
  long long v68 = *(_OWORD *)(v43 + 64);
  long long v69 = v44;
  *(void *)&long long v70 = *(void *)(v43 + 96);
  long long v45 = *(_OWORD *)(v43 + 48);
  long long v66 = *(_OWORD *)(v43 + 32);
  long long v67 = v45;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v66);
  a15(&v58, &v66, a6, a5, a7, a8, a10, a11, a12 & 0xFFFFFFFF00000001);
  if (v65)
  {
    Array<A>.externalPlacement(of:avoiding:in:)(v17, a16, a2, a9);
    return outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v66);
  }
  else
  {
    uint64_t v50 = v63;
    uint64_t v49 = v64;
    long long v57 = v62;
    char v51 = v61;
    uint64_t v52 = v60;
    char v53 = v59;
    uint64_t v54 = v58;
    uint64_t result = outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v66);
    *(void *)a9 = v54;
    *(unsigned char *)(a9 + 8) = v53 & 1;
    *(void *)(a9 + 16) = v52;
    *(unsigned char *)(a9 + 24) = v51 & 1;
    *(_OWORD *)(a9 + 32) = v57;
    *(void *)(a9 + 48) = v50;
    *(void *)(a9 + 56) = v49;
  }
  return result;
}

uint64_t LazyStack<>.firstIndex<A>(of:subviews:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v20[1] = a7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  double v12 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v14 = (char *)v20 - v13;
  double v15 = *(double *)(a3 + 32);
  double v16 = *(double *)(a3 + 40);
  if ((*(uint64_t (**)(uint64_t, uint64_t, double))(a6 + 32))(a4, a6, v12)) {
    double v17 = v15;
  }
  else {
    double v17 = v16;
  }
  double v21 = v17;
  uint64_t v18 = (*(uint64_t (**)(char *, double *, uint64_t, uint64_t))(a6 + 72))(v14, &v21, a4, a6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, AssociatedTypeWitness);
  uint64_t result = 0;
  if (v18 >= 1 && v21 > 0.0)
  {
    v20[2] = 2 * v18;
    return _LazyLayout_Subviews.firstIndex<A>(id:style:)();
  }
  return result;
}

uint64_t specialized LazyStack<>.boundingRect(at:subviews:context:cache:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  double v17 = *(double *)(a3 + 40);
  *(double *)&long long v98 = v17;
  unint64_t v18 = a8 & 0xFFFFFFFF00000000;
  *(double *)&uint64_t result = COERCE_DOUBLE(specialized HVGrid.minorGeometry(updatingSize:)((double *)&v98, a5));
  if (result < 1 || (double v21 = *(double *)&v98, *(double *)&v98 <= 0.0))
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(swift_bridgeObjectRelease());
    double v43 = 0.0;
    char v44 = 1;
    double v45 = 0.0;
    double v46 = 0.0;
LABEL_34:
    *(double *)a9 = v45;
    *(void *)(a9 + 8) = 0;
    *(double *)(a9 + 16) = v46;
    *(double *)(a9 + 24) = v43;
    *(unsigned char *)(a9 + 32) = v44;
    return result;
  }
  uint64_t v22 = result;
  uint64_t v93 = a5;
  uint64_t v94 = a7;
  uint64_t v95 = v20;
  uint64_t v23 = a1 / result;
  uint64_t v91 = a1 / result * result;
  if ((unsigned __int128)(a1 / result * (__int128)result) >> 64 != v91 >> 63)
  {
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  int v24 = *(_DWORD *)(a3 + 12);
  long long v25 = *(_OWORD *)(a4 + 80);
  long long v128 = *(_OWORD *)(a4 + 64);
  long long v129 = v25;
  long long v130 = *(_OWORD *)(a4 + 96);
  unint64_t v131 = *(void *)(a4 + 112);
  long long v26 = *(_OWORD *)(a4 + 16);
  v125[0] = *(_OWORD *)a4;
  v125[1] = v26;
  long long v27 = *(_OWORD *)(a4 + 48);
  long long v126 = *(_OWORD *)(a4 + 32);
  long long v127 = v27;
  long long v28 = *(_OWORD *)(a3 + 104);
  long long v29 = *(_OWORD *)(a3 + 136);
  int64x2_t v102 = *(int64x2_t *)(a3 + 120);
  long long v103 = v29;
  long long v104 = *(_OWORD *)(a3 + 152);
  long long v30 = *(_OWORD *)(a3 + 72);
  long long v98 = *(_OWORD *)(a3 + 56);
  long long v99 = v30;
  long long v100 = *(_OWORD *)(a3 + 88);
  long long v101 = v28;
  outlined retain of _LazyStack_Cache<LazyHGridLayout>(a4);
  ScrollGeometry.visibleRect.getter();
  CGRect.subscript.getter();
  double v32 = v31;
  double v34 = v33;
  double v35 = 0.0;
  if (v24 != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = (long long *)AGGraphGetValue();
    long long v37 = Value[1];
    long long v98 = *Value;
    long long v99 = v37;
    MEMORY[0x18C114450]();
  }
  unint64_t v39 = *(void *)(a4 + 104);
  uint64_t v38 = *(void *)(a4 + 112);
  v133[0] = v39;
  double v41 = *(double *)(a4 + 88);
  double v40 = *(double *)(a4 + 96);
  if (v41 > 0.0 && v34 - v32 > 0.0)
  {
    double v42 = vabdd_f64(v41, v34 - v32);
    if (v40 <= 0.0 || v35 <= 0.0)
    {
      if (v42 < 0.01) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
    if (v42 >= 0.01) {
      goto LABEL_18;
    }
LABEL_15:
    if (vabdd_f64(v40, v35) < 0.01)
    {
LABEL_16:
      char v47 = 0;
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v132 = v38;
    uint64_t v48 = MEMORY[0x1E4FBC860];
    unint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    outlined release of _LazyLayout_Placements((uint64_t)v133);
    *((void *)&v130 + 1) = v39;
    unint64_t v49 = specialized Dictionary.init(dictionaryLiteral:)(v48);
    outlined release of _LazyLayout_Placements((uint64_t)&v132);
    unint64_t v131 = v49;
    char v47 = 1;
    goto LABEL_19;
  }
  char v47 = 0;
  if (v40 > 0.0 && v35 > 0.0) {
    goto LABEL_15;
  }
LABEL_19:
  char v92 = v47;
  if (!*(void *)(v39 + 16))
  {
    uint64_t v97 = 0;
    *(void *)&long long v98 = 0;
    specialized LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)((double *)&v98, &v97, v22, v95, a2, (uint64_t)v125, v93, a6, v21, v94, v18 | a8 & 1, HIDWORD(v18));
  }
  uint64_t v50 = *((void *)&v130 + 1);
  uint64_t v51 = v131;
  double v52 = COERCE_DOUBLE(EstimationCache.average.getter(*((uint64_t *)&v130 + 1), v131));
  double v55 = v54;
  double v56 = v52;
  if (v53) {
    double v57 = 0.0;
  }
  else {
    double v57 = v52;
  }
  double v45 = (v55 + v57) * (double)v23;
  if (*(void *)(a4 + 40) == *(void *)(a4 + 48)) {
    goto LABEL_30;
  }
  uint64_t v90 = a1;
  uint64_t v58 = *(void *)(a4 + 16);
  if (!v58
    || v22 != *(void *)a4
    || v21 != *(double *)(a4 + 8)
    || (char v59 = v53,
        uint64_t v88 = *(void *)(a4 + 40),
        swift_bridgeObjectRetain_n(),
        swift_bridgeObjectRetain(),
        char v89 = specialized static Array<A>.== infix(_:_:)(v95, v58),
        swift_bridgeObjectRelease_n(),
        *(double *)&uint64_t result = COERCE_DOUBLE(swift_bridgeObjectRelease()),
        v92 & 1 | ((v89 & 1) == 0)))
  {
    a1 = v90;
    goto LABEL_30;
  }
  double v60 = 0.0;
  if (!((v23 < 1) | v59 & 1)) {
    double v60 = v56;
  }
  uint64_t v61 = v91 - v88;
  if (__OFSUB__(v91, v88)) {
    goto LABEL_70;
  }
  uint64_t v62 = v61 / v22;
  uint64_t v63 = v61 / v22;
  if (v61 / v22 < 0)
  {
    uint64_t v63 = -v62;
    if (__OFSUB__(0, v62)) {
      goto LABEL_72;
    }
  }
  double v45 = v45 - v60;
  if (*(void *)(v50 + 16))
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(v50, v51));
    double v65 = *(double *)&result;
    if (v66) {
      double v65 = 0.0;
    }
    double v67 = (v64 + v65) * (double)v63;
    if (*(void *)(v50 + 16))
    {
      *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(v50, v51));
      double v69 = *(double *)&result;
      if (v70) {
        double v69 = 0.0;
      }
      double v71 = v68 + v69;
    }
    else
    {
      double v71 = 32.0;
    }
  }
  else
  {
    double v71 = 32.0;
    double v67 = (double)v63 * 32.0;
  }
  double v72 = *(double *)(a4 + 56);
  double v73 = v72 + v71 * (double)v62;
  if (v73 >= 0.0) {
    double v45 = v73;
  }
  double v46 = -1.0;
  if (v67 >= (*(double *)(a4 + 80) - *(double *)(a4 + 72)) * 3.0)
  {
    a1 = v90;
    uint64_t v82 = v94;
    uint64_t v78 = v95;
    uint64_t v77 = v93;
  }
  else
  {
    long long v114 = 0u;
    memset(v115, 0, sizeof(v115));
    long long v112 = 0u;
    long long v113 = 0u;
    long long v111 = 0u;
    uint64_t v74 = MEMORY[0x1E4FBC860];
    unint64_t v75 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    unint64_t v76 = specialized Dictionary.init(dictionaryLiteral:)(v74);
    uint64_t v77 = v93;
    uint64_t v78 = v95;
    *(void *)&long long v98 = v93;
    *((void *)&v98 + 1) = a6;
    *(void *)&long long v99 = v94;
    BYTE8(v99) = a8 & 1;
    a1 = v90;
    HIDWORD(v99) = HIDWORD(a8);
    *((void *)&v100 + 1) = v22;
    *(double *)&long long v101 = v21;
    *((void *)&v101 + 1) = v95;
    LOBYTE(v100) = 0;
    int64x2_t v102 = vdupq_n_s64(0x7FF0000000000000uLL);
    LODWORD(v103) = 0;
    *((void *)&v103 + 1) = v90;
    LOBYTE(v104) = 0;
    *((void *)&v104 + 1) = 0;
    char v105 = 0;
    double v106 = 0.0;
    uint64_t v107 = 0;
    char v108 = 1;
    uint64_t v109 = v74;
    uint64_t v110 = 0;
    uint64_t v116 = v74;
    uint64_t v117 = 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v118 = 0x8000000000000000;
    uint64_t v119 = 0x7FF0000000000000;
    long long v120 = xmmword_1883572F0;
    double v121 = -INFINITY;
    char v122 = 0;
    unint64_t v123 = v75;
    unint64_t v124 = v76;
    if (v61 < 0)
    {
      LOBYTE(v97) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v83 = specialized LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(v91, v88, a2, 2 * v22, &v97);
      specialized StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v83, v88, v91 == 0, v97, 0, v72);
      swift_bridgeObjectRelease();
      uint64_t v80 = *((void *)&v104 + 1);
      double v81 = v106;
      uint64_t v79 = a2;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v79 = a2;
      uint64_t v80 = v88;
      double v81 = v72;
    }
    *(double *)&uint64_t result = COERCE_DOUBLE(specialized StackPlacement.place(subviews:from:position:stopping:style:)(v79, v80, v90, 0, v81));
    uint64_t v82 = v94;
    if (*((double *)&v120 + 1) < v121)
    {
      if (*((double *)&v120 + 1) > v121)
      {
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      if (*((double *)&v120 + 1) >= 0.0)
      {
        double v46 = v121 - *((double *)&v120 + 1);
        double v45 = *((double *)&v120 + 1);
      }
    }
    *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v98, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout));
  }
  if (*((uint64_t *)&v126 + 1) <= a1) {
    goto LABEL_67;
  }
  double v84 = *(double *)&v129 - *((double *)&v128 + 1);
  if (*(double *)&v129 - *((double *)&v128 + 1) < 0.0)
  {
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  long long v114 = 0u;
  memset(v115, 0, sizeof(v115));
  long long v112 = 0u;
  long long v113 = 0u;
  long long v111 = 0u;
  uint64_t v85 = MEMORY[0x1E4FBC860];
  unint64_t v86 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v87 = specialized Dictionary.init(dictionaryLiteral:)(v85);
  *(void *)&long long v98 = v77;
  *((void *)&v98 + 1) = a6;
  *(void *)&long long v99 = v82;
  BYTE8(v99) = a8 & 1;
  HIDWORD(v99) = HIDWORD(a8);
  *((void *)&v100 + 1) = v22;
  *(double *)&long long v101 = v21;
  LOBYTE(v100) = 0;
  *((void *)&v101 + 1) = v78;
  v102.i64[0] = 0;
  *(double *)&v102.i64[1] = v84;
  LODWORD(v103) = 0;
  *((void *)&v103 + 1) = a1;
  LOBYTE(v104) = 0;
  *((void *)&v104 + 1) = 0;
  char v105 = 0;
  double v106 = 0.0;
  uint64_t v107 = 0;
  char v108 = 1;
  uint64_t v109 = v85;
  uint64_t v110 = 0;
  uint64_t v116 = v85;
  uint64_t v117 = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v118 = 0x8000000000000000;
  uint64_t v119 = 0x7FF0000000000000;
  long long v120 = xmmword_1883572F0;
  double v121 = -INFINITY;
  char v122 = 0;
  unint64_t v123 = v86;
  unint64_t v124 = v87;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(double *)&uint64_t result = COERCE_DOUBLE(specialized StackPlacement.place(subviews:from:position:stopping:style:)(a2, 0, 0, 1, 0.0));
  if (*((double *)&v120 + 1) >= v121)
  {
LABEL_66:
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v98, &lazy cache variable for type metadata for StackPlacement<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout);
LABEL_67:
    if (v46 >= 0.0)
    {
LABEL_33:
      specialized LazyStack<>.log(_:)(a1, 0x69724748797A614CLL, 0xEF74756F79614C64, v45, 0.0, v46, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(double *)&uint64_t result = COERCE_DOUBLE(swift_bridgeObjectRelease());
      char v44 = 0;
      double v43 = v17;
      goto LABEL_34;
    }
LABEL_30:
    if (*(void *)(*((void *)&v130 + 1) + 16)) {
      double v46 = v55;
    }
    else {
      double v46 = 0.0;
    }
    goto LABEL_33;
  }
  if (*((double *)&v120 + 1) <= v121)
  {
    double v46 = v121 - *((double *)&v120 + 1);
    double v45 = *((double *)&v120 + 1);
    goto LABEL_66;
  }
LABEL_74:
  __break(1u);
  return result;
}

{
  double v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  long long *Value;
  long long v37;
  uint64_t v38;
  unint64_t v39;
  double v40;
  double v41;
  double v42;
  double v43;
  char v44;
  double v45;
  double v46;
  char v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  char v53;
  double v54;
  double v55;
  double v56;
  double v57;
  uint64_t v58;
  char v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  char v66;
  double v67;
  double v68;
  double v69;
  char v70;
  double v71;
  double v72;
  double v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  double v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v97;
  long long v98;
  long long v99;
  long long v100;
  long long v101;
  int64x2_t v102;
  long long v103;
  long long v104;
  char v105;
  double v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  long long v111;
  long long v112;
  long long v113;
  long long v114;
  unsigned char v115[31];
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  long long v120;
  double v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  _OWORD v125[2];
  long long v126;
  long long v127;
  long long v128;
  long long v129;
  long long v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133[3];

  double v17 = *(double *)(a3 + 32);
  *(double *)&long long v98 = v17;
  unint64_t v18 = a8 & 0xFFFFFFFF00000000;
  *(double *)&uint64_t result = COERCE_DOUBLE(specialized HVGrid.minorGeometry(updatingSize:)((double *)&v98, a5));
  if (result < 1 || (double v21 = *(double *)&v98, *(double *)&v98 <= 0.0))
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(swift_bridgeObjectRelease());
    double v43 = 0.0;
    char v44 = 1;
    double v45 = 0.0;
    double v46 = 0.0;
LABEL_34:
    *(void *)a9 = 0;
    *(double *)(a9 + 8) = v45;
    *(double *)(a9 + 16) = v43;
    *(double *)(a9 + 24) = v46;
    *(unsigned char *)(a9 + 32) = v44;
    return result;
  }
  uint64_t v22 = result;
  uint64_t v93 = a5;
  uint64_t v94 = a7;
  uint64_t v95 = v20;
  uint64_t v23 = a1 / result;
  uint64_t v91 = a1 / result * result;
  if ((unsigned __int128)(a1 / result * (__int128)result) >> 64 != v91 >> 63)
  {
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  int v24 = *(_DWORD *)(a3 + 12);
  long long v25 = *(_OWORD *)(a4 + 80);
  long long v128 = *(_OWORD *)(a4 + 64);
  long long v129 = v25;
  long long v130 = *(_OWORD *)(a4 + 96);
  unint64_t v131 = *(void *)(a4 + 112);
  long long v26 = *(_OWORD *)(a4 + 16);
  v125[0] = *(_OWORD *)a4;
  v125[1] = v26;
  long long v27 = *(_OWORD *)(a4 + 48);
  long long v126 = *(_OWORD *)(a4 + 32);
  long long v127 = v27;
  long long v28 = *(_OWORD *)(a3 + 104);
  long long v29 = *(_OWORD *)(a3 + 136);
  int64x2_t v102 = *(int64x2_t *)(a3 + 120);
  long long v103 = v29;
  long long v104 = *(_OWORD *)(a3 + 152);
  long long v30 = *(_OWORD *)(a3 + 72);
  long long v98 = *(_OWORD *)(a3 + 56);
  long long v99 = v30;
  long long v100 = *(_OWORD *)(a3 + 88);
  long long v101 = v28;
  outlined retain of _LazyStack_Cache<LazyHGridLayout>(a4);
  ScrollGeometry.visibleRect.getter();
  CGRect.subscript.getter();
  double v32 = v31;
  double v34 = v33;
  double v35 = 0.0;
  if (v24 != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = (long long *)AGGraphGetValue();
    long long v37 = Value[1];
    long long v98 = *Value;
    long long v99 = v37;
    MEMORY[0x18C114450]();
  }
  unint64_t v39 = *(void *)(a4 + 104);
  uint64_t v38 = *(void *)(a4 + 112);
  v133[0] = v39;
  double v41 = *(double *)(a4 + 88);
  double v40 = *(double *)(a4 + 96);
  if (v41 > 0.0 && v34 - v32 > 0.0)
  {
    double v42 = vabdd_f64(v41, v34 - v32);
    if (v40 <= 0.0 || v35 <= 0.0)
    {
      if (v42 < 0.01) {
        goto LABEL_16;
      }
      goto LABEL_18;
    }
    if (v42 >= 0.01) {
      goto LABEL_18;
    }
LABEL_15:
    if (vabdd_f64(v40, v35) < 0.01)
    {
LABEL_16:
      char v47 = 0;
      goto LABEL_19;
    }
LABEL_18:
    uint64_t v132 = v38;
    uint64_t v48 = MEMORY[0x1E4FBC860];
    unint64_t v39 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    outlined release of _LazyLayout_Placements((uint64_t)v133);
    *((void *)&v130 + 1) = v39;
    unint64_t v49 = specialized Dictionary.init(dictionaryLiteral:)(v48);
    outlined release of _LazyLayout_Placements((uint64_t)&v132);
    unint64_t v131 = v49;
    char v47 = 1;
    goto LABEL_19;
  }
  char v47 = 0;
  if (v40 > 0.0 && v35 > 0.0) {
    goto LABEL_15;
  }
LABEL_19:
  char v92 = v47;
  if (!*(void *)(v39 + 16))
  {
    uint64_t v97 = 0;
    *(void *)&long long v98 = 0;
    specialized LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)((double *)&v98, &v97, v22, v95, a2, (uint64_t)v125, v93, a6, v21, v94, v18 | a8 & 1, HIDWORD(v18));
  }
  uint64_t v50 = *((void *)&v130 + 1);
  uint64_t v51 = v131;
  double v52 = COERCE_DOUBLE(EstimationCache.average.getter(*((uint64_t *)&v130 + 1), v131));
  double v55 = v54;
  double v56 = v52;
  if (v53) {
    double v57 = 0.0;
  }
  else {
    double v57 = v52;
  }
  double v45 = (v55 + v57) * (double)v23;
  if (*(void *)(a4 + 40) == *(void *)(a4 + 48)) {
    goto LABEL_30;
  }
  uint64_t v90 = a1;
  uint64_t v58 = *(void *)(a4 + 16);
  if (!v58
    || v22 != *(void *)a4
    || v21 != *(double *)(a4 + 8)
    || (char v59 = v53,
        uint64_t v88 = *(void *)(a4 + 40),
        swift_bridgeObjectRetain_n(),
        swift_bridgeObjectRetain(),
        char v89 = specialized static Array<A>.== infix(_:_:)(v95, v58),
        swift_bridgeObjectRelease_n(),
        *(double *)&uint64_t result = COERCE_DOUBLE(swift_bridgeObjectRelease()),
        v92 & 1 | ((v89 & 1) == 0)))
  {
    a1 = v90;
    goto LABEL_30;
  }
  double v60 = 0.0;
  if (!((v23 < 1) | v59 & 1)) {
    double v60 = v56;
  }
  uint64_t v61 = v91 - v88;
  if (__OFSUB__(v91, v88)) {
    goto LABEL_70;
  }
  uint64_t v62 = v61 / v22;
  uint64_t v63 = v61 / v22;
  if (v61 / v22 < 0)
  {
    uint64_t v63 = -v62;
    if (__OFSUB__(0, v62)) {
      goto LABEL_72;
    }
  }
  double v45 = v45 - v60;
  if (*(void *)(v50 + 16))
  {
    *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(v50, v51));
    double v65 = *(double *)&result;
    if (v66) {
      double v65 = 0.0;
    }
    double v67 = (v64 + v65) * (double)v63;
    if (*(void *)(v50 + 16))
    {
      *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(v50, v51));
      double v69 = *(double *)&result;
      if (v70) {
        double v69 = 0.0;
      }
      double v71 = v68 + v69;
    }
    else
    {
      double v71 = 32.0;
    }
  }
  else
  {
    double v71 = 32.0;
    double v67 = (double)v63 * 32.0;
  }
  double v72 = *(double *)(a4 + 56);
  double v73 = v72 + v71 * (double)v62;
  if (v73 >= 0.0) {
    double v45 = v73;
  }
  double v46 = -1.0;
  if (v67 >= (*(double *)(a4 + 80) - *(double *)(a4 + 72)) * 3.0)
  {
    a1 = v90;
    uint64_t v82 = v94;
    uint64_t v78 = v95;
    uint64_t v77 = v93;
  }
  else
  {
    long long v114 = 0u;
    memset(v115, 0, sizeof(v115));
    long long v112 = 0u;
    long long v113 = 0u;
    long long v111 = 0u;
    uint64_t v74 = MEMORY[0x1E4FBC860];
    unint64_t v75 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    unint64_t v76 = specialized Dictionary.init(dictionaryLiteral:)(v74);
    uint64_t v77 = v93;
    uint64_t v78 = v95;
    *(void *)&long long v98 = v93;
    *((void *)&v98 + 1) = a6;
    *(void *)&long long v99 = v94;
    BYTE8(v99) = a8 & 1;
    a1 = v90;
    HIDWORD(v99) = HIDWORD(a8);
    *((void *)&v100 + 1) = v22;
    *(double *)&long long v101 = v21;
    *((void *)&v101 + 1) = v95;
    LOBYTE(v100) = 1;
    int64x2_t v102 = vdupq_n_s64(0x7FF0000000000000uLL);
    LODWORD(v103) = 0;
    *((void *)&v103 + 1) = v90;
    LOBYTE(v104) = 0;
    *((void *)&v104 + 1) = 0;
    char v105 = 0;
    double v106 = 0.0;
    uint64_t v107 = 0;
    char v108 = 1;
    uint64_t v109 = v74;
    uint64_t v110 = 0;
    uint64_t v116 = v74;
    uint64_t v117 = 0x7FFFFFFFFFFFFFFFLL;
    unint64_t v118 = 0x8000000000000000;
    uint64_t v119 = 0x7FF0000000000000;
    long long v120 = xmmword_1883572F0;
    double v121 = -INFINITY;
    char v122 = 0;
    unint64_t v123 = v75;
    unint64_t v124 = v76;
    if (v61 < 0)
    {
      LOBYTE(v97) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v83 = specialized LazyStack<>.collectBackwards(from:to:subviews:style:atEnd:)(v91, v88, a2, 2 * v22, &v97);
      specialized StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(v83, v88, v91 == 0, v97, 0, v72);
      swift_bridgeObjectRelease();
      uint64_t v80 = *((void *)&v104 + 1);
      double v81 = v106;
      uint64_t v79 = a2;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v79 = a2;
      uint64_t v80 = v88;
      double v81 = v72;
    }
    *(double *)&uint64_t result = COERCE_DOUBLE(specialized StackPlacement.place(subviews:from:position:stopping:style:)(v79, v80, v90, 0, v81));
    uint64_t v82 = v94;
    if (*((double *)&v120 + 1) < v121)
    {
      if (*((double *)&v120 + 1) > v121)
      {
LABEL_73:
        __break(1u);
        goto LABEL_74;
      }
      if (*((double *)&v120 + 1) >= 0.0)
      {
        double v46 = v121 - *((double *)&v120 + 1);
        double v45 = *((double *)&v120 + 1);
      }
    }
    *(double *)&uint64_t result = COERCE_DOUBLE(outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v98, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout));
  }
  if (*((uint64_t *)&v126 + 1) <= a1) {
    goto LABEL_67;
  }
  double v84 = *(double *)&v129 - *((double *)&v128 + 1);
  if (*(double *)&v129 - *((double *)&v128 + 1) < 0.0)
  {
LABEL_71:
    __break(1u);
LABEL_72:
    __break(1u);
    goto LABEL_73;
  }
  long long v114 = 0u;
  memset(v115, 0, sizeof(v115));
  long long v112 = 0u;
  long long v113 = 0u;
  long long v111 = 0u;
  uint64_t v85 = MEMORY[0x1E4FBC860];
  unint64_t v86 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v87 = specialized Dictionary.init(dictionaryLiteral:)(v85);
  *(void *)&long long v98 = v77;
  *((void *)&v98 + 1) = a6;
  *(void *)&long long v99 = v82;
  BYTE8(v99) = a8 & 1;
  HIDWORD(v99) = HIDWORD(a8);
  *((void *)&v100 + 1) = v22;
  *(double *)&long long v101 = v21;
  LOBYTE(v100) = 1;
  *((void *)&v101 + 1) = v78;
  v102.i64[0] = 0;
  *(double *)&v102.i64[1] = v84;
  LODWORD(v103) = 0;
  *((void *)&v103 + 1) = a1;
  LOBYTE(v104) = 0;
  *((void *)&v104 + 1) = 0;
  char v105 = 0;
  double v106 = 0.0;
  uint64_t v107 = 0;
  char v108 = 1;
  uint64_t v109 = v85;
  uint64_t v110 = 0;
  uint64_t v116 = v85;
  uint64_t v117 = 0x7FFFFFFFFFFFFFFFLL;
  unint64_t v118 = 0x8000000000000000;
  uint64_t v119 = 0x7FF0000000000000;
  long long v120 = xmmword_1883572F0;
  double v121 = -INFINITY;
  char v122 = 0;
  unint64_t v123 = v86;
  unint64_t v124 = v87;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *(double *)&uint64_t result = COERCE_DOUBLE(specialized StackPlacement.place(subviews:from:position:stopping:style:)(a2, 0, 0, 1, 0.0));
  if (*((double *)&v120 + 1) >= v121)
  {
LABEL_66:
    outlined destroy of StackPlacement<LazyHStackLayout>((uint64_t)&v98, &lazy cache variable for type metadata for StackPlacement<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout);
LABEL_67:
    if (v46 >= 0.0)
    {
LABEL_33:
      specialized LazyStack<>.log(_:)(a1, 0x69724756797A614CLL, 0xEF74756F79614C64, 0.0, v45, v17, v46);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(double *)&uint64_t result = COERCE_DOUBLE(swift_bridgeObjectRelease());
      char v44 = 0;
      double v43 = v17;
      goto LABEL_34;
    }
LABEL_30:
    if (*(void *)(*((void *)&v130 + 1) + 16)) {
      double v46 = v55;
    }
    else {
      double v46 = 0.0;
    }
    goto LABEL_33;
  }
  if (*((double *)&v120 + 1) <= v121)
  {
    double v46 = v121 - *((double *)&v120 + 1);
    double v45 = *((double *)&v120 + 1);
    goto LABEL_66;
  }
LABEL_74:
  __break(1u);
  return result;
}

uint64_t static MinorProperties.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)a1 != *(void *)a2 || *(double *)(a1 + 8) != *(double *)(a2 + 8)) {
    return 0;
  }
  swift_getAssociatedTypeWitness();
  type metadata accessor for MinorProperties();
  swift_getAssociatedConformanceWitness();
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance MinorProperties<A>(uint64_t a1, uint64_t a2)
{
  return static MinorProperties.== infix(_:_:)(a1, a2);
}

unint64_t protocol witness for static Equatable.== infix(_:_:) in conformance EstimationCache(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if ((specialized static Dictionary<>.== infix(_:_:)(*a1, *a2) & 1) == 0) {
    return 0;
  }

  return specialized static Dictionary<>.== infix(_:_:)(v2, v3);
}

uint64_t specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t a1, uint64_t *a2, unsigned char *a3, char a4, unsigned char *a5, unsigned char *a6)
{
  return specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, a6, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:));
}

{
  return specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, a6, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:));
}

{
  return specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, a6, (double (*)(uint64_t, uint64_t, void, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(subviews:predecessors:minorGeometry:));
}

{
  return specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(a1, a2, a3, a4, a5, a6, (double (*)(uint64_t, uint64_t, void, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(subviews:predecessors:minorGeometry:));
}

uint64_t specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t result, uint64_t *a2, unsigned char *a3, char a4, unsigned char *a5, unsigned char *a6, double (*a7)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))
{
  char v11 = result;
  double v12 = a2 + 18;
  uint64_t v13 = a2[18];
  uint64_t v14 = *(void *)(v13 + 16);
  if ((result & 1) != 0 || v14)
  {
    uint64_t v15 = a2[19];
    if (!v15)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    if (v14)
    {
      swift_bridgeObjectRetain();
      if (*(void *)(v15 + 16))
      {
LABEL_6:
        double v34 = a2 + 19;
        outlined init with copy of _LazyLayout_Subview(v15 + 32, (uint64_t)v37);
        if ((v37[93] & 1) == 0 && v37[94] != 1)
        {
          swift_bridgeObjectRetain();
          outlined destroy of _LazyLayout_Subview((uint64_t)v37);
          uint64_t v20 = *a2;
          uint64_t v29 = a2[2];
          uint64_t v30 = a2[1];
          unsigned __int8 v21 = *((unsigned char *)a2 + 24);
          uint64_t v22 = a2[7];
          uint64_t v28 = *((unsigned int *)a2 + 7);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          LOBYTE(v35[0]) = v21;
          double v17 = a7(v15, v13, v22, v20, v30, v29, v21 | (unint64_t)(v28 << 32));
          double v19 = v23;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        swift_bridgeObjectRetain();
        outlined destroy of _LazyLayout_Subview((uint64_t)v37);
        outlined init with copy of _LazyLayout_Subview(v15 + 32, (uint64_t)v37);
        swift_bridgeObjectRelease();
        uint64_t result = ProposedViewSize.init(_:in:by:)();
        char v7 = v16;
        if (v13)
        {
          if (!*(void *)(v13 + 16))
          {
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
          outlined init with copy of _LazyLayout_Subview(v13 + 32, (uint64_t)v35);
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
LABEL_13:
        memset(v35, 0, 95);
LABEL_14:
        char v36 = v7 & 1;
        double v17 = _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)();
        double v19 = v18;
        outlined destroy of _LazyLayout_Subview?((uint64_t)v35);
        outlined destroy of _LazyLayout_Subview((uint64_t)v37);
LABEL_16:
        uint64_t result = swift_beginAccess();
        if (*a3 == 1) {
          *((double *)a2 + 15) = *((double *)a2 + 15) - v17;
        }
        uint64_t v24 = a2[13];
        if (v24)
        {
          uint64_t result = swift_beginAccess();
          if (*a3) {
            *((double *)a2 + 15) = *((double *)a2 + 15) - v19;
          }
        }
        if (v19 + *((double *)a2 + 15) <= *((double *)a2 + 8) && (v11 & 1) == 0 && (a4 & 1) == 0)
        {
          swift_beginAccess();
          *a5 = 1;
          return swapSubviews(_:_:)(v34, v12);
        }
        uint64_t v25 = a2[5];
        BOOL v26 = __OFSUB__(v24, v25);
        uint64_t v27 = v24 - v25;
        if (!v26)
        {
          swift_beginAccess();
          if (*a6 == 1 && (v27 & 0x8000000000000000) == 0) {
            a2[13] = v27;
          }
          return swapSubviews(_:_:)(v34, v12);
        }
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v13 = 0;
      if (*(void *)(v15 + 16)) {
        goto LABEL_6;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t specialized flushBackwards #1 <A>(includeEmpty:) in StackPlacement.measureBackwards(subviews:lastIndex:lastPosition:atStart:atEnd:allowBeforeFirst:)(uint64_t result, uint64_t *a2, unsigned char *a3, char a4, unsigned char *a5, unsigned char *a6, double (*a7)(uint64_t, uint64_t, void, uint64_t, unint64_t, double))
{
  char v11 = result;
  double v12 = a2 + 17;
  uint64_t v13 = a2[17];
  uint64_t v14 = *(void *)(v13 + 16);
  if ((result & 1) != 0 || v14)
  {
    uint64_t v15 = a2 + 18;
    uint64_t v16 = a2[18];
    if (!v16)
    {
LABEL_33:
      __break(1u);
      return result;
    }
    if (v14)
    {
      swift_bridgeObjectRetain();
      if (*(void *)(v16 + 16))
      {
LABEL_6:
        outlined init with copy of _LazyLayout_Subview(v16 + 32, (uint64_t)v36);
        if ((v36[93] & 1) == 0 && v36[94] != 1)
        {
          swift_bridgeObjectRetain();
          outlined destroy of _LazyLayout_Subview((uint64_t)v36);
          double v21 = *(double *)a2;
          uint64_t v22 = a2[1];
          double v23 = *((double *)a2 + 6);
          uint64_t v24 = *((unsigned int *)a2 + 5);
          LOBYTE(v34[0]) = *((unsigned char *)a2 + 16);
          double v18 = a7(v16, v13, *(void *)&v21, v22, LOBYTE(v34[0]) | (unint64_t)(v24 << 32), v23);
          double v20 = v25;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_16;
        }
        uint64_t v30 = a6;
        double v31 = a2 + 18;
        swift_bridgeObjectRetain();
        outlined destroy of _LazyLayout_Subview((uint64_t)v36);
        outlined init with copy of _LazyLayout_Subview(v16 + 32, (uint64_t)v36);
        swift_bridgeObjectRelease();
        uint64_t result = ProposedViewSize.init(_:in:by:)();
        LOBYTE(a6) = v17;
        if (v13)
        {
          if (!*(void *)(v13 + 16))
          {
LABEL_32:
            __break(1u);
            goto LABEL_33;
          }
          outlined init with copy of _LazyLayout_Subview(v13 + 32, (uint64_t)v34);
          swift_bridgeObjectRelease();
          goto LABEL_14;
        }
LABEL_13:
        memset(v34, 0, 95);
LABEL_14:
        char v35 = a6 & 1;
        double v18 = _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)();
        double v20 = v19;
        outlined destroy of _LazyLayout_Subview?((uint64_t)v34);
        outlined destroy of _LazyLayout_Subview((uint64_t)v36);
        a6 = v30;
        uint64_t v15 = v31;
LABEL_16:
        uint64_t result = swift_beginAccess();
        if (*a3 == 1) {
          *((double *)a2 + 14) = *((double *)a2 + 14) - v18;
        }
        uint64_t v26 = a2[12];
        if (v26)
        {
          uint64_t result = swift_beginAccess();
          if (*a3) {
            *((double *)a2 + 14) = *((double *)a2 + 14) - v20;
          }
        }
        if (v20 + *((double *)a2 + 14) <= *((double *)a2 + 7) && (v11 & 1) == 0 && (a4 & 1) == 0)
        {
          swift_beginAccess();
          *a5 = 1;
          return swapSubviews(_:_:)(v15, v12);
        }
        uint64_t v27 = a2[4];
        BOOL v28 = __OFSUB__(v26, v27);
        uint64_t v29 = v26 - v27;
        if (!v28)
        {
          swift_beginAccess();
          if (*a6 == 1 && (v29 & 0x8000000000000000) == 0) {
            a2[12] = v29;
          }
          return swapSubviews(_:_:)(v15, v12);
        }
        __break(1u);
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v13 = 0;
      if (*(void *)(v16 + 16)) {
        goto LABEL_6;
      }
    }
    __break(1u);
    goto LABEL_13;
  }
  return result;
}

uint64_t one-time initialization function for lazyStackLog()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, static Log.lazyStackLog);
  __swift_project_value_buffer(v0, (uint64_t)static Log.lazyStackLog);
  return Logger.init(subsystem:category:)();
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance EnableLazyStackLogging())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance EnableLazyStackLogging()
{
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();

  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnableLazyStackLogging()
{
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnableLazyStackLogging()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance EnableLazyStackLogging@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a1, v4);
  *a2 = result & 1;
  return result;
}

uint64_t protocol witness for LazyLayout.place(subviews:context:cache:in:) in conformance LazyVStackLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for LazyLayout.place(subviews:context:cache:in:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, unsigned char *, uint64_t, uint64_t, void, void, unint64_t))specialized LazyStack<>.place(subviews:context:cache:in:));
}

uint64_t protocol witness for LazyLayout.estimatedPlacement(subviews:context:cache:in:) in conformance LazyVStackLayout(uint64_t a1, const void *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for LazyLayout.estimatedPlacement(subviews:context:cache:in:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, unsigned char *, _OWORD *, uint64_t, void, void, unint64_t))specialized LazyStack<>.estimatedPlacement(subviews:context:cache:in:));
}

uint64_t protocol witness for LazyLayout.prefetch(subviews:edges:context:cache:offsetPastVisible:) in conformance LazyVStackLayout(uint64_t a1, uint64_t a2, void *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for LazyLayout.prefetch(subviews:edges:context:cache:offsetPastVisible:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, unsigned char *, _OWORD *, uint64_t, void, void, unint64_t))specialized LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:));
}

unint64_t protocol witness for LazyLayout.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:) in conformance LazyVStackLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  *(void *)&long long v10 = &unk_1ED47DB38;
  *((void *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in LazyStack<>.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:);
  return protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyVStackLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.placementOfNearbySubview(_:subviews:context:cache:), 1);
}

uint64_t protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyVStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout);
}

uint64_t protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyVStackLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, _OWORD *a4@<X3>, uint64_t a5@<X8>)
{
  return protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyVStackLayout(a3, a1, a2, a4, (void (*)(void *__return_ptr, uint64_t, uint64_t, unsigned char *, _OWORD *, void, void, unint64_t))specialized LazyStack<>.boundingRect(at:subviews:context:cache:), a5);
}

unint64_t protocol witness for static LazyLayout.initialCache.getter in conformance LazyVStackLayout@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = _Q1;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(v7);
  *(void *)(a1 + 112) = v8;
  *(void *)(a1 + 120) = result;
  return result;
}

uint64_t protocol witness for LazyLayout.place(subviews:context:cache:in:) in conformance LazyHStackLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for LazyLayout.place(subviews:context:cache:in:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, unsigned char *, uint64_t, uint64_t, void, void, unint64_t))specialized LazyStack<>.place(subviews:context:cache:in:));
}

uint64_t protocol witness for LazyLayout.place(subviews:context:cache:in:) in conformance LazyVStackLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, unsigned char *, uint64_t, uint64_t, void, void, unint64_t))
{
  memcpy(__dst, a2, 0x129uLL);
  return a7(a1, __dst, a3, a4, *(void *)v7, *(void *)(v7 + 8), *(unsigned __int8 *)(v7 + 16) | ((unint64_t)*(unsigned int *)(v7 + 20) << 32));
}

uint64_t protocol witness for LazyLayout.estimatedPlacement(subviews:context:cache:in:) in conformance LazyHStackLayout(uint64_t a1, const void *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for LazyLayout.estimatedPlacement(subviews:context:cache:in:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, unsigned char *, _OWORD *, uint64_t, void, void, unint64_t))specialized LazyStack<>.estimatedPlacement(subviews:context:cache:in:));
}

uint64_t protocol witness for LazyLayout.estimatedPlacement(subviews:context:cache:in:) in conformance LazyVStackLayout(uint64_t a1, const void *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, unsigned char *, _OWORD *, uint64_t, void, void, unint64_t))
{
  memcpy(__dst, a2, 0x129uLL);
  long long v12 = a3[5];
  v18[4] = a3[4];
  v18[5] = v12;
  long long v13 = a3[7];
  void v18[6] = a3[6];
  v18[7] = v13;
  long long v14 = a3[1];
  v18[0] = *a3;
  v18[1] = v14;
  long long v15 = a3[3];
  void v18[2] = a3[2];
  v18[3] = v15;
  return a7(a1, __dst, v18, a4, *(void *)v7, *(void *)(v7 + 8), *(unsigned __int8 *)(v7 + 16) | ((unint64_t)*(unsigned int *)(v7 + 20) << 32));
}

uint64_t protocol witness for LazyLayout.prefetch(subviews:edges:context:cache:offsetPastVisible:) in conformance LazyHStackLayout(uint64_t a1, uint64_t a2, void *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for LazyLayout.prefetch(subviews:edges:context:cache:offsetPastVisible:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, unsigned char *, _OWORD *, uint64_t, void, void, unint64_t))specialized LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:));
}

uint64_t protocol witness for LazyLayout.prefetch(subviews:edges:context:cache:offsetPastVisible:) in conformance LazyVStackLayout(uint64_t a1, uint64_t a2, void *__src, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, unsigned char *, _OWORD *, uint64_t, void, void, unint64_t))
{
  memcpy(__dst, __src, 0x129uLL);
  long long v14 = a4[5];
  v20[4] = a4[4];
  void v20[5] = v14;
  long long v15 = a4[7];
  v20[6] = a4[6];
  v20[7] = v15;
  long long v16 = a4[1];
  v20[0] = *a4;
  v20[1] = v16;
  long long v17 = a4[3];
  v20[2] = a4[2];
  void v20[3] = v17;
  return a8(a1, a2, __dst, v20, a5, *(void *)v8, *(void *)(v8 + 8), *(unsigned __int8 *)(v8 + 16) | ((unint64_t)*(unsigned int *)(v8 + 20) << 32));
}

unint64_t protocol witness for LazyLayout.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:) in conformance LazyHStackLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, _OWORD *a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  *(void *)&long long v10 = &unk_1ED47DB88;
  *((void *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in LazyStack<>.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:);
  return protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyVStackLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.placementOfNearbySubview(_:subviews:context:cache:), 0);
}

uint64_t protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyHStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyVStackLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout);
}

uint64_t protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyVStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  uint64_t v14 = a8();
  return LazyStack<>.firstIndex<A>(of:subviews:context:)(a1, a2, a3, a6, a4, v14, a5);
}

uint64_t protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyHGridLayout(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, _OWORD *, void, void, void, unint64_t, _BYTE))specialized LazyStack<>.sizeThatFits(proposedSize:subviews:context:cache:));
}

uint64_t protocol witness for LazyLayout.place(subviews:context:cache:in:) in conformance LazyHGridLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for LazyLayout.place(subviews:context:cache:in:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, unsigned char *, uint64_t, uint64_t, void, void, void, unint64_t))specialized LazyStack<>.place(subviews:context:cache:in:));
}

uint64_t protocol witness for LazyLayout.estimatedPlacement(subviews:context:cache:in:) in conformance LazyHGridLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for LazyLayout.estimatedPlacement(subviews:context:cache:in:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, unsigned char *, _OWORD *, uint64_t, void, void, void, unint64_t))specialized LazyStack<>.estimatedPlacement(subviews:context:cache:in:));
}

uint64_t protocol witness for LazyLayout.prefetch(subviews:edges:context:cache:offsetPastVisible:) in conformance LazyHGridLayout(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for LazyLayout.prefetch(subviews:edges:context:cache:offsetPastVisible:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, unsigned char *, _OWORD *, uint64_t, void, void, void, unint64_t, unsigned __int8))specialized LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:));
}

unint64_t protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyHGridLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  *(void *)&long long v10 = &unk_1ED47DAC0;
  *((void *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in LazyStack<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:);
  return protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyHGridLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.placementOfNearbySubview(_:subviews:context:cache:), 0);
}

unint64_t protocol witness for LazyLayout.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:) in conformance LazyHGridLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  *(void *)&long long v10 = &unk_1ED47DA98;
  *((void *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in LazyStack<>.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:);
  return protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyHGridLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.placementOfNearbySubview(_:subviews:context:cache:), 0);
}

unint64_t protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyHGridLayout@<X0>(void *__src@<X4>, unint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X2>, char a5@<W3>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9, long long a10, void (*a11)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t), char a12)
{
  memcpy(__dst, __src, 0x129uLL);
  long long v19 = *(_OWORD *)(a7 + 80);
  v25[4] = *(_OWORD *)(a7 + 64);
  v25[5] = v19;
  v25[6] = *(_OWORD *)(a7 + 96);
  uint64_t v26 = *(void *)(a7 + 112);
  long long v20 = *(_OWORD *)(a7 + 16);
  v25[0] = *(_OWORD *)a7;
  v25[1] = v20;
  long long v21 = *(_OWORD *)(a7 + 48);
  void v25[2] = *(_OWORD *)(a7 + 32);
  v25[3] = v21;
  return specialized LazyStack<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)(a2, a3, a4, a5, (uint64_t)__dst, a6, (uint64_t)v25, *(void *)v12, a8, *(void *)(v12 + 8), *(void *)(v12 + 16), *(unsigned __int8 *)(v12 + 24) | ((unint64_t)*(unsigned int *)(v12 + 28) << 32), a10, *((double (**)(uint64_t, double, double, double, double, double, double, double, double))&a10 + 1), a11, a12);
}

uint64_t protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyHGridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout);
}

uint64_t protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyHGridLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyHGridLayout(a3, a1, a2, a4, (void (*)(void *__return_ptr, uint64_t, uint64_t, unsigned char *, _OWORD *, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.boundingRect(at:subviews:context:cache:), a5);
}

unint64_t protocol witness for static LazyLayout.initialCache.getter in conformance LazyHGridLayout@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 1;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 88) = _Q0;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(v7);
  *(void *)(a1 + 104) = v8;
  *(void *)(a1 + 112) = result;
  return result;
}

uint64_t protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyVGridLayout(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t (*)(uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, _OWORD *, void, void, void, unint64_t, _BYTE))specialized LazyStack<>.sizeThatFits(proposedSize:subviews:context:cache:));
}

uint64_t protocol witness for LazyLayout.sizeThatFits(proposedSize:subviews:context:cache:) in conformance LazyHGridLayout(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t (*a10)(uint64_t, void, uint64_t, void, uint64_t, uint64_t, uint64_t, _OWORD *, void, void, void, unint64_t, _BYTE))
{
  uint64_t v11 = *a6;
  uint64_t v12 = a6[1];
  long long v13 = *(_OWORD *)(a7 + 80);
  v18[4] = *(_OWORD *)(a7 + 64);
  v18[5] = v13;
  void v18[6] = *(_OWORD *)(a7 + 96);
  uint64_t v19 = *(void *)(a7 + 112);
  long long v14 = *(_OWORD *)(a7 + 16);
  v18[0] = *(_OWORD *)a7;
  v18[1] = v14;
  long long v15 = *(_OWORD *)(a7 + 48);
  void v18[2] = *(_OWORD *)(a7 + 32);
  v18[3] = v15;
  unsigned __int8 v17 = *(unsigned char *)(v10 + 24);
  return a10(a1, a2 & 1, a3, a4 & 1, a5, v11, v12, v18, *(void *)v10, *(void *)(v10 + 8), *(void *)(v10 + 16), v17 | ((unint64_t)*(unsigned int *)(v10 + 28) << 32), a4 & 1);
}

uint64_t protocol witness for LazyLayout.place(subviews:context:cache:in:) in conformance LazyVGridLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for LazyLayout.place(subviews:context:cache:in:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, unsigned char *, uint64_t, uint64_t, void, void, void, unint64_t))specialized LazyStack<>.place(subviews:context:cache:in:));
}

uint64_t protocol witness for LazyLayout.place(subviews:context:cache:in:) in conformance LazyHGridLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, unsigned char *, uint64_t, uint64_t, void, void, void, unint64_t))
{
  memcpy(__dst, a2, 0x129uLL);
  return a7(a1, __dst, a3, a4, *(void *)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(unsigned __int8 *)(v7 + 24) | ((unint64_t)*(unsigned int *)(v7 + 28) << 32));
}

uint64_t protocol witness for LazyLayout.estimatedPlacement(subviews:context:cache:in:) in conformance LazyVGridLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return protocol witness for LazyLayout.estimatedPlacement(subviews:context:cache:in:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, (uint64_t (*)(uint64_t, unsigned char *, _OWORD *, uint64_t, void, void, void, unint64_t))specialized LazyStack<>.estimatedPlacement(subviews:context:cache:in:));
}

uint64_t protocol witness for LazyLayout.estimatedPlacement(subviews:context:cache:in:) in conformance LazyHGridLayout(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, unsigned char *, _OWORD *, uint64_t, void, void, void, unint64_t))
{
  memcpy(__dst, a2, 0x129uLL);
  long long v12 = *(_OWORD *)(a3 + 80);
  v17[4] = *(_OWORD *)(a3 + 64);
  v17[5] = v12;
  v17[6] = *(_OWORD *)(a3 + 96);
  uint64_t v18 = *(void *)(a3 + 112);
  long long v13 = *(_OWORD *)(a3 + 16);
  v17[0] = *(_OWORD *)a3;
  v17[1] = v13;
  long long v14 = *(_OWORD *)(a3 + 48);
  v17[2] = *(_OWORD *)(a3 + 32);
  v17[3] = v14;
  return a7(a1, __dst, v17, a4, *(void *)v7, *(void *)(v7 + 8), *(void *)(v7 + 16), *(unsigned __int8 *)(v7 + 24) | ((unint64_t)*(unsigned int *)(v7 + 28) << 32));
}

uint64_t protocol witness for LazyLayout.prefetch(subviews:edges:context:cache:offsetPastVisible:) in conformance LazyVGridLayout(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for LazyLayout.prefetch(subviews:edges:context:cache:offsetPastVisible:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, unsigned char *, _OWORD *, uint64_t, void, void, void, unint64_t, unsigned __int8))specialized LazyStack<>.prefetch(subviews:edges:context:cache:offsetPastVisible:));
}

uint64_t protocol witness for LazyLayout.prefetch(subviews:edges:context:cache:offsetPastVisible:) in conformance LazyHGridLayout(uint64_t a1, uint64_t a2, void *__src, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, unsigned char *, _OWORD *, uint64_t, void, void, void, unint64_t, unsigned __int8))
{
  memcpy(__dst, __src, 0x129uLL);
  long long v14 = *(_OWORD *)(a4 + 80);
  v20[4] = *(_OWORD *)(a4 + 64);
  void v20[5] = v14;
  v20[6] = *(_OWORD *)(a4 + 96);
  uint64_t v21 = *(void *)(a4 + 112);
  long long v15 = *(_OWORD *)(a4 + 16);
  v20[0] = *(_OWORD *)a4;
  v20[1] = v15;
  long long v16 = *(_OWORD *)(a4 + 48);
  v20[2] = *(_OWORD *)(a4 + 32);
  void v20[3] = v16;
  unsigned __int8 v18 = *(unsigned char *)(v8 + 24);
  return a8(a1, a2, __dst, v20, a5, *(void *)v8, *(void *)(v8 + 8), *(void *)(v8 + 16), v18 | ((unint64_t)*(unsigned int *)(v8 + 28) << 32), v18);
}

unint64_t protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyVGridLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  *(void *)&long long v10 = &unk_1ED47DB10;
  *((void *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in LazyStack<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:);
  return protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyHGridLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.placementOfNearbySubview(_:subviews:context:cache:), 1);
}

unint64_t protocol witness for LazyLayout.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:) in conformance LazyVGridLayout@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, uint64_t a9)
{
  *(void *)&long long v10 = &unk_1ED47DAE8;
  *((void *)&v10 + 1) = partial apply for specialized implicit closure #2 in implicit closure #1 in LazyStack<>.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:);
  return protocol witness for LazyLayout.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:) in conformance LazyHGridLayout(a5, a1, a2, a3, a4, a6, a7, a8, a9, v10, (void (*)(uint64_t *__return_ptr, long long *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.placementOfNearbySubview(_:subviews:context:cache:), 1);
}

uint64_t protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyVGridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyHGridLayout(a1, a2, a3, a4, a5, a6, a7, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout);
}

uint64_t protocol witness for LazyLayout.firstIndex<A>(of:subviews:context:) in conformance LazyHGridLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  uint64_t v14 = a8();
  return LazyStack<>.firstIndex<A>(of:subviews:context:)(a1, a2, a3, a6, a4, v14, a5);
}

uint64_t protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyVGridLayout@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyHGridLayout(a3, a1, a2, a4, (void (*)(void *__return_ptr, uint64_t, uint64_t, unsigned char *, _OWORD *, uint64_t, uint64_t, uint64_t, unint64_t))specialized LazyStack<>.boundingRect(at:subviews:context:cache:), a5);
}

uint64_t protocol witness for LazyLayout.boundingRect(at:subviews:context:cache:) in conformance LazyHGridLayout@<X0>(void *__src@<X2>, uint64_t a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, void (*a5)(void *__return_ptr, uint64_t, uint64_t, unsigned char *, _OWORD *, uint64_t, uint64_t, uint64_t, unint64_t)@<X6>, uint64_t a6@<X8>)
{
  memcpy(__dst, __src, 0x129uLL);
  long long v12 = *(_OWORD *)(a4 + 80);
  v21[4] = *(_OWORD *)(a4 + 64);
  v21[5] = v12;
  v21[6] = *(_OWORD *)(a4 + 96);
  uint64_t v22 = *(void *)(a4 + 112);
  long long v13 = *(_OWORD *)(a4 + 16);
  v21[0] = *(_OWORD *)a4;
  v21[1] = v13;
  long long v14 = *(_OWORD *)(a4 + 48);
  void v21[2] = *(_OWORD *)(a4 + 32);
  v21[3] = v14;
  uint64_t v15 = *v6;
  uint64_t v16 = v6[1];
  uint64_t v17 = *((unsigned int *)v6 + 7);
  LOBYTE(v19[0]) = *((unsigned char *)v6 + 24);
  a5(v19, a2, a3, __dst, v21, v15, v16, v6[2], LOBYTE(v19[0]) | (unint64_t)(v17 << 32));
  return outlined init with take of CGRect?((uint64_t)v19, a6);
}

uint64_t specialized implicit closure #2 in implicit closure #1 in LazyStack<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, uint64_t a9, char a10)
{
  specialized Axis.Set.init(_:)(a10);
  if (Axis.Set.contains(_:)())
  {
    v28.origin.double x = a5;
    v28.origin.CGFloat y = a6;
    v28.size.CGFloat width = a7;
    v28.size.CGFloat height = a8;
    double v26 = a4;
    CGFloat v18 = CGRectGetWidth(v28) * 0.5 + a5;
    v29.origin.double x = a5;
    v29.origin.CGFloat y = a6;
    v29.size.CGFloat width = a7;
    v29.size.CGFloat height = a8;
    v19.n128_f64[0] = CGRectGetHeight(v29) * 0.5 + a6;
    v20.n128_f64[0] = v18;
    v21.n128_f64[0] = a1;
    v22.n128_f64[0] = a2;
    v23.n128_f64[0] = a3;
    v24.n128_f64[0] = v26;
    return MEMORY[0x1F4101AC8](v20, v19, v21, v22, v23, v24);
  }
  else
  {
    return MEMORY[0x1F4101AD0](a5, a6, a7, a8, a1, a2, a3, a4);
  }
}

{
  CGFloat v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  double v26;
  uint64_t vars8;
  CGRect v28;
  CGRect v29;

  specialized Axis.Set.init(_:)(a10);
  if (Axis.Set.contains(_:)())
  {
    v28.origin.double x = a5;
    v28.origin.CGFloat y = a6;
    v28.size.CGFloat width = a7;
    v28.size.CGFloat height = a8;
    double v26 = a4;
    CGFloat v18 = CGRectGetWidth(v28) * 0.5 + a5;
    v29.origin.double x = a5;
    v29.origin.CGFloat y = a6;
    v29.size.CGFloat width = a7;
    v29.size.CGFloat height = a8;
    v19.n128_f64[0] = CGRectGetHeight(v29) * 0.5 + a6;
    v20.n128_f64[0] = v18;
    v21.n128_f64[0] = a1;
    v22.n128_f64[0] = a2;
    v23.n128_f64[0] = a3;
    v24.n128_f64[0] = v26;
    return MEMORY[0x1F4101AC8](v20, v19, v21, v22, v23, v24);
  }
  else
  {
    return MEMORY[0x1F4101AD0](a5, a6, a7, a8, a1, a2, a3, a4);
  }
}

uint64_t specialized LazyStack<>.log(_:)(uint64_t a1, uint64_t a2, unint64_t a3, double a4, double a5, double a6, double a7)
{
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v19 = __swift_project_value_buffer(v14, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v19, v14);
    double v33 = 0.0;
    double v34 = -2.68156159e154;
    _StringGuts.grow(_:)(25);
    uint64_t v37 = *(void *)&v33;
    double v38 = v34;
    v20._object = (void *)0x800000018832F0C0;
    v20._countAndFlagsBits = 0xD000000000000011;
    String.append(_:)(v20);
    double v33 = *(double *)&a1;
    v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 544434464;
    v22._object = (void *)0xE400000000000000;
    String.append(_:)(v22);
    double v33 = a4;
    double v34 = a5;
    double v35 = a6;
    double v36 = a7;
    type metadata accessor for CGRect(0);
    _print_unlocked<A, B>(_:_:)();
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    String.append(_:)(v23);
    uint64_t v25 = v37;
    unint64_t v24 = *(void *)&v38;
    swift_bridgeObjectRetain();
    double v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v32 = v25;
      uint64_t v29 = v28;
      *(double *)&uint64_t v30 = COERCE_DOUBLE(swift_slowAlloc());
      double v33 = *(double *)&v30;
      *(_DWORD *)uint64_t v29 = 136315394;
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v24, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v26, v27, "%s: %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v30, -1, -1);
      MEMORY[0x18C119C60](v29, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  return result;
}

uint64_t specialized LazyStack<>.log(_:)(uint64_t a1)
{
  return specialized LazyStack<>.log(_:)(a1, 0x69724748797A614CLL);
}

{
  return specialized LazyStack<>.log(_:)(a1, 0x69724756797A614CLL);
}

{
  return specialized LazyStack<>.log(_:)(a1, 0x69724748797A614CLL, 0xEF74756F79614C64);
}

{
  return specialized LazyStack<>.log(_:)(a1, 0x69724756797A614CLL, 0xEF74756F79614C64);
}

{
  return specialized LazyStack<>.log(_:)(a1, 0xD000000000000010, 0x8000000188328C80);
}

{
  return specialized LazyStack<>.log(_:)(a1, 0xD000000000000010, 0x8000000188328BB0);
}

uint64_t specialized LazyStack<>.log(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v9 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    uint64_t v25 = 0;
    unint64_t v26 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v10._object = (void *)0x800000018832F0A0;
    v10._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v10);
    uint64_t v11 = *(void *)(a1 + 104);
    if (*(void *)(v11 + 16))
    {
      uint64_t v12 = *(void *)(a1 + 112);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      EstimationCache.average.getter(v11, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v13._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    String.append(_:)(v14);
    uint64_t v16 = v25;
    unint64_t v15 = v26;
    swift_bridgeObjectRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v23 = v16;
      uint64_t v20 = v19;
      uint64_t v21 = v5;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v25 = v22;
      *(_DWORD *)uint64_t v20 = 136315394;
      uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, 0xEF74756F79614C64, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v24 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v15, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v17, v18, "%s: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v22, -1, -1);
      MEMORY[0x18C119C60](v20, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v7, v4);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
  }
  return result;
}

{
  return specialized LazyStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3123, 0x69724748797A614CLL, 0xEF74756F79614C64);
}

{
  return specialized LazyStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3223, 0x69724748797A614CLL, 0xEF74756F79614C64);
}

{
  return specialized LazyStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3123, 0x69724756797A614CLL, 0xEF74756F79614C64);
}

{
  return specialized LazyStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3223, 0x69724756797A614CLL, 0xEF74756F79614C64);
}

{
  return specialized LazyStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3123, 0xD000000000000010, 0x8000000188328C80);
}

{
  return specialized LazyStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3223, 0xD000000000000010, 0x8000000188328C80);
}

{
  return specialized LazyStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3123, 0xD000000000000010, 0x8000000188328BB0);
}

{
  return specialized LazyStack<>.log(_:)(a1, a2, (void *)0xEC000000203B3223, 0xD000000000000010, 0x8000000188328BB0);
}

uint64_t specialized LazyStack<>.log(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v10 = __swift_project_value_buffer(v5, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v10, v5);
    uint64_t v23 = 0;
    unint64_t v24 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    v11._countAndFlagsBits = 0x74616854657A6973;
    v11._object = (void *)0xED00002873746946;
    String.append(_:)(v11);
    v12._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0x72657A203E2D2029;
    v13._object = (void *)0xE90000000000006FLL;
    String.append(_:)(v13);
    uint64_t v15 = v23;
    unint64_t v14 = v24;
    swift_bridgeObjectRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v21 = v15;
      uint64_t v19 = v18;
      uint64_t v20 = swift_slowAlloc();
      uint64_t v23 = v20;
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v14, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v16, v17, "%s: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v20, -1, -1);
      MEMORY[0x18C119C60](v19, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v10 = __swift_project_value_buffer(v5, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v10, v5);
    uint64_t v23 = 0;
    unint64_t v24 = 0xE000000000000000;
    v11._countAndFlagsBits = 0x74616C736E617274;
    v11._object = (void *)0xED00002079622065;
    String.append(_:)(v11);
    v12._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    String.append(_:)(v13);
    uint64_t v15 = v23;
    unint64_t v14 = v24;
    swift_bridgeObjectRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v21 = v15;
      uint64_t v19 = v18;
      uint64_t v20 = swift_slowAlloc();
      uint64_t v23 = v20;
      *(_DWORD *)uint64_t v19 = 136315394;
      uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v14, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v16, v17, "%s: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v20, -1, -1);
      MEMORY[0x18C119C60](v19, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return result;
}

uint64_t specialized LazyStack<>.log(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v11 = __swift_project_value_buffer(v6, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
    uint64_t v26 = 0;
    unint64_t v27 = 0xE000000000000000;
    _StringGuts.grow(_:)(22);
    v12._countAndFlagsBits = 0x74616854657A6973;
    v12._object = (void *)0xED00002873746946;
    String.append(_:)(v12);
    v13._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0x203E2D2029;
    v14._object = (void *)0xE500000000000000;
    String.append(_:)(v14);
    v15._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    String.append(_:)(v16);
    uint64_t v18 = v26;
    unint64_t v17 = v27;
    swift_bridgeObjectRetain();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v24 = v18;
      uint64_t v22 = v21;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v26 = v23;
      *(_DWORD *)uint64_t v22 = 136315394;
      uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v17, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v19, v20, "%s: %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v23, -1, -1);
      MEMORY[0x18C119C60](v22, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return result;
}

uint64_t specialized LazyStack<>.log(_:)()
{
  return specialized LazyStack<>.log(_:)(0x69724748797A614CLL, 0xEF74756F79614C64);
}

{
  return specialized LazyStack<>.log(_:)(0x69724756797A614CLL, 0xEF74756F79614C64);
}

{
  return specialized LazyStack<>.log(_:)(0xD000000000000010, 0x8000000188328C80);
}

{
  return specialized LazyStack<>.log(_:)(0xD000000000000010, 0x8000000188328BB0);
}

uint64_t specialized LazyStack<>.log(_:)(double *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  Swift::String v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    uint64_t v36 = a3;
    uint64_t v37 = a2;
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v15 = __swift_project_value_buffer(v10, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v15, v10);
    uint64_t v38 = v11;
    uint64_t v42 = 0;
    unint64_t v43 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    v16._countAndFlagsBits = 0x28646563616C70;
    v16._object = (void *)0xE700000000000000;
    String.append(_:)(v16);
    double v40 = a5;
    double v41 = a4;
    v39._countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v17._countAndFlagsBits = 3026478;
    v17._object = (void *)0xE300000000000000;
    String.append(_:)(v17);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 0x203E2D2029;
    v18._object = (void *)0xE500000000000000;
    String.append(_:)(v18);
    double v19 = a1[5];
    double v40 = a1[6];
    double v41 = v19;
    v39._countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v20._countAndFlagsBits = 3943982;
    v20._object = (void *)0xE300000000000000;
    String.append(_:)(v20);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 8236;
    v21._object = (void *)0xE200000000000000;
    String.append(_:)(v21);
    double v22 = a1[7];
    double v40 = a1[8];
    double v41 = v22;
    v39._countAndFlagsBits = 0;
    v39._object = (void *)0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v23._countAndFlagsBits = 3026478;
    v23._object = (void *)0xE300000000000000;
    String.append(_:)(v23);
    _print_unlocked<A, B>(_:_:)();
    String.append(_:)(v39);
    swift_bridgeObjectRelease();
    v24._countAndFlagsBits = 0x696C61766E69202CLL;
    v24._object = (void *)0xEB00000000203A64;
    String.append(_:)(v24);
    if (*(unsigned char *)(v37 + 40)) {
      uint64_t v25 = 1702195828;
    }
    else {
      uint64_t v25 = 0x65736C6166;
    }
    if (*(unsigned char *)(v37 + 40)) {
      unint64_t v26 = 0xE400000000000000;
    }
    else {
      unint64_t v26 = 0xE500000000000000;
    }
    unint64_t v27 = v26;
    String.append(_:)(*(Swift::String *)&v25);
    swift_bridgeObjectRelease();
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    String.append(_:)(v28);
    uint64_t v30 = v42;
    unint64_t v29 = v43;
    swift_bridgeObjectRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v42 = v34;
      *(_DWORD *)uint64_t v33 = 136315394;
      v39._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, 0xEF74756F79614C64, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain();
      v39._countAndFlagsBits = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v31, v32, "%s: %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v34, -1, -1);
      MEMORY[0x18C119C60](v33, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v13, v10);
  }
  return result;
}

uint64_t specialized LazyStack<>.log(_:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v13 = __swift_project_value_buffer(v8, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
    uint64_t v29 = 0;
    unint64_t v30 = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v14._countAndFlagsBits = 0x2064696C61766E69;
    v14._object = a3;
    String.append(_:)(v14);
    v15._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._countAndFlagsBits = 544437792;
    v16._object = (void *)0xE400000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 0;
    v18._object = (void *)0xE000000000000000;
    String.append(_:)(v18);
    uint64_t v19 = v29;
    unint64_t v20 = v30;
    swift_bridgeObjectRetain();
    Swift::String v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      unint64_t v25 = a5;
      uint64_t v26 = v24;
      uint64_t v29 = v24;
      *(_DWORD *)uint64_t v23 = 136315394;
      uint64_t v27 = v19;
      uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, v25, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v20, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v21, v22, "%s: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v26, -1, -1);
      MEMORY[0x18C119C60](v23, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return result;
}

uint64_t specialized LazyStack<>.log(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging();
  uint64_t result = static UserDefaultKeyedFeature.isEnabled.getter();
  if (result)
  {
    if (one-time initialization token for lazyStackLog != -1) {
      swift_once();
    }
    uint64_t v9 = __swift_project_value_buffer(v4, (uint64_t)static Log.lazyStackLog);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
    uint64_t v24 = 0;
    unint64_t v25 = 0xE000000000000000;
    _StringGuts.grow(_:)(20);
    v10._countAndFlagsBits = 0x2064696C61766E69;
    v10._object = (void *)0xEC000000203B3323;
    String.append(_:)(v10);
    v11._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v11);
    swift_bridgeObjectRelease();
    v12._countAndFlagsBits = 544437792;
    v12._object = (void *)0xE400000000000000;
    String.append(_:)(v12);
    v13._countAndFlagsBits = Double.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    String.append(_:)(v14);
    uint64_t v16 = v24;
    unint64_t v15 = v25;
    swift_bridgeObjectRetain();
    Swift::String v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v22 = v16;
      uint64_t v20 = v19;
      uint64_t v21 = swift_slowAlloc();
      uint64_t v24 = v21;
      *(_DWORD *)uint64_t v20 = 136315394;
      uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v15, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1872C6000, v17, v18, "%s: %s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v21, -1, -1);
      MEMORY[0x18C119C60](v20, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t outlined destroy of _LazyLayout_Subview?(uint64_t a1)
{
  type metadata accessor for _ContiguousArrayStorage<_LazyLayout_Subview>(0, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for _ContiguousArrayStorage<(source: IndexPath, destination: IndexPath)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (Int, Int)()
{
  if (!lazy cache variable for type metadata for (Int, Int))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Int, Int));
    }
  }
}

uint64_t sub_187A26ED0()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in LazyStack<>.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:subviews:cache:)(double a1, double a2, double a3, double a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  return specialized implicit closure #2 in implicit closure #1 in LazyStack<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)(a1, a2, a3, a4, a5, a6, a7, a8, v8 + 16, 0);
}

{
  uint64_t v8;

  return specialized implicit closure #2 in implicit closure #1 in LazyStack<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)(a1, a2, a3, a4, a5, a6, a7, a8, v8 + 16, 1);
}

{
  uint64_t v8;

  return specialized implicit closure #2 in implicit closure #1 in LazyStack<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)(a1, a2, a3, a4, a5, a6, a7, a8, v8 + 16, 1);
}

{
  uint64_t v8;

  return specialized implicit closure #2 in implicit closure #1 in LazyStack<>.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:subviews:cache:)(a1, a2, a3, a4, a5, a6, a7, a8, v8 + 16, 0);
}

uint64_t sub_187A26F48()
{
  return swift_deallocObject();
}

uint64_t sub_187A26F78()
{
  return swift_deallocObject();
}

uint64_t sub_187A26F90()
{
  return swift_deallocObject();
}

uint64_t outlined init with take of MinorProperties<LazyHGridLayout>?(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  type metadata accessor for MinorProperties<LazyHStackLayout>?(0, a3, a4, a5, a6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

void type metadata accessor for StackPlacement<LazyHGridLayout>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_187A2709C()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for AccessibilityLinkElement()
{
  unint64_t result = lazy cache variable for type metadata for AccessibilityLinkElement;
  if (!lazy cache variable for type metadata for AccessibilityLinkElement)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AccessibilityLinkElement);
  }
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<_LazyLayout_Subview>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for MinorProperties(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    unint64_t v10 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v10 = *v11;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v10 + v6 + 8) & ~v6, ((unint64_t)v11 + v6 + 8) & ~v6, AssociatedTypeWitness);
  }
  return a1;
}

void *initializeWithCopy for MinorProperties(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

void *assignWithCopy for MinorProperties(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

void *initializeWithTake for MinorProperties(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

void *assignWithTake for MinorProperties(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for MinorProperties(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (!a2) {
    return 0;
  }
  if (a2 <= v6) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v7 + 16) & ~v7) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v6)
      {
        Swift::String v13 = *(uint64_t (**)(unint64_t))(v5 + 48);
        return v13(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v7 + 8) & ~v7);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v6 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for MinorProperties(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 16) & ~v8) + *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v11 = ~v7 + a2;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v9)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        return;
      default:
        return;
    }
  }
  switch(v10)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187A2793CLL);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v15 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
        v15((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & ~v8, a2);
      }
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for PlacementProperties(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = ((v6 + 16) & ~v6) + *(void *)(v5 + 64);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    unsigned int v11 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v12 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v11 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v11 + v6 + 8) & ~v6, ((unint64_t)v12 + v6 + 8) & ~v6, AssociatedTypeWitness);
    unint64_t v13 = ((unint64_t)a1 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v14 = ((unint64_t)a2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)unint64_t v13 = *(_OWORD *)v14;
    *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
    *(unsigned char *)(v13 + 17) = *(unsigned char *)(v14 + 17);
    unint64_t v15 = (void *)((v13 + 25) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = (void *)((v14 + 25) & 0xFFFFFFFFFFFFFFF8);
    *unint64_t v15 = *v16;
    *(void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  }
  return a1;
}

void *initializeWithCopy for PlacementProperties(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v4 = *v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 16))(((unint64_t)v4 + v9 + 8) & ~v9, ((unint64_t)v5 + v9 + 8) & ~v9, AssociatedTypeWitness);
  uint64_t v10 = ((v9 + 16) & ~v9) + *(void *)(v8 + 48) + 7;
  unint64_t v11 = ((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  *(unsigned char *)(v11 + 17) = *(unsigned char *)(v12 + 17);
  unint64_t v13 = (void *)((v11 + 25) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)((v12 + 25) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithCopy for PlacementProperties(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v4 = *v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = v7 + 24;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)v4 + v9 + 8) & ~v9, ((unint64_t)v5 + v9 + 8) & ~v9, AssociatedTypeWitness);
  uint64_t v10 = ((v9 + 16) & ~v9) + *(void *)(v8 + 40) + 7;
  unint64_t v11 = ((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  *(unsigned char *)(v11 + 17) = *(unsigned char *)(v12 + 17);
  unint64_t v13 = (void *)((v11 + 25) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)((v12 + 25) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *initializeWithTake for PlacementProperties(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v4 = *v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = v7 + 32;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v4 + v9 + 8) & ~v9, ((unint64_t)v5 + v9 + 8) & ~v9, AssociatedTypeWitness);
  uint64_t v10 = ((v9 + 16) & ~v9) + *(void *)(v8 + 32) + 7;
  unint64_t v11 = ((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  *(unsigned char *)(v11 + 17) = *(unsigned char *)(v12 + 17);
  unint64_t v13 = (void *)((v11 + 25) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)((v12 + 25) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for PlacementProperties(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v4 = *v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(((unint64_t)v4 + v9 + 8) & ~v9, ((unint64_t)v5 + v9 + 8) & ~v9, AssociatedTypeWitness);
  uint64_t v10 = ((v9 + 16) & ~v9) + *(void *)(v8 + 24) + 7;
  unint64_t v11 = ((unint64_t)a1 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)a2 + v10) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = *(void *)(v12 + 8);
  *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
  *(unsigned char *)(v11 + 17) = *(unsigned char *)(v12 + 17);
  unint64_t v13 = (void *)((v11 + 25) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (void *)((v12 + 25) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v13 = *v14;
  *(void *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlacementProperties(int *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  unsigned int v7 = *(_DWORD *)(v5 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v5 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v5 + 80);
  if (!a2) {
    return 0;
  }
  uint64_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  if (v8 < a2)
  {
    unint64_t v11 = ((((((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
    uint64_t v12 = v11 & 0xFFFFFFF8;
    if ((v11 & 0xFFFFFFF8) != 0) {
      unsigned int v13 = 2;
    }
    else {
      unsigned int v13 = a2 - v8 + 1;
    }
    if (v13 >= 0x10000) {
      unsigned int v14 = 4;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v13 < 0x100) {
      unsigned int v14 = 1;
    }
    if (v13 >= 2) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    switch(v15)
    {
      case 1:
        int v16 = *((unsigned __int8 *)a1 + v11);
        if (!v16) {
          break;
        }
        goto LABEL_21;
      case 2:
        int v16 = *(unsigned __int16 *)((char *)a1 + v11);
        if (v16) {
          goto LABEL_21;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187A2815CLL);
      case 4:
        int v16 = *(int *)((char *)a1 + v11);
        if (!v16) {
          break;
        }
LABEL_21:
        int v17 = v16 - 1;
        if (v12)
        {
          int v17 = 0;
          int v18 = *a1;
        }
        else
        {
          int v18 = 0;
        }
        int v22 = v8 + (v18 | v17);
        return (v22 + 1);
      default:
        break;
    }
  }
  if (v7 >= 0xFE)
  {
    uint64_t v19 = *(uint64_t (**)(unint64_t))(v6 + 48);
    return v19(((((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9);
  }
  unsigned int v21 = *(unsigned __int8 *)((((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
  if (v21 < 2) {
    return 0;
  }
  int v22 = (v21 + 2147483646) & 0x7FFFFFFF;
  return (v22 + 1);
}

void storeEnumTagSinglePayload for PlacementProperties(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  if (v7 <= 0xFE) {
    unsigned int v9 = 254;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v6 + 84);
  }
  size_t v10 = ((v8 + 16) & ~v8) + *(void *)(v6 + 64);
  unint64_t v11 = ((((((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v9;
    if (a2 <= v9)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_53;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if (v7 < 0xFE)
            {
              *(unsigned char *)(((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8) + 16) = a2 + 1;
            }
            else if (v7 >= a2)
            {
              unsigned int v21 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
              v21((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & ~v8, a2);
            }
            else
            {
              if (v10 <= 3) {
                int v18 = ~(-1 << (8 * v10));
              }
              else {
                int v18 = -1;
              }
              if (v10)
              {
                int v19 = v18 & (~v7 + a2);
                if (v10 <= 3) {
                  int v20 = v10;
                }
                else {
                  int v20 = 4;
                }
                bzero(a1, v10);
                switch(v20)
                {
                  case 2:
                    *(_WORD *)a1 = v19;
                    break;
                  case 3:
                    *(_WORD *)a1 = v19;
                    a1[2] = BYTE2(v19);
                    break;
                  case 4:
                    *(_DWORD *)a1 = v19;
                    break;
                  default:
                    *a1 = v19;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    if (((((((v10 + 7) & 0xFFFFFFF8) + 25) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v12 = a3 - v9 + 1;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v9;
    if (a2 <= v9) {
      goto LABEL_17;
    }
  }
  if (((((((v10 + 7) & 0xFFFFFFF8) + 25) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    int v16 = v15;
  }
  else {
    int v16 = 1;
  }
  if (((((((v10 + 7) & 0xFFFFFFF8) + 25) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v9 + a2;
    bzero(a1, ((((((v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v11] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v16;
      break;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x187A28430);
    case 4:
      *(_DWORD *)&a1[v11] = v16;
      break;
    default:
      return;
  }
}

void *type metadata accessor for EnableLazyStackLogging()
{
  return &unk_1ED47DC88;
}

void *initializeBufferWithCopyOfBuffer for StackPlacement(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  unsigned int v12 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  BOOL v13 = v12 <= 7 && ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) == 0;
  if (v13
    && (uint64_t v14 = v10 | 7,
        uint64_t v11 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64),
        ((((((((((((((((((((((v10 + 16) & ~v10) + v11 + 7 + (((v10 | 7) + v7 + 1) & ~(v10 | 7))) & 0xFFFFFFFFFFFFFFF8)
                        + 19) & 0xFFFFFFFFFFFFFFF8)
                      + 43) & 0xFFFFFFFFFFFFFFF8)
                    + 31) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 102) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 47) & 0xFFFFFFFFFFFFFFF8)
      + 16 <= 0x18))
  {
    uint64_t v64 = AssociatedTypeWitness;
    uint64_t v15 = v5;
    uint64_t v16 = ((v10 + 16) & ~v10) + v11 + 7;
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v15);
    double v65 = a1;
    *((unsigned char *)a1 + v7) = *((unsigned char *)a2 + v7);
    int v17 = (char *)a2 + v7 + v14;
    int v18 = (void *)(((unint64_t)a1 + v7 + v14 + 1) & ~v14);
    int v19 = (void *)((unint64_t)(v17 + 1) & ~v14);
    *int v18 = *v19;
    int v20 = (void *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v21 = (void *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v20 = *v21;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)v20 + v10 + 8) & ~v10, ((unint64_t)v21 + v10 + 8) & ~v10, v64);
    int v22 = (_OWORD *)(((unint64_t)v18 + v16) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v23 = (_OWORD *)(((unint64_t)v19 + v16) & 0xFFFFFFFFFFFFFFF8);
    *int v22 = *v23;
    uint64_t v24 = (_DWORD *)(((unint64_t)v23 + 19) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v25 = (unint64_t)v24 + 43;
    uint64_t v26 = (_DWORD *)(((unint64_t)v22 + 19) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v26 = *v24;
    unint64_t v27 = ((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v28 = ((unint64_t)v24 + 11) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v29 = *(void *)v28;
    *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
    *(void *)unint64_t v27 = v29;
    unint64_t v30 = ((unint64_t)v26 + 27) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v31 = ((unint64_t)v24 + 27) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v30 = *(void *)v31;
    *(unsigned char *)(v30 + 8) = *(unsigned char *)(v31 + 8);
    os_log_type_t v32 = (void *)(((unint64_t)v26 + 43) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v33 = (v25 & 0xFFFFFFFFFFFFFFF8) + 15;
    unint64_t v34 = (v25 & 0xFFFFFFFFFFFFFFF8) + 31;
    void *v32 = *(void *)(v25 & 0xFFFFFFFFFFFFFFF8);
    unint64_t v35 = ((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8;
    v33 &= 0xFFFFFFFFFFFFFFF8;
    uint64_t v36 = *(void *)v33;
    *(unsigned char *)(v35 + 8) = *(unsigned char *)(v33 + 8);
    *(void *)unint64_t v35 = v36;
    v34 &= 0xFFFFFFFFFFFFFFF8;
    uint64_t v37 = (void *)(((unint64_t)v32 + 31) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v37 = *(void *)v34;
    uint64_t v38 = (void *)((v34 + 15) & 0xFFFFFFFFFFFFFFF8);
    Swift::String v39 = (void *)(((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8);
    *Swift::String v39 = *v38;
    unint64_t v40 = ((unint64_t)v39 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v41 = ((unint64_t)v38 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v42 = *(void *)v41;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v42 < 0xFFFFFFFF)
    {
      long long v49 = *(_OWORD *)(v41 + 16);
      *(_OWORD *)unint64_t v40 = *(_OWORD *)v41;
      *(_OWORD *)(v40 + 16) = v49;
      long long v50 = *(_OWORD *)(v41 + 32);
      long long v51 = *(_OWORD *)(v41 + 48);
      long long v52 = *(_OWORD *)(v41 + 64);
      *(_OWORD *)(v40 + 79) = *(_OWORD *)(v41 + 79);
      *(_OWORD *)(v40 + 48) = v51;
      *(_OWORD *)(v40 + 64) = v52;
      *(_OWORD *)(v40 + 32) = v50;
    }
    else
    {
      *(void *)unint64_t v40 = v42;
      *(_DWORD *)(v40 + 8) = *(_DWORD *)(v41 + 8);
      uint64_t v43 = *(void *)(v41 + 40);
      *(void *)(v40 + 40) = v43;
      *(void *)(v40 + 48) = *(void *)(v41 + 48);
      char v44 = **(void (***)(unint64_t, unint64_t, uint64_t))(v43 - 8);
      swift_retain();
      v44(v40 + 16, v41 + 16, v43);
      *(_DWORD *)(v40 + 56) = *(_DWORD *)(v41 + 56);
      *(_DWORD *)(v40 + 60) = *(_DWORD *)(v41 + 60);
      *(void *)(v40 + 64) = *(void *)(v41 + 64);
      *(void *)(v40 + 72) = *(void *)(v41 + 72);
      int v45 = *(_DWORD *)(v41 + 80);
      *(unsigned char *)(v40 + 84) = *(unsigned char *)(v41 + 84);
      *(_DWORD *)(v40 + 80) = v45;
      int v46 = *(_DWORD *)(v41 + 91);
      *(_DWORD *)(v40 + 88) = *(_DWORD *)(v41 + 88);
      *(_DWORD *)(v40 + 91) = v46;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    char v53 = (void *)((v40 + 102) & 0xFFFFFFFFFFFFFFF8);
    double v54 = (void *)((v41 + 102) & 0xFFFFFFFFFFFFFFF8);
    *char v53 = *v54;
    double v55 = (_OWORD *)(((unint64_t)v53 + 15) & 0xFFFFFFFFFFFFFFF8);
    double v56 = (_OWORD *)(((unint64_t)v54 + 15) & 0xFFFFFFFFFFFFFFF8);
    *double v55 = *v56;
    double v57 = (_OWORD *)(((unint64_t)v55 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v58 = (_OWORD *)(((unint64_t)v56 + 23) & 0xFFFFFFFFFFFFFFF8);
    *double v57 = *v58;
    unint64_t v59 = ((unint64_t)v57 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v60 = ((unint64_t)v58 + 23) & 0xFFFFFFFFFFFFFFF8;
    *(_OWORD *)unint64_t v59 = *(_OWORD *)v60;
    *(unsigned char *)(v59 + 16) = *(unsigned char *)(v60 + 16);
    uint64_t v61 = (void *)(((unint64_t)v57 + 47) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v62 = (void *)(((unint64_t)v58 + 47) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v61 = *v62;
    v61[1] = v62[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v65;
  }
  else
  {
    uint64_t v47 = *a2;
    *a1 = *a2;
    uint64_t v48 = v47 + (((v12 | 7) + 16) & ~(unint64_t)(v12 | 7));
    swift_retain();
  }
  return (void *)v48;
}

uint64_t assignWithCopy for StackPlacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = (unsigned char *)(v6 + a2);
  *(unsigned char *)(v6 + a1) = *v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 24);
  uint64_t v12 = v10 + 24;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = (v13 | 7) + 1;
  uint64_t v15 = (void *)((v14 + v7) & ~(v13 | 7));
  uint64_t v16 = (void *)((unint64_t)&v8[v14] & ~(v13 | 7));
  *uint64_t v15 = *v16;
  int v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v17 = *v18;
  v11(((unint64_t)v17 + v13 + 8) & ~v13, ((unint64_t)v18 + v13 + 8) & ~v13, AssociatedTypeWitness);
  uint64_t v19 = *(void *)(v12 + 40) + ((v13 + 16) & ~v13) + 7;
  int v20 = (void *)(((unint64_t)v15 + v19) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v21 = (void *)(((unint64_t)v16 + v19) & 0xFFFFFFFFFFFFFFF8);
  *int v20 = *v21;
  v20[1] = v21[1];
  int v22 = (_DWORD *)(((unint64_t)v20 + 19) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (_DWORD *)(((unint64_t)v21 + 19) & 0xFFFFFFFFFFFFFFF8);
  *int v22 = *v23;
  unint64_t v24 = ((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFFFF8;
  char v26 = *(unsigned char *)(v25 + 8);
  *(void *)unint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = v26;
  unint64_t v27 = ((unint64_t)v22 + 27) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = ((unint64_t)v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  unint64_t v29 = ((unint64_t)v22 + 43) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = ((unint64_t)v23 + 43) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = v30 + 15;
  uint64_t v32 = *(void *)v30;
  v30 += 31;
  unint64_t v33 = v29 + 15;
  *(void *)unint64_t v29 = v32;
  v29 += 31;
  v33 &= 0xFFFFFFFFFFFFFFF8;
  v31 &= 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v24) = *(unsigned char *)(v31 + 8);
  *(void *)unint64_t v33 = *(void *)v31;
  *(unsigned char *)(v33 + 8) = v24;
  unint64_t v34 = (v30 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v29 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v30 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v35 = (v29 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v35 &= 0xFFFFFFFFFFFFFFF8;
  v34 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v35 = *(void *)v34;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v38 = *(void *)v37;
  if (*(void *)v36 < 0xFFFFFFFFuLL)
  {
    if (v38 >= 0xFFFFFFFF)
    {
      *(void *)unint64_t v36 = v38;
      *(_DWORD *)(v36 + 8) = *(_DWORD *)(v37 + 8);
      uint64_t v41 = *(void *)(v37 + 40);
      *(void *)(v36 + 40) = v41;
      *(void *)(v36 + 48) = *(void *)(v37 + 48);
      unint64_t v42 = **(void (***)(unint64_t, unint64_t, uint64_t))(v41 - 8);
      swift_retain();
      v42(v36 + 16, v37 + 16, v41);
      *(_DWORD *)(v36 + 56) = *(_DWORD *)(v37 + 56);
      *(_DWORD *)(v36 + 60) = *(_DWORD *)(v37 + 60);
      *(void *)(v36 + 64) = *(void *)(v37 + 64);
      *(void *)(v36 + 72) = *(void *)(v37 + 72);
      int v43 = *(_DWORD *)(v37 + 80);
      *(unsigned char *)(v36 + 84) = *(unsigned char *)(v37 + 84);
      *(_DWORD *)(v36 + 80) = v43;
      int v44 = *(_DWORD *)(v37 + 91);
      *(_DWORD *)(v36 + 88) = *(_DWORD *)(v37 + 88);
      *(_DWORD *)(v36 + 91) = v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    long long v45 = *(_OWORD *)(v37 + 16);
    *(_OWORD *)unint64_t v36 = *(_OWORD *)v37;
    *(_OWORD *)(v36 + 16) = v45;
    long long v46 = *(_OWORD *)(v37 + 32);
    long long v47 = *(_OWORD *)(v37 + 48);
    long long v48 = *(_OWORD *)(v37 + 64);
    *(_OWORD *)(v36 + 79) = *(_OWORD *)(v37 + 79);
    *(_OWORD *)(v36 + 48) = v47;
    *(_OWORD *)(v36 + 64) = v48;
    *(_OWORD *)(v36 + 32) = v46;
    goto LABEL_8;
  }
  if (v38 < 0xFFFFFFFF)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v36 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(void *)unint64_t v36 = v38;
  swift_retain();
  swift_release();
  *(_DWORD *)(v36 + 8) = *(_DWORD *)(v37 + 8);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(v36 + 16), (uint64_t *)(v37 + 16));
  *(_DWORD *)(v36 + 56) = *(_DWORD *)(v37 + 56);
  *(_DWORD *)(v36 + 60) = *(_DWORD *)(v37 + 60);
  *(void *)(v36 + 64) = *(void *)(v37 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v36 + 72) = *(void *)(v37 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v39 = *(_DWORD *)(v37 + 80);
  *(unsigned char *)(v36 + 84) = *(unsigned char *)(v37 + 84);
  *(_DWORD *)(v36 + 80) = v39;
  int v40 = *(_DWORD *)(v37 + 88);
  *(unsigned char *)(v36 + 92) = *(unsigned char *)(v37 + 92);
  *(_DWORD *)(v36 + 88) = v40;
  *(unsigned char *)(v36 + 93) = *(unsigned char *)(v37 + 93);
  *(unsigned char *)(v36 + 94) = *(unsigned char *)(v37 + 94);
LABEL_8:
  long long v49 = (void *)((v36 + 102) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v50 = (v37 + 102) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v51 = *(void *)v50;
  v50 += 15;
  *long long v49 = v51;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v52 = (void *)(((unint64_t)v49 + 15) & 0xFFFFFFFFFFFFFFF8);
  *long long v52 = *(void *)(v50 & 0xFFFFFFFFFFFFFFF8);
  v52[1] = *(void *)((v50 & 0xFFFFFFFFFFFFFFF8) + 8);
  char v53 = (void *)(((unint64_t)v52 + 23) & 0xFFFFFFFFFFFFFFF8);
  double v54 = (void *)(((v50 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  *char v53 = *v54;
  v53[1] = v54[1];
  unint64_t v55 = ((unint64_t)v53 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v56 = ((unint64_t)v54 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v55 = *(void *)v56;
  *(void *)(v55 + 8) = *(void *)(v56 + 8);
  *(unsigned char *)(v55 + 16) = *(unsigned char *)(v56 + 16);
  double v57 = (void *)(((unint64_t)v53 + 47) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v58 = (void *)(((unint64_t)v54 + 47) & 0xFFFFFFFFFFFFFFF8);
  *double v57 = *v58;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v57[1] = v58[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for StackPlacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = (unsigned char *)(v6 + a2);
  *(unsigned char *)(v6 + a1) = *v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 32);
  uint64_t v12 = v10 + 32;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = (v13 | 7) + 1;
  uint64_t v15 = (void *)((v14 + v7) & ~(v13 | 7));
  uint64_t v16 = (void *)((unint64_t)&v8[v14] & ~(v13 | 7));
  *uint64_t v15 = *v16;
  int v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v17 = *v18;
  v11(((unint64_t)v17 + v13 + 8) & ~v13, ((unint64_t)v18 + v13 + 8) & ~v13, AssociatedTypeWitness);
  uint64_t v19 = *(void *)(v12 + 32) + ((v13 + 16) & ~v13) + 7;
  int v20 = (_OWORD *)(((unint64_t)v15 + v19) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v21 = (_OWORD *)(((unint64_t)v16 + v19) & 0xFFFFFFFFFFFFFFF8);
  *int v20 = *v21;
  int v22 = (_DWORD *)(((unint64_t)v20 + 19) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (_DWORD *)(((unint64_t)v21 + 19) & 0xFFFFFFFFFFFFFFF8);
  *int v22 = *v23;
  unint64_t v24 = ((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  *(void *)unint64_t v24 = v26;
  unint64_t v27 = ((unint64_t)v22 + 27) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = ((unint64_t)v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  unint64_t v29 = (void *)(((unint64_t)v22 + 43) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v30 = (void *)(((unint64_t)v23 + 43) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v29 = *v30;
  unint64_t v31 = ((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v33 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = *(unsigned char *)(v32 + 8);
  *(void *)unint64_t v31 = v33;
  unint64_t v34 = (void *)(((unint64_t)v29 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v35 = (void *)(((unint64_t)v30 + 31) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v34 = *v35;
  unint64_t v36 = (void *)(((unint64_t)v34 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v37 = (void *)(((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v36 = *v37;
  unint64_t v38 = (_OWORD *)(((unint64_t)v36 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v39 = (_OWORD *)(((unint64_t)v37 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v40 = v39[2];
  long long v41 = v39[3];
  long long v42 = v39[4];
  *(_OWORD *)((char *)v38 + 79) = *(_OWORD *)((char *)v39 + 79);
  v38[3] = v41;
  v38[4] = v42;
  void v38[2] = v40;
  long long v43 = v39[1];
  _OWORD *v38 = *v39;
  v38[1] = v43;
  int v44 = (void *)(((unint64_t)v38 + 102) & 0xFFFFFFFFFFFFFFF8);
  long long v45 = (void *)(((unint64_t)v39 + 102) & 0xFFFFFFFFFFFFFFF8);
  *int v44 = *v45;
  long long v46 = (_OWORD *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v47 = (_OWORD *)(((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8);
  *long long v46 = *v47;
  long long v48 = (_OWORD *)(((unint64_t)v46 + 23) & 0xFFFFFFFFFFFFFFF8);
  long long v49 = (_OWORD *)(((unint64_t)v47 + 23) & 0xFFFFFFFFFFFFFFF8);
  *long long v48 = *v49;
  unint64_t v50 = ((unint64_t)v48 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v51 = ((unint64_t)v49 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(_OWORD *)unint64_t v50 = *(_OWORD *)v51;
  *(unsigned char *)(v50 + 16) = *(unsigned char *)(v51 + 16);
  *(_OWORD *)(((unint64_t)v48 + 47) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v49 + 47) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for StackPlacement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = (unsigned char *)(v6 + a2);
  *(unsigned char *)(v6 + a1) = *v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v11 = *(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 40);
  uint64_t v12 = v10 + 40;
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = (v13 | 7) + 1;
  uint64_t v15 = (void *)((v14 + v7) & ~(v13 | 7));
  uint64_t v16 = (void *)((unint64_t)&v8[v14] & ~(v13 | 7));
  *uint64_t v15 = *v16;
  int v17 = (void *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
  int v18 = (void *)(((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v17 = *v18;
  v11(((unint64_t)v17 + v13 + 8) & ~v13, ((unint64_t)v18 + v13 + 8) & ~v13, AssociatedTypeWitness);
  uint64_t v19 = *(void *)(v12 + 24) + ((v13 + 16) & ~v13) + 7;
  int v20 = (void *)(((unint64_t)v15 + v19) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v21 = (void *)(((unint64_t)v16 + v19) & 0xFFFFFFFFFFFFFFF8);
  *int v20 = *v21;
  v20[1] = v21[1];
  int v22 = (_DWORD *)(((unint64_t)v20 + 19) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v23 = (_DWORD *)(((unint64_t)v21 + 19) & 0xFFFFFFFFFFFFFFF8);
  *int v22 = *v23;
  unint64_t v24 = ((unint64_t)v22 + 11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = ((unint64_t)v23 + 11) & 0xFFFFFFFFFFFFFFF8;
  char v26 = *(unsigned char *)(v25 + 8);
  *(void *)unint64_t v24 = *(void *)v25;
  *(unsigned char *)(v24 + 8) = v26;
  unint64_t v27 = ((unint64_t)v22 + 27) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = ((unint64_t)v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v27 = *(void *)v28;
  *(unsigned char *)(v27 + 8) = *(unsigned char *)(v28 + 8);
  unint64_t v29 = ((unint64_t)v22 + 43) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v30 = (void *)(((unint64_t)v23 + 43) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v31 = v29 + 15;
  *(void *)unint64_t v29 = *v30;
  v29 += 31;
  v31 &= 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = ((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  LOBYTE(v24) = *(unsigned char *)(v32 + 8);
  *(void *)unint64_t v31 = *(void *)v32;
  *(unsigned char *)(v31 + 8) = v24;
  uint64_t v33 = (void *)(((unint64_t)v30 + 31) & 0xFFFFFFFFFFFFFFF8);
  *(void *)(v29 & 0xFFFFFFFFFFFFFFF8) = *v33;
  unint64_t v34 = (v29 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_bridgeObjectRelease();
  v34 &= 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (void *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v34 = *v35;
  swift_bridgeObjectRelease();
  unint64_t v36 = (v34 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v37 = ((unint64_t)v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v36 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)v37 < 0xFFFFFFFFuLL)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1(v36 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    long long v42 = *(_OWORD *)(v37 + 16);
    *(_OWORD *)unint64_t v36 = *(_OWORD *)v37;
    *(_OWORD *)(v36 + 16) = v42;
    long long v43 = *(_OWORD *)(v37 + 32);
    long long v44 = *(_OWORD *)(v37 + 48);
    long long v45 = *(_OWORD *)(v37 + 64);
    *(_OWORD *)(v36 + 79) = *(_OWORD *)(v37 + 79);
    *(_OWORD *)(v36 + 48) = v44;
    *(_OWORD *)(v36 + 64) = v45;
    *(_OWORD *)(v36 + 32) = v43;
    goto LABEL_6;
  }
  *(void *)unint64_t v36 = *(void *)v37;
  swift_release();
  *(_DWORD *)(v36 + 8) = *(_DWORD *)(v37 + 8);
  __swift_destroy_boxed_opaque_existential_1(v36 + 16);
  long long v38 = *(_OWORD *)(v37 + 16);
  long long v39 = *(_OWORD *)(v37 + 32);
  *(void *)(v36 + 48) = *(void *)(v37 + 48);
  *(_OWORD *)(v36 + 16) = v38;
  *(_OWORD *)(v36 + 32) = v39;
  *(_DWORD *)(v36 + 56) = *(_DWORD *)(v37 + 56);
  *(_DWORD *)(v36 + 60) = *(_DWORD *)(v37 + 60);
  *(void *)(v36 + 64) = *(void *)(v37 + 64);
  swift_bridgeObjectRelease();
  *(void *)(v36 + 72) = *(void *)(v37 + 72);
  swift_bridgeObjectRelease();
  int v40 = *(_DWORD *)(v37 + 80);
  *(unsigned char *)(v36 + 84) = *(unsigned char *)(v37 + 84);
  *(_DWORD *)(v36 + 80) = v40;
  int v41 = *(_DWORD *)(v37 + 88);
  *(unsigned char *)(v36 + 92) = *(unsigned char *)(v37 + 92);
  *(_DWORD *)(v36 + 88) = v41;
  *(unsigned char *)(v36 + 93) = *(unsigned char *)(v37 + 93);
  *(unsigned char *)(v36 + 94) = *(unsigned char *)(v37 + 94);
LABEL_6:
  long long v46 = (void *)((v36 + 102) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v47 = (v37 + 102) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v48 = *(void *)v47;
  v47 += 15;
  *long long v46 = v48;
  swift_bridgeObjectRelease();
  long long v49 = (void *)(((unint64_t)v46 + 15) & 0xFFFFFFFFFFFFFFF8);
  *long long v49 = *(void *)(v47 & 0xFFFFFFFFFFFFFFF8);
  v49[1] = *(void *)((v47 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v50 = (void *)(((unint64_t)v49 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v51 = (void *)(((v47 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v50 = *v51;
  v50[1] = v51[1];
  unint64_t v52 = ((unint64_t)v50 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v53 = ((unint64_t)v51 + 23) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v52 = *(void *)v53;
  *(void *)(v52 + 8) = *(void *)(v53 + 8);
  *(unsigned char *)(v52 + 16) = *(unsigned char *)(v53 + 16);
  double v54 = (void *)(((unint64_t)v50 + 47) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v55 = (void *)(((unint64_t)v51 + 47) & 0xFFFFFFFFFFFFFFF8);
  *double v54 = *v55;
  swift_bridgeObjectRelease();
  v54[1] = v55[1];
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeWithTake for _LazyStack_Cache(void *a1, unsigned __int16 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = ((v8 + 16) & ~v8) + *(void *)(v5 + 64);
  if (!v7)
  {
    if (!*((unsigned char *)a2 + v10)) {
      goto LABEL_22;
    }
    int v11 = (*((unsigned __int8 *)a2 + v10) - 1) << (8 * v10);
    if (v10 > 3) {
      int v11 = 0;
    }
    if (v10)
    {
      int v12 = v10 <= 3 ? ((v8 + 16) & ~v8) + *(_DWORD *)(v5 + 64) : 4;
      switch(v12)
      {
        case 2:
          int v13 = *a2;
          break;
        case 3:
          int v13 = *a2 | (*((unsigned __int8 *)a2 + 2) << 16);
          break;
        case 4:
          int v13 = *(_DWORD *)a2;
          break;
        default:
          int v13 = *(unsigned __int8 *)a2;
          break;
      }
    }
    else
    {
      int v13 = 0;
    }
    if ((v13 | v11) == 0xFFFFFFFF) {
      goto LABEL_22;
    }
LABEL_18:
    if (v7) {
      size_t v14 = v10;
    }
    else {
      size_t v14 = v10 + 1;
    }
    memcpy(a1, a2, v14);
    goto LABEL_24;
  }
  if ((*(unsigned int (**)(unint64_t, void, uint64_t))(v5 + 48))(((((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8) + v8 + 8) & v9, *(unsigned int *)(v5 + 84), AssociatedTypeWitness))
  {
    goto LABEL_18;
  }
LABEL_22:
  *a1 = *(void *)a2;
  uint64_t v15 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v15 = *v16;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v15 + v8 + 8) & v9, ((unint64_t)v16 + v8 + 8) & v9, AssociatedTypeWitness);
  if (!v7) {
    *((unsigned char *)a1 + v10) = 0;
  }
LABEL_24:
  if (v7) {
    uint64_t v17 = v10;
  }
  else {
    uint64_t v17 = v10 + 1;
  }
  int v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  unint64_t v20 = (unint64_t)(v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (unint64_t)(v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)v21;
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  *(void *)unint64_t v20 = v22;
  uint64_t v23 = (_OWORD *)((unint64_t)(v18 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v24 = (_OWORD *)((unint64_t)(v19 + 23) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v23 = *v24;
  unint64_t v25 = (_OWORD *)(((unint64_t)v23 + 23) & 0xFFFFFFFFFFFFFFF8);
  char v26 = (_OWORD *)(((unint64_t)v24 + 23) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v25 = *v26;
  unint64_t v27 = (_OWORD *)(((unint64_t)v25 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v28 = (_OWORD *)(((unint64_t)v26 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v27 = *v28;
  unint64_t v29 = (void *)(((unint64_t)v27 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v30 = (void *)(((unint64_t)v28 + 23) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v29 = *v30;
  unint64_t v31 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v32 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v31 = *v32;
  *(_OWORD *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void storeEnumTagSinglePayload for _LazyStack_Cache(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8) {
    unsigned int v11 = v8 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  if (v11 <= 0x7FFFFFFF) {
    unsigned int v12 = 0x7FFFFFFF;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = (v9 + 16) & ~v9;
  uint64_t v10 = *(void *)(v7 + 64);
  size_t v14 = v13 + v10;
  if (v8) {
    size_t v15 = v13 + v10;
  }
  else {
    size_t v15 = v14 + 1;
  }
  size_t v16 = ((((((((((((v15 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v12 < a3)
  {
    if (((((((((((((v15 + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v17 = a3 - v12 + 1;
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v6 = v18;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v12)
  {
    if (((((((((((((v15 + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) == 0xFFFFFFF0)
      int v19 = a2 - v12;
    else {
      int v19 = 1;
    }
    if (((((((((((((v15 + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8)
         + 15) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v20 = ~v12 + a2;
      bzero(a1, v16);
      *(_DWORD *)a1 = v20;
    }
    switch(v6)
    {
      case 1:
        a1[v16] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v16] = v19;
        return;
      case 3:
        goto LABEL_70;
      case 4:
        *(_DWORD *)&a1[v16] = v19;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 2:
      *(_WORD *)&a1[v16] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 3:
LABEL_70:
      __break(1u);
      JUMPOUT(0x187A29AD4);
    case 4:
      *(_DWORD *)&a1[v16] = 0;
      goto LABEL_36;
    default:
LABEL_36:
      if (a2)
      {
LABEL_37:
        if (v11 < 0x7FFFFFFF)
        {
          unint64_t v24 = (void *)((((((((((((unint64_t)&a1[v15 + 23] & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
                                + 23) & 0xFFFFFFFFFFFFFFF8)
                              + 23) & 0xFFFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            *unint64_t v24 = a2 ^ 0x80000000;
            v24[1] = 0;
          }
          else
          {
            *unint64_t v24 = a2 - 1;
          }
        }
        else if (v11 >= a2)
        {
          if (a2 + 1 <= v8)
          {
            if (a2 != -1)
            {
              unint64_t v27 = *(void (**)(unint64_t, void))(v7 + 56);
              v27((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9, a2 + 1);
            }
          }
          else
          {
            if (v14 <= 3) {
              int v25 = ~(-1 << (8 * v14));
            }
            else {
              int v25 = -1;
            }
            if (v14)
            {
              int v22 = v25 & (a2 - v8);
              if (v14 <= 3) {
                int v26 = v14;
              }
              else {
                int v26 = 4;
              }
              bzero(a1, v14);
              switch(v26)
              {
                case 2:
LABEL_66:
                  *(_WORD *)a1 = v22;
                  break;
                case 3:
LABEL_67:
                  *(_WORD *)a1 = v22;
                  a1[2] = BYTE2(v22);
                  break;
                case 4:
LABEL_68:
                  *(_DWORD *)a1 = v22;
                  break;
                default:
LABEL_60:
                  *a1 = v22;
                  break;
              }
            }
          }
        }
        else
        {
          if (v15 <= 3) {
            int v21 = ~(-1 << (8 * v15));
          }
          else {
            int v21 = -1;
          }
          if (v15)
          {
            int v22 = v21 & (~v11 + a2);
            if (v15 <= 3) {
              int v23 = v15;
            }
            else {
              int v23 = 4;
            }
            bzero(a1, v15);
            switch(v23)
            {
              case 2:
                goto LABEL_66;
              case 3:
                goto LABEL_67;
              case 4:
                goto LABEL_68;
              default:
                goto LABEL_60;
            }
          }
        }
      }
      return;
  }
}

void *assignWithCopy for EstimationCache(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for EstimationCache()
{
  return &unk_1ED47DDC0;
}

void *type metadata accessor for StoppingCondition()
{
  return &unk_1ED47DE58;
}

void specialized EnumeratedSequence.Iterator.next()(uint64_t a1@<X8>)
{
  unint64_t v2 = v1[1];
  unint64_t v3 = *(void *)(*v1 + 16);
  if (v2 == v3)
  {
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    return;
  }
  if (v2 >= v3)
  {
    __break(1u);
  }
  else
  {
    uint64_t v4 = *v1 + 72 * v2;
    uint64_t v5 = *(void *)(v4 + 32);
    uint64_t v6 = *(void *)(v4 + 40);
    char v7 = *(unsigned char *)(v4 + 48);
    uint64_t v8 = *(void *)(v4 + 56);
    char v9 = *(unsigned char *)(v4 + 64);
    long long v10 = *(_OWORD *)(v4 + 72);
    long long v11 = *(_OWORD *)(v4 + 88);
    v1[1] = v2 + 1;
    uint64_t v12 = v1[2];
    if (!__OFADD__(v12, 1))
    {
      v1[2] = v12 + 1;
      *(void *)a1 = v12;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v6;
      *(unsigned char *)(a1 + 24) = v7;
      *(void *)(a1 + 32) = v8;
      *(unsigned char *)(a1 + 40) = v9;
      *(_OWORD *)(a1 + 48) = v10;
      *(_OWORD *)(a1 + 64) = v11;
      swift_retain();
      return;
    }
  }
  __break(1u);
}

uint64_t LazyLayoutViewCache.item(for:)()
{
  uint64_t result = swift_beginAccess();
  int64_t v2 = 0;
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v4 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(v3 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v2 + 1;
    if (__OFADD__(v2, 1)) {
      break;
    }
    if (v12 >= v8) {
      return 0;
    }
    unint64_t v13 = *(void *)(v4 + 8 * v12);
    ++v2;
    if (!v13)
    {
      int64_t v2 = v12 + 1;
      if (v12 + 1 >= v8) {
        return 0;
      }
      unint64_t v13 = *(void *)(v4 + 8 * v2);
      if (!v13)
      {
        int64_t v2 = v12 + 2;
        if (v12 + 2 >= v8) {
          return 0;
        }
        unint64_t v13 = *(void *)(v4 + 8 * v2);
        if (!v13)
        {
          int64_t v14 = v12 + 3;
          if (v14 >= v8) {
            return 0;
          }
          unint64_t v13 = *(void *)(v4 + 8 * v14);
          if (!v13)
          {
            while (1)
            {
              int64_t v2 = v14 + 1;
              if (__OFADD__(v14, 1)) {
                goto LABEL_25;
              }
              if (v2 >= v8) {
                return 0;
              }
              unint64_t v13 = *(void *)(v4 + 8 * v2);
              ++v14;
              if (v13) {
                goto LABEL_20;
              }
            }
          }
          int64_t v2 = v14;
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v2 << 6);
LABEL_5:
    uint64_t v11 = *(void *)(*(void *)(v3 + 56) + 8 * v10);
    uint64_t result = AGSubgraphIsAncestor();
    if (result)
    {
      swift_retain();
      return v11;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

SwiftUI::_LazyLayout_PrefetchResult __swiftcall LazyLayoutViewCache.prefetchOutputs()()
{
  uint64_t v1 = v0;
  SwiftUI::_LazyLayout_PrefetchResult v25 = SwiftUI__LazyLayout_PrefetchResult_none;
  swift_beginAccess();
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  int64_t v9 = 0;
  if (!v6) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v10 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v14)) + (v9 << 6))
  {
    uint64_t v12 = *(void *)(*(void *)(v2 + 56) + 8 * i);
    if (*(_DWORD *)(v12 + 196) != *(_DWORD *)(v1 + 212))
    {
      if (v6) {
        goto LABEL_4;
      }
      goto LABEL_7;
    }
    ++v8;
    swift_retain();
    uint64_t v16 = _ViewOutputs.layoutComputer.getter();
    if ((v16 & 0x100000000) == 0)
    {
      char v17 = specialized prefetchOutput #1 (_:label:) in LazyLayoutViewCache.prefetchOutputs()(v16, 0x6F4374756F79616CLL, 0xEE0072657475706DLL, v12, (char *)&v25);
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0) {
        break;
      }
    }
    uint64_t v18 = _ViewOutputs.subscript.getter();
    if ((v18 & 0x100000000) == 0)
    {
      char v19 = specialized prefetchOutput #1 (_:label:) in LazyLayoutViewCache.prefetchOutputs()(v18, 0x4C79616C70736964, 0xEB00000000747369, v12, (char *)&v25);
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0) {
        break;
      }
    }
    swift_release();
    if (v6) {
      goto LABEL_4;
    }
LABEL_7:
    int64_t v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v13 >= v7) {
      goto LABEL_28;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    ++v9;
    if (!v14)
    {
      int64_t v9 = v13 + 1;
      if (v13 + 1 >= v7) {
        goto LABEL_28;
      }
      unint64_t v14 = *(void *)(v3 + 8 * v9);
      if (!v14)
      {
        int64_t v9 = v13 + 2;
        if (v13 + 2 >= v7) {
          goto LABEL_28;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v9);
        if (!v14)
        {
          int64_t v15 = v13 + 3;
          if (v15 >= v7) {
            goto LABEL_28;
          }
          unint64_t v14 = *(void *)(v3 + 8 * v15);
          if (!v14)
          {
            while (1)
            {
              int64_t v9 = v15 + 1;
              if (__OFADD__(v15, 1)) {
                break;
              }
              if (v9 >= v7) {
                goto LABEL_28;
              }
              unint64_t v14 = *(void *)(v3 + 8 * v9);
              ++v15;
              if (v14) {
                goto LABEL_20;
              }
            }
LABEL_35:
            __break(1u);
LABEL_36:
            swift_once();
            goto LABEL_30;
          }
          int64_t v9 = v15;
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v14 - 1) & v14;
  }
  swift_release();
LABEL_28:
  swift_release();
  lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
  if ((static UserDefaultKeyedFeature.isEnabled.getter() & 1) == 0) {
    goto LABEL_33;
  }
  if (one-time initialization token for log != -1) {
    goto LABEL_36;
  }
LABEL_30:
  uint64_t v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Log.LazyLayoutPrefetch.log);
  int v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    int v23 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)int v23 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1872C6000, v21, v22, "Finish prefetchOutputs for %ld items", v23, 0xCu);
    MEMORY[0x18C119C60](v23, -1, -1);
  }

LABEL_33:
  swift_beginAccess();
  return v25;
}

void LazyLayoutCacheItem.beginPrefetching(at:)(uint64_t a1, char a2)
{
  if (*(unsigned char *)(v2 + 208) == 1)
  {
    uint64_t v4 = (long long *)(v2 + 264);
    if (*(unsigned char *)(v2 + 280))
    {
      _ProposedSize.init(_:)();
      _Placement.init(proposedSize:at:)();
      long long v7 = v13;
      long long v8 = v14;
    }
    else
    {
      long long v7 = *(_OWORD *)(v2 + 248);
      long long v8 = *v4;
    }
    LOBYTE(v9) = a2 & 1;
    _ProposedSize.init(_:)();
    *(void *)(v2 + 216) = v9;
    *(void *)(v2 + 224) = v10;
    *(void *)(v2 + 232) = v11;
    *(void *)(v2 + 240) = v12;
    *(_OWORD *)(v2 + 248) = v7;
    long long *v4 = v8;
    *(unsigned char *)(v2 + 280) = 0;
    swift_beginAccess();
    uint64_t v5 = swift_unownedRetainStrong();
    if (v5)
    {
      int v6 = *(_DWORD *)(v5 + 212);
      swift_release();
      *(_DWORD *)(v2 + 196) = v6;
    }
    else
    {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall LazyLayoutCacheItem.animationWasAdded()()
{
  ++*(_DWORD *)(v0 + 180);
}

Swift::Void __swiftcall LazyLayoutCacheItem.animationWasRemoved()()
{
  int v1 = *(_DWORD *)(v0 + 180) - 1;
  *(_DWORD *)(v0 + 180) = v1;
  if (!v1)
  {
    swift_beginAccess();
    uint64_t v2 = *(void *)(v0 + 16);
    swift_unownedRetainStrong();
    if (v2)
    {
      if (swift_weakLoadStrong())
      {
        uint64_t v3 = swift_allocObject();
        *(void *)(v3 + 16) = v2;
        *(void *)(v3 + 24) = v0;
        swift_retain();
        swift_retain();
        GraphHost.continueTransaction(_:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
  }
}

void LazyLayoutCacheItem.__allocating_init()()
{
}

uint64_t LazyLayoutCacheItem.__ivar_destroyer()
{
  swift_unownedRelease();

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t LazyLayoutCacheItem.deinit()
{
  swift_unownedRelease();

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t LazyLayoutCacheItem.__deallocating_deinit()
{
  LazyLayoutCacheItem.deinit();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LazyLayoutCacheSection(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 5);
  int v3 = *(unsigned __int8 *)(a1 + 6);
  if (*(unsigned char *)(a1 + 4))
  {
    uint64_t result = 0;
    if (!*(unsigned char *)(a2 + 4)) {
      return result;
    }
    goto LABEL_7;
  }
  if (*(unsigned char *)(a2 + 4)) {
    return 0;
  }
  uint64_t result = 0;
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
  {
LABEL_7:
    if (((v2 ^ *(unsigned __int8 *)(a2 + 5)) & 1) == 0) {
      return v3 ^ *(unsigned __int8 *)(a2 + 6) ^ 1u;
    }
  }
  return result;
}

uint64_t closure #2 in LazyLayoutViewCache.init<A>(layout:list:inputs:)()
{
  swift_beginAccess();
  unint64_t v0 = _ViewOutputs.layoutComputer.getter();
  swift_endAccess();
  type metadata accessor for LazySubviewPlacements();
  return LazySubviewPlacements.$layoutComputer.setter(v0 | ((HIDWORD(v0) & 1) << 32));
}

uint64_t LazyLayoutViewCache.deinit()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v12 >= v6) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v6) {
        goto LABEL_21;
      }
      unint64_t v13 = *(void *)(v2 + 8 * v8);
      if (!v13)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v6) {
          goto LABEL_21;
        }
        unint64_t v13 = *(void *)(v2 + 8 * v8);
        if (!v13) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = *(void *)(*(void *)(v1 + 56) + 8 * v10);
    swift_beginAccess();
    swift_retain();
    swift_unownedRelease();
    *(void *)(v11 + 16) = 0;
    swift_endAccess();
    uint64_t result = swift_release();
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v6)
  {
LABEL_21:
    swift_release();
    swift_weakDestroy();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v0;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_21;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
  return result;
}

uint64_t LazyLayoutViewCache.__deallocating_deinit()
{
  LazyLayoutViewCache.deinit();

  return swift_deallocClassInstance();
}

Swift::Void __swiftcall LazyLayoutViewCache.invalidate()()
{
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v7 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v7 << 6);
      goto LABEL_22;
    }
    int64_t v10 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v10 >= v6) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v10);
    ++v7;
    if (!v11)
    {
      int64_t v7 = v10 + 1;
      if (v10 + 1 >= v6) {
        goto LABEL_27;
      }
      unint64_t v11 = *(void *)(v2 + 8 * v7);
      if (!v11)
      {
        int64_t v7 = v10 + 2;
        if (v10 + 2 >= v6) {
          goto LABEL_27;
        }
        unint64_t v11 = *(void *)(v2 + 8 * v7);
        if (!v11) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v7 << 6);
LABEL_22:
    uint64_t v13 = *(void *)(*(void *)(v1 + 56) + 8 * v9);
    int v14 = *(unsigned __int8 *)(v13 + 298);
    if (v14 != 2 && (v14 & 1) == 0)
    {
      swift_retain();
    }
    else
    {
      uint64_t v16 = *(void **)(v13 + 24);
      swift_retain();
      id v17 = v16;
      AGSubgraphRef.willInvalidate(isInserted:)(0);

      AGSubgraphInvalidate();
    }
    swift_beginAccess();
    swift_unownedRelease();
    *(void *)(v13 + 16) = 0;
    swift_endAccess();
    swift_release();
  }
  int64_t v12 = v10 + 3;
  if (v12 >= v6)
  {
LABEL_27:
    swift_release();
    return;
  }
  unint64_t v11 = *(void *)(v2 + 8 * v12);
  if (v11)
  {
    int64_t v7 = v12;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v7 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v7 >= v6) {
      goto LABEL_27;
    }
    unint64_t v11 = *(void *)(v2 + 8 * v7);
    ++v12;
    if (v11) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
}

Swift::Void __swiftcall LazyLayoutViewCache.reset()()
{
  swift_beginAccess();
  *(void *)(v0 + 184) = 0;
  *(_DWORD *)(v0 + 192) = 1;
  *(_DWORD *)(v0 + 168) = 1;
  *(void *)(v0 + 200) = 0;
  swift_bridgeObjectRelease();
  *(void *)(v0 + 208) = 0x100000001;
  *(_WORD *)(v0 + 225) = 0;
  *(unsigned char *)(v0 + 227) = 1;
  *(unsigned char *)(v0 + 216) = 0;
  swift_beginAccess();
  int64_t v1 = 0;
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = v2 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(v2 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v1 << 6);
      goto LABEL_5;
    }
    int64_t v11 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
      goto LABEL_23;
    }
    if (v11 >= v7) {
      return;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v1;
    if (!v12)
    {
      int64_t v1 = v11 + 1;
      if (v11 + 1 >= v7) {
        return;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v1);
      if (!v12)
      {
        int64_t v1 = v11 + 2;
        if (v11 + 2 >= v7) {
          return;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v1);
        if (!v12) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v9 = __clz(__rbit64(v12)) + (v1 << 6);
LABEL_5:
    uint64_t v10 = *(void *)(*(void *)(v2 + 56) + 8 * v9);
    *(_OWORD *)(v10 + 212) = 0uLL;
    v10 += 212;
    *(_OWORD *)(v10 - 20) = 0uLL;
    *(_OWORD *)(v10 - 36) = 0uLL;
    *(unsigned char *)(v10 - 4) = 1;
    *(_OWORD *)(v10 + 16) = 0uLL;
    *(_OWORD *)(v10 + 32) = 0uLL;
    *(_OWORD *)(v10 + 48) = 0uLL;
    *(_DWORD *)(v10 + 64) = 0;
    *(unsigned char *)(v10 + 68) = 1;
    *(_WORD *)(v10 + 84) = 0;
    *(unsigned char *)(v10 + 87) = 0;
  }
  int64_t v13 = v11 + 3;
  if (v13 >= v7) {
    return;
  }
  unint64_t v12 = *(void *)(v3 + 8 * v13);
  if (v12)
  {
    int64_t v1 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v1 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v1 >= v7) {
      return;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v1);
    ++v13;
    if (v12) {
      goto LABEL_20;
    }
  }
LABEL_23:
  __break(1u);
}

double specialized implicit closure #1 in noteFailedReuse #1 (_:) in LazyLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(unsigned char *)(a1 + 56) = 16;
  return result;
}

double implicit closure #4 in LazyLayoutViewCache.item(data:)@<D0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *(void *)a2 = v3;
  double result = 0.0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(unsigned char *)(a2 + 56) = 16;
  return result;
}

__n128 implicit closure #10 in LazyLayoutViewCache.item(data:)@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, __n128 *a3@<X8>)
{
  unint64_t v6 = a1[18];
  v12.n128_u64[0] = a1[17];
  v12.n128_u64[1] = v6;
  swift_retain();
  _ViewList_ID.canonicalID.getter();
  unint64_t v7 = v11[0];
  unint64_t v8 = v11[1];
  unint64_t v9 = a1[19];
  swift_release();
  outlined init with copy of _LazyLayout_Subview.Data(a2, (uint64_t)v11);
  swift_bridgeObjectRetain();
  _ViewList_ID.canonicalID.getter();
  outlined destroy of _LazyLayout_Subview.Data((uint64_t)v11);
  swift_bridgeObjectRelease();
  __n128 result = v12;
  a3->n128_u64[0] = v7;
  a3->n128_u64[1] = v8;
  a3[1].n128_u64[0] = v9;
  a3[1].n128_u64[1] = 0;
  a3[2] = result;
  a3[3].n128_u64[0] = 0;
  a3[3].n128_u8[8] = 113;
  return result;
}

double implicit closure #5 in LazyLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  swift_retain();
  _ViewList_ID.canonicalID.getter();
  uint64_t v6 = *(void *)(a1 + 152);
  swift_release();
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v9;
  *(void *)(a3 + 16) = v6;
  double result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(unsigned char *)(a3 + 56) = a2;
  return result;
}

void static LazyLayoutViewCache.viewType.getter()
{
}

void LazyLayoutViewCache.copyCacheState<A>(type:)()
{
}

void LazyLayoutViewCache.withMutableCacheState<A, B>(type:_:)()
{
}

void LazyLayoutViewCache.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:)()
{
}

void LazyLayoutViewCache.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:)()
{
}

void LazyLayoutViewCache.logReuse(_:)()
{
}

uint64_t _LazyLayoutViewCache.__allocating_init(layout:list:inputs:)(int a1, int a2, uint64_t *a3)
{
  uint64_t v6 = swift_allocObject();
  _LazyLayoutViewCache.init(layout:list:inputs:)(a1, a2, a3);
  return v6;
}

uint64_t _LazyLayoutViewCache.__ivar_destroyer()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 344);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(v1, AssociatedTypeWitness);
}

uint64_t _LazyLayoutViewCache.deinit()
{
  LazyLayoutViewCache.deinit();
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 344);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8))(v1, AssociatedTypeWitness);
  return v0;
}

uint64_t _LazyLayoutViewCache.__deallocating_deinit()
{
  _LazyLayoutViewCache.deinit();

  return swift_deallocClassInstance();
}

uint64_t static _LazyLayoutViewCache.viewType.getter()
{
  return *(void *)(v0 + 320);
}

Swift::Void __swiftcall _LazyLayoutViewCache.reset()()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(*(void *)v0 + 328);
  uint64_t v3 = *(void *)(*(void *)v0 + 320);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  double v6 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v10 - v7;
  (*(void (**)(uint64_t, uint64_t, double))(v2 + 40))(v3, v2, v6);
  uint64_t v9 = v1 + *(void *)(*(void *)v1 + 344);
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v9, v8, AssociatedTypeWitness);
  swift_endAccess();
  LazyLayoutViewCache.reset()();
}

uint64_t _LazyLayoutViewCache.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  return _LazyLayoutViewCache.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:)(a1, a2, a3, a4, a5, (void (*)(char *, uint64_t *, double))partial apply for closure #1 in _LazyLayoutViewCache.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:), a6);
}

uint64_t closure #1 in _LazyLayoutViewCache.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:)(uint64_t a1, const void *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  unsigned int v22 = a8;
  uint64_t v20 = a6;
  uint64_t v21 = a7;
  v18[1] = a1;
  uint64_t v19 = a5;
  uint64_t v10 = *(void *)(*(void *)a3 + 328);
  uint64_t v11 = *(void *)(*(void *)a3 + 320);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  int64_t v15 = (char *)v18 - v14;
  uint64_t v16 = memcpy(v25, a2, sizeof(v25));
  _LazyLayoutViewCache.copyCacheState<A>(type:)((uint64_t)v16, AssociatedTypeWitness);
  LazyLayoutViewCache.subviews(context:)(a4, (uint64_t)v24);
  memcpy(v23, v25, 0x129uLL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void, unsigned char *, unsigned char *, char *, uint64_t, uint64_t))(v10 + 96))(v19, v20, v21, v22, v23, v24, v15, v11, v10);
  outlined destroy of _LazyLayout_Subviews((uint64_t)v24);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, AssociatedTypeWitness);
}

uint64_t closure #1 in _LazyLayoutViewCache.logReuse(_:)(uint64_t a1, void (*a2)(void *__return_ptr))
{
  a2(v11);
  uint64_t v2 = v11[0];
  uint64_t v3 = v11[1];
  uint64_t v4 = v11[2];
  uint64_t v5 = v11[3];
  uint64_t v6 = v11[4];
  uint64_t v7 = v11[5];
  uint64_t v8 = v11[6];
  unsigned __int8 v9 = v12;
  ReuseMessage.log<A>(layout:log:)();
  return outlined consume of ReuseMessage(v2, v3, v4, v5, v6, v7, v8, v9);
}

void ReuseMessage.log<A>(layout:log:)()
{
  unint64_t v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  unsigned int v8 = *(unsigned __int8 *)(v0 + 56);
  switch(v8 >> 4)
  {
    case 1u:
      unint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      _StringGuts.grow(_:)(45);
      swift_bridgeObjectRelease();
      unint64_t v9 = 0xD00000000000002BLL;
      unint64_t v10 = 0x800000018832F4A0;
      goto LABEL_4;
    case 2u:
      unint64_t v14 = HIDWORD(v2);
      unint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(28);
      swift_bridgeObjectRelease();
      unint64_t v15 = 0xD00000000000001ALL;
      uint64_t v16 = "skip reuse (not idle) for ";
      goto LABEL_12;
    case 3u:
      unint64_t v14 = HIDWORD(v2);
      unint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      unint64_t v15 = 0xD000000000000018;
      uint64_t v16 = "skip reuse (placed) for ";
      goto LABEL_12;
    case 4u:
      unint64_t v14 = HIDWORD(v2);
      unint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(32);
      swift_bridgeObjectRelease();
      unint64_t v15 = 0xD00000000000001ELL;
      uint64_t v16 = "skip reuse (incompatible) for ";
      goto LABEL_12;
    case 5u:
      unint64_t v14 = HIDWORD(v2);
      unint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      unint64_t v15 = 0xD000000000000018;
      uint64_t v16 = "skip reuse (failed) for ";
      goto LABEL_12;
    case 6u:
      strcpy((char *)v41, "created item ");
      HIWORD(v41[1]) = -4864;
      unint64_t v37 = v2;
      unint64_t v38 = v1;
      uint64_t v39 = v3;
      char v40 = v4 & 1;
      outlined copy of ReuseMessage(v2, v1, v3, v4, v6, v5, v7, v8);
      goto LABEL_14;
    case 7u:
      swift_retain();
      swift_retain();
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      strcpy((char *)v41, "reused item ");
      BYTE5(v41[1]) = 0;
      HIWORD(v41[1]) = -5120;
      v17._countAndFlagsBits = CacheItemDescription.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 0x20676E69737520;
      v18._object = (void *)0xE700000000000000;
      String.append(_:)(v18);
      unint64_t v37 = v6;
      unint64_t v38 = v5;
      uint64_t v39 = v7;
      char v40 = v8 & 1;
      v19._countAndFlagsBits = CacheItemDescription.description.getter();
      String.append(_:)(v19);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    case 8u:
      unint64_t v14 = HIDWORD(v2);
      unint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(22);
      swift_bridgeObjectRelease();
      unint64_t v15 = 0xD000000000000014;
      uint64_t v16 = "made available item ";
LABEL_12:
      unint64_t v20 = (unint64_t)(v16 - 32) | 0x8000000000000000;
      goto LABEL_13;
    case 9u:
      unint64_t v14 = HIDWORD(v2);
      unint64_t v37 = 0;
      unint64_t v38 = 0xE000000000000000;
      swift_retain();
      _StringGuts.grow(_:)(17);
      swift_bridgeObjectRelease();
      unint64_t v15 = 0x657463656C6C6F63;
      unint64_t v20 = 0xEF206D6574692064;
LABEL_13:
      v41[0] = v15;
      v41[1] = v20;
      unint64_t v37 = __PAIR64__(v14, v2);
      unint64_t v38 = v1;
      uint64_t v39 = v3;
      char v40 = v4 & 1;
LABEL_14:
      v21._countAndFlagsBits = CacheItemDescription.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      outlined consume of ReuseMessage(v2, v1, v3, v4, v6, v5, v7, v8);
LABEL_15:
      uint64_t v13 = v41[0];
      unint64_t v12 = v41[1];
      break;
    default:
      unint64_t v9 = 0x7469206C61746F74;
      unint64_t v10 = 0xEC00000020736D65;
LABEL_4:
      unint64_t v37 = v9;
      unint64_t v38 = v10;
      v41[0] = v2;
      v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      uint64_t v13 = v37;
      unint64_t v12 = v38;
      break;
  }
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t v22 = 0;
    unint64_t v23 = 0xE000000000000000;
  }
  else
  {
    id v24 = (id)AGGraphGetAttributeGraph();
    unint64_t v23 = 0xE000000000000000;
    if (v24)
    {
      SwiftUI::_LazyLayout_PrefetchResult v25 = v24;
      AGGraphGetCounter();
      uint64_t Counter = AGGraphGetCounter();
      _StringGuts.grow(_:)(27);
      swift_bridgeObjectRelease();
      unint64_t v37 = 0x7475626972747461;
      unint64_t v38 = 0xEB000000003D7365;
      v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = 0x617267627573202CLL;
      v28._object = (void *)0xEC0000003D736870;
      String.append(_:)(v28);
      v41[0] = Counter;
      v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v29);

      swift_bridgeObjectRelease();
      uint64_t v22 = 0x7475626972747461;
      unint64_t v23 = 0xEB000000003D7365;
    }
    else
    {
      uint64_t v22 = 0;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v36 = v22;
    uint64_t v32 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    unint64_t v37 = v33;
    *(_DWORD *)uint64_t v32 = 136315650;
    uint64_t v34 = _typeName(_:qualified:)();
    v41[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, (uint64_t *)&v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v32 + 12) = 2080;
    swift_bridgeObjectRetain();
    v41[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, (uint64_t *)&v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v32 + 22) = 2080;
    swift_bridgeObjectRetain();
    v41[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v23, (uint64_t *)&v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1872C6000, v30, v31, "%s: %s %s", (uint8_t *)v32, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v33, -1, -1);
    MEMORY[0x18C119C60](v32, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

void protocol witness for ObservedAttribute.destroy() in conformance UpdateViewCache()
{
  if (*(void *)(v0 + 8)) {
    LazyLayoutViewCache.invalidate()();
  }
  else {
    __break(1u);
  }
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance UpdateViewCache(uint64_t a1)
{
  if (*(void *)(a1 + 8)) {
    LazyLayoutViewCache.invalidate()();
  }
  else {
    __break(1u);
  }
}

uint64_t protocol witness for Rule.value.getter in conformance LazyCollectedPlacements@<X0>(void *a1@<X8>)
{
  type metadata accessor for LazyLayoutViewCache();
  uint64_t v2 = *(void *)AGGraphGetValue();
  swift_beginAccess();
  swift_retain();
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized _NativeDictionary.filter(_:)(v3, v2);
  swift_bridgeObjectRelease();
  *(void *)(v2 + 160) = v4;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  *(void *)(v2 + 200) = 0;
  swift_release();
  swift_bridgeObjectRelease();
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_0(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  *a1 = *(void *)AGGraphGetValue();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Rule.value.getter in conformance LazyViewGeometry()
{
  return LazyViewGeometry.value.getter(*v0, v0[1], v0[2], v0[3]);
}

uint64_t protocol witness for Rule.value.getter in conformance LazyViewPhase@<X0>(unsigned int *a1@<X8>)
{
  return LazyViewPhase.value.getter(a1);
}

uint64_t static LazyPreference.initialValue.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  (*(void (**)(void))(a1 + 16))();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v4(a2, 0, 1, AssociatedTypeWitness);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance LazyPreference<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return static LazyPreference.initialValue.getter(*(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody._updateDefault(_:) in conformance LazyPreference<A>(uint64_t a1, uint64_t a2)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  unsigned int v8 = (char *)v16 - v7;
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v10);
  unint64_t v12 = (char *)v16 - v11;
  static LazyPreference.initialValue.getter(v3, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  uint64_t v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v12, v8, AssociatedTypeWitness);
  MEMORY[0x1F4188790](v14);
  v16[-2] = a2;
  v16[-1] = swift_getWitnessTable();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in static Rule._update(_:attribute:), (uint64_t)&v16[-4], AssociatedTypeWitness, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v15);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for static RemovableAttribute.willRemove(attribute:) in conformance LazyTransaction()
{
  return AGGraphMutateAttribute();
}

uint64_t protocol witness for static RemovableAttribute.didReinsert(attribute:) in conformance LazyTransaction()
{
  return AGGraphMutateAttribute();
}

uint64_t protocol witness for static StatefulRule.initialValue.getter in conformance LazyTransition<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v3(a1, 1, 1, AssociatedTypeWitness);
}

uint64_t CompareTransitionType.visit<A>(_:)(uint64_t result)
{
  if (*(void *)v1) {
    BOOL v2 = *(void *)v1 == result;
  }
  else {
    BOOL v2 = 0;
  }
  char v3 = v2;
  *(unsigned char *)(v1 + 8) = v3;
  return result;
}

Swift::Int Array<A>.sortForDisplayLarge()()
{
  return specialized MutableCollection<>.sort(by:)(v0);
}

uint64_t CacheItemDescription.description.getter()
{
  if (*(unsigned char *)(v0 + 24)) {
    return _ViewList_ID.Canonical.description.getter();
  }
  uint64_t v5 = _ViewList_ID.Canonical.description.getter();
  v2._countAndFlagsBits = 40;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 41;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v5;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LazyLayoutReuseIdleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for LazyLayoutReuseIdleModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LazyLayoutReuseIdleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for LazyLayoutReuseIdleModifier<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance LazyLayoutReuseIdleModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance LazyLayoutReuseIdleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static LazyLayoutReuseIdleModifier._makeInputs(modifier:inputs:)(a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

void View.lazyLayoutReuseIdle<A>(_:)()
{
  type metadata accessor for LazyLayoutReuseIdleModifier();

  JUMPOUT(0x18C113660);
}

uint64_t type metadata accessor for LazyLayoutReuseIdleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ObjC metadata update function for LazyLayoutCacheItem()
{
  return type metadata accessor for LazyLayoutCacheItem();
}

uint64_t dispatch thunk of static LazyLayoutReuseIdleValue.timeToLive.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_187A2C410()
{
  return swift_getWitnessTable();
}

uint64_t initializeWithCopy for LazyLayoutViewCache.LeastRecentlyUsedItems(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for LazyLayoutViewCache.LeastRecentlyUsedItems(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for LazyLayoutViewCache.LeastRecentlyUsedItems(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for LazyLayoutViewCache.LeastRecentlyUsedItems()
{
  return &type metadata for LazyLayoutViewCache.LeastRecentlyUsedItems;
}

unsigned char *storeEnumTagSinglePayload for LazyLayoutCacheItem.ParentingPhase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187A2C64CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LazyLayoutCacheItem.ParentingPhase()
{
  return &type metadata for LazyLayoutCacheItem.ParentingPhase;
}

ValueMetadata *type metadata accessor for LazyLayoutCacheSection()
{
  return &type metadata for LazyLayoutCacheSection;
}

uint64_t getEnumTagSinglePayload for LazyLayoutCacheSection(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 7)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 5);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for LazyLayoutCacheSection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 7) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 7) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 5) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LazyLayoutCacheItem.State()
{
  return &type metadata for LazyLayoutCacheItem.State;
}

_UNKNOWN **base witness table accessor for ViewModifier in LazyLayoutReuseIdleModifier<A>()
{
  return &protocol witness table for LazyLayoutReuseIdleModifier<A>;
}

unint64_t lazy protocol witness table accessor for type LazyLayoutCacheItem.ParentingPhase and conformance LazyLayoutCacheItem.ParentingPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutCacheItem.ParentingPhase and conformance LazyLayoutCacheItem.ParentingPhase;
  if (!lazy protocol witness table cache variable for type LazyLayoutCacheItem.ParentingPhase and conformance LazyLayoutCacheItem.ParentingPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutCacheItem.ParentingPhase and conformance LazyLayoutCacheItem.ParentingPhase);
  }
  return result;
}

uint64_t specialized closure #1 in OSLogArguments.append<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *__return_ptr))
{
  a4(&v7);
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

double partial apply for implicit closure #4 in closure #1 in LazyLayoutViewCache.collect()@<D0>(uint64_t a1@<X8>)
{
  return implicit closure #5 in LazyLayoutViewCache.item(data:)(v1, 144, a1);
}

double partial apply for implicit closure #2 in LazyLayoutViewCache.ensureRemoved(item:)@<D0>(uint64_t a1@<X8>)
{
  return implicit closure #5 in LazyLayoutViewCache.item(data:)(v1, 128, a1);
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__src, char *a2, unint64_t a3, char *__dst)
{
  BOOL v4 = __dst;
  unsigned int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  id v24 = __src;
  unint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[8 * v13];
      uint64_t v22 = v16;
      id v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        Swift::String v17 = (char *)(a3 - 8);
        while (1)
        {
          Swift::String v18 = v17 + 8;
          Swift::String v19 = v6 - 8;
          uint64_t v20 = *((void *)v6 - 1);
          if (*(_DWORD *)(*((void *)v16 - 1) + 184) - *(_DWORD *)(v20 + 184) < 0)
          {
            if (v18 != v6 || v17 >= v6) {
              *(void *)Swift::String v17 = v20;
            }
            id v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_43;
            }
          }
          else
          {
            uint64_t v22 = v16 - 8;
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              *(void *)Swift::String v17 = *((void *)v16 - 1);
            }
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_43;
            }
          }
          v17 -= 8;
          if (v16 <= v4) {
            goto LABEL_43;
          }
        }
      }
      goto LABEL_43;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[8 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_DWORD *)(*(void *)v6 + 184) - *(_DWORD *)(*(void *)v4 + 184) < 0)
        {
          uint64_t v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        else
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          unint64_t v23 = v4;
          uint64_t v15 = v6;
        }
        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        unsigned int v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      id v24 = v7;
    }
LABEL_43:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v24, &v23, &v22);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  uint64_t result;
  char *v32;
  char *v33;
  char *v34;

  BOOL v4 = __dst;
  unsigned int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = (a2 - __src) / 56;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 56;
  uint64_t v34 = __src;
  uint64_t v33 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -55)
    {
      if (__dst != a2 || &a2[56 * v11] <= __dst) {
        memmove(__dst, a2, 56 * v11);
      }
      uint64_t v20 = &v4[56 * v11];
      uint64_t v32 = v20;
      uint64_t v34 = v6;
      if (v7 < v6 && v10 >= 56)
      {
        Swift::String v21 = a3 - 56;
        uint64_t v22 = v6;
        while (1)
        {
          unint64_t v23 = (char *)(v21 + 56);
          id v24 = *((void *)v22 - 7);
          v22 -= 56;
          if (*((void *)v20 - 7) >= v24)
          {
            uint64_t v32 = v20 - 56;
            if (v23 < v20 || v21 >= (unint64_t)v20 || v23 != v20)
            {
              Swift::String v28 = *(_OWORD *)(v20 - 56);
              Swift::String v29 = *(_OWORD *)(v20 - 40);
              unint64_t v30 = *(_OWORD *)(v20 - 24);
              *(void *)(v21 + 48) = *((void *)v20 - 1);
              *(_OWORD *)(v21 + 16) = v29;
              *(_OWORD *)(v21 + 32) = v30;
              *(_OWORD *)Swift::String v21 = v28;
            }
            uint64_t v22 = v6;
            v20 -= 56;
            if (v6 <= v7) {
              goto LABEL_38;
            }
          }
          else
          {
            if (v23 != v6 || v21 >= (unint64_t)v6)
            {
              SwiftUI::_LazyLayout_PrefetchResult v25 = *(_OWORD *)v22;
              int v26 = *((_OWORD *)v22 + 1);
              Swift::String v27 = *((_OWORD *)v22 + 2);
              *(void *)(v21 + 48) = *((void *)v22 + 6);
              *(_OWORD *)(v21 + 16) = v26;
              *(_OWORD *)(v21 + 32) = v27;
              *(_OWORD *)Swift::String v21 = v25;
            }
            uint64_t v34 = v22;
            if (v22 <= v7) {
              goto LABEL_38;
            }
          }
          v21 -= 56;
          unsigned int v6 = v22;
          if (v20 <= v4) {
            goto LABEL_38;
          }
        }
      }
      goto LABEL_38;
    }
  }
  else if (v8 >= -55)
  {
    if (__dst != __src || &__src[56 * v9] <= __dst) {
      memmove(__dst, __src, 56 * v9);
    }
    uint64_t v12 = &v4[56 * v9];
    uint64_t v32 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 56)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4)
          {
            Swift::String v17 = *(_OWORD *)v4;
            Swift::String v18 = *((_OWORD *)v4 + 1);
            Swift::String v19 = *((_OWORD *)v4 + 2);
            *((void *)v7 + 6) = *((void *)v4 + 6);
            *((_OWORD *)v7 + 1) = v18;
            *((_OWORD *)v7 + 2) = v19;
            *(_OWORD *)uint64_t v7 = v17;
          }
          v4 += 56;
          uint64_t v33 = v4;
          uint64_t v13 = v6;
        }
        else
        {
          uint64_t v13 = v6 + 56;
          if (v7 < v6 || v7 >= v13 || v7 != v6)
          {
            uint64_t v14 = *(_OWORD *)v6;
            uint64_t v15 = *((_OWORD *)v6 + 1);
            uint64_t v16 = *((_OWORD *)v6 + 2);
            *((void *)v7 + 6) = *((void *)v6 + 6);
            *((_OWORD *)v7 + 1) = v15;
            *((_OWORD *)v7 + 2) = v16;
            *(_OWORD *)uint64_t v7 = v14;
          }
        }
        v7 += 56;
        if (v4 >= v12) {
          break;
        }
        unsigned int v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      uint64_t v34 = v7;
    }
LABEL_38:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v34, (const void **)&v33, &v32);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *__dst, char *__src, char *a3, char *a4)
{
  BOOL v4 = a4;
  uint64_t v5 = a3;
  unsigned int v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = __src - __dst;
  int64_t v9 = (__src - __dst) / 72;
  uint64_t v10 = a3 - __src;
  uint64_t v11 = (a3 - __src) / 72;
  unint64_t v35 = __dst;
  uint64_t v34 = a4;
  if (v9 < v11)
  {
    if (v8 < -71) {
      goto LABEL_78;
    }
    if (a4 != __dst || &__dst[72 * v9] <= a4) {
      memmove(a4, __dst, 72 * v9);
    }
    uint64_t v12 = &v4[72 * v9];
    uint64_t v33 = v12;
    if (v6 < v5 && v8 >= 72)
    {
      while (1)
      {
        uint64_t v13 = *(void *)v6;
        uint64_t v14 = *(void *)v4;
        double v15 = *(double *)(*(void *)v6 + 168);
        double v16 = *(double *)(*(void *)v4 + 168);
        if (v15 != v16)
        {
          if (v15 < v16) {
            goto LABEL_29;
          }
          goto LABEL_25;
        }
        if (*(unsigned char *)(v13 + 165))
        {
          if ((*(unsigned char *)(v14 + 165) & 1) == 0 && (*(unsigned char *)(v14 + 166) & 1) == 0) {
            goto LABEL_25;
          }
        }
        else
        {
          int v17 = *(unsigned __int8 *)(v13 + 166);
          if (*(unsigned char *)(v14 + 165))
          {
            if ((v17 & 1) == 0) {
              goto LABEL_29;
            }
          }
          else if (v17 != *(unsigned __int8 *)(v14 + 166))
          {
            if ((v17 & 1) == 0) {
              goto LABEL_29;
            }
            goto LABEL_25;
          }
        }
        unsigned int v18 = *(_DWORD *)(v13 + 212);
        unsigned int v19 = *(_DWORD *)(v14 + 212);
        if (v18 == v19)
        {
          if (*(unsigned char *)(v13 + 208)) {
            goto LABEL_76;
          }
          if (*(unsigned char *)(v14 + 208)) {
            goto LABEL_77;
          }
          if (*(void *)(v13 + 200) < *(void *)(v14 + 200))
          {
LABEL_29:
            uint64_t v20 = v6 + 72;
            if (v7 < v6 || v7 >= v20 || v7 != v6) {
              memmove(v7, v6, 0x48uLL);
            }
            goto LABEL_33;
          }
        }
        else if (v18 < v19)
        {
          goto LABEL_29;
        }
LABEL_25:
        if (v7 != v4) {
          memmove(v7, v4, 0x48uLL);
        }
        v4 += 72;
        uint64_t v34 = v4;
        uint64_t v20 = v6;
LABEL_33:
        v7 += 72;
        if (v4 < v12)
        {
          unsigned int v6 = v20;
          if (v20 < v5) {
            continue;
          }
        }
        unint64_t v35 = v7;
        break;
      }
    }
LABEL_73:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v35, &v34, &v33);
    return 1;
  }
  if (v10 < -71) {
    goto LABEL_78;
  }
  if (a4 != __src || &__src[72 * v11] <= a4) {
    memmove(a4, __src, 72 * v11);
  }
  Swift::String v21 = &v4[72 * v11];
  uint64_t v33 = v21;
  unint64_t v35 = v6;
  if (v7 >= v6 || v10 < 72) {
    goto LABEL_73;
  }
  uint64_t v22 = v6;
  while (1)
  {
    uint64_t v23 = *((void *)v21 - 9);
    uint64_t v25 = *((void *)v22 - 9);
    v22 -= 72;
    uint64_t v24 = v25;
    double v26 = *(double *)(v23 + 168);
    double v27 = *(double *)(v25 + 168);
    if (v26 != v27)
    {
      Swift::String v28 = v5 - 72;
      if (v26 < v27) {
        goto LABEL_49;
      }
      goto LABEL_67;
    }
    if (*(unsigned char *)(v23 + 165))
    {
      if ((*(unsigned char *)(v24 + 165) & 1) == 0 && (*(unsigned char *)(v24 + 166) & 1) == 0)
      {
        Swift::String v28 = v5 - 72;
        goto LABEL_67;
      }
    }
    else
    {
      int v29 = *(unsigned __int8 *)(v23 + 166);
      if (*(unsigned char *)(v24 + 165))
      {
        if ((v29 & 1) == 0)
        {
          Swift::String v28 = v5 - 72;
          if (v5 != v6) {
            goto LABEL_51;
          }
LABEL_50:
          if (v28 >= v6) {
            goto LABEL_51;
          }
LABEL_52:
          unint64_t v35 = v22;
          if (v22 <= v7) {
            goto LABEL_73;
          }
          goto LABEL_72;
        }
      }
      else if (v29 != *(unsigned __int8 *)(v24 + 166))
      {
        Swift::String v28 = v5 - 72;
        if ((v29 & 1) == 0) {
          goto LABEL_49;
        }
        goto LABEL_67;
      }
    }
    unsigned int v30 = *(_DWORD *)(v23 + 212);
    unsigned int v31 = *(_DWORD *)(v24 + 212);
    if (v30 != v31)
    {
      Swift::String v28 = v5 - 72;
      if (v30 < v31) {
        goto LABEL_49;
      }
      goto LABEL_67;
    }
    if (*(unsigned char *)(v23 + 208)) {
      break;
    }
    if (*(unsigned char *)(v24 + 208)) {
      goto LABEL_75;
    }
    Swift::String v28 = v5 - 72;
    if (*(void *)(v23 + 200) < *(void *)(v24 + 200))
    {
LABEL_49:
      if (v5 == v6) {
        goto LABEL_50;
      }
LABEL_51:
      memmove(v28, v22, 0x48uLL);
      goto LABEL_52;
    }
LABEL_67:
    uint64_t v33 = v21 - 72;
    if (v5 < v21 || v28 >= v21 || v5 != v21) {
      memmove(v28, v21 - 72, 0x48uLL);
    }
    uint64_t v22 = v6;
    v21 -= 72;
    if (v6 <= v7) {
      goto LABEL_73;
    }
LABEL_72:
    unsigned int v6 = v22;
    uint64_t v5 = v28;
    if (v21 <= v4) {
      goto LABEL_73;
    }
  }
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in AGAttribute.mutateBody<A>(as:invalidating:_:)(uint64_t result)
{
  *(unsigned char *)(result + 17) = 0;
  return result;
}

{
  *(unsigned char *)(result + 17) = 1;
  return result;
}

uint64_t specialized static LazyLayoutReuseIdleModifier._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PropertyList.subscript.setter();
}

uint64_t partial apply for closure #1 in _LazyLayoutViewCache.logReuse(_:)(uint64_t a1)
{
  return closure #1 in _LazyLayoutViewCache.logReuse(_:)(a1, *(void (**)(void *__return_ptr))(v1 + 32));
}

uint64_t outlined consume of ReuseMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned __int8 a8)
{
  unsigned int v8 = a8 >> 4;
  if (v8 <= 9)
  {
    if (((1 << v8) & 0x37C) == 0)
    {
      if (v8 != 7) {
        return result;
      }
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in _LazyLayoutViewCache.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:)(uint64_t a1, uint64_t a2)
{
  return partial apply for closure #1 in _LazyLayoutViewCache.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:)(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))closure #1 in _LazyLayoutViewCache.finalPlacement(oldIndex:oldPlacedSubviews:newPlacedSubviews:wasRemovedFromSubviews:context:));
}

void type metadata accessor for Attribute<[_LazyLayout_PlacedSubview]>()
{
  if (!lazy cache variable for type metadata for Attribute<[_LazyLayout_PlacedSubview]>)
  {
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_0(255, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<[_LazyLayout_PlacedSubview]>);
    }
  }
}

uint64_t partial apply for closure #2 in LazyLayoutViewCache.init<A>(layout:list:inputs:)()
{
  return closure #2 in LazyLayoutViewCache.init<A>(layout:list:inputs:)();
}

uint64_t partial apply for closure #1 in updateOutput #1 <A><A1>(key:) in LazyLayoutViewCache.init<A>(layout:list:inputs:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 48);
  swift_retain();
  uint64_t result = swift_release();
  *(void *)(a1 + 8) = v3;
  return result;
}

uint64_t sub_187A2DB68()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type External<[Scrollable]> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>)
  {
    type metadata accessor for External<[Scrollable]>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>);
  }
  return result;
}

uint64_t sub_187A2DBF8()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LazyLayoutViewCache.enqueueItemPhaseUpdate(_:)()
{
  return LazyLayoutViewCache.updateItemPhase(_:)(*(void *)(v0 + 24));
}

double partial apply for implicit closure #4 in LazyLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  return implicit closure #4 in LazyLayoutViewCache.item(data:)(*(void *)(v1 + 16), a1);
}

double partial apply for implicit closure #16 in LazyLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  return implicit closure #5 in LazyLayoutViewCache.item(data:)(v1, 96, a1);
}

uint64_t partial apply for implicit closure #1 in closure #2 in LazyLayoutViewCache.item(data:)@<X0>(_OWORD *a1@<X8>)
{
  Swift::String v2 = *(long long **)(v1 + 16);
  outlined init with take of ReuseMessage(v2, a1);

  return outlined retain of ReuseMessage((uint64_t)v2);
}

uint64_t partial apply for implicit closure #1 in noteFailedReuse #1 (_:) in LazyLayoutViewCache.item(data:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

double partial apply for implicit closure #5 in LazyLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  return implicit closure #5 in LazyLayoutViewCache.item(data:)(v1, 32, a1);
}

unint64_t lazy protocol witness table accessor for type CompareTransitionType and conformance CompareTransitionType()
{
  unint64_t result = lazy protocol witness table cache variable for type CompareTransitionType and conformance CompareTransitionType;
  if (!lazy protocol witness table cache variable for type CompareTransitionType and conformance CompareTransitionType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CompareTransitionType and conformance CompareTransitionType);
  }
  return result;
}

double partial apply for implicit closure #7 in LazyLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  return implicit closure #5 in LazyLayoutViewCache.item(data:)(v1, 64, a1);
}

double partial apply for implicit closure #11 in LazyLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  return implicit closure #5 in LazyLayoutViewCache.item(data:)(v1, 80, a1);
}

double partial apply for implicit closure #10 in LazyLayoutViewCache.item(data:)@<D0>(__n128 *a1@<X8>)
{
  *(void *)&double result = implicit closure #10 in LazyLayoutViewCache.item(data:)((void *)*(void *)(v1 + 16), *(void *)(v1 + 24), a1).n128_u64[0];
  return result;
}

double partial apply for implicit closure #6 in LazyLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  return implicit closure #5 in LazyLayoutViewCache.item(data:)(v1, 48, a1);
}

_OWORD *outlined init with take of ReuseMessage(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[2];
  *(_OWORD *)((char *)a2 + 41) = *(long long *)((char *)a1 + 41);
  a2[1] = v3;
  a2[2] = v4;
  *a2 = v2;
  return a2;
}

uint64_t outlined retain of ReuseMessage(uint64_t a1)
{
  return a1;
}

double partial apply for implicit closure #3 in add #1 (item:reset:) in LazyLayoutViewCache.item(data:)@<D0>(uint64_t a1@<X8>)
{
  swift_beginAccess();
  *(void *)a1 = *(void *)(*(void *)(v1 + 160) + 16);
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(unsigned char *)(a1 + 56) = 0;
  return result;
}

uint64_t destroy for MakeSubviewTransition()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MakeSubviewTransition(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  uint64_t v4 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v4;
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 148) = *(unsigned char *)(a2 + 148);
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

__n128 __swift_memcpy160_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t getEnumTagSinglePayload for MakeSubviewTransition(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 160)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MakeSubviewTransition(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 160) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for MakeSubviewTransition()
{
  return &unk_1ED47E228;
}

void *type metadata accessor for LazyViewPhase()
{
  return &unk_1ED47E2C0;
}

uint64_t destroy for ReuseMessage(uint64_t a1)
{
  return outlined consume of ReuseMessage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
}

uint64_t assignWithCopy for ReuseMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  unsigned __int8 v10 = *(unsigned char *)(a2 + 56);
  outlined copy of ReuseMessage(*(void *)a2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v11 = *(void *)a1;
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 48);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  unsigned __int8 v18 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v10;
  outlined consume of ReuseMessage(v11, v12, v13, v14, v15, v16, v17, v18);
  return a1;
}

uint64_t assignWithTake for ReuseMessage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  char v4 = *(unsigned char *)(a2 + 56);
  uint64_t v5 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v12;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v3;
  unsigned __int8 v13 = *(unsigned char *)(a1 + 56);
  *(unsigned char *)(a1 + 56) = v4;
  outlined consume of ReuseMessage(v5, v7, v6, v8, v9, v10, v11, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for ReuseMessage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *(void *)(a1 + 24) >> 1;
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for ReuseMessage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = 2 * -a2;
      *(void *)(result + 40) = 0;
      *(void *)(result + 48) = 0;
      *(void *)(result + 32) = 0;
      *(unsigned char *)(result + 56) = 0;
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t getEnumTag for ReuseMessage(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 56) >> 4;
}

uint64_t destructiveProjectEnumData for ReuseMessage(uint64_t result)
{
  *(unsigned char *)(result + 56) &= 0xFu;
  return result;
}

uint64_t destructiveInjectEnumTag for ReuseMessage(uint64_t result, char a2)
{
  char v2 = *(unsigned char *)(result + 56) & 1 | (16 * a2);
  *(void *)(result + 24) &= 1uLL;
  *(unsigned char *)(result + 56) = v2;
  return result;
}

void *type metadata accessor for ReuseMessage()
{
  return &unk_1ED47E360;
}

void *type metadata accessor for CompareTransitionType()
{
  return &unk_1ED47E3D8;
}

void *type metadata accessor for UpdateSubviewTransition()
{
  return &unk_1ED47E458;
}

uint64_t assignWithCopy for LazyTransaction(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for LazyTransaction(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyTransaction(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 18)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t assignWithCopy for LazyViewGeometry(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for LazyViewGeometry(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  return a1;
}

void *type metadata accessor for LazyViewGeometry()
{
  return &unk_1ED47E568;
}

ValueMetadata *type metadata accessor for LazyLayoutReuseIdleInput()
{
  return &type metadata for LazyLayoutReuseIdleInput;
}

uint64_t assignWithCopy for LazyPreference(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for LazyPreference(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for LazyCollectedPlacements()
{
  return &type metadata for LazyCollectedPlacements;
}

ValueMetadata *type metadata accessor for UpdateViewCache()
{
  return &type metadata for UpdateViewCache;
}

uint64_t sub_187A2E5BC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t *initializeBufferWithCopyOfBuffer for LazyTransition(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 16) & (unint64_t)~v6) + *(void *)(v5 + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    int v11 = *(_DWORD *)a2;
    unint64_t v10 = (unint64_t)a2 + 11;
    *(_DWORD *)a1 = v11;
    long long v12 = (void *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
    *long long v12 = *(void *)(v10 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v13 = ((unint64_t)v12 + v6 + 8) & ~v6;
    unint64_t v14 = ((v10 & 0xFFFFFFFFFFFFFFF8) + v6 + 8) & ~v6;
    uint64_t v15 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v15(v13, v14, v4);
  }
  return v3;
}

_DWORD *assignWithCopy for LazyTransition(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 24))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

_DWORD *initializeWithTake for LazyTransition(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = (void *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8);
  void *v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_DWORD *assignWithTake for LazyTransition(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 11) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v7 + 40))(((unint64_t)v5 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80), ((unint64_t)v6 + *(unsigned __int8 *)(v7 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyTransition(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      uint64_t v15 = (unint64_t *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFF8);
      if (v5 > 0x7FFFFFFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v15 + v6 + 8) & ~v6);
      }
      unint64_t v16 = *v15;
      if (v16 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      if ((v16 + 1) >= 2) {
        return v16;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for LazyTransition(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187A2ED08);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        unsigned __int8 v18 = (void *)((unint64_t)(a1 + 11) & 0xFFFFFFFFFFFFFFF8);
        if (v7 > 0x7FFFFFFE)
        {
          unsigned int v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(((unint64_t)v18 + v9 + 8) & ~v9);
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *unsigned __int8 v18 = 0;
          *(_DWORD *)unsigned __int8 v18 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *unsigned __int8 v18 = a2;
        }
      }
      return;
  }
}

uint64_t initializeWithCopy for CacheItemDescription(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CacheItemDescription(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithTake for CacheItemDescription(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CacheItemDescription(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CacheItemDescription(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(unsigned char *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 25) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

void *type metadata accessor for CacheItemDescription()
{
  return &unk_1ED47E838;
}

unsigned char *storeEnumTagSinglePayload for LazyTransaction.RemovalPhase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187A2EFB8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for LazyTransaction.RemovalPhase()
{
  return &unk_1ED47E8D0;
}

unint64_t lazy protocol witness table accessor for type LazyTransaction.RemovalPhase and conformance LazyTransaction.RemovalPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyTransaction.RemovalPhase and conformance LazyTransaction.RemovalPhase;
  if (!lazy protocol witness table cache variable for type LazyTransaction.RemovalPhase and conformance LazyTransaction.RemovalPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyTransaction.RemovalPhase and conformance LazyTransaction.RemovalPhase);
  }
  return result;
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t (*a1)(id *), uint64_t a2, unint64_t a3)
{
  if (a3 >> 62) {
    goto LABEL_14;
  }
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v7 = 0;
  if (v6)
  {
    while (1)
    {
      id v8 = (a3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C117680](v7, a3) : *(id *)(a3 + 8 * v7 + 32);
      uint64_t v9 = v8;
      id v13 = v8;
      char v10 = a1(&v13);

      if (v3 || (v10 & 1) != 0) {
        break;
      }
      uint64_t v11 = v7 + 1;
      if (__OFADD__(v7, 1))
      {
        __break(1u);
LABEL_14:
        swift_bridgeObjectRetain();
        uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v7 = 0;
        if (!v6) {
          return v7;
        }
      }
      else
      {
        ++v7;
        if (v11 == v6) {
          return 0;
        }
      }
    }
  }
  return v7;
}

uint64_t specialized Sequence.min(by:)@<X0>(uint64_t (*a1)(uint64_t *, uint64_t *)@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  unint64_t v82 = 0;
  uint64_t v83 = 0;
  uint64_t v81 = a2;
  specialized EnumeratedSequence.Iterator.next()((uint64_t)&v61);
  uint64_t v7 = v61;
  uint64_t v6 = v62;
  char v8 = v66;
  uint64_t v10 = v67;
  uint64_t v9 = v68;
  uint64_t v12 = v69;
  uint64_t v11 = v70;
  if (v62)
  {
    long long v49 = a3;
    uint64_t v50 = v61;
    uint64_t v60 = v4;
    uint64_t v13 = v67;
    uint64_t v14 = v68;
    uint64_t v15 = v69;
    uint64_t v16 = v70;
    uint64_t v71 = v61;
    uint64_t v72 = v62;
    uint64_t v73 = v63;
    char v74 = v64 & 1;
    uint64_t v75 = v65;
    char v76 = v66 & 1;
    uint64_t v77 = v67;
    uint64_t v78 = v68;
    uint64_t v79 = v69;
    uint64_t v80 = v70;
    uint64_t v84 = v81;
    uint64_t v17 = *(void *)(v81 + 16);
    uint64_t v18 = v65;
    uint64_t v19 = v64;
    uint64_t v20 = v63;
    uint64_t result = swift_bridgeObjectRetain();
    unint64_t v22 = v82;
    uint64_t v52 = v17;
    if (v82 == v17)
    {
      LOBYTE(v23) = v19;
      uint64_t v24 = v18;
      uint64_t v25 = v20;
      char v26 = v8;
      uint64_t v27 = v10;
      uint64_t v28 = v14;
      uint64_t v29 = v15;
      uint64_t v30 = v16;
      uint64_t v31 = v6;
LABEL_4:
      uint64_t result = swift_bridgeObjectRelease();
      *long long v49 = v50;
      v49[1] = v31;
      v49[2] = v25;
      v49[3] = v23 & 1;
      v49[4] = v24;
      v49[5] = v26 & 1;
      v49[6] = v27;
      v49[7] = v28;
      long long v49[8] = v29;
      v49[9] = v30;
    }
    else
    {
      uint64_t v34 = v83;
      uint64_t v35 = 72 * v82;
      uint64_t v54 = v6;
      unint64_t v36 = v82;
      uint64_t v37 = v18;
      uint64_t v38 = v19;
      unint64_t v51 = v82;
      while ((v22 & 0x8000000000000000) == 0)
      {
        if (v36 >= *(void *)(v84 + 16)) {
          goto LABEL_17;
        }
        if (__OFADD__(v34, 1)) {
          goto LABEL_18;
        }
        unint64_t v58 = v36;
        uint64_t v40 = v38;
        uint64_t v56 = v37;
        uint64_t v59 = v35;
        uint64_t v41 = *(void *)(v84 + v35 + 32);
        uint64_t v42 = *(void *)(v84 + v35 + 40);
        uint64_t v43 = *(unsigned __int8 *)(v84 + v35 + 48);
        uint64_t v44 = *(void *)(v84 + v35 + 56);
        char v45 = *(unsigned char *)(v84 + v35 + 64);
        uint64_t v27 = *(void *)(v84 + v35 + 72);
        uint64_t v28 = *(void *)(v84 + v35 + 80);
        uint64_t v29 = *(void *)(v84 + v35 + 88);
        uint64_t v30 = *(void *)(v84 + v35 + 96);
        uint64_t v46 = v34;
        uint64_t v61 = v34;
        uint64_t v62 = v41;
        uint64_t v25 = v42;
        uint64_t v63 = v42;
        uint64_t v23 = v43;
        LOBYTE(v64) = v43;
        uint64_t v47 = v44;
        uint64_t v65 = v44;
        char v26 = v45;
        LOBYTE(v66) = v45;
        uint64_t v67 = v27;
        uint64_t v68 = v28;
        uint64_t v69 = v29;
        uint64_t v70 = v30;
        uint64_t v31 = v41;
        swift_retain();
        char v48 = a1(&v61, &v71);
        if (v60)
        {
          swift_bridgeObjectRelease();
          swift_release();
          return swift_release();
        }
        if (v48)
        {
          uint64_t result = swift_release();
          uint64_t v39 = v46;
          uint64_t v71 = v46;
          uint64_t v72 = v31;
          uint64_t v73 = v25;
          char v74 = v23;
          uint64_t v24 = v47;
          uint64_t v75 = v47;
          uint64_t v50 = v46;
          char v76 = v26;
          uint64_t v16 = v30;
          uint64_t v15 = v29;
          uint64_t v14 = v28;
          uint64_t v13 = v27;
          uint64_t v77 = v27;
          uint64_t v78 = v28;
          char v8 = v26;
          uint64_t v37 = v47;
          uint64_t v38 = v23;
          uint64_t v20 = v25;
          uint64_t v54 = v31;
          uint64_t v79 = v29;
          uint64_t v80 = v30;
        }
        else
        {
          uint64_t result = swift_release();
          uint64_t v31 = v54;
          uint64_t v37 = v56;
          uint64_t v25 = v20;
          uint64_t v38 = v40;
          LOBYTE(v23) = v40;
          uint64_t v24 = v56;
          char v26 = v8;
          uint64_t v27 = v13;
          uint64_t v28 = v14;
          uint64_t v29 = v15;
          uint64_t v30 = v16;
          uint64_t v39 = v46;
        }
        unint64_t v36 = v58 + 1;
        uint64_t v35 = v59 + 72;
        uint64_t v34 = v39 + 1;
        unint64_t v22 = v51;
        if (v52 == v58 + 1) {
          goto LABEL_4;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
    }
  }
  else
  {
    uint64_t v55 = v65;
    uint64_t v57 = v66;
    uint64_t v32 = v64;
    uint64_t v33 = v63;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
    *a3 = v7;
    a3[1] = 0;
    a3[2] = v33;
    a3[3] = v32;
    a3[4] = v55;
    a3[5] = v57;
    a3[6] = v10;
    a3[7] = v9;
    a3[8] = v12;
    a3[9] = v11;
  }
  return result;
}

double LazySubviewPlacements.init(layout:cache:inputs:)@<D0>(int a1@<W0>, int a2@<W1>, unint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5 = *a3;
  int v6 = *((_DWORD *)a3 + 2);
  int v7 = *((_DWORD *)a3 + 9);
  unint64_t v27 = a3[5];
  int v19 = *MEMORY[0x1E4F4E7A0];
  long long v20 = *MEMORY[0x1E4F1DB20];
  uint64_t v8 = *(void *)(MEMORY[0x1E4F1DB20] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x1E4F1DB20] + 24);
  unint64_t v26 = a3[2];
  int v24 = *((_DWORD *)a3 + 8);
  int v25 = *((_DWORD *)a3 + 6);
  int v23 = *((_DWORD *)a3 + 7);
  int v18 = _ViewInputs.size.getter();
  int v17 = _ViewInputs.position.getter();
  int v16 = _ViewInputs.transform.getter();
  int v15 = _ViewInputs.environment.getter();
  uint64_t v14 = _ViewInputs.weakScrollable.getter();
  int v13 = _GraphInputs.scrollPhaseState.getter();
  int v10 = _ViewInputs.containerSize.getter();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a4 + 153) = *(_DWORD *)v28;
  *(_DWORD *)(a4 + 156) = *(_DWORD *)&v28[3];
  *(_DWORD *)a4 = a1;
  *(_DWORD *)(a4 + 4) = v18;
  *(_DWORD *)(a4 + 8) = v17;
  *(_DWORD *)(a4 + 12) = v16;
  *(_DWORD *)(a4 + 16) = v15;
  *(_DWORD *)(a4 + 20) = a2;
  *(void *)(a4 + 24) = v14;
  *(_DWORD *)(a4 + 32) = v13;
  *(_DWORD *)(a4 + 36) = v10;
  *(_DWORD *)(a4 + 40) = v19;
  *(void *)(a4 + 48) = v5;
  *(_DWORD *)(a4 + 56) = v6;
  *(void *)(a4 + 64) = v26;
  *(_DWORD *)(a4 + 72) = v25;
  *(_DWORD *)(a4 + 76) = v23;
  *(_DWORD *)(a4 + 80) = v24;
  *(_DWORD *)(a4 + 84) = v7;
  *(void *)(a4 + 88) = v27;
  *(_OWORD *)(a4 + 96) = v20;
  *(void *)(a4 + 112) = v8;
  *(void *)(a4 + 120) = v9;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  *(void *)(a4 + 128) = MEMORY[0x1E4FBC860];
  *(void *)(a4 + 136) = v11;
  *(_DWORD *)(a4 + 144) = 0;
  *(unsigned char *)(a4 + 152) = 0;
  double result = 0.0;
  *(_OWORD *)(a4 + 272) = 0u;
  *(_OWORD *)(a4 + 288) = 0u;
  *(_OWORD *)(a4 + 240) = 0u;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 208) = 0u;
  *(_OWORD *)(a4 + 224) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 192) = 0u;
  *(_OWORD *)(a4 + 160) = 0u;
  *(unsigned char *)(a4 + 304) = 1;
  *(_DWORD *)(a4 + 305) = v5;
  *(_DWORD *)(a4 + 308) = v5 >> 24;
  *(void *)(a4 + 312) = 0;
  *(void *)(a4 + 320) = 0;
  *(unsigned char *)(a4 + 328) = 1;
  return result;
}

unint64_t LazyLayoutComputer.init(layout:environment:cache:containerSize:)(unsigned int a1, uint64_t a2)
{
  return a1 | (unint64_t)(a2 << 32);
}

uint64_t LazySubviewPlacements.$layoutComputer.setter(uint64_t result)
{
  int v2 = *MEMORY[0x1E4F4E7A0];
  if ((result & 0x100000000) == 0) {
    int v2 = result;
  }
  *(_DWORD *)(v1 + 40) = v2;
  return result;
}

Swift::Void __swiftcall LazyLayoutComputer.updateValue()()
{
  uint64_t v2 = v0;
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  ((void (*)())MEMORY[0x1F4188790])();
  int v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v7 = (int *)type metadata accessor for LazyLayoutComputer.Engine();
  uint64_t v8 = *((void *)v7 - 1);
  MEMORY[0x1F4188790](v7);
  int v10 = (char *)&v22 - v9;
  if (AGGraphGetCurrentAttribute() == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    uint64_t v25 = v2;
    int v24 = *(_DWORD *)(v1 + 12);
    LOBYTE(v37) = 1;
    SizeAndSpacingContext.init(context:owner:environment:)();
    int v23 = v38;
    uint64_t v11 = v37;
    uint64_t Value = AGGraphGetValue();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, Value, v3);
    type metadata accessor for LazyLayoutViewCache();
    uint64_t v13 = *(void *)AGGraphGetValue();
    swift_retain();
    default argument 0 of ViewSizeCache.init(cache:)();
    ViewSizeCache.init(cache:)();
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v10, v6, v3);
    uint64_t v14 = &v10[v7[9]];
    *(void *)uint64_t v14 = v11;
    int v15 = v24;
    *((_DWORD *)v14 + 2) = v23;
    *((_DWORD *)v14 + 3) = v15;
    *(void *)&v10[v7[10]] = v13;
    int v16 = &v10[v7[11]];
    long long v17 = v35;
    *((_OWORD *)v16 + 8) = v34;
    *((_OWORD *)v16 + 9) = v17;
    v16[160] = v36;
    long long v18 = v31;
    *((_OWORD *)v16 + 4) = v30;
    *((_OWORD *)v16 + 5) = v18;
    long long v19 = v33;
    *((_OWORD *)v16 + 6) = v32;
    *((_OWORD *)v16 + 7) = v19;
    long long v20 = v27;
    *(_OWORD *)int v16 = v26;
    *((_OWORD *)v16 + 1) = v20;
    long long v21 = v29;
    *((_OWORD *)v16 + 2) = v28;
    *((_OWORD *)v16 + 3) = v21;
    swift_getWitnessTable();
    swift_getWitnessTable();
    StatefulRule<>.update<A>(to:)();
    (*(void (**)(char *, int *))(v8 + 8))(v10, v7);
  }
}

uint64_t LazyLayoutComputer.Engine.spacing()()
{
  return SizeAndSpacingContext.update<A>(_:)();
}

uint64_t closure #1 in LazyLayoutComputer.Engine.spacing()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v23 = a4;
  uint64_t v21 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v22 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v20 - v7;
  uint64_t v9 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for LazyLayoutComputer.Engine();
  uint64_t v14 = *(int *)(v13 + 40);
  int v15 = (uint64_t *)(a1 + *(int *)(v13 + 36));
  int v16 = *((_DWORD *)v15 + 2);
  uint64_t v25 = *v15;
  int v26 = v16;
  swift_retain();
  int v17 = SizeAndSpacingContext.context.getter();
  LazyLayoutViewCache.subviews(context:)(v17, (uint64_t)&v25);
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, a2);
  long long v24 = *(_OWORD *)v15;
  long long v18 = *(void (**)(uint64_t, uint64_t))(**(void **)(a1 + v14) + 280);
  swift_retain();
  v18(AssociatedTypeWitness, AssociatedTypeWitness);
  swift_release();
  (*(void (**)(uint64_t *, long long *, char *, uint64_t))(v21 + 56))(&v25, &v24, v8, a2);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a2);
  return outlined destroy of _LazyLayout_Subviews((uint64_t)&v25);
}

double LazySubviewPlacements.parent.getter@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of TableColumnList(WeakValue, a1);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t protocol witness for LayoutEngine.childGeometries(at:origin:) in conformance LazyLayoutComputer<A>.Engine()
{
  return MEMORY[0x1F40FD928]();
}

uint64_t LazySubviewPlacements.transaction.getter()
{
  memcpy(__dst, v0, sizeof(__dst));
  AGGraphClearUpdate();
  closure #1 in LazySubviewPlacements.transaction.getter(&v2);
  AGGraphSetUpdate();
  return v2;
}

uint64_t closure #1 in LazySubviewPlacements.transaction.getter@<X0>(void *a1@<X8>)
{
  type metadata accessor for LazyLayoutViewCache();
  AGGraphGetValue();
  _ViewInputs.transaction.getter();
  *a1 = *(void *)AGGraphGetValue();

  return swift_retain();
}

uint64_t LazySubviewPlacements.allowsContentOffsetAdjustments.getter()
{
  AGGraphClearUpdate();
  LazySubviewPlacements.parent.getter((uint64_t)v4);
  AGGraphSetUpdate();
  uint64_t v0 = v5;
  if (v5)
  {
    uint64_t v1 = v6;
    __swift_project_boxed_opaque_existential_1(v4, v5);
    char v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 24))(v0, v1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v4);
  }
  else
  {
    outlined destroy of Scrollable?((uint64_t)v4);
    char v2 = 1;
  }
  return v2 & 1;
}

Swift::Void __swiftcall LazySubviewPlacements.updateValue()()
{
  void (*v31)(long long *__return_ptr, uint64_t, uint64_t);
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  CGSize v37;
  char v38;
  CGFloat v39;
  CGFloat v40;
  CGFloat v41;
  CGFloat v42;
  CGFloat v43;
  CGFloat v44;
  CGFloat v45;
  CGFloat v46;
  char v47;
  double v48;
  double v49;
  double v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t OutputValue;
  BOOL v61;
  BOOL IsNull;
  CGFloat v63;
  CGFloat v64;
  CGFloat v65;
  CGFloat v66;
  char v67;
  char v68;
  uint64_t v69;
  long long v70;
  _OWORD *v71;
  CGFloat x;
  CGFloat y;
  double v74;
  double v75;
  unsigned int v76;
  unsigned int v77;
  char *v78;
  char v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  long long v97;
  long long v98;
  long long v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t);
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  char *v105;
  int v106;
  CGSize size;
  CGFloat v108;
  CGFloat v109;
  CGFloat v110;
  CGFloat v111;
  double v112;
  uint64_t v113;
  double v114;
  double MaxX;
  CGFloat v116;
  uint64_t v117;
  double MinY;
  uint64_t v119;
  double MaxY;
  uint64_t v121;
  _OWORD *v122;
  int v123;
  void (*v124)(char *, uint64_t);
  void (*v125)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v126;
  uint64_t v127;
  void (*v128)(char *, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  CGFloat v134;
  CGFloat v135;
  CGFloat v136;
  CGFloat v137;
  uint64_t v138;
  int v139;
  CGFloat MinX;
  CGFloat height;
  CGFloat width;
  double v143;
  double v144;
  CGFloat v145;
  long long v146;
  long long v147;
  long long v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  double v153;
  CGRect v154;
  long long v155;
  long long v156;
  _OWORD v157[14];
  long long v158;
  long long v159;
  long long v160;
  long long v161;
  long long v162;
  long long v163;
  long long v164;
  char *v165;
  long long v166;
  long long v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  long long v173;
  uint64_t v174;
  uint64_t v175;
  long long v176;
  _OWORD v177[8];
  _OWORD v178[2];
  long long v179;
  _OWORD v180[5];
  long long v181;
  long long v182;
  long long v183;
  unsigned char v184[136];
  _OWORD v185[2];
  uint64_t v186;
  uint64_t v187;
  char v188;
  _DWORD v189[84];
  unsigned char v190[232];
  uint64_t v191;
  CGRect v192;
  CGRect v193;
  CGRect v194;
  CGRect v195;
  CGRect v196;
  CGRect v197;
  CGRect v198;
  CGRect v199;
  CGRect v200;
  CGRect v201;
  CGRect v202;
  CGRect v203;
  CGRect v204;
  CGRect v205;
  CGRect v206;
  CGRect v207;

  char v2 = v1;
  v191 = *MEMORY[0x1E4F143B8];
  uint64_t v153 = v0;
  double v150 = *(void *)(*(void *)&v0 + 16);
  uint64_t v3 = *(void *)(v150 - 8);
  ((void (*)())MEMORY[0x1F4188790])();
  double v149 = (char *)&v122 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_1(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  uint64_t v6 = v5;
  if (!AGGraphGetOutputValue()
    || (type metadata accessor for AGGraphRef(0), (static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) == 0))
  {
    memcpy(v189, v1, 0x149uLL);
    int v7 = v189[36];
    uint64_t v152 = type metadata accessor for LazyLayoutViewCache();
    uint64_t Value = AGGraphGetValue();
    uint64_t v9 = *(void *)Value;
    int v10 = *(_DWORD *)(*(void *)Value + 40);
    uint64_t v11 = *(void *)(*(void *)Value + 48);
    int v12 = *(_DWORD *)(*(void *)Value + 112);
    *(void *)&uint64_t v179 = *(void *)(*(void *)Value + 32);
    DWORD2(v179) = v10;
    *(void *)&v180[0] = v11;
    *(_OWORD *)((char *)v180 + 8) = *(_OWORD *)(v9 + 56);
    *(_OWORD *)((char *)&v180[1] + 8) = *(_OWORD *)(v9 + 72);
    *(_OWORD *)((char *)&v180[2] + 8) = *(_OWORD *)(v9 + 88);
    *((void *)&v180[3] + 1) = *(void *)(v9 + 104);
    LODWORD(v180[4]) = v12;
    _ViewInputs.viewPhase.getter();
    int v13 = *(_DWORD *)AGGraphGetValue() >> 1;
    LODWORD(MinX) = v7;
    if (v7 != v13)
    {
      v1[36] = v13;
      long long v14 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      *((_OWORD *)v1 + 6) = *MEMORY[0x1E4F1DB20];
      *((_OWORD *)v1 + 7) = v14;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined release of PositionState((uint64_t)&v189[38]);
      uint64_t v15 = MEMORY[0x1E4FBC860];
      *((void *)v1 + 16) = MEMORY[0x1E4FBC860];
      *((void *)v1 + 17) = v15;
      LOBYTE(v179) = 1;
      *((unsigned char *)v1 + 152) = 0;
      *((_OWORD *)v1 + 10) = 0u;
      *((_OWORD *)v1 + 11) = 0u;
      *((_OWORD *)v1 + 12) = 0u;
      *((_OWORD *)v1 + 13) = 0u;
      *((_OWORD *)v1 + 14) = 0u;
      *((_OWORD *)v1 + 15) = 0u;
      *((_OWORD *)v1 + 16) = 0u;
      *((_OWORD *)v1 + 17) = 0u;
      *((_OWORD *)v1 + 18) = 0u;
      *((unsigned char *)v1 + 304) = 1;
    }
    long long v139 = v13;
    uint64_t v16 = AGGraphGetValue();
    uint64_t v18 = v17;
    int CurrentAttribute = AGGraphGetCurrentAttribute();
    int v20 = *MEMORY[0x1E4F4E7A0];
    if (CurrentAttribute == *MEMORY[0x1E4F4E7A0])
    {
      __break(1u);
      goto LABEL_55;
    }
    long long v138 = v18;
    unint64_t v123 = v20;
    uint64_t v151 = v6;
    unsigned int v21 = v189[9];
    LODWORD(v147) = v189[5];
    LODWORD(v148) = v189[0];
    uint64_t v23 = *(void *)(v16 + 24);
    uint64_t v22 = *(void *)(v16 + 32);
    double v146 = *(_OWORD *)(v16 + 8);
    uint64_t v24 = *(void *)v16;
    swift_retain();
    LOBYTE(v179) = 1;
    SizeAndSpacingContext.init(context:owner:environment:)();
    *(void *)&v157[0] = v179;
    *((void *)&v157[0] + 1) = __PAIR64__(v21, DWORD2(v179));
    v177[0] = *(_OWORD *)AGGraphGetValue();
    uint64_t v25 = (_OWORD *)AGGraphGetValue();
    long long v26 = v25[1];
    *(_OWORD *)uint64_t v190 = *v25;
    *(_OWORD *)&v190[16] = v26;
    uint64_t v172 = v24;
    uint64_t v173 = v146;
    double v174 = v23;
    long long v175 = v22;
    AGGraphGetValue();
    LOBYTE(v165) = *(unsigned char *)AGGraphGetValue();
    uint64_t v27 = v150;
    uint64_t v28 = AGGraphGetValue();
    long long v29 = v149;
    long long v128 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    long long v129 = v3 + 16;
    v128(v149, v28, v27);
    uint64_t v30 = *(void *)(*(void *)&v153 + 24);
    long long v31 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v30 + 120);
    uint64_t v133 = v24;
    swift_retain();
    long long v126 = v30 + 120;
    long long v127 = v30;
    uint64_t v125 = v31;
    v31(&v158, v27, v30);
    long long v32 = *(void (**)(char *, uint64_t))(v3 + 8);
    long long v130 = v3 + 8;
    unint64_t v124 = v32;
    v32(v29, v27);
    uint64_t v132 = *v2;
    unint64_t v131 = *((void *)v2 + 1);
    long long v33 = *((void *)v2 + 12);
    char v122 = v2 + 24;
    *(void *)&uint64_t v148 = v33;
    *(void *)&long long v147 = *((void *)v2 + 13);
    long long v34 = *((void *)v2 + 14);
    uint64_t v145 = *((double *)v2 + 15);
    *(void *)&double v146 = v34;
    long long v35 = *((void *)v2 + 16);
    AGGraphGetValue();
    char v36 = (char *)AGGraphGetValue();
    _LazyLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)((uint64_t *)v157, (long long *)v190, (uint64_t)&v172, (char *)&v165, (int *)&v158, *v36, (uint64_t)&v179);
    unint64_t v155 = v179;
    unint64_t v156 = v180[0];
    long long v143 = *((double *)&v180[1] + 1);
    uint64_t v144 = *(double *)&v180[1];
    *(_OWORD *)&v190[192] = *(_OWORD *)&v184[96];
    *(_OWORD *)&v190[208] = *(_OWORD *)&v184[112];
    *(void *)&v190[224] = *(void *)&v184[128];
    *(_OWORD *)&v190[128] = *(_OWORD *)&v184[32];
    *(_OWORD *)&v190[144] = *(_OWORD *)&v184[48];
    *(_OWORD *)&v190[176] = *(_OWORD *)&v184[80];
    *(_OWORD *)&v190[160] = *(_OWORD *)&v184[64];
    *(_OWORD *)&v190[64] = v182;
    *(_OWORD *)&v190[80] = v183;
    *(_OWORD *)&v190[112] = *(_OWORD *)&v184[16];
    *(_OWORD *)&v190[96] = *(_OWORD *)v184;
    *(_OWORD *)uint64_t v190 = v180[2];
    *(_OWORD *)&v190[16] = v180[3];
    *(_OWORD *)&v190[48] = v181;
    *(_OWORD *)&v190[32] = v180[4];
    uint64_t v37 = (CGSize)v185[0];
    int v38 = v185[1];
    v157[10] = *(_OWORD *)&v190[168];
    v157[11] = *(_OWORD *)&v190[184];
    v157[12] = *(_OWORD *)&v190[200];
    v157[13] = *(_OWORD *)&v190[216];
    v157[6] = *(_OWORD *)&v190[104];
    v157[7] = *(_OWORD *)&v190[120];
    v157[8] = *(_OWORD *)&v190[136];
    v157[9] = *(_OWORD *)&v190[152];
    v157[2] = *(_OWORD *)&v190[40];
    v157[3] = *(_OWORD *)&v190[56];
    v157[4] = *(_OWORD *)&v190[72];
    v157[5] = *(_OWORD *)&v190[88];
    v157[0] = *(_OWORD *)&v190[8];
    v157[1] = *(_OWORD *)&v190[24];
    v180[3] = *(_OWORD *)&v190[184];
    v180[4] = *(_OWORD *)&v190[200];
    unint64_t v181 = *(_OWORD *)&v190[216];
    uint64_t v179 = *(_OWORD *)&v190[120];
    v180[0] = *(_OWORD *)&v190[136];
    v180[2] = *(_OWORD *)&v190[168];
    v180[1] = *(_OWORD *)&v190[152];
    ScrollGeometry.visibleRect.getter();
    uint64_t v40 = v39;
    uint64_t v42 = v41;
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    v154.origin.double x = v39;
    v154.origin.CGFloat y = v41;
    v154.size.CGFloat width = v43;
    v154.size.CGFloat height = v45;
    uint64_t v162 = *(_OWORD *)&v190[72];
    uint64_t v163 = *(_OWORD *)&v190[88];
    unint64_t v164 = *(_OWORD *)&v190[104];
    uint64_t v158 = *(_OWORD *)&v190[8];
    char v159 = *(_OWORD *)&v190[24];
    long long v160 = *(_OWORD *)&v190[40];
    long long v161 = *(_OWORD *)&v190[56];
    v180[3] = *(_OWORD *)&v190[72];
    v180[4] = *(_OWORD *)&v190[88];
    unint64_t v181 = *(_OWORD *)&v190[104];
    uint64_t v179 = *(_OWORD *)&v190[8];
    v180[0] = *(_OWORD *)&v190[24];
    v180[2] = *(_OWORD *)&v190[56];
    v180[1] = *(_OWORD *)&v190[40];
    uint64_t v47 = v38;
    if (v38) {
      ScrollGeometry.outsetForAX(limit:)(v37);
    }
    CGFloat height = v37.height;
    CGFloat width = v37.width;
    ScrollGeometry.visibleRect.getter();
    long long v136 = v49;
    long long v137 = v48;
    CGFloat v134 = v51;
    long long v135 = v50;
    v180[3] = *(_OWORD *)&v190[72];
    v180[4] = *(_OWORD *)&v190[88];
    unint64_t v181 = *(_OWORD *)&v190[104];
    uint64_t v179 = *(_OWORD *)&v190[8];
    v180[0] = *(_OWORD *)&v190[24];
    v180[2] = *(_OWORD *)&v190[56];
    v180[1] = *(_OWORD *)&v190[40];
    ScrollGeometry.visibleRect.getter();
    unint64_t v53 = v52;
    uint64_t v55 = v54;
    uint64_t v57 = v56;
    uint64_t v59 = v58;
    Outputuint64_t Value = AGGraphGetOutputValue();
    if (LODWORD(MinX) != v139 || !OutputValue)
    {
      *((CGFloat *)v2 + 20) = v40;
      *((CGFloat *)v2 + 21) = v42;
      *((CGFloat *)v2 + 22) = v44;
      *((CGFloat *)v2 + 23) = v46;
      *((void *)v2 + 24) = v53;
      *((void *)v2 + 25) = v55;
      *((void *)v2 + 26) = v57;
      *((void *)v2 + 27) = v59;
    }
    *(unsigned char *)(*(void *)AGGraphGetValue() + 216) = 0;
    if (v138)
    {
      *((void *)v2 + 39) = 0;
      *((void *)v2 + 40) = 0;
      *((unsigned char *)v2 + 328) = 1;
    }
    v205.origin.double x = 0.0;
    v205.origin.CGFloat y = 0.0;
    v205.size.CGFloat width = 0.0;
    v205.size.CGFloat height = 0.0;
    v192.origin.CGFloat y = v136;
    v192.origin.double x = v137;
    v192.size.CGFloat height = v134;
    v192.size.CGFloat width = v135;
    uint64_t v61 = CGRectEqualToRect(v192, v205);
    *(void *)&v193.origin.double x = v148;
    *(void *)&v193.origin.CGFloat y = v147;
    v193.size.CGFloat height = v145;
    *(void *)&v193.size.CGFloat width = v146;
    IsNull = CGRectIsNull(v193);
    uint64_t v63 = v143;
    uint64_t v64 = v144;
    uint64_t v66 = height;
    uint64_t v65 = width;
    if (IsNull || (uint64_t v172 = v131, (AGGraphAnyInputsChanged() & 1) != 0))
    {
      uint64_t v67 = 0;
      uint64_t v68 = v47;
      if (v61) {
        goto LABEL_26;
      }
LABEL_16:
      uint64_t v69 = AGGraphGetValue();
      uint64_t v70 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
      uint64_t v166 = *MEMORY[0x1E4F1DB20];
      ++*(_DWORD *)(*(void *)v69 + 212);
      unint64_t v165 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v167 = v70;
      CGFloat v168 = 0;
      v170 = 0;
      CGFloat v169 = 0;
      long long v171 = 0;
      if (v67)
      {
        uint64_t v71 = v122;
        *char v122 = 0u;
        v71[1] = 0u;
      }
      else
      {
        uint64_t v179 = v155;
        v180[0] = v156;
        *(CGFloat *)&v180[1] = v64;
        *((CGFloat *)&v180[1] + 1) = v63;
        *(_OWORD *)&v184[96] = *(_OWORD *)&v190[192];
        *(_OWORD *)&v184[112] = *(_OWORD *)&v190[208];
        *(void *)&v184[128] = *(void *)&v190[224];
        *(_OWORD *)&v184[32] = *(_OWORD *)&v190[128];
        *(_OWORD *)&v184[48] = *(_OWORD *)&v190[144];
        *(_OWORD *)&v184[80] = *(_OWORD *)&v190[176];
        *(_OWORD *)&v184[64] = *(_OWORD *)&v190[160];
        char v182 = *(_OWORD *)&v190[64];
        CGRect v183 = *(_OWORD *)&v190[80];
        *(_OWORD *)&v184[16] = *(_OWORD *)&v190[112];
        *(_OWORD *)CGRect v184 = *(_OWORD *)&v190[96];
        v180[2] = *(_OWORD *)v190;
        v180[3] = *(_OWORD *)&v190[16];
        unint64_t v181 = *(_OWORD *)&v190[48];
        v180[4] = *(_OWORD *)&v190[32];
        *(CGFloat *)CGRect v185 = v65;
        *((CGFloat *)v185 + 1) = v66;
        LOBYTE(v185[1]) = v68;
        LazySubviewPlacements.placeSubviews(placementContext:in:for:)(&v179, (uint64_t *)&v165, &v154, *(uint64_t *)&v153);
      }
      char v76 = AGGraphGetCurrentAttribute();
      if (v76 != v123)
      {
        uint64_t v77 = v76;
        AGGraphGetValue();
        uint64_t v78 = (char *)*((void *)v2 + 16);
        uint64_t v79 = v171;
        swift_retain();
        LazyLayoutViewCache.commitPlacedSubviews(from:to:wasCancelled:context:)(v78, &v165, v79, v77);
        swift_release();
        uint64_t v80 = v165;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *((void *)v2 + 16) = v80;
        uint64_t v81 = swift_bridgeObjectRetain();
        unint64_t v82 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI25_LazyLayout_PlacedSubviewVG_So6CGRectVs5NeverOTg503_s7d4UI21fi30PlacementsV11updateValueyyFSo6j9VAA01_c13g1_H56D0Vcfu0_33_16ad7e5789174c81df73553da90b8b56AhFTf3nnnpk_nTf1cn_n(v81);
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        *((void *)v2 + 17) = v82;
        uint64_t v83 = v2[10];
        uint64_t v84 = *((void *)v2 + 6);
        uint64_t v85 = v2[14];
        unint64_t v86 = *((void *)v2 + 8);
        unint64_t v87 = *((void *)v2 + 11);
        long long v35 = *((void *)v2 + 16);
        uint64_t v88 = v2[36];
        char v89 = *(_OWORD *)(v2 + 66);
        v177[6] = *(_OWORD *)(v2 + 62);
        v177[7] = v89;
        uint64_t v90 = *(_OWORD *)(v2 + 66);
        v178[0] = *(_OWORD *)(v2 + 70);
        *(_OWORD *)((char *)v178 + 9) = *(_OWORD *)((char *)v2 + 289);
        uint64_t v91 = *(_OWORD *)(v2 + 50);
        v177[2] = *(_OWORD *)(v2 + 46);
        v177[3] = v91;
        char v92 = *(_OWORD *)(v2 + 58);
        v177[4] = *(_OWORD *)(v2 + 54);
        v177[5] = v92;
        uint64_t v93 = *(_OWORD *)(v2 + 42);
        v177[0] = *(_OWORD *)(v2 + 38);
        v177[1] = v93;
        uint64_t v94 = *((void *)v2 + 39);
        uint64_t v95 = *((void *)v2 + 40);
        uint64_t v96 = *((unsigned char *)v2 + 328);
        uint64_t v97 = *((_OWORD *)v2 + 1);
        long long v147 = *(_OWORD *)v2;
        uint64_t v148 = v97;
        uint64_t v179 = v147;
        v180[0] = v97;
        *(void *)&v180[1] = *((void *)v2 + 4);
        DWORD2(v180[1]) = v83;
        *(void *)&v180[2] = v84;
        DWORD2(v180[2]) = v85;
        *(_OWORD *)((char *)&v180[3] + 8) = *(_OWORD *)(v2 + 18);
        *(void *)&v180[3] = v86;
        *((void *)&v180[4] + 1) = v87;
        long long v98 = *((_OWORD *)v2 + 7);
        unint64_t v181 = *((_OWORD *)v2 + 6);
        char v182 = v98;
        *(void *)&CGRect v183 = v35;
        *((void *)&v183 + 1) = v82;
        *(_DWORD *)CGRect v184 = v88;
        long long v99 = *(_OWORD *)(v2 + 70);
        *(_OWORD *)&v184[120] = v90;
        v185[0] = v99;
        *(_OWORD *)((char *)v185 + 9) = *(_OWORD *)((char *)v2 + 289);
        *(_OWORD *)&v184[104] = *(_OWORD *)(v2 + 62);
        *(_OWORD *)&v184[24] = *(_OWORD *)(v2 + 42);
        *(_OWORD *)&v184[8] = *(_OWORD *)(v2 + 38);
        *(_OWORD *)&v184[88] = *(_OWORD *)(v2 + 58);
        *(_OWORD *)&v184[72] = *(_OWORD *)(v2 + 54);
        *(_OWORD *)&v184[56] = *(_OWORD *)(v2 + 50);
        *(_OWORD *)&v184[40] = *(_OWORD *)(v2 + 46);
        CGRect v186 = v94;
        v187 = v95;
        v188 = v96;
        outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)&v179);
        LazySubviewPlacements.mainID(subviews:)((uint64_t)&v176);
        outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)&v179);
        outlined release of PositionState((uint64_t)v177);
        *((_OWORD *)v2 + 17) = v176;
        uint64_t v132 = v147;
        uint64_t v67 = 1;
        goto LABEL_26;
      }
LABEL_55:
      __break(1u);
    }
    v180[3] = *(_OWORD *)&v190[72];
    v180[4] = *(_OWORD *)&v190[88];
    unint64_t v181 = *(_OWORD *)&v190[104];
    uint64_t v179 = *(_OWORD *)&v190[8];
    v180[0] = *(_OWORD *)&v190[24];
    v180[2] = *(_OWORD *)&v190[56];
    v180[1] = *(_OWORD *)&v190[40];
    uint64_t v68 = v47;
    if (v47) {
      ScrollGeometry.outsetForAX(limit:)((CGSize)__PAIR128__(*(unint64_t *)&v66, *(unint64_t *)&v65));
    }
    ScrollGeometry.visibleRect.getter();
    v206.origin.double x = 0.0;
    v206.origin.CGFloat y = 0.0;
    v206.size.CGFloat width = v64;
    v206.size.CGFloat height = v63;
    uint64_t v195 = CGRectIntersection(v194, v206);
    double x = v195.origin.x;
    CGFloat y = v195.origin.y;
    char v74 = v195.size.width;
    uint64_t v75 = v195.size.height;
    if (CGRectIsEmpty(v195))
    {
      if (!v61)
      {
        uint64_t v67 = 1;
        goto LABEL_16;
      }
      goto LABEL_50;
    }
    char v108 = *(double *)&v148;
    *(void *)&v196.origin.double x = v148;
    uint64_t v109 = *(double *)&v147;
    *(void *)&v196.origin.CGFloat y = v147;
    uint64_t v110 = v145;
    long long v111 = *(double *)&v146;
    *(void *)&v196.size.CGFloat width = v146;
    v196.size.CGFloat height = v145;
    v207.origin.double x = x;
    v207.origin.CGFloat y = y;
    v207.size.CGFloat width = v74;
    v207.size.CGFloat height = v75;
    if (CGRectContainsRect(v196, v207))
    {
      uint64_t v153 = v74 / 3.0;
      v197.origin.double x = x;
      v197.origin.CGFloat y = y;
      v197.size.CGFloat width = v74;
      v197.size.CGFloat height = v75;
      MinX = CGRectGetMinX(v197);
      v198.origin.double x = v108;
      v198.origin.CGFloat y = v109;
      v198.size.CGFloat width = v111;
      long long v112 = v153;
      v198.size.CGFloat height = v110;
      if (MinX - CGRectGetMinX(v198) < v112)
      {
        long long v113 = AGGraphGetValue();
        if ((*(unsigned char *)(*(void *)v113 + 216) & 2) == 0) {
          *(unsigned char *)(*(void *)v113 + 216) |= 2u;
        }
      }
      long long v114 = v75 / 3.0;
      *(void *)&v199.origin.double x = v148;
      *(void *)&v199.origin.CGFloat y = v147;
      v199.size.CGFloat height = v145;
      *(void *)&v199.size.CGFloat width = v146;
      MaxX = CGRectGetMaxX(v199);
      v200.origin.double x = x;
      v200.origin.CGFloat y = y;
      v200.size.CGFloat width = v74;
      v200.size.CGFloat height = v75;
      uint64_t v116 = CGRectGetMaxX(v200);
      uint64_t v64 = v144;
      if (MaxX - v116 < v112)
      {
        uint64_t v117 = AGGraphGetValue();
        if ((*(unsigned char *)(*(void *)v117 + 216) & 8) == 0) {
          *(unsigned char *)(*(void *)v117 + 216) |= 8u;
        }
      }
      v201.origin.double x = x;
      v201.origin.CGFloat y = y;
      v201.size.CGFloat width = v74;
      v201.size.CGFloat height = v75;
      MinY = CGRectGetMinY(v201);
      *(void *)&v202.origin.double x = v148;
      *(void *)&v202.origin.CGFloat y = v147;
      v202.size.CGFloat height = v145;
      *(void *)&v202.size.CGFloat width = v146;
      if (MinY - CGRectGetMinY(v202) < v114)
      {
        uint64_t v119 = AGGraphGetValue();
        if ((*(unsigned char *)(*(void *)v119 + 216) & 1) == 0) {
          *(unsigned char *)(*(void *)v119 + 216) |= 1u;
        }
      }
      *(void *)&v203.origin.double x = v148;
      *(void *)&v203.origin.CGFloat y = v147;
      v203.size.CGFloat height = v145;
      *(void *)&v203.size.CGFloat width = v146;
      MaxY = CGRectGetMaxY(v203);
      v204.origin.double x = x;
      v204.origin.CGFloat y = y;
      v204.size.CGFloat width = v74;
      v204.size.CGFloat height = v75;
      if (MaxY - CGRectGetMaxY(v204) < v114)
      {
        double v121 = AGGraphGetValue();
        uint64_t v65 = width;
        uint64_t v63 = v143;
        uint64_t v66 = height;
        if ((*(unsigned char *)(*(void *)v121 + 216) & 4) == 0) {
          *(unsigned char *)(*(void *)v121 + 216) |= 4u;
        }
LABEL_50:
        uint64_t v67 = 0;
        goto LABEL_26;
      }
      uint64_t v67 = 0;
      uint64_t v65 = width;
      uint64_t v63 = v143;
      uint64_t v66 = height;
    }
    else
    {
      uint64_t v67 = 0;
      uint64_t v63 = v143;
      uint64_t v64 = v144;
      uint64_t v66 = height;
      uint64_t v65 = width;
      if (!v61) {
        goto LABEL_16;
      }
    }
LABEL_26:
    uint64_t v172 = v35;
    if (*(unsigned char *)(*(void *)AGGraphGetValue() + 225) == 1)
    {
      long long v100 = v127;
      long long v101 = *(uint64_t (**)(uint64_t, uint64_t))(v127 + 32);
      swift_bridgeObjectRetain();
      int64x2_t v102 = v150;
      long long v103 = v101(v150, v100);
      long long v104 = AGGraphGetValue();
      char v105 = v149;
      v128(v149, v104, v102);
      v125(&v179, v102, v100);
      v124(v105, v102);
      if ((_BYTE)v103)
      {
        double v106 = v179;
        if (v179)
        {
          v180[3] = v162;
          v180[4] = v163;
          unint64_t v181 = v164;
          uint64_t v179 = v158;
          v180[0] = v159;
          v180[2] = v161;
          v180[1] = v160;
          Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)(&v179, (v106 << 31 >> 31) & v103, v103 & (v106 << 30 >> 31));
          long long v35 = v172;
          goto LABEL_32;
        }
      }
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    if ((v67 & 1) == 0 && AGGraphGetOutputValue())
    {
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
LABEL_32:
    *(void *)&uint64_t v179 = v35;
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
LABEL_35:
    CGSize size = v154.size;
    *((_OWORD *)v2 + 10) = v154.origin;
    *((CGSize *)v2 + 11) = size;
    uint64_t v179 = v155;
    v180[0] = v156;
    *(CGFloat *)&v180[1] = v64;
    *((CGFloat *)&v180[1] + 1) = v63;
    *(_OWORD *)&v184[96] = *(_OWORD *)&v190[192];
    *(_OWORD *)&v184[112] = *(_OWORD *)&v190[208];
    *(void *)&v184[128] = *(void *)&v190[224];
    *(_OWORD *)&v184[32] = *(_OWORD *)&v190[128];
    *(_OWORD *)&v184[48] = *(_OWORD *)&v190[144];
    *(_OWORD *)&v184[80] = *(_OWORD *)&v190[176];
    *(_OWORD *)&v184[64] = *(_OWORD *)&v190[160];
    char v182 = *(_OWORD *)&v190[64];
    CGRect v183 = *(_OWORD *)&v190[80];
    *(_OWORD *)&v184[16] = *(_OWORD *)&v190[112];
    *(_OWORD *)CGRect v184 = *(_OWORD *)&v190[96];
    v180[2] = *(_OWORD *)v190;
    v180[3] = *(_OWORD *)&v190[16];
    unint64_t v181 = *(_OWORD *)&v190[48];
    v180[4] = *(_OWORD *)&v190[32];
    *(CGFloat *)CGRect v185 = v65;
    *((CGFloat *)v185 + 1) = v66;
    LOBYTE(v185[1]) = v68;
    PositionState.update(context:)((uint64_t)&v179);
    swift_release();
  }
}

double LazySubviewPlacements.placeSubviews(placementContext:in:for:)(void *__src, uint64_t *a2, CGRect *a3, uint64_t a4)
{
  uint64_t v5 = v4;
  memcpy(__dst, __src, sizeof(__dst));
  memcpy(v75, __src, 0x129uLL);
  LazySubviewPlacements.resolvedPlacementContext(placementContext:)((unsigned int *)v75, a4, (uint64_t)v73);
  type metadata accessor for LazyLayoutViewCache();
  uint64_t v10 = *(void *)AGGraphGetValue();
  uint64_t v12 = *(void *)(a4 + 16);
  uint64_t v11 = *(void *)(a4 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v62[2] = v12;
  v62[3] = v11;
  v62[4] = v5;
  v62[5] = v73;
  v62[6] = a2;
  long long v14 = *(void (**)(uint64_t, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(*(void *)v10 + 288);
  swift_retain();
  v14(AssociatedTypeWitness, partial apply for closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:), v62, AssociatedTypeWitness, MEMORY[0x1E4FBC848] + 8);
  swift_release();
  if (*((unsigned char *)a2 + 40) == 1)
  {
    int v15 = *(_DWORD *)(v5 + 40);
    AGGraphGetValue();
    swift_retain();
    Swift::Bool v16 = LazyLayoutViewCache.mayInvalidate()();
    swift_release();
    if (v16 && v15 != *MEMORY[0x1E4F4E7A0])
    {
      uint64_t v17 = AGCreateWeakAttribute();
      *(void *)(swift_allocObject() + 16) = v17;
      static Update.enqueueAction(_:)();
      swift_release();
    }
  }
  memcpy(__srca, (const void *)v5, 0x149uLL);
  memcpy(v75, (const void *)v5, 0x149uLL);
  LazySubviewPlacements.transaction.getter();
  Transaction.scrollContentOffsetAdjustmentBehavior.getter();
  swift_release();
  int v18 = LOBYTE(v75[0]);
  AGGraphGetValue();
  unsigned __int8 v19 = *(unsigned char *)AGGraphGetValue();
  double v20 = __srca[36];
  double v21 = __srca[37];
  char v22 = LOBYTE(__srca[38]);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v24 = Value[1];
  v75[0] = *Value;
  v75[1] = v24;
  MEMORY[0x18C114450]();
  double v27 = 0.0;
  int v28 = 3;
  if (v22)
  {
    double v29 = 0.0;
  }
  else if (v20 != 0.0 || (double v29 = 0.0, v21 != 0.0))
  {
    int v28 = v18 == 2 ? 3 : 1;
    double v29 = 0.0;
    double v27 = v18 == 2 ? 0.0 : v21;
    if (v18 != 2) {
      double v29 = v20;
    }
  }
  double v30 = *((double *)a2 + 6);
  double v31 = *((double *)a2 + 7);
  BOOL v32 = v30 == 0.0;
  if (v31 != 0.0) {
    BOOL v32 = 0;
  }
  if (v18 == 2) {
    BOOL v32 = 1;
  }
  if (v32) {
    int v33 = v28;
  }
  else {
    int v33 = 0;
  }
  if (v32) {
    double v34 = -0.0;
  }
  else {
    double v34 = *((double *)a2 + 7);
  }
  double v35 = v27 + v34;
  if (v32) {
    double v36 = -0.0;
  }
  else {
    double v36 = *((double *)a2 + 6);
  }
  double v37 = v29 + v36;
  if (v29 + v36 == 0.0)
  {
    BOOL v38 = v35 != 0.0 || v18 == 2;
    if (!v38 && (__srca[32] != 0.0 || __srca[33] != 0.0) && (v25 != 0.0 || v26 != 0.0))
    {
      double v39 = vabdd_f64(v25, __srca[32]);
      double v40 = vabdd_f64(v26, __srca[33]);
      if (v39 >= 0.01 || v40 >= 0.01)
      {
        memcpy(v75, __srca, 0x149uLL);
        char v41 = *((unsigned char *)a2 + 40);
        char v42 = *((unsigned char *)a2 + 64);
        uint64_t v66 = *a2;
        long long v67 = *(_OWORD *)(a2 + 1);
        long long v68 = *(_OWORD *)(a2 + 3);
        char v69 = v41;
        double v70 = v30;
        double v71 = v31;
        char v72 = v42;
        memcpy(v63, __dst, 0x129uLL);
        outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__srca);
        swift_bridgeObjectRetain();
        LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)((uint64_t)&v66, v63);
        double v44 = v43;
        double v46 = v45;
        swift_bridgeObjectRelease();
        outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__srca);
        if (v46 == 0.0) {
          int v47 = v33;
        }
        else {
          int v47 = 2;
        }
        if (v46 == 0.0) {
          double v48 = v35;
        }
        else {
          double v48 = v46;
        }
        if (v46 == 0.0) {
          double v49 = v37;
        }
        else {
          double v49 = v44;
        }
        if (v44 == 0.0) {
          int v33 = v47;
        }
        else {
          int v33 = 2;
        }
        if (v44 == 0.0) {
          double v35 = v48;
        }
        else {
          double v35 = v46;
        }
        if (v44 == 0.0) {
          double v37 = v49;
        }
        else {
          double v37 = v44;
        }
      }
    }
  }
  if ((v19 & (v37 != 0.0)) != 0) {
    double v50 = -v37;
  }
  else {
    double v50 = v37;
  }
  if ((v35 != 0.0 || v50 != 0.0) && v33 != 3)
  {
    specialized LazySubviewPlacements.logTranslation(_:reason:)(v33, v50, v35);
    *a3 = CGRectOffset(*a3, v50, v35);
    *(double *)(v5 + 312) = v50;
    *(double *)(v5 + 320) = v35;
    *(unsigned char *)(v5 + 328) = 0;
    AGGraphClearUpdate();
    memcpy(v75, (const void *)v5, 0x149uLL);
    LazySubviewPlacements.parent.getter((uint64_t)v63);
    AGGraphSetUpdate();
    outlined init with copy of Scrollable?((uint64_t)v63, (uint64_t)v75);
    uint64_t v53 = *((void *)&v75[1] + 1);
    if (!*((void *)&v75[1] + 1))
    {
      outlined destroy of Scrollable?((uint64_t)v63);
      outlined destroy of Scrollable?((uint64_t)v75);
      if (a2[8]) {
        goto LABEL_72;
      }
LABEL_74:
      uint64_t v55 = a2 + 1;
      unint64_t v58 = a2 + 2;
      uint64_t v57 = a2 + 3;
      uint64_t v56 = (double *)(a2 + 4);
      goto LABEL_75;
    }
    uint64_t v54 = *(void *)&v75[2];
    __swift_project_boxed_opaque_existential_1(v75, *((uint64_t *)&v75[1] + 1));
    BOOL v64 = v33 == 1;
    (*(void (**)(BOOL *, uint64_t, uint64_t, double, double))(v54 + 32))(&v64, v53, v54, v50, v35);
    outlined destroy of Scrollable?((uint64_t)v63);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
  }
  if ((a2[8] & 1) == 0) {
    goto LABEL_74;
  }
LABEL_72:
  uint64_t v55 = (void *)MEMORY[0x1E4F1DB20];
  uint64_t v56 = (double *)(MEMORY[0x1E4F1DB20] + 24);
  uint64_t v57 = (uint64_t *)(MEMORY[0x1E4F1DB20] + 16);
  unint64_t v58 = (uint64_t *)(MEMORY[0x1E4F1DB20] + 8);
LABEL_75:
  double result = *v56;
  uint64_t v60 = *v57;
  uint64_t v61 = *v58;
  *(void *)(v5 + 96) = *v55;
  *(void *)(v5 + 104) = v61;
  *(void *)(v5 + 112) = v60;
  *(double *)(v5 + 120) = result;
  *(void *)(v5 + 288) = 0;
  *(void *)(v5 + 296) = 0;
  *(unsigned char *)(v5 + 304) = 1;
  return result;
}

uint64_t LazySubviewPlacements.mainID(subviews:)@<X0>(uint64_t a1@<X8>)
{
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_1(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  swift_getWitnessTable();
  Sequence.min(by:)();
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_1(0, &lazy cache variable for type metadata for _LazyLayout_PlacedSubview?, (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB718]);
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))closure #2 in LazySubviewPlacements.mainID(subviews:), 0, MEMORY[0x1E4FBC248], MEMORY[0x1E4F3F6E8], v2, a1);
  return swift_release();
}

uint64_t Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)(long long *a1, unint64_t a2, int a3)
{
  uint64_t v4 = v3;
  int v5 = a3;
  unint64_t v6 = a2;
  long long v7 = a1[5];
  v83[4] = a1[4];
  v83[5] = v7;
  v83[6] = a1[6];
  long long v8 = a1[1];
  v83[0] = *a1;
  v83[1] = v8;
  long long v9 = a1[3];
  void v83[2] = a1[2];
  v83[3] = v9;
  uint64_t v10 = (*v3)[2];
  if (v10)
  {
    unsigned int v72 = a2;
    char v74 = v4;
    uint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = MEMORY[0x1E4FBC868];
    uint64_t v15 = v11 + 48;
    uint64_t v75 = v10;
    do
    {
      uint64_t v20 = *(void *)(v15 - 16);
      if (*(unsigned char *)(v20 + 164) != 1)
      {
        uint64_t v79 = (uint64_t)v12;
        char v21 = *(unsigned char *)v15;
        uint64_t v22 = *(void *)(v15 + 8);
        char v23 = *(unsigned char *)(v15 + 16);
        char v76 = *(unsigned char *)(v20 + 165);
        int v77 = *(unsigned __int8 *)(v20 + 166);
        unsigned int v78 = *(_DWORD *)(v20 + 160);
        *(void *)&long long v80 = *(void *)(v15 - 8);
        BYTE8(v80) = v21;
        *(void *)&long long v81 = v22;
        BYTE8(v81) = v23;
        long long v24 = *(_OWORD *)(v15 + 40);
        *(_OWORD *)unint64_t v82 = *(_OWORD *)(v15 + 24);
        *(_OWORD *)&v82[16] = v24;
        swift_retain_n();
        if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
        {
          static LayoutComputer.defaultValue.getter();
        }
        else
        {
          AGGraphGetValue();
          swift_retain();
        }
        LayoutComputer.sizeThatFits(_:)();
        unint64_t v26 = v25;
        unint64_t v28 = v27;
        swift_release();
        CGPoint v29 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v28, v26));
        long long v80 = *(_OWORD *)(v20 + 32);
        if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
        {
          static LayoutComputer.defaultValue.getter();
        }
        else
        {
          uint64_t Value = (void *)AGGraphGetValue();
          uint64_t v31 = Value[1];
          *(void *)&long long v80 = *Value;
          *((void *)&v80 + 1) = v31;
          swift_retain();
        }
        BYTE8(v80) = v21;
        *(void *)&long long v81 = v22;
        BYTE8(v81) = v23;
        LayoutComputer.sizeThatFits(_:)();
        CGFloat v33 = v32;
        CGFloat v35 = v34;
        swift_release();
        swift_release();
        outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v79);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v80 = v14;
        unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v78);
        uint64_t v39 = *(void *)(v14 + 16);
        BOOL v40 = (v37 & 1) == 0;
        uint64_t v41 = v39 + v40;
        if (__OFADD__(v39, v40))
        {
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
          goto LABEL_71;
        }
        char v42 = v37;
        if (*(void *)(v14 + 24) >= v41)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeDictionary.copy()();
            uint64_t v14 = v80;
          }
        }
        else
        {
          specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v41, isUniquelyReferenced_nonNull_native);
          uint64_t v14 = v80;
          unint64_t v43 = specialized __RawDictionaryStorage.find<A>(_:)(v78);
          if ((v42 & 1) != (v44 & 1)) {
            goto LABEL_72;
          }
          unint64_t v38 = v43;
        }
        swift_bridgeObjectRelease();
        if (v42)
        {
          unint64_t v45 = v38 << 6;
          swift_bridgeObjectRetain();
        }
        else
        {
          *(void *)(v14 + 8 * (v38 >> 6) + 64) |= 1 << v38;
          *(_DWORD *)(*(void *)(v14 + 48) + 4 * v38) = v78;
          unint64_t v45 = v38 << 6;
          unint64_t v46 = *(void *)(v14 + 56) + (v38 << 6);
          *(_OWORD *)unint64_t v46 = xmmword_188357310;
          *(_OWORD *)(v46 + 16) = xmmword_188357310;
          *(void *)(v46 + 32) = 0;
          *(unsigned char *)(v46 + 40) = 1;
          *(void *)(v46 + 48) = 0;
          *(unsigned char *)(v46 + 56) = 1;
          uint64_t v47 = *(void *)(v14 + 16);
          uint64_t v48 = v47 + 1;
          BOOL v49 = __OFADD__(v47, 1);
          swift_bridgeObjectRetain();
          if (v49) {
            goto LABEL_70;
          }
          *(void *)(v14 + 16) = v48;
        }
        uint64_t v50 = *(void *)(v14 + 56);
        swift_bridgeObjectRelease();
        uint64_t v51 = v50 + v45;
        if (v76)
        {
          uint64_t v52 = *(void *)(v51 + 32);
          if (*(unsigned char *)(v51 + 40)) {
            uint64_t v52 = v13;
          }
          *(void *)(v51 + 32) = v52;
          *(unsigned char *)(v51 + 40) = 0;
        }
        else
        {
          double v53 = *(double *)v51;
          v87.origin.double x = v29.x;
          v87.origin.CGFloat y = v29.y;
          v87.size.CGFloat width = v33;
          v87.size.CGFloat height = v35;
          double MinX = CGRectGetMinX(v87);
          if (MinX >= v53) {
            double MinX = v53;
          }
          *(double *)uint64_t v51 = MinX;
          double v55 = *(double *)(v51 + 16);
          v88.origin.double x = v29.x;
          v88.origin.CGFloat y = v29.y;
          v88.size.CGFloat width = v33;
          v88.size.CGFloat height = v35;
          double MinY = CGRectGetMinY(v88);
          if (MinY >= v55) {
            double MinY = v55;
          }
          *(double *)(v51 + 16) = MinY;
        }
        uint64_t v10 = v75;
        if (v77)
        {
          uint64_t v57 = *(void *)(v51 + 48);
          if (*(unsigned char *)(v51 + 56)) {
            uint64_t v57 = v13;
          }
          *(void *)(v51 + 48) = v57;
          *(unsigned char *)(v51 + 56) = 0;
        }
        else
        {
          double v16 = *(double *)(v51 + 8);
          v85.origin.double x = v29.x;
          v85.origin.CGFloat y = v29.y;
          v85.size.CGFloat width = v33;
          v85.size.CGFloat height = v35;
          double MaxX = CGRectGetMaxX(v85);
          if (v16 > MaxX) {
            double MaxX = v16;
          }
          *(double *)(v51 + 8) = MaxX;
          double v18 = *(double *)(v51 + 24);
          v86.origin.double x = v29.x;
          v86.origin.CGFloat y = v29.y;
          v86.size.CGFloat width = v33;
          v86.size.CGFloat height = v35;
          double MaxY = CGRectGetMaxY(v86);
          if (v18 > MaxY) {
            double MaxY = v18;
          }
          *(double *)(v51 + 24) = MaxY;
        }
        swift_release();
        uint64_t v12 = specialized thunk for @callee_guaranteed () -> (@unowned PinnedSection);
      }
      ++v13;
      v15 += 72;
    }
    while (v10 != v13);
    swift_bridgeObjectRelease();
    uint64_t v4 = v74;
    unint64_t v6 = v72;
    int v5 = a3;
  }
  else
  {
    uint64_t v12 = 0;
    uint64_t v14 = MEMORY[0x1E4FBC868];
  }
  int64_t v58 = 0;
  uint64_t v59 = v14 + 64;
  uint64_t v60 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v61 = -1;
  if (v60 < 64) {
    uint64_t v61 = ~(-1 << v60);
  }
  unint64_t v62 = v61 & *(void *)(v14 + 64);
  int64_t v63 = (unint64_t)(v60 + 63) >> 6;
  while (1)
  {
    if (v62)
    {
      unint64_t v64 = __clz(__rbit64(v62));
      v62 &= v62 - 1;
      unint64_t v65 = v64 | (v58 << 6);
      goto LABEL_49;
    }
    int64_t v68 = v58 + 1;
    if (__OFADD__(v58, 1))
    {
      __break(1u);
      goto LABEL_69;
    }
    if (v68 >= v63)
    {
LABEL_65:
      swift_release();
      return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v12);
    }
    unint64_t v69 = *(void *)(v59 + 8 * v68);
    ++v58;
    if (!v69)
    {
      int64_t v58 = v68 + 1;
      if (v68 + 1 >= v63) {
        goto LABEL_65;
      }
      unint64_t v69 = *(void *)(v59 + 8 * v58);
      if (!v69)
      {
        int64_t v58 = v68 + 2;
        if (v68 + 2 >= v63) {
          goto LABEL_65;
        }
        unint64_t v69 = *(void *)(v59 + 8 * v58);
        if (!v69) {
          break;
        }
      }
    }
LABEL_64:
    unint64_t v62 = (v69 - 1) & v69;
    unint64_t v65 = __clz(__rbit64(v69)) + (v58 << 6);
LABEL_49:
    uint64_t v66 = (long long *)(*(void *)(v14 + 56) + (v65 << 6));
    long long v67 = v66[1];
    long long v80 = *v66;
    long long v81 = v67;
    *(_OWORD *)unint64_t v82 = v66[2];
    *(_OWORD *)&v82[9] = *(long long *)((char *)v66 + 41);
    commitSection #1 <A>(_:) in Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)((uint64_t)&v80, v6, v4, v83, v5);
  }
  int64_t v70 = v68 + 3;
  if (v70 >= v63) {
    goto LABEL_65;
  }
  unint64_t v69 = *(void *)(v59 + 8 * v70);
  if (v69)
  {
    int64_t v58 = v70;
    goto LABEL_64;
  }
  while (1)
  {
    int64_t v58 = v70 + 1;
    if (__OFADD__(v70, 1)) {
      break;
    }
    if (v58 >= v63) {
      goto LABEL_65;
    }
    unint64_t v69 = *(void *)(v59 + 8 * v58);
    ++v70;
    if (v69) {
      goto LABEL_64;
    }
  }
LABEL_71:
  __break(1u);
LABEL_72:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

double LazySubviewPlacements.resolvedPlacementContext(placementContext:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6 = *a1;
  unsigned int v7 = a1[1];
  unsigned int v9 = a1[2];
  unsigned int v8 = a1[3];
  uint64_t v10 = *((void *)a1 + 2);
  uint64_t v11 = *((void *)a1 + 3);
  uint64_t v12 = *((void *)a1 + 4);
  uint64_t v13 = *((void *)a1 + 5);
  unsigned int v14 = a1[12];
  uint64_t v16 = *((void *)a1 + 21);
  uint64_t v15 = *((void *)a1 + 22);
  uint64_t v18 = *((void *)a1 + 23);
  uint64_t v17 = *((void *)a1 + 24);
  uint64_t v19 = *((void *)a1 + 25);
  uint64_t v20 = *((void *)a1 + 26);
  uint64_t v21 = *((void *)a1 + 27);
  uint64_t v22 = *((void *)a1 + 28);
  uint64_t v24 = *((void *)a1 + 29);
  uint64_t v23 = *((void *)a1 + 30);
  uint64_t v25 = *((void *)a1 + 31);
  uint64_t v26 = *((void *)a1 + 32);
  uint64_t v27 = *((void *)a1 + 33);
  uint64_t v28 = *((void *)a1 + 34);
  unint64_t v29 = *((void *)a1 + 35);
  double v30 = *((double *)a1 + 36);
  char v31 = *((unsigned char *)a1 + 296);
  LODWORD(v97) = *a1;
  *(void *)((char *)&v97 + 4) = __PAIR64__(v9, v7);
  unsigned int v68 = v8;
  HIDWORD(v97) = v8;
  uint64_t v98 = v10;
  uint64_t v99 = v11;
  uint64_t v91 = v13;
  uint64_t v92 = v12;
  uint64_t v100 = v12;
  uint64_t v101 = v13;
  long long v107 = *(_OWORD *)(a1 + 29);
  long long v108 = *(_OWORD *)(a1 + 33);
  long long v109 = *(_OWORD *)(a1 + 37);
  unsigned int v32 = a1[41];
  unsigned int v102 = v14;
  unsigned int v110 = v32;
  long long v103 = *(_OWORD *)(a1 + 13);
  long long v104 = *(_OWORD *)(a1 + 17);
  long long v105 = *(_OWORD *)(a1 + 21);
  long long v106 = *(_OWORD *)(a1 + 25);
  uint64_t v111 = v16;
  uint64_t v112 = v15;
  uint64_t v113 = v18;
  uint64_t v87 = v17;
  uint64_t v89 = v19;
  uint64_t v114 = v17;
  uint64_t v115 = v19;
  uint64_t v70 = v20;
  uint64_t v116 = v20;
  uint64_t v81 = v22;
  uint64_t v83 = v21;
  uint64_t v117 = v21;
  uint64_t v118 = v22;
  uint64_t v77 = v28;
  uint64_t v79 = v24;
  uint64_t v119 = v24;
  uint64_t v120 = v23;
  uint64_t v121 = v25;
  uint64_t v66 = v26;
  uint64_t v122 = v26;
  uint64_t v123 = v27;
  uint64_t v124 = v28;
  double v93 = v30;
  unint64_t v94 = v29;
  unint64_t v125 = v29;
  double v126 = v30;
  char v127 = v31;
  LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:)(&v97, a2, (uint64_t)v128);
  outlined init with take of Int?((uint64_t)v128, (uint64_t)&v97, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  outlined init with take of Int?((uint64_t)&v97, (uint64_t)v128, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)v128) == 1)
  {
    long long v33 = *(_OWORD *)(a1 + 33);
    *(_OWORD *)((char *)&__dst[14] + 4) = *(_OWORD *)(a1 + 29);
    *(_OWORD *)((char *)&__dst[16] + 4) = v33;
    *(_OWORD *)((char *)&__dst[18] + 4) = *(_OWORD *)(a1 + 37);
    long long v34 = *(_OWORD *)(a1 + 17);
    *(_OWORD *)((char *)&__dst[6] + 4) = *(_OWORD *)(a1 + 13);
    *(_OWORD *)((char *)&__dst[8] + 4) = v34;
    long long v35 = *(_OWORD *)(a1 + 25);
    *(_OWORD *)((char *)&__dst[10] + 4) = *(_OWORD *)(a1 + 21);
    char v36 = v31 & 1;
    __dst[0] = __PAIR64__(v7, v6);
    __dst[1] = __PAIR64__(v68, v9);
    __dst[2] = v10;
    __dst[3] = v11;
    __dst[4] = v92;
    __dst[5] = v91;
    unsigned int v37 = a1[41];
    LODWORD(__dst[6]) = v14;
    HIDWORD(__dst[20]) = v37;
    *(_OWORD *)((char *)&__dst[12] + 4) = v35;
    uint64_t v85 = v16;
    __dst[21] = v16;
    __dst[22] = v15;
    __dst[23] = v18;
    uint64_t v38 = v87;
    __dst[24] = v87;
    __dst[25] = v89;
    uint64_t v39 = v70;
    __dst[26] = v70;
    uint64_t v41 = v81;
    uint64_t v40 = v83;
    __dst[27] = v83;
    __dst[28] = v81;
    uint64_t v42 = v79;
    __dst[29] = v79;
    uint64_t v73 = v25;
    uint64_t v74 = v23;
    __dst[30] = v23;
    __dst[31] = v25;
    uint64_t v43 = v66;
    __dst[32] = v66;
    uint64_t v72 = v27;
    __dst[33] = v27;
    __dst[34] = v77;
    __dst[35] = v94;
    *(double *)&__dst[36] = v93;
    LOBYTE(__dst[37]) = v31;
    unsigned int v44 = v14;
    unsigned int v45 = v6;
    uint64_t v75 = v15;
    uint64_t v76 = v18;
    unsigned int v46 = v9;
    uint64_t v47 = v89;
    unsigned int v48 = v68;
    uint64_t v49 = v77;
    if ((*(unsigned char *)(v3 + 328) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v64 = v85;
    uint64_t v62 = v73;
    uint64_t v63 = v74;
    uint64_t v61 = v72;
    goto LABEL_8;
  }
  outlined init with take of Int?((uint64_t)&v97, (uint64_t)__src, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  char v36 = __src[37];
  double v93 = *(double *)&__src[36];
  unint64_t v94 = __src[35];
  uint64_t v75 = __src[22];
  uint64_t v76 = __src[23];
  uint64_t v85 = __src[21];
  uint64_t v39 = __src[26];
  uint64_t v73 = __src[31];
  uint64_t v74 = __src[30];
  uint64_t v43 = __src[32];
  uint64_t v72 = __src[33];
  uint64_t v49 = __src[34];
  unsigned int v44 = __src[6];
  uint64_t v11 = __src[3];
  uint64_t v92 = __src[4];
  uint64_t v91 = __src[5];
  uint64_t v10 = __src[2];
  unsigned int v45 = __src[0];
  unsigned int v7 = HIDWORD(__src[0]);
  unsigned int v46 = __src[1];
  unsigned int v48 = HIDWORD(__src[1]);
  memcpy(__dst, __src, 0x129uLL);
  uint64_t v42 = __src[29];
  uint64_t v41 = __src[28];
  uint64_t v40 = __src[27];
  uint64_t v38 = __src[24];
  uint64_t v47 = __src[25];
  if (*(unsigned char *)(v3 + 328)) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v78 = v49;
  uint64_t v80 = v42;
  uint64_t v82 = v41;
  uint64_t v84 = v40;
  uint64_t v50 = v38;
  uint64_t v67 = v10;
  uint64_t v69 = v11;
  unint64_t v51 = *(void *)(v3 + 312);
  unint64_t v52 = *(void *)(v3 + 320);
  outlined init with take of Int?((uint64_t)&v97, (uint64_t)__src, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)__src) == 1)
  {
    ScrollGeometry.visibleRect.getter();
    ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(v52, v51), (CGSize)__PAIR128__(*(unint64_t *)&v93, v94));
    ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(v52, v51), (CGSize)__PAIR128__(*(unint64_t *)&v93, v94));
    uint64_t v86 = __dst[21];
    uint64_t v88 = __dst[24];
    uint64_t v90 = __dst[25];
    uint64_t v71 = __dst[26];
    uint64_t v53 = __dst[27];
    uint64_t v54 = __dst[28];
    uint64_t v55 = __dst[29];
    uint64_t v56 = __dst[30];
    uint64_t v57 = __dst[31];
    uint64_t v58 = __dst[32];
    uint64_t v59 = __dst[33];
    uint64_t v60 = __dst[34];
    uint64_t v75 = __dst[22];
    uint64_t v76 = __dst[23];
    ScrollGeometry.visibleRect.getter();
    uint64_t v42 = v55;
    uint64_t v41 = v54;
    uint64_t v40 = v53;
    uint64_t v38 = v88;
    uint64_t v47 = v90;
    uint64_t v61 = v59;
    uint64_t v62 = v57;
    uint64_t v49 = v60;
    uint64_t v63 = v56;
    uint64_t v43 = v58;
    uint64_t v64 = v86;
    uint64_t v10 = v67;
    uint64_t v11 = v69;
    uint64_t v39 = v71;
  }
  else
  {
    uint64_t v11 = v69;
    uint64_t v40 = v84;
    uint64_t v64 = v85;
    uint64_t v38 = v50;
    uint64_t v42 = v80;
    uint64_t v41 = v82;
    uint64_t v62 = v73;
    uint64_t v63 = v74;
    uint64_t v61 = v72;
    uint64_t v49 = v78;
  }
LABEL_8:
  *(_DWORD *)a3 = v45;
  *(_DWORD *)(a3 + 4) = v7;
  *(_DWORD *)(a3 + 8) = v46;
  *(_DWORD *)(a3 + 12) = v48;
  *(void *)(a3 + 16) = v10;
  *(void *)(a3 + 24) = v11;
  *(void *)(a3 + 32) = v92;
  *(void *)(a3 + 40) = v91;
  *(_DWORD *)(a3 + 48) = v44;
  *(_OWORD *)(a3 + 56) = *(_OWORD *)&__dst[7];
  *(_OWORD *)(a3 + 72) = *(_OWORD *)&__dst[9];
  *(_OWORD *)(a3 + 88) = *(_OWORD *)&__dst[11];
  *(_OWORD *)(a3 + 104) = *(_OWORD *)&__dst[13];
  *(_OWORD *)(a3 + 120) = *(_OWORD *)&__dst[15];
  *(_OWORD *)(a3 + 136) = *(_OWORD *)&__dst[17];
  *(_OWORD *)(a3 + 152) = *(_OWORD *)&__dst[19];
  *(void *)(a3 + 168) = v64;
  *(void *)(a3 + 176) = v75;
  *(void *)(a3 + 184) = v76;
  *(void *)(a3 + 192) = v38;
  *(void *)(a3 + 200) = v47;
  *(void *)(a3 + 208) = v39;
  *(void *)(a3 + 216) = v40;
  *(void *)(a3 + 224) = v41;
  *(void *)(a3 + 232) = v42;
  *(void *)(a3 + 240) = v63;
  *(void *)(a3 + 248) = v62;
  *(void *)(a3 + 256) = v43;
  *(void *)(a3 + 264) = v61;
  *(void *)(a3 + 272) = v49;
  double result = v93;
  *(void *)(a3 + 280) = v94;
  *(double *)(a3 + 288) = v93;
  *(unsigned char *)(a3 + 296) = v36;
  return result;
}

uint64_t closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v18 = a4;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(type metadata accessor for LazySubviewPlacements() + 16);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16))(v12, Value, v13);
  type metadata accessor for LazyLayoutViewCache();
  uint64_t result = AGGraphGetCurrentAttribute();
  if (result == *MEMORY[0x1E4F4E7A0])
  {
    __break(1u);
  }
  else
  {
    int v16 = result;
    AGGraphGetValue();
    swift_retain();
    LazyLayoutViewCache.subviews(context:)(v16, (uint64_t)v20);
    swift_release();
    memcpy(v19, a3, 0x129uLL);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 64))(v20, v19, a1, v18, a5, a6);
    outlined destroy of _LazyLayout_Subviews((uint64_t)v20);
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a5);
  }
  return result;
}

uint64_t LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  double v58 = *((double *)a2 + 3);
  double v59 = *((double *)a2 + 2);
  long long v5 = a2[8];
  long long v6 = a2[9];
  long long v7 = a2[6];
  v66[7] = a2[7];
  v66[8] = v5;
  v66[9] = v6;
  *(void *)&v66[10] = *((void *)a2 + 20);
  long long v8 = a2[4];
  long long v9 = a2[5];
  long long v10 = a2[2];
  v66[3] = a2[3];
  v66[4] = v8;
  v66[5] = v9;
  v66[6] = v7;
  v66[0] = v4;
  v66[2] = v10;
  uint64_t v12 = *((void *)a2 + 21);
  uint64_t v11 = *((void *)a2 + 22);
  uint64_t v14 = *((void *)a2 + 23);
  uint64_t v13 = *((void *)a2 + 24);
  uint64_t v16 = *((void *)a2 + 25);
  uint64_t v15 = *((void *)a2 + 26);
  uint64_t v17 = *((void *)a2 + 27);
  uint64_t v18 = *((void *)a2 + 28);
  uint64_t v62 = *((void *)a2 + 30);
  uint64_t v64 = *((void *)a2 + 29);
  uint64_t v60 = *((void *)a2 + 31);
  uint64_t v54 = *((void *)a2 + 33);
  uint64_t v56 = *((void *)a2 + 32);
  uint64_t v53 = *((void *)a2 + 34);
  *(_OWORD *)((char *)&v66[17] + 8) = *(long long *)((char *)a2 + 280);
  BYTE8(v66[18]) = *((unsigned char *)a2 + 296);
  memcpy(v75, v2, 0x149uLL);
  *(double *)&v66[1] = v59;
  *((double *)&v66[1] + 1) = v58;
  *(void *)&long long v50 = v12;
  *((void *)&v50 + 1) = v11;
  *((void *)&v66[10] + 1) = v12;
  *(void *)&v66[11] = v11;
  *((void *)&v66[11] + 1) = v14;
  *(void *)&v66[12] = v13;
  *(void *)&long long v51 = v16;
  *((void *)&v51 + 1) = v15;
  *((void *)&v66[12] + 1) = v16;
  *(void *)&v66[13] = v15;
  *(void *)&long long v52 = v17;
  *((void *)&v52 + 1) = v18;
  *((void *)&v66[13] + 1) = v17;
  *(void *)&v66[14] = v18;
  *((void *)&v66[14] + 1) = v64;
  *(void *)&v66[15] = v62;
  *((void *)&v66[15] + 1) = v60;
  *(void *)&v66[16] = v56;
  *((void *)&v66[16] + 1) = v54;
  *(void *)&v66[17] = v53;
  uint64_t result = _LazyLayout_PlacementContext.allowsTranslations.getter();
  if ((result & 1) == 0) {
    return result;
  }
  AGGraphClearUpdate();
  closure #1 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)((uint64_t)v75, (BOOL *)v66);
  uint64_t result = AGGraphSetUpdate();
  if (v66[0]) {
    return result;
  }
  uint64_t v20 = v75[16];
  MEMORY[0x1F4188790](result);
  swift_bridgeObjectRetain();
  specialized Sequence.min(by:)((uint64_t (*)(uint64_t *, uint64_t *))partial apply for closure #2 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:), v20, v66);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v21 = *((void *)&v66[0] + 1);
  if (!*((void *)&v66[0] + 1)) {
    return result;
  }
  uint64_t v22 = *(void *)a1;
  uint64_t v23 = *(void *)(*(void *)a1 + 16);
  if (!v23) {
    return swift_release();
  }
  unint64_t v48 = *(void *)&v66[0];
  outlined retain of [Text.Modifier](a1);
  uint64_t v49 = a1;
  outlined retain of [Text.Modifier](a1);
  for (unint64_t i = (char *)(v22 + 48); ; i += 72)
  {
    uint64_t v25 = *((void *)i - 2);
    uint64_t v26 = *((void *)i - 1);
    char v27 = *i;
    uint64_t v28 = *((void *)i + 1);
    char v29 = i[16];
    uint64_t v31 = *((void *)i + 3);
    uint64_t v30 = *((void *)i + 4);
    uint64_t v32 = *((void *)i + 5);
    uint64_t v33 = *((void *)i + 6);
    unsigned __int8 v34 = dword_1ED476C2C;
    if ((dword_1ED476C2C & ~dword_1ED476C28) == 0) {
      unsigned __int8 v34 = 0;
    }
    if (*(unsigned char *)(v21 + 165) == 1 && ((v34 | dword_1ED476C28) & 1) != 0
      || *(unsigned char *)(v21 + 166) == 1 && ((v34 | dword_1ED476C28) & 2) != 0)
    {
      goto LABEL_6;
    }
    uint64_t v35 = *(void *)(v21 + 144);
    *(void *)&v66[0] = *(void *)(v21 + 136);
    *((void *)&v66[0] + 1) = v35;
    uint64_t v36 = *(void *)(v25 + 144);
    uint64_t v67 = *(void *)(v25 + 136);
    uint64_t v68 = v36;
    swift_retain();
    if (static _ViewList_ID.== infix(_:_:)()) {
      break;
    }
    swift_release();
LABEL_6:
    if (!--v23)
    {
      outlined release of _LazyLayout_Placements(v49);
      outlined release of _LazyLayout_Placements(v49);
      return swift_release();
    }
  }
  outlined release of _LazyLayout_Placements(v49);
  outlined release of _LazyLayout_Placements(v49);
  uint64_t v37 = *(void *)(v25 + 144);
  *(void *)&v66[0] = *(void *)(v25 + 136);
  *((void *)&v66[0] + 1) = v37;
  uint64_t v38 = *(void *)(v21 + 144);
  uint64_t v67 = *(void *)(v21 + 136);
  uint64_t v68 = v38;
  if ((static _ViewList_ID.== infix(_:_:)() & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  v66[0] = v50;
  *(void *)&v66[1] = v14;
  *((void *)&v66[1] + 1) = v13;
  v66[2] = v51;
  v66[3] = v52;
  *(void *)&v66[4] = v64;
  *((void *)&v66[4] + 1) = v62;
  *(void *)&v66[5] = v60;
  *((void *)&v66[5] + 1) = v56;
  *(void *)&v66[6] = v54;
  *((void *)&v66[6] + 1) = v53;
  uint64_t result = ScrollGeometry.visibleRect.getter();
  if ((v48 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_33;
  }
  double v63 = v40;
  double v65 = v39;
  if (v48 >= *(void *)(v75[17] + 16))
  {
LABEL_33:
    __break(1u);
    return result;
  }
  uint64_t v41 = v75[17] + 32 * v48;
  double v61 = *(double *)(v41 + 40);
  double v42 = *(double *)&v75[30];
  double v55 = *(double *)&v75[31];
  double v57 = *(double *)&v75[21];
  double v43 = *(double *)(v41 + 32) - *(double *)&v75[20];
  uint64_t v67 = v26;
  LOBYTE(v68) = v27;
  uint64_t v69 = v28;
  char v70 = v29;
  uint64_t v71 = v31;
  uint64_t v72 = v30;
  uint64_t v73 = v32;
  uint64_t v74 = v33;
  *(void *)&v66[0] = v25;
  *((void *)&v66[0] + 1) = v26;
  LOBYTE(v66[1]) = v27;
  *((void *)&v66[1] + 1) = v28;
  LOBYTE(v66[2]) = v29;
  *((void *)&v66[2] + 1) = v31;
  *(void *)&v66[3] = v30;
  *((void *)&v66[3] + 1) = v32;
  *(void *)&v66[4] = v33;
  swift_retain();
  double v44 = _LazyLayout_PlacedSubview.size.getter();
  CGPoint v46 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v45, *(unint64_t *)&v44));
  *(void *)&v66[0] = v25;
  *((void *)&v66[0] + 1) = v26;
  LOBYTE(v66[1]) = v27;
  *((void *)&v66[1] + 1) = v28;
  LOBYTE(v66[2]) = v29;
  *((void *)&v66[2] + 1) = v31;
  *(void *)&v66[3] = v30;
  *((void *)&v66[3] + 1) = v32;
  *(void *)&v66[4] = v33;
  _LazyLayout_PlacedSubview.size.getter();
  swift_release();
  if (Axis.Set.contains(_:)()) {
    double v47 = v46.x - v65 - v43 - (v59 - v42);
  }
  else {
    double v47 = 0.0;
  }
  if (Axis.Set.contains(_:)())
  {
    if (v47 != 0.0 || v46.y - v63 - (v61 - v57) - (v58 - v55) != 0.0)
    {
LABEL_28:
      memcpy(v66, v75, 0x149uLL);
      outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v75);
      LazySubviewPlacements.allowsContentOffsetAdjustments.getter();
      swift_release();
      swift_release();
      return outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v75);
    }
  }
  else if (v47 != 0.0)
  {
    goto LABEL_28;
  }
  swift_release();
  return swift_release();
}

uint64_t LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:)@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v4 = *((double *)a1 + 4);
  double v5 = *((double *)a1 + 5);
  uint64_t v6 = *(void *)(v3 + 48);
  int v7 = *(_DWORD *)(v3 + 56);
  uint64_t v8 = *(void *)(v3 + 64);
  unsigned int v9 = *(_DWORD *)(v3 + 72);
  unsigned int v10 = *(_DWORD *)(v3 + 76);
  unsigned int v12 = *(_DWORD *)(v3 + 80);
  unsigned int v11 = *(_DWORD *)(v3 + 84);
  double v13 = *(double *)(v3 + 88);
  *(void *)&long long v36 = v6;
  DWORD2(v36) = v7;
  *(void *)&long long v37 = v8;
  *((void *)&v37 + 1) = __PAIR64__(v10, v9);
  unint64_t v38 = __PAIR64__(v11, v12);
  double v39 = v13;
  LOBYTE(v34) = 1;
  if (_GraphInputs.hasValueScrollPosition(kind:)())
  {
    *(void *)&long long v36 = v6;
    DWORD2(v36) = v7;
    *(void *)&long long v37 = v8;
    *((void *)&v37 + 1) = __PAIR64__(v10, v9);
    unint64_t v38 = __PAIR64__(v11, v12);
    double v39 = v13;
    if (_GraphInputs.scrollTargetRole.getter() != *MEMORY[0x1E4F4E7A0])
    {
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_1(0, &lazy cache variable for type metadata for ScrollTargetRole.Role?, MEMORY[0x1E4F3FD78], MEMORY[0x1E4FBB718]);
      int v14 = *(unsigned __int8 *)AGGraphGetValue();
      if (v14 != 2 && (v14 & 1) == 0 && v4 != 0.0 && v5 != 0.0)
      {
        uint64_t v15 = *(void *)(v3 + 128);
        if (*(void *)(v15 + 16))
        {
          uint64_t v16 = *(void *)(v15 + 32);
          uint64_t v17 = *(void *)(v16 + 136);
          uint64_t v18 = *(void *)(v16 + 144);
          swift_bridgeObjectRetain();
LABEL_9:
          long long v19 = a1[1];
          long long v36 = *a1;
          long long v37 = v19;
          unint64_t v38 = *(void *)&v4;
          double v39 = v5;
          *(_OWORD *)((char *)v54 + 9) = *(long long *)((char *)a1 + 281);
          long long v20 = a1[16];
          long long v52 = a1[15];
          long long v53 = v20;
          v54[0] = a1[17];
          long long v21 = a1[12];
          long long v48 = a1[11];
          long long v49 = v21;
          long long v22 = a1[14];
          long long v50 = a1[13];
          long long v51 = v22;
          long long v23 = a1[8];
          long long v44 = a1[7];
          long long v45 = v23;
          long long v24 = a1[10];
          long long v46 = a1[9];
          long long v47 = v24;
          long long v25 = a1[4];
          long long v40 = a1[3];
          long long v41 = v25;
          long long v26 = a1[6];
          long long v42 = a1[5];
          long long v43 = v26;
          uint64_t v34 = v17;
          uint64_t v35 = v18;
          LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)((uint64_t)&v36, (uint64_t)&v34, a2, a3);
          return swift_bridgeObjectRelease();
        }
        type metadata accessor for LazyLayoutViewCache();
        AGGraphGetValue();
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
        uint64_t Value = AGGraphGetValue();
        outlined init with copy of TableColumnList(Value, (uint64_t)&v36);
        uint64_t v29 = *((void *)&v37 + 1);
        unint64_t v30 = v38;
        __swift_project_boxed_opaque_existential_1(&v36, *((uint64_t *)&v37 + 1));
        if ((*(uint64_t (**)(uint64_t, unint64_t))(v30 + 32))(v29, v30))
        {
          if (dispatch thunk of _ViewList_ID_Views.endIndex.getter())
          {
            dispatch thunk of _ViewList_ID_Views.subscript.getter();
            swift_release();
            uint64_t v17 = v34;
            uint64_t v18 = v35;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
            goto LABEL_9;
          }
          swift_release();
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36);
      }
    }
  }
  _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)&v36);
  return outlined init with take of Int?((uint64_t)&v36, a3, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
}

uint64_t LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v5 = v4;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  memcpy(v43, v13, sizeof(v43));
  int v14 = *(_DWORD *)(a2 + 4);
  LODWORD(v37) = *(_DWORD *)a2;
  HIDWORD(v37) = v14;
  uint64_t v15 = *(void *)(a2 + 8);
  v42[0] = *(_OWORD *)v5;
  int v16 = *((_DWORD *)v5 + 5);
  LODWORD(v42[1]) = *((_DWORD *)v5 + 4);
  memcpy((char *)&v42[1] + 8, v5 + 24, 0x131uLL);
  DWORD1(v42[1]) = v16;
  LazySubviewPlacements.transaction.getter();
  Transaction.scrollContentOffsetAdjustmentBehavior.getter();
  swift_release();
  if (LOBYTE(v42[0]) != 2)
  {
    uint64_t v36 = v15;
    type metadata accessor for LazyLayoutViewCache();
    if (*(_DWORD *)(*(void *)AGGraphGetValue() + 148) != *MEMORY[0x1E4F4E7A0])
    {
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_1(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, MEMORY[0x1E4F3FA08], MEMORY[0x1E4F41638]);
      uint64_t v18 = v17;
      uint64_t Value = AGGraphGetValue();
      outlined init with copy of Binding<ScrollPosition>(Value, (uint64_t)v38);
      MEMORY[0x18C113DA0](v40, v18);
      outlined destroy of Binding<ScrollPosition>((uint64_t)v38);
      void v41[2] = v40[2];
      v41[3] = v40[3];
      v41[4] = v40[4];
      v41[0] = v40[0];
      v41[1] = v40[1];
      AGGraphClearUpdate();
      uint64_t v20 = *(void *)(a3 + 24);
      closure #1 in LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)((uint64_t)v5, (BOOL *)v42);
      AGGraphSetUpdate();
      if ((v42[0] & 1) == 0)
      {
        uint64_t v35 = a4;
        long long v21 = *(_OWORD *)(v5 + 248);
        long long v22 = *(_OWORD *)(v5 + 200);
        void v38[2] = *(_OWORD *)(v5 + 184);
        v38[3] = v22;
        long long v23 = *(_OWORD *)(v5 + 232);
        v38[4] = *(_OWORD *)(v5 + 216);
        v38[5] = v23;
        long long v24 = *(_OWORD *)(v5 + 168);
        v38[0] = *(_OWORD *)(v5 + 152);
        v38[1] = v24;
        long long v25 = *(_OWORD *)(v5 + 264);
        long long v26 = *(_OWORD *)(v5 + 280);
        v38[6] = v21;
        v38[7] = v25;
        v39[0] = v26;
        *(_OWORD *)((char *)v39 + 9) = *(_OWORD *)(v5 + 289);
        memcpy(v42, v43, 0x129uLL);
        if (PositionState.dispatchContainerSizeChange(context:)((uint64_t)v42))
        {
          memcpy(v42, v43, 0x129uLL);
          *(void *)&v40[0] = v37;
          *((void *)&v40[0] + 1) = v36;
          LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:)((unsigned int *)v42, (uint64_t)v41, (uint64_t *)v40, a3, (uint64_t)v38);
          outlined init with take of Int?((uint64_t)v38, (uint64_t)v42, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
          outlined init with take of Int?((uint64_t)v42, (uint64_t)v38, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
          char v27 = implicit closure #1 in LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:);
          uint64_t v28 = v35;
LABEL_14:
          logAndReturnContext #1 <A>(_:_:) in LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)((uint64_t)v38, (uint64_t (*)(uint64_t))v27, v5, v28);
          uint64_t result = outlined destroy of ScrollPosition((uint64_t)v41);
          goto LABEL_11;
        }
        memcpy(v42, v43, 0x129uLL);
        uint64_t v29 = AGGraphGetValue();
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v29, v9);
        uint64_t v30 = *(void *)AGGraphGetValue();
        swift_retain();
        char v31 = PositionState.dispatchSubviewsChange<A>(context:layout:cache:)((unsigned int *)v42, (uint64_t)v12, v30, v9, v20);
        swift_release();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        a4 = v35;
        if (v31)
        {
          memcpy(v42, v43, 0x129uLL);
          *(void *)&v40[0] = v37;
          *((void *)&v40[0] + 1) = v36;
          LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:)((unsigned int *)v42, (uint64_t)v41, (uint64_t *)v40, a3, (uint64_t)v38);
          outlined init with take of Int?((uint64_t)v38, (uint64_t)v42, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
          outlined init with take of Int?((uint64_t)v42, (uint64_t)v38, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
          uint64_t v32 = (unint64_t (*)())implicit closure #2 in LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:);
LABEL_13:
          char v27 = v32;
          uint64_t v28 = a4;
          goto LABEL_14;
        }
      }
      if ((v5[152] & 1) == 0)
      {
        memcpy(v42, v43, 0x129uLL);
        *(void *)&v40[0] = v37;
        *((void *)&v40[0] + 1) = v36;
        LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:)((unsigned int *)v42, (uint64_t)v41, (uint64_t *)v40, a3, (uint64_t)v38);
        outlined init with take of Int?((uint64_t)v38, (uint64_t)v42, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
        outlined init with take of Int?((uint64_t)v42, (uint64_t)v38, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
        uint64_t v32 = implicit closure #3 in LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:);
        goto LABEL_13;
      }
      outlined destroy of ScrollPosition((uint64_t)v41);
    }
  }
  _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)v42);
  uint64_t result = outlined init with take of Int?((uint64_t)v42, a4, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
LABEL_11:
  v5[152] = 1;
  return result;
}

unsigned __int8 *closure #1 in LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 32) == *MEMORY[0x1E4F4E7A0]
    || (result = (unsigned __int8 *)AGGraphGetValue(), int v4 = *result, v4 == 5))
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    uint64_t result = (unsigned __int8 *)ScrollPhaseState.init(phase:velocity:)();
    int v4 = v5;
  }
  *a2 = v4 != 0;
  return result;
}

uint64_t logAndReturnContext #1 <A>(_:_:) in LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, const void *a3@<X3>, uint64_t a4@<X8>)
{
  outlined init with take of Int?(a1, (uint64_t)v12, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  outlined init with take of Int?((uint64_t)v12, (uint64_t)v13, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)v13) != 1)
  {
    memcpy(v11, a3, 0x149uLL);
    uint64_t v7 = outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v11);
    uint64_t v8 = a2(v7);
    specialized LazySubviewPlacements.logDefaultPlacement(_:)(v8, v9);
    swift_bridgeObjectRelease();
    outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v11);
  }
  return outlined init with take of Int?((uint64_t)v12, a4, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
}

uint64_t LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:)@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = v5;
  unsigned int v86 = a1[1];
  unsigned int v87 = *a1;
  unsigned int v84 = a1[3];
  unsigned int v85 = a1[2];
  uint64_t v67 = *((void *)a1 + 3);
  uint64_t v68 = *((void *)a1 + 2);
  uint64_t v91 = *((void *)a1 + 5);
  uint64_t v92 = *((void *)a1 + 4);
  unsigned int v90 = a1[12];
  unsigned int v82 = a1[13];
  uint64_t v79 = *((void *)a1 + 8);
  uint64_t v80 = *((void *)a1 + 7);
  uint64_t v77 = *((void *)a1 + 10);
  uint64_t v78 = *((void *)a1 + 9);
  double v88 = *((double *)a1 + 12);
  double v89 = *((double *)a1 + 11);
  uint64_t v75 = *((void *)a1 + 14);
  uint64_t v76 = *((void *)a1 + 13);
  uint64_t v73 = *((void *)a1 + 16);
  uint64_t v74 = *((void *)a1 + 15);
  uint64_t v71 = *((void *)a1 + 18);
  uint64_t v72 = *((void *)a1 + 17);
  uint64_t v69 = *((void *)a1 + 20);
  uint64_t v70 = *((void *)a1 + 19);
  uint64_t v8 = *((void *)a1 + 22);
  uint64_t v9 = *((void *)a1 + 24);
  uint64_t v106 = *((void *)a1 + 23);
  uint64_t v108 = *((void *)a1 + 21);
  uint64_t v10 = *((void *)a1 + 27);
  uint64_t v102 = *((void *)a1 + 26);
  uint64_t v104 = *((void *)a1 + 25);
  uint64_t v11 = *((void *)a1 + 29);
  uint64_t v98 = *((void *)a1 + 30);
  uint64_t v100 = *((void *)a1 + 28);
  uint64_t v110 = *((void *)a1 + 31);
  uint64_t v12 = *((void *)a1 + 33);
  uint64_t v96 = *((void *)a1 + 32);
  uint64_t v13 = *((void *)a1 + 34);
  char v14 = *((unsigned char *)a1 + 296);
  uint64_t v15 = a3[1];
  CGSize v83 = *(CGSize *)(a1 + 70);
  uint64_t v16 = *a3;
  outlined init with copy of ScrollPosition.Storage(a2, (uint64_t)v156);
  char v81 = v14;
  char v17 = v14 & 1;
  double v18 = *(double *)v156;
  switch(v158)
  {
    case 1:
      ScrollGeometry.targetRect(edge:)();
      double v63 = v38;
      double v64 = v37;
      __dst[0] = v108;
      __dst[1] = v8;
      __dst[2] = v106;
      __dst[3] = v9;
      __dst[4] = v104;
      __dst[5] = v102;
      __dst[6] = v10;
      __dst[7] = v100;
      __dst[8] = v11;
      __dst[9] = v98;
      __dst[10] = v110;
      __dst[11] = v96;
      __dst[12] = v12;
      __dst[13] = v13;
      ScrollGeometry.visibleRect.getter();
      double v41 = v64 - v40;
      double v42 = v63;
      goto LABEL_11;
    case 2:
      double v112 = *((double *)v156 + 1);
      __dst[0] = v108;
      __dst[1] = v8;
      __dst[2] = v106;
      __dst[3] = v9;
      __dst[4] = v104;
      __dst[5] = v102;
      __dst[6] = v10;
      __dst[7] = v100;
      __dst[8] = v11;
      __dst[9] = v98;
      __dst[10] = v110;
      __dst[11] = v96;
      __dst[12] = v12;
      __dst[13] = v13;
      ScrollGeometry.visibleRect.getter();
      double v41 = v18 - v43;
      double v42 = v112;
      goto LABEL_11;
    case 3:
      __dst[0] = v108;
      __dst[1] = v8;
      __dst[2] = v106;
      __dst[3] = v9;
      __dst[4] = v104;
      __dst[5] = v102;
      __dst[6] = v10;
      __dst[7] = v100;
      __dst[8] = v11;
      __dst[9] = v98;
      __dst[10] = v110;
      __dst[11] = v96;
      __dst[12] = v12;
      __dst[13] = v13;
      ScrollGeometry.visibleRect.getter();
      double v41 = v18 - v44;
      double v42 = v89;
LABEL_11:
      double v45 = v42 - v39;
      goto LABEL_15;
    case 4:
      __dst[0] = v108;
      __dst[1] = v8;
      __dst[2] = v106;
      __dst[3] = v9;
      __dst[4] = v104;
      __dst[5] = v102;
      __dst[6] = v10;
      __dst[7] = v100;
      __dst[8] = v11;
      __dst[9] = v98;
      __dst[10] = v110;
      __dst[11] = v96;
      __dst[12] = v12;
      __dst[13] = v13;
      ScrollGeometry.visibleRect.getter();
      double v41 = v88 - v46;
      double v45 = v18 - v47;
      goto LABEL_15;
    case 5:
      goto LABEL_20;
    default:
      long long v152 = v156[0];
      long long v153 = v156[1];
      *(_OWORD *)uint64_t v154 = *(_OWORD *)v157;
      *(_OWORD *)&v154[9] = *(_OWORD *)&v157[9];
      __dst[0] = v16;
      __dst[1] = v15;
      uint64_t v19 = _ViewList_ID.allExplicitIDs.getter();
      uint64_t v20 = *(void *)(v19 + 16);
      if (v20)
      {
        char v65 = v17;
        uint64_t v66 = a5;
        uint64_t v21 = 0;
        double v22 = 0.0;
        uint64_t v23 = 0;
        char v24 = 1;
        uint64_t v25 = v19;
        do
        {
          v151[0] = *(void *)(v25 + 8 * v23 + 32);
          swift_retain();
          AnyHashable2.anyValue.getter();
          __swift_project_boxed_opaque_existential_1(__dst, __dst[3]);
          char v36 = ScrollPosition.matches<A>(id:)();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
          if (v36)
          {
            uint64_t v26 = *((void *)&v153 + 1);
            uint64_t v94 = *(void *)v154;
            char v27 = __swift_project_boxed_opaque_existential_1(&v152, *((uint64_t *)&v153 + 1));
            memcpy(__dst, (const void *)v6, 0x149uLL);
            memcpy(v151, (const void *)v6, 0x149uLL);
            *(void *)&long long v114 = __PAIR64__(v86, v87);
            *((void *)&v114 + 1) = __PAIR64__(v84, v85);
            uint64_t v115 = v68;
            uint64_t v116 = v67;
            uint64_t v117 = v92;
            uint64_t v118 = v91;
            unsigned int v119 = v90;
            unsigned int v120 = v82;
            uint64_t v121 = v80;
            uint64_t v122 = v79;
            uint64_t v123 = v78;
            uint64_t v124 = v77;
            double v125 = v89;
            double v126 = v88;
            uint64_t v127 = v76;
            uint64_t v128 = v75;
            uint64_t v129 = v74;
            uint64_t v130 = v73;
            uint64_t v131 = v72;
            uint64_t v132 = v71;
            uint64_t v133 = v70;
            uint64_t v134 = v69;
            uint64_t v135 = v108;
            uint64_t v136 = v8;
            uint64_t v137 = v106;
            uint64_t v138 = v9;
            uint64_t v139 = v104;
            uint64_t v140 = v102;
            uint64_t v141 = v10;
            uint64_t v142 = v100;
            uint64_t v143 = v11;
            uint64_t v144 = v98;
            uint64_t v145 = v110;
            uint64_t v146 = v96;
            uint64_t v147 = v12;
            uint64_t v148 = v13;
            CGSize v149 = v83;
            char v150 = v81;
            uint64_t v28 = *(void *)&v154[8];
            uint64_t v29 = *(void *)&v154[16];
            uint64_t v30 = v20;
            uint64_t v31 = v25;
            int v32 = v154[24];
            outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__dst);
            int v33 = v32;
            uint64_t v25 = v31;
            uint64_t v20 = v30;
            uint64_t v21 = LazySubviewPlacements.makeViewIDTranslation<A>(_:viewID:anchor:)(&v114, (uint64_t)v27, v28, v29, v33, a4, v26, v94);
            double v22 = v34;
            LOBYTE(v28) = v35;
            swift_release();
            char v24 = v28 & 1;
            outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__dst);
          }
          else
          {
            swift_release();
          }
          ++v23;
        }
        while (v20 != v23);
        swift_bridgeObjectRelease();
        outlined destroy of ScrollPosition.ViewID((uint64_t)&v152);
        a5 = v66;
        if ((v24 & 1) == 0)
        {
          *(void *)&double v41 = v21;
          double v45 = v22;
          char v17 = v65;
LABEL_15:
          if (fabs(v41) >= 0.01 || fabs(v45) >= 0.01)
          {
            memcpy(__dst, (const void *)v6, 0x149uLL);
            if (LazySubviewPlacements.allowsContentOffsetAdjustments.getter())
            {
              v151[7] = v80;
              v151[8] = v79;
              v151[9] = v78;
              v151[10] = v77;
              *(double *)&v151[11] = v89;
              *(double *)&v151[12] = v88;
              v151[13] = v76;
              v151[14] = v75;
              v151[15] = v74;
              v151[16] = v73;
              v151[17] = v72;
              v151[18] = v71;
              v151[19] = v70;
              v151[20] = v69;
              __dst[0] = v108;
              v151[21] = v108;
              v151[22] = v8;
              __dst[1] = v8;
              __dst[2] = v106;
              v151[23] = v106;
              v151[24] = v9;
              __dst[3] = v9;
              __dst[4] = v104;
              v151[25] = v104;
              v151[26] = v102;
              __dst[5] = v102;
              __dst[6] = v10;
              v151[27] = v10;
              v151[28] = v100;
              __dst[7] = v100;
              __dst[8] = v11;
              v151[29] = v11;
              v151[30] = v98;
              __dst[9] = v98;
              __dst[10] = v110;
              v151[31] = v110;
              v151[32] = v96;
              __dst[11] = v96;
              __dst[12] = v12;
              v151[33] = v12;
              v151[34] = v13;
              __dst[13] = v13;
              v151[0] = __PAIR64__(v86, v87);
              v151[1] = __PAIR64__(v84, v85);
              v151[2] = v68;
              v151[3] = v67;
              v151[4] = v92;
              v151[5] = v91;
              v151[6] = __PAIR64__(v82, v90);
              *(CGSize *)&v151[35] = v83;
              LOBYTE(v151[37]) = v81;
              ScrollGeometry.visibleRect.getter();
              double v95 = v48;
              double v97 = v49;
              ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(*(unint64_t *)&v45, *(unint64_t *)&v41), v83);
              ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(*(unint64_t *)&v45, *(unint64_t *)&v41), v83);
              uint64_t v111 = v151[22];
              uint64_t v113 = v151[21];
              uint64_t v50 = v151[23];
              uint64_t v51 = v151[24];
              uint64_t v52 = v151[25];
              uint64_t v53 = v151[26];
              uint64_t v54 = v151[27];
              uint64_t v55 = v151[28];
              uint64_t v107 = v151[30];
              uint64_t v109 = v151[29];
              uint64_t v103 = v151[32];
              uint64_t v105 = v151[31];
              uint64_t v99 = v151[34];
              uint64_t v101 = v151[33];
              __dst[0] = v151[21];
              __dst[1] = v151[22];
              __dst[2] = v151[23];
              __dst[3] = v151[24];
              __dst[4] = v151[25];
              __dst[5] = v151[26];
              __dst[6] = v151[27];
              __dst[7] = v151[28];
              __dst[8] = v151[29];
              __dst[9] = v151[30];
              __dst[10] = v151[31];
              __dst[11] = v151[32];
              __dst[12] = v151[33];
              __dst[13] = v151[34];
              ScrollGeometry.visibleRect.getter();
              *(double *)(v6 + 288) = v56 - v95;
              *(double *)(v6 + 296) = v57 - v97;
              *(unsigned char *)(v6 + 304) = 0;
              __dst[0] = __PAIR64__(v86, v87);
              __dst[1] = __PAIR64__(v84, v85);
              __dst[2] = v68;
              __dst[3] = v67;
              __dst[4] = v92;
              __dst[5] = v91;
              LODWORD(__dst[6]) = v90;
              *(_OWORD *)&__dst[7] = *(_OWORD *)&v151[7];
              *(_OWORD *)&__dst[9] = *(_OWORD *)&v151[9];
              *(_OWORD *)&__dst[11] = *(_OWORD *)&v151[11];
              *(_OWORD *)&__dst[13] = *(_OWORD *)&v151[13];
              *(_OWORD *)&__dst[15] = *(_OWORD *)&v151[15];
              *(_OWORD *)&__dst[17] = *(_OWORD *)&v151[17];
              *(_OWORD *)&__dst[19] = *(_OWORD *)&v151[19];
              __dst[21] = v113;
              __dst[22] = v111;
              __dst[23] = v50;
              __dst[24] = v51;
              __dst[25] = v52;
              __dst[26] = v53;
              __dst[27] = v54;
              __dst[28] = v55;
              __dst[29] = v109;
              __dst[30] = v107;
              __dst[31] = v105;
              __dst[32] = v103;
              __dst[33] = v101;
              __dst[34] = v99;
              *(CGSize *)&__dst[35] = v83;
              LOBYTE(__dst[37]) = v17;
              destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst, v58, v59, v60);
              uint64_t v61 = a5;
              return outlined init with take of Int?((uint64_t)__dst, v61, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
            }
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        outlined destroy of ScrollPosition.ViewID((uint64_t)&v152);
      }
LABEL_20:
      _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)__dst);
      uint64_t v61 = a5;
      return outlined init with take of Int?((uint64_t)__dst, v61, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  }
}

unint64_t implicit closure #1 in LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)()
{
  return 0xD000000000000014;
}

uint64_t PositionState.dispatchSubviewsChange<A>(context:layout:cache:)(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v31 - v11;
  unsigned int v14 = *a1;
  unsigned int v13 = a1[1];
  *(void *)&long long v15 = *((void *)a1 + 1);
  long long v37 = v15;
  memcpy(v55, a1 + 4, sizeof(v55));
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphGetValue();
  uint64_t result = 0;
  if (v17)
  {
    uint64_t v34 = a4;
    uint64_t result = *(void *)(v36 + 128);
    if (result)
    {
      uint64_t v32 = *(void *)(v36 + 120);
      uint64_t v33 = v10;
      uint64_t v18 = AssociatedTypeWitness;
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)a3 + 280);
      uint64_t v36 = result;
      swift_bridgeObjectRetain();
      v19(v18, v18);
      unint64_t v43 = __PAIR64__(v13, v14);
      LODWORD(v44) = v37;
      int v20 = SizeAndSpacingContext.context.getter();
      LazyLayoutViewCache.subviews(context:)(v20, (uint64_t)v53);
      uint64_t v46 = 0;
      char v47 = 1;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      uint64_t v52 = 0;
      memcpy(v45, v55, sizeof(v45));
      unint64_t v43 = __PAIR64__(v13, v14);
      uint64_t v21 = v36;
      uint64_t v44 = v37;
      uint64_t v22 = (*(uint64_t (**)(unsigned char *, unint64_t *, char *, uint64_t *, uint64_t, uint64_t))(a5 + 72))(v53, &v43, v12, &v46, v34, a5);
      uint64_t v23 = 0;
      if ((v47 & 1) == 0)
      {
        uint64_t v24 = v18;
        uint64_t v40 = v46;
        unint64_t v41 = 0;
        uint64_t v42 = 0;
        MEMORY[0x1F4188790](v22);
        *(&v31 - 2) = (uint64_t)&v41;
        uint64_t v39 = v54[11];
        uint64_t v25 = outlined init with copy of _ViewList_Node((uint64_t)v54, (uint64_t)&v43);
        uint64_t v38 = 2;
        MEMORY[0x1F4188790](v25);
        *(&v31 - 4) = v26;
        *(&v31 - 3) = (uint64_t)partial apply for closure #1 in _LazyLayout_Subviews.id(at:style:);
        *(&v31 - 2) = (uint64_t)(&v31 - 4);
        swift_bridgeObjectRetain();
        _ViewList_Node.applyNodes(from:style:transform:to:)();
        outlined destroy of _ViewList_Node((uint64_t)&v43);
        swift_bridgeObjectRelease();
        uint64_t v23 = v41;
        uint64_t v27 = v42;
        if (!v42)
        {
          swift_release();
          (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v24);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of _ViewList_ID??(v23, 0);
          uint64_t v28 = v23;
          uint64_t v29 = 0;
          goto LABEL_10;
        }
        if (v42 != 1)
        {
          unint64_t v43 = v41;
          uint64_t v44 = v42;
          unint64_t v41 = v32;
          uint64_t v42 = v21;
          outlined copy of _ViewList_ID??(v23, v27);
          outlined copy of _ViewList_ID??(v23, v27);
          swift_bridgeObjectRetain();
          char v30 = static _ViewList_ID.== infix(_:_:)();
          swift_bridgeObjectRelease();
          swift_release();
          (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v24);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of _ViewList_ID??(v23, v27);
          outlined consume of _ViewList_ID??(v23, v27);
          if ((v30 & 1) == 0) {
            goto LABEL_11;
          }
LABEL_13:
          outlined destroy of _LazyLayout_Subviews((uint64_t)v53);
          return 0;
        }
        uint64_t v18 = v24;
      }
      swift_release();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v18);
      outlined consume of _ViewList_ID??(v23, 1);
      if (v21 != 1)
      {
        uint64_t v28 = v32;
        uint64_t v29 = v21;
LABEL_10:
        outlined consume of _ViewList_ID??(v28, v29);
LABEL_11:
        outlined destroy of _LazyLayout_Subviews((uint64_t)v53);
        return 1;
      }
      goto LABEL_13;
    }
  }
  return result;
}

uint64_t implicit closure #2 in LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)()
{
  return 0x2077656E20726F66;
}

unint64_t implicit closure #3 in LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)()
{
  return 0xD000000000000011;
}

unsigned __int8 *closure #1 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)@<X0>(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 32) == *MEMORY[0x1E4F4E7A0]
    || (result = (unsigned __int8 *)AGGraphGetValue(), int v4 = *result, v4 == 5))
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    uint64_t result = (unsigned __int8 *)ScrollPhaseState.init(phase:velocity:)();
    int v4 = v5;
  }
  *a2 = v4 == 4;
  return result;
}

void *closure #2 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(void *result, unint64_t *a2, uint64_t a3)
{
  uint64_t v4 = result[1];
  unint64_t v5 = *a2;
  unint64_t v6 = a2[1];
  char v7 = dword_1ED476C54;
  if ((dword_1ED476C54 & ~dword_1ED476C50) == 0) {
    char v7 = 0;
  }
  char v8 = v7 | dword_1ED476C50;
  if (*(unsigned char *)(v4 + 165) != 1 || (v8 & 1) == 0)
  {
    int v10 = v8 & 2;
    if (*(unsigned char *)(v4 + 166) != 1 || v10 == 0)
    {
      if ((*result & 0x8000000000000000) != 0)
      {
        __break(1u);
      }
      else if (*result < *(void *)(*(void *)(a3 + 136) + 16))
      {
        uint64_t result = (void *)distance(_:_:)();
        double v13 = v12;
        goto LABEL_17;
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
  }
  double v13 = INFINITY;
LABEL_17:
  char v14 = dword_1ED476C7C;
  if ((dword_1ED476C7C & ~dword_1ED476C78) == 0) {
    char v14 = 0;
  }
  char v15 = v14 | dword_1ED476C78;
  BOOL v16 = *(unsigned char *)(v6 + 165) != 1 || (v15 & 1) == 0;
  if (!v16 || ((v17 = v15 & 2, *(unsigned char *)(v6 + 166) == 1) ? (BOOL v18 = v17 == 0) : (BOOL v18 = 1), !v18))
  {
    double v19 = INFINITY;
    return (void *)(v13 < v19);
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_36;
  }
  if (v5 < *(void *)(*(void *)(a3 + 136) + 16))
  {
    distance(_:_:)();
    return (void *)(v13 < v19);
  }
LABEL_37:
  __break(1u);
  return result;
}

BOOL closure #1 in LazySubviewPlacements.mainID(subviews:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  char v4 = dword_1ED476CA0;
  int v5 = dword_1ED476CA4;
  int v6 = dword_1ED476CA4 & dword_1ED476CA0;
  if ((dword_1ED476CA4 & dword_1ED476CA0) == dword_1ED476CA4) {
    char v7 = 0;
  }
  else {
    char v7 = dword_1ED476CA4;
  }
  char v8 = v7 | dword_1ED476CA0;
  if (*(unsigned char *)(v2 + 165) == 1 && (v8 & 1) != 0 || *(unsigned char *)(v2 + 166) == 1 && (v8 & 2) != 0)
  {
    double v9 = INFINITY;
  }
  else
  {
    swift_retain();
    double v10 = _LazyLayout_PlacedSubview.size.getter();
    _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v11, *(unint64_t *)&v10));
    _LazyLayout_PlacedSubview.size.getter();
    swift_release();
    distance(_:_:)();
    double v9 = v12;
    char v4 = dword_1ED476CA0;
    int v5 = dword_1ED476CA4;
    int v6 = dword_1ED476CA4 & dword_1ED476CA0;
  }
  if (v6 == v5) {
    LOBYTE(v5) = 0;
  }
  char v13 = v5 | v4;
  if (*(unsigned char *)(v3 + 165) == 1 && (v13 & 1) != 0 || *(unsigned char *)(v3 + 166) == 1 && (v13 & 2) != 0)
  {
    double v14 = INFINITY;
  }
  else
  {
    swift_retain();
    double v15 = _LazyLayout_PlacedSubview.size.getter();
    _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v16, *(unint64_t *)&v15));
    _LazyLayout_PlacedSubview.size.getter();
    swift_release();
    distance(_:_:)();
  }
  return v9 < v14;
}

uint64_t closure #2 in LazySubviewPlacements.mainID(subviews:)@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 144);
  *a2 = *(void *)(v2 + 136);
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t commitSection #1 <A>(_:) in Array<A>.pinSectionHeadersAndFooters(in:headerAxes:footerAxes:)(uint64_t result, unint64_t a2, uint64_t **a3, long long *a4, int a5)
{
  double v12 = (double *)result;
  if (!(_BYTE)a2) {
    goto LABEL_31;
  }
  unint64_t v13 = a2;
  double v14 = &lazy cache variable for type metadata for Int?;
  unint64_t v6 = MEMORY[0x1E4FBB550];
  outlined init with take of Int?(result + 32, (uint64_t)v103, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550]);
  uint64_t result = outlined init with take of Int?((uint64_t)v103, (uint64_t)&v104, (unint64_t *)&lazy cache variable for type metadata for Int?, v6);
  if (v105) {
    goto LABEL_31;
  }
  unint64_t v6 = v104;
  if ((v104 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v104 < (*a3)[2])
  {
    LODWORD(v88) = a5;
    uint64_t v15 = (uint64_t)&(*a3)[9 * v104];
    unsigned __int8 v16 = *(unsigned char *)(v15 + 48);
    int v17 = *(_OWORD **)(v15 + 56);
    char v18 = *(unsigned char *)(v15 + 64);
    double v20 = *(double *)(v15 + 72);
    double v19 = *(double *)(v15 + 80);
    uint64_t v21 = *(void *)(v15 + 88);
    uint64_t v22 = *(void *)(v15 + 96);
    uint64_t v25 = v15 + 32;
    uint64_t v23 = *(void *)(v15 + 32);
    uint64_t v24 = *(_OWORD **)(v25 + 8);
    uint64_t v96 = v24;
    unsigned __int8 v97 = v16;
    uint64_t v98 = v17;
    char v99 = v18;
    *(double *)&long long v100 = v20;
    *((double *)&v100 + 1) = v19;
    *(void *)&long long v101 = v21;
    *((void *)&v101 + 1) = v22;
    *(void *)&long long v89 = v23;
    *((void *)&v89 + 1) = v24;
    LOBYTE(v90) = v16;
    *((void *)&v90 + 1) = v17;
    LOBYTE(v91) = v18;
    *((double *)&v91 + 1) = v20;
    *(double *)&long long v92 = v19;
    *((void *)&v92 + 1) = v21;
    *(void *)&long long v93 = v22;
    double v26 = _LazyLayout_PlacedSubview.size.getter();
    double v28 = v27;
    if ((Axis.Set.contains(_:)() & 1) != 0 && (~*((void *)v12 + 1) & 0x7FF0000000000000) != 0)
    {
      double v29 = v12[1] - (1.0 - v20) * v26;
      long long v30 = a4[5];
      long long v93 = a4[4];
      long long v94 = v30;
      long long v95 = a4[6];
      long long v31 = a4[1];
      long long v89 = *a4;
      long long v90 = v31;
      long long v32 = a4[3];
      long long v91 = a4[2];
      long long v92 = v32;
      ScrollGeometry.bounds.getter();
      double v33 = v20 * v26 + CGRectGetMinX(v108);
      *(void *)&long long v89 = v24;
      BYTE8(v89) = v16;
      if (v33 >= v29) {
        double v34 = v29;
      }
      else {
        double v34 = v33;
      }
      *(void *)&long long v90 = v17;
      BYTE8(v90) = v18;
      *(double *)&long long v91 = v20;
      *((double *)&v91 + 1) = v19;
      *(void *)&long long v92 = v21;
      *((void *)&v92 + 1) = v22;
      _Placement.anchorPosition.getter();
      if (v34 > v35) {
        double v35 = v34;
      }
      if (v29 >= v35) {
        double v36 = v35;
      }
      else {
        double v36 = v29;
      }
      long long v37 = (void (*)(long long *, void))_Placement.anchorPosition.modify();
      double *v38 = v36;
      v37(&v89, 0);
    }
    if ((Axis.Set.contains(_:)() & 1) != 0 && (~*((void *)v12 + 3) & 0x7FF0000000000000) != 0)
    {
      double v39 = v12[3] - (1.0 - v19) * v28;
      long long v40 = a4[5];
      long long v93 = a4[4];
      long long v94 = v40;
      long long v95 = a4[6];
      long long v41 = a4[1];
      long long v89 = *a4;
      long long v90 = v41;
      long long v42 = a4[3];
      long long v91 = a4[2];
      long long v92 = v42;
      ScrollGeometry.bounds.getter();
      double v43 = v19 * v28 + CGRectGetMinY(v109);
      if (v43 >= v39) {
        double v44 = v39;
      }
      else {
        double v44 = v43;
      }
      *(void *)&long long v89 = v96;
      BYTE8(v89) = v97;
      *(void *)&long long v90 = v98;
      BYTE8(v90) = v99;
      long long v91 = v100;
      long long v92 = v101;
      _Placement.anchorPosition.getter();
      if (v44 > v45) {
        double v46 = v44;
      }
      else {
        double v46 = v45;
      }
      if (v39 >= v46) {
        double v47 = v46;
      }
      else {
        double v47 = v39;
      }
      long long v48 = (void (*)(long long *, void))_Placement.anchorPosition.modify();
      *(double *)(v49 + 8) = v47;
      v48(&v89, 0);
    }
    int v5 = v96;
    unint64_t v13 = v97;
    uint64_t v7 = (uint64_t)v98;
    char v8 = v99;
    long long v86 = v101;
    long long v87 = v100;
    double v14 = *a3;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v14;
    LOBYTE(a5) = v88;
    if (result) {
      goto LABEL_29;
    }
    goto LABEL_62;
  }
  __break(1u);
LABEL_62:
  uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
  double v14 = (uint64_t *)result;
LABEL_29:
  if (v6 >= v14[2])
  {
    __break(1u);
    goto LABEL_64;
  }
  long long v50 = &v14[9 * v6];
  v50[5] = (uint64_t)v5;
  *((unsigned char *)v50 + 48) = v13;
  v50[7] = v7;
  *((unsigned char *)v50 + 64) = v8;
  *(_OWORD *)(v50 + 9) = v87;
  *(_OWORD *)(v50 + 11) = v86;
  *a3 = v14;
LABEL_31:
  if ((_BYTE)a5)
  {
    double v14 = &lazy cache variable for type metadata for Int?;
    uint64_t v51 = MEMORY[0x1E4FBB550];
    outlined init with take of Int?((uint64_t)(v12 + 6), (uint64_t)v102, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550]);
    uint64_t result = outlined init with take of Int?((uint64_t)v102, (uint64_t)&v106, (unint64_t *)&lazy cache variable for type metadata for Int?, v51);
    if ((v107 & 1) == 0)
    {
      unint64_t v13 = v106;
      if ((v106 & 0x8000000000000000) == 0)
      {
        if (v106 < (*a3)[2])
        {
          uint64_t v52 = (uint64_t)&(*a3)[9 * v106];
          unsigned __int8 v53 = *(unsigned char *)(v52 + 48);
          uint64_t v54 = *(_OWORD **)(v52 + 56);
          char v55 = *(unsigned char *)(v52 + 64);
          double v57 = *(double *)(v52 + 72);
          double v56 = *(double *)(v52 + 80);
          uint64_t v58 = *(void *)(v52 + 88);
          uint64_t v59 = *(void *)(v52 + 96);
          uint64_t v62 = v52 + 32;
          uint64_t v60 = *(void *)(v52 + 32);
          uint64_t v61 = *(_OWORD **)(v62 + 8);
          uint64_t v96 = v61;
          unsigned __int8 v97 = v53;
          uint64_t v98 = v54;
          char v99 = v55;
          *(double *)&long long v100 = v57;
          *((double *)&v100 + 1) = v56;
          *(void *)&long long v101 = v58;
          *((void *)&v101 + 1) = v59;
          *(void *)&long long v89 = v60;
          *((void *)&v89 + 1) = v61;
          LOBYTE(v90) = v53;
          *((void *)&v90 + 1) = v54;
          LOBYTE(v91) = v55;
          *((double *)&v91 + 1) = v57;
          *(double *)&long long v92 = v56;
          *((void *)&v92 + 1) = v58;
          *(void *)&long long v93 = v59;
          double v63 = _LazyLayout_PlacedSubview.size.getter();
          double v65 = v64;
          if ((Axis.Set.contains(_:)() & 1) != 0 && (~*(void *)v12 & 0x7FF0000000000000) != 0)
          {
            double v66 = v57 * v63 + *v12;
            long long v67 = a4[5];
            long long v93 = a4[4];
            long long v94 = v67;
            long long v95 = a4[6];
            long long v68 = a4[1];
            long long v89 = *a4;
            long long v90 = v68;
            long long v69 = a4[3];
            long long v91 = a4[2];
            long long v92 = v69;
            ScrollGeometry.bounds.getter();
            double v70 = CGRectGetMaxX(v110) - (1.0 - v57) * v63;
            *(void *)&long long v89 = v61;
            BYTE8(v89) = v53;
            *(void *)&long long v90 = v54;
            if (v66 > v70) {
              double v71 = v66;
            }
            else {
              double v71 = v70;
            }
            BYTE8(v90) = v55;
            *(double *)&long long v91 = v57;
            *((double *)&v91 + 1) = v56;
            *(void *)&long long v92 = v58;
            *((void *)&v92 + 1) = v59;
            _Placement.anchorPosition.getter();
            if (v66 > v72) {
              double v72 = v66;
            }
            if (v71 >= v72) {
              double v71 = v72;
            }
            uint64_t v73 = (void (*)(long long *, void))_Placement.anchorPosition.modify();
            *uint64_t v74 = v71;
            v73(&v89, 0);
          }
          if ((Axis.Set.contains(_:)() & 1) != 0 && (~*((void *)v12 + 2) & 0x7FF0000000000000) != 0)
          {
            double v75 = v56 * v65 + v12[2];
            long long v76 = a4[5];
            long long v93 = a4[4];
            long long v94 = v76;
            long long v95 = a4[6];
            long long v77 = a4[1];
            long long v89 = *a4;
            long long v90 = v77;
            long long v78 = a4[3];
            long long v91 = a4[2];
            long long v92 = v78;
            ScrollGeometry.bounds.getter();
            double v79 = CGRectGetMaxY(v111) - (1.0 - v56) * v65;
            if (v75 > v79) {
              double v80 = v75;
            }
            else {
              double v80 = v79;
            }
            *(void *)&long long v89 = v96;
            BYTE8(v89) = v97;
            *(void *)&long long v90 = v98;
            BYTE8(v90) = v99;
            long long v91 = v100;
            long long v92 = v101;
            _Placement.anchorPosition.getter();
            if (v75 > v81) {
              double v82 = v75;
            }
            else {
              double v82 = v81;
            }
            if (v80 >= v82) {
              double v80 = v82;
            }
            CGSize v83 = (void (*)(long long *, void))_Placement.anchorPosition.modify();
            *(double *)(v84 + 8) = v80;
            v83(&v89, 0);
          }
          a4 = v96;
          LOBYTE(v12) = v97;
          int v5 = v98;
          LOBYTE(v6) = v99;
          long long v87 = v101;
          long long v88 = v100;
          double v14 = *a3;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *a3 = v14;
          if (result) {
            goto LABEL_57;
          }
          goto LABEL_66;
        }
LABEL_65:
        __break(1u);
LABEL_66:
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
        double v14 = (uint64_t *)result;
LABEL_57:
        if (v13 >= v14[2])
        {
          __break(1u);
        }
        else
        {
          unsigned int v85 = &v14[9 * v13];
          _OWORD v85[5] = (uint64_t)a4;
          *((unsigned char *)v85 + 48) = (_BYTE)v12;
          v85[7] = (uint64_t)v5;
          *((unsigned char *)v85 + 64) = v6;
          *(_OWORD *)(v85 + 9) = v88;
          *(_OWORD *)(v85 + 11) = v87;
          *a3 = v14;
        }
        return result;
      }
LABEL_64:
      __break(1u);
      goto LABEL_65;
    }
  }
  return result;
}

unint64_t partial apply for closure #2 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(void *a1, unint64_t *a2)
{
  return (unint64_t)closure #2 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(a1, a2, *(void *)(v2 + 32)) & 1;
}

double specialized thunk for @callee_guaranteed () -> (@unowned PinnedSection)@<D0>(uint64_t a1@<X8>)
{
  double result = INFINITY;
  *(_OWORD *)a1 = xmmword_188357310;
  *(_OWORD *)(a1 + 16) = xmmword_188357310;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  return result;
}

uint64_t outlined copy of _ViewList_ID??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined init with take of Int?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_1(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t partial apply for closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)(uint64_t a1)
{
  return closure #1 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)(a1, *(void *)(v1 + 32), *(const void **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t outlined init with copy of Scrollable?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Scrollable?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_187A35670()
{
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for PinnedSection(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PinnedSection(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 57) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PinnedSection()
{
  return &type metadata for PinnedSection;
}

uint64_t *initializeBufferWithCopyOfBuffer for LazyLayoutComputer.Engine(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 161 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    double v10 = (_OWORD *)(((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    unint64_t v11 = (_OWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFFFCLL);
    *double v10 = *v11;
    double v12 = (void *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v13 = (void *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
    *double v12 = *v13;
    unint64_t v14 = ((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v15 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
    long long v16 = *(_OWORD *)(v15 + 112);
    long long v17 = *(_OWORD *)(v15 + 128);
    long long v18 = *(_OWORD *)(v15 + 144);
    *(unsigned char *)(v14 + 160) = *(unsigned char *)(v15 + 160);
    *(_OWORD *)(v14 + 128) = v17;
    *(_OWORD *)(v14 + 144) = v18;
    *(_OWORD *)(v14 + 112) = v16;
    long long v19 = *(_OWORD *)(v15 + 48);
    long long v20 = *(_OWORD *)(v15 + 64);
    long long v21 = *(_OWORD *)(v15 + 96);
    *(_OWORD *)(v14 + 80) = *(_OWORD *)(v15 + 80);
    *(_OWORD *)(v14 + 96) = v21;
    *(_OWORD *)(v14 + 48) = v19;
    *(_OWORD *)(v14 + 64) = v20;
    long long v22 = *(_OWORD *)v15;
    long long v23 = *(_OWORD *)(v15 + 32);
    *(_OWORD *)(v14 + 16) = *(_OWORD *)(v15 + 16);
    *(_OWORD *)(v14 + 32) = v23;
    *(_OWORD *)unint64_t v14 = v22;
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for LazyLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v7 = *(_DWORD *)v8;
  *(_DWORD *)(v7 + 4) = *(_DWORD *)(v8 + 4);
  *(_DWORD *)(v7 + 8) = *(_DWORD *)(v8 + 8);
  *(_DWORD *)(v7 + 12) = *(_DWORD *)(v8 + 12);
  v7 += 23;
  v8 += 23;
  unint64_t v9 = (v8 & 0xFFFFFFFFFFFFFFF8) + 15;
  *(void *)(v7 & 0xFFFFFFFFFFFFFFF8) = *(void *)(v8 & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_retain();
  swift_release();
  unint64_t v11 = v10 & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  long long v13 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  long long v14 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(unsigned char *)(v11 + 48) = *(unsigned char *)((v9 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v11 + 16) = v13;
  *(_OWORD *)(v11 + 32) = v14;
  *(_OWORD *)unint64_t v11 = v12;
  long long v15 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 56);
  long long v16 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 72);
  long long v17 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 88);
  *(unsigned char *)(v11 + 104) = *(unsigned char *)((v9 & 0xFFFFFFFFFFFFFFF8) + 104);
  *(_OWORD *)(v11 + 88) = v17;
  *(_OWORD *)(v11 + 72) = v16;
  *(_OWORD *)(v11 + 56) = v15;
  long long v18 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 112);
  long long v19 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 128);
  long long v20 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 144);
  *(unsigned char *)(v11 + 160) = *(unsigned char *)((v9 & 0xFFFFFFFFFFFFFFF8) + 160);
  *(_OWORD *)(v11 + 128) = v19;
  *(_OWORD *)(v11 + 144) = v20;
  *(_OWORD *)(v11 + 112) = v18;
  return a1;
}

uint64_t initializeWithTake for LazyLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 3;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v8 = (_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *unint64_t v7 = *v8;
  unint64_t v9 = (void *)(((unint64_t)v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (void *)(((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v9 = *v10;
  unint64_t v11 = ((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
  long long v13 = *(_OWORD *)(v12 + 112);
  long long v14 = *(_OWORD *)(v12 + 128);
  long long v15 = *(_OWORD *)(v12 + 144);
  *(unsigned char *)(v11 + 160) = *(unsigned char *)(v12 + 160);
  *(_OWORD *)(v11 + 128) = v14;
  *(_OWORD *)(v11 + 144) = v15;
  *(_OWORD *)(v11 + 112) = v13;
  long long v16 = *(_OWORD *)(v12 + 48);
  long long v17 = *(_OWORD *)(v12 + 64);
  long long v18 = *(_OWORD *)(v12 + 96);
  *(_OWORD *)(v11 + 80) = *(_OWORD *)(v12 + 80);
  *(_OWORD *)(v11 + 96) = v18;
  *(_OWORD *)(v11 + 48) = v16;
  *(_OWORD *)(v11 + 64) = v17;
  long long v19 = *(_OWORD *)v12;
  long long v20 = *(_OWORD *)(v12 + 32);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)(v12 + 16);
  *(_OWORD *)(v11 + 32) = v20;
  *(_OWORD *)unint64_t v11 = v19;
  return a1;
}

uint64_t assignWithTake for LazyLayoutComputer.Engine(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 3;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *(_DWORD *)unint64_t v7 = *v8;
  *(_DWORD *)(v7 + 4) = v8[1];
  *(_DWORD *)(v7 + 8) = v8[2];
  *(_DWORD *)(v7 + 12) = v8[3];
  v7 += 23;
  unint64_t v9 = ((unint64_t)v8 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  v9 += 15;
  *(void *)(v7 & 0xFFFFFFFFFFFFFFF8) = v10;
  unint64_t v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 15;
  swift_release();
  unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8;
  long long v13 = *(_OWORD *)(v9 & 0xFFFFFFFFFFFFFFF8);
  long long v14 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 16);
  long long v15 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(unsigned char *)(v12 + 48) = *(unsigned char *)((v9 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v12 + 16) = v14;
  *(_OWORD *)(v12 + 32) = v15;
  *(_OWORD *)unint64_t v12 = v13;
  long long v16 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 56);
  long long v17 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 72);
  long long v18 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 88);
  *(unsigned char *)(v12 + 104) = *(unsigned char *)((v9 & 0xFFFFFFFFFFFFFFF8) + 104);
  *(_OWORD *)(v12 + 88) = v18;
  *(_OWORD *)(v12 + 72) = v17;
  *(_OWORD *)(v12 + 56) = v16;
  long long v19 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 112);
  long long v20 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 128);
  long long v21 = *(_OWORD *)((v9 & 0xFFFFFFFFFFFFFFF8) + 144);
  *(unsigned char *)(v12 + 160) = *(unsigned char *)((v9 & 0xFFFFFFFFFFFFFFF8) + 160);
  *(_OWORD *)(v12 + 128) = v20;
  *(_OWORD *)(v12 + 144) = v21;
  *(_OWORD *)(v12 + 112) = v19;
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyLayoutComputer.Engine(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 161;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * (((((((v6 + 3) & 0xFC) + 23) & 0xF8) + 15) & 0xF8) - 95));
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187A35CB0);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * (((((((v6 + 3) & 0xFC) + 23) & 0xF8) + 15) & 0xF8) - 95));
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((((((v6 + 3) & 0xFFFFFFFC) + 23) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) == 0xFFFFFF60) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((((unint64_t)&a1[v6 + 3] & 0xFFFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for LazyLayoutComputer.Engine(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((((((v9 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 161;
  char v11 = 8 * (((((((v9 + 3) & 0xFC) + 23) & 0xF8) + 15) & 0xF8) - 95);
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_47;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0x7FFFFFFF)
            {
              long long v21 = (void *)((((unint64_t)&a1[v9 + 3] & 0xFFFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFFFF8);
              if ((a2 & 0x80000000) != 0) {
                uint64_t v22 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v22 = a2 - 1;
              }
              *long long v21 = v22;
            }
            else
            {
              long long v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_47:
      __break(1u);
      JUMPOUT(0x187A35EECLL);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t destroy for LazySubviewPlacements()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for LazySubviewPlacements(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 288);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = v4;
  long long v5 = *(_OWORD *)(a2 + 312);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  *(_OWORD *)(a1 + 312) = v5;
  return a1;
}

void *__swift_memcpy329_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x149uLL);
}

uint64_t assignWithTake for LazySubviewPlacements(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  long long v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  long long v6 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v6;
  long long v7 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v7;
  long long v8 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v8;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(unsigned char *)(a1 + 304) = *(unsigned char *)(a2 + 304);
  *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
  *(unsigned char *)(a1 + 328) = *(unsigned char *)(a2 + 328);
  return a1;
}

uint64_t getEnumTagSinglePayload for LazySubviewPlacements(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 329)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 64);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for LazySubviewPlacements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 328) = 0;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 329) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 64) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 329) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in LazyLayoutComputer.Engine.spacing()@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in LazyLayoutComputer.Engine.spacing()(v1[4], v1[2], v1[3], a1);
}

uint64_t destroy for PositionState()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PositionState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PositionState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v4 = *(_OWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v4;
  return a1;
}

uint64_t assignWithTake for PositionState(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for PositionState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 153)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 128);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PositionState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 152) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 153) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 153) = 0;
    }
    if (a2) {
      *(void *)(result + 128) = a2;
    }
  }
  return result;
}

void *type metadata accessor for PositionState()
{
  return &unk_1ED47EB28;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LazyVStack<A>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance LazyVStack<A>()
{
}

uint64_t *initializeBufferWithCopyOfBuffer for LazyVStack(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 24) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 24) & ~v5, ((unint64_t)a2 + v5 + 24) & ~v5);
  }
  return v3;
}

uint64_t initializeWithTake for LazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 24 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 24 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for LazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 40))((*(unsigned __int8 *)(v5 + 80) + 24 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 24 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyVStack(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 24) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 24) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for LazyVStack(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 24) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187A36CB0);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 24] & ~v8;
        int v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

unint64_t lazy protocol witness table accessor for type _VStackLayout and conformance _VStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout;
  if (!lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VStackLayout and conformance _VStackLayout);
  }
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance LazyVStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, &protocol witness table for LazyVStackLayout);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance LazyVStackLayout()
{
}

uint64_t protocol witness for static LazyLayout.layoutProperties.getter in conformance LazyVStackLayout()
{
  return 514;
}

uint64_t protocol witness for LazyStack.minorGeometry(updatingSize:) in conformance LazyHStackLayout(void *a1, void *a2)
{
  *a1 = *a2;
  return 1;
}

uint64_t protocol witness for static LazyLayout.layoutProperties.getter in conformance LazyHStackLayout()
{
  return 259;
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LazyHStack<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance LazyHStack<A>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance LazyHStack<A>()
{
}

_UNKNOWN **base witness table accessor for View in LazyHStack<A>()
{
  return &protocol witness table for LazyHStack<A>;
}

unint64_t lazy protocol witness table accessor for type _HStackLayout and conformance _HStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout;
  if (!lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _HStackLayout and conformance _HStackLayout);
  }
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance LazyHStackLayout(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, &protocol witness table for LazyHStackLayout);
}

void protocol witness for _VariadicView_ViewRoot.body(children:) in conformance LazyHStackLayout()
{
}

uint64_t initializeWithCopy for _LazyLayout_EstimatedPlacements(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _LazyLayout_EstimatedPlacements(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  swift_retain();
  swift_release();
  uint64_t v5 = a2[3];
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2[5];
  *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = a2[9];
  *(void *)(a1 + 80) = a2[10];
  return a1;
}

uint64_t assignWithTake for _LazyLayout_EstimatedPlacements(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for _LazyLayout_EstimatedPlacements(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 88)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _LazyLayout_EstimatedPlacements(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 88) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _LazyLayout_EstimatedPlacements()
{
  return &type metadata for _LazyLayout_EstimatedPlacements;
}

uint64_t initializeWithCopy for _LazyLayout_Placements(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _LazyLayout_Placements(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for _LazyLayout_Placements(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

ValueMetadata *type metadata accessor for _LazyLayout_Placements()
{
  return &type metadata for _LazyLayout_Placements;
}

void *__swift_memcpy297_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x129uLL);
}

ValueMetadata *type metadata accessor for _LazyLayout_EstimatedPlacementContext()
{
  return &type metadata for _LazyLayout_EstimatedPlacementContext;
}

uint64_t getEnumTagSinglePayload for _LazyLayout_EstimatedPlacementContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 297)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 296);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _LazyLayout_EstimatedPlacementContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 296) = 0;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 297) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 297) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 296) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _LazyLayout_PlacementContext()
{
  return &type metadata for _LazyLayout_PlacementContext;
}

ValueMetadata *type metadata accessor for _LazyLayout_SizeAndSpacingContext()
{
  return &type metadata for _LazyLayout_SizeAndSpacingContext;
}

uint64_t getEnumTagSinglePayload for _LazyLayout_Properties(unsigned __int16 *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if ((a2 + 0xFFFF) < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        return 0;
      }
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for _LazyLayout_Properties(uint64_t result, int a2, int a3)
{
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if ((a3 + 0xFFFF) < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    unsigned int v6 = ((a2 - 1) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 1;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        return result;
      case 2:
        *(_WORD *)(result + 2) = v6;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)(result + 2) = v6;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *(unsigned char *)(result + 2) = 0;
      break;
    case 2:
      *(_WORD *)(result + 2) = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x187A378E0);
    case 4:
      *(_DWORD *)(result + 2) = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for _LazyLayout_Properties()
{
  return &type metadata for _LazyLayout_Properties;
}

uint64_t assignWithCopy for _LazyLayout_PlacedSubview(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for _LazyLayout_PlacedSubview(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for _LazyLayout_PlacedSubview(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _LazyLayout_PlacedSubview(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _LazyLayout_PlacedSubview()
{
  return &type metadata for _LazyLayout_PlacedSubview;
}

uint64_t assignWithCopy for _LazyLayout_Subview(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 80) = v4;
  int v5 = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(_DWORD *)(a1 + 88) = v5;
  *(unsigned char *)(a1 + 93) = *(unsigned char *)(a2 + 93);
  *(unsigned char *)(a1 + 94) = *(unsigned char *)(a2 + 94);
  return a1;
}

__n128 __swift_memcpy95_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 79) = *(_OWORD *)(a2 + 79);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for _LazyLayout_Subview(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 84) = *(unsigned char *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(unsigned char *)(a1 + 93) = *(unsigned char *)(a2 + 93);
  *(unsigned char *)(a1 + 94) = *(unsigned char *)(a2 + 94);
  return a1;
}

ValueMetadata *type metadata accessor for _LazyLayout_Subview()
{
  return &type metadata for _LazyLayout_Subview;
}

uint64_t assignWithCopy for _LazyLayout_Subviews(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (a1 != a2)
  {
    outlined destroy of _ViewList_Node(a1 + 16);
    switch(*(unsigned char *)(a2 + 101))
    {
      case 1:
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
        *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        uint64_t v6 = *(void *)(a2 + 72);
        *(void *)(a1 + 72) = v6;
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        unsigned int v7 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
        swift_bridgeObjectRetain();
        v7(a1 + 48, a2 + 48, v6);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        int v8 = *(_DWORD *)(a2 + 96);
        *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
        *(_DWORD *)(a1 + 96) = v8;
        *(unsigned char *)(a1 + 101) = 1;
        goto LABEL_7;
      case 2:
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(unsigned char *)(a1 + 101) = 2;
        goto LABEL_7;
      case 3:
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
        *(unsigned char *)(a1 + 101) = 3;
        swift_bridgeObjectRetain();
LABEL_7:
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v4 = *(void *)(a2 + 40);
        *(void *)(a1 + 40) = v4;
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 16, a2 + 16);
        char v5 = *(unsigned char *)(a2 + 60);
        *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
        *(unsigned char *)(a1 + 60) = v5;
        *(unsigned char *)(a1 + 101) = 0;
        break;
    }
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v9 = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  *(_DWORD *)(a1 + 112) = v9;
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 117);
  *(unsigned char *)(a1 + 118) = *(unsigned char *)(a2 + 118);
  return a1;
}

__n128 __swift_memcpy119_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[6];
  *(void *)(a1 + 111) = *(void *)((char *)a2 + 111);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for _LazyLayout_Subviews(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  if (a1 != a2)
  {
    outlined destroy of _ViewList_Node(a1 + 16);
    long long v4 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v4;
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 94) = *(void *)(a2 + 94);
    long long v5 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v5;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
  *(unsigned char *)(a1 + 117) = *(unsigned char *)(a2 + 117);
  *(unsigned char *)(a1 + 118) = *(unsigned char *)(a2 + 118);
  return a1;
}

uint64_t getEnumTagSinglePayload for _LazyLayout_Subviews(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 119)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _LazyLayout_Subviews(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 118) = 0;
    *(_WORD *)(result + 116) = 0;
    *(_DWORD *)(result + 112) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 119) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 119) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _LazyLayout_Subviews()
{
  return &type metadata for _LazyLayout_Subviews;
}

uint64_t _LazyLayout_SizeAndSpacingContext.subscript.getter()
{
  return SizeAndSpacingContext.subscript.getter();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance LazyFixedSizeHStackLayout@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  void v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static LazyLayout._makeView(root:inputs:body:)(v4, (uint64_t)v8, a3, (void (*)(uint64_t))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, &lazy cache variable for type metadata for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, a4, (uint64_t (*)(uint64_t, uint64_t, long long *))specialized LazyLayoutViewCache.init<A>(layout:list:inputs:));
}

uint64_t specialized static LazyLayout._makeView(root:inputs:body:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, long long *)@<X2>, void (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, unint64_t *a6@<X6>, uint64_t (*a7)(void)@<X7>, uint64_t a8@<X8>, uint64_t (*a9)(uint64_t, uint64_t, long long *))
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  long long v11 = *(_OWORD *)(a2 + 32);
  long long v12 = *(_OWORD *)(a2 + 48);
  long long v13 = *(_OWORD *)(a2 + 16);
  long long v52 = *(_OWORD *)a2;
  long long v53 = v13;
  long long v54 = v11;
  __int16 v14 = WORD2(v11);
  *(_OWORD *)&v49[16] = v11;
  *(_OWORD *)long long v50 = v12;
  *(_OWORD *)&char v50[16] = *(_OWORD *)(a2 + 64);
  int v51 = *(_DWORD *)(a2 + 80);
  long long v48 = v52;
  *(_OWORD *)uint64_t v49 = v13;
  *(_DWORD *)&v49[20] = DWORD1(v11) & 0xFFFFFFF3 | 4;
  LOBYTE(v55) = 1;
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  if (static SemanticFeature.isEnabled.getter()) {
    PreferencesInputs.remove<A>(_:)();
  }
  *(void *)&long long v55 = v48;
  DWORD2(v55) = DWORD2(v48);
  *(_OWORD *)&v56[8] = *(_OWORD *)&v49[8];
  *(void *)double v56 = *(void *)v49;
  *(void *)&v56[24] = *(void *)&v49[24];
  *(void *)double v57 = *(void *)v50;
  *(_OWORD *)&v57[8] = *(_OWORD *)&v50[8];
  *(void *)&v57[24] = *(void *)&v50[24];
  int v58 = v51;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a3(v47, v15, &v55);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  HIDWORD(v42) = HIDWORD(v52);
  outlined retain of _GraphInputs((uint64_t)&v52);
  _ViewListInputs.init(_:)();
  *(void *)((char *)&v42 + 4) = *(void *)((char *)&v55 + 4);
  *(void *)double v43 = *(void *)v56;
  *(_OWORD *)&v43[8] = *(_OWORD *)&v56[8];
  *(void *)&v43[24] = *(void *)&v56[24];
  long long v44 = *(_OWORD *)v57;
  LODWORD(v45) = *(_DWORD *)&v57[16];
  *((void *)&v45 + 1) = *(void *)&v57[24];
  LOBYTE(v46) = v58;
  uint64_t v16 = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v17 = swift_bridgeObjectRelease();
  LODWORD(v42) = a1;
  long long v55 = v52;
  *(_OWORD *)double v56 = v53;
  *(_OWORD *)&v56[16] = v54;
  a4(v17);
  uint64_t v18 = static Animatable.makeAnimatable(value:inputs:)();
  if ((v14 & 0x1000) != 0) {
    PreferenceKeys.add(_:)();
  }
  *(_OWORD *)&v56[16] = *(_OWORD *)&v49[16];
  *(_OWORD *)double v57 = *(_OWORD *)v50;
  *(_OWORD *)&v57[16] = *(_OWORD *)&v50[16];
  int v58 = v51;
  long long v55 = v48;
  *(_OWORD *)double v56 = *(_OWORD *)v49;
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, a6, a7, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LazyLayoutViewCache);
  *(_DWORD *)(swift_allocObject() + 228) = v18;
  outlined retain of _ViewInputs((uint64_t)&v55);
  uint64_t v19 = a9(v18, v16, &v55);
  swift_beginAccess();
  uint64_t v20 = *(void *)(v19 + 120);
  unsigned int v21 = *(_DWORD *)(v19 + 128);
  uint64_t v22 = *(unsigned int *)(v19 + 132);
  unsigned int v39 = *(_DWORD *)(v19 + 132);
  if ((v14 & 0x1000) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_12:
    swift_release();
    outlined destroy of _ViewListOutputs((uint64_t)v47);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain_n();
  specialized static LazyLayout.accessibilityRole.getter(&v40);
  long long v23 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v43[16] = *(_OWORD *)(a2 + 32);
  long long v44 = v23;
  long long v45 = *(_OWORD *)(a2 + 64);
  int v46 = *(_DWORD *)(a2 + 80);
  long long v24 = *(_OWORD *)(a2 + 16);
  long long v42 = *(_OWORD *)a2;
  *(_OWORD *)double v43 = v24;
  unint64_t v25 = makeAccessibilityLayoutScrollableTransform(isLazy:role:placedSubviews:inputs:outputs:)();
  swift_bridgeObjectRelease();
  if ((v25 & 0x100000000) == 0)
  {
    LOBYTE(v42) = 0;
    _ViewOutputs.subscript.setter();
    uint64_t v22 = v39;
  }
  *(void *)&long long v42 = v20;
  *((void *)&v42 + 1) = __PAIR64__(v22, v21);
  uint64_t v26 = _ViewOutputs.subscript.getter();
  if ((v26 & 0x100000000) != 0) {
    goto LABEL_12;
  }
  int v27 = v26;
  static AccessibilityVisibility.containerElement.getter();
  int v28 = v41;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v38 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
  *(void *)&v43[8] = v29;
  *(void *)&v43[16] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>);
  LODWORD(v42) = v28;
  DWORD1(v42) = v28;
  specialized Dictionary.subscript.setter((uint64_t)&v42, MEMORY[0x1E4F40AA8]);
  LOBYTE(v42) = 1;
  DWORD1(v42) = v27;
  *((void *)&v42 + 1) = v38;
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  _GraphValue.init(_:)();
  *(void *)&long long v42 = *(void *)(a2 + 48);
  DWORD2(v42) = *(_DWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  char v30 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v30) {
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v38, (long long *)a2, v20, v21 | (unint64_t)(v22 << 32), 0);
  }
  swift_bridgeObjectRelease();
  LOBYTE(v42) = (v30 & 1) == 0;
  _ViewOutputs.subscript.setter();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  LODWORD(v22) = v39;
LABEL_14:
  *(void *)a8 = v20;
  *(_DWORD *)(a8 + 8) = v21;
  *(_DWORD *)(a8 + 12) = v22;
  return result;
}

uint64_t static LazyLayout._makeView(root:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v11 = *(_OWORD *)(a2 + 16);
  long long v58 = *(_OWORD *)(a2 + 32);
  long long v59 = v10;
  long long v12 = *(_OWORD *)(a2 + 48);
  long long v60 = *(_OWORD *)(a2 + 64);
  long long v13 = *(_OWORD *)(a2 + 16);
  long long v56 = *(_OWORD *)a2;
  long long v57 = v13;
  *(_OWORD *)&unsigned char v53[16] = v58;
  *(_OWORD *)long long v54 = v12;
  *(_OWORD *)&char v54[16] = *(_OWORD *)(a2 + 64);
  int v14 = *a1;
  int v61 = *(_DWORD *)(a2 + 80);
  int v55 = *(_DWORD *)(a2 + 80);
  long long v52 = v56;
  *(_OWORD *)long long v53 = v11;
  outlined retain of _ViewInputs((uint64_t)&v56);
  int v15 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(a5 + 32))(a4, a5);
  uint64_t v32 = a6;
  if (v15 == 1)
  {
    unsigned int v16 = *(_DWORD *)&v53[20] | 0xC;
  }
  else if (v15 == 2)
  {
    unsigned int v16 = *(_DWORD *)&v53[20] & 0xFFFFFFF3 | 4;
  }
  else
  {
    unsigned int v16 = (*(_DWORD *)&v53[20] & 0xFFFFFFFB ^ 8) & *(_DWORD *)&v53[20];
  }
  *(_DWORD *)&v53[20] = v16;
  LOBYTE(v47) = 1;
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  if (static SemanticFeature.isEnabled.getter()) {
    PreferencesInputs.remove<A>(_:)();
  }
  *(void *)&long long v47 = v52;
  DWORD2(v47) = DWORD2(v52);
  *(_OWORD *)&v48[8] = *(_OWORD *)&v53[8];
  *(void *)long long v48 = *(void *)v53;
  *(void *)&v48[24] = *(void *)&v53[24];
  *(void *)uint64_t v49 = *(void *)v54;
  *(_OWORD *)&long long v49[8] = *(_OWORD *)&v54[8];
  *(void *)&v49[24] = *(void *)&v54[24];
  int v50 = v55;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v17 = swift_bridgeObjectRetain();
  a3(v51, v17, &v47);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  long long v62 = v56;
  long long v63 = v57;
  long long v64 = v58;
  int v39 = HIDWORD(v56);
  outlined retain of _GraphInputs((uint64_t)&v62);
  _ViewListInputs.init(_:)();
  uint64_t v38 = *(void *)((char *)&v47 + 4);
  uint64_t v40 = *(void *)v48;
  long long v41 = *(_OWORD *)&v48[8];
  uint64_t v42 = *(void *)&v48[24];
  long long v43 = *(_OWORD *)v49;
  int v44 = *(_DWORD *)&v49[16];
  uint64_t v45 = *(void *)&v49[24];
  char v46 = v50;
  int v18 = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  int v37 = v14;
  long long v47 = v62;
  *(_OWORD *)long long v48 = v63;
  *(_OWORD *)&char v48[16] = v64;
  int v19 = static Animatable.makeAnimatable(value:inputs:)();
  __int16 v20 = WORD2(v64);
  if ((WORD2(v64) & 0x1000) != 0) {
    PreferenceKeys.add(_:)();
  }
  type metadata accessor for _LazyLayoutViewCache();
  *(void *)&long long v47 = v52;
  DWORD2(v47) = DWORD2(v52);
  *(_OWORD *)&v48[8] = *(_OWORD *)&v53[8];
  *(void *)long long v48 = *(void *)v53;
  *(void *)&v48[24] = *(void *)&v53[24];
  *(void *)uint64_t v49 = *(void *)v54;
  *(_OWORD *)&long long v49[8] = *(_OWORD *)&v54[8];
  *(void *)&v49[24] = *(void *)&v54[24];
  int v50 = v55;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = _LazyLayoutViewCache.__allocating_init(layout:list:inputs:)(v19, v18, (uint64_t *)&v47);
  swift_beginAccess();
  uint64_t v22 = *(void *)(v21 + 120);
  unsigned int v23 = *(_DWORD *)(v21 + 128);
  uint64_t v24 = *(unsigned int *)(v21 + 132);
  unsigned int v34 = *(_DWORD *)(v21 + 132);
  if ((v20 & 0x1000) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_17:
    swift_release();
    outlined destroy of _ViewListOutputs((uint64_t)v51);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    goto LABEL_19;
  }
  swift_bridgeObjectRetain_n();
  static LazyLayout.accessibilityRole.getter(a5, &v35);
  *(_OWORD *)&char v48[16] = v58;
  *(_OWORD *)uint64_t v49 = v59;
  *(_OWORD *)&v49[16] = v60;
  int v50 = v61;
  long long v47 = v56;
  *(_OWORD *)long long v48 = v57;
  unint64_t v25 = makeAccessibilityLayoutScrollableTransform(isLazy:role:placedSubviews:inputs:outputs:)();
  swift_bridgeObjectRelease();
  if ((v25 & 0x100000000) == 0)
  {
    LOBYTE(v47) = 0;
    _ViewOutputs.subscript.setter();
    uint64_t v24 = v34;
  }
  *(void *)&long long v47 = v22;
  *((void *)&v47 + 1) = __PAIR64__(v24, v23);
  uint64_t v26 = _ViewOutputs.subscript.getter();
  if ((v26 & 0x100000000) != 0) {
    goto LABEL_17;
  }
  int v27 = v26;
  static AccessibilityVisibility.containerElement.getter();
  int v28 = v36;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v33 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
  *(void *)&v48[8] = v29;
  *(void *)&char v48[16] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>);
  LODWORD(v47) = v28;
  DWORD1(v47) = v28;
  specialized Dictionary.subscript.setter((uint64_t)&v47, MEMORY[0x1E4F40AA8]);
  LOBYTE(v47) = 1;
  DWORD1(v47) = v27;
  *((void *)&v47 + 1) = v33;
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  _GraphValue.init(_:)();
  *(void *)&long long v47 = v59;
  DWORD2(v47) = DWORD2(v59);
  swift_bridgeObjectRetain();
  char v30 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v30) {
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v33, &v56, v22, v23 | (unint64_t)(v24 << 32), 0);
  }
  swift_bridgeObjectRelease();
  LOBYTE(v47) = (v30 & 1) == 0;
  _ViewOutputs.subscript.setter();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)v51);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  LODWORD(v24) = v34;
LABEL_19:
  *(void *)uint64_t v32 = v22;
  *(_DWORD *)(v32 + 8) = v23;
  *(_DWORD *)(v32 + 12) = v24;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance LazyFixedSizeVStackLayout@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  void v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static LazyLayout._makeView(root:inputs:body:)(v4, (uint64_t)v8, a3, (void (*)(uint64_t))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, &lazy cache variable for type metadata for _LazyLayoutViewCache<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, a4, (uint64_t (*)(uint64_t, uint64_t, long long *))specialized LazyLayoutViewCache.init<A>(layout:list:inputs:));
}

uint64_t static LazyLayout.hasMultipleViewsInAxis(_:)(char a1, uint64_t a2, uint64_t a3)
{
  return (((*(unsigned __int16 (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3) >> 8) >> (a1 & 1)) & 1;
}

uint64_t _LazyLayout_Subviews.firstIndex(of:style:)()
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v4 = *(void *)(v0 + 104);
  outlined init with copy of _ViewList_Node(v0 + 16, (uint64_t)v3);
  swift_bridgeObjectRetain();
  char v1 = _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v3);
  swift_bridgeObjectRelease();
  if (v1) {
    return 0;
  }
  else {
    return v6;
  }
}

uint64_t specialized static LazyLayout.accessibilityRole.getter@<X0>(char *a1@<X8>)
{
  uint64_t v2 = static Axis.allCases.getter();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = (unsigned char *)(v2 + 32);
    while ((*v4 & 1) == 0)
    {
      ++v4;
      if (!--v3) {
        goto LABEL_5;
      }
    }
    char v5 = 1;
  }
  else
  {
LABEL_5:
    char v5 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v5;
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unsigned char *v4;
  char v5;
  uint64_t result;

  uint64_t v2 = static Axis.allCases.getter();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = (unsigned char *)(v2 + 32);
    while (*v4 == 1)
    {
      ++v4;
      if (!--v3) {
        goto LABEL_5;
      }
    }
    char v5 = 1;
  }
  else
  {
LABEL_5:
    char v5 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v5;
  return result;
}

uint64_t static LazyLayout.accessibilityRole.getter@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  int v3 = (*(uint64_t (**)(void))(a1 + 32))();
  uint64_t v4 = static Axis.allCases.getter();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = (unsigned char *)(v4 + 32);
    char v7 = 1;
    while (1)
    {
      int v8 = 1 << *v6;
      if ((v8 & v3) == 0 && (v8 & ((unsigned __int16)(v3 & 0xFF00) >> 8)) != 0) {
        break;
      }
      ++v6;
      if (!--v5) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    char v7 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v7;
  return result;
}

uint64_t _LazyLayout_Section.header.getter@<X0>(uint64_t a1@<X8>)
{
  char v4 = *((unsigned char *)v1 + 24);
  uint64_t v5 = *((void *)v1 + 4);
  uint64_t v6 = *((void *)v1 + 5);
  int v7 = v1[12];
  int v14 = *v1;
  int v3 = v14;
  long long v15 = *(_OWORD *)(v1 + 2);
  char v16 = v4;
  int v8 = _ViewList_Section.header.getter();
  int v21 = v8;
  outlined init with copy of TableColumnList((uint64_t)v20, (uint64_t)v12);
  int v13 = v8;
  outlined init with take of OptionalBinaryInteger(v12, (uint64_t)&v14);
  outlined init with copy of TableColumnList((uint64_t)v20, (uint64_t)v10);
  int v11 = v8;
  int v17 = v8;
  char v18 = 0;
  char v19 = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)((uint64_t)v20);
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7;
  outlined init with take of _ViewList_Node((uint64_t)&v14, a1 + 16);
  *(void *)(a1 + 104) = v5;
  *(_DWORD *)(a1 + 112) = v3;
  *(unsigned char *)(a1 + 116) = 0;
  *(_WORD *)(a1 + 117) = 1;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t _LazyLayout_Section.content.getter@<X0>(uint64_t a1@<X8>)
{
  char v4 = *((unsigned char *)v1 + 24);
  uint64_t v5 = *((void *)v1 + 4);
  uint64_t v6 = *((void *)v1 + 5);
  int v7 = v1[12];
  int v14 = *v1;
  int v3 = v14;
  long long v15 = *(_OWORD *)(v1 + 2);
  char v16 = v4;
  int v8 = _ViewList_Section.content.getter();
  int v21 = v8;
  outlined init with copy of TableColumnList((uint64_t)v20, (uint64_t)v12);
  int v13 = v8;
  outlined init with take of OptionalBinaryInteger(v12, (uint64_t)&v14);
  outlined init with copy of TableColumnList((uint64_t)v20, (uint64_t)v10);
  int v11 = v8;
  int v17 = v8;
  char v18 = 0;
  char v19 = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)((uint64_t)v20);
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7;
  outlined init with take of _ViewList_Node((uint64_t)&v14, a1 + 16);
  *(void *)(a1 + 104) = v5;
  *(_DWORD *)(a1 + 112) = v3;
  *(unsigned char *)(a1 + 116) = 0;
  *(_WORD *)(a1 + 117) = 0;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

uint64_t _LazyLayout_Section.footer.getter@<X0>(uint64_t a1@<X8>)
{
  char v4 = *((unsigned char *)v1 + 24);
  uint64_t v5 = *((void *)v1 + 4);
  uint64_t v6 = *((void *)v1 + 5);
  int v7 = v1[12];
  int v14 = *v1;
  int v3 = v14;
  long long v15 = *(_OWORD *)(v1 + 2);
  char v16 = v4;
  int v8 = _ViewList_Section.footer.getter();
  int v21 = v8;
  outlined init with copy of TableColumnList((uint64_t)v20, (uint64_t)v12);
  int v13 = v8;
  outlined init with take of OptionalBinaryInteger(v12, (uint64_t)&v14);
  outlined init with copy of TableColumnList((uint64_t)v20, (uint64_t)v10);
  int v11 = v8;
  int v17 = v8;
  char v18 = 0;
  char v19 = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)((uint64_t)v20);
  *(void *)a1 = v6;
  *(_DWORD *)(a1 + 8) = v7;
  outlined init with take of _ViewList_Node((uint64_t)&v14, a1 + 16);
  *(void *)(a1 + 104) = v5;
  *(_DWORD *)(a1 + 112) = v3;
  *(unsigned char *)(a1 + 116) = 0;
  *(_WORD *)(a1 + 117) = 256;
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance _LazyLayout_Properties(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t closure #2 in applyNode #1 (start:style:node:transform:section:) in _LazyLayout_Subviews.apply(from:style:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = *a4;
  int v9 = *((unsigned __int8 *)a4 + 4);
  int v10 = *((unsigned __int8 *)a4 + 5);
  uint64_t v15 = *a2;
  BOOL v11 = v10 == 0;
  uint64_t v12 = 0x1000000000000;
  if (v11) {
    uint64_t v12 = 0;
  }
  BOOL v11 = v9 == 0;
  uint64_t v13 = 0x10000000000;
  if (v11) {
    uint64_t v13 = 0;
  }
  return applyNode #1 (start:style:node:transform:section:) in _LazyLayout_Subviews.apply(from:style:to:)(a1, &v15, a3, a5, v13 | v12 | v8, a6, a7, a8) & 1;
}

uint64_t closure #1 in _LazyLayout_Subviews.firstIndex(of:style:)(uint64_t a1, unsigned char *a2, unint64_t a3, uint64_t a4, void *a5)
{
  int v7 = a3;
  unint64_t v9 = HIDWORD(a3);
  _ViewList_ID.canonicalID.getter();
  v13[0] = v13[2];
  v13[1] = v13[3];
  v11[0] = v7;
  v11[1] = v9;
  uint64_t v12 = a4;
  LOBYTE(a4) = MEMORY[0x18C10D6E0](v13, v11);
  uint64_t result = swift_release();
  if (a4)
  {
    *a2 = 1;
  }
  else if (__OFADD__(*a5, 1))
  {
    __break(1u);
  }
  else
  {
    ++*a5;
  }
  return result;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance _LazyLayout_Subview.Kind()
{
  return *(void *)&aNormal_3[8 * *v0];
}

uint64_t one-time initialization function for log(uint64_t a1)
{
  return one-time initialization function for log(a1, static Log.LazyLayoutReuse.log);
}

{
  return one-time initialization function for log(a1, static Log.LazyLayoutPrefetch.log);
}

uint64_t one-time initialization function for log(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t protocol witness for static UserDefaultKeyedFeature.defaults.getter in conformance EnableLazyLayoutReuseLogging()
{
  return MEMORY[0x1F4100138]();
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance EnableLazyLayoutReuseLogging())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance EnableLazyLayoutReuseLogging()
{
  lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging();

  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnableLazyLayoutReuseLogging(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnableLazyLayoutReuseLogging(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnableLazyLayoutReuseLogging(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnableLazyLayoutReuseLogging(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance EnableLazyLayoutReuseLogging@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance EnableLazyLayoutReuseLogging(a1, (uint64_t (*)(void))lazy protocol witness table accessor for type EnableLazyLayoutReuseLogging and conformance EnableLazyLayoutReuseLogging, a2);
}

unint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance EnableLazyLayoutPrefetchLogging()
{
  return 0xD00000000000002BLL;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance EnableLazyLayoutPrefetchLogging()
{
  return static EnableLazyLayoutPrefetchLogging.cachedValue;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance EnableLazyLayoutPrefetchLogging(char a1)
{
  uint64_t result = swift_beginAccess();
  static EnableLazyLayoutPrefetchLogging.cacheduint64_t Value = a1;
  return result;
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance EnableLazyLayoutPrefetchLogging())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance EnableLazyLayoutPrefetchLogging()
{
  lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();

  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnableLazyLayoutPrefetchLogging(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnableLazyLayoutReuseLogging(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnableLazyLayoutPrefetchLogging(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnableLazyLayoutReuseLogging(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance EnableLazyLayoutPrefetchLogging@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance EnableLazyLayoutReuseLogging(a1, (uint64_t (*)(void))lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging, a2);
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance EnableLazyLayoutReuseLoggingAlways())()
{
  return _ArchivedViewHost.propertiesNeedingUpdate.modify;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance EnableLazyLayoutReuseLoggingAlways()
{
  lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways();

  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnableLazyLayoutReuseLoggingAlways(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnableLazyLayoutReuseLogging(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance EnableLazyLayoutReuseLogging(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  PropertyList.subscript.getter();
  return v5;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnableLazyLayoutReuseLoggingAlways(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnableLazyLayoutReuseLogging(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance EnableLazyLayoutReuseLogging(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance EnableLazyLayoutReuseLoggingAlways@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  return protocol witness for static PropertyKey.defaultValue.getter in conformance EnableLazyLayoutReuseLogging(a1, (uint64_t (*)(void))lazy protocol witness table accessor for type EnableLazyLayoutReuseLoggingAlways and conformance EnableLazyLayoutReuseLoggingAlways, a2);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance EnableLazyLayoutReuseLogging@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X2>, unsigned char *a3@<X8>)
{
  uint64_t v5 = a2();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(a1, v5);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance LazyLayoutAdaptor_V1<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static LazyLayout._makeView(root:inputs:body:)(a1, a2, a3, a4, WitnessTable, a5);
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance LazyLayoutAdaptor_V1<A>()
{
  return 256;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance LazyHGridLayout@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  void v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static LazyLayout._makeView(root:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance LazyVGridLayout@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  void v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  void v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static LazyLayout._makeView(root:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

unint64_t lazy protocol witness table accessor for type LazySubviewPlacements<LazyFixedSizeHStackLayout> and conformance LazySubviewPlacements<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazySubviewPlacements<LazyFixedSizeHStackLayout> and conformance LazySubviewPlacements<A>;
  if (!lazy protocol witness table cache variable for type LazySubviewPlacements<LazyFixedSizeHStackLayout> and conformance LazySubviewPlacements<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazySubviewPlacements<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPlacements);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazySubviewPlacements<LazyFixedSizeHStackLayout> and conformance LazySubviewPlacements<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazySubviewPrefetcher<LazyFixedSizeHStackLayout> and conformance LazySubviewPrefetcher<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyFixedSizeHStackLayout> and conformance LazySubviewPrefetcher<A>;
  if (!lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyFixedSizeHStackLayout> and conformance LazySubviewPrefetcher<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazySubviewPrefetcher<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPrefetcher);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyFixedSizeHStackLayout> and conformance LazySubviewPrefetcher<A>);
  }
  return result;
}

uint64_t _s7SwiftUI19LazyLayoutViewCacheC6layout4list6inputsAC14AttributeGraph0J0VyxG_AIyAA0E4List_pGAA01_E6InputsVtcAA0cD0Rzlufc12updateOutputL_3keyyqd__m_tAaORzAA13PreferenceKeyRd__r__lFyAA0cQ033_E8ACBA7E5D77BFDAB5F4F8C9CFE08356LLVyqd__GzXEfU_TA_0(uint64_t a1)
{
  return partial apply for closure #1 in updateOutput #1 <A><A1>(key:) in LazyLayoutViewCache.init<A>(layout:list:inputs:)(a1, (void (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout);
}

unint64_t lazy protocol witness table accessor for type LazyScrollable<LazyFixedSizeHStackLayout> and conformance LazyScrollable<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyScrollable<LazyFixedSizeHStackLayout> and conformance LazyScrollable<A>;
  if (!lazy protocol witness table cache variable for type LazyScrollable<LazyFixedSizeHStackLayout> and conformance LazyScrollable<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyScrollable<LazyFixedSizeHStackLayout> and conformance LazyScrollable<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyScrollable<LazyFixedSizeHStackLayout> and conformance LazyScrollable<A>;
  if (!lazy protocol witness table cache variable for type LazyScrollable<LazyFixedSizeHStackLayout> and conformance LazyScrollable<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyScrollable<LazyFixedSizeHStackLayout> and conformance LazyScrollable<A>);
  }
  return result;
}

uint64_t sub_187A40928()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

unint64_t lazy protocol witness table accessor for type LazySubviewPlacements<LazyFixedSizeVStackLayout> and conformance LazySubviewPlacements<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazySubviewPlacements<LazyFixedSizeVStackLayout> and conformance LazySubviewPlacements<A>;
  if (!lazy protocol witness table cache variable for type LazySubviewPlacements<LazyFixedSizeVStackLayout> and conformance LazySubviewPlacements<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazySubviewPlacements<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPlacements);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazySubviewPlacements<LazyFixedSizeVStackLayout> and conformance LazySubviewPlacements<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazySubviewPrefetcher<LazyFixedSizeVStackLayout> and conformance LazySubviewPrefetcher<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyFixedSizeVStackLayout> and conformance LazySubviewPrefetcher<A>;
  if (!lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyFixedSizeVStackLayout> and conformance LazySubviewPrefetcher<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazySubviewPrefetcher<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPrefetcher);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyFixedSizeVStackLayout> and conformance LazySubviewPrefetcher<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyScrollable<LazyFixedSizeVStackLayout> and conformance LazyScrollable<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyScrollable<LazyFixedSizeVStackLayout> and conformance LazyScrollable<A>;
  if (!lazy protocol witness table cache variable for type LazyScrollable<LazyFixedSizeVStackLayout> and conformance LazyScrollable<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyScrollable<LazyFixedSizeVStackLayout> and conformance LazyScrollable<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyScrollable<LazyFixedSizeVStackLayout> and conformance LazyScrollable<A>;
  if (!lazy protocol witness table cache variable for type LazyScrollable<LazyFixedSizeVStackLayout> and conformance LazyScrollable<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyScrollable<LazyFixedSizeVStackLayout> and conformance LazyScrollable<A>);
  }
  return result;
}

uint64_t specialized Axis.Set.init(_:)(char a1)
{
  return (1 << (a1 & 1));
}

uint64_t outlined destroy of (list: ViewList, attribute: Attribute<ViewList>)(uint64_t a1)
{
  type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (list: ViewList, attribute: Attribute<ViewList>)()
{
  if (!lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>))
  {
    uint64_t v0 = MEMORY[0x1E4F41790];
    type metadata accessor for CVarArg(255, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    type metadata accessor for Attribute<ViewList>(255, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewList>, (unint64_t *)&lazy cache variable for type metadata for ViewList, v0, MEMORY[0x1E4F4E740]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v2) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (list: ViewList, attribute: Attribute<ViewList>));
    }
  }
}

uint64_t outlined init with take of _ViewList_Node(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type LazySubviewPlacements<LazyHGridLayout> and conformance LazySubviewPlacements<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazySubviewPlacements<LazyHGridLayout> and conformance LazySubviewPlacements<A>;
  if (!lazy protocol witness table cache variable for type LazySubviewPlacements<LazyHGridLayout> and conformance LazySubviewPlacements<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazySubviewPlacements<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPlacements);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazySubviewPlacements<LazyHGridLayout> and conformance LazySubviewPlacements<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazySubviewPrefetcher<LazyHGridLayout> and conformance LazySubviewPrefetcher<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyHGridLayout> and conformance LazySubviewPrefetcher<A>;
  if (!lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyHGridLayout> and conformance LazySubviewPrefetcher<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazySubviewPrefetcher<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPrefetcher);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyHGridLayout> and conformance LazySubviewPrefetcher<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyScrollable<LazyHGridLayout> and conformance LazyScrollable<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyScrollable<LazyHGridLayout> and conformance LazyScrollable<A>;
  if (!lazy protocol witness table cache variable for type LazyScrollable<LazyHGridLayout> and conformance LazyScrollable<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyScrollable<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyScrollable<LazyHGridLayout> and conformance LazyScrollable<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyScrollable<LazyHGridLayout> and conformance LazyScrollable<A>;
  if (!lazy protocol witness table cache variable for type LazyScrollable<LazyHGridLayout> and conformance LazyScrollable<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyScrollable<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyScrollable<LazyHGridLayout> and conformance LazyScrollable<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazySubviewPlacements<LazyVGridLayout> and conformance LazySubviewPlacements<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazySubviewPlacements<LazyVGridLayout> and conformance LazySubviewPlacements<A>;
  if (!lazy protocol witness table cache variable for type LazySubviewPlacements<LazyVGridLayout> and conformance LazySubviewPlacements<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazySubviewPlacements<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPlacements);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazySubviewPlacements<LazyVGridLayout> and conformance LazySubviewPlacements<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazySubviewPrefetcher<LazyVGridLayout> and conformance LazySubviewPrefetcher<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyVGridLayout> and conformance LazySubviewPrefetcher<A>;
  if (!lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyVGridLayout> and conformance LazySubviewPrefetcher<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazySubviewPrefetcher<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPrefetcher);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyVGridLayout> and conformance LazySubviewPrefetcher<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyScrollable<LazyVGridLayout> and conformance LazyScrollable<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyScrollable<LazyVGridLayout> and conformance LazyScrollable<A>;
  if (!lazy protocol witness table cache variable for type LazyScrollable<LazyVGridLayout> and conformance LazyScrollable<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyScrollable<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyScrollable<LazyVGridLayout> and conformance LazyScrollable<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyScrollable<LazyVGridLayout> and conformance LazyScrollable<A>;
  if (!lazy protocol witness table cache variable for type LazyScrollable<LazyVGridLayout> and conformance LazyScrollable<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyScrollable<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyScrollable<LazyVGridLayout> and conformance LazyScrollable<A>);
  }
  return result;
}

uint64_t partial apply for closure #2 in applyNode #1 (start:style:node:transform:section:) in _LazyLayout_Subviews.apply(from:style:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, unsigned int *a4, uint64_t a5)
{
  return closure #2 in applyNode #1 (start:style:node:transform:section:) in _LazyLayout_Subviews.apply(from:style:to:)(a1, a2, a3, a4, a5, v5[2], v5[3], v5[4]);
}

ValueMetadata *type metadata accessor for EnableLazyLayoutReuseLoggingAlways()
{
  return &type metadata for EnableLazyLayoutReuseLoggingAlways;
}

ValueMetadata *type metadata accessor for EnableLazyLayoutReuseLogging()
{
  return &type metadata for EnableLazyLayoutReuseLogging;
}

uint64_t assignWithCopy for _LazyLayout_Subviews.Node(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 119);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_release();
      switch(*(unsigned char *)(a1 + 101))
      {
        case 0:
          __swift_destroy_boxed_opaque_existential_1(a1 + 16);
          break;
        case 1:
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1(a1 + 48);
          goto LABEL_10;
        case 2:
          goto LABEL_10;
        case 3:
          swift_bridgeObjectRelease();
LABEL_10:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 119);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(unsigned char *)(a1 + 119) = 1;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      uint64_t v6 = *(unsigned __int8 *)(a2 + 101);
      swift_retain();
      switch(v6)
      {
        case 1:
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
          *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
          *(void *)(a1 + 40) = *(void *)(a2 + 40);
          uint64_t v9 = *(void *)(a2 + 72);
          *(void *)(a1 + 72) = v9;
          *(void *)(a1 + 80) = *(void *)(a2 + 80);
          int v10 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
          swift_bridgeObjectRetain();
          v10(a1 + 48, a2 + 48, v9);
          *(void *)(a1 + 88) = *(void *)(a2 + 88);
          int v11 = *(_DWORD *)(a2 + 96);
          *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
          *(_DWORD *)(a1 + 96) = v11;
          *(unsigned char *)(a1 + 101) = 1;
          goto LABEL_21;
        case 2:
          *(void *)(a1 + 16) = *(void *)(a2 + 16);
          *(unsigned char *)(a1 + 101) = 2;
          goto LABEL_21;
        case 3:
          *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(void *)(a1 + 32) = *(void *)(a2 + 32);
          *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
          *(unsigned char *)(a1 + 101) = 3;
          swift_bridgeObjectRetain();
LABEL_21:
          swift_bridgeObjectRetain();
          break;
        default:
          uint64_t v7 = *(void *)(a2 + 40);
          *(void *)(a1 + 40) = v7;
          *(void *)(a1 + 48) = *(void *)(a2 + 48);
          (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 16, a2 + 16);
          char v8 = *(unsigned char *)(a2 + 60);
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
          *(unsigned char *)(a1 + 60) = v8;
          *(unsigned char *)(a1 + 101) = 0;
          break;
      }
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      int v12 = *(_DWORD *)(a2 + 112);
      *(_DWORD *)(a1 + 115) = *(_DWORD *)(a2 + 115);
      *(_DWORD *)(a1 + 112) = v12;
      *(unsigned char *)(a1 + 119) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t assignWithTake for _LazyLayout_Subviews.Node(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 119);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      swift_release();
      switch(*(unsigned char *)(a1 + 101))
      {
        case 0:
          __swift_destroy_boxed_opaque_existential_1(a1 + 16);
          break;
        case 1:
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1(a1 + 48);
          goto LABEL_10;
        case 2:
          goto LABEL_10;
        case 3:
          swift_bridgeObjectRelease();
LABEL_10:
          swift_bridgeObjectRelease();
          break;
        default:
          break;
      }
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 119);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      char v7 = 1;
    }
    else
    {
      char v7 = 0;
      long long v8 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v8;
      *(void *)(a1 + 111) = *(void *)(a2 + 111);
      long long v9 = *(_OWORD *)(a2 + 64);
      long long v10 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      long long v11 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v11;
      *(_OWORD *)(a1 + 64) = v9;
    }
    *(unsigned char *)(a1 + 119) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for _LazyLayout_Subviews.Node(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 120)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 119);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _LazyLayout_Subviews.Node(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 112) = 0;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_DWORD *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 120) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 119) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for _LazyLayout_Subviews.Node(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 119);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for _LazyLayout_Subviews.Node(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    unsigned int v2 = a2 - 2;
    *(void *)(result + 111) = 0;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    LOBYTE(a2) = 2;
    *(_DWORD *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 119) = a2;
  return result;
}

ValueMetadata *type metadata accessor for _LazyLayout_Subviews.Node()
{
  return &type metadata for _LazyLayout_Subviews.Node;
}

ValueMetadata *type metadata accessor for _LazyLayout_PrefetchResult()
{
  return &type metadata for _LazyLayout_PrefetchResult;
}

ValueMetadata *type metadata accessor for EnableLazyLayoutPrefetchLogging()
{
  return &type metadata for EnableLazyLayoutPrefetchLogging;
}

unsigned char *storeEnumTagSinglePayload for _LazyLayout_PrefetchResult(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187A41CACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _LazyLayout_Subview.Kind()
{
  return &type metadata for _LazyLayout_Subview.Kind;
}

uint64_t getEnumTagSinglePayload for _LazyLayout_PlacementContext.Geometry(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 241)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 240);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for _LazyLayout_PlacementContext.Geometry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 240) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 241) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 241) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 240) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for _LazyLayout_PlacementContext.Geometry()
{
  return &unk_1ED47F378;
}

uint64_t assignWithCopy for _LazyLayout_Subview.Data(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  int v4 = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v4;
  int v5 = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(_DWORD *)(a1 + 72) = v5;
  *(unsigned char *)(a1 + 77) = *(unsigned char *)(a2 + 77);
  *(unsigned char *)(a1 + 78) = *(unsigned char *)(a2 + 78);
  return a1;
}

__n128 __swift_memcpy79_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 63) = *(_OWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for _LazyLayout_Subview.Data(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 76);
  *(unsigned char *)(a1 + 77) = *(unsigned char *)(a2 + 77);
  *(unsigned char *)(a1 + 78) = *(unsigned char *)(a2 + 78);
  return a1;
}

uint64_t getEnumTagSinglePayload for _LazyLayout_Subview.Data(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 79)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _LazyLayout_Subview.Data(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 78) = 0;
    *(_WORD *)(result + 76) = 0;
    *(_DWORD *)(result + 72) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 79) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 79) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _LazyLayout_Subview.Data()
{
  return &type metadata for _LazyLayout_Subview.Data;
}

unint64_t lazy protocol witness table accessor for type _LazyLayout_Subview.Kind and conformance _LazyLayout_Subview.Kind()
{
  unint64_t result = lazy protocol witness table cache variable for type _LazyLayout_Subview.Kind and conformance _LazyLayout_Subview.Kind;
  if (!lazy protocol witness table cache variable for type _LazyLayout_Subview.Kind and conformance _LazyLayout_Subview.Kind)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LazyLayout_Subview.Kind and conformance _LazyLayout_Subview.Kind);
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in EnableLazyLayoutPrefetchLogging()
{
  return &protocol witness table for EnableLazyLayoutPrefetchLogging;
}

unint64_t lazy protocol witness table accessor for type _LazyLayout_PrefetchResult and conformance _LazyLayout_PrefetchResult()
{
  unint64_t result = lazy protocol witness table cache variable for type _LazyLayout_PrefetchResult and conformance _LazyLayout_PrefetchResult;
  if (!lazy protocol witness table cache variable for type _LazyLayout_PrefetchResult and conformance _LazyLayout_PrefetchResult)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LazyLayout_PrefetchResult and conformance _LazyLayout_PrefetchResult);
  }
  return result;
}

uint64_t partial apply for closure #1 in _LazyLayout_Subviews.firstIndex(of:style:)(uint64_t a1, unsigned char *a2)
{
  return closure #1 in _LazyLayout_Subviews.firstIndex(of:style:)(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

unint64_t lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier;
  if (!lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier;
  if (!lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier;
  if (!lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<ArchivedAttachmentModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PropertiesTransform<ArchivedAttachmentModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<ArchivedAttachmentModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for PropertiesTransform<ArchivedAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier, (uint64_t)&type metadata for ArchivedAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<ArchivedAttachmentModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

uint64_t destroy for _LazyLayout_Section()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for _LazyLayout_Section(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for _LazyLayout_Section(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

__n128 __swift_memcpy52_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for _LazyLayout_Section(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for _LazyLayout_Section(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 52)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _LazyLayout_Section(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 48) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 52) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 52) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _LazyLayout_Section()
{
  return &type metadata for _LazyLayout_Section;
}

uint64_t type metadata accessor for ResponderViewModifier()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in ResponderViewModifier<A>()
{
  return &protocol witness table for ResponderViewModifier<A>;
}

double static ResponderViewModifier._makeView(modifier:inputs:body:)@<D0>(double *a1@<X8>)
{
  type metadata accessor for DefaultLayoutViewResponder();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  DefaultLayoutViewResponder.init(inputs:)();
  type metadata accessor for ResponderViewModifier();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  type metadata accessor for ResponderChild();
  swift_retain_n();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    _ViewOutputs.viewResponders()();
    swift_retain();
    DefaultLayoutResponderFilter.init(children:responder:)();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    _ViewOutputs.subscript.setter();
  }
  swift_release_n();
  *(void *)a1 = v3;
  double result = v4;
  a1[1] = v4;
  return result;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance ResponderViewModifier<A>@<D0>(double *a1@<X8>)
{
  return static ResponderViewModifier._makeView(modifier:inputs:body:)(a1);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ResponderViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t ResponderChild.value.getter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ResponderViewModifier();
  uint64_t v3 = *(void (**)(uint64_t))AGGraphGetValue();
  swift_retain();
  v3(a2);

  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance ResponderChild<A>()
{
  return ResponderChild.value.getter(*v0, *((void *)v0 + 1));
}

uint64_t type metadata accessor for ResponderChild()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter;
  if (!lazy protocol witness table cache variable for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultLayoutResponderFilter and conformance DefaultLayoutResponderFilter);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in ResponderChild<A>()
{
  return swift_getWitnessTable();
}

uint64_t specialized LinkShapeStyle._apply(to:)(uint64_t a1)
{
  long long v4 = *(_OWORD *)(a1 + 48);
  EnvironmentValues.colorScheme.getter();
  LOBYTE(v4) = 0;
  if (v5 == 1)
  {
    v1.n128_u64[0] = 0x3FA2121212121212;
    v2.n128_u64[0] = 0x3FE0909090909091;
  }
  else
  {
    v2.n128_u64[0] = 0x3FDE9E9E9E9E9E9FLL;
    v1.n128_u64[0] = 0;
  }
  MEMORY[0x18C113940](&v4, v1, v2, 1.0, 1.0);
  Color._apply(to:)();

  return swift_release();
}

ValueMetadata *type metadata accessor for LinkShapeStyle()
{
  return &type metadata for LinkShapeStyle;
}

uint64_t destroy for AccessibilityTableContext(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 4) {
    unsigned int v1 = *(_DWORD *)a1 + 4;
  }
  if (!v1) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t initializeWithCopy for AccessibilityTableContext(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 4) {
    unsigned int v3 = *(_DWORD *)a2 + 4;
  }
  switch(v3)
  {
    case 0u:
      long long v4 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 24) = v4;
      (**(void (***)(uint64_t))(v4 - 8))(a1);
      *(unsigned char *)(a1 + 40) = 0;
      return a1;
    case 1u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v6 = 1;
      goto LABEL_9;
    case 2u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      char v6 = 2;
      goto LABEL_9;
    case 3u:
      *(void *)a1 = *(void *)a2;
      char v6 = 3;
LABEL_9:
      *(unsigned char *)(a1 + 40) = v6;
      break;
    default:
      long long v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
      break;
  }
  return a1;
}

uint64_t assignWithCopy for AccessibilityTableContext(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 4) {
      unsigned int v4 = *(_DWORD *)a1 + 4;
    }
    if (!v4) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *((unsigned __int8 *)a2 + 40);
    if (v5 >= 4) {
      unsigned int v5 = *(_DWORD *)a2 + 4;
    }
    switch(v5)
    {
      case 0u:
        uint64_t v6 = *((void *)a2 + 3);
        *(void *)(a1 + 24) = v6;
        *(void *)(a1 + 32) = *((void *)a2 + 4);
        (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
        *(unsigned char *)(a1 + 40) = 0;
        return a1;
      case 1u:
        *(_OWORD *)a1 = *a2;
        char v9 = 1;
        goto LABEL_14;
      case 2u:
        *(_OWORD *)a1 = *a2;
        char v9 = 2;
        goto LABEL_14;
      case 3u:
        *(void *)a1 = *(void *)a2;
        char v9 = 3;
LABEL_14:
        *(unsigned char *)(a1 + 40) = v9;
        break;
      default:
        long long v7 = *a2;
        long long v8 = a2[1];
        *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
        *(_OWORD *)a1 = v7;
        *(_OWORD *)(a1 + 16) = v8;
        break;
    }
  }
  return a1;
}

uint64_t assignWithTake for AccessibilityTableContext(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 4) {
      unsigned int v4 = *(_DWORD *)a1 + 4;
    }
    if (!v4) {
      __swift_destroy_boxed_opaque_existential_1(a1);
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 4) {
      unsigned int v5 = *(_DWORD *)a2 + 4;
    }
    switch(v5)
    {
      case 0u:
        long long v6 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v6;
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(unsigned char *)(a1 + 40) = 0;
        return a1;
      case 1u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v8 = 1;
        goto LABEL_14;
      case 2u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        char v8 = 2;
        goto LABEL_14;
      case 3u:
        *(void *)a1 = *(void *)a2;
        char v8 = 3;
LABEL_14:
        *(unsigned char *)(a1 + 40) = v8;
        break;
      default:
        long long v7 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v7;
        *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
        break;
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityTableContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 5) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for AccessibilityTableContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)unint64_t result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 40) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for AccessibilityTableContext(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 4) {
    return (*(_DWORD *)a1 + 4);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for AccessibilityTableContext(uint64_t result, unsigned int a2)
{
  if (a2 > 3)
  {
    *(void *)(result + 32) = 0;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 4;
    LOBYTE(a2) = 4;
  }
  *(unsigned char *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityTableContext()
{
  return &type metadata for AccessibilityTableContext;
}

uint64_t ModifiedContent<>.accessibilityTableContext(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 40) == 255)
  {
    return ModifiedContent<>.accessibility()(a2, a3);
  }
  else
  {
    uint64_t result = outlined init with copy of AccessibilityTableContext?(a1, (uint64_t)v6, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    if (v6[40] == 255)
    {
      __break(1u);
    }
    else
    {
      outlined init with take of AccessibilityTableContext((uint64_t)v6, (uint64_t)v7);
      lazy protocol witness table accessor for type AccessibilityProperties.TableContextKey and conformance AccessibilityProperties.TableContextKey();
      ModifiedContent<>.update<A>(_:replacing:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.TableContextKey, (uint64_t)v7, 1, a2, a3);
      return _s7SwiftUI25AccessibilityTableContextOSgWOhTm_0((uint64_t)v7, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718]);
    }
  }
  return result;
}

uint64_t AccessibilityTableContext.resolve(into:for:)(void *a1)
{
  outlined init with copy of AccessibilityTableContext(v1, (uint64_t)&v5);
  if (!v8)
  {
    *a1 |= 0x200000000000uLL;
    return outlined destroy of AccessibilityTableContext((uint64_t)&v5);
  }
  if (v8 != 4) {
    return outlined destroy of AccessibilityTableContext((uint64_t)&v5);
  }
  int8x16_t v3 = vorrq_s8(v6, v7);
  if (*(void *)&vorr_s8(*(int8x8_t *)v3.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)) | v5) {
    return outlined destroy of AccessibilityTableContext((uint64_t)&v5);
  }
  uint64_t result = AccessibilityNullableOptionSet<>.subscript.getter();
  if result == 2 || (result) {
    *a1 |= 0x10000uLL;
  }
  return result;
}

uint64_t AccessibilityCollectionViewTableDataSource.rowCount.getter()
{
  uint64_t v9 = 0;
  outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v0, (uint64_t)v7);
  if (v8)
  {
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v7, (uint64_t)v6);
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_1((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
    outlined init with copy of TableRowList((uint64_t)v6, (uint64_t)v5);
    uint64_t v1 = outlined destroy of TableDataSourceAdaptor((uint64_t)v6);
    MEMORY[0x1F4188790](v1);
    static Update.ensure<A>(_:)();
    outlined destroy of TableRowList((uint64_t)v5);
  }
  else
  {
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?, (void (*)(uint64_t))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  }
  outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v0, (uint64_t)v7);
  if (!v8) {
    goto LABEL_10;
  }
  outlined init with copy of TableDataSourceAdaptor((uint64_t)v7, (uint64_t)v6);
  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_1((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  char v2 = v6[168];
  outlined init with copy of TableDataSourceAdaptor((uint64_t)v6, (uint64_t)v5);
  int v3 = v5[169];
  outlined destroy of TableDataSourceAdaptor((uint64_t)v5);
  outlined destroy of TableDataSourceAdaptor((uint64_t)v6);
  if ((v2 & 1) != 0 || v3 == 2) {
    return v9;
  }
  uint64_t result = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
LABEL_10:
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?, (void (*)(uint64_t))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
    return v9;
  }
  return result;
}

uint64_t AccessibilityCollectionViewTableDataSource.hasGlobalHeader.getter()
{
  outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v0, (uint64_t)v6);
  if (v7)
  {
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v6, (uint64_t)v5);
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_1((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
    int v1 = v5[168];
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v5, (uint64_t)v4);
    uint64_t v2 = (v4[169] != 2) & ~v1;
    outlined destroy of TableDataSourceAdaptor((uint64_t)v4);
    outlined destroy of TableDataSourceAdaptor((uint64_t)v5);
  }
  else
  {
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>?((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?, (void (*)(uint64_t))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
    return 0;
  }
  return v2;
}

uint64_t AccessibilityCollectionViewTableDataSource.columnCount.getter()
{
  type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>?(0, &lazy cache variable for type metadata for TableColumnCollection.Entry?, (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
  MEMORY[0x1F4188790](v1 - 8);
  int v3 = (char *)&v16[-1] - v2;
  outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v0, (uint64_t)v24);
  if (v25)
  {
    outlined init with copy of TableDataSourceAdaptor((uint64_t)v24, (uint64_t)v22);
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_1((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
    int v4 = v23[120];
    outlined destroy of TableDataSourceAdaptor((uint64_t)v22);
    if (v4 == 1)
    {
      outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v0, (uint64_t)v24);
      if (v25)
      {
        outlined init with copy of TableDataSourceAdaptor((uint64_t)v24, (uint64_t)v22);
        _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_1((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
        outlined init with copy of TableColumnCollection((uint64_t)v23, (uint64_t)v21);
        outlined destroy of TableDataSourceAdaptor((uint64_t)v22);
        specialized Collection.first.getter((uint64_t)v3);
        outlined destroy of TableColumnCollection((uint64_t)v21);
        uint64_t v5 = type metadata accessor for TableColumnCollection.Entry(0);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1)
        {
          outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>?((uint64_t)v3, &lazy cache variable for type metadata for TableColumnCollection.Entry?, (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry);
          return 1;
        }
      }
      else
      {
        outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>?((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?, (void (*)(uint64_t))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
        uint64_t v13 = type metadata accessor for TableColumnCollection.Entry(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 1, 1, v13);
      }
      uint64_t v8 = &lazy cache variable for type metadata for TableColumnCollection.Entry?;
      uint64_t v9 = (void (*)(uint64_t))type metadata accessor for TableColumnCollection.Entry;
      long long v10 = v3;
LABEL_15:
      outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>?((uint64_t)v10, v8, v9);
      return 0;
    }
  }
  else
  {
    outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>?((uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?, (void (*)(uint64_t))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  }
  outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v0, (uint64_t)v24);
  if (!v25)
  {
    uint64_t v8 = (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?;
    uint64_t v9 = (void (*)(uint64_t))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>;
    long long v10 = v24;
    goto LABEL_15;
  }
  outlined init with copy of TableDataSourceAdaptor((uint64_t)v24, (uint64_t)v22);
  _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_1((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  outlined init with copy of TableColumnCollection((uint64_t)v23, (uint64_t)v21);
  outlined destroy of TableDataSourceAdaptor((uint64_t)v22);
  outlined init with copy of TableColumnCollection.Backing((uint64_t)v21, (uint64_t)v19);
  if (v20)
  {
    uint64_t v7 = *(void *)(*(void *)&v19[0] + 16);
    swift_bridgeObjectRelease();
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v19, (uint64_t)v16);
    uint64_t v11 = v17;
    uint64_t v12 = v18;
    __swift_project_boxed_opaque_existential_1(v16, v17);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v11, v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  }
  uint64_t v6 = specialized RandomAccessCollection<>.distance(from:to:)(0, v7);
  outlined destroy of TableColumnCollection((uint64_t)v21);
  return v6;
}

uint64_t AccessibilityCollectionViewTableAttachment.value.getter@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>();
  Weakuint64_t Value = (void *)AGGraphGetWeakValue();
  int v3 = (void *)MEMORY[0x1E4FBC8C8];
  if (WeakValue)
  {
    uint64_t v4 = *WeakValue + *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)*WeakValue) + 0x88);
    swift_beginAccess();
    outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>(v4, (uint64_t)&v12);
  }
  else
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
  }
  uint64_t v5 = (void *)AGGraphGetWeakValue();
  if (v5) {
    uint64_t v6 = MEMORY[0x18C119DF0](*v5 + *(void *)((*v3 & *(void *)*v5) + 0xF8));
  }
  else {
    uint64_t v6 = 0;
  }
  v24[3] = &type metadata for AccessibilityCollectionViewTableDataSource;
  v24[4] = &protocol witness table for AccessibilityCollectionViewTableDataSource;
  uint64_t v7 = swift_allocObject();
  v24[0] = v7;
  outlined init with take of ShadowListDataSource<TableDataSourceAdaptor>?((uint64_t)&v12, v7 + 16);
  *(void *)(v7 + 208) = v6;
  char v25 = 0;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  uint64_t v11 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTableContext?>();
  *((void *)&v13 + 1) = v8;
  *(void *)&long long v14 = lazy protocol witness table accessor for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityTableContext?> and conformance AccessibilityPropertiesEntry<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTableContext?>);
  *(void *)&long long v12 = swift_allocObject();
  outlined init with copy of AccessibilityTableContext?((uint64_t)v24, v12 + 16, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
  specialized Dictionary.subscript.setter((uint64_t)&v12, (uint64_t)&type metadata for AccessibilityProperties.TableContextKey);
  _s7SwiftUI25AccessibilityTableContextOSgWOhTm_0((uint64_t)v24, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718]);
  v24[0] = v11;
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  long long v9 = v12;
  type metadata accessor for AccessibilityTableContext?(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t result = swift_allocObject();
  *(_OWORD *)(result + 16) = v9;
  *a1 = result;
  a1[1] = 0;
  return result;
}

void type metadata accessor for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>()
{
  if (!lazy cache variable for type metadata for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>)
  {
    type metadata accessor for SelectionManagerBox<AnyHashable>();
    lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    lazy protocol witness table accessor for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>((unint64_t *)&lazy protocol witness table cache variable for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>, (void (*)(uint64_t))type metadata accessor for SelectionManagerBox<AnyHashable>);
    unint64_t v0 = type metadata accessor for UICollectionViewListCoordinator();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UICollectionViewListCoordinator<TableDataSourceAdaptor, SelectionManagerBox<AnyHashable>>);
    }
  }
}

void type metadata accessor for SelectionManagerBox<AnyHashable>()
{
  if (!lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>)
  {
    unint64_t v0 = type metadata accessor for SelectionManagerBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SelectionManagerBox<AnyHashable>);
    }
  }
}

uint64_t sub_187A43C68()
{
  if (*(void *)(v0 + 40))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(v0 + 104)) {
      swift_bridgeObjectRelease();
    }
    else {
      __swift_destroy_boxed_opaque_existential_1(v0 + 64);
    }
    swift_bridgeObjectRelease();
    if (*(void *)(v0 + 136))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(v0 + 160))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

uint64_t outlined init with take of ShadowListDataSource<TableDataSourceAdaptor>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>?(0, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?, (void (*)(uint64_t))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>()
{
  if (!lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>)
  {
    lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
    unint64_t v0 = type metadata accessor for ShadowListDataSource();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>);
    }
  }
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityTableContext?>()
{
  if (!lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTableContext?>)
  {
    type metadata accessor for AccessibilityTableContext?(255, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityTableContext?>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type SelectionManagerBox<AnyHashable> and conformance SelectionManagerBox<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187A43ED4()
{
  if (!*(unsigned char *)(v0 + 56)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }

  return swift_deallocObject();
}

uint64_t protocol witness for Rule.value.getter in conformance AccessibilityCollectionViewTableAttachment@<X0>(uint64_t *a1@<X8>)
{
  return AccessibilityCollectionViewTableAttachment.value.getter(a1);
}

uint64_t protocol witness for TableRowVisitor.visit<A, B>(rowValue:view:children:traits:) in conformance AccessibilityRowAccumulator(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized AccessibilityRowAccumulator.visit<A, B>(rowValue:view:children:traits:)(a3);
}

uint64_t outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of AccessibilityTableContext(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined destroy of AccessibilityTableContext(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 40);
  if (v2 >= 4) {
    unsigned int v2 = *(_DWORD *)a1 + 4;
  }
  if (!v2) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

void type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>?(0, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?, (void (*)(uint64_t))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ShadowListDataSource<TableDataSourceAdaptor>?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>?(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityRowAccumulator()
{
  return &type metadata for AccessibilityRowAccumulator;
}

void destroy for AccessibilityCollectionViewTableDataSource(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_bridgeObjectRelease();
    if (*(unsigned char *)(a1 + 88)) {
      swift_bridgeObjectRelease();
    }
    else {
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    }
    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 120))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
    }
    if (*(void *)(a1 + 144))
    {
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  unsigned int v2 = *(void **)(a1 + 192);
}

uint64_t initializeWithCopy for AccessibilityCollectionViewTableDataSource(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = v5;
    (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    char v6 = *(unsigned char *)(a2 + 88);
    swift_bridgeObjectRetain();
    if (v6)
    {
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v13 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 72) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1 + 48, a2 + 48);
    }
    *(unsigned char *)(a1 + 88) = v6;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    uint64_t v14 = *(void *)(a2 + 120);
    swift_bridgeObjectRetain();
    if (v14)
    {
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = v14;
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v15 = *(void *)(a2 + 144);
      if (v15)
      {
LABEL_8:
        *(void *)(a1 + 136) = *(void *)(a2 + 136);
        *(void *)(a1 + 144) = v15;
        uint64_t v16 = *(void *)(a2 + 160);
        *(void *)(a1 + 152) = *(void *)(a2 + 152);
        *(void *)(a1 + 160) = v16;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_11:
        *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
        *(_WORD *)(a1 + 169) = *(_WORD *)(a2 + 169);
        uint64_t v18 = *(void *)(a2 + 184);
        *(void *)(a1 + 176) = *(void *)(a2 + 176);
        *(void *)(a1 + 184) = v18;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_12;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      uint64_t v15 = *(void *)(a2 + 144);
      if (v15) {
        goto LABEL_8;
      }
    }
    long long v17 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v17;
    goto LABEL_11;
  }
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  long long v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  long long v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  long long v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v12;
LABEL_12:
  long long v19 = *(void **)(a2 + 192);
  *(void *)(a1 + 192) = v19;
  id v20 = v19;
  return a1;
}

uint64_t assignWithCopy for AccessibilityCollectionViewTableDataSource(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 3);
  if (!*(void *)(a1 + 24))
  {
    if (!v4)
    {
      long long v15 = *a2;
      long long v16 = a2[1];
      long long v17 = a2[3];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v17;
      *(_OWORD *)a1 = v15;
      *(_OWORD *)(a1 + 16) = v16;
      long long v18 = a2[4];
      long long v19 = a2[5];
      long long v20 = a2[7];
      *(_OWORD *)(a1 + 96) = a2[6];
      *(_OWORD *)(a1 + 112) = v20;
      *(_OWORD *)(a1 + 64) = v18;
      *(_OWORD *)(a1 + 80) = v19;
      long long v21 = a2[8];
      long long v22 = a2[9];
      long long v23 = a2[11];
      *(_OWORD *)(a1 + 160) = a2[10];
      *(_OWORD *)(a1 + 176) = v23;
      *(_OWORD *)(a1 + 128) = v21;
      *(_OWORD *)(a1 + 144) = v22;
      goto LABEL_34;
    }
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    (**(void (***)(uint64_t, long long *))(v4 - 8))(a1, a2);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    char v5 = *((unsigned char *)a2 + 88);
    swift_bridgeObjectRetain();
    if (v5)
    {
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v28 = *((void *)a2 + 9);
      *(void *)(a1 + 72) = v28;
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      (**(void (***)(uint64_t, uint64_t))(v28 - 8))(a1 + 48, (uint64_t)(a2 + 3));
    }
    *(unsigned char *)(a1 + 88) = v5;
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
    uint64_t v29 = *((void *)a2 + 15);
    swift_bridgeObjectRetain();
    if (v29)
    {
      *(void *)(a1 + 112) = *((void *)a2 + 14);
      *(void *)(a1 + 120) = *((void *)a2 + 15);
      *(void *)(a1 + 128) = *((void *)a2 + 16);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      if (*((void *)a2 + 18))
      {
LABEL_20:
        *(void *)(a1 + 136) = *((void *)a2 + 17);
        *(void *)(a1 + 144) = *((void *)a2 + 18);
        *(void *)(a1 + 152) = *((void *)a2 + 19);
        *(void *)(a1 + 160) = *((void *)a2 + 20);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
LABEL_24:
        *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
        *(unsigned char *)(a1 + 169) = *((unsigned char *)a2 + 169);
        *(unsigned char *)(a1 + 170) = *((unsigned char *)a2 + 170);
        *(void *)(a1 + 176) = *((void *)a2 + 22);
        *(void *)(a1 + 184) = *((void *)a2 + 23);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        goto LABEL_34;
      }
    }
    else
    {
      long long v31 = a2[7];
      *(void *)(a1 + 128) = *((void *)a2 + 16);
      *(_OWORD *)(a1 + 112) = v31;
      if (*((void *)a2 + 18)) {
        goto LABEL_20;
      }
    }
    long long v32 = *(long long *)((char *)a2 + 152);
    *(_OWORD *)(a1 + 136) = *(long long *)((char *)a2 + 136);
    *(_OWORD *)(a1 + 152) = v32;
    goto LABEL_24;
  }
  if (v4)
  {
    __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if ((long long *)a1 != a2)
    {
      outlined destroy of TableColumnCollection.Backing(a1 + 48);
      if (*((unsigned char *)a2 + 88))
      {
        *(void *)(a1 + 48) = *((void *)a2 + 6);
        *(unsigned char *)(a1 + 88) = 1;
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v24 = *((void *)a2 + 9);
        *(void *)(a1 + 72) = v24;
        *(void *)(a1 + 80) = *((void *)a2 + 10);
        (**(void (***)(uint64_t, uint64_t))(v24 - 8))(a1 + 48, (uint64_t)(a2 + 3));
        *(unsigned char *)(a1 + 88) = 0;
      }
    }
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
    char v25 = (_OWORD *)(a1 + 112);
    uint64_t v26 = a2 + 7;
    uint64_t v27 = *((void *)a2 + 15);
    if (*(void *)(a1 + 120))
    {
      if (v27)
      {
        *(void *)(a1 + 112) = *((void *)a2 + 14);
        swift_retain();
        swift_release();
        *(void *)(a1 + 120) = *((void *)a2 + 15);
        swift_retain();
        swift_release();
        *(void *)(a1 + 128) = *((void *)a2 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_1(a1 + 112, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
        uint64_t v30 = *((void *)a2 + 16);
        _OWORD *v25 = *v26;
        *(void *)(a1 + 128) = v30;
      }
    }
    else if (v27)
    {
      *(void *)(a1 + 112) = *((void *)a2 + 14);
      *(void *)(a1 + 120) = *((void *)a2 + 15);
      *(void *)(a1 + 128) = *((void *)a2 + 16);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v33 = *v26;
      *(void *)(a1 + 128) = *((void *)a2 + 16);
      _OWORD *v25 = v33;
    }
    unsigned int v34 = (_OWORD *)(a1 + 136);
    char v35 = (long long *)((char *)a2 + 136);
    uint64_t v36 = *((void *)a2 + 18);
    if (*(void *)(a1 + 144))
    {
      if (v36)
      {
        *(void *)(a1 + 136) = *((void *)a2 + 17);
        swift_retain();
        swift_release();
        *(void *)(a1 + 144) = *((void *)a2 + 18);
        swift_retain();
        swift_release();
        *(void *)(a1 + 152) = *((void *)a2 + 19);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        *(void *)(a1 + 160) = *((void *)a2 + 20);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        _s7SwiftUI25AccessibilityTableContextOSgWOhTm_0(a1 + 136, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, MEMORY[0x1E4F41638]);
        long long v37 = *(long long *)((char *)a2 + 152);
        *unsigned int v34 = *v35;
        *(_OWORD *)(a1 + 152) = v37;
      }
    }
    else if (v36)
    {
      *(void *)(a1 + 136) = *((void *)a2 + 17);
      *(void *)(a1 + 144) = *((void *)a2 + 18);
      *(void *)(a1 + 152) = *((void *)a2 + 19);
      *(void *)(a1 + 160) = *((void *)a2 + 20);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v38 = *(long long *)((char *)a2 + 152);
      *unsigned int v34 = *v35;
      *(_OWORD *)(a1 + 152) = v38;
    }
    *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
    *(unsigned char *)(a1 + 169) = *((unsigned char *)a2 + 169);
    *(unsigned char *)(a1 + 170) = *((unsigned char *)a2 + 170);
    *(void *)(a1 + 176) = *((void *)a2 + 22);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(a1 + 184) = *((void *)a2 + 23);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_1(a1, (uint64_t (*)(void))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
    long long v6 = a2[3];
    long long v8 = *a2;
    long long v7 = a2[1];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v6;
    *(_OWORD *)a1 = v8;
    *(_OWORD *)(a1 + 16) = v7;
    long long v9 = a2[7];
    long long v11 = a2[4];
    long long v10 = a2[5];
    *(_OWORD *)(a1 + 96) = a2[6];
    *(_OWORD *)(a1 + 112) = v9;
    *(_OWORD *)(a1 + 64) = v11;
    *(_OWORD *)(a1 + 80) = v10;
    long long v12 = a2[11];
    long long v14 = a2[8];
    long long v13 = a2[9];
    *(_OWORD *)(a1 + 160) = a2[10];
    *(_OWORD *)(a1 + 176) = v12;
    *(_OWORD *)(a1 + 128) = v14;
    *(_OWORD *)(a1 + 144) = v13;
  }
LABEL_34:
  int v39 = *(void **)(a1 + 192);
  uint64_t v40 = (void *)*((void *)a2 + 24);
  *(void *)(a1 + 192) = v40;
  id v41 = v40;

  return a1;
}

uint64_t _s7SwiftUI25AccessibilityTableContextOSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for AccessibilityTableContext?(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

__n128 __swift_memcpy200_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 144) = result;
  return result;
}

uint64_t assignWithTake for AccessibilityCollectionViewTableDataSource(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    if (*(void *)(a2 + 24))
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      long long v4 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v4;
      uint64_t v5 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v5;
      swift_bridgeObjectRelease();
      if (a1 != a2)
      {
        outlined destroy of TableColumnCollection.Backing(a1 + 48);
        long long v6 = *(_OWORD *)(a2 + 64);
        *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
        *(_OWORD *)(a1 + 64) = v6;
        *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      }
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_bridgeObjectRelease();
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      if (*(void *)(a1 + 120))
      {
        if (*(void *)(a2 + 120))
        {
          *(void *)(a1 + 112) = *(void *)(a2 + 112);
          swift_release();
          *(void *)(a1 + 120) = *(void *)(a2 + 120);
          swift_release();
          *(void *)(a1 + 128) = *(void *)(a2 + 128);
          swift_bridgeObjectRelease();
          goto LABEL_12;
        }
        _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_1(a1 + 112, (uint64_t (*)(void))type metadata accessor for Binding<[SwiftUIAnySortComparator]>);
      }
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
LABEL_12:
      if (*(void *)(a1 + 144))
      {
        if (*(void *)(a2 + 144))
        {
          *(void *)(a1 + 136) = *(void *)(a2 + 136);
          swift_release();
          *(void *)(a1 + 144) = *(void *)(a2 + 144);
          swift_release();
          *(void *)(a1 + 152) = *(void *)(a2 + 152);
          swift_bridgeObjectRelease();
          *(void *)(a1 + 160) = *(void *)(a2 + 160);
          swift_bridgeObjectRelease();
LABEL_17:
          *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
          *(unsigned char *)(a1 + 169) = *(unsigned char *)(a2 + 169);
          *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
          *(void *)(a1 + 176) = *(void *)(a2 + 176);
          swift_bridgeObjectRelease();
          *(void *)(a1 + 184) = *(void *)(a2 + 184);
          swift_bridgeObjectRelease();
          goto LABEL_18;
        }
        _s7SwiftUI25AccessibilityTableContextOSgWOhTm_0(a1 + 136, &lazy cache variable for type metadata for Binding<AnyTableColumnCustomization>, (uint64_t)&type metadata for AnyTableColumnCustomization, MEMORY[0x1E4F41638]);
      }
      long long v13 = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = v13;
      goto LABEL_17;
    }
    _s7SwiftUI7BindingVySayAA0A19UIAnySortComparatorVGGWOhTm_1(a1, (uint64_t (*)(void))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  }
  long long v7 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v7;
  long long v8 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v9;
  long long v10 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v10;
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  long long v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v12;
LABEL_18:
  long long v14 = *(void **)(a1 + 192);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);

  return a1;
}

uint64_t getEnumTagSinglePayload for AccessibilityCollectionViewTableDataSource(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 200)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessibilityCollectionViewTableDataSource(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 200) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 200) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityCollectionViewTableDataSource()
{
  return &type metadata for AccessibilityCollectionViewTableDataSource;
}

ValueMetadata *type metadata accessor for AccessibilityCollectionViewTableAttachment()
{
  return &type metadata for AccessibilityCollectionViewTableAttachment;
}

ValueMetadata *type metadata accessor for AccessibilityTableSpanPosition()
{
  return &type metadata for AccessibilityTableSpanPosition;
}

ValueMetadata *type metadata accessor for AccessibilityTableCellPosition()
{
  return &type metadata for AccessibilityTableCellPosition;
}

unint64_t lazy protocol witness table accessor for type AccessibilityCollectionViewTableAttachment and conformance AccessibilityCollectionViewTableAttachment()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityCollectionViewTableAttachment and conformance AccessibilityCollectionViewTableAttachment;
  if (!lazy protocol witness table cache variable for type AccessibilityCollectionViewTableAttachment and conformance AccessibilityCollectionViewTableAttachment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityCollectionViewTableAttachment and conformance AccessibilityCollectionViewTableAttachment);
  }
  return result;
}

uint64_t specialized AccessibilityRowAccumulator.visit<A, B>(rowValue:view:children:traits:)(uint64_t a1)
{
  long long v2 = v1;
  outlined init with copy of AccessibilityTableContext?(a1, (uint64_t)&v10, &lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList);
  if (*((void *)&v11 + 1))
  {
    long long v13 = v10;
    long long v14 = v11;
    uint64_t v3 = v12;
    uint64_t v15 = v12;
    uint64_t v4 = *((void *)&v11 + 1);
    __swift_project_boxed_opaque_existential_1(&v13, *((uint64_t *)&v11 + 1));
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 24))(v4, v3);
    uint64_t v6 = swift_release();
    if (v5)
    {
      uint64_t v7 = *((void *)&v14 + 1);
      uint64_t v8 = v15;
      __swift_project_boxed_opaque_existential_1(&v13, *((uint64_t *)&v14 + 1));
      *v2 += (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 16))(v7, v8);
    }
    else
    {
      MEMORY[0x1F4188790](v6);
      static Update.ensure<A>(_:)();
    }
    outlined destroy of TableRowList((uint64_t)&v13);
  }
  else
  {
    _s7SwiftUI25AccessibilityTableContextOSgWOhTm_0((uint64_t)&v10, &lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, MEMORY[0x1E4FBB718]);
    ++*v1;
  }
  return 1;
}

void type metadata accessor for AccessibilityTableContext?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.TableContextKey and conformance AccessibilityProperties.TableContextKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProperties.TableContextKey and conformance AccessibilityProperties.TableContextKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.TableContextKey and conformance AccessibilityProperties.TableContextKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.TableContextKey and conformance AccessibilityProperties.TableContextKey);
  }
  return result;
}

void *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF7WeakBoxVyAHGs5NeverOTg503_s7d4UI17fg6CSgAA7hi16VyACGIeggr_AcGs5j120OIegnrzr_TR03_s7a4UI35c92FocusStoreListModifierV10ItemFilter33_2CCA6A140D82DC7D61A1924E7705DDD6LLV11updateValueyyFAA7ef7O29AA0C4D11CGAKSgcfu6_Tf3nnnpf_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
    if (!v2) {
      return (void *)v3;
    }
    uint64_t v11 = MEMORY[0x1E4FBC860];
    unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v11;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x18C117680](v5, a1);
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      swift_unknownObjectWeakInit();
      swift_unknownObjectWeakAssign();

      uint64_t v11 = v3;
      unint64_t v9 = *(void *)(v3 + 16);
      unint64_t v8 = *(void *)(v3 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v8 > 1), v9 + 1, 1);
        uint64_t v3 = v11;
      }
      ++v5;
      *(void *)(v3 + 16) = v9 + 1;
      outlined init with take of Any?((uint64_t)v10, v3 + 8 * v9 + 32, (uint64_t)&lazy cache variable for type metadata for WeakBox<AccessibilityNode>, (uint64_t)type metadata accessor for AccessibilityNode, MEMORY[0x1E4F41720], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Attribute<(_:)>);
      if (v2 == v5) {
        return (void *)v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t static AccessibilityFocusStore.Key.defaultValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for AccessibilityFocusStore.Entry();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance AccessibilityFocusStore.Key<A>@<X0>(uint64_t a1@<X8>)
{
  return static AccessibilityFocusStore.Key.defaultValue.getter(a1);
}

uint64_t AccessibilityFocusStore.makeStoreContent(_:)(uint64_t result)
{
  uint64_t v2 = v1;
  unint64_t v3 = *(void *)(result + 16);
  if (v3)
  {
    uint64_t v4 = result;
    if (v3 >= 5)
    {
      uint64_t v7 = *(void *)(result + 16) & 3;
      if ((v3 & 3) == 0) {
        uint64_t v7 = 4;
      }
      unint64_t v5 = v3 - v7;
      unint64_t v8 = (uint64_t *)(result + 144);
      int64x2_t v9 = 0uLL;
      unint64_t v10 = v5;
      int64x2_t v11 = 0uLL;
      do
      {
        uint64_t v12 = v8 + 7;
        v13.i64[0] = *(v8 - 14);
        v13.i64[1] = *(v8 - 7);
        uint64_t v14 = *v8;
        v8 += 28;
        v15.i64[0] = v14;
        v15.i64[1] = *v12;
        int64x2_t v9 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v13, v9), (int8x16_t)v13, (int8x16_t)v9);
        int64x2_t v11 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v15, v11), (int8x16_t)v15, (int8x16_t)v11);
        v10 -= 4;
      }
      while (v10);
      int8x16_t v16 = vbslq_s8((int8x16_t)vcgtq_s64(v9, v11), (int8x16_t)v9, (int8x16_t)v11);
      uint64_t v17 = vextq_s8(v16, v16, 8uLL).u64[0];
      int8x8_t v6 = vbsl_s8((int8x8_t)vcgtd_s64(v16.i64[0], v17), *(int8x8_t *)v16.i8, (int8x8_t)v17);
    }
    else
    {
      unint64_t v5 = 0;
      int8x8_t v6 = 0;
    }
    unint64_t v18 = v3 - v5;
    uint64_t v19 = 56 * v5 + 32;
    do
    {
      if (*(void *)(result + v19) > *(void *)&v6) {
        int8x8_t v6 = *(int8x8_t *)(result + v19);
      }
      v19 += 56;
      --v18;
    }
    while (v18);
    int8x8_t *v1 = v6;
    swift_bridgeObjectRetain();
    uint64_t v20 = 32;
    uint64_t v41 = v4;
    while (1)
    {
      long long v23 = *(_OWORD *)(v4 + v20 + 16);
      long long v44 = *(_OWORD *)(v4 + v20);
      long long v45 = v23;
      long long v46 = *(_OWORD *)(v4 + v20 + 32);
      uint64_t v47 = *(void *)(v4 + v20 + 48);
      uint64_t v24 = *((void *)&v44 + 1);
      int8x8_t v25 = v2[2];
      if (!*(void *)(*(void *)&v25 + 16)) {
        goto LABEL_20;
      }
      unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(*((uint64_t *)&v44 + 1));
      if (v27)
      {
        uint64_t v43 = *(void *)(*(void *)(*(void *)&v25 + 56) + 8 * v26);
        swift_retain();
      }
      else
      {
LABEL_20:
        uint64_t v43 = 0;
      }
      long long v28 = v46;
      uint64_t v29 = (void (*)(void, void, uint64_t *))v45;
      outlined retain of AccessibilityFocusStoreList.Item((uint64_t)&v44);
      v29(v28, *((void *)&v28 + 1), &v43);
      uint64_t v30 = v43;
      swift_retain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v42 = (void *)v2[2];
      v2[2] = (int8x8_t)0x8000000000000000;
      unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)(v24);
      uint64_t v34 = v42[2];
      BOOL v35 = (v32 & 1) == 0;
      uint64_t v36 = v34 + v35;
      if (__OFADD__(v34, v35)) {
        break;
      }
      char v37 = v32;
      if (v42[3] >= v36)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v36, isUniquelyReferenced_nonNull_native);
        unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(v24);
        if ((v37 & 1) != (v39 & 1)) {
          goto LABEL_31;
        }
        unint64_t v33 = v38;
      }
      uint64_t v4 = v41;
      if (v37)
      {
        uint64_t v40 = v42[7];
        swift_release();
        *(void *)(v40 + 8 * v33) = v30;
      }
      else
      {
        specialized _NativeDictionary._insert(at:key:value:)(v33, v24, v30, v42);
      }
      v2[2] = (int8x8_t)v42;
      uint64_t v21 = swift_bridgeObjectRelease();
      MEMORY[0x1F4188790](v21);
      uint64_t v22 = swift_bridgeObjectRetain();
      specialized Sequence.forEach(_:)(v22, partial apply for closure #1 in AccessibilityFocusStore.makeStoreContent(_:));
      swift_release();
      swift_bridgeObjectRelease();
      outlined release of AccessibilityFocusStoreList.Item((uint64_t)&v44);
      v20 += 56;
      if (!--v3) {
        return swift_bridgeObjectRelease();
      }
    }
    __break(1u);
LABEL_31:
    unint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    int8x8_t *v1 = 0;
  }
  return result;
}

uint64_t closure #1 in AccessibilityFocusStore.makeStoreContent(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 8);
  if (*(void *)(v6 + 16) && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v8 & 1) != 0))
  {
    unint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
    swift_bridgeObjectRetain();
    if (!*(void *)(v9 + 16)) {
      goto LABEL_8;
    }
  }
  else
  {
    unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    if (!*(void *)(v9 + 16)) {
      goto LABEL_8;
    }
  }
  uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if (v11)
  {
    uint64_t v12 = *(void *)(*(void *)(v9 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
LABEL_8:
  uint64_t v12 = MEMORY[0x1E4FBC870];
LABEL_9:
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v14 = specialized Set.union<A>(_:)(v13, v12);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, a2, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  char v16 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *(void *)(a3 + 8);
  *(void *)(a3 + 8) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, a1, v16);
  *(void *)(a3 + 8) = v18;
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t AccessibilityFocusStoreLocation.wasRead.setter(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *v1 + 72)) = result;
  return result;
}

uint64_t (*AccessibilityFocusStoreLocation.wasRead.modify(uint64_t a1))(uint64_t result)
{
  *(void *)a1 = v1;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)v1
                       + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *v1 + 72));
  return AccessibilityFocusStoreLocation.wasRead.modify;
}

uint64_t AccessibilityFocusStoreLocation.wasRead.modify(uint64_t result)
{
  *(unsigned char *)(*(void *)result
           + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + **(void **)result + 72)) = *(unsigned char *)(result + 8);
  return result;
}

uint64_t AccessibilityFocusStoreLocation.get()@<X0>(uint64_t a1@<X8>)
{
  return AccessibilityFocusStoreLocation.getValue(forReading:)(0, a1);
}

uint64_t AccessibilityFocusStoreLocation.deferUpdate(_:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(*v1 + class metadata base offset for AccessibilityFocusStoreLocation);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  double v7 = MEMORY[0x1F4188790](v5);
  unint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = *(int *)(TupleTypeMetadata2 + 48);
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(v3 - 8) + 16))((char *)&v13 - v8, a1, v3, v7);
  *(void *)&v9[v10] = *(void *)((char *)v1
                                  + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *v1 + 64));
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v9, 0, 1, TupleTypeMetadata2);
  char v11 = (char *)v1 + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *v1 + 48);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v11, v9, v5);
  return swift_endAccess();
}

uint64_t AccessibilityFocusStoreLocation.set(_:transaction:)(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + class metadata base offset for AccessibilityFocusStoreLocation);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v1 + 5);
  double v7 = (char *)&v12 - v6;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v9 = swift_allocObject();
    swift_weakInit();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    char v11 = (char *)swift_allocObject();
    *((void *)v11 + 2) = v4;
    *((void *)v11 + 3) = *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + v3 + 8);
    *((void *)v11 + 4) = v9;
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v11[v10], v7, v4);
    swift_retain();
    default argument 1 of GraphHost.asyncTransaction(_:id:_:)();
    GraphHost.asyncTransaction(_:id:_:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void closure #1 in AccessibilityFocusStoreLocation.set(_:transaction:)(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = a2;
  uint64_t v2 = type metadata accessor for AccessibilityFocusStore.Entry();
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v38 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v35 - v4;
  uint64_t v6 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v7);
  char v39 = (char *)&v35 - v8;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v35 - v12;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return;
  }
  int64x2_t v15 = (void *)Strong;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v13, 1, 1, TupleTypeMetadata2);
  char v16 = (char *)v15 + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *v15 + 48);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v16, v13, v10);
  swift_endAccess();
  uint64_t v17 = v40;
  AccessibilityFocusStoreLocation.find(for:)((uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v5, 1, v2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v3);
    AccessibilityFocusStoreLocation.deferUpdate(_:)(v17);
LABEL_26:
    swift_release();
    return;
  }
  uint64_t v18 = v2;
  uint64_t v19 = v6;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v39, v5, v2);
  uint64_t v20 = swift_bridgeObjectRetain();
  unint64_t v21 = specialized Sequence.compactMap<A>(_:)(v20);
  swift_bridgeObjectRelease();
  if (v21 >> 62) {
    goto LABEL_34;
  }
  uint64_t v22 = *(void *)((v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v22)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v39, v18);
    goto LABEL_26;
  }
LABEL_6:
  unint64_t v23 = v21 & 0xC000000000000001;
  uint64_t v40 = v21 + 32;
  uint64_t v24 = 4;
  do
  {
    if (v23) {
      int8x8_t v25 = (char *)MEMORY[0x18C117680](v24 - 4, v21);
    }
    else {
      int8x8_t v25 = (char *)*(id *)(v21 + 8 * v24);
    }
    unint64_t v26 = v25;
    uint64_t v27 = v24 - 3;
    if (__OFADD__(v24 - 4, 1))
    {
      __break(1u);
LABEL_34:
      swift_bridgeObjectRetain();
      uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
      if (!v22) {
        goto LABEL_25;
      }
      goto LABEL_6;
    }
    v41[0] = 4;
    AccessibilityNode.impliedVisibility(consideringParent:with:)(1, v41, v42);
    if (v42[0] != 3)
    {
      swift_bridgeObjectRelease_n();
LABEL_29:
      AccessibilityNode.platformElement.getter();
      if (!v33) {
        unint64_t v33 = v26;
      }
      uint64_t v34 = v33;
      *(_WORD *)uint64_t v42 = *(_WORD *)((char *)v15
                               + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *v15 + 40));
      specialized static AccessibilityFocus.move(to:for:)(v33, v42);
      swift_release();

      (*(void (**)(char *, uint64_t))(v19 + 8))(v39, v18);
      return;
    }

    ++v24;
  }
  while (v27 != v22);
  swift_bridgeObjectRelease();
  uint64_t v38 = v21 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  unint64_t v28 = 0;
  uint64_t v36 = v19;
  uint64_t v37 = v18;
  while (v23)
  {
    id v29 = (id)MEMORY[0x18C117680](v28, v21);
    BOOL v30 = __OFADD__(v28++, 1);
    if (v30) {
      goto LABEL_36;
    }
LABEL_20:
    long long v31 = (char *)v29;
    v41[0] = 4;
    unint64_t v26 = v31;
    AccessibilityNode.impliedVisibility(consideringParent:with:)(1, v41, v42);
    if (v42[0] != 3)
    {
LABEL_28:
      swift_bridgeObjectRelease_n();

      uint64_t v19 = v36;
      uint64_t v18 = v37;
      goto LABEL_29;
    }
    while (1)
    {
      char v32 = (void *)MEMORY[0x18C119DF0](&v26[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);

      if (!v32) {
        break;
      }
      unint64_t v26 = v32;
      v41[0] = 4;
      AccessibilityNode.impliedVisibility(consideringParent:with:)(1, v41, v42);
      if (v42[0] != 3) {
        goto LABEL_28;
      }
    }

    uint64_t v19 = v36;
    uint64_t v18 = v37;
    if (v28 == v22) {
      goto LABEL_25;
    }
  }
  if (v28 >= *(void *)(v38 + 16)) {
    goto LABEL_37;
  }
  id v29 = *(id *)(v40 + 8 * v28);
  BOOL v30 = __OFADD__(v28++, 1);
  if (!v30) {
    goto LABEL_20;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
}

unint64_t AccessibilityFocusStoreLocation.find(for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AccessibilityFocusStore.Entry();
  unint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(a1, 1, 1, v3);
  if (*(void *)(*(void *)(v1 + 32) + 16))
  {
    unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(v1);
    if (v5)
    {
      uint64_t v6 = type metadata accessor for AccessibilityFocusStore.Key();
      MEMORY[0x1F4188790](v6);
      swift_retain();
      swift_getWitnessTable();
      PropertyList.forEach<A>(keyType:_:)();
      return swift_release();
    }
  }
  return result;
}

uint64_t closure #1 in AccessibilityFocusStoreLocation.find(for:)(uint64_t a1, unsigned char *a2, uint64_t a3, char *a4)
{
  unint64_t v21 = a4;
  uint64_t v22 = a3;
  uint64_t v6 = type metadata accessor for AccessibilityFocusStore.Entry();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  double v13 = MEMORY[0x1F4188790](v12);
  int64x2_t v15 = (char *)&v19 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, v7, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v20 = a2;
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v17(v15, v10, v6);
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0) {
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v15, v6);
  }
  uint64_t v18 = v21;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v21, v7);
  v17(v18, v15, v6);
  uint64_t result = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v18, 0, 1, v6);
  *uint64_t v20 = 1;
  return result;
}

uint64_t closure #1 in AccessibilityFocusStoreLocation.resolve()(uint64_t a1, unsigned char *a2, void *a3, char *a4)
{
  long long v31 = a4;
  char v32 = a2;
  unint64_t v33 = a3;
  uint64_t v5 = type metadata accessor for AccessibilityFocusStore.Entry();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v28 - v11;
  uint64_t v13 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v14);
  BOOL v30 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v28 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v12, a1, v6, v17);
  uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v20(v12, 1, v5) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  }
  id v29 = *(uint64_t (**)(char *, char *, uint64_t))(v13 + 32);
  uint64_t result = v29(v19, v12, v5);
  if (!qword_1ED45AB10) {
    goto LABEL_14;
  }
  uint64_t v22 = (uint64_t (**)(char *, uint64_t))(v7 + 8);
  find #1 <A>(_:) in closure #1 in AccessibilityFocusStoreLocation.resolve()(byte_1ED45AB20, v33, (uint64_t)v19, (uint64_t)v9);
  if (v20(v9, 1, v5) == 1)
  {
    unint64_t v23 = *v22;
    uint64_t result = (*v22)(v9, v6);
    if ((unint64_t)qword_1ED45AB10 < 2) {
      goto LABEL_14;
    }
    find #1 <A>(_:) in closure #1 in AccessibilityFocusStoreLocation.resolve()(byte_1ED45AB21, v33, (uint64_t)v19, (uint64_t)v9);
    if (v20(v9, 1, v5) == 1)
    {
      uint64_t result = v23(v9, v6);
      if ((unint64_t)qword_1ED45AB10 < 3) {
        goto LABEL_14;
      }
      find #1 <A>(_:) in closure #1 in AccessibilityFocusStoreLocation.resolve()(byte_1ED45AB22, v33, (uint64_t)v19, (uint64_t)v9);
      if (v20(v9, 1, v5) == 1)
      {
        uint64_t result = v23(v9, v6);
        if ((unint64_t)qword_1ED45AB10 >= 4)
        {
          find #1 <A>(_:) in closure #1 in AccessibilityFocusStoreLocation.resolve()(byte_1ED45AB23, v33, (uint64_t)v19, (uint64_t)v9);
          if (v20(v9, 1, v5) == 1)
          {
            v23(v9, v6);
            return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v19, v5);
          }
          goto LABEL_12;
        }
LABEL_14:
        __break(1u);
        return result;
      }
    }
  }
LABEL_12:
  (*(void (**)(char *, uint64_t))(v13 + 8))(v19, v5);
  uint64_t v24 = v30;
  int8x8_t v25 = v9;
  unint64_t v26 = v29;
  v29(v30, v25, v5);
  uint64_t v27 = v31;
  (*v22)(v31, v6);
  v26(v27, v24, v5);
  uint64_t result = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v27, 0, 1, v5);
  unsigned char *v32 = 1;
  return result;
}

uint64_t find #1 <A>(_:) in closure #1 in AccessibilityFocusStoreLocation.resolve()@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a2[3];
  unsigned __int16 v6 = *(_WORD *)((char *)a2 + *(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *a2 + 40));
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = AccessibilityTechnologySet.list.getter(v6);
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v11 = MEMORY[0x1E4FBC870];
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = 0;
  uint64_t v10 = MEMORY[0x1E4FBC870];
  uint64_t v11 = MEMORY[0x1E4FBC870];
  do
  {
    uint64_t v13 = v11;
    if (!*(void *)(v5 + 16))
    {
LABEL_3:
      uint64_t v12 = v10;
      goto LABEL_4;
    }
    unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(*(unsigned char *)(v7 + v9 + 32));
    uint64_t v12 = v10;
    if (v15)
    {
      uint64_t v16 = *(void *)(*(void *)(v5 + 56) + 8 * v14);
      if (!*(void *)(v16 + 16)) {
        goto LABEL_3;
      }
      uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
      uint64_t v12 = v10;
      if (v18)
      {
        uint64_t v12 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
        swift_bridgeObjectRetain();
      }
    }
LABEL_4:
    ++v9;
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized Set.union<A>(_:)(v12, v13);
    swift_bridgeObjectRelease();
  }
  while (v8 != v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
LABEL_12:
  int64_t v20 = 0;
  uint64_t v21 = v11 + 56;
  uint64_t v22 = 1 << *(unsigned char *)(v11 + 32);
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  else {
    uint64_t v23 = -1;
  }
  unint64_t v24 = v23 & *(void *)(v11 + 56);
  int64_t v25 = (unint64_t)(v22 + 63) >> 6;
  while (1)
  {
    while (1)
    {
      if (v24)
      {
        unint64_t v26 = __clz(__rbit64(v24));
        v24 &= v24 - 1;
        unint64_t v27 = v26 | (v20 << 6);
      }
      else
      {
        int64_t v28 = v20 + 1;
        if (__OFADD__(v20, 1))
        {
          __break(1u);
LABEL_44:
          __break(1u);
          return result;
        }
        if (v28 >= v25) {
          goto LABEL_42;
        }
        unint64_t v29 = *(void *)(v21 + 8 * v28);
        ++v20;
        if (!v29)
        {
          int64_t v20 = v28 + 1;
          if (v28 + 1 >= v25) {
            goto LABEL_42;
          }
          unint64_t v29 = *(void *)(v21 + 8 * v20);
          if (!v29)
          {
            int64_t v20 = v28 + 2;
            if (v28 + 2 >= v25) {
              goto LABEL_42;
            }
            unint64_t v29 = *(void *)(v21 + 8 * v20);
            if (!v29)
            {
              int64_t v30 = v28 + 3;
              if (v30 >= v25)
              {
LABEL_42:
                swift_release();
                uint64_t v42 = type metadata accessor for AccessibilityFocusStore.Entry();
                uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56);
                uint64_t v41 = v42;
                uint64_t v39 = a4;
                uint64_t v40 = 1;
                goto LABEL_39;
              }
              unint64_t v29 = *(void *)(v21 + 8 * v30);
              if (!v29)
              {
                while (1)
                {
                  int64_t v20 = v30 + 1;
                  if (__OFADD__(v30, 1)) {
                    goto LABEL_44;
                  }
                  if (v20 >= v25) {
                    goto LABEL_42;
                  }
                  unint64_t v29 = *(void *)(v21 + 8 * v20);
                  ++v30;
                  if (v29) {
                    goto LABEL_31;
                  }
                }
              }
              int64_t v20 = v30;
            }
          }
        }
LABEL_31:
        unint64_t v24 = (v29 - 1) & v29;
        unint64_t v27 = __clz(__rbit64(v29)) + (v20 << 6);
      }
      Swift::UInt v31 = *(void *)(*(void *)(v11 + 48) + 8 * v27);
      uint64_t result = type metadata accessor for AccessibilityFocusStore.Entry();
      uint64_t v32 = *(void *)(a3 + *(int *)(result + 40));
      if (*(void *)(v32 + 16))
      {
        uint64_t v33 = result;
        Hasher.init(_seed:)();
        Hasher._combine(_:)(v31);
        uint64_t result = Hasher._finalize()();
        uint64_t v34 = -1 << *(unsigned char *)(v32 + 32);
        unint64_t v35 = result & ~v34;
        if ((*(void *)(v32 + 56 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35)) {
          break;
        }
      }
    }
    uint64_t v36 = *(void *)(v32 + 48);
    if (*(void *)(v36 + 8 * v35) == v31) {
      break;
    }
    uint64_t v37 = ~v34;
    while (1)
    {
      unint64_t v35 = (v35 + 1) & v37;
      if (((*(void *)(v32 + 56 + ((v35 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v35) & 1) == 0) {
        break;
      }
      if (*(void *)(v36 + 8 * v35) == v31) {
        goto LABEL_38;
      }
    }
  }
LABEL_38:
  swift_release();
  uint64_t v43 = *(void *)(v33 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v43 + 16))(a4, a3, v33);
  uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
  uint64_t v39 = a4;
  uint64_t v40 = 0;
  uint64_t v41 = v33;
LABEL_39:

  return v38(v39, v40, 1, v41);
}

void AccessibilityFocusStoreLocation.__allocating_init()()
{
}

uint64_t AccessibilityFocusStoreLocation.__ivar_destroyer()
{
  uint64_t v1 = *(void *)v0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  (*(void (**)(char *, void))(*(void *)(*(void *)(v1
                                                                 + class metadata base offset for AccessibilityFocusStoreLocation)
                                                     - 8)
                                         + 8))(&v0[*(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *(void *)v0 + 32)], *(void *)(v1 + class metadata base offset for AccessibilityFocusStoreLocation));
  uint64_t v2 = &v0[*(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *(void *)v0 + 48)];
  swift_getTupleTypeMetadata2();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  uint64_t v4 = &v0[*(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *(void *)v0 + 56)];
  type metadata accessor for AccessibilityFocusStore.Entry();
  uint64_t v5 = type metadata accessor for Optional();
  unsigned __int16 v6 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

char *AccessibilityFocusStoreLocation.deinit()
{
  uint64_t v1 = *v0;
  uint64_t v2 = (char *)AnyLocation.deinit();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_weakDestroy();
  (*(void (**)(char *, void))(*(void *)(*(void *)(v1
                                                                 + class metadata base offset for AccessibilityFocusStoreLocation)
                                                     - 8)
                                         + 8))(&v2[*(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *(void *)v2 + 32)], *(void *)(v1 + class metadata base offset for AccessibilityFocusStoreLocation));
  uint64_t v3 = &v2[*(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *(void *)v2 + 48)];
  swift_getTupleTypeMetadata2();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = &v2[*(void *)(class metadata base offset for AccessibilityFocusStoreLocation + *(void *)v2 + 56)];
  type metadata accessor for AccessibilityFocusStore.Entry();
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  return v2;
}

uint64_t AccessibilityFocusStoreLocation.__deallocating_deinit()
{
  AccessibilityFocusStoreLocation.deinit();

  return swift_deallocClassInstance();
}

void *assignWithCopy for AccessibilityFocusStore(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessibilityFocusStore(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessibilityFocusStore.Entry(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    uint64_t *v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v11 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v10 = *v11;
    *(void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t initializeWithTake for AccessibilityFocusStore.Entry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  *(void *)(((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

ValueMetadata *type metadata accessor for AccessibilityFocusStoreList.Key()
{
  return &type metadata for AccessibilityFocusStoreList.Key;
}

uint64_t protocol witness for Location.wasRead.getter in conformance AccessibilityFocusStoreLocation<A>()
{
  return AccessibilityFocusStoreLocation.wasRead.getter() & 1;
}

uint64_t protocol witness for Location.wasRead.setter in conformance AccessibilityFocusStoreLocation<A>(uint64_t a1)
{
  return AccessibilityFocusStoreLocation.wasRead.setter(a1);
}

uint64_t (*protocol witness for Location.wasRead.modify in conformance AccessibilityFocusStoreLocation<A>(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = *v1;
  *(unsigned char *)(a1 + 8) = AccessibilityFocusStoreLocation.wasRead.getter() & 1;
  return protocol witness for Location.wasRead.modify in conformance AccessibilityFocusStoreLocation<A>;
}

uint64_t protocol witness for Location.wasRead.modify in conformance AccessibilityFocusStoreLocation<A>(uint64_t a1)
{
  return AccessibilityFocusStoreLocation.wasRead.setter(*(unsigned __int8 *)(a1 + 8));
}

uint64_t protocol witness for Location.get() in conformance AccessibilityFocusStoreLocation<A>@<X0>(uint64_t a1@<X8>)
{
  return AccessibilityFocusStoreLocation.get()(a1);
}

uint64_t protocol witness for Location.set(_:transaction:) in conformance AccessibilityFocusStoreLocation<A>(uint64_t a1)
{
  return AccessibilityFocusStoreLocation.set(_:transaction:)(a1);
}

BOOL protocol witness for Location.update() in conformance AccessibilityFocusStoreLocation<A>(uint64_t a1)
{
  return AccessibilityFocusStoreLocation.update()(a1);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance AccessibilityFocusStoreList.Key(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t (*AccessibilityFocusStoreUpdateAction.init<A>(prototype:)(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 32))(v8 + v7, a1, a2);
  return partial apply for closure #1 in AccessibilityFocusStoreUpdateAction.init<A>(prototype:);
}

uint64_t closure #1 in AccessibilityFocusStoreUpdateAction.init<A>(prototype:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AccessibilityFocusStore.Entry();
  uint64_t v13 = type metadata accessor for Optional();
  double v14 = MEMORY[0x1F4188790](v13 - 8);
  uint64_t v16 = (char *)&v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a4, a5, v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v11, a5);
  uint64_t v17 = type metadata accessor for AccessibilityFocusStore.Entry();
  *(void *)&v16[*(int *)(v17 + 36)] = a1;
  *(void *)&v16[*(int *)(v17 + 40)] = a2;
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v16, 0, 1, v12);
  type metadata accessor for AccessibilityFocusStore.Key();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  return PropertyList.subscript.setter();
}

uint64_t AccessibilityFocusStoreListModifier.ItemFilter.accessibilityNodeList.getter@<X0>(unint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = HIDWORD(a1);
  if (*MEMORY[0x1E4F4E7A0] == result)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t Value = (void *)AGGraphGetValue();
    uint64_t v5 = Value[1];
    *a2 = *Value;
    a2[1] = v5;
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t AccessibilityFocusStoreListModifier.ItemFilter.updateValue()(uint64_t a1)
{
  uint64_t v170 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(char **)(a1 + 16);
  uint64_t v3 = *((void *)v2 - 1);
  MEMORY[0x1F4188790](a1);
  uint64_t v144 = &v131[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = *(char **)(v5 + 24);
  uint64_t v7 = type metadata accessor for AccessibilityFocusStoreListModifier();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = &v131[-v9];
  uint64_t Value = (unsigned char *)AGGraphGetValue();
  unint64_t v12 = MEMORY[0x1E4FBC860];
  if ((*Value & 1) == 0)
  {
    uint64_t v167 = (char *)MEMORY[0x1E4FBC860];
    return AGGraphSetOutputValue();
  }
  uint64_t v136 = v3;
  uint64_t v154 = v2;
  long long v153 = v6;
  unint64_t v13 = *v1;
  uint64_t v14 = v1[3];
  uint64_t v15 = AGGraphGetValue();
  uint64_t v133 = v16;
  uint64_t v138 = v8;
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v137 = v7;
  v17(v10, v15, v7);
  char v18 = v153;
  uint64_t v19 = v154;
  AccessibilityFocusStoreListModifier.ItemFilter.accessibilityNodeList.getter(v13, &v167);
  if (v167) {
    unint64_t v12 = (unint64_t)v167;
  }
  swift_bridgeObjectRetain();
  unint64_t v20 = swift_bridgeObjectRetain();
  uint64_t v21 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF8UniqueIDVs5NeverOTg503_s7d87UI9Transform33_725F422359ECCADDAF5CC82A425651EELLV11updateScope8nodeList7changedSbAA017fg11L0V_SbtFAA8H62IDVAA0nO0Ccfu_33_2f504ee4f610784b00e9281caac81f7cAmKTf3nnnpk_nTf1cn_n(v20);
  uint64_t v135 = 0;
  unint64_t v156 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v1[3] = (unint64_t)v21;
  BOOL v132 = specialized static Array<A>.== infix(_:_:)((uint64_t)v21, v14);
  swift_bridgeObjectRelease();
  uint64_t v22 = v1;
  if (one-time initialization token for focusSupportingTechnologies != -1) {
    goto LABEL_167;
  }
  while (1)
  {
    uint64_t v23 = static AccessibilityTechnology.focusSupportingTechnologies;
    uint64_t v140 = *(void *)(static AccessibilityTechnology.focusSupportingTechnologies + 16);
    if (!v140) {
      break;
    }
    unint64_t v24 = v156;
    unint64_t v146 = v156 & 0xFFFFFFFFFFFFFF8;
    if (v156 >> 62)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v155 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v155 = *(void *)((v156 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    unint64_t v25 = 0;
    uint64_t v142 = v23 + 32;
    unint64_t v151 = v24 & 0xC000000000000001;
    unint64_t v145 = v24 + 32;
    unint64_t v141 = MEMORY[0x1E4FBC868];
    int v150 = *MEMORY[0x1E4F4E7A0];
    uint64_t v162 = MEMORY[0x1E4FBC840] + 8;
    CGSize v149 = v10;
    uint64_t v148 = v22;
    uint64_t v139 = v23;
    while (1)
    {
      if (v25 >= *(void *)(v23 + 16)) {
        goto LABEL_166;
      }
      unint64_t v143 = v25;
      unsigned int v26 = *(unsigned __int8 *)(v142 + v25);
      if (v155) {
        break;
      }
LABEL_138:
      uint64_t v107 = v141;
      unint64_t v108 = specialized __RawDictionaryStorage.find<A>(_:)(v26);
      if (v109)
      {
        unint64_t v110 = v108;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v167 = (char *)v107;
        uint64_t v112 = v107;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized _NativeDictionary.copy()();
          uint64_t v112 = (uint64_t)v167;
        }
        unint64_t v141 = v112;
        specialized _NativeDictionary._delete(at:)(v110, v112);
        goto LABEL_144;
      }
LABEL_145:
      unint64_t v25 = v143 + 1;
      uint64_t v23 = v139;
      if (v143 + 1 == v140) {
        goto LABEL_159;
      }
    }
    int v27 = 1 << (v26 & 0xF);
    uint64_t v134 = *(unsigned __int8 *)(v142 + v25);
    if (v26 >= 0x10) {
      int v27 = 0;
    }
    int v152 = v27;
    swift_bridgeObjectRetain();
    unint64_t v28 = v156;
    unint64_t v29 = 0;
    int v147 = 4;
    while (2)
    {
      if (v151)
      {
        Swift::UInt v31 = (char *)MEMORY[0x18C117680](v29, v28);
      }
      else
      {
        if (v29 >= *(void *)(v146 + 16)) {
          goto LABEL_162;
        }
        Swift::UInt v31 = (char *)*(id *)(v145 + 8 * v29);
      }
      uint64_t v19 = v31;
      if (__OFADD__(v29++, 1)) {
        goto LABEL_161;
      }
      if (v150 == *((_DWORD *)v22 + 2) || (AGGraphGetValue(), (unint64_t v33 = swift_bridgeObjectRetain()) == 0))
      {
        uint64_t v34 = MEMORY[0x1E4FBC860];
        specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
        swift_bridgeObjectRelease();
        unint64_t v33 = specialized Dictionary.init(dictionaryLiteral:)(v34);
      }
      unint64_t v163 = v33;
      if (one-time initialization token for focusSupportingTechnologies != -1) {
        swift_once();
      }
      uint64_t v35 = AccessibilityTechnologySet.list.getter(static AccessibilityTechnologies.focusSupportingTechnologies & (unsigned __int16)v152);
      uint64_t v36 = v35;
      long long v161 = *(unint64_t **)(v35 + 16);
      if (!v161)
      {
        swift_bridgeObjectRetain();
        int64_t v30 = v19;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_15;
      }
      uint64_t v10 = &v19[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
      uint64_t v160 = v35 + 32;
      unint64_t v37 = v163;
      swift_bridgeObjectRetain();
      char v18 = v19;
      swift_beginAccess();
      uint64_t v22 = 0;
      unint64_t v158 = v29;
      char v157 = v19;
      uint64_t v159 = v36;
      while (1)
      {
        if (*(void *)(v37 + 16))
        {
          unint64_t v38 = specialized __RawDictionaryStorage.find<A>(_:)(*((unsigned char *)v22 + v160));
          unint64_t v37 = v163;
          if (v39) {
            break;
          }
        }
LABEL_32:
        uint64_t v22 = (unint64_t *)((char *)v22 + 1);
        if (v22 == v161) {
          goto LABEL_125;
        }
      }
      outlined init with copy of AccessibilityFocus.Target(*(void *)(v163 + 56) + 8 * v38, (uint64_t)&v167);
      outlined init with take of AccessibilityFocus.Target((uint64_t)&v167, (uint64_t)v165);
      uint64_t v40 = MEMORY[0x18C119DF0](v165);
      if (v40)
      {
        uint64_t v41 = (void *)v40;
        type metadata accessor for AccessibilityNode();
        id v42 = (id)swift_dynamicCastClass();
        swift_bridgeObjectRetain();
        if (v42)
        {
          outlined init with copy of AccessibilityFocus.Target((uint64_t)v165, (uint64_t)&v167);
          outlined destroy of AccessibilityFocus.Target((uint64_t)&v167);
LABEL_42:
          type metadata accessor for AccessibilityNode();
          long long v45 = v18;
          id v46 = v42;
          char v47 = static NSObject.== infix(_:_:)();

          unint64_t v29 = v158;
          if (v47) {
            goto LABEL_123;
          }
          goto LABEL_45;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      outlined init with copy of AccessibilityFocus.Target((uint64_t)v165, (uint64_t)&v167);
      uint64_t v43 = (void *)MEMORY[0x18C119DF0](&v167);
      if (v43)
      {
        long long v44 = v43;
        id v42 = objc_msgSend(v43, sel_accessibilityNodeForPlatformElement);

        outlined destroy of AccessibilityFocus.Target((uint64_t)&v167);
        if (v42) {
          goto LABEL_42;
        }
      }
      else
      {
        outlined destroy of AccessibilityFocus.Target((uint64_t)&v167);
      }
LABEL_45:
      uint64_t v48 = *(void *)v10;
      uint64_t v49 = *(void *)(*(void *)v10 + 16);
      if (!v49)
      {
        swift_bridgeObjectRetain();
LABEL_57:
        swift_bridgeObjectRelease();
        uint64_t v57 = v159;
        break;
      }
      swift_bridgeObjectRetain();
      int v50 = (uint64_t *)(v48 + 40 * v49);
      while (1)
      {
        if (v49 > *(void *)(v48 + 16))
        {
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          swift_bridgeObjectRelease();
          unint64_t v116 = v141;
          goto LABEL_150;
        }
        uint64_t v51 = *v50;
        uint64_t v167 = (char *)*(v50 - 1);
        uint64_t v168 = v51;
        long long v52 = (void *)AccessibilityAttachment.platformElement.getter();

        if (v52) {
          break;
        }
        v50 -= 5;
        if (!--v49) {
          goto LABEL_57;
        }
      }
      if (v49 > *(void *)(v48 + 16)) {
        goto LABEL_163;
      }
      uint64_t v53 = *v50;
      uint64_t v167 = (char *)*(v50 - 1);
      uint64_t v168 = v53;
      uint64_t v54 = AccessibilityAttachment.platformElement.getter();
      if (!v54) {
        goto LABEL_171;
      }
      int v55 = (void *)v54;
      swift_bridgeObjectRelease();
      long long v56 = (void *)MEMORY[0x18C119DF0](v165);
      uint64_t v57 = v159;
      if (v56)
      {
        long long v58 = v56;

        if (v58 == v55)
        {
LABEL_124:
          outlined destroy of AccessibilityFocus.Target((uint64_t)v165);
          swift_bridgeObjectRelease();
          if (v22 != v161)
          {
            if ((unint64_t)v22 >= *(void *)(v57 + 16)) {
              goto LABEL_164;
            }
            uint64_t v10 = v149;
            if (!*(void *)(v163 + 16)) {
              goto LABEL_170;
            }
            unint64_t v101 = specialized __RawDictionaryStorage.find<A>(_:)(*((unsigned char *)v22 + v160));
            if ((v102 & 1) == 0) {
              goto LABEL_170;
            }
            outlined init with copy of AccessibilityFocus.Target(*(void *)(v163 + 56) + 8 * v101, (uint64_t)v166);
            outlined init with take of AccessibilityFocus.Target((uint64_t)v166, (uint64_t)&v167);
            int v103 = AccessibilityFocus.Target.match(focusStoreNode:)(v18);
            outlined destroy of AccessibilityFocus.Target((uint64_t)&v167);
            if (v103 == 4) {
              goto LABEL_170;
            }

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            int v104 = v147;
            uint64_t v22 = v148;
            if (v147 == 4)
            {
            }
            else
            {
              BOOL v105 = specialized AccessibilityFocus.Match.takesPriority(over:)(v103);

              if (!v105) {
                int v103 = v104;
              }
            }
            uint64_t v19 = v154;
            char v18 = v153;
            unint64_t v28 = v156;
            if ((_BYTE)v103)
            {
              int v147 = v103;
              goto LABEL_16;
            }
            swift_bridgeObjectRelease();
            char v106 = 0;
            LOBYTE(v26) = v134;
            goto LABEL_143;
          }
LABEL_125:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v10 = v149;
          uint64_t v22 = v148;
LABEL_15:
          swift_bridgeObjectRelease();

          uint64_t v19 = v154;
          char v18 = v153;
          unint64_t v28 = v156;
LABEL_16:
          if (v29 == v155)
          {
            swift_bridgeObjectRelease();
            char v106 = v147;
            LOBYTE(v26) = v134;
            if (v147 == 4) {
              goto LABEL_138;
            }
LABEL_143:
            uint64_t v113 = (char *)v141;
            char v114 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v167 = v113;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v106, v26, v114);
            unint64_t v141 = (unint64_t)v167;
LABEL_144:
            swift_bridgeObjectRelease();
            goto LABEL_145;
          }
          continue;
        }
      }
      else
      {
      }
      break;
    }
    uint64_t v59 = MEMORY[0x18C119DF0](v165);
    if (v59)
    {
      long long v60 = (void *)v59;
      type metadata accessor for AccessibilityNode();
      uint64_t v61 = swift_dynamicCastClass();
      if (v61)
      {
        id v62 = (id)v61;
        outlined init with copy of AccessibilityFocus.Target((uint64_t)v165, (uint64_t)&v167);
        outlined destroy of AccessibilityFocus.Target((uint64_t)&v167);
LABEL_70:
        type metadata accessor for NSObject();
        char v68 = static NSObject.== infix(_:_:)();

        if (v68) {
          goto LABEL_124;
        }
        goto LABEL_71;
      }
    }
    outlined init with copy of AccessibilityFocus.Target((uint64_t)v165, (uint64_t)&v167);
    long long v63 = (void *)MEMORY[0x18C119DF0](&v167);
    if (v63)
    {
      long long v64 = v63;
      id v62 = objc_msgSend(v63, sel_accessibilityNodeForPlatformElement);

      outlined destroy of AccessibilityFocus.Target((uint64_t)&v167);
      if (v62) {
        goto LABEL_70;
      }
    }
    else
    {
      outlined destroy of AccessibilityFocus.Target((uint64_t)&v167);
    }
    uint64_t v65 = MEMORY[0x18C119DF0](v165);
    if (v65)
    {
      double v66 = (void *)v65;
      swift_getObjectType();
      id v67 = objc_msgSend(v66, sel_accessibilityNodeForPlatformElement);
      if (v67)
      {
        id v62 = v67;

        uint64_t v57 = v159;
        goto LABEL_70;
      }
      uint64_t v167 = 0;
      MEMORY[0x1F4188790](0);
      *(void *)&v131[-16] = &v167;
      PlatformAccessibilityElementProtocol<>.traverseAncestors(_:)(closure #1 in AccessibilityFocus.Target.ancestorAccessibilityNode.getterpartial apply);

      id v62 = v167;
      uint64_t v57 = v159;
      if (v167) {
        goto LABEL_70;
      }
    }
LABEL_71:
    uint64_t v69 = MEMORY[0x18C119DF0](v165);
    if (v69)
    {
      double v70 = (void *)v69;
      type metadata accessor for AccessibilityNode();
      uint64_t v71 = swift_dynamicCastClass();
      if (v71)
      {
        uint64_t v19 = (char *)v71;
        outlined init with copy of AccessibilityFocus.Target((uint64_t)v165, (uint64_t)&v167);
        outlined destroy of AccessibilityFocus.Target((uint64_t)&v167);
        goto LABEL_83;
      }
    }
    outlined init with copy of AccessibilityFocus.Target((uint64_t)v165, (uint64_t)&v167);
    double v72 = (void *)MEMORY[0x18C119DF0](&v167);
    if (v72)
    {
      uint64_t v73 = v72;
      uint64_t v19 = (char *)objc_msgSend(v72, sel_accessibilityNodeForPlatformElement);

      outlined destroy of AccessibilityFocus.Target((uint64_t)&v167);
      if (v19) {
        goto LABEL_83;
      }
    }
    else
    {
      outlined destroy of AccessibilityFocus.Target((uint64_t)&v167);
    }
    uint64_t v74 = MEMORY[0x18C119DF0](v165);
    if (!v74) {
      goto LABEL_119;
    }
    double v75 = (void *)v74;
    swift_getObjectType();
    long long v76 = (char *)objc_msgSend(v75, sel_accessibilityNodeForPlatformElement);
    if (!v76)
    {
      uint64_t v167 = 0;
      MEMORY[0x1F4188790](0);
      *(void *)&v131[-16] = &v167;
      PlatformAccessibilityElementProtocol<>.traverseAncestors(_:)((uint64_t (*)(void))partial apply for closure #1 in AccessibilityFocus.Target.ancestorAccessibilityNode.getter);

      uint64_t v19 = v167;
      if (v167) {
        goto LABEL_83;
      }
LABEL_119:
      uint64_t v19 = v157;
LABEL_31:
      outlined destroy of AccessibilityFocus.Target((uint64_t)v165);
      swift_bridgeObjectRelease();
      unint64_t v37 = v163;
      goto LABEL_32;
    }
    uint64_t v19 = v76;

LABEL_83:
    uint64_t v77 = *(void *)v10;
    uint64_t v78 = *(void *)(*(void *)v10 + 16);
    if (v78)
    {
      double v79 = v19;
      swift_bridgeObjectRetain();
      double v80 = (uint64_t *)(v77 + 40 * v78);
      while (1)
      {
        if (v78 > *(void *)(v77 + 16)) {
          goto LABEL_158;
        }
        uint64_t v81 = *v80;
        uint64_t v167 = (char *)*(v80 - 1);
        uint64_t v168 = v81;
        double v82 = (void *)AccessibilityAttachment.platformElement.getter();

        if (v82) {
          break;
        }
        v80 -= 5;
        if (!--v78) {
          goto LABEL_93;
        }
      }
      if (v78 > *(void *)(v77 + 16)) {
        goto LABEL_165;
      }
      uint64_t v84 = *v80;
      uint64_t v167 = (char *)*(v80 - 1);
      uint64_t v168 = v84;
      uint64_t v85 = AccessibilityAttachment.platformElement.getter();
      if (!v85) {
        goto LABEL_172;
      }
      long long v86 = (char *)v85;
      swift_bridgeObjectRelease();
    }
    else
    {
      CGSize v83 = v19;
      swift_bridgeObjectRetain();
LABEL_93:
      swift_bridgeObjectRelease();
      long long v86 = v18;
    }

    if (v19 == v86)
    {
      long long v87 = v19;
LABEL_122:

      unint64_t v29 = v158;
      uint64_t v19 = v157;
LABEL_123:
      uint64_t v57 = v159;
      goto LABEL_124;
    }
    long long v87 = v19;
    while (2)
    {
      if (objc_msgSend(v87, sel_respondsToSelector_, sel_accessibilityContainer))
      {
        if (objc_msgSend(v87, sel_accessibilityContainer))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          memset(v166, 0, sizeof(v166));
        }
        outlined init with take of Any?((uint64_t)v166, (uint64_t)&v167, (uint64_t)&lazy cache variable for type metadata for Any?, v162, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Attribute<AccessibilityFocusStoreList>);
        if (v169)
        {
          type metadata accessor for NSObject & PlatformAccessibilityElementProtocol();
          if (swift_dynamicCast())
          {

            long long v87 = v164;
            goto LABEL_109;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v167);
        }
      }
      self;
      uint64_t v90 = swift_dynamicCastObjCClass();
      if (!v90)
      {

LABEL_30:
        unint64_t v29 = v158;
        uint64_t v19 = v157;
        goto LABEL_31;
      }
      long long v91 = (void *)v90;
      long long v92 = v87;
      long long v87 = (char *)objc_msgSend(v91, sel_superview);

      if (!v87)
      {
        long long v87 = v19;
        goto LABEL_30;
      }
LABEL_109:
      uint64_t v93 = *(void *)v10;
      uint64_t v94 = *(void *)(*(void *)v10 + 16);
      if (!v94)
      {
        long long v88 = v87;
        swift_bridgeObjectRetain();
LABEL_97:
        swift_bridgeObjectRelease();
        long long v89 = v18;
LABEL_98:

        if (v87 == v89) {
          goto LABEL_122;
        }
        continue;
      }
      break;
    }
    long long v95 = v87;
    swift_bridgeObjectRetain();
    uint64_t v96 = (uint64_t *)(v93 + 40 * v94);
    while (1)
    {
      if (v94 > *(void *)(v93 + 16))
      {
        __break(1u);
        goto LABEL_149;
      }
      uint64_t v97 = *v96;
      uint64_t v167 = (char *)*(v96 - 1);
      uint64_t v168 = v97;
      uint64_t v98 = (void *)AccessibilityAttachment.platformElement.getter();

      if (v98) {
        break;
      }
      v96 -= 5;
      if (!--v94) {
        goto LABEL_97;
      }
    }
    if (v94 <= *(void *)(v93 + 16))
    {
      uint64_t v99 = *v96;
      uint64_t v167 = (char *)*(v96 - 1);
      uint64_t v168 = v99;
      uint64_t v100 = AccessibilityAttachment.platformElement.getter();
      if (v100)
      {
        long long v89 = (char *)v100;
        swift_bridgeObjectRelease();
        goto LABEL_98;
      }
      __break(1u);
LABEL_170:
      __break(1u);
LABEL_171:
      __break(1u);
LABEL_172:
      __break(1u);
    }
    __break(1u);
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    swift_once();
  }
LABEL_149:
  unint64_t v116 = MEMORY[0x1E4FBC868];
LABEL_150:
  if (specialized static Dictionary<>.== infix(_:_:)(v116, v22[2]))
  {
    if ((v133 & 1) == 0 && v132 && AGGraphGetOutputValue())
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v117 = v137;
      return (*(uint64_t (**)(char *, uint64_t))(v138 + 8))(v10, v117);
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    void v22[2] = v116;
  }
  uint64_t v118 = (uint64_t)v18;
  uint64_t v119 = v137;
  uint64_t v120 = (uint64_t)v144;
  (*(void (**)(unsigned char *, char *, char *))(v136 + 16))(v144, &v10[*(int *)(v137 + 36)], v19);
  AccessibilityFocusStoreUpdateAction.init<A>(prototype:)(v120, (uint64_t)v19, v118);
  uint64_t v122 = v121;
  DisplayList.Version.init(forUpdate:)();
  uint64_t v123 = v167;
  type metadata accessor for AccessibilityFocusState.Binding();
  uint64_t v124 = AccessibilityFocusState.Binding.propertyID.getter();
  unint64_t v125 = v156;
  double v126 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF7WeakBoxVyAHGs5NeverOTg503_s7d4UI17fg6CSgAA7hi16VyACGIeggr_AcGs5j120OIegnrzr_TR03_s7a4UI35c92FocusStoreListModifierV10ItemFilter33_2CCA6A140D82DC7D61A1924E7705DDD6LLV11updateValueyyFAA7ef7O29AA0C4D11CGAKSgcfu6_Tf3nnnpf_nTf1cn_n(v156);
  uint64_t v127 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF8UniqueIDVs5NeverOTg503_s7d87UI9Transform33_725F422359ECCADDAF5CC82A425651EELLV11updateScope8nodeList7changedSbAA017fg11L0V_SbtFAA8H62IDVAA0nO0Ccfu_33_2f504ee4f610784b00e9281caac81f7cAmKTf3nnnpk_nTf1cn_n(v125);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v128 = specialized Set.init<A>(_:)((uint64_t)v127);
  swift_bridgeObjectRelease();
  unint64_t v129 = v22[2];
  type metadata accessor for Attribute<AccessibilityFocusStoreList>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityFocusStoreList.Item>, (uint64_t)&type metadata for AccessibilityFocusStoreList.Item, MEMORY[0x1E4FBBE00]);
  uint64_t v130 = swift_allocObject();
  *(_OWORD *)(v130 + 16) = xmmword_18834BB80;
  *(void *)(v130 + 32) = v123;
  *(void *)(v130 + 40) = v124;
  *(void *)(v130 + 48) = partial apply for closure #1 in AccessibilityFocusStoreUpdateAction.init<A>(prototype:);
  *(void *)(v130 + 56) = v122;
  uint64_t v117 = v119;
  *(void *)(v130 + 64) = v126;
  *(void *)(v130 + 72) = v128;
  *(void *)(v130 + 80) = v129;
  uint64_t v167 = (char *)v130;
  swift_bridgeObjectRetain();
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v138 + 8))(v10, v117);
}